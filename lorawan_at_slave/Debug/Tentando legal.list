
Tentando legal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d0a8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c38  0801d1e8  0801d1e8  0001e1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801de20  0801de20  0001ee20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801def8  0801def8  0001f18c  2**0
                  CONTENTS
  5 .ARM          00000008  0801def8  0801def8  0001eef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801df00  0801df00  0001f18c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801df00  0801df00  0001ef00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0801df04  0801df04  0001ef04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000018c  20000000  0801df08  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001b38  2000018c  0801e094  0001f18c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20001cc4  0801e094  0001fcc4  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001f18c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000489e2  00000000  00000000  0001f1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a97d  00000000  00000000  00067b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003828  00000000  00000000  00072518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002ae3  00000000  00000000  00075d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d034  00000000  00000000  00078823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00045305  00000000  00000000  000a5857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9ec0  00000000  00000000  000eab5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001d4a1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f22c  00000000  00000000  001d4a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  001e3c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000018c 	.word	0x2000018c
 800015c:	00000000 	.word	0x00000000
 8000160:	0801d1d0 	.word	0x0801d1d0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000190 	.word	0x20000190
 800017c:	0801d1d0 	.word	0x0801d1d0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_d2iz>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae4:	d215      	bcs.n	8000b12 <__aeabi_d2iz+0x36>
 8000ae6:	d511      	bpl.n	8000b0c <__aeabi_d2iz+0x30>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d912      	bls.n	8000b18 <__aeabi_d2iz+0x3c>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d105      	bne.n	8000b24 <__aeabi_d2iz+0x48>
 8000b18:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	bf08      	it	eq
 8000b1e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_frsub>:
 8000bcc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd0:	e002      	b.n	8000bd8 <__addsf3>
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_fsub>:
 8000bd4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bd8 <__addsf3>:
 8000bd8:	0042      	lsls	r2, r0, #1
 8000bda:	bf1f      	itttt	ne
 8000bdc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be0:	ea92 0f03 	teqne	r2, r3
 8000be4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bec:	d06a      	beq.n	8000cc4 <__addsf3+0xec>
 8000bee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bf6:	bfc1      	itttt	gt
 8000bf8:	18d2      	addgt	r2, r2, r3
 8000bfa:	4041      	eorgt	r1, r0
 8000bfc:	4048      	eorgt	r0, r1
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	bfb8      	it	lt
 8000c02:	425b      	neglt	r3, r3
 8000c04:	2b19      	cmp	r3, #25
 8000c06:	bf88      	it	hi
 8000c08:	4770      	bxhi	lr
 8000c0a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c16:	bf18      	it	ne
 8000c18:	4240      	negne	r0, r0
 8000c1a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c1e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c22:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c26:	bf18      	it	ne
 8000c28:	4249      	negne	r1, r1
 8000c2a:	ea92 0f03 	teq	r2, r3
 8000c2e:	d03f      	beq.n	8000cb0 <__addsf3+0xd8>
 8000c30:	f1a2 0201 	sub.w	r2, r2, #1
 8000c34:	fa41 fc03 	asr.w	ip, r1, r3
 8000c38:	eb10 000c 	adds.w	r0, r0, ip
 8000c3c:	f1c3 0320 	rsb	r3, r3, #32
 8000c40:	fa01 f103 	lsl.w	r1, r1, r3
 8000c44:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__addsf3+0x78>
 8000c4a:	4249      	negs	r1, r1
 8000c4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c50:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c54:	d313      	bcc.n	8000c7e <__addsf3+0xa6>
 8000c56:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5a:	d306      	bcc.n	8000c6a <__addsf3+0x92>
 8000c5c:	0840      	lsrs	r0, r0, #1
 8000c5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c62:	f102 0201 	add.w	r2, r2, #1
 8000c66:	2afe      	cmp	r2, #254	@ 0xfe
 8000c68:	d251      	bcs.n	8000d0e <__addsf3+0x136>
 8000c6a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c72:	bf08      	it	eq
 8000c74:	f020 0001 	biceq.w	r0, r0, #1
 8000c78:	ea40 0003 	orr.w	r0, r0, r3
 8000c7c:	4770      	bx	lr
 8000c7e:	0049      	lsls	r1, r1, #1
 8000c80:	eb40 0000 	adc.w	r0, r0, r0
 8000c84:	3a01      	subs	r2, #1
 8000c86:	bf28      	it	cs
 8000c88:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c8c:	d2ed      	bcs.n	8000c6a <__addsf3+0x92>
 8000c8e:	fab0 fc80 	clz	ip, r0
 8000c92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c96:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c9e:	bfaa      	itet	ge
 8000ca0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca4:	4252      	neglt	r2, r2
 8000ca6:	4318      	orrge	r0, r3
 8000ca8:	bfbc      	itt	lt
 8000caa:	40d0      	lsrlt	r0, r2
 8000cac:	4318      	orrlt	r0, r3
 8000cae:	4770      	bx	lr
 8000cb0:	f092 0f00 	teq	r2, #0
 8000cb4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cb8:	bf06      	itte	eq
 8000cba:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cbe:	3201      	addeq	r2, #1
 8000cc0:	3b01      	subne	r3, #1
 8000cc2:	e7b5      	b.n	8000c30 <__addsf3+0x58>
 8000cc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	bf18      	it	ne
 8000cce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd2:	d021      	beq.n	8000d18 <__addsf3+0x140>
 8000cd4:	ea92 0f03 	teq	r2, r3
 8000cd8:	d004      	beq.n	8000ce4 <__addsf3+0x10c>
 8000cda:	f092 0f00 	teq	r2, #0
 8000cde:	bf08      	it	eq
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	4770      	bx	lr
 8000ce4:	ea90 0f01 	teq	r0, r1
 8000ce8:	bf1c      	itt	ne
 8000cea:	2000      	movne	r0, #0
 8000cec:	4770      	bxne	lr
 8000cee:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf2:	d104      	bne.n	8000cfe <__addsf3+0x126>
 8000cf4:	0040      	lsls	r0, r0, #1
 8000cf6:	bf28      	it	cs
 8000cf8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cfc:	4770      	bx	lr
 8000cfe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d02:	bf3c      	itt	cc
 8000d04:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d08:	4770      	bxcc	lr
 8000d0a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d0e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d16:	4770      	bx	lr
 8000d18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d1c:	bf16      	itet	ne
 8000d1e:	4608      	movne	r0, r1
 8000d20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d24:	4601      	movne	r1, r0
 8000d26:	0242      	lsls	r2, r0, #9
 8000d28:	bf06      	itte	eq
 8000d2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d2e:	ea90 0f01 	teqeq	r0, r1
 8000d32:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_ui2f>:
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e004      	b.n	8000d48 <__aeabi_i2f+0x8>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_i2f>:
 8000d40:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d44:	bf48      	it	mi
 8000d46:	4240      	negmi	r0, r0
 8000d48:	ea5f 0c00 	movs.w	ip, r0
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d54:	4601      	mov	r1, r0
 8000d56:	f04f 0000 	mov.w	r0, #0
 8000d5a:	e01c      	b.n	8000d96 <__aeabi_l2f+0x2a>

08000d5c <__aeabi_ul2f>:
 8000d5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e00a      	b.n	8000d80 <__aeabi_l2f+0x14>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_l2f>:
 8000d6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d78:	d502      	bpl.n	8000d80 <__aeabi_l2f+0x14>
 8000d7a:	4240      	negs	r0, r0
 8000d7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d80:	ea5f 0c01 	movs.w	ip, r1
 8000d84:	bf02      	ittt	eq
 8000d86:	4684      	moveq	ip, r0
 8000d88:	4601      	moveq	r1, r0
 8000d8a:	2000      	moveq	r0, #0
 8000d8c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d90:	bf08      	it	eq
 8000d92:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d96:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9a:	fabc f28c 	clz	r2, ip
 8000d9e:	3a08      	subs	r2, #8
 8000da0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da4:	db10      	blt.n	8000dc8 <__aeabi_l2f+0x5c>
 8000da6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000daa:	4463      	add	r3, ip
 8000dac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db0:	f1c2 0220 	rsb	r2, r2, #32
 8000db4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000db8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dbc:	eb43 0002 	adc.w	r0, r3, r2
 8000dc0:	bf08      	it	eq
 8000dc2:	f020 0001 	biceq.w	r0, r0, #1
 8000dc6:	4770      	bx	lr
 8000dc8:	f102 0220 	add.w	r2, r2, #32
 8000dcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd0:	f1c2 0220 	rsb	r2, r2, #32
 8000dd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000ddc:	eb43 0002 	adc.w	r0, r3, r2
 8000de0:	bf08      	it	eq
 8000de2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de6:	4770      	bx	lr

08000de8 <__aeabi_fmul>:
 8000de8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df0:	bf1e      	ittt	ne
 8000df2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000df6:	ea92 0f0c 	teqne	r2, ip
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d06f      	beq.n	8000ee0 <__aeabi_fmul+0xf8>
 8000e00:	441a      	add	r2, r3
 8000e02:	ea80 0c01 	eor.w	ip, r0, r1
 8000e06:	0240      	lsls	r0, r0, #9
 8000e08:	bf18      	it	ne
 8000e0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e0e:	d01e      	beq.n	8000e4e <__aeabi_fmul+0x66>
 8000e10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000e20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e24:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e28:	bf3e      	ittt	cc
 8000e2a:	0049      	lslcc	r1, r1, #1
 8000e2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e30:	005b      	lslcc	r3, r3, #1
 8000e32:	ea40 0001 	orr.w	r0, r0, r1
 8000e36:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e3a:	2afd      	cmp	r2, #253	@ 0xfd
 8000e3c:	d81d      	bhi.n	8000e7a <__aeabi_fmul+0x92>
 8000e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e46:	bf08      	it	eq
 8000e48:	f020 0001 	biceq.w	r0, r0, #1
 8000e4c:	4770      	bx	lr
 8000e4e:	f090 0f00 	teq	r0, #0
 8000e52:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e56:	bf08      	it	eq
 8000e58:	0249      	lsleq	r1, r1, #9
 8000e5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e62:	3a7f      	subs	r2, #127	@ 0x7f
 8000e64:	bfc2      	ittt	gt
 8000e66:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e6e:	4770      	bxgt	lr
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	3a01      	subs	r2, #1
 8000e7a:	dc5d      	bgt.n	8000f38 <__aeabi_fmul+0x150>
 8000e7c:	f112 0f19 	cmn.w	r2, #25
 8000e80:	bfdc      	itt	le
 8000e82:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e86:	4770      	bxle	lr
 8000e88:	f1c2 0200 	rsb	r2, r2, #0
 8000e8c:	0041      	lsls	r1, r0, #1
 8000e8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e92:	f1c2 0220 	rsb	r2, r2, #32
 8000e96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e9e:	f140 0000 	adc.w	r0, r0, #0
 8000ea2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ea6:	bf08      	it	eq
 8000ea8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eac:	4770      	bx	lr
 8000eae:	f092 0f00 	teq	r2, #0
 8000eb2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000eb6:	bf02      	ittt	eq
 8000eb8:	0040      	lsleq	r0, r0, #1
 8000eba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ebe:	3a01      	subeq	r2, #1
 8000ec0:	d0f9      	beq.n	8000eb6 <__aeabi_fmul+0xce>
 8000ec2:	ea40 000c 	orr.w	r0, r0, ip
 8000ec6:	f093 0f00 	teq	r3, #0
 8000eca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0049      	lsleq	r1, r1, #1
 8000ed2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ed6:	3b01      	subeq	r3, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fmul+0xe6>
 8000eda:	ea41 010c 	orr.w	r1, r1, ip
 8000ede:	e78f      	b.n	8000e00 <__aeabi_fmul+0x18>
 8000ee0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee4:	ea92 0f0c 	teq	r2, ip
 8000ee8:	bf18      	it	ne
 8000eea:	ea93 0f0c 	teqne	r3, ip
 8000eee:	d00a      	beq.n	8000f06 <__aeabi_fmul+0x11e>
 8000ef0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ef4:	bf18      	it	ne
 8000ef6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	d1d8      	bne.n	8000eae <__aeabi_fmul+0xc6>
 8000efc:	ea80 0001 	eor.w	r0, r0, r1
 8000f00:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f04:	4770      	bx	lr
 8000f06:	f090 0f00 	teq	r0, #0
 8000f0a:	bf17      	itett	ne
 8000f0c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f10:	4608      	moveq	r0, r1
 8000f12:	f091 0f00 	teqne	r1, #0
 8000f16:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f1a:	d014      	beq.n	8000f46 <__aeabi_fmul+0x15e>
 8000f1c:	ea92 0f0c 	teq	r2, ip
 8000f20:	d101      	bne.n	8000f26 <__aeabi_fmul+0x13e>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	d10f      	bne.n	8000f46 <__aeabi_fmul+0x15e>
 8000f26:	ea93 0f0c 	teq	r3, ip
 8000f2a:	d103      	bne.n	8000f34 <__aeabi_fmul+0x14c>
 8000f2c:	024b      	lsls	r3, r1, #9
 8000f2e:	bf18      	it	ne
 8000f30:	4608      	movne	r0, r1
 8000f32:	d108      	bne.n	8000f46 <__aeabi_fmul+0x15e>
 8000f34:	ea80 0001 	eor.w	r0, r0, r1
 8000f38:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f44:	4770      	bx	lr
 8000f46:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f4a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f4e:	4770      	bx	lr

08000f50 <__aeabi_fdiv>:
 8000f50:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f58:	bf1e      	ittt	ne
 8000f5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f5e:	ea92 0f0c 	teqne	r2, ip
 8000f62:	ea93 0f0c 	teqne	r3, ip
 8000f66:	d069      	beq.n	800103c <__aeabi_fdiv+0xec>
 8000f68:	eba2 0203 	sub.w	r2, r2, r3
 8000f6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f70:	0249      	lsls	r1, r1, #9
 8000f72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f76:	d037      	beq.n	8000fe8 <__aeabi_fdiv+0x98>
 8000f78:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f84:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	bf38      	it	cc
 8000f8c:	005b      	lslcc	r3, r3, #1
 8000f8e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f92:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f96:	428b      	cmp	r3, r1
 8000f98:	bf24      	itt	cs
 8000f9a:	1a5b      	subcs	r3, r3, r1
 8000f9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fa0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fa4:	bf24      	itt	cs
 8000fa6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000faa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fb2:	bf24      	itt	cs
 8000fb4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fc0:	bf24      	itt	cs
 8000fc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	bf18      	it	ne
 8000fce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fd2:	d1e0      	bne.n	8000f96 <__aeabi_fdiv+0x46>
 8000fd4:	2afd      	cmp	r2, #253	@ 0xfd
 8000fd6:	f63f af50 	bhi.w	8000e7a <__aeabi_fmul+0x92>
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fe0:	bf08      	it	eq
 8000fe2:	f020 0001 	biceq.w	r0, r0, #1
 8000fe6:	4770      	bx	lr
 8000fe8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ff0:	327f      	adds	r2, #127	@ 0x7f
 8000ff2:	bfc2      	ittt	gt
 8000ff4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ff8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ffc:	4770      	bxgt	lr
 8000ffe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	3a01      	subs	r2, #1
 8001008:	e737      	b.n	8000e7a <__aeabi_fmul+0x92>
 800100a:	f092 0f00 	teq	r2, #0
 800100e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001012:	bf02      	ittt	eq
 8001014:	0040      	lsleq	r0, r0, #1
 8001016:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800101a:	3a01      	subeq	r2, #1
 800101c:	d0f9      	beq.n	8001012 <__aeabi_fdiv+0xc2>
 800101e:	ea40 000c 	orr.w	r0, r0, ip
 8001022:	f093 0f00 	teq	r3, #0
 8001026:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800102a:	bf02      	ittt	eq
 800102c:	0049      	lsleq	r1, r1, #1
 800102e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8001032:	3b01      	subeq	r3, #1
 8001034:	d0f9      	beq.n	800102a <__aeabi_fdiv+0xda>
 8001036:	ea41 010c 	orr.w	r1, r1, ip
 800103a:	e795      	b.n	8000f68 <__aeabi_fdiv+0x18>
 800103c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001040:	ea92 0f0c 	teq	r2, ip
 8001044:	d108      	bne.n	8001058 <__aeabi_fdiv+0x108>
 8001046:	0242      	lsls	r2, r0, #9
 8001048:	f47f af7d 	bne.w	8000f46 <__aeabi_fmul+0x15e>
 800104c:	ea93 0f0c 	teq	r3, ip
 8001050:	f47f af70 	bne.w	8000f34 <__aeabi_fmul+0x14c>
 8001054:	4608      	mov	r0, r1
 8001056:	e776      	b.n	8000f46 <__aeabi_fmul+0x15e>
 8001058:	ea93 0f0c 	teq	r3, ip
 800105c:	d104      	bne.n	8001068 <__aeabi_fdiv+0x118>
 800105e:	024b      	lsls	r3, r1, #9
 8001060:	f43f af4c 	beq.w	8000efc <__aeabi_fmul+0x114>
 8001064:	4608      	mov	r0, r1
 8001066:	e76e      	b.n	8000f46 <__aeabi_fmul+0x15e>
 8001068:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800106c:	bf18      	it	ne
 800106e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001072:	d1ca      	bne.n	800100a <__aeabi_fdiv+0xba>
 8001074:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001078:	f47f af5c 	bne.w	8000f34 <__aeabi_fmul+0x14c>
 800107c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001080:	f47f af3c 	bne.w	8000efc <__aeabi_fmul+0x114>
 8001084:	e75f      	b.n	8000f46 <__aeabi_fmul+0x15e>
 8001086:	bf00      	nop

08001088 <__aeabi_f2iz>:
 8001088:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800108c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001090:	d30f      	bcc.n	80010b2 <__aeabi_f2iz+0x2a>
 8001092:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001096:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800109a:	d90d      	bls.n	80010b8 <__aeabi_f2iz+0x30>
 800109c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010a4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010a8:	fa23 f002 	lsr.w	r0, r3, r2
 80010ac:	bf18      	it	ne
 80010ae:	4240      	negne	r0, r0
 80010b0:	4770      	bx	lr
 80010b2:	f04f 0000 	mov.w	r0, #0
 80010b6:	4770      	bx	lr
 80010b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010bc:	d101      	bne.n	80010c2 <__aeabi_f2iz+0x3a>
 80010be:	0242      	lsls	r2, r0, #9
 80010c0:	d105      	bne.n	80010ce <__aeabi_f2iz+0x46>
 80010c2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010c6:	bf08      	it	eq
 80010c8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010cc:	4770      	bx	lr
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	4770      	bx	lr

080010d4 <__aeabi_uldivmod>:
 80010d4:	b953      	cbnz	r3, 80010ec <__aeabi_uldivmod+0x18>
 80010d6:	b94a      	cbnz	r2, 80010ec <__aeabi_uldivmod+0x18>
 80010d8:	2900      	cmp	r1, #0
 80010da:	bf08      	it	eq
 80010dc:	2800      	cmpeq	r0, #0
 80010de:	bf1c      	itt	ne
 80010e0:	f04f 31ff 	movne.w	r1, #4294967295
 80010e4:	f04f 30ff 	movne.w	r0, #4294967295
 80010e8:	f000 b96a 	b.w	80013c0 <__aeabi_idiv0>
 80010ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80010f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010f4:	f000 f806 	bl	8001104 <__udivmoddi4>
 80010f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001100:	b004      	add	sp, #16
 8001102:	4770      	bx	lr

08001104 <__udivmoddi4>:
 8001104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001108:	9d08      	ldr	r5, [sp, #32]
 800110a:	460c      	mov	r4, r1
 800110c:	2b00      	cmp	r3, #0
 800110e:	d14e      	bne.n	80011ae <__udivmoddi4+0xaa>
 8001110:	4694      	mov	ip, r2
 8001112:	458c      	cmp	ip, r1
 8001114:	4686      	mov	lr, r0
 8001116:	fab2 f282 	clz	r2, r2
 800111a:	d962      	bls.n	80011e2 <__udivmoddi4+0xde>
 800111c:	b14a      	cbz	r2, 8001132 <__udivmoddi4+0x2e>
 800111e:	f1c2 0320 	rsb	r3, r2, #32
 8001122:	4091      	lsls	r1, r2
 8001124:	fa20 f303 	lsr.w	r3, r0, r3
 8001128:	fa0c fc02 	lsl.w	ip, ip, r2
 800112c:	4319      	orrs	r1, r3
 800112e:	fa00 fe02 	lsl.w	lr, r0, r2
 8001132:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001136:	fa1f f68c 	uxth.w	r6, ip
 800113a:	fbb1 f4f7 	udiv	r4, r1, r7
 800113e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001142:	fb07 1114 	mls	r1, r7, r4, r1
 8001146:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800114a:	fb04 f106 	mul.w	r1, r4, r6
 800114e:	4299      	cmp	r1, r3
 8001150:	d90a      	bls.n	8001168 <__udivmoddi4+0x64>
 8001152:	eb1c 0303 	adds.w	r3, ip, r3
 8001156:	f104 30ff 	add.w	r0, r4, #4294967295
 800115a:	f080 8112 	bcs.w	8001382 <__udivmoddi4+0x27e>
 800115e:	4299      	cmp	r1, r3
 8001160:	f240 810f 	bls.w	8001382 <__udivmoddi4+0x27e>
 8001164:	3c02      	subs	r4, #2
 8001166:	4463      	add	r3, ip
 8001168:	1a59      	subs	r1, r3, r1
 800116a:	fa1f f38e 	uxth.w	r3, lr
 800116e:	fbb1 f0f7 	udiv	r0, r1, r7
 8001172:	fb07 1110 	mls	r1, r7, r0, r1
 8001176:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800117a:	fb00 f606 	mul.w	r6, r0, r6
 800117e:	429e      	cmp	r6, r3
 8001180:	d90a      	bls.n	8001198 <__udivmoddi4+0x94>
 8001182:	eb1c 0303 	adds.w	r3, ip, r3
 8001186:	f100 31ff 	add.w	r1, r0, #4294967295
 800118a:	f080 80fc 	bcs.w	8001386 <__udivmoddi4+0x282>
 800118e:	429e      	cmp	r6, r3
 8001190:	f240 80f9 	bls.w	8001386 <__udivmoddi4+0x282>
 8001194:	4463      	add	r3, ip
 8001196:	3802      	subs	r0, #2
 8001198:	1b9b      	subs	r3, r3, r6
 800119a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800119e:	2100      	movs	r1, #0
 80011a0:	b11d      	cbz	r5, 80011aa <__udivmoddi4+0xa6>
 80011a2:	40d3      	lsrs	r3, r2
 80011a4:	2200      	movs	r2, #0
 80011a6:	e9c5 3200 	strd	r3, r2, [r5]
 80011aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ae:	428b      	cmp	r3, r1
 80011b0:	d905      	bls.n	80011be <__udivmoddi4+0xba>
 80011b2:	b10d      	cbz	r5, 80011b8 <__udivmoddi4+0xb4>
 80011b4:	e9c5 0100 	strd	r0, r1, [r5]
 80011b8:	2100      	movs	r1, #0
 80011ba:	4608      	mov	r0, r1
 80011bc:	e7f5      	b.n	80011aa <__udivmoddi4+0xa6>
 80011be:	fab3 f183 	clz	r1, r3
 80011c2:	2900      	cmp	r1, #0
 80011c4:	d146      	bne.n	8001254 <__udivmoddi4+0x150>
 80011c6:	42a3      	cmp	r3, r4
 80011c8:	d302      	bcc.n	80011d0 <__udivmoddi4+0xcc>
 80011ca:	4290      	cmp	r0, r2
 80011cc:	f0c0 80f0 	bcc.w	80013b0 <__udivmoddi4+0x2ac>
 80011d0:	1a86      	subs	r6, r0, r2
 80011d2:	eb64 0303 	sbc.w	r3, r4, r3
 80011d6:	2001      	movs	r0, #1
 80011d8:	2d00      	cmp	r5, #0
 80011da:	d0e6      	beq.n	80011aa <__udivmoddi4+0xa6>
 80011dc:	e9c5 6300 	strd	r6, r3, [r5]
 80011e0:	e7e3      	b.n	80011aa <__udivmoddi4+0xa6>
 80011e2:	2a00      	cmp	r2, #0
 80011e4:	f040 8090 	bne.w	8001308 <__udivmoddi4+0x204>
 80011e8:	eba1 040c 	sub.w	r4, r1, ip
 80011ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011f0:	fa1f f78c 	uxth.w	r7, ip
 80011f4:	2101      	movs	r1, #1
 80011f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80011fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011fe:	fb08 4416 	mls	r4, r8, r6, r4
 8001202:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001206:	fb07 f006 	mul.w	r0, r7, r6
 800120a:	4298      	cmp	r0, r3
 800120c:	d908      	bls.n	8001220 <__udivmoddi4+0x11c>
 800120e:	eb1c 0303 	adds.w	r3, ip, r3
 8001212:	f106 34ff 	add.w	r4, r6, #4294967295
 8001216:	d202      	bcs.n	800121e <__udivmoddi4+0x11a>
 8001218:	4298      	cmp	r0, r3
 800121a:	f200 80cd 	bhi.w	80013b8 <__udivmoddi4+0x2b4>
 800121e:	4626      	mov	r6, r4
 8001220:	1a1c      	subs	r4, r3, r0
 8001222:	fa1f f38e 	uxth.w	r3, lr
 8001226:	fbb4 f0f8 	udiv	r0, r4, r8
 800122a:	fb08 4410 	mls	r4, r8, r0, r4
 800122e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001232:	fb00 f707 	mul.w	r7, r0, r7
 8001236:	429f      	cmp	r7, r3
 8001238:	d908      	bls.n	800124c <__udivmoddi4+0x148>
 800123a:	eb1c 0303 	adds.w	r3, ip, r3
 800123e:	f100 34ff 	add.w	r4, r0, #4294967295
 8001242:	d202      	bcs.n	800124a <__udivmoddi4+0x146>
 8001244:	429f      	cmp	r7, r3
 8001246:	f200 80b0 	bhi.w	80013aa <__udivmoddi4+0x2a6>
 800124a:	4620      	mov	r0, r4
 800124c:	1bdb      	subs	r3, r3, r7
 800124e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001252:	e7a5      	b.n	80011a0 <__udivmoddi4+0x9c>
 8001254:	f1c1 0620 	rsb	r6, r1, #32
 8001258:	408b      	lsls	r3, r1
 800125a:	fa22 f706 	lsr.w	r7, r2, r6
 800125e:	431f      	orrs	r7, r3
 8001260:	fa20 fc06 	lsr.w	ip, r0, r6
 8001264:	fa04 f301 	lsl.w	r3, r4, r1
 8001268:	ea43 030c 	orr.w	r3, r3, ip
 800126c:	40f4      	lsrs	r4, r6
 800126e:	fa00 f801 	lsl.w	r8, r0, r1
 8001272:	0c38      	lsrs	r0, r7, #16
 8001274:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001278:	fbb4 fef0 	udiv	lr, r4, r0
 800127c:	fa1f fc87 	uxth.w	ip, r7
 8001280:	fb00 441e 	mls	r4, r0, lr, r4
 8001284:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001288:	fb0e f90c 	mul.w	r9, lr, ip
 800128c:	45a1      	cmp	r9, r4
 800128e:	fa02 f201 	lsl.w	r2, r2, r1
 8001292:	d90a      	bls.n	80012aa <__udivmoddi4+0x1a6>
 8001294:	193c      	adds	r4, r7, r4
 8001296:	f10e 3aff 	add.w	sl, lr, #4294967295
 800129a:	f080 8084 	bcs.w	80013a6 <__udivmoddi4+0x2a2>
 800129e:	45a1      	cmp	r9, r4
 80012a0:	f240 8081 	bls.w	80013a6 <__udivmoddi4+0x2a2>
 80012a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80012a8:	443c      	add	r4, r7
 80012aa:	eba4 0409 	sub.w	r4, r4, r9
 80012ae:	fa1f f983 	uxth.w	r9, r3
 80012b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80012b6:	fb00 4413 	mls	r4, r0, r3, r4
 80012ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80012be:	fb03 fc0c 	mul.w	ip, r3, ip
 80012c2:	45a4      	cmp	ip, r4
 80012c4:	d907      	bls.n	80012d6 <__udivmoddi4+0x1d2>
 80012c6:	193c      	adds	r4, r7, r4
 80012c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80012cc:	d267      	bcs.n	800139e <__udivmoddi4+0x29a>
 80012ce:	45a4      	cmp	ip, r4
 80012d0:	d965      	bls.n	800139e <__udivmoddi4+0x29a>
 80012d2:	3b02      	subs	r3, #2
 80012d4:	443c      	add	r4, r7
 80012d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80012da:	fba0 9302 	umull	r9, r3, r0, r2
 80012de:	eba4 040c 	sub.w	r4, r4, ip
 80012e2:	429c      	cmp	r4, r3
 80012e4:	46ce      	mov	lr, r9
 80012e6:	469c      	mov	ip, r3
 80012e8:	d351      	bcc.n	800138e <__udivmoddi4+0x28a>
 80012ea:	d04e      	beq.n	800138a <__udivmoddi4+0x286>
 80012ec:	b155      	cbz	r5, 8001304 <__udivmoddi4+0x200>
 80012ee:	ebb8 030e 	subs.w	r3, r8, lr
 80012f2:	eb64 040c 	sbc.w	r4, r4, ip
 80012f6:	fa04 f606 	lsl.w	r6, r4, r6
 80012fa:	40cb      	lsrs	r3, r1
 80012fc:	431e      	orrs	r6, r3
 80012fe:	40cc      	lsrs	r4, r1
 8001300:	e9c5 6400 	strd	r6, r4, [r5]
 8001304:	2100      	movs	r1, #0
 8001306:	e750      	b.n	80011aa <__udivmoddi4+0xa6>
 8001308:	f1c2 0320 	rsb	r3, r2, #32
 800130c:	fa20 f103 	lsr.w	r1, r0, r3
 8001310:	fa0c fc02 	lsl.w	ip, ip, r2
 8001314:	fa24 f303 	lsr.w	r3, r4, r3
 8001318:	4094      	lsls	r4, r2
 800131a:	430c      	orrs	r4, r1
 800131c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001320:	fa00 fe02 	lsl.w	lr, r0, r2
 8001324:	fa1f f78c 	uxth.w	r7, ip
 8001328:	fbb3 f0f8 	udiv	r0, r3, r8
 800132c:	fb08 3110 	mls	r1, r8, r0, r3
 8001330:	0c23      	lsrs	r3, r4, #16
 8001332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001336:	fb00 f107 	mul.w	r1, r0, r7
 800133a:	4299      	cmp	r1, r3
 800133c:	d908      	bls.n	8001350 <__udivmoddi4+0x24c>
 800133e:	eb1c 0303 	adds.w	r3, ip, r3
 8001342:	f100 36ff 	add.w	r6, r0, #4294967295
 8001346:	d22c      	bcs.n	80013a2 <__udivmoddi4+0x29e>
 8001348:	4299      	cmp	r1, r3
 800134a:	d92a      	bls.n	80013a2 <__udivmoddi4+0x29e>
 800134c:	3802      	subs	r0, #2
 800134e:	4463      	add	r3, ip
 8001350:	1a5b      	subs	r3, r3, r1
 8001352:	b2a4      	uxth	r4, r4
 8001354:	fbb3 f1f8 	udiv	r1, r3, r8
 8001358:	fb08 3311 	mls	r3, r8, r1, r3
 800135c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001360:	fb01 f307 	mul.w	r3, r1, r7
 8001364:	42a3      	cmp	r3, r4
 8001366:	d908      	bls.n	800137a <__udivmoddi4+0x276>
 8001368:	eb1c 0404 	adds.w	r4, ip, r4
 800136c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001370:	d213      	bcs.n	800139a <__udivmoddi4+0x296>
 8001372:	42a3      	cmp	r3, r4
 8001374:	d911      	bls.n	800139a <__udivmoddi4+0x296>
 8001376:	3902      	subs	r1, #2
 8001378:	4464      	add	r4, ip
 800137a:	1ae4      	subs	r4, r4, r3
 800137c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001380:	e739      	b.n	80011f6 <__udivmoddi4+0xf2>
 8001382:	4604      	mov	r4, r0
 8001384:	e6f0      	b.n	8001168 <__udivmoddi4+0x64>
 8001386:	4608      	mov	r0, r1
 8001388:	e706      	b.n	8001198 <__udivmoddi4+0x94>
 800138a:	45c8      	cmp	r8, r9
 800138c:	d2ae      	bcs.n	80012ec <__udivmoddi4+0x1e8>
 800138e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001392:	eb63 0c07 	sbc.w	ip, r3, r7
 8001396:	3801      	subs	r0, #1
 8001398:	e7a8      	b.n	80012ec <__udivmoddi4+0x1e8>
 800139a:	4631      	mov	r1, r6
 800139c:	e7ed      	b.n	800137a <__udivmoddi4+0x276>
 800139e:	4603      	mov	r3, r0
 80013a0:	e799      	b.n	80012d6 <__udivmoddi4+0x1d2>
 80013a2:	4630      	mov	r0, r6
 80013a4:	e7d4      	b.n	8001350 <__udivmoddi4+0x24c>
 80013a6:	46d6      	mov	lr, sl
 80013a8:	e77f      	b.n	80012aa <__udivmoddi4+0x1a6>
 80013aa:	4463      	add	r3, ip
 80013ac:	3802      	subs	r0, #2
 80013ae:	e74d      	b.n	800124c <__udivmoddi4+0x148>
 80013b0:	4606      	mov	r6, r0
 80013b2:	4623      	mov	r3, r4
 80013b4:	4608      	mov	r0, r1
 80013b6:	e70f      	b.n	80011d8 <__udivmoddi4+0xd4>
 80013b8:	3e02      	subs	r6, #2
 80013ba:	4463      	add	r3, ip
 80013bc:	e730      	b.n	8001220 <__udivmoddi4+0x11c>
 80013be:	bf00      	nop

080013c0 <__aeabi_idiv0>:
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop

080013c4 <LoRa_Send>:
#include "LoRa.h"
#include <stdio.h>

// Função fictícia para enviar dados via LoRa
int LoRa_Send(uint8_t *data, uint8_t length)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	70fb      	strb	r3, [r7, #3]
    // Implementação fictícia: substituir com código real para enviar dados via LoRa
    // Aqui você deveria adicionar o código que comunica com o hardware LoRa
    printf("Enviando dados: ");
 80013d0:	480e      	ldr	r0, [pc, #56]	@ (800140c <LoRa_Send+0x48>)
 80013d2:	f01a fffb 	bl	801c3cc <iprintf>
    for (int i = 0; i < length; i++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	e00a      	b.n	80013f2 <LoRa_Send+0x2e>
        printf("%02X ", data[i]);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	480a      	ldr	r0, [pc, #40]	@ (8001410 <LoRa_Send+0x4c>)
 80013e8:	f01a fff0 	bl	801c3cc <iprintf>
    for (int i = 0; i < length; i++) {
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3301      	adds	r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	dbf0      	blt.n	80013dc <LoRa_Send+0x18>
    }
    printf("\n");
 80013fa:	200a      	movs	r0, #10
 80013fc:	f01a fff8 	bl	801c3f0 <putchar>
    return 0; // Retorne 0 em caso de sucesso, ou um código de erro em caso de falha
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	0801d1e8 	.word	0x0801d1e8
 8001410:	0801d1fc 	.word	0x0801d1fc

08001414 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800141c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001420:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001422:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4313      	orrs	r3, r2
 800142a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800142c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001430:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4013      	ands	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001438:	68fb      	ldr	r3, [r7, #12]
}
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800144c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001450:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	43db      	mvns	r3, r3
 8001456:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800145a:	4013      	ands	r3, r2
 800145c:	660b      	str	r3, [r1, #96]	@ 0x60
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 800146c:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <MX_ADC_Init+0x94>)
 800146e:	4a24      	ldr	r2, [pc, #144]	@ (8001500 <MX_ADC_Init+0x98>)
 8001470:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001472:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <MX_ADC_Init+0x94>)
 8001474:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001478:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800147a:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <MX_ADC_Init+0x94>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001480:	4b1e      	ldr	r3, [pc, #120]	@ (80014fc <MX_ADC_Init+0x94>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001486:	4b1d      	ldr	r3, [pc, #116]	@ (80014fc <MX_ADC_Init+0x94>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800148c:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <MX_ADC_Init+0x94>)
 800148e:	2204      	movs	r2, #4
 8001490:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001492:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <MX_ADC_Init+0x94>)
 8001494:	2200      	movs	r2, #0
 8001496:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001498:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <MX_ADC_Init+0x94>)
 800149a:	2200      	movs	r2, #0
 800149c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800149e:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <MX_ADC_Init+0x94>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80014a4:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <MX_ADC_Init+0x94>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014aa:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <MX_ADC_Init+0x94>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <MX_ADC_Init+0x94>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <MX_ADC_Init+0x94>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <MX_ADC_Init+0x94>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014c6:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <MX_ADC_Init+0x94>)
 80014c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <MX_ADC_Init+0x94>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <MX_ADC_Init+0x94>)
 80014d6:	2207      	movs	r2, #7
 80014d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80014da:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <MX_ADC_Init+0x94>)
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <MX_ADC_Init+0x94>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	@ (80014fc <MX_ADC_Init+0x94>)
 80014ea:	f002 f95f 	bl	80037ac <HAL_ADC_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80014f4:	f000 fe08 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200001a8 	.word	0x200001a8
 8001500:	40012400 	.word	0x40012400

08001504 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <HAL_ADC_MspInit+0x24>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d103      	bne.n	800151e <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001516:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800151a:	f7ff ff7b 	bl	8001414 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40012400 	.word	0x40012400

0800152c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <HAL_ADC_MspDeInit+0x24>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d103      	bne.n	8001546 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800153e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001542:	f7ff ff7f 	bl	8001444 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40012400 	.word	0x40012400

08001554 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001558:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <SYS_InitMeasurement+0x14>)
 800155a:	4a04      	ldr	r2, [pc, #16]	@ (800156c <SYS_InitMeasurement+0x18>)
 800155c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200001a8 	.word	0x200001a8
 800156c:	40012400 	.word	0x40012400

08001570 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800157e:	f000 f869 	bl	8001654 <SYS_GetBatteryLevel>
 8001582:	4603      	mov	r3, r0
 8001584:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001586:	482d      	ldr	r0, [pc, #180]	@ (800163c <SYS_GetTemperatureLevel+0xcc>)
 8001588:	f000 f898 	bl	80016bc <ADC_ReadChannels>
 800158c:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 800158e:	4b2c      	ldr	r3, [pc, #176]	@ (8001640 <SYS_GetTemperatureLevel+0xd0>)
 8001590:	881a      	ldrh	r2, [r3, #0]
 8001592:	4b2c      	ldr	r3, [pc, #176]	@ (8001644 <SYS_GetTemperatureLevel+0xd4>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d026      	beq.n	80015e8 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 800159a:	4b29      	ldr	r3, [pc, #164]	@ (8001640 <SYS_GetTemperatureLevel+0xd0>)
 800159c:	881a      	ldrh	r2, [r3, #0]
 800159e:	4b29      	ldr	r3, [pc, #164]	@ (8001644 <SYS_GetTemperatureLevel+0xd4>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d01c      	beq.n	80015e0 <SYS_GetTemperatureLevel+0x70>
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	fb02 f303 	mul.w	r3, r2, r3
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	4a25      	ldr	r2, [pc, #148]	@ (8001648 <SYS_GetTemperatureLevel+0xd8>)
 80015b2:	fba2 2303 	umull	r2, r3, r2, r3
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b22      	ldr	r3, [pc, #136]	@ (8001644 <SYS_GetTemperatureLevel+0xd4>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2264      	movs	r2, #100	@ 0x64
 80015c2:	fb03 f202 	mul.w	r2, r3, r2
 80015c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001640 <SYS_GetTemperatureLevel+0xd0>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	4619      	mov	r1, r3
 80015cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <SYS_GetTemperatureLevel+0xd4>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	1acb      	subs	r3, r1, r3
 80015d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	331e      	adds	r3, #30
 80015da:	b29b      	uxth	r3, r3
 80015dc:	b21b      	sxth	r3, r3
 80015de:	e001      	b.n	80015e4 <SYS_GetTemperatureLevel+0x74>
 80015e0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80015e4:	803b      	strh	r3, [r7, #0]
 80015e6:	e01d      	b.n	8001624 <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	fb03 f202 	mul.w	r2, r3, r2
 80015f0:	4b16      	ldr	r3, [pc, #88]	@ (800164c <SYS_GetTemperatureLevel+0xdc>)
 80015f2:	fba3 1302 	umull	r1, r3, r3, r2
 80015f6:	1ad2      	subs	r2, r2, r3
 80015f8:	0852      	lsrs	r2, r2, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	0adb      	lsrs	r3, r3, #11
 80015fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 800160a:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 800160e:	4a10      	ldr	r2, [pc, #64]	@ (8001650 <SYS_GetTemperatureLevel+0xe0>)
 8001610:	fb82 1203 	smull	r1, r2, r2, r3
 8001614:	1292      	asrs	r2, r2, #10
 8001616:	17db      	asrs	r3, r3, #31
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	b29b      	uxth	r3, r3
 800161c:	331e      	adds	r3, #30
 800161e:	b29b      	uxth	r3, r3
 8001620:	b21b      	sxth	r3, r3
 8001622:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8001624:	883b      	ldrh	r3, [r7, #0]
 8001626:	b21b      	sxth	r3, r3
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b21b      	sxth	r3, r3
 800162c:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 800162e:	883b      	ldrh	r3, [r7, #0]
 8001630:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	b0001000 	.word	0xb0001000
 8001640:	1fff75c8 	.word	0x1fff75c8
 8001644:	1fff75a8 	.word	0x1fff75a8
 8001648:	09ee009f 	.word	0x09ee009f
 800164c:	00100101 	.word	0x00100101
 8001650:	68db8bad 	.word	0x68db8bad

08001654 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001662:	4813      	ldr	r0, [pc, #76]	@ (80016b0 <SYS_GetBatteryLevel+0x5c>)
 8001664:	f000 f82a 	bl	80016bc <ADC_ReadChannels>
 8001668:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	80fb      	strh	r3, [r7, #6]
 8001674:	e016      	b.n	80016a4 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001676:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <SYS_GetBatteryLevel+0x60>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800167e:	4293      	cmp	r3, r2
 8001680:	d00b      	beq.n	800169a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001682:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <SYS_GetBatteryLevel+0x60>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	f640 43e4 	movw	r3, #3300	@ 0xce4
 800168c:	fb03 f202 	mul.w	r2, r3, r2
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	80fb      	strh	r3, [r7, #6]
 8001698:	e004      	b.n	80016a4 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800169a:	4a07      	ldr	r2, [pc, #28]	@ (80016b8 <SYS_GetBatteryLevel+0x64>)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a2:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80016a4:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	b4002000 	.word	0xb4002000
 80016b4:	1fff75aa 	.word	0x1fff75aa
 80016b8:	004c08d8 	.word	0x004c08d8

080016bc <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80016d4:	f7ff fec8 	bl	8001468 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80016d8:	481a      	ldr	r0, [pc, #104]	@ (8001744 <ADC_ReadChannels+0x88>)
 80016da:	f002 fe86 	bl	80043ea <HAL_ADCEx_Calibration_Start>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80016e4:	f000 fd10 	bl	8002108 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016f4:	f107 0308 	add.w	r3, r7, #8
 80016f8:	4619      	mov	r1, r3
 80016fa:	4812      	ldr	r0, [pc, #72]	@ (8001744 <ADC_ReadChannels+0x88>)
 80016fc:	f002 fb92 	bl	8003e24 <HAL_ADC_ConfigChannel>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001706:	f000 fcff 	bl	8002108 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800170a:	480e      	ldr	r0, [pc, #56]	@ (8001744 <ADC_ReadChannels+0x88>)
 800170c:	f002 fa6e 	bl	8003bec <HAL_ADC_Start>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001716:	f000 fcf7 	bl	8002108 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800171a:	f04f 31ff 	mov.w	r1, #4294967295
 800171e:	4809      	ldr	r0, [pc, #36]	@ (8001744 <ADC_ReadChannels+0x88>)
 8001720:	f002 fadc 	bl	8003cdc <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001724:	4807      	ldr	r0, [pc, #28]	@ (8001744 <ADC_ReadChannels+0x88>)
 8001726:	f002 faa7 	bl	8003c78 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800172a:	4806      	ldr	r0, [pc, #24]	@ (8001744 <ADC_ReadChannels+0x88>)
 800172c:	f002 fb6d 	bl	8003e0a <HAL_ADC_GetValue>
 8001730:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001732:	4804      	ldr	r0, [pc, #16]	@ (8001744 <ADC_ReadChannels+0x88>)
 8001734:	f002 f9ce 	bl	8003ad4 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001738:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200001a8 	.word	0x200001a8

08001748 <LL_AHB1_GRP1_EnableClock>:
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001754:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001756:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4313      	orrs	r3, r2
 800175e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001764:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4013      	ands	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800176c:	68fb      	ldr	r3, [r7, #12]
}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800177c:	2004      	movs	r0, #4
 800177e:	f7ff ffe3 	bl	8001748 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001782:	2001      	movs	r0, #1
 8001784:	f7ff ffe0 	bl	8001748 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2102      	movs	r1, #2
 800178c:	200f      	movs	r0, #15
 800178e:	f002 fff4 	bl	800477a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001792:	200f      	movs	r0, #15
 8001794:	f003 f80b 	bl	80047ae <HAL_NVIC_EnableIRQ>

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80017a8:	23ff      	movs	r3, #255	@ 0xff
 80017aa:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80017b2:	d311      	bcc.n	80017d8 <FLASH_IF_Write+0x3c>
 80017b4:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <FLASH_IF_Write+0x48>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	029a      	lsls	r2, r3, #10
 80017ba:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <FLASH_IF_Write+0x4c>)
 80017bc:	4013      	ands	r3, r2
 80017be:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80017c2:	3b01      	subs	r3, #1
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d306      	bcc.n	80017d8 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f85a 	bl	8001888 <FLASH_IF_INT_Write>
 80017d4:	4603      	mov	r3, r0
 80017d6:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 80017d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	1fff75e0 	.word	0x1fff75e0
 80017e8:	03fffc00 	.word	0x03fffc00

080017ec <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80017f8:	23ff      	movs	r3, #255	@ 0xff
 80017fa:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001802:	d311      	bcc.n	8001828 <FLASH_IF_Read+0x3c>
 8001804:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <FLASH_IF_Read+0x48>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	029a      	lsls	r2, r3, #10
 800180a:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <FLASH_IF_Read+0x4c>)
 800180c:	4013      	ands	r3, r2
 800180e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001812:	3b01      	subs	r3, #1
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	4293      	cmp	r3, r2
 8001818:	d306      	bcc.n	8001828 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 f93a 	bl	8001a98 <FLASH_IF_INT_Read>
 8001824:	4603      	mov	r3, r0
 8001826:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001828:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	1fff75e0 	.word	0x1fff75e0
 8001838:	03fffc00 	.word	0x03fffc00

0800183c <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001846:	23ff      	movs	r3, #255	@ 0xff
 8001848:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001850:	d310      	bcc.n	8001874 <FLASH_IF_Erase+0x38>
 8001852:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <FLASH_IF_Erase+0x44>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	029a      	lsls	r2, r3, #10
 8001858:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <FLASH_IF_Erase+0x48>)
 800185a:	4013      	ands	r3, r2
 800185c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001860:	3b01      	subs	r3, #1
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	4293      	cmp	r3, r2
 8001866:	d305      	bcc.n	8001874 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001868:	6839      	ldr	r1, [r7, #0]
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f932 	bl	8001ad4 <FLASH_IF_INT_Erase>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001874:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	1fff75e0 	.word	0x1fff75e0
 8001884:	03fffc00 	.word	0x03fffc00

08001888 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b090      	sub	sp, #64	@ 0x40
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00c      	beq.n	80018c6 <FLASH_IF_INT_Write+0x3e>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <FLASH_IF_INT_Write+0x3e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d104      	bne.n	80018c6 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 80018c6:	f06f 0305 	mvn.w	r3, #5
 80018ca:	e0da      	b.n	8001a82 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80018cc:	f000 f992 	bl	8001bf4 <FLASH_IF_INT_Clear_Error>
 80018d0:	4603      	mov	r3, r0
 80018d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 80018d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f040 80cf 	bne.w	8001a7e <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80018e0:	f003 fbea 	bl	80050b8 <HAL_FLASH_Unlock>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f040 80c6 	bne.w	8001a78 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 80018ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018ee:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 80018f2:	4b66      	ldr	r3, [pc, #408]	@ (8001a8c <FLASH_IF_INT_Write+0x204>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	0299      	lsls	r1, r3, #10
 80018f8:	4b65      	ldr	r3, [pc, #404]	@ (8001a90 <FLASH_IF_INT_Write+0x208>)
 80018fa:	400b      	ands	r3, r1
 80018fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	0adb      	lsrs	r3, r3, #11
 8001908:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800190a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001914:	3b01      	subs	r3, #1
 8001916:	4a5d      	ldr	r2, [pc, #372]	@ (8001a8c <FLASH_IF_INT_Write+0x204>)
 8001918:	6812      	ldr	r2, [r2, #0]
 800191a:	0291      	lsls	r1, r2, #10
 800191c:	4a5c      	ldr	r2, [pc, #368]	@ (8001a90 <FLASH_IF_INT_Write+0x208>)
 800191e:	400a      	ands	r2, r1
 8001920:	fbb3 f1f2 	udiv	r1, r3, r2
 8001924:	fb01 f202 	mul.w	r2, r1, r2
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	0ada      	lsrs	r2, r3, #11
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d905      	bls.n	8001946 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800193a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800193c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001940:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001944:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800194a:	e089      	b.n	8001a60 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 800194c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800194e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001952:	02db      	lsls	r3, r3, #11
 8001954:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001956:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 f925 	bl	8001ba8 <FLASH_IF_INT_IsEmpty>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d031      	beq.n	80019c8 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001964:	4b4b      	ldr	r3, [pc, #300]	@ (8001a94 <FLASH_IF_INT_Write+0x20c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d103      	bne.n	8001974 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 800196c:	23fa      	movs	r3, #250	@ 0xfa
 800196e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001972:	e07e      	b.n	8001a72 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001974:	4b47      	ldr	r3, [pc, #284]	@ (8001a94 <FLASH_IF_INT_Write+0x20c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6939      	ldr	r1, [r7, #16]
 800197a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f88a 	bl	8001a98 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001984:	4b43      	ldr	r3, [pc, #268]	@ (8001a94 <FLASH_IF_INT_Write+0x20c>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800198a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800198e:	4413      	add	r3, r2
 8001990:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001994:	b292      	uxth	r2, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f019 fa1c 	bl	801add4 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f896 	bl	8001ad4 <FLASH_IF_INT_Erase>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 80019ae:	23fe      	movs	r3, #254	@ 0xfe
 80019b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 80019b4:	e05d      	b.n	8001a72 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 80019ba:	4b36      	ldr	r3, [pc, #216]	@ (8001a94 <FLASH_IF_INT_Write+0x20c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 80019c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	e005      	b.n	80019d4 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 80019c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 80019cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ce:	623b      	str	r3, [r7, #32]
          current_length = length;
 80019d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019d2:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80019d4:	2300      	movs	r3, #0
 80019d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019d8:	e026      	b.n	8001a28 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80019da:	6a3a      	ldr	r2, [r7, #32]
 80019dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019de:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019e6:	2001      	movs	r0, #1
 80019e8:	f003 fb22 	bl	8005030 <HAL_FLASH_Program>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d113      	bne.n	8001a1a <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019f8:	6a3a      	ldr	r2, [r7, #32]
 80019fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019fc:	4413      	add	r3, r2
 80019fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a02:	4299      	cmp	r1, r3
 8001a04:	bf08      	it	eq
 8001a06:	4290      	cmpeq	r0, r2
 8001a08:	d003      	beq.n	8001a12 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001a0a:	23fc      	movs	r3, #252	@ 0xfc
 8001a0c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 8001a10:	e00e      	b.n	8001a30 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a14:	3308      	adds	r3, #8
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a18:	e003      	b.n	8001a22 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001a1a:	23fc      	movs	r3, #252	@ 0xfc
 8001a1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 8001a20:	e006      	b.n	8001a30 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a24:	3308      	adds	r3, #8
 8001a26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d3d4      	bcc.n	80019da <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001a30:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d11b      	bne.n	8001a70 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001a38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a3c:	4413      	add	r3, r2
 8001a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 8001a40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a44:	4413      	add	r3, r2
 8001a46:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a52:	bf28      	it	cs
 8001a54:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8001a58:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	4413      	add	r3, r2
 8001a66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	f4ff af6f 	bcc.w	800194c <FLASH_IF_INT_Write+0xc4>
 8001a6e:	e000      	b.n	8001a72 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001a70:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001a72:	f003 fb43 	bl	80050fc <HAL_FLASH_Lock>
 8001a76:	e002      	b.n	8001a7e <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001a78:	23fb      	movs	r3, #251	@ 0xfb
 8001a7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001a7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3740      	adds	r7, #64	@ 0x40
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	1fff75e0 	.word	0x1fff75e0
 8001a90:	03fffc00 	.word	0x03fffc00
 8001a94:	2000020c 	.word	0x2000020c

08001a98 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <FLASH_IF_INT_Read+0x1c>
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001ab4:	f06f 0305 	mvn.w	r3, #5
 8001ab8:	e008      	b.n	8001acc <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f019 f986 	bl	801add4 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001ac8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001af4:	f06f 0305 	mvn.w	r3, #5
 8001af8:	e04e      	b.n	8001b98 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001afa:	f000 f87b 	bl	8001bf4 <FLASH_IF_INT_Clear_Error>
 8001afe:	4603      	mov	r3, r0
 8001b00:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001b02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d144      	bne.n	8001b94 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001b0a:	f003 fad5 	bl	80050b8 <HAL_FLASH_Unlock>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d13d      	bne.n	8001b90 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001b14:	2302      	movs	r3, #2
 8001b16:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001b1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ba0 <FLASH_IF_INT_Erase+0xcc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	0299      	lsls	r1, r3, #10
 8001b24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba4 <FLASH_IF_INT_Erase+0xd0>)
 8001b26:	400b      	ands	r3, r1
 8001b28:	fbb2 f1f3 	udiv	r1, r2, r3
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	0adb      	lsrs	r3, r3, #11
 8001b34:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001b40:	3b01      	subs	r3, #1
 8001b42:	4a17      	ldr	r2, [pc, #92]	@ (8001ba0 <FLASH_IF_INT_Erase+0xcc>)
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	0291      	lsls	r1, r2, #10
 8001b48:	4a16      	ldr	r2, [pc, #88]	@ (8001ba4 <FLASH_IF_INT_Erase+0xd0>)
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b50:	fb01 f202 	mul.w	r2, r1, r2
 8001b54:	1a9b      	subs	r3, r3, r2
 8001b56:	0ada      	lsrs	r2, r3, #11
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001b60:	f107 0214 	add.w	r2, r7, #20
 8001b64:	f107 0308 	add.w	r3, r7, #8
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 fba6 	bl	80052bc <HAL_FLASHEx_Erase>
 8001b70:	4603      	mov	r3, r0
 8001b72:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001b74:	7fbb      	ldrb	r3, [r7, #30]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001b7a:	7fbb      	ldrb	r3, [r7, #30]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d101      	bne.n	8001b84 <FLASH_IF_INT_Erase+0xb0>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e001      	b.n	8001b88 <FLASH_IF_INT_Erase+0xb4>
 8001b84:	f06f 0301 	mvn.w	r3, #1
 8001b88:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001b8a:	f003 fab7 	bl	80050fc <HAL_FLASH_Lock>
 8001b8e:	e001      	b.n	8001b94 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001b90:	23fb      	movs	r3, #251	@ 0xfb
 8001b92:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001b94:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3720      	adds	r7, #32
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	1fff75e0 	.word	0x1fff75e0
 8001ba4:	03fffc00 	.word	0x03fffc00

08001ba8 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	e011      	b.n	8001be0 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc6:	bf08      	it	eq
 8001bc8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001bcc:	d002      	beq.n	8001bd4 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
      break;
 8001bd2:	e009      	b.n	8001be8 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3308      	adds	r3, #8
 8001bd8:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	3308      	adds	r3, #8
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d3e9      	bcc.n	8001bbc <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001be8:	68fb      	ldr	r3, [r7, #12]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001bfa:	23fb      	movs	r3, #251	@ 0xfb
 8001bfc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001bfe:	f003 fa5b 	bl	80050b8 <HAL_FLASH_Unlock>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d110      	bne.n	8001c2a <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <FLASH_IF_INT_Clear_Error+0x44>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <FLASH_IF_INT_Clear_Error+0x44>)
 8001c0e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <FLASH_IF_INT_Clear_Error+0x44>)
 8001c16:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8001c1a:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001c1c:	f003 fa6e 	bl	80050fc <HAL_FLASH_Lock>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	58004000 	.word	0x58004000

08001c3c <LL_AHB2_GRP1_EnableClock>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c60:	68fb      	ldr	r3, [r7, #12]
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <microDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void microDelay(uint16_t delay)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001c76:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <microDelay+0x2c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001c7e:	bf00      	nop
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <microDelay+0x2c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d3f9      	bcc.n	8001c80 <microDelay+0x14>
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	2000027c 	.word	0x2000027c

08001c9c <DHT22_Start>:

uint8_t DHT22_Start(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = GPIO_PIN_11;
 8001cb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001cb8:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate); // set the pin as output
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cce:	f003 fbc9 	bl	8005464 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);       // pull the pin low
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cdc:	f003 fe07 	bl	80058ee <HAL_GPIO_WritePin>
  microDelay(1300);                                  // wait for 1300us
 8001ce0:	f240 5014 	movw	r0, #1300	@ 0x514
 8001ce4:	f7ff ffc2 	bl	8001c6c <microDelay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);       // pull the pin high
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf2:	f003 fdfc 	bl	80058ee <HAL_GPIO_WritePin>
  microDelay(30);                                    // wait for 30us
 8001cf6:	201e      	movs	r0, #30
 8001cf8:	f7ff ffb8 	bl	8001c6c <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate); // set the pin as input
 8001d04:	463b      	mov	r3, r7
 8001d06:	4619      	mov	r1, r3
 8001d08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d0c:	f003 fbaa 	bl	8005464 <HAL_GPIO_Init>
  microDelay(40);
 8001d10:	2028      	movs	r0, #40	@ 0x28
 8001d12:	f7ff ffab 	bl	8001c6c <microDelay>
  if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)))
 8001d16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d1e:	f003 fdcf 	bl	80058c0 <HAL_GPIO_ReadPin>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10d      	bne.n	8001d44 <DHT22_Start+0xa8>
  {
    microDelay(80);
 8001d28:	2050      	movs	r0, #80	@ 0x50
 8001d2a:	f7ff ff9f 	bl	8001c6c <microDelay>
    if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))) Response = 1;
 8001d2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d36:	f003 fdc3 	bl	80058c0 <HAL_GPIO_ReadPin>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <DHT22_Start+0xa8>
 8001d40:	2301      	movs	r3, #1
 8001d42:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8001d44:	f000 fcd0 	bl	80026e8 <HAL_GetTick>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4a11      	ldr	r2, [pc, #68]	@ (8001d90 <DHT22_Start+0xf4>)
 8001d4c:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8001d4e:	f000 fccb 	bl	80026e8 <HAL_GetTick>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a0f      	ldr	r2, [pc, #60]	@ (8001d94 <DHT22_Start+0xf8>)
 8001d56:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) && pMillis + 2 > cMillis)
 8001d58:	e004      	b.n	8001d64 <DHT22_Start+0xc8>
  {
    cMillis = HAL_GetTick();
 8001d5a:	f000 fcc5 	bl	80026e8 <HAL_GetTick>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4a0c      	ldr	r2, [pc, #48]	@ (8001d94 <DHT22_Start+0xf8>)
 8001d62:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) && pMillis + 2 > cMillis)
 8001d64:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d6c:	f003 fda8 	bl	80058c0 <HAL_GPIO_ReadPin>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d006      	beq.n	8001d84 <DHT22_Start+0xe8>
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <DHT22_Start+0xf4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	1c9a      	adds	r2, r3, #2
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <DHT22_Start+0xf8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d8ea      	bhi.n	8001d5a <DHT22_Start+0xbe>
  }
  return Response;
 8001d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000210 	.word	0x20000210
 8001d94:	20000214 	.word	0x20000214

08001d98 <DHT22_Read>:

uint8_t DHT22_Read(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
  uint8_t a, b = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	71bb      	strb	r3, [r7, #6]
  for (a = 0; a < 8; a++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	71fb      	strb	r3, [r7, #7]
 8001da6:	e069      	b.n	8001e7c <DHT22_Read+0xe4>
  {
    pMillis = HAL_GetTick();
 8001da8:	f000 fc9e 	bl	80026e8 <HAL_GetTick>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4a37      	ldr	r2, [pc, #220]	@ (8001e8c <DHT22_Read+0xf4>)
 8001db0:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001db2:	f000 fc99 	bl	80026e8 <HAL_GetTick>
 8001db6:	4603      	mov	r3, r0
 8001db8:	4a35      	ldr	r2, [pc, #212]	@ (8001e90 <DHT22_Read+0xf8>)
 8001dba:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) && pMillis + 2 > cMillis)
 8001dbc:	e004      	b.n	8001dc8 <DHT22_Read+0x30>
    { // wait for the pin to go high
      cMillis = HAL_GetTick();
 8001dbe:	f000 fc93 	bl	80026e8 <HAL_GetTick>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4a32      	ldr	r2, [pc, #200]	@ (8001e90 <DHT22_Read+0xf8>)
 8001dc6:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) && pMillis + 2 > cMillis)
 8001dc8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dd0:	f003 fd76 	bl	80058c0 <HAL_GPIO_ReadPin>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <DHT22_Read+0x50>
 8001dda:	4b2c      	ldr	r3, [pc, #176]	@ (8001e8c <DHT22_Read+0xf4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	1c9a      	adds	r2, r3, #2
 8001de0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e90 <DHT22_Read+0xf8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d8ea      	bhi.n	8001dbe <DHT22_Read+0x26>
    }
    microDelay(40); // wait for 40 us
 8001de8:	2028      	movs	r0, #40	@ 0x28
 8001dea:	f7ff ff3f 	bl	8001c6c <microDelay>
    if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))) // if the pin is low
 8001dee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001df2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001df6:	f003 fd63 	bl	80058c0 <HAL_GPIO_ReadPin>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10e      	bne.n	8001e1e <DHT22_Read+0x86>
      b &= ~(1 << (7 - a));
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	f1c3 0307 	rsb	r3, r3, #7
 8001e06:	2201      	movs	r2, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	b25b      	sxtb	r3, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	b25a      	sxtb	r2, r3
 8001e12:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e16:	4013      	ands	r3, r2
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	71bb      	strb	r3, [r7, #6]
 8001e1c:	e00b      	b.n	8001e36 <DHT22_Read+0x9e>
    else
      b |= (1 << (7 - a));
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	f1c3 0307 	rsb	r3, r3, #7
 8001e24:	2201      	movs	r2, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	b25a      	sxtb	r2, r3
 8001e2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	b25b      	sxtb	r3, r3
 8001e34:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8001e36:	f000 fc57 	bl	80026e8 <HAL_GetTick>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a13      	ldr	r2, [pc, #76]	@ (8001e8c <DHT22_Read+0xf4>)
 8001e3e:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001e40:	f000 fc52 	bl	80026e8 <HAL_GetTick>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <DHT22_Read+0xf8>)
 8001e48:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) && pMillis + 2 > cMillis)
 8001e4a:	e004      	b.n	8001e56 <DHT22_Read+0xbe>
    { // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001e4c:	f000 fc4c 	bl	80026e8 <HAL_GetTick>
 8001e50:	4603      	mov	r3, r0
 8001e52:	4a0f      	ldr	r2, [pc, #60]	@ (8001e90 <DHT22_Read+0xf8>)
 8001e54:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) && pMillis + 2 > cMillis)
 8001e56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e5e:	f003 fd2f 	bl	80058c0 <HAL_GPIO_ReadPin>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <DHT22_Read+0xde>
 8001e68:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <DHT22_Read+0xf4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	1c9a      	adds	r2, r3, #2
 8001e6e:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <DHT22_Read+0xf8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d8ea      	bhi.n	8001e4c <DHT22_Read+0xb4>
  for (a = 0; a < 8; a++)
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	71fb      	strb	r3, [r7, #7]
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	2b07      	cmp	r3, #7
 8001e80:	d992      	bls.n	8001da8 <DHT22_Read+0x10>
    }
  }
  return b;
 8001e82:	79bb      	ldrb	r3, [r7, #6]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000210 	.word	0x20000210
 8001e90:	20000214 	.word	0x20000214

08001e94 <SendSensorData>:

void SendSensorData(uint8_t sensorId, int temperature, int humidity)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	73fb      	strb	r3, [r7, #15]
    uint8_t data[5];
    data[0] = sensorId;                      // Identificador do sensor
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	743b      	strb	r3, [r7, #16]
    data[1] = (uint8_t)(temperature >> 8);   // Parte alta da temperatura
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	121b      	asrs	r3, r3, #8
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	747b      	strb	r3, [r7, #17]
    data[2] = (uint8_t)(temperature & 0xFF); // Parte baixa da temperatura
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	74bb      	strb	r3, [r7, #18]
    data[3] = (uint8_t)(humidity >> 8);      // Parte alta da umidade
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	121b      	asrs	r3, r3, #8
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	74fb      	strb	r3, [r7, #19]
    data[4] = (uint8_t)(humidity & 0xFF);    // Parte baixa da umidade
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	753b      	strb	r3, [r7, #20]

    // Adicione aqui o código para enviar dados via LoRaWAN usando funções diretas
    // Este é um exemplo genérico, ajuste conforme a sua biblioteca ou hardware específico

    // Suponha que você tem uma função chamada LoRa_Send para enviar dados
    if (LoRa_Send(data, sizeof(data)) != 0) {
 8001ec2:	f107 0310 	add.w	r3, r7, #16
 8001ec6:	2105      	movs	r1, #5
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fa7b 	bl	80013c4 <LoRa_Send>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <SendSensorData+0x48>
        printf("Erro ao enviar dados via LoRaWAN.\n");
 8001ed4:	4805      	ldr	r0, [pc, #20]	@ (8001eec <SendSensorData+0x58>)
 8001ed6:	f01a fae9 	bl	801c4ac <puts>
    } else {
        printf("Dados enviados com sucesso via LoRaWAN.\n");
    }
}
 8001eda:	e002      	b.n	8001ee2 <SendSensorData+0x4e>
        printf("Dados enviados com sucesso via LoRaWAN.\n");
 8001edc:	4804      	ldr	r0, [pc, #16]	@ (8001ef0 <SendSensorData+0x5c>)
 8001ede:	f01a fae5 	bl	801c4ac <puts>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	0801d204 	.word	0x0801d204
 8001ef0:	0801d228 	.word	0x0801d228

08001ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef4:	b5b0      	push	{r4, r5, r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef8:	f001 fa3a 	bl	8003370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001efc:	f000 f8ca 	bl	8002094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 8001f00:	f007 fdf0 	bl	8009ae4 <MX_LoRaWAN_Init>
  MX_TIM1_Init();
 8001f04:	f000 fd14 	bl	8002930 <MX_TIM1_Init>
  GPIO_Input_Init();
 8001f08:	f000 f8ca 	bl	80020a0 <GPIO_Input_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001f0c:	4852      	ldr	r0, [pc, #328]	@ (8002058 <main+0x164>)
 8001f0e:	f005 f94b 	bl	80071a8 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    SENSOR_ID = DHT22_Start();
 8001f12:	f7ff fec3 	bl	8001c9c <DHT22_Start>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b50      	ldr	r3, [pc, #320]	@ (800205c <main+0x168>)
 8001f1c:	601a      	str	r2, [r3, #0]
    RH1 = DHT22_Read(); // First 8bits of humidity
 8001f1e:	f7ff ff3b 	bl	8001d98 <DHT22_Read>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b4e      	ldr	r3, [pc, #312]	@ (8002060 <main+0x16c>)
 8001f28:	701a      	strb	r2, [r3, #0]
    RH2 = DHT22_Read(); // Last 8 bits of humidity
 8001f2a:	f7ff ff35 	bl	8001d98 <DHT22_Read>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b4c      	ldr	r3, [pc, #304]	@ (8002064 <main+0x170>)
 8001f34:	701a      	strb	r2, [r3, #0]
    TC1 = DHT22_Read(); // First 8 bits of Celsius
 8001f36:	f7ff ff2f 	bl	8001d98 <DHT22_Read>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002068 <main+0x174>)
 8001f40:	701a      	strb	r2, [r3, #0]
    TC2 = DHT22_Read(); // Last 8 bits of Celsius
 8001f42:	f7ff ff29 	bl	8001d98 <DHT22_Read>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b48      	ldr	r3, [pc, #288]	@ (800206c <main+0x178>)
 8001f4c:	701a      	strb	r2, [r3, #0]
    SUM = DHT22_Read(); // Check sum
 8001f4e:	f7ff ff23 	bl	8001d98 <DHT22_Read>
 8001f52:	4603      	mov	r3, r0
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b46      	ldr	r3, [pc, #280]	@ (8002070 <main+0x17c>)
 8001f58:	701a      	strb	r2, [r3, #0]
    CHECK = RH1 + RH2 + TC1 + TC2;
 8001f5a:	4b41      	ldr	r3, [pc, #260]	@ (8002060 <main+0x16c>)
 8001f5c:	781a      	ldrb	r2, [r3, #0]
 8001f5e:	4b41      	ldr	r3, [pc, #260]	@ (8002064 <main+0x170>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4b40      	ldr	r3, [pc, #256]	@ (8002068 <main+0x174>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800206c <main+0x178>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4b3f      	ldr	r3, [pc, #252]	@ (8002074 <main+0x180>)
 8001f78:	701a      	strb	r2, [r3, #0]

    if (CHECK == SUM)
 8001f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8002074 <main+0x180>)
 8001f7c:	781a      	ldrb	r2, [r3, #0]
 8001f7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002070 <main+0x17c>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d160      	bne.n	8002048 <main+0x154>
    {
      tCelsius = ((TC1 << 8) | TC2) / 10.0;
 8001f86:	4b38      	ldr	r3, [pc, #224]	@ (8002068 <main+0x174>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	4a37      	ldr	r2, [pc, #220]	@ (800206c <main+0x178>)
 8001f8e:	7812      	ldrb	r2, [r2, #0]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fa9e 	bl	80004d4 <__aeabi_i2d>
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <main+0x184>)
 8001f9e:	f7fe fc2d 	bl	80007fc <__aeabi_ddiv>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f7fe fdbf 	bl	8000b2c <__aeabi_d2f>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4a32      	ldr	r2, [pc, #200]	@ (800207c <main+0x188>)
 8001fb2:	6013      	str	r3, [r2, #0]
      tFahrenheit = tCelsius * 9 / 5 + 32;
 8001fb4:	4b31      	ldr	r3, [pc, #196]	@ (800207c <main+0x188>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4931      	ldr	r1, [pc, #196]	@ (8002080 <main+0x18c>)
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe ff14 	bl	8000de8 <__aeabi_fmul>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4930      	ldr	r1, [pc, #192]	@ (8002084 <main+0x190>)
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe ffc3 	bl	8000f50 <__aeabi_fdiv>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fe01 	bl	8000bd8 <__addsf3>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b2b      	ldr	r3, [pc, #172]	@ (8002088 <main+0x194>)
 8001fdc:	601a      	str	r2, [r3, #0]
      RH = ((RH1 << 8) | RH2) / 10.0;
 8001fde:	4b20      	ldr	r3, [pc, #128]	@ (8002060 <main+0x16c>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8002064 <main+0x170>)
 8001fe6:	7812      	ldrb	r2, [r2, #0]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fa72 	bl	80004d4 <__aeabi_i2d>
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	4b20      	ldr	r3, [pc, #128]	@ (8002078 <main+0x184>)
 8001ff6:	f7fe fc01 	bl	80007fc <__aeabi_ddiv>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	f7fe fd93 	bl	8000b2c <__aeabi_d2f>
 8002006:	4603      	mov	r3, r0
 8002008:	4a20      	ldr	r2, [pc, #128]	@ (800208c <main+0x198>)
 800200a:	6013      	str	r3, [r2, #0]
      SendSensorData(SENSOR_ID, (int)(tCelsius * 10), (int)(RH * 10)); // Ajuste de escala conforme necessário
 800200c:	4b13      	ldr	r3, [pc, #76]	@ (800205c <main+0x168>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	b2dc      	uxtb	r4, r3
 8002012:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <main+0x188>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	491e      	ldr	r1, [pc, #120]	@ (8002090 <main+0x19c>)
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fee5 	bl	8000de8 <__aeabi_fmul>
 800201e:	4603      	mov	r3, r0
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff f831 	bl	8001088 <__aeabi_f2iz>
 8002026:	4605      	mov	r5, r0
 8002028:	4b18      	ldr	r3, [pc, #96]	@ (800208c <main+0x198>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4918      	ldr	r1, [pc, #96]	@ (8002090 <main+0x19c>)
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe feda 	bl	8000de8 <__aeabi_fmul>
 8002034:	4603      	mov	r3, r0
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff f826 	bl	8001088 <__aeabi_f2iz>
 800203c:	4603      	mov	r3, r0
 800203e:	461a      	mov	r2, r3
 8002040:	4629      	mov	r1, r5
 8002042:	4620      	mov	r0, r4
 8002044:	f7ff ff26 	bl	8001e94 <SendSensorData>
    }
    HAL_Delay(2000);
 8002048:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800204c:	f000 fb60 	bl	8002710 <HAL_Delay>
    Check_GPIO_Input();
 8002050:	f000 f844 	bl	80020dc <Check_GPIO_Input>
    SENSOR_ID = DHT22_Start();
 8002054:	e75d      	b.n	8001f12 <main+0x1e>
 8002056:	bf00      	nop
 8002058:	2000027c 	.word	0x2000027c
 800205c:	20000224 	.word	0x20000224
 8002060:	20000228 	.word	0x20000228
 8002064:	20000229 	.word	0x20000229
 8002068:	2000022a 	.word	0x2000022a
 800206c:	2000022b 	.word	0x2000022b
 8002070:	2000022c 	.word	0x2000022c
 8002074:	2000022d 	.word	0x2000022d
 8002078:	40240000 	.word	0x40240000
 800207c:	20000218 	.word	0x20000218
 8002080:	41100000 	.word	0x41100000
 8002084:	40a00000 	.word	0x40a00000
 8002088:	2000021c 	.word	0x2000021c
 800208c:	20000220 	.word	0x20000220
 8002090:	41200000 	.word	0x41200000

08002094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemClock_Config */

  /* USER CODE END SystemClock_Config */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <GPIO_Input_Init>:

/* USER CODE BEGIN 4 */
void GPIO_Input_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7ff fdc1 	bl	8001c3c <LL_AHB2_GRP1_EnableClock>
  //HAL_PWREx_EnableVddIO2();
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	4619      	mov	r1, r3
 80020cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020d0:	f003 f9c8 	bl	8005464 <HAL_GPIO_Init>
}
 80020d4:	bf00      	nop
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <Check_GPIO_Input>:

void Check_GPIO_Input(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
  uint8_t gpio_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 80020e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ea:	f003 fbe9 	bl	80058c0 <HAL_GPIO_ReadPin>
 80020ee:	4603      	mov	r3, r0
 80020f0:	71fb      	strb	r3, [r7, #7]
  printf("GPIO state: %d\n", gpio_state);
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	4619      	mov	r1, r3
 80020f6:	4803      	ldr	r0, [pc, #12]	@ (8002104 <Check_GPIO_Input+0x28>)
 80020f8:	f01a f968 	bl	801c3cc <iprintf>
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	0801d250 	.word	0x0801d250

08002108 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
/* USER CODE END Header_Error_Handler */
void Error_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800210c:	b672      	cpsid	i
}
 800210e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <Error_Handler+0x8>

08002114 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002120:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002124:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <LL_APB1_GRP1_EnableClock>:
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800213c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002140:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002142:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4313      	orrs	r3, r2
 800214a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800214c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002150:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4013      	ands	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002158:	68fb      	ldr	r3, [r7, #12]
}
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08c      	sub	sp, #48	@ 0x30
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	222c      	movs	r2, #44	@ 0x2c
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f01a fa7b 	bl	801c66c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002176:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <MX_RTC_Init+0x9c>)
 8002178:	4a22      	ldr	r2, [pc, #136]	@ (8002204 <MX_RTC_Init+0xa0>)
 800217a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800217c:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <MX_RTC_Init+0x9c>)
 800217e:	221f      	movs	r2, #31
 8002180:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002182:	4b1f      	ldr	r3, [pc, #124]	@ (8002200 <MX_RTC_Init+0x9c>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002188:	4b1d      	ldr	r3, [pc, #116]	@ (8002200 <MX_RTC_Init+0x9c>)
 800218a:	2200      	movs	r2, #0
 800218c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800218e:	4b1c      	ldr	r3, [pc, #112]	@ (8002200 <MX_RTC_Init+0x9c>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002194:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <MX_RTC_Init+0x9c>)
 8002196:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800219a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800219c:	4b18      	ldr	r3, [pc, #96]	@ (8002200 <MX_RTC_Init+0x9c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80021a2:	4b17      	ldr	r3, [pc, #92]	@ (8002200 <MX_RTC_Init+0x9c>)
 80021a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021aa:	4815      	ldr	r0, [pc, #84]	@ (8002200 <MX_RTC_Init+0x9c>)
 80021ac:	f003 ff5e 	bl	800606c <HAL_RTC_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80021b6:	f7ff ffa7 	bl	8002108 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80021ba:	4811      	ldr	r0, [pc, #68]	@ (8002200 <MX_RTC_Init+0x9c>)
 80021bc:	f004 fa54 	bl	8006668 <HAL_RTCEx_SetSSRU_IT>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80021c6:	f7ff ff9f 	bl	8002108 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80021ca:	2300      	movs	r3, #0
 80021cc:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80021d6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80021da:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80021dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	2200      	movs	r2, #0
 80021e6:	4619      	mov	r1, r3
 80021e8:	4805      	ldr	r0, [pc, #20]	@ (8002200 <MX_RTC_Init+0x9c>)
 80021ea:	f003 ffc1 	bl	8006170 <HAL_RTC_SetAlarm_IT>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80021f4:	f7ff ff88 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	3730      	adds	r7, #48	@ 0x30
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000230 	.word	0x20000230
 8002204:	40002800 	.word	0x40002800

08002208 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b090      	sub	sp, #64	@ 0x40
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002210:	f107 0308 	add.w	r3, r7, #8
 8002214:	2238      	movs	r2, #56	@ 0x38
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f01a fa27 	bl	801c66c <memset>
  if(rtcHandle->Instance==RTC)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a16      	ldr	r2, [pc, #88]	@ (800227c <HAL_RTC_MspInit+0x74>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d125      	bne.n	8002274 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002228:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800222c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800222e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002232:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002234:	f107 0308 	add.w	r3, r7, #8
 8002238:	4618      	mov	r0, r3
 800223a:	f003 fdfd 	bl	8005e38 <HAL_RCCEx_PeriphCLKConfig>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002244:	f7ff ff60 	bl	8002108 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002248:	f7ff ff64 	bl	8002114 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800224c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002250:	f7ff ff70 	bl	8002134 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002254:	2200      	movs	r2, #0
 8002256:	2100      	movs	r1, #0
 8002258:	2002      	movs	r0, #2
 800225a:	f002 fa8e 	bl	800477a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800225e:	2002      	movs	r0, #2
 8002260:	f002 faa5 	bl	80047ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	202a      	movs	r0, #42	@ 0x2a
 800226a:	f002 fa86 	bl	800477a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800226e:	202a      	movs	r0, #42	@ 0x2a
 8002270:	f002 fa9d 	bl	80047ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002274:	bf00      	nop
 8002276:	3740      	adds	r7, #64	@ 0x40
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40002800 	.word	0x40002800

08002280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <NMI_Handler+0x4>

08002294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <HardFault_Handler+0x4>

0800229c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <MemManage_Handler+0x4>

080022a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <BusFault_Handler+0x4>

080022ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <UsageFault_Handler+0x4>

080022b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022dc:	f001 f8a2 	bl	8003424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80022e8:	4802      	ldr	r0, [pc, #8]	@ (80022f4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80022ea:	f004 f9f9 	bl	80066e0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000230 	.word	0x20000230

080022f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80022fc:	2001      	movs	r0, #1
 80022fe:	f003 fb0d 	bl	800591c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}

08002306 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 800230a:	2002      	movs	r0, #2
 800230c:	f003 fb06 	bl	800591c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}

08002314 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002318:	4802      	ldr	r0, [pc, #8]	@ (8002324 <DMA1_Channel5_IRQHandler+0x10>)
 800231a:	f002 fceb 	bl	8004cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000364 	.word	0x20000364

08002328 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800232c:	4802      	ldr	r0, [pc, #8]	@ (8002338 <USART2_IRQHandler+0x10>)
 800232e:	f005 fadf 	bl	80078f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200002d0 	.word	0x200002d0

0800233c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <RTC_Alarm_IRQHandler+0x10>)
 8002342:	f004 f87d 	bl	8006440 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000230 	.word	0x20000230

08002350 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <SUBGHZ_Radio_IRQHandler+0x10>)
 8002356:	f004 fd31 	bl	8006dbc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000268 	.word	0x20000268

08002364 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800236c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002370:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002372:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4313      	orrs	r3, r2
 800237a:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800237c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002380:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4013      	ands	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002388:	68fb      	ldr	r3, [r7, #12]
}
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <MX_SUBGHZ_Init+0x20>)
 800239a:	2208      	movs	r2, #8
 800239c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800239e:	4805      	ldr	r0, [pc, #20]	@ (80023b4 <MX_SUBGHZ_Init+0x20>)
 80023a0:	f004 fa8a 	bl	80068b8 <HAL_SUBGHZ_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80023aa:	f7ff fead 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000268 	.word	0x20000268

080023b8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80023c0:	2001      	movs	r0, #1
 80023c2:	f7ff ffcf 	bl	8002364 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	2032      	movs	r0, #50	@ 0x32
 80023cc:	f002 f9d5 	bl	800477a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80023d0:	2032      	movs	r0, #50	@ 0x32
 80023d2:	f002 f9ec 	bl	80047ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <LL_RCC_SetClkAfterWakeFromStop>:
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80023e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80023f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002408:	4b02      	ldr	r3, [pc, #8]	@ (8002414 <LL_FLASH_GetUDN+0x10>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	1fff7580 	.word	0x1fff7580

08002418 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800241c:	4b03      	ldr	r3, [pc, #12]	@ (800242c <LL_FLASH_GetDeviceID+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	b2db      	uxtb	r3, r3
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	1fff7584 	.word	0x1fff7584

08002430 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002434:	4b03      	ldr	r3, [pc, #12]	@ (8002444 <LL_FLASH_GetSTCompanyID+0x14>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	0a1b      	lsrs	r3, r3, #8
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	1fff7584 	.word	0x1fff7584

08002448 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 800244c:	2000      	movs	r0, #0
 800244e:	f7ff ffc6 	bl	80023de <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002452:	f019 f943 	bl	801b6dc <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002456:	4b0e      	ldr	r3, [pc, #56]	@ (8002490 <SystemApp_Init+0x48>)
 8002458:	2201      	movs	r2, #1
 800245a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 800245c:	f000 f964 	bl	8002728 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002460:	f019 fbcc 	bl	801bbfc <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002464:	480b      	ldr	r0, [pc, #44]	@ (8002494 <SystemApp_Init+0x4c>)
 8002466:	f019 fc77 	bl	801bd58 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800246a:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <SystemApp_Init+0x50>)
 800246c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002470:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002472:	2002      	movs	r0, #2
 8002474:	f019 fc7e 	bl	801bd74 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002478:	f7ff f86c 	bl	8001554 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 800247c:	f000 f990 	bl	80027a0 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002480:	f018 fc38 	bl	801acf4 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002484:	2101      	movs	r1, #1
 8002486:	2001      	movs	r0, #1
 8002488:	f018 fc74 	bl	801ad74 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000274 	.word	0x20000274
 8002494:	0800265d 	.word	0x0800265d
 8002498:	58004000 	.word	0x58004000

0800249c <GetBatteryLevel>:

  /* USER CODE END UTIL_SEQ_Idle_2 */
}

uint8_t GetBatteryLevel(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80024a6:	f7ff f8d5 	bl	8001654 <SYS_GetBatteryLevel>
 80024aa:	4603      	mov	r3, r0
 80024ac:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80024ae:	88bb      	ldrh	r3, [r7, #4]
 80024b0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d902      	bls.n	80024be <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80024b8:	23fe      	movs	r3, #254	@ 0xfe
 80024ba:	71fb      	strb	r3, [r7, #7]
 80024bc:	e014      	b.n	80024e8 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80024be:	88bb      	ldrh	r3, [r7, #4]
 80024c0:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80024c4:	d202      	bcs.n	80024cc <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	71fb      	strb	r3, [r7, #7]
 80024ca:	e00d      	b.n	80024e8 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80024cc:	88bb      	ldrh	r3, [r7, #4]
 80024ce:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 80024d2:	461a      	mov	r2, r3
 80024d4:	4613      	mov	r3, r2
 80024d6:	01db      	lsls	r3, r3, #7
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	461a      	mov	r2, r3
 80024de:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <GetBatteryLevel+0x58>)
 80024e0:	fba3 2302 	umull	r2, r3, r3, r2
 80024e4:	09db      	lsrs	r3, r3, #7
 80024e6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80024e8:	79fb      	ldrb	r3, [r7, #7]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	1b4e81b5 	.word	0x1b4e81b5

080024f8 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	4618      	mov	r0, r3
 8002506:	f000 f919 	bl	800273c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fdbb 	bl	8001088 <__aeabi_f2iz>
 8002512:	4603      	mov	r3, r0
 8002514:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002516:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002522:	b590      	push	{r4, r7, lr}
 8002524:	b087      	sub	sp, #28
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800252e:	f7ff ff69 	bl	8002404 <LL_FLASH_GetUDN>
 8002532:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253a:	d138      	bne.n	80025ae <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800253c:	f000 ff84 	bl	8003448 <HAL_GetUIDw0>
 8002540:	4604      	mov	r4, r0
 8002542:	f000 ff95 	bl	8003470 <HAL_GetUIDw2>
 8002546:	4603      	mov	r3, r0
 8002548:	4423      	add	r3, r4
 800254a:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 800254c:	f000 ff86 	bl	800345c <HAL_GetUIDw1>
 8002550:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	0e1a      	lsrs	r2, r3, #24
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3307      	adds	r3, #7
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	0c1a      	lsrs	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3306      	adds	r3, #6
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	0a1a      	lsrs	r2, r3, #8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3305      	adds	r3, #5
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3304      	adds	r3, #4
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	0e1a      	lsrs	r2, r3, #24
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3303      	adds	r3, #3
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	0c1a      	lsrs	r2, r3, #16
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3302      	adds	r3, #2
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	0a1a      	lsrs	r2, r3, #8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3301      	adds	r3, #1
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80025ac:	e031      	b.n	8002612 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3307      	adds	r3, #7
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	0a1a      	lsrs	r2, r3, #8
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3306      	adds	r3, #6
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	0c1a      	lsrs	r2, r3, #16
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3305      	adds	r3, #5
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	0e1a      	lsrs	r2, r3, #24
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3304      	adds	r3, #4
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80025dc:	f7ff ff1c 	bl	8002418 <LL_FLASH_GetDeviceID>
 80025e0:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3303      	adds	r3, #3
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80025ec:	f7ff ff20 	bl	8002430 <LL_FLASH_GetSTCompanyID>
 80025f0:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3302      	adds	r3, #2
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	0a1a      	lsrs	r2, r3, #8
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3301      	adds	r3, #1
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	0c1b      	lsrs	r3, r3, #16
 800260c:	b2da      	uxtb	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	701a      	strb	r2, [r3, #0]
}
 8002612:	bf00      	nop
 8002614:	371c      	adds	r7, #28
 8002616:	46bd      	mov	sp, r7
 8002618:	bd90      	pop	{r4, r7, pc}

0800261a <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 800261a:	b590      	push	{r4, r7, lr}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8002622:	f7ff feef 	bl	8002404 <LL_FLASH_GetUDN>
 8002626:	4602      	mov	r2, r0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d10d      	bne.n	8002652 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002636:	f000 ff07 	bl	8003448 <HAL_GetUIDw0>
 800263a:	4604      	mov	r4, r0
 800263c:	f000 ff0e 	bl	800345c <HAL_GetUIDw1>
 8002640:	4603      	mov	r3, r0
 8002642:	405c      	eors	r4, r3
 8002644:	f000 ff14 	bl	8003470 <HAL_GetUIDw2>
 8002648:	4603      	mov	r3, r0
 800264a:	ea84 0203 	eor.w	r2, r4, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	bd90      	pop	{r4, r7, pc}
	...

0800265c <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af02      	add	r7, sp, #8
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002666:	f107 0308 	add.w	r3, r7, #8
 800266a:	4618      	mov	r0, r3
 800266c:	f018 fc8c 	bl	801af88 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002676:	9200      	str	r2, [sp, #0]
 8002678:	4a07      	ldr	r2, [pc, #28]	@ (8002698 <TimestampNow+0x3c>)
 800267a:	2110      	movs	r1, #16
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f81d 	bl	80026bc <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fd fd7c 	bl	8000180 <strlen>
 8002688:	4603      	mov	r3, r0
 800268a:	b29a      	uxth	r2, r3
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	0801d260 	.word	0x0801d260

0800269c <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80026a0:	2101      	movs	r1, #1
 80026a2:	2002      	movs	r0, #2
 80026a4:	f018 fb36 	bl	801ad14 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}

080026ac <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80026b0:	2100      	movs	r1, #0
 80026b2:	2002      	movs	r0, #2
 80026b4:	f018 fb2e 	bl	801ad14 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}

080026bc <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80026bc:	b40c      	push	{r2, r3}
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80026c8:	f107 031c 	add.w	r3, r7, #28
 80026cc:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80026ce:	6839      	ldr	r1, [r7, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f018 fe29 	bl	801b32c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026e4:	b002      	add	sp, #8
 80026e6:	4770      	bx	lr

080026e8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80026f2:	4b06      	ldr	r3, [pc, #24]	@ (800270c <HAL_GetTick+0x24>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80026fa:	f000 fa3d 	bl	8002b78 <TIMER_IF_GetTimerValue>
 80026fe:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002700:	687b      	ldr	r3, [r7, #4]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000274 	.word	0x20000274

08002710 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fab3 	bl	8002c86 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800272c:	f000 feaa 	bl	8003484 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002730:	f000 feae 	bl	8003490 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002734:	f000 feb2 	bl	800349c <HAL_DBGMCU_DisableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}

0800273c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002744:	4b11      	ldr	r3, [pc, #68]	@ (800278c <EnvSensors_Read+0x50>)
 8002746:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002748:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <EnvSensors_Read+0x54>)
 800274a:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 800274c:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <EnvSensors_Read+0x58>)
 800274e:	60fb      	str	r3, [r7, #12]
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8002750:	f7fe ff0e 	bl	8001570 <SYS_GetTemperatureLevel>
 8002754:	4603      	mov	r3, r0
 8002756:	121b      	asrs	r3, r3, #8
 8002758:	b21b      	sxth	r3, r3
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe faf0 	bl	8000d40 <__aeabi_i2f>
 8002760:	4603      	mov	r3, r0
 8002762:	613b      	str	r3, [r7, #16]
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a07      	ldr	r2, [pc, #28]	@ (8002798 <EnvSensors_Read+0x5c>)
 800277a:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a07      	ldr	r2, [pc, #28]	@ (800279c <EnvSensors_Read+0x60>)
 8002780:	611a      	str	r2, [r3, #16]

  return 0;
 8002782:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	42480000 	.word	0x42480000
 8002790:	41900000 	.word	0x41900000
 8002794:	447a0000 	.word	0x447a0000
 8002798:	003e090d 	.word	0x003e090d
 800279c:	000503ab 	.word	0x000503ab

080027a0 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	607b      	str	r3, [r7, #4]

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
 80027aa:	687b      	ldr	r3, [r7, #4]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e00a      	b.n	80027de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027c8:	f3af 8000 	nop.w
 80027cc:	4601      	mov	r1, r0
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	60ba      	str	r2, [r7, #8]
 80027d4:	b2ca      	uxtb	r2, r1
 80027d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	3301      	adds	r3, #1
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	dbf0      	blt.n	80027c8 <_read+0x12>
  }

  return len;
 80027e6:	687b      	ldr	r3, [r7, #4]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	e009      	b.n	8002816 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	60ba      	str	r2, [r7, #8]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	3301      	adds	r3, #1
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	429a      	cmp	r2, r3
 800281c:	dbf1      	blt.n	8002802 <_write+0x12>
  }
  return len;
 800281e:	687b      	ldr	r3, [r7, #4]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <_close>:

int _close(int file)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002830:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr

0800283e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800284e:	605a      	str	r2, [r3, #4]
  return 0;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <_isatty>:

int _isatty(int file)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002864:	2301      	movs	r3, #1
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002890:	4a14      	ldr	r2, [pc, #80]	@ (80028e4 <_sbrk+0x5c>)
 8002892:	4b15      	ldr	r3, [pc, #84]	@ (80028e8 <_sbrk+0x60>)
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800289c:	4b13      	ldr	r3, [pc, #76]	@ (80028ec <_sbrk+0x64>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a4:	4b11      	ldr	r3, [pc, #68]	@ (80028ec <_sbrk+0x64>)
 80028a6:	4a12      	ldr	r2, [pc, #72]	@ (80028f0 <_sbrk+0x68>)
 80028a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028aa:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <_sbrk+0x64>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d207      	bcs.n	80028c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b8:	f019 ff26 	bl	801c708 <__errno>
 80028bc:	4603      	mov	r3, r0
 80028be:	220c      	movs	r2, #12
 80028c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
 80028c6:	e009      	b.n	80028dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c8:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <_sbrk+0x64>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ce:	4b07      	ldr	r3, [pc, #28]	@ (80028ec <_sbrk+0x64>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	4a05      	ldr	r2, [pc, #20]	@ (80028ec <_sbrk+0x64>)
 80028d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028da:	68fb      	ldr	r3, [r7, #12]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20010000 	.word	0x20010000
 80028e8:	00000800 	.word	0x00000800
 80028ec:	20000278 	.word	0x20000278
 80028f0:	20001cc8 	.word	0x20001cc8

080028f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <LL_APB2_GRP1_EnableClock>:
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800290c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800290e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4313      	orrs	r3, r2
 8002916:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800291c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4013      	ands	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002924:	68fb      	ldr	r3, [r7, #12]
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002936:	f107 0310 	add.w	r3, r7, #16
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800294e:	4b20      	ldr	r3, [pc, #128]	@ (80029d0 <MX_TIM1_Init+0xa0>)
 8002950:	4a20      	ldr	r2, [pc, #128]	@ (80029d4 <MX_TIM1_Init+0xa4>)
 8002952:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002954:	4b1e      	ldr	r3, [pc, #120]	@ (80029d0 <MX_TIM1_Init+0xa0>)
 8002956:	2247      	movs	r2, #71	@ 0x47
 8002958:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800295a:	4b1d      	ldr	r3, [pc, #116]	@ (80029d0 <MX_TIM1_Init+0xa0>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002960:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <MX_TIM1_Init+0xa0>)
 8002962:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002966:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002968:	4b19      	ldr	r3, [pc, #100]	@ (80029d0 <MX_TIM1_Init+0xa0>)
 800296a:	2200      	movs	r2, #0
 800296c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800296e:	4b18      	ldr	r3, [pc, #96]	@ (80029d0 <MX_TIM1_Init+0xa0>)
 8002970:	2200      	movs	r2, #0
 8002972:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002974:	4b16      	ldr	r3, [pc, #88]	@ (80029d0 <MX_TIM1_Init+0xa0>)
 8002976:	2200      	movs	r2, #0
 8002978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800297a:	4815      	ldr	r0, [pc, #84]	@ (80029d0 <MX_TIM1_Init+0xa0>)
 800297c:	f004 fbbc 	bl	80070f8 <HAL_TIM_Base_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002986:	f7ff fbbf 	bl	8002108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800298a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800298e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002990:	f107 0310 	add.w	r3, r7, #16
 8002994:	4619      	mov	r1, r3
 8002996:	480e      	ldr	r0, [pc, #56]	@ (80029d0 <MX_TIM1_Init+0xa0>)
 8002998:	f004 fc4a 	bl	8007230 <HAL_TIM_ConfigClockSource>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80029a2:	f7ff fbb1 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	4619      	mov	r1, r3
 80029b6:	4806      	ldr	r0, [pc, #24]	@ (80029d0 <MX_TIM1_Init+0xa0>)
 80029b8:	f004 fdfe 	bl	80075b8 <HAL_TIMEx_MasterConfigSynchronization>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80029c2:	f7ff fba1 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80029c6:	bf00      	nop
 80029c8:	3720      	adds	r7, #32
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	2000027c 	.word	0x2000027c
 80029d4:	40012c00 	.word	0x40012c00

080029d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a05      	ldr	r2, [pc, #20]	@ (80029fc <HAL_TIM_Base_MspInit+0x24>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d103      	bne.n	80029f2 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029ea:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80029ee:	f7ff ff87 	bl	8002900 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40012c00 	.word	0x40012c00

08002a00 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
	...

08002a18 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002a22:	4b14      	ldr	r3, [pc, #80]	@ (8002a74 <TIMER_IF_Init+0x5c>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	f083 0301 	eor.w	r3, r3, #1
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01b      	beq.n	8002a68 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002a30:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <TIMER_IF_Init+0x60>)
 8002a32:	f04f 32ff 	mov.w	r2, #4294967295
 8002a36:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002a38:	f7ff fb94 	bl	8002164 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002a3c:	f000 f856 	bl	8002aec <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002a40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a44:	480c      	ldr	r0, [pc, #48]	@ (8002a78 <TIMER_IF_Init+0x60>)
 8002a46:	f003 fc9f 	bl	8006388 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a78 <TIMER_IF_Init+0x60>)
 8002a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a50:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002a52:	4809      	ldr	r0, [pc, #36]	@ (8002a78 <TIMER_IF_Init+0x60>)
 8002a54:	f003 fdd6 	bl	8006604 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f000 f9d3 	bl	8002e04 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002a5e:	f000 f85f 	bl	8002b20 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002a62:	4b04      	ldr	r3, [pc, #16]	@ (8002a74 <TIMER_IF_Init+0x5c>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002a68:	79fb      	ldrb	r3, [r7, #7]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200002c8 	.word	0x200002c8
 8002a78:	20000230 	.word	0x20000230

08002a7c <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08e      	sub	sp, #56	@ 0x38
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002a8a:	f107 0308 	add.w	r3, r7, #8
 8002a8e:	222c      	movs	r2, #44	@ 0x2c
 8002a90:	2100      	movs	r1, #0
 8002a92:	4618      	mov	r0, r3
 8002a94:	f019 fdea 	bl	801c66c <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002a98:	f000 f828 	bl	8002aec <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002a9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <TIMER_IF_StartTimer+0x68>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002ab4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002ab8:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002aba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002abe:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002ac0:	f107 0308 	add.w	r3, r7, #8
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4807      	ldr	r0, [pc, #28]	@ (8002ae8 <TIMER_IF_StartTimer+0x6c>)
 8002aca:	f003 fb51 	bl	8006170 <HAL_RTC_SetAlarm_IT>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002ad4:	f7ff fb18 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002ad8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3738      	adds	r7, #56	@ 0x38
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	200002cc 	.word	0x200002cc
 8002ae8:	20000230 	.word	0x20000230

08002aec <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002af6:	4b08      	ldr	r3, [pc, #32]	@ (8002b18 <TIMER_IF_StopTimer+0x2c>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002afc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b00:	4806      	ldr	r0, [pc, #24]	@ (8002b1c <TIMER_IF_StopTimer+0x30>)
 8002b02:	f003 fc41 	bl	8006388 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002b06:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <TIMER_IF_StopTimer+0x30>)
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40002800 	.word	0x40002800
 8002b1c:	20000230 	.word	0x20000230

08002b20 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002b24:	f000 f98e 	bl	8002e44 <GetTimerTicks>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4a03      	ldr	r2, [pc, #12]	@ (8002b38 <TIMER_IF_SetTimerContext+0x18>)
 8002b2c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002b2e:	4b02      	ldr	r3, [pc, #8]	@ (8002b38 <TIMER_IF_SetTimerContext+0x18>)
 8002b30:	681b      	ldr	r3, [r3, #0]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200002cc 	.word	0x200002cc

08002b3c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002b40:	4b02      	ldr	r3, [pc, #8]	@ (8002b4c <TIMER_IF_GetTimerContext+0x10>)
 8002b42:	681b      	ldr	r3, [r3, #0]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	200002cc 	.word	0x200002cc

08002b50 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002b5a:	f000 f973 	bl	8002e44 <GetTimerTicks>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	4b04      	ldr	r3, [pc, #16]	@ (8002b74 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002b68:	687b      	ldr	r3, [r7, #4]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	200002cc 	.word	0x200002cc

08002b78 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002b82:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <TIMER_IF_GetTimerValue+0x24>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002b8a:	f000 f95b 	bl	8002e44 <GetTimerTicks>
 8002b8e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002b90:	687b      	ldr	r3, [r7, #4]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200002c8 	.word	0x200002c8

08002ba0 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002baa:	2303      	movs	r3, #3
 8002bac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002bae:	687b      	ldr	r3, [r7, #4]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002bba:	b5b0      	push	{r4, r5, r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	2000      	movs	r0, #0
 8002bca:	460a      	mov	r2, r1
 8002bcc:	4603      	mov	r3, r0
 8002bce:	0d95      	lsrs	r5, r2, #22
 8002bd0:	0294      	lsls	r4, r2, #10
 8002bd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	4620      	mov	r0, r4
 8002bdc:	4629      	mov	r1, r5
 8002bde:	f7fe fa79 	bl	80010d4 <__aeabi_uldivmod>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4613      	mov	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002bea:	68fb      	ldr	r3, [r7, #12]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bdb0      	pop	{r4, r5, r7, pc}

08002bf4 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002bf4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002bfe:	2100      	movs	r1, #0
 8002c00:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	2000      	movs	r0, #0
 8002c06:	460c      	mov	r4, r1
 8002c08:	4605      	mov	r5, r0
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	f04f 0a00 	mov.w	sl, #0
 8002c12:	f04f 0b00 	mov.w	fp, #0
 8002c16:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002c1a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002c1e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002c22:	4650      	mov	r0, sl
 8002c24:	4659      	mov	r1, fp
 8002c26:	1b02      	subs	r2, r0, r4
 8002c28:	eb61 0305 	sbc.w	r3, r1, r5
 8002c2c:	f04f 0000 	mov.w	r0, #0
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	0099      	lsls	r1, r3, #2
 8002c36:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002c3a:	0090      	lsls	r0, r2, #2
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	eb12 0804 	adds.w	r8, r2, r4
 8002c44:	eb43 0905 	adc.w	r9, r3, r5
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c54:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c58:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c5c:	4690      	mov	r8, r2
 8002c5e:	4699      	mov	r9, r3
 8002c60:	4640      	mov	r0, r8
 8002c62:	4649      	mov	r1, r9
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	0a82      	lsrs	r2, r0, #10
 8002c6e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002c72:	0a8b      	lsrs	r3, r1, #10
 8002c74:	4613      	mov	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002c78:	68fb      	ldr	r3, [r7, #12]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002c84:	4770      	bx	lr

08002c86 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ff93 	bl	8002bba <TIMER_IF_Convert_ms2Tick>
 8002c94:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002c96:	f000 f8d5 	bl	8002e44 <GetTimerTicks>
 8002c9a:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002c9c:	e000      	b.n	8002ca0 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002c9e:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002ca0:	f000 f8d0 	bl	8002e44 <GetTimerTicks>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d8f6      	bhi.n	8002c9e <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002cc2:	f018 fe59 	bl	801b978 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002cd6:	f000 f8a5 	bl	8002e24 <TIMER_IF_BkUp_Read_MSBticks>
 8002cda:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 f88f 	bl	8002e04 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002cee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf2:	b08c      	sub	sp, #48	@ 0x30
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002cfc:	f000 f8a2 	bl	8002e44 <GetTimerTicks>
 8002d00:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002d02:	f000 f88f 	bl	8002e24 <TIMER_IF_BkUp_Read_MSBticks>
 8002d06:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	60fa      	str	r2, [r7, #12]
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	000b      	movs	r3, r1
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d20:	2000      	movs	r0, #0
 8002d22:	460c      	mov	r4, r1
 8002d24:	4605      	mov	r5, r0
 8002d26:	eb12 0804 	adds.w	r8, r2, r4
 8002d2a:	eb43 0905 	adc.w	r9, r3, r5
 8002d2e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002d32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	0a82      	lsrs	r2, r0, #10
 8002d40:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002d44:	0a8b      	lsrs	r3, r1, #10
 8002d46:	4613      	mov	r3, r2
 8002d48:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002d58:	f04f 0b00 	mov.w	fp, #0
 8002d5c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ff46 	bl	8002bf4 <TIMER_IF_Convert_Tick2ms>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3730      	adds	r7, #48	@ 0x30
 8002d76:	46bd      	mov	sp, r7
 8002d78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002d7c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	2100      	movs	r1, #0
 8002d88:	4803      	ldr	r0, [pc, #12]	@ (8002d98 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002d8a:	f003 fccd 	bl	8006728 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000230 	.word	0x20000230

08002d9c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	2101      	movs	r1, #1
 8002da8:	4803      	ldr	r0, [pc, #12]	@ (8002db8 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002daa:	f003 fcbd 	bl	8006728 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000230 	.word	0x20000230

08002dbc <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	4804      	ldr	r0, [pc, #16]	@ (8002ddc <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002dca:	f003 fcc5 	bl	8006758 <HAL_RTCEx_BKUPRead>
 8002dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002dd0:	687b      	ldr	r3, [r7, #4]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000230 	.word	0x20000230

08002de0 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002dea:	2101      	movs	r1, #1
 8002dec:	4804      	ldr	r0, [pc, #16]	@ (8002e00 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002dee:	f003 fcb3 	bl	8006758 <HAL_RTCEx_BKUPRead>
 8002df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002df4:	687b      	ldr	r3, [r7, #4]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000230 	.word	0x20000230

08002e04 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	2102      	movs	r1, #2
 8002e10:	4803      	ldr	r0, [pc, #12]	@ (8002e20 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002e12:	f003 fc89 	bl	8006728 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000230 	.word	0x20000230

08002e24 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	4804      	ldr	r0, [pc, #16]	@ (8002e40 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002e2e:	f003 fc93 	bl	8006758 <HAL_RTCEx_BKUPRead>
 8002e32:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002e34:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000230 	.word	0x20000230

08002e44 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002e4a:	480b      	ldr	r0, [pc, #44]	@ (8002e78 <GetTimerTicks+0x34>)
 8002e4c:	f7ff fdd8 	bl	8002a00 <LL_RTC_TIME_GetSubSecond>
 8002e50:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002e52:	e003      	b.n	8002e5c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002e54:	4808      	ldr	r0, [pc, #32]	@ (8002e78 <GetTimerTicks+0x34>)
 8002e56:	f7ff fdd3 	bl	8002a00 <LL_RTC_TIME_GetSubSecond>
 8002e5a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002e5c:	4806      	ldr	r0, [pc, #24]	@ (8002e78 <GetTimerTicks+0x34>)
 8002e5e:	f7ff fdcf 	bl	8002a00 <LL_RTC_TIME_GetSubSecond>
 8002e62:	4602      	mov	r2, r0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d1f4      	bne.n	8002e54 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40002800 	.word	0x40002800

08002e7c <LL_AHB2_GRP1_EnableClock>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <LL_APB1_GRP1_EnableClock>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eb8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002eba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
}
 8002ed2:	bf00      	nop
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <LL_APB1_GRP1_DisableClock>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f04:	4b22      	ldr	r3, [pc, #136]	@ (8002f90 <MX_USART2_UART_Init+0x90>)
 8002f06:	4a23      	ldr	r2, [pc, #140]	@ (8002f94 <MX_USART2_UART_Init+0x94>)
 8002f08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = USART_BAUDRATE;
 8002f0a:	4b21      	ldr	r3, [pc, #132]	@ (8002f90 <MX_USART2_UART_Init+0x90>)
 8002f0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f12:	4b1f      	ldr	r3, [pc, #124]	@ (8002f90 <MX_USART2_UART_Init+0x90>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f18:	4b1d      	ldr	r3, [pc, #116]	@ (8002f90 <MX_USART2_UART_Init+0x90>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f90 <MX_USART2_UART_Init+0x90>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f24:	4b1a      	ldr	r3, [pc, #104]	@ (8002f90 <MX_USART2_UART_Init+0x90>)
 8002f26:	220c      	movs	r2, #12
 8002f28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f2a:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <MX_USART2_UART_Init+0x90>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f30:	4b17      	ldr	r3, [pc, #92]	@ (8002f90 <MX_USART2_UART_Init+0x90>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f36:	4b16      	ldr	r3, [pc, #88]	@ (8002f90 <MX_USART2_UART_Init+0x90>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f3c:	4b14      	ldr	r3, [pc, #80]	@ (8002f90 <MX_USART2_UART_Init+0x90>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f42:	4b13      	ldr	r3, [pc, #76]	@ (8002f90 <MX_USART2_UART_Init+0x90>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f48:	4811      	ldr	r0, [pc, #68]	@ (8002f90 <MX_USART2_UART_Init+0x90>)
 8002f4a:	f004 fbb4 	bl	80076b6 <HAL_UART_Init>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002f54:	f7ff f8d8 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f58:	2100      	movs	r1, #0
 8002f5a:	480d      	ldr	r0, [pc, #52]	@ (8002f90 <MX_USART2_UART_Init+0x90>)
 8002f5c:	f006 fcd7 	bl	800990e <HAL_UARTEx_SetTxFifoThreshold>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002f66:	f7ff f8cf 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4808      	ldr	r0, [pc, #32]	@ (8002f90 <MX_USART2_UART_Init+0x90>)
 8002f6e:	f006 fd0c 	bl	800998a <HAL_UARTEx_SetRxFifoThreshold>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002f78:	f7ff f8c6 	bl	8002108 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8002f7c:	4804      	ldr	r0, [pc, #16]	@ (8002f90 <MX_USART2_UART_Init+0x90>)
 8002f7e:	f006 fc8b 	bl	8009898 <HAL_UARTEx_EnableFifoMode>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002f88:	f7ff f8be 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f8c:	bf00      	nop
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	200002d0 	.word	0x200002d0
 8002f94:	40004400 	.word	0x40004400

08002f98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b096      	sub	sp, #88	@ 0x58
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fb0:	f107 030c 	add.w	r3, r7, #12
 8002fb4:	2238      	movs	r2, #56	@ 0x38
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f019 fb57 	bl	801c66c <memset>
  if(uartHandle->Instance==USART2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a33      	ldr	r2, [pc, #204]	@ (8003090 <HAL_UART_MspInit+0xf8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d15f      	bne.n	8003088 <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002fcc:	4b31      	ldr	r3, [pc, #196]	@ (8003094 <HAL_UART_MspInit+0xfc>)
 8002fce:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fd0:	f107 030c 	add.w	r3, r7, #12
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f002 ff2f 	bl	8005e38 <HAL_RCCEx_PeriphCLKConfig>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002fe0:	f7ff f892 	bl	8002108 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fe4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002fe8:	f7ff ff60 	bl	8002eac <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fec:	2001      	movs	r0, #1
 8002fee:	f7ff ff45 	bl	8002e7c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002ff2:	230c      	movs	r3, #12
 8002ff4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffe:	2303      	movs	r3, #3
 8003000:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003002:	2307      	movs	r3, #7
 8003004:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003006:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800300a:	4619      	mov	r1, r3
 800300c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003010:	f002 fa28 	bl	8005464 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8003014:	4b20      	ldr	r3, [pc, #128]	@ (8003098 <HAL_UART_MspInit+0x100>)
 8003016:	4a21      	ldr	r2, [pc, #132]	@ (800309c <HAL_UART_MspInit+0x104>)
 8003018:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800301a:	4b1f      	ldr	r3, [pc, #124]	@ (8003098 <HAL_UART_MspInit+0x100>)
 800301c:	2214      	movs	r2, #20
 800301e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003020:	4b1d      	ldr	r3, [pc, #116]	@ (8003098 <HAL_UART_MspInit+0x100>)
 8003022:	2210      	movs	r2, #16
 8003024:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003026:	4b1c      	ldr	r3, [pc, #112]	@ (8003098 <HAL_UART_MspInit+0x100>)
 8003028:	2200      	movs	r2, #0
 800302a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800302c:	4b1a      	ldr	r3, [pc, #104]	@ (8003098 <HAL_UART_MspInit+0x100>)
 800302e:	2280      	movs	r2, #128	@ 0x80
 8003030:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003032:	4b19      	ldr	r3, [pc, #100]	@ (8003098 <HAL_UART_MspInit+0x100>)
 8003034:	2200      	movs	r2, #0
 8003036:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003038:	4b17      	ldr	r3, [pc, #92]	@ (8003098 <HAL_UART_MspInit+0x100>)
 800303a:	2200      	movs	r2, #0
 800303c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800303e:	4b16      	ldr	r3, [pc, #88]	@ (8003098 <HAL_UART_MspInit+0x100>)
 8003040:	2200      	movs	r2, #0
 8003042:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003044:	4b14      	ldr	r3, [pc, #80]	@ (8003098 <HAL_UART_MspInit+0x100>)
 8003046:	2200      	movs	r2, #0
 8003048:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800304a:	4813      	ldr	r0, [pc, #76]	@ (8003098 <HAL_UART_MspInit+0x100>)
 800304c:	f001 fbd8 	bl	8004800 <HAL_DMA_Init>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8003056:	f7ff f857 	bl	8002108 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800305a:	2110      	movs	r1, #16
 800305c:	480e      	ldr	r0, [pc, #56]	@ (8003098 <HAL_UART_MspInit+0x100>)
 800305e:	f001 ff0f 	bl	8004e80 <HAL_DMA_ConfigChannelAttributes>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 8003068:	f7ff f84e 	bl	8002108 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a0a      	ldr	r2, [pc, #40]	@ (8003098 <HAL_UART_MspInit+0x100>)
 8003070:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003072:	4a09      	ldr	r2, [pc, #36]	@ (8003098 <HAL_UART_MspInit+0x100>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8003078:	2200      	movs	r2, #0
 800307a:	2102      	movs	r1, #2
 800307c:	2025      	movs	r0, #37	@ 0x25
 800307e:	f001 fb7c 	bl	800477a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003082:	2025      	movs	r0, #37	@ 0x25
 8003084:	f001 fb93 	bl	80047ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003088:	bf00      	nop
 800308a:	3758      	adds	r7, #88	@ 0x58
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40004400 	.word	0x40004400
 8003094:	000c0004 	.word	0x000c0004
 8003098:	20000364 	.word	0x20000364
 800309c:	40020058 	.word	0x40020058

080030a0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0b      	ldr	r2, [pc, #44]	@ (80030dc <HAL_UART_MspDeInit+0x3c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d110      	bne.n	80030d4 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80030b2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80030b6:	f7ff ff11 	bl	8002edc <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 80030ba:	210c      	movs	r1, #12
 80030bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030c0:	f002 fb30 	bl	8005724 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030c8:	4618      	mov	r0, r3
 80030ca:	f001 fc41 	bl	8004950 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80030ce:	2025      	movs	r0, #37	@ 0x25
 80030d0:	f001 fb7b 	bl	80047ca <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80030d4:	bf00      	nop
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40004400 	.word	0x40004400

080030e0 <LL_APB1_GRP1_ForceReset>:
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80030e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <LL_APB1_GRP1_ReleaseReset>:
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800310a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800310e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	43db      	mvns	r3, r3
 8003114:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003118:	4013      	ands	r3, r2
 800311a:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr
	...

08003128 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003130:	4b06      	ldr	r3, [pc, #24]	@ (800314c <LL_EXTI_EnableIT_0_31+0x24>)
 8003132:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003136:	4905      	ldr	r1, [pc, #20]	@ (800314c <LL_EXTI_EnableIT_0_31+0x24>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	58000800 	.word	0x58000800

08003150 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003158:	4a07      	ldr	r2, [pc, #28]	@ (8003178 <vcom_Init+0x28>)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800315e:	f7fe fb0b 	bl	8001778 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003162:	f7ff fecd 	bl	8002f00 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8003166:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800316a:	f7ff ffdd 	bl	8003128 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800316e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	200003c8 	.word	0x200003c8

0800317c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8003180:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8003184:	f7ff ffac 	bl	80030e0 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8003188:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800318c:	f7ff ffb9 	bl	8003102 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8003190:	4804      	ldr	r0, [pc, #16]	@ (80031a4 <vcom_DeInit+0x28>)
 8003192:	f7ff ff85 	bl	80030a0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003196:	200f      	movs	r0, #15
 8003198:	f001 fb17 	bl	80047ca <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800319c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800319e:	4618      	mov	r0, r3
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200002d0 	.word	0x200002d0

080031a8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80031b4:	887b      	ldrh	r3, [r7, #2]
 80031b6:	461a      	mov	r2, r3
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4804      	ldr	r0, [pc, #16]	@ (80031cc <vcom_Trace_DMA+0x24>)
 80031bc:	f004 fb18 	bl	80077f0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80031c0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	200002d0 	.word	0x200002d0

080031d0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80031d8:	4a19      	ldr	r2, [pc, #100]	@ (8003240 <vcom_ReceiveInit+0x70>)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80031de:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80031e2:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80031e4:	f107 0308 	add.w	r3, r7, #8
 80031e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80031ec:	4815      	ldr	r0, [pc, #84]	@ (8003244 <vcom_ReceiveInit+0x74>)
 80031ee:	f006 fac6 	bl	800977e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80031f2:	bf00      	nop
 80031f4:	4b13      	ldr	r3, [pc, #76]	@ (8003244 <vcom_ReceiveInit+0x74>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003202:	d0f7      	beq.n	80031f4 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8003204:	bf00      	nop
 8003206:	4b0f      	ldr	r3, [pc, #60]	@ (8003244 <vcom_ReceiveInit+0x74>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003210:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003214:	d1f7      	bne.n	8003206 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8003216:	4b0b      	ldr	r3, [pc, #44]	@ (8003244 <vcom_ReceiveInit+0x74>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	4b09      	ldr	r3, [pc, #36]	@ (8003244 <vcom_ReceiveInit+0x74>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003224:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8003226:	4807      	ldr	r0, [pc, #28]	@ (8003244 <vcom_ReceiveInit+0x74>)
 8003228:	f006 fb04 	bl	8009834 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 800322c:	2201      	movs	r2, #1
 800322e:	4906      	ldr	r1, [pc, #24]	@ (8003248 <vcom_ReceiveInit+0x78>)
 8003230:	4804      	ldr	r0, [pc, #16]	@ (8003244 <vcom_ReceiveInit+0x74>)
 8003232:	f004 fa91 	bl	8007758 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8003236:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	200003cc 	.word	0x200003cc
 8003244:	200002d0 	.word	0x200002d0
 8003248:	200003c4 	.word	0x200003c4

0800324c <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a05      	ldr	r2, [pc, #20]	@ (8003270 <HAL_UART_TxCpltCallback+0x24>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d103      	bne.n	8003266 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800325e:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <HAL_UART_TxCpltCallback+0x28>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2000      	movs	r0, #0
 8003264:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40004400 	.word	0x40004400
 8003274:	200003c8 	.word	0x200003c8

08003278 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0d      	ldr	r2, [pc, #52]	@ (80032bc <HAL_UART_RxCpltCallback+0x44>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d113      	bne.n	80032b2 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800328a:	4b0d      	ldr	r3, [pc, #52]	@ (80032c0 <HAL_UART_RxCpltCallback+0x48>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <HAL_UART_RxCpltCallback+0x30>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003298:	2b00      	cmp	r3, #0
 800329a:	d105      	bne.n	80032a8 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 800329c:	4b08      	ldr	r3, [pc, #32]	@ (80032c0 <HAL_UART_RxCpltCallback+0x48>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2200      	movs	r2, #0
 80032a2:	2101      	movs	r1, #1
 80032a4:	4807      	ldr	r0, [pc, #28]	@ (80032c4 <HAL_UART_RxCpltCallback+0x4c>)
 80032a6:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80032a8:	2201      	movs	r2, #1
 80032aa:	4906      	ldr	r1, [pc, #24]	@ (80032c4 <HAL_UART_RxCpltCallback+0x4c>)
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f004 fa53 	bl	8007758 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40004400 	.word	0x40004400
 80032c0:	200003cc 	.word	0x200003cc
 80032c4:	200003c4 	.word	0x200003c4

080032c8 <Reset_Handler>:
 80032c8:	480d      	ldr	r0, [pc, #52]	@ (8003300 <LoopForever+0x2>)
 80032ca:	4685      	mov	sp, r0
 80032cc:	f7ff fb12 	bl	80028f4 <SystemInit>
 80032d0:	480c      	ldr	r0, [pc, #48]	@ (8003304 <LoopForever+0x6>)
 80032d2:	490d      	ldr	r1, [pc, #52]	@ (8003308 <LoopForever+0xa>)
 80032d4:	4a0d      	ldr	r2, [pc, #52]	@ (800330c <LoopForever+0xe>)
 80032d6:	2300      	movs	r3, #0
 80032d8:	e002      	b.n	80032e0 <LoopCopyDataInit>

080032da <CopyDataInit>:
 80032da:	58d4      	ldr	r4, [r2, r3]
 80032dc:	50c4      	str	r4, [r0, r3]
 80032de:	3304      	adds	r3, #4

080032e0 <LoopCopyDataInit>:
 80032e0:	18c4      	adds	r4, r0, r3
 80032e2:	428c      	cmp	r4, r1
 80032e4:	d3f9      	bcc.n	80032da <CopyDataInit>
 80032e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003310 <LoopForever+0x12>)
 80032e8:	4c0a      	ldr	r4, [pc, #40]	@ (8003314 <LoopForever+0x16>)
 80032ea:	2300      	movs	r3, #0
 80032ec:	e001      	b.n	80032f2 <LoopFillZerobss>

080032ee <FillZerobss>:
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	3204      	adds	r2, #4

080032f2 <LoopFillZerobss>:
 80032f2:	42a2      	cmp	r2, r4
 80032f4:	d3fb      	bcc.n	80032ee <FillZerobss>
 80032f6:	f019 fa0d 	bl	801c714 <__libc_init_array>
 80032fa:	f7fe fdfb 	bl	8001ef4 <main>

080032fe <LoopForever>:
 80032fe:	e7fe      	b.n	80032fe <LoopForever>
 8003300:	20010000 	.word	0x20010000
 8003304:	20000000 	.word	0x20000000
 8003308:	2000018c 	.word	0x2000018c
 800330c:	0801df08 	.word	0x0801df08
 8003310:	2000018c 	.word	0x2000018c
 8003314:	20001cc4 	.word	0x20001cc4

08003318 <ADC_IRQHandler>:
 8003318:	e7fe      	b.n	8003318 <ADC_IRQHandler>
	...

0800331c <LL_DBGMCU_DisableDBGSleepMode>:
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003320:	4b04      	ldr	r3, [pc, #16]	@ (8003334 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4a03      	ldr	r2, [pc, #12]	@ (8003334 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8003326:	f023 0301 	bic.w	r3, r3, #1
 800332a:	6053      	str	r3, [r2, #4]
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	e0042000 	.word	0xe0042000

08003338 <LL_DBGMCU_DisableDBGStopMode>:
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800333c:	4b04      	ldr	r3, [pc, #16]	@ (8003350 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a03      	ldr	r2, [pc, #12]	@ (8003350 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003342:	f023 0302 	bic.w	r3, r3, #2
 8003346:	6053      	str	r3, [r2, #4]
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	e0042000 	.word	0xe0042000

08003354 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003358:	4b04      	ldr	r3, [pc, #16]	@ (800336c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4a03      	ldr	r2, [pc, #12]	@ (800336c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800335e:	f023 0304 	bic.w	r3, r3, #4
 8003362:	6053      	str	r3, [r2, #4]
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	e0042000 	.word	0xe0042000

08003370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800337a:	2003      	movs	r0, #3
 800337c:	f001 f9f2 	bl	8004764 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003380:	f002 fc2e 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 8003384:	4603      	mov	r3, r0
 8003386:	4a09      	ldr	r2, [pc, #36]	@ (80033ac <HAL_Init+0x3c>)
 8003388:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800338a:	2000      	movs	r0, #0
 800338c:	f000 f810 	bl	80033b0 <HAL_InitTick>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	71fb      	strb	r3, [r7, #7]
 800339a:	e001      	b.n	80033a0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800339c:	f7fe ff70 	bl	8002280 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033a0:	79fb      	ldrb	r3, [r7, #7]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000000 	.word	0x20000000

080033b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80033bc:	4b17      	ldr	r3, [pc, #92]	@ (800341c <HAL_InitTick+0x6c>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d024      	beq.n	800340e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033c4:	f002 fc0c 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b14      	ldr	r3, [pc, #80]	@ (800341c <HAL_InitTick+0x6c>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	4619      	mov	r1, r3
 80033d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80033d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033dc:	4618      	mov	r0, r3
 80033de:	f001 fa02 	bl	80047e6 <HAL_SYSTICK_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10f      	bne.n	8003408 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b0f      	cmp	r3, #15
 80033ec:	d809      	bhi.n	8003402 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033ee:	2200      	movs	r2, #0
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	f04f 30ff 	mov.w	r0, #4294967295
 80033f6:	f001 f9c0 	bl	800477a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033fa:	4a09      	ldr	r2, [pc, #36]	@ (8003420 <HAL_InitTick+0x70>)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	e007      	b.n	8003412 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	73fb      	strb	r3, [r7, #15]
 8003406:	e004      	b.n	8003412 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	73fb      	strb	r3, [r7, #15]
 800340c:	e001      	b.n	8003412 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003412:	7bfb      	ldrb	r3, [r7, #15]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20000008 	.word	0x20000008
 8003420:	20000004 	.word	0x20000004

08003424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003428:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <HAL_IncTick+0x1c>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	4b05      	ldr	r3, [pc, #20]	@ (8003444 <HAL_IncTick+0x20>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4413      	add	r3, r2
 8003434:	4a03      	ldr	r2, [pc, #12]	@ (8003444 <HAL_IncTick+0x20>)
 8003436:	6013      	str	r3, [r2, #0]
}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr
 8003440:	20000008 	.word	0x20000008
 8003444:	200003d0 	.word	0x200003d0

08003448 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800344c:	4b02      	ldr	r3, [pc, #8]	@ (8003458 <HAL_GetUIDw0+0x10>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr
 8003458:	1fff7590 	.word	0x1fff7590

0800345c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003460:	4b02      	ldr	r3, [pc, #8]	@ (800346c <HAL_GetUIDw1+0x10>)
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	1fff7594 	.word	0x1fff7594

08003470 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003474:	4b02      	ldr	r3, [pc, #8]	@ (8003480 <HAL_GetUIDw2+0x10>)
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr
 8003480:	1fff7598 	.word	0x1fff7598

08003484 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003488:	f7ff ff48 	bl	800331c <LL_DBGMCU_DisableDBGSleepMode>
}
 800348c:	bf00      	nop
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8003494:	f7ff ff50 	bl	8003338 <LL_DBGMCU_DisableDBGStopMode>
}
 8003498:	bf00      	nop
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 80034a0:	f7ff ff58 	bl	8003354 <LL_DBGMCU_DisableDBGStandbyMode>
}
 80034a4:	bf00      	nop
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	601a      	str	r2, [r3, #0]
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr

080034cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr

080034e6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b085      	sub	sp, #20
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2107      	movs	r1, #7
 80034fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	401a      	ands	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	fa01 f303 	lsl.w	r3, r1, r3
 8003512:	431a      	orrs	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr

08003522 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695a      	ldr	r2, [r3, #20]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2107      	movs	r1, #7
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr

08003552 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr

08003576 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003576:	b480      	push	{r7}
 8003578:	b085      	sub	sp, #20
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	210f      	movs	r1, #15
 800358e:	fa01 f303 	lsl.w	r3, r1, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	401a      	ands	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	0e9b      	lsrs	r3, r3, #26
 800359a:	f003 010f 	and.w	r1, r3, #15
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	fa01 f303 	lsl.w	r3, r1, r3
 80035a8:	431a      	orrs	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035ae:	bf00      	nop
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr

080035b8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr

080035dc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80035f0:	43db      	mvns	r3, r3
 80035f2:	401a      	ands	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr

08003602 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003602:	b480      	push	{r7}
 8003604:	b085      	sub	sp, #20
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	43db      	mvns	r3, r3
 8003618:	401a      	ands	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	0219      	lsls	r1, r3, #8
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	400b      	ands	r3, r1
 8003622:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8003626:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800362a:	431a      	orrs	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr

0800363a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800364a:	f023 0317 	bic.w	r3, r3, #23
 800364e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003670:	f023 0317 	bic.w	r3, r3, #23
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6093      	str	r3, [r2, #8]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr

08003682 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003692:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003696:	d101      	bne.n	800369c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036b8:	f023 0317 	bic.w	r3, r3, #23
 80036bc:	f043 0201 	orr.w	r2, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036de:	f023 0317 	bic.w	r3, r3, #23
 80036e2:	f043 0202 	orr.w	r2, r3, #2
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <LL_ADC_IsEnabled+0x18>
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <LL_ADC_IsEnabled+0x1a>
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b02      	cmp	r3, #2
 800372a:	d101      	bne.n	8003730 <LL_ADC_IsDisableOngoing+0x18>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <LL_ADC_IsDisableOngoing+0x1a>
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr

0800373c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800374c:	f023 0317 	bic.w	r3, r3, #23
 8003750:	f043 0204 	orr.w	r2, r3, #4
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr

08003762 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003772:	f023 0317 	bic.w	r3, r3, #23
 8003776:	f043 0210 	orr.w	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b04      	cmp	r3, #4
 800379a:	d101      	bne.n	80037a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e17e      	b.n	8003acc <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7fd fe91 	bl	8001504 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff ff44 	bl	8003682 <LL_ADC_IsInternalRegulatorEnabled>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d115      	bne.n	800382c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff ff18 	bl	800363a <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800380a:	4b9e      	ldr	r3, [pc, #632]	@ (8003a84 <HAL_ADC_Init+0x2d8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	099b      	lsrs	r3, r3, #6
 8003810:	4a9d      	ldr	r2, [pc, #628]	@ (8003a88 <HAL_ADC_Init+0x2dc>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	099b      	lsrs	r3, r3, #6
 8003818:	3301      	adds	r3, #1
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800381e:	e002      	b.n	8003826 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3b01      	subs	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f9      	bne.n	8003820 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff ff26 	bl	8003682 <LL_ADC_IsInternalRegulatorEnabled>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10d      	bne.n	8003858 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003840:	f043 0210 	orr.w	r2, r3, #16
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384c:	f043 0201 	orr.w	r2, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff93 	bl	8003788 <LL_ADC_REG_IsConversionOngoing>
 8003862:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b00      	cmp	r3, #0
 800386e:	f040 8124 	bne.w	8003aba <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	f040 8120 	bne.w	8003aba <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003882:	f043 0202 	orr.w	r2, r3, #2
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff ff30 	bl	80036f4 <LL_ADC_IsEnabled>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	f040 80a7 	bne.w	80039ea <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	7e1b      	ldrb	r3, [r3, #24]
 80038a4:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80038a6:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	7e5b      	ldrb	r3, [r3, #25]
 80038ac:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80038ae:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	7e9b      	ldrb	r3, [r3, #26]
 80038b4:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80038b6:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038bc:	2a00      	cmp	r2, #0
 80038be:	d002      	beq.n	80038c6 <HAL_ADC_Init+0x11a>
 80038c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80038c4:	e000      	b.n	80038c8 <HAL_ADC_Init+0x11c>
 80038c6:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80038c8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80038ce:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	da04      	bge.n	80038e2 <HAL_ADC_Init+0x136>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038e0:	e001      	b.n	80038e6 <HAL_ADC_Init+0x13a>
 80038e2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 80038e6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80038ee:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80038f0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d114      	bne.n	800392c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	7e9b      	ldrb	r3, [r3, #26]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d104      	bne.n	8003914 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e00b      	b.n	800392c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003918:	f043 0220 	orr.w	r2, r3, #32
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003924:	f043 0201 	orr.w	r2, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003930:	2b00      	cmp	r3, #0
 8003932:	d009      	beq.n	8003948 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003940:	4313      	orrs	r3, r2
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8003952:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	69b9      	ldr	r1, [r7, #24]
 800395c:	430b      	orrs	r3, r1
 800395e:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800396c:	4313      	orrs	r3, r2
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800397a:	2b01      	cmp	r3, #1
 800397c:	d111      	bne.n	80039a2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800398a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003990:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003996:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	4b38      	ldr	r3, [pc, #224]	@ (8003a8c <HAL_ADC_Init+0x2e0>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	6979      	ldr	r1, [r7, #20]
 80039b2:	430b      	orrs	r3, r1
 80039b4:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80039be:	d014      	beq.n	80039ea <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80039c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c8:	d00f      	beq.n	80039ea <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80039ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039d2:	d00a      	beq.n	80039ea <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80039d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003a90 <HAL_ADC_Init+0x2e4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80039e4:	492a      	ldr	r1, [pc, #168]	@ (8003a90 <HAL_ADC_Init+0x2e4>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f2:	461a      	mov	r2, r3
 80039f4:	2100      	movs	r1, #0
 80039f6:	f7ff fd76 	bl	80034e6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a02:	461a      	mov	r2, r3
 8003a04:	4923      	ldr	r1, [pc, #140]	@ (8003a94 <HAL_ADC_Init+0x2e8>)
 8003a06:	f7ff fd6e 	bl	80034e6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d108      	bne.n	8003a24 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f062 020f 	orn	r2, r2, #15
 8003a20:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a22:	e017      	b.n	8003a54 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a2c:	d112      	bne.n	8003a54 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	f003 031c 	and.w	r3, r3, #28
 8003a40:	f06f 020f 	mvn.w	r2, #15
 8003a44:	fa02 f103 	lsl.w	r1, r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fd61 	bl	8003522 <LL_ADC_GetSamplingTimeCommonChannels>
 8003a60:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d116      	bne.n	8003a98 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a74:	f023 0303 	bic.w	r3, r3, #3
 8003a78:	f043 0201 	orr.w	r2, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003a80:	e023      	b.n	8003aca <HAL_ADC_Init+0x31e>
 8003a82:	bf00      	nop
 8003a84:	20000000 	.word	0x20000000
 8003a88:	053e2d63 	.word	0x053e2d63
 8003a8c:	1ffffc02 	.word	0x1ffffc02
 8003a90:	40012708 	.word	0x40012708
 8003a94:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9c:	f023 0312 	bic.w	r3, r3, #18
 8003aa0:	f043 0210 	orr.w	r2, r3, #16
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aac:	f043 0201 	orr.w	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003ab8:	e007      	b.n	8003aca <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003abe:	f043 0210 	orr.w	r2, r3, #16
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003aca:	7ffb      	ldrb	r3, [r7, #31]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3720      	adds	r7, #32
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e07a      	b.n	8003bdc <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aea:	f043 0202 	orr.w	r2, r3, #2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 face 	bl	8004094 <ADC_ConversionStop>
 8003af8:	4603      	mov	r3, r0
 8003afa:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10f      	bne.n	8003b22 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fb92 	bl	800422c <ADC_Disable>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d102      	bne.n	8003b18 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fd9f 	bl	8003660 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8003b30:	f023 0303 	bic.w	r3, r3, #3
 8003b34:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f240 329f 	movw	r2, #927	@ 0x39f
 8003b3e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68d9      	ldr	r1, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	4b26      	ldr	r3, [pc, #152]	@ (8003be4 <HAL_ADC_DeInit+0x110>)
 8003b4c:	400b      	ands	r3, r1
 8003b4e:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691a      	ldr	r2, [r3, #16]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003b5e:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0207 	bic.w	r2, r2, #7
 8003b6e:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6a1a      	ldr	r2, [r3, #32]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003b7e:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003b8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2200      	movs	r2, #0
 8003bac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003bae:	4b0e      	ldr	r3, [pc, #56]	@ (8003be8 <HAL_ADC_DeInit+0x114>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8003be8 <HAL_ADC_DeInit+0x114>)
 8003bb4:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003bb8:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fd fcb6 	bl	800152c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	833e0200 	.word	0x833e0200
 8003be8:	40012708 	.word	0x40012708

08003bec <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff fdc5 	bl	8003788 <LL_ADC_REG_IsConversionOngoing>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d132      	bne.n	8003c6a <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_ADC_Start+0x26>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e02e      	b.n	8003c70 <HAL_ADC_Start+0x84>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fa80 	bl	8004120 <ADC_Enable>
 8003c20:	4603      	mov	r3, r0
 8003c22:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d11a      	bne.n	8003c60 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c2e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c32:	f023 0301 	bic.w	r3, r3, #1
 8003c36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	221c      	movs	r2, #28
 8003c4a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fd6f 	bl	800373c <LL_ADC_REG_StartConversion>
 8003c5e:	e006      	b.n	8003c6e <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003c68:	e001      	b.n	8003c6e <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_ADC_Stop+0x16>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e022      	b.n	8003cd4 <HAL_ADC_Stop+0x5c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f9fc 	bl	8004094 <ADC_ConversionStop>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d111      	bne.n	8003cca <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fac0 	bl	800422c <ADC_Disable>
 8003cac:	4603      	mov	r3, r0
 8003cae:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cbe:	f023 0301 	bic.w	r3, r3, #1
 8003cc2:	f043 0201 	orr.w	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d102      	bne.n	8003cf4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003cee:	2308      	movs	r3, #8
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	e010      	b.n	8003d16 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d06:	f043 0220 	orr.w	r2, r3, #32
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e077      	b.n	8003e02 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003d12:	2304      	movs	r3, #4
 8003d14:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003d16:	f7fe fce7 	bl	80026e8 <HAL_GetTick>
 8003d1a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003d1c:	e021      	b.n	8003d62 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d24:	d01d      	beq.n	8003d62 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003d26:	f7fe fcdf 	bl	80026e8 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d302      	bcc.n	8003d3c <HAL_ADC_PollForConversion+0x60>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d112      	bne.n	8003d62 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10b      	bne.n	8003d62 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4e:	f043 0204 	orr.w	r2, r3, #4
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e04f      	b.n	8003e02 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0d6      	beq.n	8003d1e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fbe6 	bl	8003552 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d031      	beq.n	8003df0 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	7e9b      	ldrb	r3, [r3, #26]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d12d      	bne.n	8003df0 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d126      	bne.n	8003df0 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fcee 	bl	8003788 <LL_ADC_REG_IsConversionOngoing>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d112      	bne.n	8003dd8 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 020c 	bic.w	r2, r2, #12
 8003dc0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dca:	f023 0301 	bic.w	r3, r3, #1
 8003dce:	f043 0201 	orr.w	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	659a      	str	r2, [r3, #88]	@ 0x58
 8003dd6:	e00b      	b.n	8003df0 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ddc:	f043 0220 	orr.w	r2, r3, #32
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de8:	f043 0201 	orr.w	r2, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	7e1b      	ldrb	r3, [r3, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d103      	bne.n	8003e00 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	220c      	movs	r2, #12
 8003dfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr
	...

08003e24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b088      	sub	sp, #32
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x28>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e110      	b.n	800406e <HAL_ADC_ConfigChannel+0x24a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff fc95 	bl	8003788 <LL_ADC_REG_IsConversionOngoing>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f040 80f7 	bne.w	8004054 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	f000 80b1 	beq.w	8003fd2 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e78:	d004      	beq.n	8003e84 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e7e:	4a7e      	ldr	r2, [pc, #504]	@ (8004078 <HAL_ADC_ConfigChannel+0x254>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d108      	bne.n	8003e96 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f7ff fb92 	bl	80035b8 <LL_ADC_REG_SetSequencerChAdd>
 8003e94:	e041      	b.n	8003f1a <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	210f      	movs	r1, #15
 8003ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	401a      	ands	r2, r3
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d105      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0xa0>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	0e9b      	lsrs	r3, r3, #26
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	e011      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0xc4>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	fa93 f3a3 	rbit	r3, r3
 8003ed0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003edc:	2320      	movs	r3, #32
 8003ede:	e003      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	fab3 f383 	clz	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	6839      	ldr	r1, [r7, #0]
 8003eea:	6849      	ldr	r1, [r1, #4]
 8003eec:	f001 011f 	and.w	r1, r1, #31
 8003ef0:	408b      	lsls	r3, r1
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	089b      	lsrs	r3, r3, #2
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d808      	bhi.n	8003f1a <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	6859      	ldr	r1, [r3, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	f7ff fb2e 	bl	8003576 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6819      	ldr	r1, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	461a      	mov	r2, r3
 8003f28:	f7ff fb6b 	bl	8003602 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f280 8097 	bge.w	8004064 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f36:	4851      	ldr	r0, [pc, #324]	@ (800407c <HAL_ADC_ConfigChannel+0x258>)
 8003f38:	f7ff fac8 	bl	80034cc <LL_ADC_GetCommonPathInternalCh>
 8003f3c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a4f      	ldr	r2, [pc, #316]	@ (8004080 <HAL_ADC_ConfigChannel+0x25c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d120      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d11b      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4848      	ldr	r0, [pc, #288]	@ (800407c <HAL_ADC_ConfigChannel+0x258>)
 8003f5c:	f7ff faa4 	bl	80034a8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f60:	4b48      	ldr	r3, [pc, #288]	@ (8004084 <HAL_ADC_ConfigChannel+0x260>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	099b      	lsrs	r3, r3, #6
 8003f66:	4a48      	ldr	r2, [pc, #288]	@ (8004088 <HAL_ADC_ConfigChannel+0x264>)
 8003f68:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6c:	099b      	lsrs	r3, r3, #6
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	4613      	mov	r3, r2
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003f7a:	e002      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f9      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f88:	e06c      	b.n	8004064 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a3f      	ldr	r2, [pc, #252]	@ (800408c <HAL_ADC_ConfigChannel+0x268>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d10c      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d107      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4835      	ldr	r0, [pc, #212]	@ (800407c <HAL_ADC_ConfigChannel+0x258>)
 8003fa8:	f7ff fa7e 	bl	80034a8 <LL_ADC_SetCommonPathInternalCh>
 8003fac:	e05a      	b.n	8004064 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a37      	ldr	r2, [pc, #220]	@ (8004090 <HAL_ADC_ConfigChannel+0x26c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d155      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d150      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003fc8:	4619      	mov	r1, r3
 8003fca:	482c      	ldr	r0, [pc, #176]	@ (800407c <HAL_ADC_ConfigChannel+0x258>)
 8003fcc:	f7ff fa6c 	bl	80034a8 <LL_ADC_SetCommonPathInternalCh>
 8003fd0:	e048      	b.n	8004064 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fda:	d004      	beq.n	8003fe6 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003fe0:	4a25      	ldr	r2, [pc, #148]	@ (8004078 <HAL_ADC_ConfigChannel+0x254>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d107      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	f7ff faf3 	bl	80035dc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	da32      	bge.n	8004064 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ffe:	481f      	ldr	r0, [pc, #124]	@ (800407c <HAL_ADC_ConfigChannel+0x258>)
 8004000:	f7ff fa64 	bl	80034cc <LL_ADC_GetCommonPathInternalCh>
 8004004:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1d      	ldr	r2, [pc, #116]	@ (8004080 <HAL_ADC_ConfigChannel+0x25c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d107      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004016:	4619      	mov	r1, r3
 8004018:	4818      	ldr	r0, [pc, #96]	@ (800407c <HAL_ADC_ConfigChannel+0x258>)
 800401a:	f7ff fa45 	bl	80034a8 <LL_ADC_SetCommonPathInternalCh>
 800401e:	e021      	b.n	8004064 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a19      	ldr	r2, [pc, #100]	@ (800408c <HAL_ADC_ConfigChannel+0x268>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d107      	bne.n	800403a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004030:	4619      	mov	r1, r3
 8004032:	4812      	ldr	r0, [pc, #72]	@ (800407c <HAL_ADC_ConfigChannel+0x258>)
 8004034:	f7ff fa38 	bl	80034a8 <LL_ADC_SetCommonPathInternalCh>
 8004038:	e014      	b.n	8004064 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a14      	ldr	r2, [pc, #80]	@ (8004090 <HAL_ADC_ConfigChannel+0x26c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d10f      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800404a:	4619      	mov	r1, r3
 800404c:	480b      	ldr	r0, [pc, #44]	@ (800407c <HAL_ADC_ConfigChannel+0x258>)
 800404e:	f7ff fa2b 	bl	80034a8 <LL_ADC_SetCommonPathInternalCh>
 8004052:	e007      	b.n	8004064 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004058:	f043 0220 	orr.w	r2, r3, #32
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800406c:	7ffb      	ldrb	r3, [r7, #31]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3720      	adds	r7, #32
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	80000004 	.word	0x80000004
 800407c:	40012708 	.word	0x40012708
 8004080:	b0001000 	.word	0xb0001000
 8004084:	20000000 	.word	0x20000000
 8004088:	053e2d63 	.word	0x053e2d63
 800408c:	b8004000 	.word	0xb8004000
 8004090:	b4002000 	.word	0xb4002000

08004094 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff fb71 	bl	8003788 <LL_ADC_REG_IsConversionOngoing>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d033      	beq.n	8004114 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff fb31 	bl	8003718 <LL_ADC_IsDisableOngoing>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d104      	bne.n	80040c6 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff fb4e 	bl	8003762 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040c6:	f7fe fb0f 	bl	80026e8 <HAL_GetTick>
 80040ca:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80040cc:	e01b      	b.n	8004106 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80040ce:	f7fe fb0b 	bl	80026e8 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d914      	bls.n	8004106 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00d      	beq.n	8004106 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ee:	f043 0210 	orr.w	r2, r3, #16
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fa:	f043 0201 	orr.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e007      	b.n	8004116 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1dc      	bne.n	80040ce <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004128:	2300      	movs	r3, #0
 800412a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff fadf 	bl	80036f4 <LL_ADC_IsEnabled>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d169      	bne.n	8004210 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	4b36      	ldr	r3, [pc, #216]	@ (800421c <ADC_Enable+0xfc>)
 8004144:	4013      	ands	r3, r2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00d      	beq.n	8004166 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414e:	f043 0210 	orr.w	r2, r3, #16
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415a:	f043 0201 	orr.w	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e055      	b.n	8004212 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fa9c 	bl	80036a8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004170:	482b      	ldr	r0, [pc, #172]	@ (8004220 <ADC_Enable+0x100>)
 8004172:	f7ff f9ab 	bl	80034cc <LL_ADC_GetCommonPathInternalCh>
 8004176:	4603      	mov	r3, r0
 8004178:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00f      	beq.n	80041a0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004180:	4b28      	ldr	r3, [pc, #160]	@ (8004224 <ADC_Enable+0x104>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	099b      	lsrs	r3, r3, #6
 8004186:	4a28      	ldr	r2, [pc, #160]	@ (8004228 <ADC_Enable+0x108>)
 8004188:	fba2 2303 	umull	r2, r3, r2, r3
 800418c:	099b      	lsrs	r3, r3, #6
 800418e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004190:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004192:	e002      	b.n	800419a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	3b01      	subs	r3, #1
 8004198:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f9      	bne.n	8004194 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	7e5b      	ldrb	r3, [r3, #25]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d033      	beq.n	8004210 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80041a8:	f7fe fa9e 	bl	80026e8 <HAL_GetTick>
 80041ac:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041ae:	e028      	b.n	8004202 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff fa9d 	bl	80036f4 <LL_ADC_IsEnabled>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d104      	bne.n	80041ca <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fa6f 	bl	80036a8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041ca:	f7fe fa8d 	bl	80026e8 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d914      	bls.n	8004202 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d00d      	beq.n	8004202 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ea:	f043 0210 	orr.w	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f6:	f043 0201 	orr.w	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e007      	b.n	8004212 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b01      	cmp	r3, #1
 800420e:	d1cf      	bne.n	80041b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	80000017 	.word	0x80000017
 8004220:	40012708 	.word	0x40012708
 8004224:	20000000 	.word	0x20000000
 8004228:	053e2d63 	.word	0x053e2d63

0800422c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff fa6d 	bl	8003718 <LL_ADC_IsDisableOngoing>
 800423e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff fa55 	bl	80036f4 <LL_ADC_IsEnabled>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d047      	beq.n	80042e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d144      	bne.n	80042e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 0305 	and.w	r3, r3, #5
 8004260:	2b01      	cmp	r3, #1
 8004262:	d10c      	bne.n	800427e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff fa30 	bl	80036ce <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2203      	movs	r2, #3
 8004274:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004276:	f7fe fa37 	bl	80026e8 <HAL_GetTick>
 800427a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800427c:	e029      	b.n	80042d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004282:	f043 0210 	orr.w	r2, r3, #16
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800428e:	f043 0201 	orr.w	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e023      	b.n	80042e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800429a:	f7fe fa25 	bl	80026e8 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d914      	bls.n	80042d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00d      	beq.n	80042d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ba:	f043 0210 	orr.w	r2, r3, #16
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c6:	f043 0201 	orr.w	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e007      	b.n	80042e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1dc      	bne.n	800429a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <LL_ADC_SetCalibrationFactor>:
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042fa:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	bc80      	pop	{r7}
 8004310:	4770      	bx	lr

08004312 <LL_ADC_GetCalibrationFactor>:
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004320:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr

0800432e <LL_ADC_Enable>:
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800433e:	f023 0317 	bic.w	r3, r3, #23
 8004342:	f043 0201 	orr.w	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	609a      	str	r2, [r3, #8]
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <LL_ADC_Disable>:
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004364:	f023 0317 	bic.w	r3, r3, #23
 8004368:	f043 0202 	orr.w	r2, r3, #2
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	609a      	str	r2, [r3, #8]
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr

0800437a <LL_ADC_IsEnabled>:
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <LL_ADC_IsEnabled+0x18>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <LL_ADC_IsEnabled+0x1a>
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr

0800439e <LL_ADC_StartCalibration>:
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043ae:	f023 0317 	bic.w	r3, r3, #23
 80043b2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	609a      	str	r2, [r3, #8]
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr

080043c4 <LL_ADC_IsCalibrationOnGoing>:
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043d8:	d101      	bne.n	80043de <LL_ADC_IsCalibrationOnGoing+0x1a>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b088      	sub	sp, #32
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_ADCEx_Calibration_Start+0x1e>
 8004404:	2302      	movs	r3, #2
 8004406:	e0b9      	b.n	800457c <HAL_ADCEx_Calibration_Start+0x192>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff ff0b 	bl	800422c <ADC_Disable>
 8004416:	4603      	mov	r3, r0
 8004418:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff ffab 	bl	800437a <LL_ADC_IsEnabled>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	f040 809d 	bne.w	8004566 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004430:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004434:	f043 0202 	orr.w	r2, r3, #2
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	f248 0303 	movw	r3, #32771	@ 0x8003
 8004446:	4013      	ands	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004458:	f023 0303 	bic.w	r3, r3, #3
 800445c:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800445e:	2300      	movs	r3, #0
 8004460:	61fb      	str	r3, [r7, #28]
 8004462:	e02e      	b.n	80044c2 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff ff98 	bl	800439e <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800446e:	e014      	b.n	800449a <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	3301      	adds	r3, #1
 8004474:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 800447c:	d30d      	bcc.n	800449a <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004482:	f023 0312 	bic.w	r3, r3, #18
 8004486:	f043 0210 	orr.w	r2, r3, #16
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e070      	b.n	800457c <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff ff90 	bl	80043c4 <LL_ADC_IsCalibrationOnGoing>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e2      	bne.n	8004470 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff ff2f 	bl	8004312 <LL_ADC_GetCalibrationFactor>
 80044b4:	4602      	mov	r2, r0
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	4413      	add	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	3301      	adds	r3, #1
 80044c0:	61fb      	str	r3, [r7, #28]
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	2b07      	cmp	r3, #7
 80044c6:	d9cd      	bls.n	8004464 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d0:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff ff29 	bl	800432e <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69b9      	ldr	r1, [r7, #24]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff ff01 	bl	80042ea <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff ff31 	bl	8004354 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80044f2:	f7fe f8f9 	bl	80026e8 <HAL_GetTick>
 80044f6:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80044f8:	e01c      	b.n	8004534 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80044fa:	f7fe f8f5 	bl	80026e8 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d915      	bls.n	8004534 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff ff34 	bl	800437a <LL_ADC_IsEnabled>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00d      	beq.n	8004534 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451c:	f043 0210 	orr.w	r2, r3, #16
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004528:	f043 0201 	orr.w	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e023      	b.n	800457c <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff ff1e 	bl	800437a <LL_ADC_IsEnabled>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1da      	bne.n	80044fa <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68d9      	ldr	r1, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	430a      	orrs	r2, r1
 8004552:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004558:	f023 0303 	bic.w	r3, r3, #3
 800455c:	f043 0201 	orr.w	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	659a      	str	r2, [r3, #88]	@ 0x58
 8004564:	e005      	b.n	8004572 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456a:	f043 0210 	orr.w	r2, r3, #16
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800457a:	7dfb      	ldrb	r3, [r7, #23]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3720      	adds	r7, #32
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004594:	4b0c      	ldr	r3, [pc, #48]	@ (80045c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045a0:	4013      	ands	r3, r2
 80045a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045b6:	4a04      	ldr	r2, [pc, #16]	@ (80045c8 <__NVIC_SetPriorityGrouping+0x44>)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	60d3      	str	r3, [r2, #12]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	e000ed00 	.word	0xe000ed00

080045cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045d0:	4b04      	ldr	r3, [pc, #16]	@ (80045e4 <__NVIC_GetPriorityGrouping+0x18>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	0a1b      	lsrs	r3, r3, #8
 80045d6:	f003 0307 	and.w	r3, r3, #7
}
 80045da:	4618      	mov	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	e000ed00 	.word	0xe000ed00

080045e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	db0b      	blt.n	8004612 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	f003 021f 	and.w	r2, r3, #31
 8004600:	4906      	ldr	r1, [pc, #24]	@ (800461c <__NVIC_EnableIRQ+0x34>)
 8004602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	2001      	movs	r0, #1
 800460a:	fa00 f202 	lsl.w	r2, r0, r2
 800460e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr
 800461c:	e000e100 	.word	0xe000e100

08004620 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800462a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462e:	2b00      	cmp	r3, #0
 8004630:	db12      	blt.n	8004658 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	f003 021f 	and.w	r2, r3, #31
 8004638:	490a      	ldr	r1, [pc, #40]	@ (8004664 <__NVIC_DisableIRQ+0x44>)
 800463a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	2001      	movs	r0, #1
 8004642:	fa00 f202 	lsl.w	r2, r0, r2
 8004646:	3320      	adds	r3, #32
 8004648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800464c:	f3bf 8f4f 	dsb	sy
}
 8004650:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004652:	f3bf 8f6f 	isb	sy
}
 8004656:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	e000e100 	.word	0xe000e100

08004668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	6039      	str	r1, [r7, #0]
 8004672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004678:	2b00      	cmp	r3, #0
 800467a:	db0a      	blt.n	8004692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	b2da      	uxtb	r2, r3
 8004680:	490c      	ldr	r1, [pc, #48]	@ (80046b4 <__NVIC_SetPriority+0x4c>)
 8004682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004686:	0112      	lsls	r2, r2, #4
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	440b      	add	r3, r1
 800468c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004690:	e00a      	b.n	80046a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	b2da      	uxtb	r2, r3
 8004696:	4908      	ldr	r1, [pc, #32]	@ (80046b8 <__NVIC_SetPriority+0x50>)
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	3b04      	subs	r3, #4
 80046a0:	0112      	lsls	r2, r2, #4
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	440b      	add	r3, r1
 80046a6:	761a      	strb	r2, [r3, #24]
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	e000e100 	.word	0xe000e100
 80046b8:	e000ed00 	.word	0xe000ed00

080046bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046bc:	b480      	push	{r7}
 80046be:	b089      	sub	sp, #36	@ 0x24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f1c3 0307 	rsb	r3, r3, #7
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	bf28      	it	cs
 80046da:	2304      	movcs	r3, #4
 80046dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3304      	adds	r3, #4
 80046e2:	2b06      	cmp	r3, #6
 80046e4:	d902      	bls.n	80046ec <NVIC_EncodePriority+0x30>
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	3b03      	subs	r3, #3
 80046ea:	e000      	b.n	80046ee <NVIC_EncodePriority+0x32>
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f0:	f04f 32ff 	mov.w	r2, #4294967295
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43da      	mvns	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	401a      	ands	r2, r3
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004704:	f04f 31ff 	mov.w	r1, #4294967295
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	fa01 f303 	lsl.w	r3, r1, r3
 800470e:	43d9      	mvns	r1, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004714:	4313      	orrs	r3, r2
         );
}
 8004716:	4618      	mov	r0, r3
 8004718:	3724      	adds	r7, #36	@ 0x24
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3b01      	subs	r3, #1
 800472c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004730:	d301      	bcc.n	8004736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004732:	2301      	movs	r3, #1
 8004734:	e00f      	b.n	8004756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004736:	4a0a      	ldr	r2, [pc, #40]	@ (8004760 <SysTick_Config+0x40>)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3b01      	subs	r3, #1
 800473c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800473e:	210f      	movs	r1, #15
 8004740:	f04f 30ff 	mov.w	r0, #4294967295
 8004744:	f7ff ff90 	bl	8004668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004748:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <SysTick_Config+0x40>)
 800474a:	2200      	movs	r2, #0
 800474c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800474e:	4b04      	ldr	r3, [pc, #16]	@ (8004760 <SysTick_Config+0x40>)
 8004750:	2207      	movs	r2, #7
 8004752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	e000e010 	.word	0xe000e010

08004764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff ff09 	bl	8004584 <__NVIC_SetPriorityGrouping>
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b086      	sub	sp, #24
 800477e:	af00      	add	r7, sp, #0
 8004780:	4603      	mov	r3, r0
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
 8004786:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004788:	f7ff ff20 	bl	80045cc <__NVIC_GetPriorityGrouping>
 800478c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	6978      	ldr	r0, [r7, #20]
 8004794:	f7ff ff92 	bl	80046bc <NVIC_EncodePriority>
 8004798:	4602      	mov	r2, r0
 800479a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800479e:	4611      	mov	r1, r2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff ff61 	bl	8004668 <__NVIC_SetPriority>
}
 80047a6:	bf00      	nop
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	4603      	mov	r3, r0
 80047b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff ff13 	bl	80045e8 <__NVIC_EnableIRQ>
}
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	4603      	mov	r3, r0
 80047d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80047d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff ff21 	bl	8004620 <__NVIC_DisableIRQ>
}
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff ff96 	bl	8004720 <SysTick_Config>
 80047f4:	4603      	mov	r3, r0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e08e      	b.n	8004930 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	4b47      	ldr	r3, [pc, #284]	@ (8004938 <HAL_DMA_Init+0x138>)
 800481a:	429a      	cmp	r2, r3
 800481c:	d80f      	bhi.n	800483e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	4b45      	ldr	r3, [pc, #276]	@ (800493c <HAL_DMA_Init+0x13c>)
 8004826:	4413      	add	r3, r2
 8004828:	4a45      	ldr	r2, [pc, #276]	@ (8004940 <HAL_DMA_Init+0x140>)
 800482a:	fba2 2303 	umull	r2, r3, r2, r3
 800482e:	091b      	lsrs	r3, r3, #4
 8004830:	009a      	lsls	r2, r3, #2
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a42      	ldr	r2, [pc, #264]	@ (8004944 <HAL_DMA_Init+0x144>)
 800483a:	641a      	str	r2, [r3, #64]	@ 0x40
 800483c:	e00e      	b.n	800485c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	4b40      	ldr	r3, [pc, #256]	@ (8004948 <HAL_DMA_Init+0x148>)
 8004846:	4413      	add	r3, r2
 8004848:	4a3d      	ldr	r2, [pc, #244]	@ (8004940 <HAL_DMA_Init+0x140>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	091b      	lsrs	r3, r3, #4
 8004850:	009a      	lsls	r2, r3, #2
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a3c      	ldr	r2, [pc, #240]	@ (800494c <HAL_DMA_Init+0x14c>)
 800485a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004876:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6819      	ldr	r1, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fb52 	bl	8004f58 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048bc:	d102      	bne.n	80048c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80048d0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048da:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d010      	beq.n	8004906 <HAL_DMA_Init+0x106>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d80c      	bhi.n	8004906 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fb7b 	bl	8004fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004902:	605a      	str	r2, [r3, #4]
 8004904:	e008      	b.n	8004918 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40020407 	.word	0x40020407
 800493c:	bffdfff8 	.word	0xbffdfff8
 8004940:	cccccccd 	.word	0xcccccccd
 8004944:	40020000 	.word	0x40020000
 8004948:	bffdfbf8 	.word	0xbffdfbf8
 800494c:	40020400 	.word	0x40020400

08004950 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e07b      	b.n	8004a5a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0201 	bic.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	4b3a      	ldr	r3, [pc, #232]	@ (8004a64 <HAL_DMA_DeInit+0x114>)
 800497a:	429a      	cmp	r2, r3
 800497c:	d80f      	bhi.n	800499e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	4b38      	ldr	r3, [pc, #224]	@ (8004a68 <HAL_DMA_DeInit+0x118>)
 8004986:	4413      	add	r3, r2
 8004988:	4a38      	ldr	r2, [pc, #224]	@ (8004a6c <HAL_DMA_DeInit+0x11c>)
 800498a:	fba2 2303 	umull	r2, r3, r2, r3
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	009a      	lsls	r2, r3, #2
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a35      	ldr	r2, [pc, #212]	@ (8004a70 <HAL_DMA_DeInit+0x120>)
 800499a:	641a      	str	r2, [r3, #64]	@ 0x40
 800499c:	e00e      	b.n	80049bc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	4b33      	ldr	r3, [pc, #204]	@ (8004a74 <HAL_DMA_DeInit+0x124>)
 80049a6:	4413      	add	r3, r2
 80049a8:	4a30      	ldr	r2, [pc, #192]	@ (8004a6c <HAL_DMA_DeInit+0x11c>)
 80049aa:	fba2 2303 	umull	r2, r3, r2, r3
 80049ae:	091b      	lsrs	r3, r3, #4
 80049b0:	009a      	lsls	r2, r3, #2
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004a78 <HAL_DMA_DeInit+0x128>)
 80049ba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c8:	f003 021c 	and.w	r2, r3, #28
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d0:	2101      	movs	r1, #1
 80049d2:	fa01 f202 	lsl.w	r2, r1, r2
 80049d6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fabd 	bl	8004f58 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049ee:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00f      	beq.n	8004a18 <HAL_DMA_DeInit+0xc8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d80b      	bhi.n	8004a18 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 faf1 	bl	8004fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a16:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	40020407 	.word	0x40020407
 8004a68:	bffdfff8 	.word	0xbffdfff8
 8004a6c:	cccccccd 	.word	0xcccccccd
 8004a70:	40020000 	.word	0x40020000
 8004a74:	bffdfbf8 	.word	0xbffdfbf8
 8004a78:	40020400 	.word	0x40020400

08004a7c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_DMA_Start_IT+0x20>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e069      	b.n	8004b70 <HAL_DMA_Start_IT+0xf4>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d155      	bne.n	8004b5c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 fa02 	bl	8004ede <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d008      	beq.n	8004af4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 020e 	orr.w	r2, r2, #14
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e00f      	b.n	8004b14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0204 	bic.w	r2, r2, #4
 8004b02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 020a 	orr.w	r2, r2, #10
 8004b12:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b30:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b48:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0201 	orr.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e008      	b.n	8004b6e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2280      	movs	r2, #128	@ 0x80
 8004b60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e04f      	b.n	8004c2a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d008      	beq.n	8004ba8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2204      	movs	r2, #4
 8004b9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e040      	b.n	8004c2a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 020e 	bic.w	r2, r2, #14
 8004bb6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bc2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0201 	bic.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bdc:	f003 021c 	and.w	r2, r3, #28
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be4:	2101      	movs	r1, #1
 8004be6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004bf4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00c      	beq.n	8004c18 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c0c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c16:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr

08004c34 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d005      	beq.n	8004c58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2204      	movs	r2, #4
 8004c50:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
 8004c56:	e047      	b.n	8004ce8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 020e 	bic.w	r2, r2, #14
 8004c66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0201 	bic.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8c:	f003 021c 	and.w	r2, r3, #28
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c94:	2101      	movs	r1, #1
 8004c96:	fa01 f202 	lsl.w	r2, r1, r2
 8004c9a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ca4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00c      	beq.n	8004cc8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cbc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004cc6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4798      	blx	r3
    }
  }
  return status;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d10:	f003 031c 	and.w	r3, r3, #28
 8004d14:	2204      	movs	r2, #4
 8004d16:	409a      	lsls	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d027      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x7c>
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 0304 	and.w	r3, r3, #4
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d022      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d107      	bne.n	8004d48 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0204 	bic.w	r2, r2, #4
 8004d46:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4c:	f003 021c 	and.w	r2, r3, #28
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	2104      	movs	r1, #4
 8004d56:	fa01 f202 	lsl.w	r2, r1, r2
 8004d5a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8081 	beq.w	8004e68 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004d6e:	e07b      	b.n	8004e68 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d74:	f003 031c 	and.w	r3, r3, #28
 8004d78:	2202      	movs	r2, #2
 8004d7a:	409a      	lsls	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d03d      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x10c>
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d038      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10b      	bne.n	8004db4 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 020a 	bic.w	r2, r2, #10
 8004daa:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	4b2e      	ldr	r3, [pc, #184]	@ (8004e74 <HAL_DMA_IRQHandler+0x180>)
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d909      	bls.n	8004dd4 <HAL_DMA_IRQHandler+0xe0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc4:	f003 031c 	and.w	r3, r3, #28
 8004dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8004e78 <HAL_DMA_IRQHandler+0x184>)
 8004dca:	2102      	movs	r1, #2
 8004dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd0:	6053      	str	r3, [r2, #4]
 8004dd2:	e008      	b.n	8004de6 <HAL_DMA_IRQHandler+0xf2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd8:	f003 031c 	and.w	r3, r3, #28
 8004ddc:	4a27      	ldr	r2, [pc, #156]	@ (8004e7c <HAL_DMA_IRQHandler+0x188>)
 8004dde:	2102      	movs	r1, #2
 8004de0:	fa01 f303 	lsl.w	r3, r1, r3
 8004de4:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d038      	beq.n	8004e68 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004dfe:	e033      	b.n	8004e68 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e04:	f003 031c 	and.w	r3, r3, #28
 8004e08:	2208      	movs	r2, #8
 8004e0a:	409a      	lsls	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d02a      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x176>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d025      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 020e 	bic.w	r2, r2, #14
 8004e2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e32:	f003 021c 	and.w	r2, r3, #28
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e40:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d004      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004e68:	bf00      	nop
 8004e6a:	bf00      	nop
}
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40020080 	.word	0x40020080
 8004e78:	40020400 	.word	0x40020400
 8004e7c:	40020000 	.word	0x40020000

08004e80 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d103      	bne.n	8004e9c <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	72fb      	strb	r3, [r7, #11]
    return status;
 8004e98:	7afb      	ldrb	r3, [r7, #11]
 8004e9a:	e01b      	b.n	8004ed4 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	f003 0310 	and.w	r3, r3, #16
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00d      	beq.n	8004eca <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d004      	beq.n	8004ec2 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	e003      	b.n	8004eca <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004ec8:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	601a      	str	r2, [r3, #0]

  return status;
 8004ed2:	7afb      	ldrb	r3, [r7, #11]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr

08004ede <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ef4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d004      	beq.n	8004f08 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f06:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0c:	f003 021c 	and.w	r2, r3, #28
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f14:	2101      	movs	r1, #1
 8004f16:	fa01 f202 	lsl.w	r2, r1, r2
 8004f1a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	d108      	bne.n	8004f3e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f3c:	e007      	b.n	8004f4e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	60da      	str	r2, [r3, #12]
}
 8004f4e:	bf00      	nop
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr

08004f58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	461a      	mov	r2, r3
 8004f66:	4b1c      	ldr	r3, [pc, #112]	@ (8004fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d813      	bhi.n	8004f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f70:	089b      	lsrs	r3, r3, #2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f78:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	3b08      	subs	r3, #8
 8004f88:	4a14      	ldr	r2, [pc, #80]	@ (8004fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	091b      	lsrs	r3, r3, #4
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	e011      	b.n	8004fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f98:	089b      	lsrs	r3, r3, #2
 8004f9a:	009a      	lsls	r2, r3, #2
 8004f9c:	4b10      	ldr	r3, [pc, #64]	@ (8004fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004f9e:	4413      	add	r3, r2
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	3b08      	subs	r3, #8
 8004fac:	4a0b      	ldr	r2, [pc, #44]	@ (8004fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004fae:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb2:	091b      	lsrs	r3, r3, #4
 8004fb4:	3307      	adds	r3, #7
 8004fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a0a      	ldr	r2, [pc, #40]	@ (8004fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004fbc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f003 031f 	and.w	r3, r3, #31
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	409a      	lsls	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40020407 	.word	0x40020407
 8004fdc:	cccccccd 	.word	0xcccccccd
 8004fe0:	4002081c 	.word	0x4002081c
 8004fe4:	40020880 	.word	0x40020880

08004fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8005028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	461a      	mov	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a08      	ldr	r2, [pc, #32]	@ (800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800500c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3b01      	subs	r3, #1
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2201      	movs	r2, #1
 8005018:	409a      	lsls	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr
 8005028:	1000823f 	.word	0x1000823f
 800502c:	40020940 	.word	0x40020940

08005030 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800503e:	4b1c      	ldr	r3, [pc, #112]	@ (80050b0 <HAL_FLASH_Program+0x80>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_FLASH_Program+0x1a>
 8005046:	2302      	movs	r3, #2
 8005048:	e02d      	b.n	80050a6 <HAL_FLASH_Program+0x76>
 800504a:	4b19      	ldr	r3, [pc, #100]	@ (80050b0 <HAL_FLASH_Program+0x80>)
 800504c:	2201      	movs	r2, #1
 800504e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005050:	4b17      	ldr	r3, [pc, #92]	@ (80050b0 <HAL_FLASH_Program+0x80>)
 8005052:	2200      	movs	r2, #0
 8005054:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005056:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800505a:	f000 f869 	bl	8005130 <FLASH_WaitForLastOperation>
 800505e:	4603      	mov	r3, r0
 8005060:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005062:	7dfb      	ldrb	r3, [r7, #23]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d11a      	bne.n	800509e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d105      	bne.n	800507a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800506e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005072:	68b8      	ldr	r0, [r7, #8]
 8005074:	f000 f8be 	bl	80051f4 <FLASH_Program_DoubleWord>
 8005078:	e004      	b.n	8005084 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	4619      	mov	r1, r3
 800507e:	68b8      	ldr	r0, [r7, #8]
 8005080:	f000 f8de 	bl	8005240 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005084:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005088:	f000 f852 	bl	8005130 <FLASH_WaitForLastOperation>
 800508c:	4603      	mov	r3, r0
 800508e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005090:	4b08      	ldr	r3, [pc, #32]	@ (80050b4 <HAL_FLASH_Program+0x84>)
 8005092:	695a      	ldr	r2, [r3, #20]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	43db      	mvns	r3, r3
 8005098:	4906      	ldr	r1, [pc, #24]	@ (80050b4 <HAL_FLASH_Program+0x84>)
 800509a:	4013      	ands	r3, r2
 800509c:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800509e:	4b04      	ldr	r3, [pc, #16]	@ (80050b0 <HAL_FLASH_Program+0x80>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80050a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	200003d4 	.word	0x200003d4
 80050b4:	58004000 	.word	0x58004000

080050b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80050c2:	4b0b      	ldr	r3, [pc, #44]	@ (80050f0 <HAL_FLASH_Unlock+0x38>)
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	da0b      	bge.n	80050e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80050ca:	4b09      	ldr	r3, [pc, #36]	@ (80050f0 <HAL_FLASH_Unlock+0x38>)
 80050cc:	4a09      	ldr	r2, [pc, #36]	@ (80050f4 <HAL_FLASH_Unlock+0x3c>)
 80050ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80050d0:	4b07      	ldr	r3, [pc, #28]	@ (80050f0 <HAL_FLASH_Unlock+0x38>)
 80050d2:	4a09      	ldr	r2, [pc, #36]	@ (80050f8 <HAL_FLASH_Unlock+0x40>)
 80050d4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80050d6:	4b06      	ldr	r3, [pc, #24]	@ (80050f0 <HAL_FLASH_Unlock+0x38>)
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	da01      	bge.n	80050e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80050e2:	79fb      	ldrb	r3, [r7, #7]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	58004000 	.word	0x58004000
 80050f4:	45670123 	.word	0x45670123
 80050f8:	cdef89ab 	.word	0xcdef89ab

080050fc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005106:	4b09      	ldr	r3, [pc, #36]	@ (800512c <HAL_FLASH_Lock+0x30>)
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	4a08      	ldr	r2, [pc, #32]	@ (800512c <HAL_FLASH_Lock+0x30>)
 800510c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005110:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8005112:	4b06      	ldr	r3, [pc, #24]	@ (800512c <HAL_FLASH_Lock+0x30>)
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	2b00      	cmp	r3, #0
 8005118:	db01      	blt.n	800511e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800511e:	79fb      	ldrb	r3, [r7, #7]
}
 8005120:	4618      	mov	r0, r3
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	58004000 	.word	0x58004000

08005130 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005138:	f7fd fad6 	bl	80026e8 <HAL_GetTick>
 800513c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800513e:	e009      	b.n	8005154 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005140:	f7fd fad2 	bl	80026e8 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	429a      	cmp	r2, r3
 800514e:	d801      	bhi.n	8005154 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e046      	b.n	80051e2 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005154:	4b25      	ldr	r3, [pc, #148]	@ (80051ec <FLASH_WaitForLastOperation+0xbc>)
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800515c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005160:	d0ee      	beq.n	8005140 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005162:	4b22      	ldr	r3, [pc, #136]	@ (80051ec <FLASH_WaitForLastOperation+0xbc>)
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005172:	4b1e      	ldr	r3, [pc, #120]	@ (80051ec <FLASH_WaitForLastOperation+0xbc>)
 8005174:	2201      	movs	r2, #1
 8005176:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800517e:	4013      	ands	r3, r2
 8005180:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005188:	d307      	bcc.n	800519a <FLASH_WaitForLastOperation+0x6a>
 800518a:	4b18      	ldr	r3, [pc, #96]	@ (80051ec <FLASH_WaitForLastOperation+0xbc>)
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005194:	4915      	ldr	r1, [pc, #84]	@ (80051ec <FLASH_WaitForLastOperation+0xbc>)
 8005196:	4313      	orrs	r3, r2
 8005198:	618b      	str	r3, [r1, #24]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d004      	beq.n	80051ae <FLASH_WaitForLastOperation+0x7e>
 80051a4:	4a11      	ldr	r2, [pc, #68]	@ (80051ec <FLASH_WaitForLastOperation+0xbc>)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80051ac:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00e      	beq.n	80051d2 <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80051b4:	4a0e      	ldr	r2, [pc, #56]	@ (80051f0 <FLASH_WaitForLastOperation+0xc0>)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e011      	b.n	80051e2 <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80051be:	f7fd fa93 	bl	80026e8 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d801      	bhi.n	80051d2 <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e007      	b.n	80051e2 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80051d2:	4b06      	ldr	r3, [pc, #24]	@ (80051ec <FLASH_WaitForLastOperation+0xbc>)
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051de:	d0ee      	beq.n	80051be <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	58004000 	.word	0x58004000
 80051f0:	200003d4 	.word	0x200003d4

080051f4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005200:	4b0e      	ldr	r3, [pc, #56]	@ (800523c <FLASH_Program_DoubleWord+0x48>)
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	4a0d      	ldr	r2, [pc, #52]	@ (800523c <FLASH_Program_DoubleWord+0x48>)
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005212:	f3bf 8f6f 	isb	sy
}
 8005216:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	000a      	movs	r2, r1
 8005226:	2300      	movs	r3, #0
 8005228:	68f9      	ldr	r1, [r7, #12]
 800522a:	3104      	adds	r1, #4
 800522c:	4613      	mov	r3, r2
 800522e:	600b      	str	r3, [r1, #0]
}
 8005230:	bf00      	nop
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	bc80      	pop	{r7}
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	58004000 	.word	0x58004000

08005240 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005240:	b480      	push	{r7}
 8005242:	b089      	sub	sp, #36	@ 0x24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800524a:	2340      	movs	r3, #64	@ 0x40
 800524c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005256:	4b18      	ldr	r3, [pc, #96]	@ (80052b8 <FLASH_Program_Fast+0x78>)
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	4a17      	ldr	r2, [pc, #92]	@ (80052b8 <FLASH_Program_Fast+0x78>)
 800525c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005260:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005262:	f3ef 8310 	mrs	r3, PRIMASK
 8005266:	60fb      	str	r3, [r7, #12]
  return(result);
 8005268:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800526a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800526c:	b672      	cpsid	i
}
 800526e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	3304      	adds	r3, #4
 800527c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	3304      	adds	r3, #4
 8005282:	617b      	str	r3, [r7, #20]
    row_index--;
 8005284:	7ffb      	ldrb	r3, [r7, #31]
 8005286:	3b01      	subs	r3, #1
 8005288:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800528a:	7ffb      	ldrb	r3, [r7, #31]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1ef      	bne.n	8005270 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005290:	bf00      	nop
 8005292:	4b09      	ldr	r3, [pc, #36]	@ (80052b8 <FLASH_Program_Fast+0x78>)
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800529a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800529e:	d0f8      	beq.n	8005292 <FLASH_Program_Fast+0x52>
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f383 8810 	msr	PRIMASK, r3
}
 80052aa:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80052ac:	bf00      	nop
 80052ae:	3724      	adds	r7, #36	@ 0x24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc80      	pop	{r7}
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	58004000 	.word	0x58004000

080052bc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80052c6:	4b28      	ldr	r3, [pc, #160]	@ (8005368 <HAL_FLASHEx_Erase+0xac>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_FLASHEx_Erase+0x16>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e046      	b.n	8005360 <HAL_FLASHEx_Erase+0xa4>
 80052d2:	4b25      	ldr	r3, [pc, #148]	@ (8005368 <HAL_FLASHEx_Erase+0xac>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80052d8:	4b23      	ldr	r3, [pc, #140]	@ (8005368 <HAL_FLASHEx_Erase+0xac>)
 80052da:	2200      	movs	r2, #0
 80052dc:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80052de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052e2:	f7ff ff25 	bl	8005130 <FLASH_WaitForLastOperation>
 80052e6:	4603      	mov	r3, r0
 80052e8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d133      	bne.n	8005358 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d108      	bne.n	800530a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80052f8:	f000 f838 	bl	800536c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80052fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005300:	f7ff ff16 	bl	8005130 <FLASH_WaitForLastOperation>
 8005304:	4603      	mov	r3, r0
 8005306:	73fb      	strb	r3, [r7, #15]
 8005308:	e024      	b.n	8005354 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	f04f 32ff 	mov.w	r2, #4294967295
 8005310:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	60bb      	str	r3, [r7, #8]
 8005318:	e012      	b.n	8005340 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800531a:	68b8      	ldr	r0, [r7, #8]
 800531c:	f000 f836 	bl	800538c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005320:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005324:	f7ff ff04 	bl	8005130 <FLASH_WaitForLastOperation>
 8005328:	4603      	mov	r3, r0
 800532a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	601a      	str	r2, [r3, #0]
          break;
 8005338:	e00a      	b.n	8005350 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	3301      	adds	r3, #1
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	4413      	add	r3, r2
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	429a      	cmp	r2, r3
 800534e:	d3e4      	bcc.n	800531a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005350:	f000 f878 	bl	8005444 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005354:	f000 f832 	bl	80053bc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005358:	4b03      	ldr	r3, [pc, #12]	@ (8005368 <HAL_FLASHEx_Erase+0xac>)
 800535a:	2200      	movs	r2, #0
 800535c:	701a      	strb	r2, [r3, #0]

  return status;
 800535e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	200003d4 	.word	0x200003d4

0800536c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005370:	4b05      	ldr	r3, [pc, #20]	@ (8005388 <FLASH_MassErase+0x1c>)
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	4a04      	ldr	r2, [pc, #16]	@ (8005388 <FLASH_MassErase+0x1c>)
 8005376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800537a:	f043 0304 	orr.w	r3, r3, #4
 800537e:	6153      	str	r3, [r2, #20]
#endif
}
 8005380:	bf00      	nop
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr
 8005388:	58004000 	.word	0x58004000

0800538c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005394:	4b08      	ldr	r3, [pc, #32]	@ (80053b8 <FLASH_PageErase+0x2c>)
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	4313      	orrs	r3, r2
 80053a2:	4a05      	ldr	r2, [pc, #20]	@ (80053b8 <FLASH_PageErase+0x2c>)
 80053a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053a8:	f043 0302 	orr.w	r3, r3, #2
 80053ac:	6153      	str	r3, [r2, #20]
#endif
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr
 80053b8:	58004000 	.word	0x58004000

080053bc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80053c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005440 <FLASH_FlushCaches+0x84>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d117      	bne.n	80053fc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80053cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005440 <FLASH_FlushCaches+0x84>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005440 <FLASH_FlushCaches+0x84>)
 80053d2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053d6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80053d8:	4b19      	ldr	r3, [pc, #100]	@ (8005440 <FLASH_FlushCaches+0x84>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a18      	ldr	r2, [pc, #96]	@ (8005440 <FLASH_FlushCaches+0x84>)
 80053de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	4b16      	ldr	r3, [pc, #88]	@ (8005440 <FLASH_FlushCaches+0x84>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a15      	ldr	r2, [pc, #84]	@ (8005440 <FLASH_FlushCaches+0x84>)
 80053ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053ee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053f0:	4b13      	ldr	r3, [pc, #76]	@ (8005440 <FLASH_FlushCaches+0x84>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a12      	ldr	r2, [pc, #72]	@ (8005440 <FLASH_FlushCaches+0x84>)
 80053f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053fa:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80053fc:	4b10      	ldr	r3, [pc, #64]	@ (8005440 <FLASH_FlushCaches+0x84>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005404:	2b01      	cmp	r3, #1
 8005406:	d117      	bne.n	8005438 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005408:	4b0d      	ldr	r3, [pc, #52]	@ (8005440 <FLASH_FlushCaches+0x84>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a0c      	ldr	r2, [pc, #48]	@ (8005440 <FLASH_FlushCaches+0x84>)
 800540e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005412:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005414:	4b0a      	ldr	r3, [pc, #40]	@ (8005440 <FLASH_FlushCaches+0x84>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a09      	ldr	r2, [pc, #36]	@ (8005440 <FLASH_FlushCaches+0x84>)
 800541a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	4b07      	ldr	r3, [pc, #28]	@ (8005440 <FLASH_FlushCaches+0x84>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a06      	ldr	r2, [pc, #24]	@ (8005440 <FLASH_FlushCaches+0x84>)
 8005426:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800542a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800542c:	4b04      	ldr	r3, [pc, #16]	@ (8005440 <FLASH_FlushCaches+0x84>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a03      	ldr	r2, [pc, #12]	@ (8005440 <FLASH_FlushCaches+0x84>)
 8005432:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005436:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005438:	bf00      	nop
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr
 8005440:	58004000 	.word	0x58004000

08005444 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005448:	4b05      	ldr	r3, [pc, #20]	@ (8005460 <FLASH_AcknowledgePageErase+0x1c>)
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	4a04      	ldr	r2, [pc, #16]	@ (8005460 <FLASH_AcknowledgePageErase+0x1c>)
 800544e:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8005452:	f023 0302 	bic.w	r3, r3, #2
 8005456:	6153      	str	r3, [r2, #20]
#endif
}
 8005458:	bf00      	nop
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr
 8005460:	58004000 	.word	0x58004000

08005464 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005472:	e140      	b.n	80056f6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	2101      	movs	r1, #1
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	fa01 f303 	lsl.w	r3, r1, r3
 8005480:	4013      	ands	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 8132 	beq.w	80056f0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	2b01      	cmp	r3, #1
 8005496:	d005      	beq.n	80054a4 <HAL_GPIO_Init+0x40>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d130      	bne.n	8005506 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	2203      	movs	r2, #3
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	43db      	mvns	r3, r3
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4013      	ands	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	fa02 f303 	lsl.w	r3, r2, r3
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054da:	2201      	movs	r2, #1
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	43db      	mvns	r3, r3
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4013      	ands	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	091b      	lsrs	r3, r3, #4
 80054f0:	f003 0201 	and.w	r2, r3, #1
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	2b03      	cmp	r3, #3
 8005510:	d017      	beq.n	8005542 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	2203      	movs	r2, #3
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	43db      	mvns	r3, r3
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4013      	ands	r3, r2
 8005528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d123      	bne.n	8005596 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	08da      	lsrs	r2, r3, #3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3208      	adds	r2, #8
 8005556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	220f      	movs	r2, #15
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	43db      	mvns	r3, r3
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4013      	ands	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	08da      	lsrs	r2, r3, #3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3208      	adds	r2, #8
 8005590:	6939      	ldr	r1, [r7, #16]
 8005592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	2203      	movs	r2, #3
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43db      	mvns	r3, r3
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4013      	ands	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f003 0203 	and.w	r2, r3, #3
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 808c 	beq.w	80056f0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80055d8:	4a4e      	ldr	r2, [pc, #312]	@ (8005714 <HAL_GPIO_Init+0x2b0>)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	089b      	lsrs	r3, r3, #2
 80055de:	3302      	adds	r3, #2
 80055e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f003 0303 	and.w	r3, r3, #3
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	2207      	movs	r2, #7
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	43db      	mvns	r3, r3
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4013      	ands	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005602:	d00d      	beq.n	8005620 <HAL_GPIO_Init+0x1bc>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a44      	ldr	r2, [pc, #272]	@ (8005718 <HAL_GPIO_Init+0x2b4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d007      	beq.n	800561c <HAL_GPIO_Init+0x1b8>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a43      	ldr	r2, [pc, #268]	@ (800571c <HAL_GPIO_Init+0x2b8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d101      	bne.n	8005618 <HAL_GPIO_Init+0x1b4>
 8005614:	2302      	movs	r3, #2
 8005616:	e004      	b.n	8005622 <HAL_GPIO_Init+0x1be>
 8005618:	2307      	movs	r3, #7
 800561a:	e002      	b.n	8005622 <HAL_GPIO_Init+0x1be>
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <HAL_GPIO_Init+0x1be>
 8005620:	2300      	movs	r3, #0
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	f002 0203 	and.w	r2, r2, #3
 8005628:	0092      	lsls	r2, r2, #2
 800562a:	4093      	lsls	r3, r2
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005632:	4938      	ldr	r1, [pc, #224]	@ (8005714 <HAL_GPIO_Init+0x2b0>)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	089b      	lsrs	r3, r3, #2
 8005638:	3302      	adds	r3, #2
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005640:	4b37      	ldr	r3, [pc, #220]	@ (8005720 <HAL_GPIO_Init+0x2bc>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	43db      	mvns	r3, r3
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4013      	ands	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005664:	4a2e      	ldr	r2, [pc, #184]	@ (8005720 <HAL_GPIO_Init+0x2bc>)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800566a:	4b2d      	ldr	r3, [pc, #180]	@ (8005720 <HAL_GPIO_Init+0x2bc>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	43db      	mvns	r3, r3
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4013      	ands	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800568e:	4a24      	ldr	r2, [pc, #144]	@ (8005720 <HAL_GPIO_Init+0x2bc>)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005694:	4b22      	ldr	r3, [pc, #136]	@ (8005720 <HAL_GPIO_Init+0x2bc>)
 8005696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800569a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	43db      	mvns	r3, r3
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4013      	ands	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80056ba:	4a19      	ldr	r2, [pc, #100]	@ (8005720 <HAL_GPIO_Init+0x2bc>)
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80056c2:	4b17      	ldr	r3, [pc, #92]	@ (8005720 <HAL_GPIO_Init+0x2bc>)
 80056c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056c8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	43db      	mvns	r3, r3
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4013      	ands	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80056e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005720 <HAL_GPIO_Init+0x2bc>)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	3301      	adds	r3, #1
 80056f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	f47f aeb7 	bne.w	8005474 <HAL_GPIO_Init+0x10>
  }
}
 8005706:	bf00      	nop
 8005708:	bf00      	nop
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	bc80      	pop	{r7}
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40010000 	.word	0x40010000
 8005718:	48000400 	.word	0x48000400
 800571c:	48000800 	.word	0x48000800
 8005720:	58000800 	.word	0x58000800

08005724 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005732:	e0af      	b.n	8005894 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005734:	2201      	movs	r2, #1
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	fa02 f303 	lsl.w	r3, r2, r3
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	4013      	ands	r3, r2
 8005740:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 80a2 	beq.w	800588e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800574a:	4a59      	ldr	r2, [pc, #356]	@ (80058b0 <HAL_GPIO_DeInit+0x18c>)
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	089b      	lsrs	r3, r3, #2
 8005750:	3302      	adds	r3, #2
 8005752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005756:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	2207      	movs	r2, #7
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4013      	ands	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005772:	d00d      	beq.n	8005790 <HAL_GPIO_DeInit+0x6c>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a4f      	ldr	r2, [pc, #316]	@ (80058b4 <HAL_GPIO_DeInit+0x190>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d007      	beq.n	800578c <HAL_GPIO_DeInit+0x68>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a4e      	ldr	r2, [pc, #312]	@ (80058b8 <HAL_GPIO_DeInit+0x194>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d101      	bne.n	8005788 <HAL_GPIO_DeInit+0x64>
 8005784:	2302      	movs	r3, #2
 8005786:	e004      	b.n	8005792 <HAL_GPIO_DeInit+0x6e>
 8005788:	2307      	movs	r3, #7
 800578a:	e002      	b.n	8005792 <HAL_GPIO_DeInit+0x6e>
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <HAL_GPIO_DeInit+0x6e>
 8005790:	2300      	movs	r3, #0
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	f002 0203 	and.w	r2, r2, #3
 8005798:	0092      	lsls	r2, r2, #2
 800579a:	4093      	lsls	r3, r2
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d136      	bne.n	8005810 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80057a2:	4b46      	ldr	r3, [pc, #280]	@ (80058bc <HAL_GPIO_DeInit+0x198>)
 80057a4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	43db      	mvns	r3, r3
 80057ac:	4943      	ldr	r1, [pc, #268]	@ (80058bc <HAL_GPIO_DeInit+0x198>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80057b4:	4b41      	ldr	r3, [pc, #260]	@ (80058bc <HAL_GPIO_DeInit+0x198>)
 80057b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	43db      	mvns	r3, r3
 80057be:	493f      	ldr	r1, [pc, #252]	@ (80058bc <HAL_GPIO_DeInit+0x198>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80057c6:	4b3d      	ldr	r3, [pc, #244]	@ (80058bc <HAL_GPIO_DeInit+0x198>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	43db      	mvns	r3, r3
 80057ce:	493b      	ldr	r1, [pc, #236]	@ (80058bc <HAL_GPIO_DeInit+0x198>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80057d4:	4b39      	ldr	r3, [pc, #228]	@ (80058bc <HAL_GPIO_DeInit+0x198>)
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	43db      	mvns	r3, r3
 80057dc:	4937      	ldr	r1, [pc, #220]	@ (80058bc <HAL_GPIO_DeInit+0x198>)
 80057de:	4013      	ands	r3, r2
 80057e0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f003 0303 	and.w	r3, r3, #3
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	2207      	movs	r2, #7
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80057f2:	4a2f      	ldr	r2, [pc, #188]	@ (80058b0 <HAL_GPIO_DeInit+0x18c>)
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	089b      	lsrs	r3, r3, #2
 80057f8:	3302      	adds	r3, #2
 80057fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	43da      	mvns	r2, r3
 8005802:	482b      	ldr	r0, [pc, #172]	@ (80058b0 <HAL_GPIO_DeInit+0x18c>)
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	089b      	lsrs	r3, r3, #2
 8005808:	400a      	ands	r2, r1
 800580a:	3302      	adds	r3, #2
 800580c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	2103      	movs	r1, #3
 800581a:	fa01 f303 	lsl.w	r3, r1, r3
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	08da      	lsrs	r2, r3, #3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3208      	adds	r2, #8
 800582c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	220f      	movs	r2, #15
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	43db      	mvns	r3, r3
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	08d2      	lsrs	r2, r2, #3
 8005844:	4019      	ands	r1, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3208      	adds	r2, #8
 800584a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	2103      	movs	r1, #3
 8005858:	fa01 f303 	lsl.w	r3, r1, r3
 800585c:	43db      	mvns	r3, r3
 800585e:	401a      	ands	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	2101      	movs	r1, #1
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	fa01 f303 	lsl.w	r3, r1, r3
 8005870:	43db      	mvns	r3, r3
 8005872:	401a      	ands	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	2103      	movs	r1, #3
 8005882:	fa01 f303 	lsl.w	r3, r1, r3
 8005886:	43db      	mvns	r3, r3
 8005888:	401a      	ands	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	3301      	adds	r3, #1
 8005892:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	f47f af49 	bne.w	8005734 <HAL_GPIO_DeInit+0x10>
  }
}
 80058a2:	bf00      	nop
 80058a4:	bf00      	nop
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bc80      	pop	{r7}
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40010000 	.word	0x40010000
 80058b4:	48000400 	.word	0x48000400
 80058b8:	48000800 	.word	0x48000800
 80058bc:	58000800 	.word	0x58000800

080058c0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	887b      	ldrh	r3, [r7, #2]
 80058d2:	4013      	ands	r3, r2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058d8:	2301      	movs	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
 80058dc:	e001      	b.n	80058e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058de:	2300      	movs	r3, #0
 80058e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr

080058ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	460b      	mov	r3, r1
 80058f8:	807b      	strh	r3, [r7, #2]
 80058fa:	4613      	mov	r3, r2
 80058fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058fe:	787b      	ldrb	r3, [r7, #1]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005904:	887a      	ldrh	r2, [r7, #2]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800590a:	e002      	b.n	8005912 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800590c:	887a      	ldrh	r2, [r7, #2]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	bc80      	pop	{r7}
 800591a:	4770      	bx	lr

0800591c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005926:	4b08      	ldr	r3, [pc, #32]	@ (8005948 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	88fb      	ldrh	r3, [r7, #6]
 800592c:	4013      	ands	r3, r2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d006      	beq.n	8005940 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005932:	4a05      	ldr	r2, [pc, #20]	@ (8005948 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005934:	88fb      	ldrh	r3, [r7, #6]
 8005936:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005938:	88fb      	ldrh	r3, [r7, #6]
 800593a:	4618      	mov	r0, r3
 800593c:	f000 f806 	bl	800594c <HAL_GPIO_EXTI_Callback>
  }
}
 8005940:	bf00      	nop
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	58000800 	.word	0x58000800

0800594c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr

08005960 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005964:	4b04      	ldr	r3, [pc, #16]	@ (8005978 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a03      	ldr	r2, [pc, #12]	@ (8005978 <HAL_PWR_EnableBkUpAccess+0x18>)
 800596a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800596e:	6013      	str	r3, [r2, #0]
}
 8005970:	bf00      	nop
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr
 8005978:	58000400 	.word	0x58000400

0800597c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800598a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800598e:	d101      	bne.n	8005994 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005990:	2301      	movs	r3, #1
 8005992:	e000      	b.n	8005996 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	46bd      	mov	sp, r7
 800599a:	bc80      	pop	{r7}
 800599c:	4770      	bx	lr

0800599e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800599e:	b480      	push	{r7}
 80059a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80059a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d101      	bne.n	80059b4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bc80      	pop	{r7}
 80059bc:	4770      	bx	lr

080059be <LL_RCC_MSI_GetRange>:
{
 80059be:	b480      	push	{r7}
 80059c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80059c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80059d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr

080059ec <LL_RCC_GetSysClkSource>:
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80059f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 030c 	and.w	r3, r3, #12
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr

08005a02 <LL_RCC_GetAHBPrescaler>:
{
 8005a02:	b480      	push	{r7}
 8005a04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bc80      	pop	{r7}
 8005a16:	4770      	bx	lr

08005a18 <LL_RCC_GetAPB1Prescaler>:
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	4770      	bx	lr

08005a2e <LL_RCC_GetAPB2Prescaler>:
{
 8005a2e:	b480      	push	{r7}
 8005a30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bc80      	pop	{r7}
 8005a42:	4770      	bx	lr

08005a44 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	0a1b      	lsrs	r3, r3, #8
 8005a50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bc80      	pop	{r7}
 8005a5a:	4770      	bx	lr

08005a5c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bc80      	pop	{r7}
 8005a70:	4770      	bx	lr

08005a72 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005a72:	b480      	push	{r7}
 8005a74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bc80      	pop	{r7}
 8005a86:	4770      	bx	lr

08005a88 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f003 0303 	and.w	r3, r3, #3
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bc80      	pop	{r7}
 8005a9c:	4770      	bx	lr
	...

08005aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa0:	b590      	push	{r4, r7, lr}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aae:	f7ff ff9d 	bl	80059ec <LL_RCC_GetSysClkSource>
 8005ab2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ab4:	f7ff ffe8 	bl	8005a88 <LL_RCC_PLL_GetMainSource>
 8005ab8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d005      	beq.n	8005acc <HAL_RCC_GetSysClockFreq+0x2c>
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2b0c      	cmp	r3, #12
 8005ac4:	d139      	bne.n	8005b3a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d136      	bne.n	8005b3a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005acc:	f7ff ff67 	bl	800599e <LL_RCC_MSI_IsEnabledRangeSelect>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d115      	bne.n	8005b02 <HAL_RCC_GetSysClockFreq+0x62>
 8005ad6:	f7ff ff62 	bl	800599e <LL_RCC_MSI_IsEnabledRangeSelect>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d106      	bne.n	8005aee <HAL_RCC_GetSysClockFreq+0x4e>
 8005ae0:	f7ff ff6d 	bl	80059be <LL_RCC_MSI_GetRange>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	0a1b      	lsrs	r3, r3, #8
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	e005      	b.n	8005afa <HAL_RCC_GetSysClockFreq+0x5a>
 8005aee:	f7ff ff71 	bl	80059d4 <LL_RCC_MSI_GetRangeAfterStandby>
 8005af2:	4603      	mov	r3, r0
 8005af4:	0a1b      	lsrs	r3, r3, #8
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	4a36      	ldr	r2, [pc, #216]	@ (8005bd4 <HAL_RCC_GetSysClockFreq+0x134>)
 8005afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b00:	e014      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0x8c>
 8005b02:	f7ff ff4c 	bl	800599e <LL_RCC_MSI_IsEnabledRangeSelect>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d106      	bne.n	8005b1a <HAL_RCC_GetSysClockFreq+0x7a>
 8005b0c:	f7ff ff57 	bl	80059be <LL_RCC_MSI_GetRange>
 8005b10:	4603      	mov	r3, r0
 8005b12:	091b      	lsrs	r3, r3, #4
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	e005      	b.n	8005b26 <HAL_RCC_GetSysClockFreq+0x86>
 8005b1a:	f7ff ff5b 	bl	80059d4 <LL_RCC_MSI_GetRangeAfterStandby>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	091b      	lsrs	r3, r3, #4
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	4a2b      	ldr	r2, [pc, #172]	@ (8005bd4 <HAL_RCC_GetSysClockFreq+0x134>)
 8005b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b2c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d115      	bne.n	8005b60 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b38:	e012      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d102      	bne.n	8005b46 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b40:	4b25      	ldr	r3, [pc, #148]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e00c      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d109      	bne.n	8005b60 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005b4c:	f7ff ff16 	bl	800597c <LL_RCC_HSE_IsEnabledDiv2>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d102      	bne.n	8005b5c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005b56:	4b20      	ldr	r3, [pc, #128]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	e001      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8005bdc <HAL_RCC_GetSysClockFreq+0x13c>)
 8005b5e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b60:	f7ff ff44 	bl	80059ec <LL_RCC_GetSysClkSource>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b0c      	cmp	r3, #12
 8005b68:	d12f      	bne.n	8005bca <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005b6a:	f7ff ff8d 	bl	8005a88 <LL_RCC_PLL_GetMainSource>
 8005b6e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d003      	beq.n	8005b7e <HAL_RCC_GetSysClockFreq+0xde>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d003      	beq.n	8005b84 <HAL_RCC_GetSysClockFreq+0xe4>
 8005b7c:	e00d      	b.n	8005b9a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005b7e:	4b16      	ldr	r3, [pc, #88]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005b80:	60fb      	str	r3, [r7, #12]
        break;
 8005b82:	e00d      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005b84:	f7ff fefa 	bl	800597c <LL_RCC_HSE_IsEnabledDiv2>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d102      	bne.n	8005b94 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005b8e:	4b12      	ldr	r3, [pc, #72]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005b90:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005b92:	e005      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005b94:	4b11      	ldr	r3, [pc, #68]	@ (8005bdc <HAL_RCC_GetSysClockFreq+0x13c>)
 8005b96:	60fb      	str	r3, [r7, #12]
        break;
 8005b98:	e002      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	60fb      	str	r3, [r7, #12]
        break;
 8005b9e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005ba0:	f7ff ff50 	bl	8005a44 <LL_RCC_PLL_GetN>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	fb03 f402 	mul.w	r4, r3, r2
 8005bac:	f7ff ff61 	bl	8005a72 <LL_RCC_PLL_GetDivider>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	fbb4 f4f3 	udiv	r4, r4, r3
 8005bba:	f7ff ff4f 	bl	8005a5c <LL_RCC_PLL_GetR>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	0f5b      	lsrs	r3, r3, #29
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	fbb4 f3f3 	udiv	r3, r4, r3
 8005bc8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005bca:	697b      	ldr	r3, [r7, #20]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd90      	pop	{r4, r7, pc}
 8005bd4:	0801d794 	.word	0x0801d794
 8005bd8:	00f42400 	.word	0x00f42400
 8005bdc:	01e84800 	.word	0x01e84800

08005be0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005be0:	b598      	push	{r3, r4, r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005be4:	f7ff ff5c 	bl	8005aa0 <HAL_RCC_GetSysClockFreq>
 8005be8:	4604      	mov	r4, r0
 8005bea:	f7ff ff0a 	bl	8005a02 <LL_RCC_GetAHBPrescaler>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	091b      	lsrs	r3, r3, #4
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	4a03      	ldr	r2, [pc, #12]	@ (8005c04 <HAL_RCC_GetHCLKFreq+0x24>)
 8005bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bfc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	bd98      	pop	{r3, r4, r7, pc}
 8005c04:	0801d734 	.word	0x0801d734

08005c08 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c08:	b598      	push	{r3, r4, r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005c0c:	f7ff ffe8 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 8005c10:	4604      	mov	r4, r0
 8005c12:	f7ff ff01 	bl	8005a18 <LL_RCC_GetAPB1Prescaler>
 8005c16:	4603      	mov	r3, r0
 8005c18:	0a1b      	lsrs	r3, r3, #8
 8005c1a:	4a03      	ldr	r2, [pc, #12]	@ (8005c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c20:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	bd98      	pop	{r3, r4, r7, pc}
 8005c28:	0801d774 	.word	0x0801d774

08005c2c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c2c:	b598      	push	{r3, r4, r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005c30:	f7ff ffd6 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 8005c34:	4604      	mov	r4, r0
 8005c36:	f7ff fefa 	bl	8005a2e <LL_RCC_GetAPB2Prescaler>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	0adb      	lsrs	r3, r3, #11
 8005c3e:	4a03      	ldr	r2, [pc, #12]	@ (8005c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c44:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	bd98      	pop	{r3, r4, r7, pc}
 8005c4c:	0801d774 	.word	0x0801d774

08005c50 <LL_RCC_LSE_IsReady>:
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d101      	bne.n	8005c68 <LL_RCC_LSE_IsReady+0x18>
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <LL_RCC_LSE_IsReady+0x1a>
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr

08005c72 <LL_RCC_SetUSARTClockSource>:
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	0c1b      	lsrs	r3, r3, #16
 8005c86:	43db      	mvns	r3, r3
 8005c88:	401a      	ands	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bc80      	pop	{r7}
 8005ca0:	4770      	bx	lr

08005ca2 <LL_RCC_SetI2SClockSource>:
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005caa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr

08005ccc <LL_RCC_SetLPUARTClockSource>:
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cdc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ce0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bc80      	pop	{r7}
 8005cf4:	4770      	bx	lr

08005cf6 <LL_RCC_SetI2CClockSource>:
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d02:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	091b      	lsrs	r3, r3, #4
 8005d0a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	401a      	ands	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005d1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr

08005d2e <LL_RCC_SetLPTIMClockSource>:
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	0c1b      	lsrs	r3, r3, #16
 8005d42:	041b      	lsls	r3, r3, #16
 8005d44:	43db      	mvns	r3, r3
 8005d46:	401a      	ands	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	041b      	lsls	r3, r3, #16
 8005d4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d50:	4313      	orrs	r3, r2
 8005d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr

08005d60 <LL_RCC_SetRNGClockSource>:
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d70:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005d74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr

08005d8a <LL_RCC_SetADCClockSource>:
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d9a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr

08005db4 <LL_RCC_SetRTCClockSource>:
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005dc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr

08005dde <LL_RCC_GetRTCClockSource>:
{
 8005dde:	b480      	push	{r7}
 8005de0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bc80      	pop	{r7}
 8005df4:	4770      	bx	lr

08005df6 <LL_RCC_ForceBackupDomainReset>:
{
 8005df6:	b480      	push	{r7}
 8005df8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005e0e:	bf00      	nop
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bc80      	pop	{r7}
 8005e14:	4770      	bx	lr

08005e16 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005e16:	b480      	push	{r7}
 8005e18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005e2e:	bf00      	nop
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bc80      	pop	{r7}
 8005e34:	4770      	bx	lr
	...

08005e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005e44:	2300      	movs	r3, #0
 8005e46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005e48:	2300      	movs	r3, #0
 8005e4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d058      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005e58:	f7ff fd82 	bl	8005960 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e5c:	f7fc fc44 	bl	80026e8 <HAL_GetTick>
 8005e60:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005e62:	e009      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e64:	f7fc fc40 	bl	80026e8 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d902      	bls.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	74fb      	strb	r3, [r7, #19]
        break;
 8005e76:	e006      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005e78:	4b7b      	ldr	r3, [pc, #492]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e84:	d1ee      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8005e86:	7cfb      	ldrb	r3, [r7, #19]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d13c      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8005e8c:	f7ff ffa7 	bl	8005dde <LL_RCC_GetRTCClockSource>
 8005e90:	4602      	mov	r2, r0
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d00f      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ea6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ea8:	f7ff ffa5 	bl	8005df6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005eac:	f7ff ffb3 	bl	8005e16 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005eb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d014      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec4:	f7fc fc10 	bl	80026e8 <HAL_GetTick>
 8005ec8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8005eca:	e00b      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ecc:	f7fc fc0c 	bl	80026e8 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d902      	bls.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	74fb      	strb	r3, [r7, #19]
            break;
 8005ee2:	e004      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005ee4:	f7ff feb4 	bl	8005c50 <LL_RCC_LSE_IsReady>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d1ee      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005eee:	7cfb      	ldrb	r3, [r7, #19]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d105      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7ff ff5b 	bl	8005db4 <LL_RCC_SetRTCClockSource>
 8005efe:	e004      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f00:	7cfb      	ldrb	r3, [r7, #19]
 8005f02:	74bb      	strb	r3, [r7, #18]
 8005f04:	e001      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f06:	7cfb      	ldrb	r3, [r7, #19]
 8005f08:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d004      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff fea9 	bl	8005c72 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d004      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fe9e 	bl	8005c72 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d004      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff fec0 	bl	8005ccc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d004      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff fee6 	bl	8005d2e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d004      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff fedb 	bl	8005d2e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d004      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7ff fed0 	bl	8005d2e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d004      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fea9 	bl	8005cf6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d004      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff fe9e 	bl	8005cf6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d004      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff fe93 	bl	8005cf6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d011      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff fe5e 	bl	8005ca2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fee:	d107      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ffe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d010      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff fea5 	bl	8005d60 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601a:	2b00      	cmp	r3, #0
 800601c:	d107      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800601e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006028:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800602c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d011      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff fea3 	bl	8005d8a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800604c:	d107      	bne.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800604e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800605c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800605e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	58000400 	.word	0x58000400

0800606c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d071      	beq.n	8006162 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fc f8b8 	bl	8002208 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80060a0:	4b32      	ldr	r3, [pc, #200]	@ (800616c <HAL_RTC_Init+0x100>)
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d051      	beq.n	8006150 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060ac:	4b2f      	ldr	r3, [pc, #188]	@ (800616c <HAL_RTC_Init+0x100>)
 80060ae:	22ca      	movs	r2, #202	@ 0xca
 80060b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80060b2:	4b2e      	ldr	r3, [pc, #184]	@ (800616c <HAL_RTC_Init+0x100>)
 80060b4:	2253      	movs	r2, #83	@ 0x53
 80060b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fa11 	bl	80064e0 <RTC_EnterInitMode>
 80060be:	4603      	mov	r3, r0
 80060c0:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d13f      	bne.n	8006148 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80060c8:	4b28      	ldr	r3, [pc, #160]	@ (800616c <HAL_RTC_Init+0x100>)
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	4a27      	ldr	r2, [pc, #156]	@ (800616c <HAL_RTC_Init+0x100>)
 80060ce:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80060d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060d6:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80060d8:	4b24      	ldr	r3, [pc, #144]	@ (800616c <HAL_RTC_Init+0x100>)
 80060da:	699a      	ldr	r2, [r3, #24]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6859      	ldr	r1, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	4319      	orrs	r1, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	430b      	orrs	r3, r1
 80060ec:	491f      	ldr	r1, [pc, #124]	@ (800616c <HAL_RTC_Init+0x100>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	041b      	lsls	r3, r3, #16
 80060fc:	491b      	ldr	r1, [pc, #108]	@ (800616c <HAL_RTC_Init+0x100>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006102:	4b1a      	ldr	r3, [pc, #104]	@ (800616c <HAL_RTC_Init+0x100>)
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006112:	430b      	orrs	r3, r1
 8006114:	4915      	ldr	r1, [pc, #84]	@ (800616c <HAL_RTC_Init+0x100>)
 8006116:	4313      	orrs	r3, r2
 8006118:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fa14 	bl	8006548 <RTC_ExitInitMode>
 8006120:	4603      	mov	r3, r0
 8006122:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10e      	bne.n	8006148 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800612a:	4b10      	ldr	r3, [pc, #64]	@ (800616c <HAL_RTC_Init+0x100>)
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a19      	ldr	r1, [r3, #32]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	4319      	orrs	r1, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	430b      	orrs	r3, r1
 8006142:	490a      	ldr	r1, [pc, #40]	@ (800616c <HAL_RTC_Init+0x100>)
 8006144:	4313      	orrs	r3, r2
 8006146:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006148:	4b08      	ldr	r3, [pc, #32]	@ (800616c <HAL_RTC_Init+0x100>)
 800614a:	22ff      	movs	r2, #255	@ 0xff
 800614c:	625a      	str	r2, [r3, #36]	@ 0x24
 800614e:	e001      	b.n	8006154 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d103      	bne.n	8006162 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	40002800 	.word	0x40002800

08006170 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006186:	2b01      	cmp	r3, #1
 8006188:	d101      	bne.n	800618e <HAL_RTC_SetAlarm_IT+0x1e>
 800618a:	2302      	movs	r3, #2
 800618c:	e0f3      	b.n	8006376 <HAL_RTC_SetAlarm_IT+0x206>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2202      	movs	r2, #2
 800619a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800619e:	4b78      	ldr	r3, [pc, #480]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061a6:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061ae:	d06a      	beq.n	8006286 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d13a      	bne.n	800622c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80061b6:	4b72      	ldr	r3, [pc, #456]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d102      	bne.n	80061c8 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2200      	movs	r2, #0
 80061c6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 f9f5 	bl	80065c4 <RTC_ByteToBcd2>
 80061da:	4603      	mov	r3, r0
 80061dc:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	785b      	ldrb	r3, [r3, #1]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 f9ee 	bl	80065c4 <RTC_ByteToBcd2>
 80061e8:	4603      	mov	r3, r0
 80061ea:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80061ec:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	789b      	ldrb	r3, [r3, #2]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 f9e6 	bl	80065c4 <RTC_ByteToBcd2>
 80061f8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80061fa:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	78db      	ldrb	r3, [r3, #3]
 8006202:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006204:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800620e:	4618      	mov	r0, r3
 8006210:	f000 f9d8 	bl	80065c4 <RTC_ByteToBcd2>
 8006214:	4603      	mov	r3, r0
 8006216:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006218:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006220:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	e02c      	b.n	8006286 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8006234:	d00d      	beq.n	8006252 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800623e:	d008      	beq.n	8006252 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006240:	4b4f      	ldr	r3, [pc, #316]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006248:	2b00      	cmp	r3, #0
 800624a:	d102      	bne.n	8006252 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2200      	movs	r2, #0
 8006250:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	785b      	ldrb	r3, [r3, #1]
 800625c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800625e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006264:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	78db      	ldrb	r3, [r3, #3]
 800626a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800626c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006274:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006276:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800627c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006286:	4b3e      	ldr	r3, [pc, #248]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 8006288:	22ca      	movs	r2, #202	@ 0xca
 800628a:	625a      	str	r2, [r3, #36]	@ 0x24
 800628c:	4b3c      	ldr	r3, [pc, #240]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 800628e:	2253      	movs	r2, #83	@ 0x53
 8006290:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800629a:	d12c      	bne.n	80062f6 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800629c:	4b38      	ldr	r3, [pc, #224]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	4a37      	ldr	r2, [pc, #220]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 80062a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80062a6:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80062a8:	4b35      	ldr	r3, [pc, #212]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 80062aa:	2201      	movs	r2, #1
 80062ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062b4:	d107      	bne.n	80062c6 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	4930      	ldr	r1, [pc, #192]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	644b      	str	r3, [r1, #68]	@ 0x44
 80062c4:	e006      	b.n	80062d4 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80062c6:	4a2e      	ldr	r2, [pc, #184]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80062cc:	4a2c      	ldr	r2, [pc, #176]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80062d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e0:	f043 0201 	orr.w	r2, r3, #1
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80062e8:	4b25      	ldr	r3, [pc, #148]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	4a24      	ldr	r2, [pc, #144]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 80062ee:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80062f2:	6193      	str	r3, [r2, #24]
 80062f4:	e02b      	b.n	800634e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80062f6:	4b22      	ldr	r3, [pc, #136]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	4a21      	ldr	r2, [pc, #132]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 80062fc:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006300:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006302:	4b1f      	ldr	r3, [pc, #124]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 8006304:	2202      	movs	r2, #2
 8006306:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800630e:	d107      	bne.n	8006320 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	699a      	ldr	r2, [r3, #24]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	4919      	ldr	r1, [pc, #100]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 800631a:	4313      	orrs	r3, r2
 800631c:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800631e:	e006      	b.n	800632e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006320:	4a17      	ldr	r2, [pc, #92]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006326:	4a16      	ldr	r2, [pc, #88]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800632e:	4a14      	ldr	r2, [pc, #80]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800633a:	f043 0202 	orr.w	r2, r3, #2
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006342:	4b0f      	ldr	r3, [pc, #60]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	4a0e      	ldr	r2, [pc, #56]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 8006348:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 800634c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800634e:	4b0d      	ldr	r3, [pc, #52]	@ (8006384 <HAL_RTC_SetAlarm_IT+0x214>)
 8006350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006354:	4a0b      	ldr	r2, [pc, #44]	@ (8006384 <HAL_RTC_SetAlarm_IT+0x214>)
 8006356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800635a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800635e:	4b08      	ldr	r3, [pc, #32]	@ (8006380 <HAL_RTC_SetAlarm_IT+0x210>)
 8006360:	22ff      	movs	r2, #255	@ 0xff
 8006362:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	bd90      	pop	{r4, r7, pc}
 800637e:	bf00      	nop
 8006380:	40002800 	.word	0x40002800
 8006384:	58000800 	.word	0x58000800

08006388 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <HAL_RTC_DeactivateAlarm+0x18>
 800639c:	2302      	movs	r3, #2
 800639e:	e048      	b.n	8006432 <HAL_RTC_DeactivateAlarm+0xaa>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063b0:	4b22      	ldr	r3, [pc, #136]	@ (800643c <HAL_RTC_DeactivateAlarm+0xb4>)
 80063b2:	22ca      	movs	r2, #202	@ 0xca
 80063b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80063b6:	4b21      	ldr	r3, [pc, #132]	@ (800643c <HAL_RTC_DeactivateAlarm+0xb4>)
 80063b8:	2253      	movs	r2, #83	@ 0x53
 80063ba:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063c2:	d115      	bne.n	80063f0 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80063c4:	4b1d      	ldr	r3, [pc, #116]	@ (800643c <HAL_RTC_DeactivateAlarm+0xb4>)
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	4a1c      	ldr	r2, [pc, #112]	@ (800643c <HAL_RTC_DeactivateAlarm+0xb4>)
 80063ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80063ce:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80063d0:	4b1a      	ldr	r3, [pc, #104]	@ (800643c <HAL_RTC_DeactivateAlarm+0xb4>)
 80063d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d4:	4a19      	ldr	r2, [pc, #100]	@ (800643c <HAL_RTC_DeactivateAlarm+0xb4>)
 80063d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063da:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e0:	f023 0201 	bic.w	r2, r3, #1
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80063e8:	4b14      	ldr	r3, [pc, #80]	@ (800643c <HAL_RTC_DeactivateAlarm+0xb4>)
 80063ea:	2201      	movs	r2, #1
 80063ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80063ee:	e014      	b.n	800641a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80063f0:	4b12      	ldr	r3, [pc, #72]	@ (800643c <HAL_RTC_DeactivateAlarm+0xb4>)
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	4a11      	ldr	r2, [pc, #68]	@ (800643c <HAL_RTC_DeactivateAlarm+0xb4>)
 80063f6:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80063fa:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80063fc:	4b0f      	ldr	r3, [pc, #60]	@ (800643c <HAL_RTC_DeactivateAlarm+0xb4>)
 80063fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006400:	4a0e      	ldr	r2, [pc, #56]	@ (800643c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006402:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006406:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800640c:	f023 0202 	bic.w	r2, r3, #2
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006414:	4b09      	ldr	r3, [pc, #36]	@ (800643c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006416:	2202      	movs	r2, #2
 8006418:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800641a:	4b08      	ldr	r3, [pc, #32]	@ (800643c <HAL_RTC_DeactivateAlarm+0xb4>)
 800641c:	22ff      	movs	r2, #255	@ 0xff
 800641e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	bc80      	pop	{r7}
 800643a:	4770      	bx	lr
 800643c:	40002800 	.word	0x40002800

08006440 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006448:	4b11      	ldr	r3, [pc, #68]	@ (8006490 <HAL_RTC_AlarmIRQHandler+0x50>)
 800644a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006450:	4013      	ands	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d005      	beq.n	800646a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800645e:	4b0c      	ldr	r3, [pc, #48]	@ (8006490 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006460:	2201      	movs	r2, #1
 8006462:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7fc fc28 	bl	8002cba <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006474:	4b06      	ldr	r3, [pc, #24]	@ (8006490 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006476:	2202      	movs	r2, #2
 8006478:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f94a 	bl	8006714 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006488:	bf00      	nop
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	40002800 	.word	0x40002800

08006494 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800649c:	4b0f      	ldr	r3, [pc, #60]	@ (80064dc <HAL_RTC_WaitForSynchro+0x48>)
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	4a0e      	ldr	r2, [pc, #56]	@ (80064dc <HAL_RTC_WaitForSynchro+0x48>)
 80064a2:	f023 0320 	bic.w	r3, r3, #32
 80064a6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80064a8:	f7fc f91e 	bl	80026e8 <HAL_GetTick>
 80064ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80064ae:	e009      	b.n	80064c4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80064b0:	f7fc f91a 	bl	80026e8 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80064be:	d901      	bls.n	80064c4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e006      	b.n	80064d2 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80064c4:	4b05      	ldr	r3, [pc, #20]	@ (80064dc <HAL_RTC_WaitForSynchro+0x48>)
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0320 	and.w	r3, r3, #32
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d0ef      	beq.n	80064b0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	40002800 	.word	0x40002800

080064e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80064ec:	4b15      	ldr	r3, [pc, #84]	@ (8006544 <RTC_EnterInitMode+0x64>)
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d120      	bne.n	800653a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80064f8:	4b12      	ldr	r3, [pc, #72]	@ (8006544 <RTC_EnterInitMode+0x64>)
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	4a11      	ldr	r2, [pc, #68]	@ (8006544 <RTC_EnterInitMode+0x64>)
 80064fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006502:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006504:	f7fc f8f0 	bl	80026e8 <HAL_GetTick>
 8006508:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800650a:	e00d      	b.n	8006528 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800650c:	f7fc f8ec 	bl	80026e8 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800651a:	d905      	bls.n	8006528 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2203      	movs	r2, #3
 8006524:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006528:	4b06      	ldr	r3, [pc, #24]	@ (8006544 <RTC_EnterInitMode+0x64>)
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <RTC_EnterInitMode+0x5a>
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	2b03      	cmp	r3, #3
 8006538:	d1e8      	bne.n	800650c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800653a:	7bfb      	ldrb	r3, [r7, #15]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	40002800 	.word	0x40002800

08006548 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006554:	4b1a      	ldr	r3, [pc, #104]	@ (80065c0 <RTC_ExitInitMode+0x78>)
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	4a19      	ldr	r2, [pc, #100]	@ (80065c0 <RTC_ExitInitMode+0x78>)
 800655a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800655e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006560:	4b17      	ldr	r3, [pc, #92]	@ (80065c0 <RTC_ExitInitMode+0x78>)
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	f003 0320 	and.w	r3, r3, #32
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10c      	bne.n	8006586 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7ff ff91 	bl	8006494 <HAL_RTC_WaitForSynchro>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01e      	beq.n	80065b6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2203      	movs	r2, #3
 800657c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	73fb      	strb	r3, [r7, #15]
 8006584:	e017      	b.n	80065b6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006586:	4b0e      	ldr	r3, [pc, #56]	@ (80065c0 <RTC_ExitInitMode+0x78>)
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	4a0d      	ldr	r2, [pc, #52]	@ (80065c0 <RTC_ExitInitMode+0x78>)
 800658c:	f023 0320 	bic.w	r3, r3, #32
 8006590:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7ff ff7e 	bl	8006494 <HAL_RTC_WaitForSynchro>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d005      	beq.n	80065aa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2203      	movs	r2, #3
 80065a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80065aa:	4b05      	ldr	r3, [pc, #20]	@ (80065c0 <RTC_ExitInitMode+0x78>)
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	4a04      	ldr	r2, [pc, #16]	@ (80065c0 <RTC_ExitInitMode+0x78>)
 80065b0:	f043 0320 	orr.w	r3, r3, #32
 80065b4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	40002800 	.word	0x40002800

080065c4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80065d6:	e005      	b.n	80065e4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	3301      	adds	r3, #1
 80065dc:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80065de:	7afb      	ldrb	r3, [r7, #11]
 80065e0:	3b0a      	subs	r3, #10
 80065e2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80065e4:	7afb      	ldrb	r3, [r7, #11]
 80065e6:	2b09      	cmp	r3, #9
 80065e8:	d8f6      	bhi.n	80065d8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	7afb      	ldrb	r3, [r7, #11]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	b2db      	uxtb	r3, r3
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bc80      	pop	{r7}
 8006600:	4770      	bx	lr
	...

08006604 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_RTCEx_EnableBypassShadow+0x16>
 8006616:	2302      	movs	r3, #2
 8006618:	e01f      	b.n	800665a <HAL_RTCEx_EnableBypassShadow+0x56>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2202      	movs	r2, #2
 8006626:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800662a:	4b0e      	ldr	r3, [pc, #56]	@ (8006664 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800662c:	22ca      	movs	r2, #202	@ 0xca
 800662e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006630:	4b0c      	ldr	r3, [pc, #48]	@ (8006664 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006632:	2253      	movs	r2, #83	@ 0x53
 8006634:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006636:	4b0b      	ldr	r3, [pc, #44]	@ (8006664 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	4a0a      	ldr	r2, [pc, #40]	@ (8006664 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800663c:	f043 0320 	orr.w	r3, r3, #32
 8006640:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006642:	4b08      	ldr	r3, [pc, #32]	@ (8006664 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006644:	22ff      	movs	r2, #255	@ 0xff
 8006646:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	bc80      	pop	{r7}
 8006662:	4770      	bx	lr
 8006664:	40002800 	.word	0x40002800

08006668 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006676:	2b01      	cmp	r3, #1
 8006678:	d101      	bne.n	800667e <HAL_RTCEx_SetSSRU_IT+0x16>
 800667a:	2302      	movs	r3, #2
 800667c:	e027      	b.n	80066ce <HAL_RTCEx_SetSSRU_IT+0x66>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2202      	movs	r2, #2
 800668a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800668e:	4b12      	ldr	r3, [pc, #72]	@ (80066d8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006690:	22ca      	movs	r2, #202	@ 0xca
 8006692:	625a      	str	r2, [r3, #36]	@ 0x24
 8006694:	4b10      	ldr	r3, [pc, #64]	@ (80066d8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006696:	2253      	movs	r2, #83	@ 0x53
 8006698:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800669a:	4b0f      	ldr	r3, [pc, #60]	@ (80066d8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	4a0e      	ldr	r2, [pc, #56]	@ (80066d8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80066a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066a4:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80066a6:	4b0d      	ldr	r3, [pc, #52]	@ (80066dc <HAL_RTCEx_SetSSRU_IT+0x74>)
 80066a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066ac:	4a0b      	ldr	r2, [pc, #44]	@ (80066dc <HAL_RTCEx_SetSSRU_IT+0x74>)
 80066ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066b2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066b6:	4b08      	ldr	r3, [pc, #32]	@ (80066d8 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80066b8:	22ff      	movs	r2, #255	@ 0xff
 80066ba:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr
 80066d8:	40002800 	.word	0x40002800
 80066dc:	58000800 	.word	0x58000800

080066e0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80066e8:	4b09      	ldr	r3, [pc, #36]	@ (8006710 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80066ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d005      	beq.n	8006700 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80066f4:	4b06      	ldr	r3, [pc, #24]	@ (8006710 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80066f6:	2240      	movs	r2, #64	@ 0x40
 80066f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fc fae7 	bl	8002cce <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006708:	bf00      	nop
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	40002800 	.word	0x40002800

08006714 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	bc80      	pop	{r7}
 8006724:	4770      	bx	lr
	...

08006728 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006734:	4b07      	ldr	r3, [pc, #28]	@ (8006754 <HAL_RTCEx_BKUPWrite+0x2c>)
 8006736:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	4413      	add	r3, r2
 8006740:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	601a      	str	r2, [r3, #0]
}
 8006748:	bf00      	nop
 800674a:	371c      	adds	r7, #28
 800674c:	46bd      	mov	sp, r7
 800674e:	bc80      	pop	{r7}
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	4000b100 	.word	0x4000b100

08006758 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006762:	4b07      	ldr	r3, [pc, #28]	@ (8006780 <HAL_RTCEx_BKUPRead+0x28>)
 8006764:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	4413      	add	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	bc80      	pop	{r7}
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	4000b100 	.word	0x4000b100

08006784 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800678c:	4b06      	ldr	r3, [pc, #24]	@ (80067a8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006794:	4904      	ldr	r1, [pc, #16]	@ (80067a8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4313      	orrs	r3, r2
 800679a:	608b      	str	r3, [r1, #8]
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bc80      	pop	{r7}
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	58000400 	.word	0x58000400

080067ac <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80067b0:	4b05      	ldr	r3, [pc, #20]	@ (80067c8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80067b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b6:	4a04      	ldr	r2, [pc, #16]	@ (80067c8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80067b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80067c0:	bf00      	nop
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bc80      	pop	{r7}
 80067c6:	4770      	bx	lr
 80067c8:	58000400 	.word	0x58000400

080067cc <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80067d0:	4b05      	ldr	r3, [pc, #20]	@ (80067e8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80067d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d6:	4a04      	ldr	r2, [pc, #16]	@ (80067e8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80067d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80067e0:	bf00      	nop
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr
 80067e8:	58000400 	.word	0x58000400

080067ec <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80067f0:	4b03      	ldr	r3, [pc, #12]	@ (8006800 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80067f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067f6:	619a      	str	r2, [r3, #24]
}
 80067f8:	bf00      	nop
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr
 8006800:	58000400 	.word	0x58000400

08006804 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006808:	4b06      	ldr	r3, [pc, #24]	@ (8006824 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b02      	cmp	r3, #2
 8006812:	d101      	bne.n	8006818 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006814:	2301      	movs	r3, #1
 8006816:	e000      	b.n	800681a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	46bd      	mov	sp, r7
 800681e:	bc80      	pop	{r7}
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	58000400 	.word	0x58000400

08006828 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8006828:	b480      	push	{r7}
 800682a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800682c:	4b06      	ldr	r3, [pc, #24]	@ (8006848 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b04      	cmp	r3, #4
 8006836:	d101      	bne.n	800683c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006838:	2301      	movs	r3, #1
 800683a:	e000      	b.n	800683e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	58000400 	.word	0x58000400

0800684c <LL_RCC_RF_DisableReset>:
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006854:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006858:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800685c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006860:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006864:	bf00      	nop
 8006866:	46bd      	mov	sp, r7
 8006868:	bc80      	pop	{r7}
 800686a:	4770      	bx	lr

0800686c <LL_RCC_IsRFUnderReset>:
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006874:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006878:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800687c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006880:	d101      	bne.n	8006886 <LL_RCC_IsRFUnderReset+0x1a>
 8006882:	2301      	movs	r3, #1
 8006884:	e000      	b.n	8006888 <LL_RCC_IsRFUnderReset+0x1c>
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	46bd      	mov	sp, r7
 800688c:	bc80      	pop	{r7}
 800688e:	4770      	bx	lr

08006890 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006898:	4b06      	ldr	r3, [pc, #24]	@ (80068b4 <LL_EXTI_EnableIT_32_63+0x24>)
 800689a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800689e:	4905      	ldr	r1, [pc, #20]	@ (80068b4 <LL_EXTI_EnableIT_32_63+0x24>)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc80      	pop	{r7}
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	58000800 	.word	0x58000800

080068b8 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d103      	bne.n	80068ce <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	73fb      	strb	r3, [r7, #15]
    return status;
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	e052      	b.n	8006974 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	799b      	ldrb	r3, [r3, #6]
 80068d6:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80068d8:	7bbb      	ldrb	r3, [r7, #14]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_SUBGHZ_Init+0x2c>
 80068de:	7bbb      	ldrb	r3, [r7, #14]
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d109      	bne.n	80068f8 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7fb fd64 	bl	80023b8 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80068f0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80068f4:	f7ff ffcc 	bl	8006890 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d126      	bne.n	800694c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2202      	movs	r2, #2
 8006902:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8006904:	f7ff ffa2 	bl	800684c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006908:	4b1c      	ldr	r3, [pc, #112]	@ (800697c <HAL_SUBGHZ_Init+0xc4>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	4613      	mov	r3, r2
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	1a9b      	subs	r3, r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	0cdb      	lsrs	r3, r3, #19
 8006916:	2264      	movs	r2, #100	@ 0x64
 8006918:	fb02 f303 	mul.w	r3, r2, r3
 800691c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d105      	bne.n	8006930 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	609a      	str	r2, [r3, #8]
        break;
 800692e:	e007      	b.n	8006940 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	3b01      	subs	r3, #1
 8006934:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006936:	f7ff ff99 	bl	800686c <LL_RCC_IsRFUnderReset>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1ee      	bne.n	800691e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006940:	f7ff ff34 	bl	80067ac <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006944:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006948:	f7ff ff1c 	bl	8006784 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800694c:	f7ff ff4e 	bl	80067ec <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006950:	7bfb      	ldrb	r3, [r7, #15]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10a      	bne.n	800696c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4618      	mov	r0, r3
 800695c:	f000 faac 	bl	8006eb8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	719a      	strb	r2, [r3, #6]

  return status;
 8006972:	7bfb      	ldrb	r3, [r7, #15]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	20000000 	.word	0x20000000

08006980 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	607a      	str	r2, [r7, #4]
 800698a:	461a      	mov	r2, r3
 800698c:	460b      	mov	r3, r1
 800698e:	817b      	strh	r3, [r7, #10]
 8006990:	4613      	mov	r3, r2
 8006992:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	799b      	ldrb	r3, [r3, #6]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b01      	cmp	r3, #1
 800699c:	d14a      	bne.n	8006a34 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	795b      	ldrb	r3, [r3, #5]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d101      	bne.n	80069aa <HAL_SUBGHZ_WriteRegisters+0x2a>
 80069a6:	2302      	movs	r3, #2
 80069a8:	e045      	b.n	8006a36 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2202      	movs	r2, #2
 80069b4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 fb4c 	bl	8007054 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80069bc:	f7ff ff06 	bl	80067cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80069c0:	210d      	movs	r1, #13
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 fa98 	bl	8006ef8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80069c8:	897b      	ldrh	r3, [r7, #10]
 80069ca:	0a1b      	lsrs	r3, r3, #8
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	4619      	mov	r1, r3
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 fa90 	bl	8006ef8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80069d8:	897b      	ldrh	r3, [r7, #10]
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	4619      	mov	r1, r3
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 fa8a 	bl	8006ef8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80069e4:	2300      	movs	r3, #0
 80069e6:	82bb      	strh	r3, [r7, #20]
 80069e8:	e00a      	b.n	8006a00 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80069ea:	8abb      	ldrh	r3, [r7, #20]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	4413      	add	r3, r2
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	4619      	mov	r1, r3
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 fa7f 	bl	8006ef8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80069fa:	8abb      	ldrh	r3, [r7, #20]
 80069fc:	3301      	adds	r3, #1
 80069fe:	82bb      	strh	r3, [r7, #20]
 8006a00:	8aba      	ldrh	r2, [r7, #20]
 8006a02:	893b      	ldrh	r3, [r7, #8]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d3f0      	bcc.n	80069ea <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006a08:	f7ff fed0 	bl	80067ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 fb45 	bl	800709c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	75fb      	strb	r3, [r7, #23]
 8006a1e:	e001      	b.n	8006a24 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006a20:	2300      	movs	r3, #0
 8006a22:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2201      	movs	r2, #1
 8006a28:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	715a      	strb	r2, [r3, #5]

    return status;
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	e000      	b.n	8006a36 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006a34:	2302      	movs	r3, #2
  }
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b088      	sub	sp, #32
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	817b      	strh	r3, [r7, #10]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	799b      	ldrb	r3, [r3, #6]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d14a      	bne.n	8006af6 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	795b      	ldrb	r3, [r3, #5]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e045      	b.n	8006af8 <HAL_SUBGHZ_ReadRegisters+0xba>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 faee 	bl	8007054 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006a78:	f7ff fea8 	bl	80067cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006a7c:	211d      	movs	r1, #29
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 fa3a 	bl	8006ef8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006a84:	897b      	ldrh	r3, [r7, #10]
 8006a86:	0a1b      	lsrs	r3, r3, #8
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 fa32 	bl	8006ef8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006a94:	897b      	ldrh	r3, [r7, #10]
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	4619      	mov	r1, r3
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 fa2c 	bl	8006ef8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 fa28 	bl	8006ef8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	82fb      	strh	r3, [r7, #22]
 8006aac:	e009      	b.n	8006ac2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006aae:	69b9      	ldr	r1, [r7, #24]
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 fa77 	bl	8006fa4 <SUBGHZSPI_Receive>
      pData++;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006abc:	8afb      	ldrh	r3, [r7, #22]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	82fb      	strh	r3, [r7, #22]
 8006ac2:	8afa      	ldrh	r2, [r7, #22]
 8006ac4:	893b      	ldrh	r3, [r7, #8]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d3f1      	bcc.n	8006aae <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006aca:	f7ff fe6f 	bl	80067ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 fae4 	bl	800709c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d002      	beq.n	8006ae2 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	77fb      	strb	r3, [r7, #31]
 8006ae0:	e001      	b.n	8006ae6 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	715a      	strb	r2, [r3, #5]

    return status;
 8006af2:	7ffb      	ldrb	r3, [r7, #31]
 8006af4:	e000      	b.n	8006af8 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006af6:	2302      	movs	r3, #2
  }
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3720      	adds	r7, #32
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	607a      	str	r2, [r7, #4]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	72fb      	strb	r3, [r7, #11]
 8006b10:	4613      	mov	r3, r2
 8006b12:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	799b      	ldrb	r3, [r3, #6]
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d14a      	bne.n	8006bb4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	795b      	ldrb	r3, [r3, #5]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d101      	bne.n	8006b2a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8006b26:	2302      	movs	r3, #2
 8006b28:	e045      	b.n	8006bb6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 fa8f 	bl	8007054 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006b36:	7afb      	ldrb	r3, [r7, #11]
 8006b38:	2b84      	cmp	r3, #132	@ 0x84
 8006b3a:	d002      	beq.n	8006b42 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006b3c:	7afb      	ldrb	r3, [r7, #11]
 8006b3e:	2b94      	cmp	r3, #148	@ 0x94
 8006b40:	d103      	bne.n	8006b4a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	711a      	strb	r2, [r3, #4]
 8006b48:	e002      	b.n	8006b50 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006b50:	f7ff fe3c 	bl	80067cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006b54:	7afb      	ldrb	r3, [r7, #11]
 8006b56:	4619      	mov	r1, r3
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f9cd 	bl	8006ef8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006b5e:	2300      	movs	r3, #0
 8006b60:	82bb      	strh	r3, [r7, #20]
 8006b62:	e00a      	b.n	8006b7a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006b64:	8abb      	ldrh	r3, [r7, #20]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	4413      	add	r3, r2
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 f9c2 	bl	8006ef8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006b74:	8abb      	ldrh	r3, [r7, #20]
 8006b76:	3301      	adds	r3, #1
 8006b78:	82bb      	strh	r3, [r7, #20]
 8006b7a:	8aba      	ldrh	r2, [r7, #20]
 8006b7c:	893b      	ldrh	r3, [r7, #8]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d3f0      	bcc.n	8006b64 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006b82:	f7ff fe13 	bl	80067ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006b86:	7afb      	ldrb	r3, [r7, #11]
 8006b88:	2b84      	cmp	r3, #132	@ 0x84
 8006b8a:	d002      	beq.n	8006b92 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 fa85 	bl	800709c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	75fb      	strb	r3, [r7, #23]
 8006b9e:	e001      	b.n	8006ba4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	715a      	strb	r2, [r3, #5]

    return status;
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
 8006bb2:	e000      	b.n	8006bb6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006bb4:	2302      	movs	r3, #2
  }
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b088      	sub	sp, #32
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	60f8      	str	r0, [r7, #12]
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	460b      	mov	r3, r1
 8006bcc:	72fb      	strb	r3, [r7, #11]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	799b      	ldrb	r3, [r3, #6]
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d13d      	bne.n	8006c5c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	795b      	ldrb	r3, [r3, #5]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d101      	bne.n	8006bec <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8006be8:	2302      	movs	r3, #2
 8006bea:	e038      	b.n	8006c5e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 fa2e 	bl	8007054 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006bf8:	f7ff fde8 	bl	80067cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006bfc:	7afb      	ldrb	r3, [r7, #11]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f979 	bl	8006ef8 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006c06:	2100      	movs	r1, #0
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 f975 	bl	8006ef8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006c0e:	2300      	movs	r3, #0
 8006c10:	82fb      	strh	r3, [r7, #22]
 8006c12:	e009      	b.n	8006c28 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006c14:	69b9      	ldr	r1, [r7, #24]
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 f9c4 	bl	8006fa4 <SUBGHZSPI_Receive>
      pData++;
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006c22:	8afb      	ldrh	r3, [r7, #22]
 8006c24:	3301      	adds	r3, #1
 8006c26:	82fb      	strh	r3, [r7, #22]
 8006c28:	8afa      	ldrh	r2, [r7, #22]
 8006c2a:	893b      	ldrh	r3, [r7, #8]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d3f1      	bcc.n	8006c14 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006c30:	f7ff fdbc 	bl	80067ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 fa31 	bl	800709c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d002      	beq.n	8006c48 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	77fb      	strb	r3, [r7, #31]
 8006c46:	e001      	b.n	8006c4c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	715a      	strb	r2, [r3, #5]

    return status;
 8006c58:	7ffb      	ldrb	r3, [r7, #31]
 8006c5a:	e000      	b.n	8006c5e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006c5c:	2302      	movs	r3, #2
  }
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b086      	sub	sp, #24
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	461a      	mov	r2, r3
 8006c72:	460b      	mov	r3, r1
 8006c74:	72fb      	strb	r3, [r7, #11]
 8006c76:	4613      	mov	r3, r2
 8006c78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	799b      	ldrb	r3, [r3, #6]
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d13e      	bne.n	8006d02 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	795b      	ldrb	r3, [r3, #5]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d101      	bne.n	8006c90 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	e039      	b.n	8006d04 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2201      	movs	r2, #1
 8006c94:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 f9dc 	bl	8007054 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006c9c:	f7ff fd96 	bl	80067cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006ca0:	210e      	movs	r1, #14
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 f928 	bl	8006ef8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006ca8:	7afb      	ldrb	r3, [r7, #11]
 8006caa:	4619      	mov	r1, r3
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f923 	bl	8006ef8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	82bb      	strh	r3, [r7, #20]
 8006cb6:	e00a      	b.n	8006cce <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006cb8:	8abb      	ldrh	r3, [r7, #20]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 f918 	bl	8006ef8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006cc8:	8abb      	ldrh	r3, [r7, #20]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	82bb      	strh	r3, [r7, #20]
 8006cce:	8aba      	ldrh	r2, [r7, #20]
 8006cd0:	893b      	ldrh	r3, [r7, #8]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d3f0      	bcc.n	8006cb8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006cd6:	f7ff fd69 	bl	80067ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 f9de 	bl	800709c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	75fb      	strb	r3, [r7, #23]
 8006cec:	e001      	b.n	8006cf2 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	715a      	strb	r2, [r3, #5]

    return status;
 8006cfe:	7dfb      	ldrb	r3, [r7, #23]
 8006d00:	e000      	b.n	8006d04 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006d02:	2302      	movs	r3, #2
  }
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	607a      	str	r2, [r7, #4]
 8006d16:	461a      	mov	r2, r3
 8006d18:	460b      	mov	r3, r1
 8006d1a:	72fb      	strb	r3, [r7, #11]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	799b      	ldrb	r3, [r3, #6]
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d141      	bne.n	8006db2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	795b      	ldrb	r3, [r3, #5]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d101      	bne.n	8006d3a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8006d36:	2302      	movs	r3, #2
 8006d38:	e03c      	b.n	8006db4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f987 	bl	8007054 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006d46:	f7ff fd41 	bl	80067cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006d4a:	211e      	movs	r1, #30
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 f8d3 	bl	8006ef8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006d52:	7afb      	ldrb	r3, [r7, #11]
 8006d54:	4619      	mov	r1, r3
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 f8ce 	bl	8006ef8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 f8ca 	bl	8006ef8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006d64:	2300      	movs	r3, #0
 8006d66:	82fb      	strh	r3, [r7, #22]
 8006d68:	e009      	b.n	8006d7e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006d6a:	69b9      	ldr	r1, [r7, #24]
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 f919 	bl	8006fa4 <SUBGHZSPI_Receive>
      pData++;
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	3301      	adds	r3, #1
 8006d76:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006d78:	8afb      	ldrh	r3, [r7, #22]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	82fb      	strh	r3, [r7, #22]
 8006d7e:	8afa      	ldrh	r2, [r7, #22]
 8006d80:	893b      	ldrh	r3, [r7, #8]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d3f1      	bcc.n	8006d6a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006d86:	f7ff fd11 	bl	80067ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 f986 	bl	800709c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	77fb      	strb	r3, [r7, #31]
 8006d9c:	e001      	b.n	8006da2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2201      	movs	r2, #1
 8006da6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	715a      	strb	r2, [r3, #5]

    return status;
 8006dae:	7ffb      	ldrb	r3, [r7, #31]
 8006db0:	e000      	b.n	8006db4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006db2:	2302      	movs	r3, #2
  }
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3720      	adds	r7, #32
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006dc8:	f107 020c 	add.w	r2, r7, #12
 8006dcc:	2302      	movs	r3, #2
 8006dce:	2112      	movs	r1, #18
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7ff fef4 	bl	8006bbe <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8006dd6:	7b3b      	ldrb	r3, [r7, #12]
 8006dd8:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8006dda:	89fb      	ldrh	r3, [r7, #14]
 8006ddc:	021b      	lsls	r3, r3, #8
 8006dde:	b21a      	sxth	r2, r3
 8006de0:	7b7b      	ldrb	r3, [r7, #13]
 8006de2:	b21b      	sxth	r3, r3
 8006de4:	4313      	orrs	r3, r2
 8006de6:	b21b      	sxth	r3, r3
 8006de8:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8006dea:	f107 020c 	add.w	r2, r7, #12
 8006dee:	2302      	movs	r3, #2
 8006df0:	2102      	movs	r1, #2
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7ff fe84 	bl	8006b00 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006df8:	89fb      	ldrh	r3, [r7, #14]
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f013 fd9a 	bl	801a93c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8006e08:	89fb      	ldrh	r3, [r7, #14]
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f013 fda0 	bl	801a958 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006e18:	89fb      	ldrh	r3, [r7, #14]
 8006e1a:	f003 0304 	and.w	r3, r3, #4
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f013 fdf0 	bl	801aa08 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006e28:	89fb      	ldrh	r3, [r7, #14]
 8006e2a:	f003 0308 	and.w	r3, r3, #8
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f013 fdf6 	bl	801aa24 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006e38:	89fb      	ldrh	r3, [r7, #14]
 8006e3a:	f003 0310 	and.w	r3, r3, #16
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f013 fdfc 	bl	801aa40 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006e48:	89fb      	ldrh	r3, [r7, #14]
 8006e4a:	f003 0320 	and.w	r3, r3, #32
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f013 fdca 	bl	801a9ec <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006e58:	89fb      	ldrh	r3, [r7, #14]
 8006e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f013 fd86 	bl	801a974 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006e68:	89fb      	ldrh	r3, [r7, #14]
 8006e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00d      	beq.n	8006e8e <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006e72:	89fb      	ldrh	r3, [r7, #14]
 8006e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d004      	beq.n	8006e86 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f013 fd86 	bl	801a990 <HAL_SUBGHZ_CADStatusCallback>
 8006e84:	e003      	b.n	8006e8e <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006e86:	2100      	movs	r1, #0
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f013 fd81 	bl	801a990 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006e8e:	89fb      	ldrh	r3, [r7, #14]
 8006e90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f013 fd97 	bl	801a9cc <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8006e9e:	89fb      	ldrh	r3, [r7, #14]
 8006ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f013 fdd7 	bl	801aa5c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8006eae:	bf00      	nop
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef4 <SUBGHZSPI_Init+0x3c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8006ef4 <SUBGHZSPI_Init+0x3c>)
 8006ec6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eca:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006ecc:	4a09      	ldr	r2, [pc, #36]	@ (8006ef4 <SUBGHZSPI_Init+0x3c>)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8006ed4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006ed6:	4b07      	ldr	r3, [pc, #28]	@ (8006ef4 <SUBGHZSPI_Init+0x3c>)
 8006ed8:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8006edc:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006ede:	4b05      	ldr	r3, [pc, #20]	@ (8006ef4 <SUBGHZSPI_Init+0x3c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a04      	ldr	r2, [pc, #16]	@ (8006ef4 <SUBGHZSPI_Init+0x3c>)
 8006ee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ee8:	6013      	str	r3, [r2, #0]
}
 8006eea:	bf00      	nop
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bc80      	pop	{r7}
 8006ef2:	4770      	bx	lr
 8006ef4:	58010000 	.word	0x58010000

08006ef8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	460b      	mov	r3, r1
 8006f02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006f08:	4b23      	ldr	r3, [pc, #140]	@ (8006f98 <SUBGHZSPI_Transmit+0xa0>)
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	1a9b      	subs	r3, r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	0cdb      	lsrs	r3, r3, #19
 8006f16:	2264      	movs	r2, #100	@ 0x64
 8006f18:	fb02 f303 	mul.w	r3, r2, r3
 8006f1c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d105      	bne.n	8006f30 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	609a      	str	r2, [r3, #8]
      break;
 8006f2e:	e008      	b.n	8006f42 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006f36:	4b19      	ldr	r3, [pc, #100]	@ (8006f9c <SUBGHZSPI_Transmit+0xa4>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d1ed      	bne.n	8006f1e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006f42:	4b17      	ldr	r3, [pc, #92]	@ (8006fa0 <SUBGHZSPI_Transmit+0xa8>)
 8006f44:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	78fa      	ldrb	r2, [r7, #3]
 8006f4a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006f4c:	4b12      	ldr	r3, [pc, #72]	@ (8006f98 <SUBGHZSPI_Transmit+0xa0>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	4613      	mov	r3, r2
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	1a9b      	subs	r3, r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	0cdb      	lsrs	r3, r3, #19
 8006f5a:	2264      	movs	r2, #100	@ 0x64
 8006f5c:	fb02 f303 	mul.w	r3, r2, r3
 8006f60:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d105      	bne.n	8006f74 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	609a      	str	r2, [r3, #8]
      break;
 8006f72:	e008      	b.n	8006f86 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006f7a:	4b08      	ldr	r3, [pc, #32]	@ (8006f9c <SUBGHZSPI_Transmit+0xa4>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d1ed      	bne.n	8006f62 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006f86:	4b05      	ldr	r3, [pc, #20]	@ (8006f9c <SUBGHZSPI_Transmit+0xa4>)
 8006f88:	68db      	ldr	r3, [r3, #12]

  return status;
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	371c      	adds	r7, #28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bc80      	pop	{r7}
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	20000000 	.word	0x20000000
 8006f9c:	58010000 	.word	0x58010000
 8006fa0:	5801000c 	.word	0x5801000c

08006fa4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006fb2:	4b25      	ldr	r3, [pc, #148]	@ (8007048 <SUBGHZSPI_Receive+0xa4>)
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	00db      	lsls	r3, r3, #3
 8006fba:	1a9b      	subs	r3, r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	0cdb      	lsrs	r3, r3, #19
 8006fc0:	2264      	movs	r2, #100	@ 0x64
 8006fc2:	fb02 f303 	mul.w	r3, r2, r3
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d105      	bne.n	8006fda <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	609a      	str	r2, [r3, #8]
      break;
 8006fd8:	e008      	b.n	8006fec <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800704c <SUBGHZSPI_Receive+0xa8>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d1ed      	bne.n	8006fc8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006fec:	4b18      	ldr	r3, [pc, #96]	@ (8007050 <SUBGHZSPI_Receive+0xac>)
 8006fee:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	22ff      	movs	r2, #255	@ 0xff
 8006ff4:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006ff6:	4b14      	ldr	r3, [pc, #80]	@ (8007048 <SUBGHZSPI_Receive+0xa4>)
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	00db      	lsls	r3, r3, #3
 8006ffe:	1a9b      	subs	r3, r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	0cdb      	lsrs	r3, r3, #19
 8007004:	2264      	movs	r2, #100	@ 0x64
 8007006:	fb02 f303 	mul.w	r3, r2, r3
 800700a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d105      	bne.n	800701e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	609a      	str	r2, [r3, #8]
      break;
 800701c:	e008      	b.n	8007030 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3b01      	subs	r3, #1
 8007022:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007024:	4b09      	ldr	r3, [pc, #36]	@ (800704c <SUBGHZSPI_Receive+0xa8>)
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b01      	cmp	r3, #1
 800702e:	d1ed      	bne.n	800700c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007030:	4b06      	ldr	r3, [pc, #24]	@ (800704c <SUBGHZSPI_Receive+0xa8>)
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	b2da      	uxtb	r2, r3
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	701a      	strb	r2, [r3, #0]

  return status;
 800703a:	7dfb      	ldrb	r3, [r7, #23]
}
 800703c:	4618      	mov	r0, r3
 800703e:	371c      	adds	r7, #28
 8007040:	46bd      	mov	sp, r7
 8007042:	bc80      	pop	{r7}
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	20000000 	.word	0x20000000
 800704c:	58010000 	.word	0x58010000
 8007050:	5801000c 	.word	0x5801000c

08007054 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	791b      	ldrb	r3, [r3, #4]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d111      	bne.n	8007088 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007064:	4b0c      	ldr	r3, [pc, #48]	@ (8007098 <SUBGHZ_CheckDeviceReady+0x44>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	4613      	mov	r3, r2
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	4413      	add	r3, r2
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	0c1b      	lsrs	r3, r3, #16
 8007072:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007074:	f7ff fbaa 	bl	80067cc <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	3b01      	subs	r3, #1
 800707c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1f9      	bne.n	8007078 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007084:	f7ff fb92 	bl	80067ac <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f807 	bl	800709c <SUBGHZ_WaitOnBusy>
 800708e:	4603      	mov	r3, r0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20000000 	.word	0x20000000

0800709c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80070a8:	4b12      	ldr	r3, [pc, #72]	@ (80070f4 <SUBGHZ_WaitOnBusy+0x58>)
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	4613      	mov	r3, r2
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	4413      	add	r3, r2
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	0d1b      	lsrs	r3, r3, #20
 80070b6:	2264      	movs	r2, #100	@ 0x64
 80070b8:	fb02 f303 	mul.w	r3, r2, r3
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80070be:	f7ff fbb3 	bl	8006828 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80070c2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d105      	bne.n	80070d6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2202      	movs	r2, #2
 80070d2:	609a      	str	r2, [r3, #8]
      break;
 80070d4:	e009      	b.n	80070ea <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3b01      	subs	r3, #1
 80070da:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80070dc:	f7ff fb92 	bl	8006804 <LL_PWR_IsActiveFlag_RFBUSYS>
 80070e0:	4602      	mov	r2, r0
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	4013      	ands	r3, r2
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d0e9      	beq.n	80070be <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	20000000 	.word	0x20000000

080070f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e049      	b.n	800719e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d106      	bne.n	8007124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7fb fc5a 	bl	80029d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	3304      	adds	r3, #4
 8007134:	4619      	mov	r1, r3
 8007136:	4610      	mov	r0, r2
 8007138:	f000 f944 	bl	80073c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
	...

080071a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d001      	beq.n	80071c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e02e      	b.n	800721e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a16      	ldr	r2, [pc, #88]	@ (8007228 <HAL_TIM_Base_Start+0x80>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d004      	beq.n	80071dc <HAL_TIM_Base_Start+0x34>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071da:	d115      	bne.n	8007208 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689a      	ldr	r2, [r3, #8]
 80071e2:	4b12      	ldr	r3, [pc, #72]	@ (800722c <HAL_TIM_Base_Start+0x84>)
 80071e4:	4013      	ands	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2b06      	cmp	r3, #6
 80071ec:	d015      	beq.n	800721a <HAL_TIM_Base_Start+0x72>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071f4:	d011      	beq.n	800721a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f042 0201 	orr.w	r2, r2, #1
 8007204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007206:	e008      	b.n	800721a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0201 	orr.w	r2, r2, #1
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	e000      	b.n	800721c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800721a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	bc80      	pop	{r7}
 8007226:	4770      	bx	lr
 8007228:	40012c00 	.word	0x40012c00
 800722c:	00010007 	.word	0x00010007

08007230 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <HAL_TIM_ConfigClockSource+0x1c>
 8007248:	2302      	movs	r3, #2
 800724a:	e0b6      	b.n	80073ba <HAL_TIM_ConfigClockSource+0x18a>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2202      	movs	r2, #2
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800726a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800726e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007276:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007288:	d03e      	beq.n	8007308 <HAL_TIM_ConfigClockSource+0xd8>
 800728a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800728e:	f200 8087 	bhi.w	80073a0 <HAL_TIM_ConfigClockSource+0x170>
 8007292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007296:	f000 8086 	beq.w	80073a6 <HAL_TIM_ConfigClockSource+0x176>
 800729a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800729e:	d87f      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x170>
 80072a0:	2b70      	cmp	r3, #112	@ 0x70
 80072a2:	d01a      	beq.n	80072da <HAL_TIM_ConfigClockSource+0xaa>
 80072a4:	2b70      	cmp	r3, #112	@ 0x70
 80072a6:	d87b      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x170>
 80072a8:	2b60      	cmp	r3, #96	@ 0x60
 80072aa:	d050      	beq.n	800734e <HAL_TIM_ConfigClockSource+0x11e>
 80072ac:	2b60      	cmp	r3, #96	@ 0x60
 80072ae:	d877      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x170>
 80072b0:	2b50      	cmp	r3, #80	@ 0x50
 80072b2:	d03c      	beq.n	800732e <HAL_TIM_ConfigClockSource+0xfe>
 80072b4:	2b50      	cmp	r3, #80	@ 0x50
 80072b6:	d873      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x170>
 80072b8:	2b40      	cmp	r3, #64	@ 0x40
 80072ba:	d058      	beq.n	800736e <HAL_TIM_ConfigClockSource+0x13e>
 80072bc:	2b40      	cmp	r3, #64	@ 0x40
 80072be:	d86f      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x170>
 80072c0:	2b30      	cmp	r3, #48	@ 0x30
 80072c2:	d064      	beq.n	800738e <HAL_TIM_ConfigClockSource+0x15e>
 80072c4:	2b30      	cmp	r3, #48	@ 0x30
 80072c6:	d86b      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x170>
 80072c8:	2b20      	cmp	r3, #32
 80072ca:	d060      	beq.n	800738e <HAL_TIM_ConfigClockSource+0x15e>
 80072cc:	2b20      	cmp	r3, #32
 80072ce:	d867      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x170>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d05c      	beq.n	800738e <HAL_TIM_ConfigClockSource+0x15e>
 80072d4:	2b10      	cmp	r3, #16
 80072d6:	d05a      	beq.n	800738e <HAL_TIM_ConfigClockSource+0x15e>
 80072d8:	e062      	b.n	80073a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072ea:	f000 f946 	bl	800757a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80072fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	609a      	str	r2, [r3, #8]
      break;
 8007306:	e04f      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007318:	f000 f92f 	bl	800757a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689a      	ldr	r2, [r3, #8]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800732a:	609a      	str	r2, [r3, #8]
      break;
 800732c:	e03c      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800733a:	461a      	mov	r2, r3
 800733c:	f000 f8a4 	bl	8007488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2150      	movs	r1, #80	@ 0x50
 8007346:	4618      	mov	r0, r3
 8007348:	f000 f8fb 	bl	8007542 <TIM_ITRx_SetConfig>
      break;
 800734c:	e02c      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800735a:	461a      	mov	r2, r3
 800735c:	f000 f8c2 	bl	80074e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2160      	movs	r1, #96	@ 0x60
 8007366:	4618      	mov	r0, r3
 8007368:	f000 f8eb 	bl	8007542 <TIM_ITRx_SetConfig>
      break;
 800736c:	e01c      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800737a:	461a      	mov	r2, r3
 800737c:	f000 f884 	bl	8007488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2140      	movs	r1, #64	@ 0x40
 8007386:	4618      	mov	r0, r3
 8007388:	f000 f8db 	bl	8007542 <TIM_ITRx_SetConfig>
      break;
 800738c:	e00c      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4619      	mov	r1, r3
 8007398:	4610      	mov	r0, r2
 800739a:	f000 f8d2 	bl	8007542 <TIM_ITRx_SetConfig>
      break;
 800739e:	e003      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	73fb      	strb	r3, [r7, #15]
      break;
 80073a4:	e000      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80073a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a29      	ldr	r2, [pc, #164]	@ (800747c <TIM_Base_SetConfig+0xb8>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d003      	beq.n	80073e4 <TIM_Base_SetConfig+0x20>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073e2:	d108      	bne.n	80073f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a20      	ldr	r2, [pc, #128]	@ (800747c <TIM_Base_SetConfig+0xb8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d00b      	beq.n	8007416 <TIM_Base_SetConfig+0x52>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007404:	d007      	beq.n	8007416 <TIM_Base_SetConfig+0x52>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a1d      	ldr	r2, [pc, #116]	@ (8007480 <TIM_Base_SetConfig+0xbc>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d003      	beq.n	8007416 <TIM_Base_SetConfig+0x52>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a1c      	ldr	r2, [pc, #112]	@ (8007484 <TIM_Base_SetConfig+0xc0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d108      	bne.n	8007428 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800741c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	4313      	orrs	r3, r2
 8007426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	4313      	orrs	r3, r2
 8007434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a0b      	ldr	r2, [pc, #44]	@ (800747c <TIM_Base_SetConfig+0xb8>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d007      	beq.n	8007464 <TIM_Base_SetConfig+0xa0>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a0a      	ldr	r2, [pc, #40]	@ (8007480 <TIM_Base_SetConfig+0xbc>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d003      	beq.n	8007464 <TIM_Base_SetConfig+0xa0>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a09      	ldr	r2, [pc, #36]	@ (8007484 <TIM_Base_SetConfig+0xc0>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d103      	bne.n	800746c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	691a      	ldr	r2, [r3, #16]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	615a      	str	r2, [r3, #20]
}
 8007472:	bf00      	nop
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	bc80      	pop	{r7}
 800747a:	4770      	bx	lr
 800747c:	40012c00 	.word	0x40012c00
 8007480:	40014400 	.word	0x40014400
 8007484:	40014800 	.word	0x40014800

08007488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a1b      	ldr	r3, [r3, #32]
 8007498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	f023 0201 	bic.w	r2, r3, #1
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f023 030a 	bic.w	r3, r3, #10
 80074c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	621a      	str	r2, [r3, #32]
}
 80074da:	bf00      	nop
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	bc80      	pop	{r7}
 80074e2:	4770      	bx	lr

080074e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	f023 0210 	bic.w	r2, r3, #16
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800750e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	031b      	lsls	r3, r3, #12
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007520:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	011b      	lsls	r3, r3, #4
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	4313      	orrs	r3, r2
 800752a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	621a      	str	r2, [r3, #32]
}
 8007538:	bf00      	nop
 800753a:	371c      	adds	r7, #28
 800753c:	46bd      	mov	sp, r7
 800753e:	bc80      	pop	{r7}
 8007540:	4770      	bx	lr

08007542 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007542:	b480      	push	{r7}
 8007544:	b085      	sub	sp, #20
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007558:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800755c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4313      	orrs	r3, r2
 8007564:	f043 0307 	orr.w	r3, r3, #7
 8007568:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	609a      	str	r2, [r3, #8]
}
 8007570:	bf00      	nop
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	bc80      	pop	{r7}
 8007578:	4770      	bx	lr

0800757a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800757a:	b480      	push	{r7}
 800757c:	b087      	sub	sp, #28
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	607a      	str	r2, [r7, #4]
 8007586:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007594:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	021a      	lsls	r2, r3, #8
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	431a      	orrs	r2, r3
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	609a      	str	r2, [r3, #8]
}
 80075ae:	bf00      	nop
 80075b0:	371c      	adds	r7, #28
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bc80      	pop	{r7}
 80075b6:	4770      	bx	lr

080075b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d101      	bne.n	80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075cc:	2302      	movs	r3, #2
 80075ce:	e04a      	b.n	8007666 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a1e      	ldr	r2, [pc, #120]	@ (8007670 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d108      	bne.n	800760c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007600:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	4313      	orrs	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a11      	ldr	r2, [pc, #68]	@ (8007670 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d004      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007638:	d10c      	bne.n	8007654 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007640:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	4313      	orrs	r3, r2
 800764a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	bc80      	pop	{r7}
 800766e:	4770      	bx	lr
 8007670:	40012c00 	.word	0x40012c00

08007674 <LL_RCC_GetUSARTClockSource>:
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800767c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007680:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	401a      	ands	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	041b      	lsls	r3, r3, #16
 800768c:	4313      	orrs	r3, r2
}
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	bc80      	pop	{r7}
 8007696:	4770      	bx	lr

08007698 <LL_RCC_GetLPUARTClockSource>:
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80076a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4013      	ands	r3, r2
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bc80      	pop	{r7}
 80076b4:	4770      	bx	lr

080076b6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b082      	sub	sp, #8
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e042      	b.n	800774e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d106      	bne.n	80076e0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7fb fc5c 	bl	8002f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2224      	movs	r2, #36	@ 0x24
 80076e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0201 	bic.w	r2, r2, #1
 80076f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fc3b 	bl	8007f74 <UART_SetConfig>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b01      	cmp	r3, #1
 8007702:	d101      	bne.n	8007708 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e022      	b.n	800774e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fea3 	bl	800845c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007724:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689a      	ldr	r2, [r3, #8]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007734:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f042 0201 	orr.w	r2, r2, #1
 8007744:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 ff29 	bl	800859e <UART_CheckIdleState>
 800774c:	4603      	mov	r3, r0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08a      	sub	sp, #40	@ 0x28
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	4613      	mov	r3, r2
 8007764:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800776c:	2b20      	cmp	r3, #32
 800776e:	d137      	bne.n	80077e0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <HAL_UART_Receive_IT+0x24>
 8007776:	88fb      	ldrh	r3, [r7, #6]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e030      	b.n	80077e2 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a18      	ldr	r2, [pc, #96]	@ (80077ec <HAL_UART_Receive_IT+0x94>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d01f      	beq.n	80077d0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d018      	beq.n	80077d0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	e853 3f00 	ldrex	r3, [r3]
 80077aa:	613b      	str	r3, [r7, #16]
   return(result);
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80077b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077bc:	623b      	str	r3, [r7, #32]
 80077be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	69f9      	ldr	r1, [r7, #28]
 80077c2:	6a3a      	ldr	r2, [r7, #32]
 80077c4:	e841 2300 	strex	r3, r2, [r1]
 80077c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e6      	bne.n	800779e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80077d0:	88fb      	ldrh	r3, [r7, #6]
 80077d2:	461a      	mov	r2, r3
 80077d4:	68b9      	ldr	r1, [r7, #8]
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 fff8 	bl	80087cc <UART_Start_Receive_IT>
 80077dc:	4603      	mov	r3, r0
 80077de:	e000      	b.n	80077e2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80077e0:	2302      	movs	r3, #2
  }
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3728      	adds	r7, #40	@ 0x28
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	40008000 	.word	0x40008000

080077f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08a      	sub	sp, #40	@ 0x28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	4613      	mov	r3, r2
 80077fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007804:	2b20      	cmp	r3, #32
 8007806:	d167      	bne.n	80078d8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <HAL_UART_Transmit_DMA+0x24>
 800780e:	88fb      	ldrh	r3, [r7, #6]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e060      	b.n	80078da <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	88fa      	ldrh	r2, [r7, #6]
 8007822:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	88fa      	ldrh	r2, [r7, #6]
 800782a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2221      	movs	r2, #33	@ 0x21
 800783a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007842:	2b00      	cmp	r3, #0
 8007844:	d028      	beq.n	8007898 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800784a:	4a26      	ldr	r2, [pc, #152]	@ (80078e4 <HAL_UART_Transmit_DMA+0xf4>)
 800784c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007852:	4a25      	ldr	r2, [pc, #148]	@ (80078e8 <HAL_UART_Transmit_DMA+0xf8>)
 8007854:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800785a:	4a24      	ldr	r2, [pc, #144]	@ (80078ec <HAL_UART_Transmit_DMA+0xfc>)
 800785c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007862:	2200      	movs	r2, #0
 8007864:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800786e:	4619      	mov	r1, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3328      	adds	r3, #40	@ 0x28
 8007876:	461a      	mov	r2, r3
 8007878:	88fb      	ldrh	r3, [r7, #6]
 800787a:	f7fd f8ff 	bl	8004a7c <HAL_DMA_Start_IT>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d009      	beq.n	8007898 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2210      	movs	r2, #16
 8007888:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2220      	movs	r2, #32
 8007890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e020      	b.n	80078da <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2240      	movs	r2, #64	@ 0x40
 800789e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3308      	adds	r3, #8
 80078a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	613b      	str	r3, [r7, #16]
   return(result);
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3308      	adds	r3, #8
 80078be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078c0:	623a      	str	r2, [r7, #32]
 80078c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	69f9      	ldr	r1, [r7, #28]
 80078c6:	6a3a      	ldr	r2, [r7, #32]
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e5      	bne.n	80078a0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	e000      	b.n	80078da <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80078d8:	2302      	movs	r3, #2
  }
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3728      	adds	r7, #40	@ 0x28
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	08008b57 	.word	0x08008b57
 80078e8:	08008bf1 	.word	0x08008bf1
 80078ec:	08008c0d 	.word	0x08008c0d

080078f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b0ba      	sub	sp, #232	@ 0xe8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007916:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800791a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800791e:	4013      	ands	r3, r2
 8007920:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007924:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007928:	2b00      	cmp	r3, #0
 800792a:	d11b      	bne.n	8007964 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800792c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007930:	f003 0320 	and.w	r3, r3, #32
 8007934:	2b00      	cmp	r3, #0
 8007936:	d015      	beq.n	8007964 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	d105      	bne.n	8007950 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d009      	beq.n	8007964 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 82e3 	beq.w	8007f20 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	4798      	blx	r3
      }
      return;
 8007962:	e2dd      	b.n	8007f20 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 8123 	beq.w	8007bb4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800796e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007972:	4b8d      	ldr	r3, [pc, #564]	@ (8007ba8 <HAL_UART_IRQHandler+0x2b8>)
 8007974:	4013      	ands	r3, r2
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800797a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800797e:	4b8b      	ldr	r3, [pc, #556]	@ (8007bac <HAL_UART_IRQHandler+0x2bc>)
 8007980:	4013      	ands	r3, r2
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 8116 	beq.w	8007bb4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	2b00      	cmp	r3, #0
 8007992:	d011      	beq.n	80079b8 <HAL_UART_IRQHandler+0xc8>
 8007994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00b      	beq.n	80079b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2201      	movs	r2, #1
 80079a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ae:	f043 0201 	orr.w	r2, r3, #1
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d011      	beq.n	80079e8 <HAL_UART_IRQHandler+0xf8>
 80079c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00b      	beq.n	80079e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2202      	movs	r2, #2
 80079d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079de:	f043 0204 	orr.w	r2, r3, #4
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d011      	beq.n	8007a18 <HAL_UART_IRQHandler+0x128>
 80079f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00b      	beq.n	8007a18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2204      	movs	r2, #4
 8007a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a0e:	f043 0202 	orr.w	r2, r3, #2
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a1c:	f003 0308 	and.w	r3, r3, #8
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d017      	beq.n	8007a54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a28:	f003 0320 	and.w	r3, r3, #32
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d105      	bne.n	8007a3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007a34:	4b5c      	ldr	r3, [pc, #368]	@ (8007ba8 <HAL_UART_IRQHandler+0x2b8>)
 8007a36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00b      	beq.n	8007a54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2208      	movs	r2, #8
 8007a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a4a:	f043 0208 	orr.w	r2, r3, #8
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d012      	beq.n	8007a86 <HAL_UART_IRQHandler+0x196>
 8007a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00c      	beq.n	8007a86 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a7c:	f043 0220 	orr.w	r2, r3, #32
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 8249 	beq.w	8007f24 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a96:	f003 0320 	and.w	r3, r3, #32
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d013      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d105      	bne.n	8007ab6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d007      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007acc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ada:	2b40      	cmp	r3, #64	@ 0x40
 8007adc:	d005      	beq.n	8007aea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ae2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d054      	beq.n	8007b94 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 ffce 	bl	8008a8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007afa:	2b40      	cmp	r3, #64	@ 0x40
 8007afc:	d146      	bne.n	8007b8c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3308      	adds	r3, #8
 8007b04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3308      	adds	r3, #8
 8007b26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b3a:	e841 2300 	strex	r3, r2, [r1]
 8007b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1d9      	bne.n	8007afe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d017      	beq.n	8007b84 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b5a:	4a15      	ldr	r2, [pc, #84]	@ (8007bb0 <HAL_UART_IRQHandler+0x2c0>)
 8007b5c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fd f865 	bl	8004c34 <HAL_DMA_Abort_IT>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d019      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007b7e:	4610      	mov	r0, r2
 8007b80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b82:	e00f      	b.n	8007ba4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f9e0 	bl	8007f4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b8a:	e00b      	b.n	8007ba4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f9dc 	bl	8007f4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b92:	e007      	b.n	8007ba4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f9d8 	bl	8007f4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007ba2:	e1bf      	b.n	8007f24 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba4:	bf00      	nop
    return;
 8007ba6:	e1bd      	b.n	8007f24 <HAL_UART_IRQHandler+0x634>
 8007ba8:	10000001 	.word	0x10000001
 8007bac:	04000120 	.word	0x04000120
 8007bb0:	08008c8d 	.word	0x08008c8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	f040 8153 	bne.w	8007e64 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bc2:	f003 0310 	and.w	r3, r3, #16
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 814c 	beq.w	8007e64 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bd0:	f003 0310 	and.w	r3, r3, #16
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 8145 	beq.w	8007e64 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2210      	movs	r2, #16
 8007be0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bec:	2b40      	cmp	r3, #64	@ 0x40
 8007bee:	f040 80bb 	bne.w	8007d68 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 818f 	beq.w	8007f28 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c14:	429a      	cmp	r2, r3
 8007c16:	f080 8187 	bcs.w	8007f28 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0320 	and.w	r3, r3, #32
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f040 8087 	bne.w	8007d46 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c44:	e853 3f00 	ldrex	r3, [r3]
 8007c48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007c4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c72:	e841 2300 	strex	r3, r2, [r1]
 8007c76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1da      	bne.n	8007c38 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3308      	adds	r3, #8
 8007c88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c8c:	e853 3f00 	ldrex	r3, [r3]
 8007c90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c94:	f023 0301 	bic.w	r3, r3, #1
 8007c98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007ca6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007caa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007cae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007cb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e1      	bne.n	8007c82 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007cce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3308      	adds	r3, #8
 8007cde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ce2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ce8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007cf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e3      	bne.n	8007cbe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d14:	f023 0310 	bic.w	r3, r3, #16
 8007d18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	461a      	mov	r2, r3
 8007d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e4      	bne.n	8007d04 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fc ff19 	bl	8004b78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2202      	movs	r2, #2
 8007d4a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f8fb 	bl	8007f5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d66:	e0df      	b.n	8007f28 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 80d1 	beq.w	8007f2c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007d8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f000 80cc 	beq.w	8007f2c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007da8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	461a      	mov	r2, r3
 8007db2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007db6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007db8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e4      	bne.n	8007d94 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3308      	adds	r3, #8
 8007dd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007de0:	f023 0301 	bic.w	r3, r3, #1
 8007de4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3308      	adds	r3, #8
 8007dee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007df2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007df8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e1      	bne.n	8007dca <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	e853 3f00 	ldrex	r3, [r3]
 8007e26:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 0310 	bic.w	r3, r3, #16
 8007e2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	461a      	mov	r2, r3
 8007e38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e3c:	61fb      	str	r3, [r7, #28]
 8007e3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e40:	69b9      	ldr	r1, [r7, #24]
 8007e42:	69fa      	ldr	r2, [r7, #28]
 8007e44:	e841 2300 	strex	r3, r2, [r1]
 8007e48:	617b      	str	r3, [r7, #20]
   return(result);
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1e4      	bne.n	8007e1a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2202      	movs	r2, #2
 8007e54:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f87d 	bl	8007f5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e62:	e063      	b.n	8007f2c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00e      	beq.n	8007e8e <HAL_UART_IRQHandler+0x59e>
 8007e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d008      	beq.n	8007e8e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007e84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f001 fc5e 	bl	8009748 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e8c:	e051      	b.n	8007f32 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d014      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d105      	bne.n	8007eb2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007eaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d008      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d03a      	beq.n	8007f30 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	4798      	blx	r3
    }
    return;
 8007ec2:	e035      	b.n	8007f30 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d009      	beq.n	8007ee4 <HAL_UART_IRQHandler+0x5f4>
 8007ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 feeb 	bl	8008cb8 <UART_EndTransmit_IT>
    return;
 8007ee2:	e026      	b.n	8007f32 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ee8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d009      	beq.n	8007f04 <HAL_UART_IRQHandler+0x614>
 8007ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ef4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 fc35 	bl	800976c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f02:	e016      	b.n	8007f32 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d010      	beq.n	8007f32 <HAL_UART_IRQHandler+0x642>
 8007f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	da0c      	bge.n	8007f32 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 fc1e 	bl	800975a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f1e:	e008      	b.n	8007f32 <HAL_UART_IRQHandler+0x642>
      return;
 8007f20:	bf00      	nop
 8007f22:	e006      	b.n	8007f32 <HAL_UART_IRQHandler+0x642>
    return;
 8007f24:	bf00      	nop
 8007f26:	e004      	b.n	8007f32 <HAL_UART_IRQHandler+0x642>
      return;
 8007f28:	bf00      	nop
 8007f2a:	e002      	b.n	8007f32 <HAL_UART_IRQHandler+0x642>
      return;
 8007f2c:	bf00      	nop
 8007f2e:	e000      	b.n	8007f32 <HAL_UART_IRQHandler+0x642>
    return;
 8007f30:	bf00      	nop
  }
}
 8007f32:	37e8      	adds	r7, #232	@ 0xe8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bc80      	pop	{r7}
 8007f48:	4770      	bx	lr

08007f4a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f52:	bf00      	nop
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bc80      	pop	{r7}
 8007f5a:	4770      	bx	lr

08007f5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	460b      	mov	r3, r1
 8007f66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bc80      	pop	{r7}
 8007f70:	4770      	bx	lr
	...

08007f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f78:	b08c      	sub	sp, #48	@ 0x30
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	431a      	orrs	r2, r3
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	4b94      	ldr	r3, [pc, #592]	@ (80081f4 <UART_SetConfig+0x280>)
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	6812      	ldr	r2, [r2, #0]
 8007faa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fac:	430b      	orrs	r3, r1
 8007fae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	68da      	ldr	r2, [r3, #12]
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a89      	ldr	r2, [pc, #548]	@ (80081f8 <UART_SetConfig+0x284>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d004      	beq.n	8007fe0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007fea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	6812      	ldr	r2, [r2, #0]
 8007ff2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ff4:	430b      	orrs	r3, r1
 8007ff6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffe:	f023 010f 	bic.w	r1, r3, #15
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a7a      	ldr	r2, [pc, #488]	@ (80081fc <UART_SetConfig+0x288>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d127      	bne.n	8008068 <UART_SetConfig+0xf4>
 8008018:	2003      	movs	r0, #3
 800801a:	f7ff fb2b 	bl	8007674 <LL_RCC_GetUSARTClockSource>
 800801e:	4603      	mov	r3, r0
 8008020:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8008024:	2b03      	cmp	r3, #3
 8008026:	d81b      	bhi.n	8008060 <UART_SetConfig+0xec>
 8008028:	a201      	add	r2, pc, #4	@ (adr r2, 8008030 <UART_SetConfig+0xbc>)
 800802a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802e:	bf00      	nop
 8008030:	08008041 	.word	0x08008041
 8008034:	08008051 	.word	0x08008051
 8008038:	08008049 	.word	0x08008049
 800803c:	08008059 	.word	0x08008059
 8008040:	2301      	movs	r3, #1
 8008042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008046:	e080      	b.n	800814a <UART_SetConfig+0x1d6>
 8008048:	2302      	movs	r3, #2
 800804a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800804e:	e07c      	b.n	800814a <UART_SetConfig+0x1d6>
 8008050:	2304      	movs	r3, #4
 8008052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008056:	e078      	b.n	800814a <UART_SetConfig+0x1d6>
 8008058:	2308      	movs	r3, #8
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800805e:	e074      	b.n	800814a <UART_SetConfig+0x1d6>
 8008060:	2310      	movs	r3, #16
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008066:	e070      	b.n	800814a <UART_SetConfig+0x1d6>
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a64      	ldr	r2, [pc, #400]	@ (8008200 <UART_SetConfig+0x28c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d138      	bne.n	80080e4 <UART_SetConfig+0x170>
 8008072:	200c      	movs	r0, #12
 8008074:	f7ff fafe 	bl	8007674 <LL_RCC_GetUSARTClockSource>
 8008078:	4603      	mov	r3, r0
 800807a:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800807e:	2b0c      	cmp	r3, #12
 8008080:	d82c      	bhi.n	80080dc <UART_SetConfig+0x168>
 8008082:	a201      	add	r2, pc, #4	@ (adr r2, 8008088 <UART_SetConfig+0x114>)
 8008084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008088:	080080bd 	.word	0x080080bd
 800808c:	080080dd 	.word	0x080080dd
 8008090:	080080dd 	.word	0x080080dd
 8008094:	080080dd 	.word	0x080080dd
 8008098:	080080cd 	.word	0x080080cd
 800809c:	080080dd 	.word	0x080080dd
 80080a0:	080080dd 	.word	0x080080dd
 80080a4:	080080dd 	.word	0x080080dd
 80080a8:	080080c5 	.word	0x080080c5
 80080ac:	080080dd 	.word	0x080080dd
 80080b0:	080080dd 	.word	0x080080dd
 80080b4:	080080dd 	.word	0x080080dd
 80080b8:	080080d5 	.word	0x080080d5
 80080bc:	2300      	movs	r3, #0
 80080be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080c2:	e042      	b.n	800814a <UART_SetConfig+0x1d6>
 80080c4:	2302      	movs	r3, #2
 80080c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ca:	e03e      	b.n	800814a <UART_SetConfig+0x1d6>
 80080cc:	2304      	movs	r3, #4
 80080ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080d2:	e03a      	b.n	800814a <UART_SetConfig+0x1d6>
 80080d4:	2308      	movs	r3, #8
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080da:	e036      	b.n	800814a <UART_SetConfig+0x1d6>
 80080dc:	2310      	movs	r3, #16
 80080de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080e2:	e032      	b.n	800814a <UART_SetConfig+0x1d6>
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a43      	ldr	r2, [pc, #268]	@ (80081f8 <UART_SetConfig+0x284>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d12a      	bne.n	8008144 <UART_SetConfig+0x1d0>
 80080ee:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80080f2:	f7ff fad1 	bl	8007698 <LL_RCC_GetLPUARTClockSource>
 80080f6:	4603      	mov	r3, r0
 80080f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080fc:	d01a      	beq.n	8008134 <UART_SetConfig+0x1c0>
 80080fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008102:	d81b      	bhi.n	800813c <UART_SetConfig+0x1c8>
 8008104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008108:	d00c      	beq.n	8008124 <UART_SetConfig+0x1b0>
 800810a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800810e:	d815      	bhi.n	800813c <UART_SetConfig+0x1c8>
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <UART_SetConfig+0x1a8>
 8008114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008118:	d008      	beq.n	800812c <UART_SetConfig+0x1b8>
 800811a:	e00f      	b.n	800813c <UART_SetConfig+0x1c8>
 800811c:	2300      	movs	r3, #0
 800811e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008122:	e012      	b.n	800814a <UART_SetConfig+0x1d6>
 8008124:	2302      	movs	r3, #2
 8008126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800812a:	e00e      	b.n	800814a <UART_SetConfig+0x1d6>
 800812c:	2304      	movs	r3, #4
 800812e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008132:	e00a      	b.n	800814a <UART_SetConfig+0x1d6>
 8008134:	2308      	movs	r3, #8
 8008136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800813a:	e006      	b.n	800814a <UART_SetConfig+0x1d6>
 800813c:	2310      	movs	r3, #16
 800813e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008142:	e002      	b.n	800814a <UART_SetConfig+0x1d6>
 8008144:	2310      	movs	r3, #16
 8008146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a2a      	ldr	r2, [pc, #168]	@ (80081f8 <UART_SetConfig+0x284>)
 8008150:	4293      	cmp	r3, r2
 8008152:	f040 80a4 	bne.w	800829e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008156:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800815a:	2b08      	cmp	r3, #8
 800815c:	d823      	bhi.n	80081a6 <UART_SetConfig+0x232>
 800815e:	a201      	add	r2, pc, #4	@ (adr r2, 8008164 <UART_SetConfig+0x1f0>)
 8008160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008164:	08008189 	.word	0x08008189
 8008168:	080081a7 	.word	0x080081a7
 800816c:	08008191 	.word	0x08008191
 8008170:	080081a7 	.word	0x080081a7
 8008174:	08008197 	.word	0x08008197
 8008178:	080081a7 	.word	0x080081a7
 800817c:	080081a7 	.word	0x080081a7
 8008180:	080081a7 	.word	0x080081a7
 8008184:	0800819f 	.word	0x0800819f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008188:	f7fd fd3e 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 800818c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800818e:	e010      	b.n	80081b2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008190:	4b1c      	ldr	r3, [pc, #112]	@ (8008204 <UART_SetConfig+0x290>)
 8008192:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008194:	e00d      	b.n	80081b2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008196:	f7fd fc83 	bl	8005aa0 <HAL_RCC_GetSysClockFreq>
 800819a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800819c:	e009      	b.n	80081b2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800819e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081a4:	e005      	b.n	80081b2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80081b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8137 	beq.w	8008428 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081be:	4a12      	ldr	r2, [pc, #72]	@ (8008208 <UART_SetConfig+0x294>)
 80081c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081c4:	461a      	mov	r2, r3
 80081c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	4613      	mov	r3, r2
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	4413      	add	r3, r2
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d305      	bcc.n	80081ea <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d910      	bls.n	800820c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80081f0:	e11a      	b.n	8008428 <UART_SetConfig+0x4b4>
 80081f2:	bf00      	nop
 80081f4:	cfff69f3 	.word	0xcfff69f3
 80081f8:	40008000 	.word	0x40008000
 80081fc:	40013800 	.word	0x40013800
 8008200:	40004400 	.word	0x40004400
 8008204:	00f42400 	.word	0x00f42400
 8008208:	0801d824 	.word	0x0801d824
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800820c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820e:	2200      	movs	r2, #0
 8008210:	60bb      	str	r3, [r7, #8]
 8008212:	60fa      	str	r2, [r7, #12]
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008218:	4a8e      	ldr	r2, [pc, #568]	@ (8008454 <UART_SetConfig+0x4e0>)
 800821a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800821e:	b29b      	uxth	r3, r3
 8008220:	2200      	movs	r2, #0
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	607a      	str	r2, [r7, #4]
 8008226:	e9d7 2300 	ldrd	r2, r3, [r7]
 800822a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800822e:	f7f8 ff51 	bl	80010d4 <__aeabi_uldivmod>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	4610      	mov	r0, r2
 8008238:	4619      	mov	r1, r3
 800823a:	f04f 0200 	mov.w	r2, #0
 800823e:	f04f 0300 	mov.w	r3, #0
 8008242:	020b      	lsls	r3, r1, #8
 8008244:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008248:	0202      	lsls	r2, r0, #8
 800824a:	6979      	ldr	r1, [r7, #20]
 800824c:	6849      	ldr	r1, [r1, #4]
 800824e:	0849      	lsrs	r1, r1, #1
 8008250:	2000      	movs	r0, #0
 8008252:	460c      	mov	r4, r1
 8008254:	4605      	mov	r5, r0
 8008256:	eb12 0804 	adds.w	r8, r2, r4
 800825a:	eb43 0905 	adc.w	r9, r3, r5
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	469a      	mov	sl, r3
 8008266:	4693      	mov	fp, r2
 8008268:	4652      	mov	r2, sl
 800826a:	465b      	mov	r3, fp
 800826c:	4640      	mov	r0, r8
 800826e:	4649      	mov	r1, r9
 8008270:	f7f8 ff30 	bl	80010d4 <__aeabi_uldivmod>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4613      	mov	r3, r2
 800827a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008282:	d308      	bcc.n	8008296 <UART_SetConfig+0x322>
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800828a:	d204      	bcs.n	8008296 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6a3a      	ldr	r2, [r7, #32]
 8008292:	60da      	str	r2, [r3, #12]
 8008294:	e0c8      	b.n	8008428 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800829c:	e0c4      	b.n	8008428 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	69db      	ldr	r3, [r3, #28]
 80082a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082a6:	d167      	bne.n	8008378 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80082a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80082ac:	2b08      	cmp	r3, #8
 80082ae:	d828      	bhi.n	8008302 <UART_SetConfig+0x38e>
 80082b0:	a201      	add	r2, pc, #4	@ (adr r2, 80082b8 <UART_SetConfig+0x344>)
 80082b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b6:	bf00      	nop
 80082b8:	080082dd 	.word	0x080082dd
 80082bc:	080082e5 	.word	0x080082e5
 80082c0:	080082ed 	.word	0x080082ed
 80082c4:	08008303 	.word	0x08008303
 80082c8:	080082f3 	.word	0x080082f3
 80082cc:	08008303 	.word	0x08008303
 80082d0:	08008303 	.word	0x08008303
 80082d4:	08008303 	.word	0x08008303
 80082d8:	080082fb 	.word	0x080082fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082dc:	f7fd fc94 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 80082e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082e2:	e014      	b.n	800830e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082e4:	f7fd fca2 	bl	8005c2c <HAL_RCC_GetPCLK2Freq>
 80082e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082ea:	e010      	b.n	800830e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082ec:	4b5a      	ldr	r3, [pc, #360]	@ (8008458 <UART_SetConfig+0x4e4>)
 80082ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082f0:	e00d      	b.n	800830e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082f2:	f7fd fbd5 	bl	8005aa0 <HAL_RCC_GetSysClockFreq>
 80082f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082f8:	e009      	b.n	800830e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008300:	e005      	b.n	800830e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800830c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800830e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 8089 	beq.w	8008428 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800831a:	4a4e      	ldr	r2, [pc, #312]	@ (8008454 <UART_SetConfig+0x4e0>)
 800831c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008320:	461a      	mov	r2, r3
 8008322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008324:	fbb3 f3f2 	udiv	r3, r3, r2
 8008328:	005a      	lsls	r2, r3, #1
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	085b      	lsrs	r3, r3, #1
 8008330:	441a      	add	r2, r3
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	fbb2 f3f3 	udiv	r3, r2, r3
 800833a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	2b0f      	cmp	r3, #15
 8008340:	d916      	bls.n	8008370 <UART_SetConfig+0x3fc>
 8008342:	6a3b      	ldr	r3, [r7, #32]
 8008344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008348:	d212      	bcs.n	8008370 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	b29b      	uxth	r3, r3
 800834e:	f023 030f 	bic.w	r3, r3, #15
 8008352:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	085b      	lsrs	r3, r3, #1
 8008358:	b29b      	uxth	r3, r3
 800835a:	f003 0307 	and.w	r3, r3, #7
 800835e:	b29a      	uxth	r2, r3
 8008360:	8bfb      	ldrh	r3, [r7, #30]
 8008362:	4313      	orrs	r3, r2
 8008364:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	8bfa      	ldrh	r2, [r7, #30]
 800836c:	60da      	str	r2, [r3, #12]
 800836e:	e05b      	b.n	8008428 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008376:	e057      	b.n	8008428 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008378:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800837c:	2b08      	cmp	r3, #8
 800837e:	d828      	bhi.n	80083d2 <UART_SetConfig+0x45e>
 8008380:	a201      	add	r2, pc, #4	@ (adr r2, 8008388 <UART_SetConfig+0x414>)
 8008382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008386:	bf00      	nop
 8008388:	080083ad 	.word	0x080083ad
 800838c:	080083b5 	.word	0x080083b5
 8008390:	080083bd 	.word	0x080083bd
 8008394:	080083d3 	.word	0x080083d3
 8008398:	080083c3 	.word	0x080083c3
 800839c:	080083d3 	.word	0x080083d3
 80083a0:	080083d3 	.word	0x080083d3
 80083a4:	080083d3 	.word	0x080083d3
 80083a8:	080083cb 	.word	0x080083cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083ac:	f7fd fc2c 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 80083b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083b2:	e014      	b.n	80083de <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083b4:	f7fd fc3a 	bl	8005c2c <HAL_RCC_GetPCLK2Freq>
 80083b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083ba:	e010      	b.n	80083de <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083bc:	4b26      	ldr	r3, [pc, #152]	@ (8008458 <UART_SetConfig+0x4e4>)
 80083be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083c0:	e00d      	b.n	80083de <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083c2:	f7fd fb6d 	bl	8005aa0 <HAL_RCC_GetSysClockFreq>
 80083c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083c8:	e009      	b.n	80083de <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083d0:	e005      	b.n	80083de <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80083d2:	2300      	movs	r3, #0
 80083d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80083dc:	bf00      	nop
    }

    if (pclk != 0U)
 80083de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d021      	beq.n	8008428 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e8:	4a1a      	ldr	r2, [pc, #104]	@ (8008454 <UART_SetConfig+0x4e0>)
 80083ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083ee:	461a      	mov	r2, r3
 80083f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	085b      	lsrs	r3, r3, #1
 80083fc:	441a      	add	r2, r3
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	fbb2 f3f3 	udiv	r3, r2, r3
 8008406:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	2b0f      	cmp	r3, #15
 800840c:	d909      	bls.n	8008422 <UART_SetConfig+0x4ae>
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008414:	d205      	bcs.n	8008422 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	b29a      	uxth	r2, r3
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	60da      	str	r2, [r3, #12]
 8008420:	e002      	b.n	8008428 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	2201      	movs	r2, #1
 800842c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2201      	movs	r2, #1
 8008434:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2200      	movs	r2, #0
 800843c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2200      	movs	r2, #0
 8008442:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008444:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008448:	4618      	mov	r0, r3
 800844a:	3730      	adds	r7, #48	@ 0x30
 800844c:	46bd      	mov	sp, r7
 800844e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008452:	bf00      	nop
 8008454:	0801d824 	.word	0x0801d824
 8008458:	00f42400 	.word	0x00f42400

0800845c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00a      	beq.n	8008486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ac:	f003 0304 	and.w	r3, r3, #4
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00a      	beq.n	80084ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ce:	f003 0308 	and.w	r3, r3, #8
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f0:	f003 0310 	and.w	r3, r3, #16
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00a      	beq.n	800850e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008512:	f003 0320 	and.w	r3, r3, #32
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	430a      	orrs	r2, r1
 800852e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008538:	2b00      	cmp	r3, #0
 800853a:	d01a      	beq.n	8008572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800855a:	d10a      	bne.n	8008572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	605a      	str	r2, [r3, #4]
  }
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	bc80      	pop	{r7}
 800859c:	4770      	bx	lr

0800859e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b086      	sub	sp, #24
 80085a2:	af02      	add	r7, sp, #8
 80085a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085ae:	f7fa f89b 	bl	80026e8 <HAL_GetTick>
 80085b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0308 	and.w	r3, r3, #8
 80085be:	2b08      	cmp	r3, #8
 80085c0:	d10e      	bne.n	80085e0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f832 	bl	800863a <UART_WaitOnFlagUntilTimeout>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e028      	b.n	8008632 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0304 	and.w	r3, r3, #4
 80085ea:	2b04      	cmp	r3, #4
 80085ec:	d10e      	bne.n	800860c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f81c 	bl	800863a <UART_WaitOnFlagUntilTimeout>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e012      	b.n	8008632 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2220      	movs	r2, #32
 8008610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2220      	movs	r2, #32
 8008618:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b09c      	sub	sp, #112	@ 0x70
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	603b      	str	r3, [r7, #0]
 8008646:	4613      	mov	r3, r2
 8008648:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800864a:	e0a9      	b.n	80087a0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800864c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800864e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008652:	f000 80a5 	beq.w	80087a0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008656:	f7fa f847 	bl	80026e8 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008662:	429a      	cmp	r2, r3
 8008664:	d302      	bcc.n	800866c <UART_WaitOnFlagUntilTimeout+0x32>
 8008666:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008668:	2b00      	cmp	r3, #0
 800866a:	d140      	bne.n	80086ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008674:	e853 3f00 	ldrex	r3, [r3]
 8008678:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800867a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800867c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008680:	667b      	str	r3, [r7, #100]	@ 0x64
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	461a      	mov	r2, r3
 8008688:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800868a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800868c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008690:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008692:	e841 2300 	strex	r3, r2, [r1]
 8008696:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1e6      	bne.n	800866c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3308      	adds	r3, #8
 80086a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b0:	f023 0301 	bic.w	r3, r3, #1
 80086b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3308      	adds	r3, #8
 80086bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80086be:	64ba      	str	r2, [r7, #72]	@ 0x48
 80086c0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80086c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80086cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e5      	bne.n	800869e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2220      	movs	r2, #32
 80086d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2220      	movs	r2, #32
 80086de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e069      	b.n	80087c2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0304 	and.w	r3, r3, #4
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d051      	beq.n	80087a0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	69db      	ldr	r3, [r3, #28]
 8008702:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008706:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800870a:	d149      	bne.n	80087a0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008714:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800871e:	e853 3f00 	ldrex	r3, [r3]
 8008722:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008726:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800872a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	461a      	mov	r2, r3
 8008732:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008734:	637b      	str	r3, [r7, #52]	@ 0x34
 8008736:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008738:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800873a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800873c:	e841 2300 	strex	r3, r2, [r1]
 8008740:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1e6      	bne.n	8008716 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3308      	adds	r3, #8
 800874e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	e853 3f00 	ldrex	r3, [r3]
 8008756:	613b      	str	r3, [r7, #16]
   return(result);
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	f023 0301 	bic.w	r3, r3, #1
 800875e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3308      	adds	r3, #8
 8008766:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008768:	623a      	str	r2, [r7, #32]
 800876a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876c:	69f9      	ldr	r1, [r7, #28]
 800876e:	6a3a      	ldr	r2, [r7, #32]
 8008770:	e841 2300 	strex	r3, r2, [r1]
 8008774:	61bb      	str	r3, [r7, #24]
   return(result);
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1e5      	bne.n	8008748 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2220      	movs	r2, #32
 8008780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2220      	movs	r2, #32
 8008788:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2220      	movs	r2, #32
 8008790:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e010      	b.n	80087c2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	69da      	ldr	r2, [r3, #28]
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	4013      	ands	r3, r2
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	bf0c      	ite	eq
 80087b0:	2301      	moveq	r3, #1
 80087b2:	2300      	movne	r3, #0
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	461a      	mov	r2, r3
 80087b8:	79fb      	ldrb	r3, [r7, #7]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	f43f af46 	beq.w	800864c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3770      	adds	r7, #112	@ 0x70
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b0a3      	sub	sp, #140	@ 0x8c
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	4613      	mov	r3, r2
 80087d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	88fa      	ldrh	r2, [r7, #6]
 80087e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	88fa      	ldrh	r2, [r7, #6]
 80087ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087fe:	d10e      	bne.n	800881e <UART_Start_Receive_IT+0x52>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d105      	bne.n	8008814 <UART_Start_Receive_IT+0x48>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800880e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008812:	e02d      	b.n	8008870 <UART_Start_Receive_IT+0xa4>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	22ff      	movs	r2, #255	@ 0xff
 8008818:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800881c:	e028      	b.n	8008870 <UART_Start_Receive_IT+0xa4>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10d      	bne.n	8008842 <UART_Start_Receive_IT+0x76>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d104      	bne.n	8008838 <UART_Start_Receive_IT+0x6c>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	22ff      	movs	r2, #255	@ 0xff
 8008832:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008836:	e01b      	b.n	8008870 <UART_Start_Receive_IT+0xa4>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	227f      	movs	r2, #127	@ 0x7f
 800883c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008840:	e016      	b.n	8008870 <UART_Start_Receive_IT+0xa4>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800884a:	d10d      	bne.n	8008868 <UART_Start_Receive_IT+0x9c>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d104      	bne.n	800885e <UART_Start_Receive_IT+0x92>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	227f      	movs	r2, #127	@ 0x7f
 8008858:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800885c:	e008      	b.n	8008870 <UART_Start_Receive_IT+0xa4>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	223f      	movs	r2, #63	@ 0x3f
 8008862:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008866:	e003      	b.n	8008870 <UART_Start_Receive_IT+0xa4>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2222      	movs	r2, #34	@ 0x22
 800887c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3308      	adds	r3, #8
 8008886:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008888:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800888a:	e853 3f00 	ldrex	r3, [r3]
 800888e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008890:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008892:	f043 0301 	orr.w	r3, r3, #1
 8008896:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3308      	adds	r3, #8
 80088a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80088a4:	673a      	str	r2, [r7, #112]	@ 0x70
 80088a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80088aa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80088ac:	e841 2300 	strex	r3, r2, [r1]
 80088b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80088b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1e3      	bne.n	8008880 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088c0:	d14f      	bne.n	8008962 <UART_Start_Receive_IT+0x196>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80088c8:	88fa      	ldrh	r2, [r7, #6]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d349      	bcc.n	8008962 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d6:	d107      	bne.n	80088e8 <UART_Start_Receive_IT+0x11c>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d103      	bne.n	80088e8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4a46      	ldr	r2, [pc, #280]	@ (80089fc <UART_Start_Receive_IT+0x230>)
 80088e4:	675a      	str	r2, [r3, #116]	@ 0x74
 80088e6:	e002      	b.n	80088ee <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	4a45      	ldr	r2, [pc, #276]	@ (8008a00 <UART_Start_Receive_IT+0x234>)
 80088ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d01a      	beq.n	800892c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088fe:	e853 3f00 	ldrex	r3, [r3]
 8008902:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800890a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008918:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800891a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800891e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008920:	e841 2300 	strex	r3, r2, [r1]
 8008924:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1e4      	bne.n	80088f6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3308      	adds	r3, #8
 8008932:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008936:	e853 3f00 	ldrex	r3, [r3]
 800893a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800893c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008942:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	3308      	adds	r3, #8
 800894a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800894c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800894e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008950:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008952:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008954:	e841 2300 	strex	r3, r2, [r1]
 8008958:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800895a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e5      	bne.n	800892c <UART_Start_Receive_IT+0x160>
 8008960:	e046      	b.n	80089f0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800896a:	d107      	bne.n	800897c <UART_Start_Receive_IT+0x1b0>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d103      	bne.n	800897c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4a23      	ldr	r2, [pc, #140]	@ (8008a04 <UART_Start_Receive_IT+0x238>)
 8008978:	675a      	str	r2, [r3, #116]	@ 0x74
 800897a:	e002      	b.n	8008982 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	4a22      	ldr	r2, [pc, #136]	@ (8008a08 <UART_Start_Receive_IT+0x23c>)
 8008980:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d019      	beq.n	80089be <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800899e:	677b      	str	r3, [r7, #116]	@ 0x74
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	461a      	mov	r2, r3
 80089a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089aa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80089ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80089b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e6      	bne.n	800898a <UART_Start_Receive_IT+0x1be>
 80089bc:	e018      	b.n	80089f0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	e853 3f00 	ldrex	r3, [r3]
 80089ca:	613b      	str	r3, [r7, #16]
   return(result);
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	f043 0320 	orr.w	r3, r3, #32
 80089d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	461a      	mov	r2, r3
 80089da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089dc:	623b      	str	r3, [r7, #32]
 80089de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e0:	69f9      	ldr	r1, [r7, #28]
 80089e2:	6a3a      	ldr	r2, [r7, #32]
 80089e4:	e841 2300 	strex	r3, r2, [r1]
 80089e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1e6      	bne.n	80089be <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	378c      	adds	r7, #140	@ 0x8c
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bc80      	pop	{r7}
 80089fa:	4770      	bx	lr
 80089fc:	080093e1 	.word	0x080093e1
 8008a00:	08009081 	.word	0x08009081
 8008a04:	08008ec9 	.word	0x08008ec9
 8008a08:	08008d11 	.word	0x08008d11

08008a0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b08f      	sub	sp, #60	@ 0x3c
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a34:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e6      	bne.n	8008a14 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3308      	adds	r3, #8
 8008a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a66:	61ba      	str	r2, [r7, #24]
 8008a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	6979      	ldr	r1, [r7, #20]
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	613b      	str	r3, [r7, #16]
   return(result);
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e5      	bne.n	8008a46 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008a82:	bf00      	nop
 8008a84:	373c      	adds	r7, #60	@ 0x3c
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr

08008a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b095      	sub	sp, #84	@ 0x54
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a9c:	e853 3f00 	ldrex	r3, [r3]
 8008aa0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008aa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ab2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ab4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ab8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008aba:	e841 2300 	strex	r3, r2, [r1]
 8008abe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1e6      	bne.n	8008a94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3308      	adds	r3, #8
 8008acc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	e853 3f00 	ldrex	r3, [r3]
 8008ad4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008adc:	f023 0301 	bic.w	r3, r3, #1
 8008ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008aec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008af0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1e3      	bne.n	8008ac6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d118      	bne.n	8008b38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	e853 3f00 	ldrex	r3, [r3]
 8008b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	f023 0310 	bic.w	r3, r3, #16
 8008b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	461a      	mov	r2, r3
 8008b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b24:	61bb      	str	r3, [r7, #24]
 8008b26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b28:	6979      	ldr	r1, [r7, #20]
 8008b2a:	69ba      	ldr	r2, [r7, #24]
 8008b2c:	e841 2300 	strex	r3, r2, [r1]
 8008b30:	613b      	str	r3, [r7, #16]
   return(result);
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1e6      	bne.n	8008b06 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008b4c:	bf00      	nop
 8008b4e:	3754      	adds	r7, #84	@ 0x54
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr

08008b56 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b090      	sub	sp, #64	@ 0x40
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b62:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0320 	and.w	r3, r3, #32
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d137      	bne.n	8008be2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b74:	2200      	movs	r2, #0
 8008b76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3308      	adds	r3, #8
 8008b80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b84:	e853 3f00 	ldrex	r3, [r3]
 8008b88:	623b      	str	r3, [r7, #32]
   return(result);
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3308      	adds	r3, #8
 8008b98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e5      	bne.n	8008b7a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bcc:	61fb      	str	r3, [r7, #28]
 8008bce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	69b9      	ldr	r1, [r7, #24]
 8008bd2:	69fa      	ldr	r2, [r7, #28]
 8008bd4:	e841 2300 	strex	r3, r2, [r1]
 8008bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e6      	bne.n	8008bae <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008be0:	e002      	b.n	8008be8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008be2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008be4:	f7fa fb32 	bl	800324c <HAL_UART_TxCpltCallback>
}
 8008be8:	bf00      	nop
 8008bea:	3740      	adds	r7, #64	@ 0x40
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bfc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7ff f99a 	bl	8007f38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c18:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c20:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c28:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c34:	2b80      	cmp	r3, #128	@ 0x80
 8008c36:	d109      	bne.n	8008c4c <UART_DMAError+0x40>
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	2b21      	cmp	r3, #33	@ 0x21
 8008c3c:	d106      	bne.n	8008c4c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008c46:	6978      	ldr	r0, [r7, #20]
 8008c48:	f7ff fee0 	bl	8008a0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c56:	2b40      	cmp	r3, #64	@ 0x40
 8008c58:	d109      	bne.n	8008c6e <UART_DMAError+0x62>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b22      	cmp	r3, #34	@ 0x22
 8008c5e:	d106      	bne.n	8008c6e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008c68:	6978      	ldr	r0, [r7, #20]
 8008c6a:	f7ff ff0f 	bl	8008a8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c74:	f043 0210 	orr.w	r2, r3, #16
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c7e:	6978      	ldr	r0, [r7, #20]
 8008c80:	f7ff f963 	bl	8007f4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c84:	bf00      	nop
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f7ff f94d 	bl	8007f4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cb0:	bf00      	nop
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b088      	sub	sp, #32
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cd4:	61fb      	str	r3, [r7, #28]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	61bb      	str	r3, [r7, #24]
 8008ce0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce2:	6979      	ldr	r1, [r7, #20]
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	e841 2300 	strex	r3, r2, [r1]
 8008cea:	613b      	str	r3, [r7, #16]
   return(result);
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1e6      	bne.n	8008cc0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7fa faa3 	bl	800324c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d06:	bf00      	nop
 8008d08:	3720      	adds	r7, #32
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
	...

08008d10 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b09c      	sub	sp, #112	@ 0x70
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008d1e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d28:	2b22      	cmp	r3, #34	@ 0x22
 8008d2a:	f040 80be 	bne.w	8008eaa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d34:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008d3c:	b2d9      	uxtb	r1, r3
 8008d3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d48:	400a      	ands	r2, r1
 8008d4a:	b2d2      	uxtb	r2, r2
 8008d4c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	3b01      	subs	r3, #1
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f040 80a1 	bne.w	8008eba <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d80:	e853 3f00 	ldrex	r3, [r3]
 8008d84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	461a      	mov	r2, r3
 8008d94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008d96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d98:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d9e:	e841 2300 	strex	r3, r2, [r1]
 8008da2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008da4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1e6      	bne.n	8008d78 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3308      	adds	r3, #8
 8008db0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db4:	e853 3f00 	ldrex	r3, [r3]
 8008db8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dbc:	f023 0301 	bic.w	r3, r3, #1
 8008dc0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3308      	adds	r3, #8
 8008dc8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008dca:	647a      	str	r2, [r7, #68]	@ 0x44
 8008dcc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008dd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e5      	bne.n	8008daa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a33      	ldr	r2, [pc, #204]	@ (8008ec4 <UART_RxISR_8BIT+0x1b4>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d01f      	beq.n	8008e3c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d018      	beq.n	8008e3c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e12:	e853 3f00 	ldrex	r3, [r3]
 8008e16:	623b      	str	r3, [r7, #32]
   return(result);
 8008e18:	6a3b      	ldr	r3, [r7, #32]
 8008e1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008e1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	461a      	mov	r2, r3
 8008e26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e28:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e30:	e841 2300 	strex	r3, r2, [r1]
 8008e34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1e6      	bne.n	8008e0a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d12e      	bne.n	8008ea2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	e853 3f00 	ldrex	r3, [r3]
 8008e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f023 0310 	bic.w	r3, r3, #16
 8008e5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	461a      	mov	r2, r3
 8008e66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e68:	61fb      	str	r3, [r7, #28]
 8008e6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6c:	69b9      	ldr	r1, [r7, #24]
 8008e6e:	69fa      	ldr	r2, [r7, #28]
 8008e70:	e841 2300 	strex	r3, r2, [r1]
 8008e74:	617b      	str	r3, [r7, #20]
   return(result);
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1e6      	bne.n	8008e4a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	69db      	ldr	r3, [r3, #28]
 8008e82:	f003 0310 	and.w	r3, r3, #16
 8008e86:	2b10      	cmp	r3, #16
 8008e88:	d103      	bne.n	8008e92 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2210      	movs	r2, #16
 8008e90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e98:	4619      	mov	r1, r3
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7ff f85e 	bl	8007f5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ea0:	e00b      	b.n	8008eba <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7fa f9e8 	bl	8003278 <HAL_UART_RxCpltCallback>
}
 8008ea8:	e007      	b.n	8008eba <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	699a      	ldr	r2, [r3, #24]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f042 0208 	orr.w	r2, r2, #8
 8008eb8:	619a      	str	r2, [r3, #24]
}
 8008eba:	bf00      	nop
 8008ebc:	3770      	adds	r7, #112	@ 0x70
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	40008000 	.word	0x40008000

08008ec8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b09c      	sub	sp, #112	@ 0x70
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008ed6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ee0:	2b22      	cmp	r3, #34	@ 0x22
 8008ee2:	f040 80be 	bne.w	8009062 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ef4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008ef6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008efa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008efe:	4013      	ands	r3, r2
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f04:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f0a:	1c9a      	adds	r2, r3, #2
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f040 80a1 	bne.w	8009072 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f38:	e853 3f00 	ldrex	r3, [r3]
 8008f3c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008f3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f44:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f50:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f52:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008f54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008f56:	e841 2300 	strex	r3, r2, [r1]
 8008f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008f5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1e6      	bne.n	8008f30 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3308      	adds	r3, #8
 8008f68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f6c:	e853 3f00 	ldrex	r3, [r3]
 8008f70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f74:	f023 0301 	bic.w	r3, r3, #1
 8008f78:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3308      	adds	r3, #8
 8008f80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008f82:	643a      	str	r2, [r7, #64]	@ 0x40
 8008f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f8a:	e841 2300 	strex	r3, r2, [r1]
 8008f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1e5      	bne.n	8008f62 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a33      	ldr	r2, [pc, #204]	@ (800907c <UART_RxISR_16BIT+0x1b4>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d01f      	beq.n	8008ff4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d018      	beq.n	8008ff4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	e853 3f00 	ldrex	r3, [r3]
 8008fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008fd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fe2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fe8:	e841 2300 	strex	r3, r2, [r1]
 8008fec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1e6      	bne.n	8008fc2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d12e      	bne.n	800905a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	e853 3f00 	ldrex	r3, [r3]
 800900e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	f023 0310 	bic.w	r3, r3, #16
 8009016:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	461a      	mov	r2, r3
 800901e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009020:	61bb      	str	r3, [r7, #24]
 8009022:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009024:	6979      	ldr	r1, [r7, #20]
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	e841 2300 	strex	r3, r2, [r1]
 800902c:	613b      	str	r3, [r7, #16]
   return(result);
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1e6      	bne.n	8009002 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	69db      	ldr	r3, [r3, #28]
 800903a:	f003 0310 	and.w	r3, r3, #16
 800903e:	2b10      	cmp	r3, #16
 8009040:	d103      	bne.n	800904a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2210      	movs	r2, #16
 8009048:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7fe ff82 	bl	8007f5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009058:	e00b      	b.n	8009072 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7fa f90c 	bl	8003278 <HAL_UART_RxCpltCallback>
}
 8009060:	e007      	b.n	8009072 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	699a      	ldr	r2, [r3, #24]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f042 0208 	orr.w	r2, r2, #8
 8009070:	619a      	str	r2, [r3, #24]
}
 8009072:	bf00      	nop
 8009074:	3770      	adds	r7, #112	@ 0x70
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	40008000 	.word	0x40008000

08009080 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b0ac      	sub	sp, #176	@ 0xb0
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800908e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090b6:	2b22      	cmp	r3, #34	@ 0x22
 80090b8:	f040 8182 	bne.w	80093c0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80090c2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090c6:	e125      	b.n	8009314 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ce:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80090d2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80090d6:	b2d9      	uxtb	r1, r3
 80090d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090e2:	400a      	ands	r2, r1
 80090e4:	b2d2      	uxtb	r2, r2
 80090e6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ec:	1c5a      	adds	r2, r3, #1
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	3b01      	subs	r3, #1
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	69db      	ldr	r3, [r3, #28]
 800910a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800910e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009112:	f003 0307 	and.w	r3, r3, #7
 8009116:	2b00      	cmp	r3, #0
 8009118:	d053      	beq.n	80091c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800911a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	2b00      	cmp	r3, #0
 8009124:	d011      	beq.n	800914a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009126:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800912a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00b      	beq.n	800914a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2201      	movs	r2, #1
 8009138:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009140:	f043 0201 	orr.w	r2, r3, #1
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800914a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800914e:	f003 0302 	and.w	r3, r3, #2
 8009152:	2b00      	cmp	r3, #0
 8009154:	d011      	beq.n	800917a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00b      	beq.n	800917a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2202      	movs	r2, #2
 8009168:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009170:	f043 0204 	orr.w	r2, r3, #4
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800917a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800917e:	f003 0304 	and.w	r3, r3, #4
 8009182:	2b00      	cmp	r3, #0
 8009184:	d011      	beq.n	80091aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00b      	beq.n	80091aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2204      	movs	r2, #4
 8009198:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091a0:	f043 0202 	orr.w	r2, r3, #2
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d006      	beq.n	80091c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7fe fec8 	bl	8007f4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f040 80a2 	bne.w	8009314 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80091d8:	e853 3f00 	ldrex	r3, [r3]
 80091dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80091de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	461a      	mov	r2, r3
 80091ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80091f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80091f4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80091f8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80091fa:	e841 2300 	strex	r3, r2, [r1]
 80091fe:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009200:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e4      	bne.n	80091d0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3308      	adds	r3, #8
 800920c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009216:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009218:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800921c:	f023 0301 	bic.w	r3, r3, #1
 8009220:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	3308      	adds	r3, #8
 800922a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800922e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009230:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009232:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009234:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009236:	e841 2300 	strex	r3, r2, [r1]
 800923a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800923c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1e1      	bne.n	8009206 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2220      	movs	r2, #32
 8009246:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a5f      	ldr	r2, [pc, #380]	@ (80093d8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d021      	beq.n	80092a4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800926a:	2b00      	cmp	r3, #0
 800926c:	d01a      	beq.n	80092a4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009276:	e853 3f00 	ldrex	r3, [r3]
 800927a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800927c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800927e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009290:	657b      	str	r3, [r7, #84]	@ 0x54
 8009292:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009296:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009298:	e841 2300 	strex	r3, r2, [r1]
 800929c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800929e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1e4      	bne.n	800926e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d130      	bne.n	800930e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ba:	e853 3f00 	ldrex	r3, [r3]
 80092be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80092c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c2:	f023 0310 	bic.w	r3, r3, #16
 80092c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	461a      	mov	r2, r3
 80092d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80092d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e4      	bne.n	80092b2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	69db      	ldr	r3, [r3, #28]
 80092ee:	f003 0310 	and.w	r3, r3, #16
 80092f2:	2b10      	cmp	r3, #16
 80092f4:	d103      	bne.n	80092fe <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2210      	movs	r2, #16
 80092fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009304:	4619      	mov	r1, r3
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7fe fe28 	bl	8007f5c <HAL_UARTEx_RxEventCallback>
 800930c:	e002      	b.n	8009314 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7f9 ffb2 	bl	8003278 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009314:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009318:	2b00      	cmp	r3, #0
 800931a:	d006      	beq.n	800932a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800931c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009320:	f003 0320 	and.w	r3, r3, #32
 8009324:	2b00      	cmp	r3, #0
 8009326:	f47f aecf 	bne.w	80090c8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009330:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009334:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009338:	2b00      	cmp	r3, #0
 800933a:	d049      	beq.n	80093d0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009342:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009346:	429a      	cmp	r2, r3
 8009348:	d242      	bcs.n	80093d0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3308      	adds	r3, #8
 8009350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	e853 3f00 	ldrex	r3, [r3]
 8009358:	61fb      	str	r3, [r7, #28]
   return(result);
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009360:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3308      	adds	r3, #8
 800936a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800936e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009370:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009372:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009374:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009376:	e841 2300 	strex	r3, r2, [r1]
 800937a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800937c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1e3      	bne.n	800934a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a15      	ldr	r2, [pc, #84]	@ (80093dc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009386:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	e853 3f00 	ldrex	r3, [r3]
 8009394:	60bb      	str	r3, [r7, #8]
   return(result);
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	f043 0320 	orr.w	r3, r3, #32
 800939c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	461a      	mov	r2, r3
 80093a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80093aa:	61bb      	str	r3, [r7, #24]
 80093ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ae:	6979      	ldr	r1, [r7, #20]
 80093b0:	69ba      	ldr	r2, [r7, #24]
 80093b2:	e841 2300 	strex	r3, r2, [r1]
 80093b6:	613b      	str	r3, [r7, #16]
   return(result);
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1e4      	bne.n	8009388 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093be:	e007      	b.n	80093d0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	699a      	ldr	r2, [r3, #24]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f042 0208 	orr.w	r2, r2, #8
 80093ce:	619a      	str	r2, [r3, #24]
}
 80093d0:	bf00      	nop
 80093d2:	37b0      	adds	r7, #176	@ 0xb0
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	40008000 	.word	0x40008000
 80093dc:	08008d11 	.word	0x08008d11

080093e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b0ae      	sub	sp, #184	@ 0xb8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80093ee:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	69db      	ldr	r3, [r3, #28]
 80093f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009416:	2b22      	cmp	r3, #34	@ 0x22
 8009418:	f040 8186 	bne.w	8009728 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009422:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009426:	e129      	b.n	800967c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800942e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009436:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800943a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800943e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009442:	4013      	ands	r3, r2
 8009444:	b29a      	uxth	r2, r3
 8009446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800944a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009450:	1c9a      	adds	r2, r3, #2
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800945c:	b29b      	uxth	r3, r3
 800945e:	3b01      	subs	r3, #1
 8009460:	b29a      	uxth	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009472:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009476:	f003 0307 	and.w	r3, r3, #7
 800947a:	2b00      	cmp	r3, #0
 800947c:	d053      	beq.n	8009526 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800947e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	2b00      	cmp	r3, #0
 8009488:	d011      	beq.n	80094ae <UART_RxISR_16BIT_FIFOEN+0xce>
 800948a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800948e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00b      	beq.n	80094ae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2201      	movs	r2, #1
 800949c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094a4:	f043 0201 	orr.w	r2, r3, #1
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80094b2:	f003 0302 	and.w	r3, r3, #2
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d011      	beq.n	80094de <UART_RxISR_16BIT_FIFOEN+0xfe>
 80094ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00b      	beq.n	80094de <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2202      	movs	r2, #2
 80094cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094d4:	f043 0204 	orr.w	r2, r3, #4
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80094e2:	f003 0304 	and.w	r3, r3, #4
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d011      	beq.n	800950e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80094ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00b      	beq.n	800950e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2204      	movs	r2, #4
 80094fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009504:	f043 0202 	orr.w	r2, r3, #2
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009514:	2b00      	cmp	r3, #0
 8009516:	d006      	beq.n	8009526 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f7fe fd16 	bl	8007f4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800952c:	b29b      	uxth	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	f040 80a4 	bne.w	800967c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800953c:	e853 3f00 	ldrex	r3, [r3]
 8009540:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009542:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009548:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	461a      	mov	r2, r3
 8009552:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009556:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800955a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800955e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009562:	e841 2300 	strex	r3, r2, [r1]
 8009566:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009568:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1e2      	bne.n	8009534 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3308      	adds	r3, #8
 8009574:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009576:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009578:	e853 3f00 	ldrex	r3, [r3]
 800957c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800957e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009580:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009584:	f023 0301 	bic.w	r3, r3, #1
 8009588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3308      	adds	r3, #8
 8009592:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009596:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009598:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800959c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800959e:	e841 2300 	strex	r3, r2, [r1]
 80095a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80095a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1e1      	bne.n	800956e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2220      	movs	r2, #32
 80095ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a5f      	ldr	r2, [pc, #380]	@ (8009740 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d021      	beq.n	800960c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d01a      	beq.n	800960c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095de:	e853 3f00 	ldrex	r3, [r3]
 80095e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80095e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80095ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	461a      	mov	r2, r3
 80095f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80095f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095fa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009600:	e841 2300 	strex	r3, r2, [r1]
 8009604:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009606:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1e4      	bne.n	80095d6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009610:	2b01      	cmp	r3, #1
 8009612:	d130      	bne.n	8009676 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009622:	e853 3f00 	ldrex	r3, [r3]
 8009626:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800962a:	f023 0310 	bic.w	r3, r3, #16
 800962e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800963c:	647b      	str	r3, [r7, #68]	@ 0x44
 800963e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009640:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009642:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009644:	e841 2300 	strex	r3, r2, [r1]
 8009648:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800964a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1e4      	bne.n	800961a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	69db      	ldr	r3, [r3, #28]
 8009656:	f003 0310 	and.w	r3, r3, #16
 800965a:	2b10      	cmp	r3, #16
 800965c:	d103      	bne.n	8009666 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2210      	movs	r2, #16
 8009664:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7fe fc74 	bl	8007f5c <HAL_UARTEx_RxEventCallback>
 8009674:	e002      	b.n	800967c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7f9 fdfe 	bl	8003278 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800967c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009680:	2b00      	cmp	r3, #0
 8009682:	d006      	beq.n	8009692 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009684:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009688:	f003 0320 	and.w	r3, r3, #32
 800968c:	2b00      	cmp	r3, #0
 800968e:	f47f aecb 	bne.w	8009428 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009698:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800969c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d049      	beq.n	8009738 <UART_RxISR_16BIT_FIFOEN+0x358>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80096aa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d242      	bcs.n	8009738 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3308      	adds	r3, #8
 80096b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096bc:	e853 3f00 	ldrex	r3, [r3]
 80096c0:	623b      	str	r3, [r7, #32]
   return(result);
 80096c2:	6a3b      	ldr	r3, [r7, #32]
 80096c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3308      	adds	r3, #8
 80096d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80096d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80096d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096de:	e841 2300 	strex	r3, r2, [r1]
 80096e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1e3      	bne.n	80096b2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a15      	ldr	r2, [pc, #84]	@ (8009744 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80096ee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	e853 3f00 	ldrex	r3, [r3]
 80096fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f043 0320 	orr.w	r3, r3, #32
 8009704:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	461a      	mov	r2, r3
 800970e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009712:	61fb      	str	r3, [r7, #28]
 8009714:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009716:	69b9      	ldr	r1, [r7, #24]
 8009718:	69fa      	ldr	r2, [r7, #28]
 800971a:	e841 2300 	strex	r3, r2, [r1]
 800971e:	617b      	str	r3, [r7, #20]
   return(result);
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e4      	bne.n	80096f0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009726:	e007      	b.n	8009738 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	699a      	ldr	r2, [r3, #24]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f042 0208 	orr.w	r2, r2, #8
 8009736:	619a      	str	r2, [r3, #24]
}
 8009738:	bf00      	nop
 800973a:	37b8      	adds	r7, #184	@ 0xb8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	40008000 	.word	0x40008000
 8009744:	08008ec9 	.word	0x08008ec9

08009748 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	bc80      	pop	{r7}
 8009758:	4770      	bx	lr

0800975a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800975a:	b480      	push	{r7}
 800975c:	b083      	sub	sp, #12
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009762:	bf00      	nop
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	bc80      	pop	{r7}
 800976a:	4770      	bx	lr

0800976c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	bc80      	pop	{r7}
 800977c:	4770      	bx	lr

0800977e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b088      	sub	sp, #32
 8009782:	af02      	add	r7, sp, #8
 8009784:	60f8      	str	r0, [r7, #12]
 8009786:	1d3b      	adds	r3, r7, #4
 8009788:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800978c:	2300      	movs	r3, #0
 800978e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009796:	2b01      	cmp	r3, #1
 8009798:	d101      	bne.n	800979e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800979a:	2302      	movs	r3, #2
 800979c:	e046      	b.n	800982c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2224      	movs	r2, #36	@ 0x24
 80097aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f022 0201 	bic.w	r2, r2, #1
 80097bc:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	430a      	orrs	r2, r1
 80097d0:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d105      	bne.n	80097e4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80097d8:	1d3b      	adds	r3, r7, #4
 80097da:	e893 0006 	ldmia.w	r3, {r1, r2}
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f000 f911 	bl	8009a06 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f042 0201 	orr.w	r2, r2, #1
 80097f2:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097f4:	f7f8 ff78 	bl	80026e8 <HAL_GetTick>
 80097f8:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	2200      	movs	r2, #0
 8009804:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f7fe ff16 	bl	800863a <UART_WaitOnFlagUntilTimeout>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	75fb      	strb	r3, [r7, #23]
 8009818:	e003      	b.n	8009822 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2220      	movs	r2, #32
 800981e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800982a:	7dfb      	ldrb	r3, [r7, #23]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3718      	adds	r7, #24
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009834:	b480      	push	{r7}
 8009836:	b089      	sub	sp, #36	@ 0x24
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009842:	2b01      	cmp	r3, #1
 8009844:	d101      	bne.n	800984a <HAL_UARTEx_EnableStopMode+0x16>
 8009846:	2302      	movs	r3, #2
 8009848:	e021      	b.n	800988e <HAL_UARTEx_EnableStopMode+0x5a>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	e853 3f00 	ldrex	r3, [r3]
 800985e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	f043 0302 	orr.w	r3, r3, #2
 8009866:	61fb      	str	r3, [r7, #28]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	461a      	mov	r2, r3
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	61bb      	str	r3, [r7, #24]
 8009872:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009874:	6979      	ldr	r1, [r7, #20]
 8009876:	69ba      	ldr	r2, [r7, #24]
 8009878:	e841 2300 	strex	r3, r2, [r1]
 800987c:	613b      	str	r3, [r7, #16]
   return(result);
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1e6      	bne.n	8009852 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3724      	adds	r7, #36	@ 0x24
 8009892:	46bd      	mov	sp, r7
 8009894:	bc80      	pop	{r7}
 8009896:	4770      	bx	lr

08009898 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d101      	bne.n	80098ae <HAL_UARTEx_EnableFifoMode+0x16>
 80098aa:	2302      	movs	r3, #2
 80098ac:	e02b      	b.n	8009906 <HAL_UARTEx_EnableFifoMode+0x6e>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2224      	movs	r2, #36	@ 0x24
 80098ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f022 0201 	bic.w	r2, r2, #1
 80098d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80098dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80098e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f8ac 	bl	8009a4c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2220      	movs	r2, #32
 80098f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b084      	sub	sp, #16
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800991e:	2b01      	cmp	r3, #1
 8009920:	d101      	bne.n	8009926 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009922:	2302      	movs	r3, #2
 8009924:	e02d      	b.n	8009982 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2224      	movs	r2, #36	@ 0x24
 8009932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f022 0201 	bic.w	r2, r2, #1
 800994c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	683a      	ldr	r2, [r7, #0]
 800995e:	430a      	orrs	r2, r1
 8009960:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f872 	bl	8009a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2220      	movs	r2, #32
 8009974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800999a:	2b01      	cmp	r3, #1
 800999c:	d101      	bne.n	80099a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800999e:	2302      	movs	r3, #2
 80099a0:	e02d      	b.n	80099fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2224      	movs	r2, #36	@ 0x24
 80099ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f022 0201 	bic.w	r2, r2, #1
 80099c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	430a      	orrs	r2, r1
 80099dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f834 	bl	8009a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2220      	movs	r2, #32
 80099f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b085      	sub	sp, #20
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	60f8      	str	r0, [r7, #12]
 8009a0e:	1d3b      	adds	r3, r7, #4
 8009a10:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	f023 0210 	bic.w	r2, r3, #16
 8009a1e:	893b      	ldrh	r3, [r7, #8]
 8009a20:	4619      	mov	r1, r3
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	430a      	orrs	r2, r1
 8009a28:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8009a34:	7abb      	ldrb	r3, [r7, #10]
 8009a36:	061a      	lsls	r2, r3, #24
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	430a      	orrs	r2, r1
 8009a3e:	605a      	str	r2, [r3, #4]
}
 8009a40:	bf00      	nop
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bc80      	pop	{r7}
 8009a48:	4770      	bx	lr
	...

08009a4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d108      	bne.n	8009a6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a6c:	e031      	b.n	8009ad2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a6e:	2308      	movs	r3, #8
 8009a70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a72:	2308      	movs	r3, #8
 8009a74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	0e5b      	lsrs	r3, r3, #25
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	f003 0307 	and.w	r3, r3, #7
 8009a84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	0f5b      	lsrs	r3, r3, #29
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	f003 0307 	and.w	r3, r3, #7
 8009a94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a96:	7bbb      	ldrb	r3, [r7, #14]
 8009a98:	7b3a      	ldrb	r2, [r7, #12]
 8009a9a:	4910      	ldr	r1, [pc, #64]	@ (8009adc <UARTEx_SetNbDataToProcess+0x90>)
 8009a9c:	5c8a      	ldrb	r2, [r1, r2]
 8009a9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009aa2:	7b3a      	ldrb	r2, [r7, #12]
 8009aa4:	490e      	ldr	r1, [pc, #56]	@ (8009ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8009aa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009aa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	7b7a      	ldrb	r2, [r7, #13]
 8009ab8:	4908      	ldr	r1, [pc, #32]	@ (8009adc <UARTEx_SetNbDataToProcess+0x90>)
 8009aba:	5c8a      	ldrb	r2, [r1, r2]
 8009abc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ac0:	7b7a      	ldrb	r2, [r7, #13]
 8009ac2:	4907      	ldr	r1, [pc, #28]	@ (8009ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8009ac4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ac6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009aca:	b29a      	uxth	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009ad2:	bf00      	nop
 8009ad4:	3714      	adds	r7, #20
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bc80      	pop	{r7}
 8009ada:	4770      	bx	lr
 8009adc:	0801d83c 	.word	0x0801d83c
 8009ae0:	0801d844 	.word	0x0801d844

08009ae4 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009ae8:	f7f8 fcae 	bl	8002448 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8009aec:	f000 f818 	bl	8009b20 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8009af0:	bf00      	nop
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <__NVIC_SystemReset>:
{
 8009af4:	b480      	push	{r7}
 8009af6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009af8:	f3bf 8f4f 	dsb	sy
}
 8009afc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009afe:	4b06      	ldr	r3, [pc, #24]	@ (8009b18 <__NVIC_SystemReset+0x24>)
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009b06:	4904      	ldr	r1, [pc, #16]	@ (8009b18 <__NVIC_SystemReset+0x24>)
 8009b08:	4b04      	ldr	r3, [pc, #16]	@ (8009b1c <__NVIC_SystemReset+0x28>)
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009b0e:	f3bf 8f4f 	dsb	sy
}
 8009b12:	bf00      	nop
    __NOP();
 8009b14:	bf00      	nop
 8009b16:	e7fd      	b.n	8009b14 <__NVIC_SystemReset+0x20>
 8009b18:	e000ed00 	.word	0xe000ed00
 8009b1c:	05fa0004 	.word	0x05fa0004

08009b20 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8009b26:	2300      	movs	r3, #0
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8009ba8 <LoRaWAN_Init+0x88>)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8009b32:	481e      	ldr	r0, [pc, #120]	@ (8009bac <LoRaWAN_Init+0x8c>)
 8009b34:	f011 fde2 	bl	801b6fc <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009b38:	4a1d      	ldr	r2, [pc, #116]	@ (8009bb0 <LoRaWAN_Init+0x90>)
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	2001      	movs	r0, #1
 8009b3e:	f011 fd47 	bl	801b5d0 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009b42:	4a1c      	ldr	r2, [pc, #112]	@ (8009bb4 <LoRaWAN_Init+0x94>)
 8009b44:	2100      	movs	r1, #0
 8009b46:	2002      	movs	r0, #2
 8009b48:	f011 fd42 	bl	801b5d0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8009b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8009bb8 <LoRaWAN_Init+0x98>)
 8009b4e:	2100      	movs	r1, #0
 8009b50:	2004      	movs	r0, #4
 8009b52:	f011 fd3d 	bl	801b5d0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8009b56:	4a19      	ldr	r2, [pc, #100]	@ (8009bbc <LoRaWAN_Init+0x9c>)
 8009b58:	2100      	movs	r1, #0
 8009b5a:	2008      	movs	r0, #8
 8009b5c:	f011 fd38 	bl	801b5d0 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009b60:	f000 f9aa 	bl	8009eb8 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8009b64:	4916      	ldr	r1, [pc, #88]	@ (8009bc0 <LoRaWAN_Init+0xa0>)
 8009b66:	4817      	ldr	r0, [pc, #92]	@ (8009bc4 <LoRaWAN_Init+0xa4>)
 8009b68:	f001 feec 	bl	800b944 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8009b6c:	4816      	ldr	r0, [pc, #88]	@ (8009bc8 <LoRaWAN_Init+0xa8>)
 8009b6e:	f001 ff45 	bl	800b9fc <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 8009b72:	4b16      	ldr	r3, [pc, #88]	@ (8009bcc <LoRaWAN_Init+0xac>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	4a16      	ldr	r2, [pc, #88]	@ (8009bd0 <LoRaWAN_Init+0xb0>)
 8009b78:	7812      	ldrb	r2, [r2, #0]
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f002 f803 	bl	800bb88 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8009b82:	4b14      	ldr	r3, [pc, #80]	@ (8009bd4 <LoRaWAN_Init+0xb4>)
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10b      	bne.n	8009ba2 <LoRaWAN_Init+0x82>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009b8a:	4b13      	ldr	r3, [pc, #76]	@ (8009bd8 <LoRaWAN_Init+0xb8>)
 8009b8c:	6819      	ldr	r1, [r3, #0]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	4b12      	ldr	r3, [pc, #72]	@ (8009bdc <LoRaWAN_Init+0xbc>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	4812      	ldr	r0, [pc, #72]	@ (8009be0 <LoRaWAN_Init+0xc0>)
 8009b98:	f011 fdb0 	bl	801b6fc <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8009b9c:	4810      	ldr	r0, [pc, #64]	@ (8009be0 <LoRaWAN_Init+0xc0>)
 8009b9e:	f011 fde3 	bl	801b768 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8009ba2:	bf00      	nop
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	08009db9 	.word	0x08009db9
 8009bac:	20000408 	.word	0x20000408
 8009bb0:	0800bb71 	.word	0x0800bb71
 8009bb4:	08009bf9 	.word	0x08009bf9
 8009bb8:	08009ddd 	.word	0x08009ddd
 8009bbc:	08009d39 	.word	0x08009d39
 8009bc0:	01030000 	.word	0x01030000
 8009bc4:	2000000c 	.word	0x2000000c
 8009bc8:	20000058 	.word	0x20000058
 8009bcc:	20000009 	.word	0x20000009
 8009bd0:	2000000a 	.word	0x2000000a
 8009bd4:	200003ec 	.word	0x200003ec
 8009bd8:	20000070 	.word	0x20000070
 8009bdc:	08009c05 	.word	0x08009c05
 8009be0:	200003f0 	.word	0x200003f0

08009be4 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  /* USER CODE END OnRxData_1 */
}
 8009bee:	bf00      	nop
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bc80      	pop	{r7}
 8009bf6:	4770      	bx	lr

08009bf8 <SendTxData>:

static void SendTxData(void)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */

  /* USER CODE END SendTxData_1 */
}
 8009bfc:	bf00      	nop
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bc80      	pop	{r7}
 8009c02:	4770      	bx	lr

08009c04 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	2002      	movs	r0, #2
 8009c10:	f011 fd00 	bl	801b614 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8009c14:	4803      	ldr	r0, [pc, #12]	@ (8009c24 <OnTxTimerEvent+0x20>)
 8009c16:	f011 fda7 	bl	801b768 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8009c1a:	bf00      	nop
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	200003f0 	.word	0x200003f0

08009c28 <OnTxData>:
/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  /* USER CODE END OnTxData_1 */
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bc80      	pop	{r7}
 8009c38:	4770      	bx	lr

08009c3a <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  /* USER CODE END OnJoinRequest_1 */
}
 8009c42:	bf00      	nop
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bc80      	pop	{r7}
 8009c4a:	4770      	bx	lr

08009c4c <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  /* USER CODE END OnBeaconStatusChange_1 */
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bc80      	pop	{r7}
 8009c5c:	4770      	bx	lr

08009c5e <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 8009c62:	bf00      	nop
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bc80      	pop	{r7}
 8009c68:	4770      	bx	lr

08009c6a <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 8009c6a:	b480      	push	{r7}
 8009c6c:	b083      	sub	sp, #12
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	4603      	mov	r3, r0
 8009c72:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  /* USER CODE END OnClassChange_1 */
}
 8009c74:	bf00      	nop
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bc80      	pop	{r7}
 8009c7c:	4770      	bx	lr

08009c7e <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8009c82:	2100      	movs	r1, #0
 8009c84:	2001      	movs	r0, #1
 8009c86:	f011 fcc5 	bl	801b614 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8009c8a:	bf00      	nop
 8009c8c:	bd80      	pop	{r7, pc}
	...

08009c90 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 8009c98:	4a0d      	ldr	r2, [pc, #52]	@ (8009cd0 <OnTxPeriodicityChanged+0x40>)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 8009c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8009cd0 <OnTxPeriodicityChanged+0x40>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d103      	bne.n	8009cae <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8009ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8009cd0 <OnTxPeriodicityChanged+0x40>)
 8009ca8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009cac:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 8009cae:	4809      	ldr	r0, [pc, #36]	@ (8009cd4 <OnTxPeriodicityChanged+0x44>)
 8009cb0:	f011 fdc8 	bl	801b844 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8009cb4:	4b06      	ldr	r3, [pc, #24]	@ (8009cd0 <OnTxPeriodicityChanged+0x40>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4806      	ldr	r0, [pc, #24]	@ (8009cd4 <OnTxPeriodicityChanged+0x44>)
 8009cbc:	f011 fe32 	bl	801b924 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8009cc0:	4804      	ldr	r0, [pc, #16]	@ (8009cd4 <OnTxPeriodicityChanged+0x44>)
 8009cc2:	f011 fd51 	bl	801b768 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 8009cc6:	bf00      	nop
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20000070 	.word	0x20000070
 8009cd4:	200003f0 	.word	0x200003f0

08009cd8 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	4603      	mov	r3, r0
 8009ce0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8009ce2:	4a04      	ldr	r2, [pc, #16]	@ (8009cf4 <OnTxFrameCtrlChanged+0x1c>)
 8009ce4:	79fb      	ldrb	r3, [r7, #7]
 8009ce6:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bc80      	pop	{r7}
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	20000058 	.word	0x20000058

08009cf8 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	4603      	mov	r3, r0
 8009d00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8009d02:	4a04      	ldr	r2, [pc, #16]	@ (8009d14 <OnPingSlotPeriodicityChanged+0x1c>)
 8009d04:	79fb      	ldrb	r3, [r7, #7]
 8009d06:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bc80      	pop	{r7}
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	20000058 	.word	0x20000058

08009d18 <OnSystemReset>:

static void OnSystemReset(void)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8009d1c:	f002 fcff 	bl	800c71e <LmHandlerHalt>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d106      	bne.n	8009d34 <OnSystemReset+0x1c>
 8009d26:	f001 ffd3 	bl	800bcd0 <LmHandlerJoinStatus>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d101      	bne.n	8009d34 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 8009d30:	f7ff fee0 	bl	8009af4 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 8009d34:	bf00      	nop
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <StopJoin>:

static void StopJoin(void)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 8009d3c:	4817      	ldr	r0, [pc, #92]	@ (8009d9c <StopJoin+0x64>)
 8009d3e:	f011 fd81 	bl	801b844 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8009d42:	f002 fcdf 	bl	800c704 <LmHandlerStop>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d006      	beq.n	8009d5a <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8009d4c:	4b14      	ldr	r3, [pc, #80]	@ (8009da0 <StopJoin+0x68>)
 8009d4e:	2200      	movs	r2, #0
 8009d50:	2100      	movs	r1, #0
 8009d52:	2002      	movs	r0, #2
 8009d54:	f011 ff80 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
 8009d58:	e01a      	b.n	8009d90 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 8009d5a:	4b12      	ldr	r3, [pc, #72]	@ (8009da4 <StopJoin+0x6c>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	2100      	movs	r1, #0
 8009d60:	2002      	movs	r0, #2
 8009d62:	f011 ff79 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 8009d66:	4b10      	ldr	r3, [pc, #64]	@ (8009da8 <StopJoin+0x70>)
 8009d68:	2201      	movs	r2, #1
 8009d6a:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 8009d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8009dac <StopJoin+0x74>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	2100      	movs	r1, #0
 8009d72:	2002      	movs	r0, #2
 8009d74:	f011 ff70 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 8009d78:	480d      	ldr	r0, [pc, #52]	@ (8009db0 <StopJoin+0x78>)
 8009d7a:	f001 fe3f 	bl	800b9fc <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8009d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8009da8 <StopJoin+0x70>)
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	2101      	movs	r1, #1
 8009d84:	4618      	mov	r0, r3
 8009d86:	f001 feff 	bl	800bb88 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8009d8a:	4804      	ldr	r0, [pc, #16]	@ (8009d9c <StopJoin+0x64>)
 8009d8c:	f011 fcec 	bl	801b768 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 8009d90:	4808      	ldr	r0, [pc, #32]	@ (8009db4 <StopJoin+0x7c>)
 8009d92:	f011 fce9 	bl	801b768 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 8009d96:	bf00      	nop
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	200003f0 	.word	0x200003f0
 8009da0:	0801d26c 	.word	0x0801d26c
 8009da4:	0801d28c 	.word	0x0801d28c
 8009da8:	20000009 	.word	0x20000009
 8009dac:	0801d2a0 	.word	0x0801d2a0
 8009db0:	20000058 	.word	0x20000058
 8009db4:	20000408 	.word	0x20000408

08009db8 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 8009dc0:	4b05      	ldr	r3, [pc, #20]	@ (8009dd8 <OnStopJoinTimerEvent+0x20>)
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	d103      	bne.n	8009dd0 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8009dc8:	2100      	movs	r1, #0
 8009dca:	2008      	movs	r0, #8
 8009dcc:	f011 fc22 	bl	801b614 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */

  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 8009dd0:	bf00      	nop
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	20000009 	.word	0x20000009

08009ddc <StoreContext>:

static void StoreContext(void)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 8009de2:	23ff      	movs	r3, #255	@ 0xff
 8009de4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 8009de6:	f002 fccf 	bl	800c788 <LmHandlerNvmDataStore>
 8009dea:	4603      	mov	r3, r0
 8009dec:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 8009dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009df2:	f113 0f08 	cmn.w	r3, #8
 8009df6:	d106      	bne.n	8009e06 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8009df8:	4b0a      	ldr	r3, [pc, #40]	@ (8009e24 <StoreContext+0x48>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	2002      	movs	r0, #2
 8009e00:	f011 ff2a 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 8009e04:	e00a      	b.n	8009e1c <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 8009e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0e:	d105      	bne.n	8009e1c <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8009e10:	4b05      	ldr	r3, [pc, #20]	@ (8009e28 <StoreContext+0x4c>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	2100      	movs	r1, #0
 8009e16:	2002      	movs	r0, #2
 8009e18:	f011 ff1e 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	0801d2c0 	.word	0x0801d2c0
 8009e28:	0801d2d8 	.word	0x0801d2d8

08009e2c <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	4603      	mov	r3, r0
 8009e34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 8009e36:	79fb      	ldrb	r3, [r7, #7]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d106      	bne.n	8009e4a <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8009e3c:	4b08      	ldr	r3, [pc, #32]	@ (8009e60 <OnNvmDataChange+0x34>)
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2100      	movs	r1, #0
 8009e42:	2002      	movs	r0, #2
 8009e44:	f011 ff08 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 8009e48:	e005      	b.n	8009e56 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 8009e4a:	4b06      	ldr	r3, [pc, #24]	@ (8009e64 <OnNvmDataChange+0x38>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	2100      	movs	r1, #0
 8009e50:	2002      	movs	r0, #2
 8009e52:	f011 ff01 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
}
 8009e56:	bf00      	nop
 8009e58:	3708      	adds	r7, #8
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	0801d2f0 	.word	0x0801d2f0
 8009e64:	0801d304 	.word	0x0801d304

08009e68 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 8009e72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009e76:	4807      	ldr	r0, [pc, #28]	@ (8009e94 <OnStoreContextRequest+0x2c>)
 8009e78:	f7f7 fce0 	bl	800183c <FLASH_IF_Erase>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d104      	bne.n	8009e8c <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	6879      	ldr	r1, [r7, #4]
 8009e86:	4803      	ldr	r0, [pc, #12]	@ (8009e94 <OnStoreContextRequest+0x2c>)
 8009e88:	f7f7 fc88 	bl	800179c <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8009e8c:	bf00      	nop
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	0803f000 	.word	0x0803f000

08009e98 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	4903      	ldr	r1, [pc, #12]	@ (8009eb4 <OnRestoreContextRequest+0x1c>)
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7f7 fca0 	bl	80017ec <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8009eac:	bf00      	nop
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	0803f000 	.word	0x0803f000

08009eb8 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 8009ebc:	4b18      	ldr	r3, [pc, #96]	@ (8009f20 <LoraInfo_Init+0x68>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8009ec2:	4b17      	ldr	r3, [pc, #92]	@ (8009f20 <LoraInfo_Init+0x68>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8009ec8:	4b15      	ldr	r3, [pc, #84]	@ (8009f20 <LoraInfo_Init+0x68>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8009ece:	4b14      	ldr	r3, [pc, #80]	@ (8009f20 <LoraInfo_Init+0x68>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8009ed4:	4b12      	ldr	r3, [pc, #72]	@ (8009f20 <LoraInfo_Init+0x68>)
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	f043 0320 	orr.w	r3, r3, #32
 8009edc:	4a10      	ldr	r2, [pc, #64]	@ (8009f20 <LoraInfo_Init+0x68>)
 8009ede:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 8009ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8009f20 <LoraInfo_Init+0x68>)
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8009f20 <LoraInfo_Init+0x68>)
 8009eea:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8009eec:	4b0c      	ldr	r3, [pc, #48]	@ (8009f20 <LoraInfo_Init+0x68>)
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10d      	bne.n	8009f10 <LoraInfo_Init+0x58>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8009ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8009f24 <LoraInfo_Init+0x6c>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	2100      	movs	r1, #0
 8009efa:	2000      	movs	r0, #0
 8009efc:	f011 feac 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 8009f00:	bf00      	nop
 8009f02:	f011 fe97 	bl	801bc34 <UTIL_ADV_TRACE_IsBufferEmpty>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d1fa      	bne.n	8009f02 <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 8009f0c:	bf00      	nop
 8009f0e:	e7fd      	b.n	8009f0c <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8009f10:	4b03      	ldr	r3, [pc, #12]	@ (8009f20 <LoraInfo_Init+0x68>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	60da      	str	r2, [r3, #12]
#else /* LORAWAN_KMS == 1 */
  loraInfo.Kms = 1;
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
 8009f16:	4b02      	ldr	r3, [pc, #8]	@ (8009f20 <LoraInfo_Init+0x68>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8009f1c:	bf00      	nop
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	20000420 	.word	0x20000420
 8009f24:	0801d318 	.word	0x0801d318

08009f28 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8009f2c:	4b02      	ldr	r3, [pc, #8]	@ (8009f38 <LoraInfo_GetPtr+0x10>)
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bc80      	pop	{r7}
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	20000420 	.word	0x20000420

08009f3c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8009f42:	2300      	movs	r3, #0
 8009f44:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 8009f46:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bc80      	pop	{r7}
 8009f50:	4770      	bx	lr

08009f52 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b085      	sub	sp, #20
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	4603      	mov	r3, r0
 8009f5a:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8009f60:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bc80      	pop	{r7}
 8009f6a:	4770      	bx	lr

08009f6c <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8009f72:	2300      	movs	r3, #0
 8009f74:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 8009f76:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bc80      	pop	{r7}
 8009f80:	4770      	bx	lr

08009f82 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8009f82:	b480      	push	{r7}
 8009f84:	b083      	sub	sp, #12
 8009f86:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 8009f8c:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	370c      	adds	r7, #12
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bc80      	pop	{r7}
 8009f96:	4770      	bx	lr

08009f98 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 8009fa2:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bc80      	pop	{r7}
 8009fac:	4770      	bx	lr

08009fae <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8009fae:	b480      	push	{r7}
 8009fb0:	b085      	sub	sp, #20
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 8009fbc:	79fb      	ldrb	r3, [r7, #7]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d102      	bne.n	8009fc8 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 8009fc2:	230f      	movs	r3, #15
 8009fc4:	60fb      	str	r3, [r7, #12]
 8009fc6:	e001      	b.n	8009fcc <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 8009fc8:	2316      	movs	r3, #22
 8009fca:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bc80      	pop	{r7}
 8009fd6:	4770      	bx	lr

08009fd8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	33f1      	adds	r3, #241	@ 0xf1
 8009fe4:	2210      	movs	r2, #16
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f00d fc0d 	bl	8017808 <memset1>
    ctx->M_n = 0;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	22f0      	movs	r2, #240	@ 0xf0
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f00d fc03 	bl	8017808 <memset1>
}
 800a002:	bf00      	nop
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b082      	sub	sp, #8
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	461a      	mov	r2, r3
 800a018:	2110      	movs	r1, #16
 800a01a:	6838      	ldr	r0, [r7, #0]
 800a01c:	f000 fe5c 	bl	800acd8 <lorawan_aes_set_key>
}
 800a020:	bf00      	nop
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b08c      	sub	sp, #48	@ 0x30
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f000 80a1 	beq.w	800a182 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a046:	f1c3 0310 	rsb	r3, r3, #16
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	4293      	cmp	r3, r2
 800a04e:	bf28      	it	cs
 800a050:	4613      	movcs	r3, r2
 800a052:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a060:	4413      	add	r3, r2
 800a062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a064:	b292      	uxth	r2, r2
 800a066:	68b9      	ldr	r1, [r7, #8]
 800a068:	4618      	mov	r0, r3
 800a06a:	f00d fb92 	bl	8017792 <memcpy1>
        ctx->M_n += mlen;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800a074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a076:	441a      	add	r2, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a084:	2b0f      	cmp	r3, #15
 800a086:	f240 808d 	bls.w	800a1a4 <AES_CMAC_Update+0x17c>
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08e:	429a      	cmp	r2, r3
 800a090:	f000 8088 	beq.w	800a1a4 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800a094:	2300      	movs	r3, #0
 800a096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a098:	e015      	b.n	800a0c6 <AES_CMAC_Update+0x9e>
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09e:	4413      	add	r3, r2
 800a0a0:	33f1      	adds	r3, #241	@ 0xf1
 800a0a2:	781a      	ldrb	r2, [r3, #0]
 800a0a4:	68f9      	ldr	r1, [r7, #12]
 800a0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a8:	440b      	add	r3, r1
 800a0aa:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	4053      	eors	r3, r2
 800a0b2:	b2d9      	uxtb	r1, r3
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b8:	4413      	add	r3, r2
 800a0ba:	33f1      	adds	r3, #241	@ 0xf1
 800a0bc:	460a      	mov	r2, r1
 800a0be:	701a      	strb	r2, [r3, #0]
 800a0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c8:	2b0f      	cmp	r3, #15
 800a0ca:	dde6      	ble.n	800a09a <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a0d2:	f107 0314 	add.w	r3, r7, #20
 800a0d6:	2210      	movs	r2, #16
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f00d fb5a 	bl	8017792 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	f107 0114 	add.w	r1, r7, #20
 800a0e4:	f107 0314 	add.w	r3, r7, #20
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f000 fed3 	bl	800ae94 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	33f1      	adds	r3, #241	@ 0xf1
 800a0f2:	f107 0114 	add.w	r1, r7, #20
 800a0f6:	2210      	movs	r2, #16
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f00d fb4a 	bl	8017792 <memcpy1>

        data += mlen;
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a102:	4413      	add	r3, r2
 800a104:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10a:	1ad3      	subs	r3, r2, r3
 800a10c:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800a10e:	e038      	b.n	800a182 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800a110:	2300      	movs	r3, #0
 800a112:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a114:	e013      	b.n	800a13e <AES_CMAC_Update+0x116>
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a11a:	4413      	add	r3, r2
 800a11c:	33f1      	adds	r3, #241	@ 0xf1
 800a11e:	781a      	ldrb	r2, [r3, #0]
 800a120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a122:	68b9      	ldr	r1, [r7, #8]
 800a124:	440b      	add	r3, r1
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	4053      	eors	r3, r2
 800a12a:	b2d9      	uxtb	r1, r3
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a130:	4413      	add	r3, r2
 800a132:	33f1      	adds	r3, #241	@ 0xf1
 800a134:	460a      	mov	r2, r1
 800a136:	701a      	strb	r2, [r3, #0]
 800a138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13a:	3301      	adds	r3, #1
 800a13c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a140:	2b0f      	cmp	r3, #15
 800a142:	dde8      	ble.n	800a116 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a14a:	f107 0314 	add.w	r3, r7, #20
 800a14e:	2210      	movs	r2, #16
 800a150:	4618      	mov	r0, r3
 800a152:	f00d fb1e 	bl	8017792 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	f107 0114 	add.w	r1, r7, #20
 800a15c:	f107 0314 	add.w	r3, r7, #20
 800a160:	4618      	mov	r0, r3
 800a162:	f000 fe97 	bl	800ae94 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	33f1      	adds	r3, #241	@ 0xf1
 800a16a:	f107 0114 	add.w	r1, r7, #20
 800a16e:	2210      	movs	r2, #16
 800a170:	4618      	mov	r0, r3
 800a172:	f00d fb0e 	bl	8017792 <memcpy1>

        data += 16;
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	3310      	adds	r3, #16
 800a17a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	3b10      	subs	r3, #16
 800a180:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b10      	cmp	r3, #16
 800a186:	d8c3      	bhi.n	800a110 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	b292      	uxth	r2, r2
 800a192:	68b9      	ldr	r1, [r7, #8]
 800a194:	4618      	mov	r0, r3
 800a196:	f00d fafc 	bl	8017792 <memcpy1>
    ctx->M_n = len;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800a1a2:	e000      	b.n	800a1a6 <AES_CMAC_Update+0x17e>
            return;
 800a1a4:	bf00      	nop
}
 800a1a6:	3730      	adds	r7, #48	@ 0x30
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b092      	sub	sp, #72	@ 0x48
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800a1b6:	f107 031c 	add.w	r3, r7, #28
 800a1ba:	2210      	movs	r2, #16
 800a1bc:	2100      	movs	r1, #0
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f00d fb22 	bl	8017808 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800a1c4:	683a      	ldr	r2, [r7, #0]
 800a1c6:	f107 011c 	add.w	r1, r7, #28
 800a1ca:	f107 031c 	add.w	r3, r7, #28
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fe60 	bl	800ae94 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800a1d4:	7f3b      	ldrb	r3, [r7, #28]
 800a1d6:	b25b      	sxtb	r3, r3
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	da30      	bge.n	800a23e <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800a1dc:	2300      	movs	r3, #0
 800a1de:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1e0:	e01b      	b.n	800a21a <AES_CMAC_Final+0x6e>
 800a1e2:	f107 021c 	add.w	r2, r7, #28
 800a1e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1e8:	4413      	add	r3, r2
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	005b      	lsls	r3, r3, #1
 800a1ee:	b25a      	sxtb	r2, r3
 800a1f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	3348      	adds	r3, #72	@ 0x48
 800a1f6:	443b      	add	r3, r7
 800a1f8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a1fc:	09db      	lsrs	r3, r3, #7
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	b25b      	sxtb	r3, r3
 800a202:	4313      	orrs	r3, r2
 800a204:	b25b      	sxtb	r3, r3
 800a206:	b2d9      	uxtb	r1, r3
 800a208:	f107 021c 	add.w	r2, r7, #28
 800a20c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a20e:	4413      	add	r3, r2
 800a210:	460a      	mov	r2, r1
 800a212:	701a      	strb	r2, [r3, #0]
 800a214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a216:	3301      	adds	r3, #1
 800a218:	647b      	str	r3, [r7, #68]	@ 0x44
 800a21a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a21c:	2b0e      	cmp	r3, #14
 800a21e:	dde0      	ble.n	800a1e2 <AES_CMAC_Final+0x36>
 800a220:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a224:	005b      	lsls	r3, r3, #1
 800a226:	b2db      	uxtb	r3, r3
 800a228:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800a22c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a230:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800a234:	43db      	mvns	r3, r3
 800a236:	b2db      	uxtb	r3, r3
 800a238:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a23c:	e027      	b.n	800a28e <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800a23e:	2300      	movs	r3, #0
 800a240:	643b      	str	r3, [r7, #64]	@ 0x40
 800a242:	e01b      	b.n	800a27c <AES_CMAC_Final+0xd0>
 800a244:	f107 021c 	add.w	r2, r7, #28
 800a248:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a24a:	4413      	add	r3, r2
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	005b      	lsls	r3, r3, #1
 800a250:	b25a      	sxtb	r2, r3
 800a252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a254:	3301      	adds	r3, #1
 800a256:	3348      	adds	r3, #72	@ 0x48
 800a258:	443b      	add	r3, r7
 800a25a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a25e:	09db      	lsrs	r3, r3, #7
 800a260:	b2db      	uxtb	r3, r3
 800a262:	b25b      	sxtb	r3, r3
 800a264:	4313      	orrs	r3, r2
 800a266:	b25b      	sxtb	r3, r3
 800a268:	b2d9      	uxtb	r1, r3
 800a26a:	f107 021c 	add.w	r2, r7, #28
 800a26e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a270:	4413      	add	r3, r2
 800a272:	460a      	mov	r2, r1
 800a274:	701a      	strb	r2, [r3, #0]
 800a276:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a278:	3301      	adds	r3, #1
 800a27a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a27c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a27e:	2b0e      	cmp	r3, #14
 800a280:	dde0      	ble.n	800a244 <AES_CMAC_Final+0x98>
 800a282:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a286:	005b      	lsls	r3, r3, #1
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a294:	2b10      	cmp	r3, #16
 800a296:	d11d      	bne.n	800a2d4 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800a298:	2300      	movs	r3, #0
 800a29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a29c:	e016      	b.n	800a2cc <AES_CMAC_Final+0x120>
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a2a8:	781a      	ldrb	r2, [r3, #0]
 800a2aa:	f107 011c 	add.w	r1, r7, #28
 800a2ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2b0:	440b      	add	r3, r1
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	4053      	eors	r3, r2
 800a2b6:	b2d9      	uxtb	r1, r3
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2bc:	4413      	add	r3, r2
 800a2be:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a2c2:	460a      	mov	r2, r1
 800a2c4:	701a      	strb	r2, [r3, #0]
 800a2c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ce:	2b0f      	cmp	r3, #15
 800a2d0:	dde5      	ble.n	800a29e <AES_CMAC_Final+0xf2>
 800a2d2:	e096      	b.n	800a402 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800a2d4:	7f3b      	ldrb	r3, [r7, #28]
 800a2d6:	b25b      	sxtb	r3, r3
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	da30      	bge.n	800a33e <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800a2dc:	2300      	movs	r3, #0
 800a2de:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2e0:	e01b      	b.n	800a31a <AES_CMAC_Final+0x16e>
 800a2e2:	f107 021c 	add.w	r2, r7, #28
 800a2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e8:	4413      	add	r3, r2
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	005b      	lsls	r3, r3, #1
 800a2ee:	b25a      	sxtb	r2, r3
 800a2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	3348      	adds	r3, #72	@ 0x48
 800a2f6:	443b      	add	r3, r7
 800a2f8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a2fc:	09db      	lsrs	r3, r3, #7
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	b25b      	sxtb	r3, r3
 800a302:	4313      	orrs	r3, r2
 800a304:	b25b      	sxtb	r3, r3
 800a306:	b2d9      	uxtb	r1, r3
 800a308:	f107 021c 	add.w	r2, r7, #28
 800a30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a30e:	4413      	add	r3, r2
 800a310:	460a      	mov	r2, r1
 800a312:	701a      	strb	r2, [r3, #0]
 800a314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a316:	3301      	adds	r3, #1
 800a318:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31c:	2b0e      	cmp	r3, #14
 800a31e:	dde0      	ble.n	800a2e2 <AES_CMAC_Final+0x136>
 800a320:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	b2db      	uxtb	r3, r3
 800a328:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800a32c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a330:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800a334:	43db      	mvns	r3, r3
 800a336:	b2db      	uxtb	r3, r3
 800a338:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a33c:	e027      	b.n	800a38e <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800a33e:	2300      	movs	r3, #0
 800a340:	637b      	str	r3, [r7, #52]	@ 0x34
 800a342:	e01b      	b.n	800a37c <AES_CMAC_Final+0x1d0>
 800a344:	f107 021c 	add.w	r2, r7, #28
 800a348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a34a:	4413      	add	r3, r2
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	005b      	lsls	r3, r3, #1
 800a350:	b25a      	sxtb	r2, r3
 800a352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a354:	3301      	adds	r3, #1
 800a356:	3348      	adds	r3, #72	@ 0x48
 800a358:	443b      	add	r3, r7
 800a35a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a35e:	09db      	lsrs	r3, r3, #7
 800a360:	b2db      	uxtb	r3, r3
 800a362:	b25b      	sxtb	r3, r3
 800a364:	4313      	orrs	r3, r2
 800a366:	b25b      	sxtb	r3, r3
 800a368:	b2d9      	uxtb	r1, r3
 800a36a:	f107 021c 	add.w	r2, r7, #28
 800a36e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a370:	4413      	add	r3, r2
 800a372:	460a      	mov	r2, r1
 800a374:	701a      	strb	r2, [r3, #0]
 800a376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a378:	3301      	adds	r3, #1
 800a37a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a37c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a37e:	2b0e      	cmp	r3, #14
 800a380:	dde0      	ble.n	800a344 <AES_CMAC_Final+0x198>
 800a382:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a386:	005b      	lsls	r3, r3, #1
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a394:	683a      	ldr	r2, [r7, #0]
 800a396:	4413      	add	r3, r2
 800a398:	2280      	movs	r2, #128	@ 0x80
 800a39a:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800a39e:	e007      	b.n	800a3b0 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a3b6:	1c5a      	adds	r2, r3, #1
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a3c4:	2b0f      	cmp	r3, #15
 800a3c6:	d9eb      	bls.n	800a3a0 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3cc:	e016      	b.n	800a3fc <AES_CMAC_Final+0x250>
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a3d8:	781a      	ldrb	r2, [r3, #0]
 800a3da:	f107 011c 	add.w	r1, r7, #28
 800a3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e0:	440b      	add	r3, r1
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	4053      	eors	r3, r2
 800a3e6:	b2d9      	uxtb	r1, r3
 800a3e8:	683a      	ldr	r2, [r7, #0]
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a3f2:	460a      	mov	r2, r1
 800a3f4:	701a      	strb	r2, [r3, #0]
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fe:	2b0f      	cmp	r3, #15
 800a400:	dde5      	ble.n	800a3ce <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800a402:	2300      	movs	r3, #0
 800a404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a406:	e015      	b.n	800a434 <AES_CMAC_Final+0x288>
 800a408:	683a      	ldr	r2, [r7, #0]
 800a40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a40c:	4413      	add	r3, r2
 800a40e:	33f1      	adds	r3, #241	@ 0xf1
 800a410:	781a      	ldrb	r2, [r3, #0]
 800a412:	6839      	ldr	r1, [r7, #0]
 800a414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a416:	440b      	add	r3, r1
 800a418:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	4053      	eors	r3, r2
 800a420:	b2d9      	uxtb	r1, r3
 800a422:	683a      	ldr	r2, [r7, #0]
 800a424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a426:	4413      	add	r3, r2
 800a428:	33f1      	adds	r3, #241	@ 0xf1
 800a42a:	460a      	mov	r2, r1
 800a42c:	701a      	strb	r2, [r3, #0]
 800a42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a430:	3301      	adds	r3, #1
 800a432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a436:	2b0f      	cmp	r3, #15
 800a438:	dde6      	ble.n	800a408 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a440:	f107 030c 	add.w	r3, r7, #12
 800a444:	2210      	movs	r2, #16
 800a446:	4618      	mov	r0, r3
 800a448:	f00d f9a3 	bl	8017792 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800a44c:	683a      	ldr	r2, [r7, #0]
 800a44e:	f107 030c 	add.w	r3, r7, #12
 800a452:	6879      	ldr	r1, [r7, #4]
 800a454:	4618      	mov	r0, r3
 800a456:	f000 fd1d 	bl	800ae94 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800a45a:	f107 031c 	add.w	r3, r7, #28
 800a45e:	2210      	movs	r2, #16
 800a460:	2100      	movs	r1, #0
 800a462:	4618      	mov	r0, r3
 800a464:	f00d f9d0 	bl	8017808 <memset1>
}
 800a468:	bf00      	nop
 800a46a:	3748      	adds	r7, #72	@ 0x48
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	781a      	ldrb	r2, [r3, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	3301      	adds	r3, #1
 800a486:	683a      	ldr	r2, [r7, #0]
 800a488:	7852      	ldrb	r2, [r2, #1]
 800a48a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	3302      	adds	r3, #2
 800a490:	683a      	ldr	r2, [r7, #0]
 800a492:	7892      	ldrb	r2, [r2, #2]
 800a494:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	3303      	adds	r3, #3
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	78d2      	ldrb	r2, [r2, #3]
 800a49e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	683a      	ldr	r2, [r7, #0]
 800a4a6:	7912      	ldrb	r2, [r2, #4]
 800a4a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	3305      	adds	r3, #5
 800a4ae:	683a      	ldr	r2, [r7, #0]
 800a4b0:	7952      	ldrb	r2, [r2, #5]
 800a4b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	3306      	adds	r3, #6
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	7992      	ldrb	r2, [r2, #6]
 800a4bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	3307      	adds	r3, #7
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	79d2      	ldrb	r2, [r2, #7]
 800a4c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	3308      	adds	r3, #8
 800a4cc:	683a      	ldr	r2, [r7, #0]
 800a4ce:	7a12      	ldrb	r2, [r2, #8]
 800a4d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	3309      	adds	r3, #9
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	7a52      	ldrb	r2, [r2, #9]
 800a4da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	330a      	adds	r3, #10
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	7a92      	ldrb	r2, [r2, #10]
 800a4e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	330b      	adds	r3, #11
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	7ad2      	ldrb	r2, [r2, #11]
 800a4ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	330c      	adds	r3, #12
 800a4f4:	683a      	ldr	r2, [r7, #0]
 800a4f6:	7b12      	ldrb	r2, [r2, #12]
 800a4f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	330d      	adds	r3, #13
 800a4fe:	683a      	ldr	r2, [r7, #0]
 800a500:	7b52      	ldrb	r2, [r2, #13]
 800a502:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	330e      	adds	r3, #14
 800a508:	683a      	ldr	r2, [r7, #0]
 800a50a:	7b92      	ldrb	r2, [r2, #14]
 800a50c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	330f      	adds	r3, #15
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	7bd2      	ldrb	r2, [r2, #15]
 800a516:	701a      	strb	r2, [r3, #0]
#endif
}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bc80      	pop	{r7}
 800a520:	4770      	bx	lr

0800a522 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800a522:	b480      	push	{r7}
 800a524:	b085      	sub	sp, #20
 800a526:	af00      	add	r7, sp, #0
 800a528:	60f8      	str	r0, [r7, #12]
 800a52a:	60b9      	str	r1, [r7, #8]
 800a52c:	4613      	mov	r3, r2
 800a52e:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800a530:	e007      	b.n	800a542 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	1c53      	adds	r3, r2, #1
 800a536:	60bb      	str	r3, [r7, #8]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	1c59      	adds	r1, r3, #1
 800a53c:	60f9      	str	r1, [r7, #12]
 800a53e:	7812      	ldrb	r2, [r2, #0]
 800a540:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800a542:	79fb      	ldrb	r3, [r7, #7]
 800a544:	1e5a      	subs	r2, r3, #1
 800a546:	71fa      	strb	r2, [r7, #7]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1f2      	bne.n	800a532 <copy_block_nn+0x10>
}
 800a54c:	bf00      	nop
 800a54e:	bf00      	nop
 800a550:	3714      	adds	r7, #20
 800a552:	46bd      	mov	sp, r7
 800a554:	bc80      	pop	{r7}
 800a556:	4770      	bx	lr

0800a558 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	781a      	ldrb	r2, [r3, #0]
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	4053      	eors	r3, r2
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	3301      	adds	r3, #1
 800a576:	7819      	ldrb	r1, [r3, #0]
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	3301      	adds	r3, #1
 800a57c:	781a      	ldrb	r2, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	3301      	adds	r3, #1
 800a582:	404a      	eors	r2, r1
 800a584:	b2d2      	uxtb	r2, r2
 800a586:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	3302      	adds	r3, #2
 800a58c:	7819      	ldrb	r1, [r3, #0]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	3302      	adds	r3, #2
 800a592:	781a      	ldrb	r2, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	3302      	adds	r3, #2
 800a598:	404a      	eors	r2, r1
 800a59a:	b2d2      	uxtb	r2, r2
 800a59c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	3303      	adds	r3, #3
 800a5a2:	7819      	ldrb	r1, [r3, #0]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	3303      	adds	r3, #3
 800a5a8:	781a      	ldrb	r2, [r3, #0]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3303      	adds	r3, #3
 800a5ae:	404a      	eors	r2, r1
 800a5b0:	b2d2      	uxtb	r2, r2
 800a5b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	3304      	adds	r3, #4
 800a5b8:	7819      	ldrb	r1, [r3, #0]
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	3304      	adds	r3, #4
 800a5be:	781a      	ldrb	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	404a      	eors	r2, r1
 800a5c6:	b2d2      	uxtb	r2, r2
 800a5c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	3305      	adds	r3, #5
 800a5ce:	7819      	ldrb	r1, [r3, #0]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	3305      	adds	r3, #5
 800a5d4:	781a      	ldrb	r2, [r3, #0]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	3305      	adds	r3, #5
 800a5da:	404a      	eors	r2, r1
 800a5dc:	b2d2      	uxtb	r2, r2
 800a5de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3306      	adds	r3, #6
 800a5e4:	7819      	ldrb	r1, [r3, #0]
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	3306      	adds	r3, #6
 800a5ea:	781a      	ldrb	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	3306      	adds	r3, #6
 800a5f0:	404a      	eors	r2, r1
 800a5f2:	b2d2      	uxtb	r2, r2
 800a5f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	3307      	adds	r3, #7
 800a5fa:	7819      	ldrb	r1, [r3, #0]
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	3307      	adds	r3, #7
 800a600:	781a      	ldrb	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3307      	adds	r3, #7
 800a606:	404a      	eors	r2, r1
 800a608:	b2d2      	uxtb	r2, r2
 800a60a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	3308      	adds	r3, #8
 800a610:	7819      	ldrb	r1, [r3, #0]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	3308      	adds	r3, #8
 800a616:	781a      	ldrb	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	3308      	adds	r3, #8
 800a61c:	404a      	eors	r2, r1
 800a61e:	b2d2      	uxtb	r2, r2
 800a620:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	3309      	adds	r3, #9
 800a626:	7819      	ldrb	r1, [r3, #0]
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	3309      	adds	r3, #9
 800a62c:	781a      	ldrb	r2, [r3, #0]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	3309      	adds	r3, #9
 800a632:	404a      	eors	r2, r1
 800a634:	b2d2      	uxtb	r2, r2
 800a636:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	330a      	adds	r3, #10
 800a63c:	7819      	ldrb	r1, [r3, #0]
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	330a      	adds	r3, #10
 800a642:	781a      	ldrb	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	330a      	adds	r3, #10
 800a648:	404a      	eors	r2, r1
 800a64a:	b2d2      	uxtb	r2, r2
 800a64c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	330b      	adds	r3, #11
 800a652:	7819      	ldrb	r1, [r3, #0]
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	330b      	adds	r3, #11
 800a658:	781a      	ldrb	r2, [r3, #0]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	330b      	adds	r3, #11
 800a65e:	404a      	eors	r2, r1
 800a660:	b2d2      	uxtb	r2, r2
 800a662:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	330c      	adds	r3, #12
 800a668:	7819      	ldrb	r1, [r3, #0]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	330c      	adds	r3, #12
 800a66e:	781a      	ldrb	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	330c      	adds	r3, #12
 800a674:	404a      	eors	r2, r1
 800a676:	b2d2      	uxtb	r2, r2
 800a678:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	330d      	adds	r3, #13
 800a67e:	7819      	ldrb	r1, [r3, #0]
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	330d      	adds	r3, #13
 800a684:	781a      	ldrb	r2, [r3, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	330d      	adds	r3, #13
 800a68a:	404a      	eors	r2, r1
 800a68c:	b2d2      	uxtb	r2, r2
 800a68e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	330e      	adds	r3, #14
 800a694:	7819      	ldrb	r1, [r3, #0]
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	330e      	adds	r3, #14
 800a69a:	781a      	ldrb	r2, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	330e      	adds	r3, #14
 800a6a0:	404a      	eors	r2, r1
 800a6a2:	b2d2      	uxtb	r2, r2
 800a6a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	330f      	adds	r3, #15
 800a6aa:	7819      	ldrb	r1, [r3, #0]
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	330f      	adds	r3, #15
 800a6b0:	781a      	ldrb	r2, [r3, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	330f      	adds	r3, #15
 800a6b6:	404a      	eors	r2, r1
 800a6b8:	b2d2      	uxtb	r2, r2
 800a6ba:	701a      	strb	r2, [r3, #0]
#endif
}
 800a6bc:	bf00      	nop
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bc80      	pop	{r7}
 800a6c4:	4770      	bx	lr

0800a6c6 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b085      	sub	sp, #20
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	60f8      	str	r0, [r7, #12]
 800a6ce:	60b9      	str	r1, [r7, #8]
 800a6d0:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	781a      	ldrb	r2, [r3, #0]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	4053      	eors	r3, r2
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	7819      	ldrb	r1, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	781a      	ldrb	r2, [r3, #0]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	404a      	eors	r2, r1
 800a6f4:	b2d2      	uxtb	r2, r2
 800a6f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	3302      	adds	r3, #2
 800a6fc:	7819      	ldrb	r1, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	3302      	adds	r3, #2
 800a702:	781a      	ldrb	r2, [r3, #0]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	3302      	adds	r3, #2
 800a708:	404a      	eors	r2, r1
 800a70a:	b2d2      	uxtb	r2, r2
 800a70c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	3303      	adds	r3, #3
 800a712:	7819      	ldrb	r1, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	3303      	adds	r3, #3
 800a718:	781a      	ldrb	r2, [r3, #0]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	3303      	adds	r3, #3
 800a71e:	404a      	eors	r2, r1
 800a720:	b2d2      	uxtb	r2, r2
 800a722:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	3304      	adds	r3, #4
 800a728:	7819      	ldrb	r1, [r3, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	3304      	adds	r3, #4
 800a72e:	781a      	ldrb	r2, [r3, #0]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	3304      	adds	r3, #4
 800a734:	404a      	eors	r2, r1
 800a736:	b2d2      	uxtb	r2, r2
 800a738:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	3305      	adds	r3, #5
 800a73e:	7819      	ldrb	r1, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	3305      	adds	r3, #5
 800a744:	781a      	ldrb	r2, [r3, #0]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3305      	adds	r3, #5
 800a74a:	404a      	eors	r2, r1
 800a74c:	b2d2      	uxtb	r2, r2
 800a74e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	3306      	adds	r3, #6
 800a754:	7819      	ldrb	r1, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	3306      	adds	r3, #6
 800a75a:	781a      	ldrb	r2, [r3, #0]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	3306      	adds	r3, #6
 800a760:	404a      	eors	r2, r1
 800a762:	b2d2      	uxtb	r2, r2
 800a764:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	3307      	adds	r3, #7
 800a76a:	7819      	ldrb	r1, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	3307      	adds	r3, #7
 800a770:	781a      	ldrb	r2, [r3, #0]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	3307      	adds	r3, #7
 800a776:	404a      	eors	r2, r1
 800a778:	b2d2      	uxtb	r2, r2
 800a77a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	3308      	adds	r3, #8
 800a780:	7819      	ldrb	r1, [r3, #0]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	3308      	adds	r3, #8
 800a786:	781a      	ldrb	r2, [r3, #0]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	3308      	adds	r3, #8
 800a78c:	404a      	eors	r2, r1
 800a78e:	b2d2      	uxtb	r2, r2
 800a790:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	3309      	adds	r3, #9
 800a796:	7819      	ldrb	r1, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	3309      	adds	r3, #9
 800a79c:	781a      	ldrb	r2, [r3, #0]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	3309      	adds	r3, #9
 800a7a2:	404a      	eors	r2, r1
 800a7a4:	b2d2      	uxtb	r2, r2
 800a7a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	330a      	adds	r3, #10
 800a7ac:	7819      	ldrb	r1, [r3, #0]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	330a      	adds	r3, #10
 800a7b2:	781a      	ldrb	r2, [r3, #0]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	330a      	adds	r3, #10
 800a7b8:	404a      	eors	r2, r1
 800a7ba:	b2d2      	uxtb	r2, r2
 800a7bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	330b      	adds	r3, #11
 800a7c2:	7819      	ldrb	r1, [r3, #0]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	330b      	adds	r3, #11
 800a7c8:	781a      	ldrb	r2, [r3, #0]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	330b      	adds	r3, #11
 800a7ce:	404a      	eors	r2, r1
 800a7d0:	b2d2      	uxtb	r2, r2
 800a7d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	330c      	adds	r3, #12
 800a7d8:	7819      	ldrb	r1, [r3, #0]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	330c      	adds	r3, #12
 800a7de:	781a      	ldrb	r2, [r3, #0]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	330c      	adds	r3, #12
 800a7e4:	404a      	eors	r2, r1
 800a7e6:	b2d2      	uxtb	r2, r2
 800a7e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	330d      	adds	r3, #13
 800a7ee:	7819      	ldrb	r1, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	330d      	adds	r3, #13
 800a7f4:	781a      	ldrb	r2, [r3, #0]
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	330d      	adds	r3, #13
 800a7fa:	404a      	eors	r2, r1
 800a7fc:	b2d2      	uxtb	r2, r2
 800a7fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	330e      	adds	r3, #14
 800a804:	7819      	ldrb	r1, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	330e      	adds	r3, #14
 800a80a:	781a      	ldrb	r2, [r3, #0]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	330e      	adds	r3, #14
 800a810:	404a      	eors	r2, r1
 800a812:	b2d2      	uxtb	r2, r2
 800a814:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	330f      	adds	r3, #15
 800a81a:	7819      	ldrb	r1, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	330f      	adds	r3, #15
 800a820:	781a      	ldrb	r2, [r3, #0]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	330f      	adds	r3, #15
 800a826:	404a      	eors	r2, r1
 800a828:	b2d2      	uxtb	r2, r2
 800a82a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800a82c:	bf00      	nop
 800a82e:	3714      	adds	r7, #20
 800a830:	46bd      	mov	sp, r7
 800a832:	bc80      	pop	{r7}
 800a834:	4770      	bx	lr

0800a836 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b082      	sub	sp, #8
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f7ff fe88 	bl	800a558 <xor_block>
}
 800a848:	bf00      	nop
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	461a      	mov	r2, r3
 800a85e:	4b48      	ldr	r3, [pc, #288]	@ (800a980 <shift_sub_rows+0x130>)
 800a860:	5c9a      	ldrb	r2, [r3, r2]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	701a      	strb	r2, [r3, #0]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	3304      	adds	r3, #4
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	4619      	mov	r1, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	3304      	adds	r3, #4
 800a872:	4a43      	ldr	r2, [pc, #268]	@ (800a980 <shift_sub_rows+0x130>)
 800a874:	5c52      	ldrb	r2, [r2, r1]
 800a876:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	3308      	adds	r3, #8
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	4619      	mov	r1, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	3308      	adds	r3, #8
 800a884:	4a3e      	ldr	r2, [pc, #248]	@ (800a980 <shift_sub_rows+0x130>)
 800a886:	5c52      	ldrb	r2, [r2, r1]
 800a888:	701a      	strb	r2, [r3, #0]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	330c      	adds	r3, #12
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	4619      	mov	r1, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	330c      	adds	r3, #12
 800a896:	4a3a      	ldr	r2, [pc, #232]	@ (800a980 <shift_sub_rows+0x130>)
 800a898:	5c52      	ldrb	r2, [r2, r1]
 800a89a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	785b      	ldrb	r3, [r3, #1]
 800a8a0:	73fb      	strb	r3, [r7, #15]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	3305      	adds	r3, #5
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	4a34      	ldr	r2, [pc, #208]	@ (800a980 <shift_sub_rows+0x130>)
 800a8b0:	5c52      	ldrb	r2, [r2, r1]
 800a8b2:	701a      	strb	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	3309      	adds	r3, #9
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	3305      	adds	r3, #5
 800a8c0:	4a2f      	ldr	r2, [pc, #188]	@ (800a980 <shift_sub_rows+0x130>)
 800a8c2:	5c52      	ldrb	r2, [r2, r1]
 800a8c4:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	330d      	adds	r3, #13
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	3309      	adds	r3, #9
 800a8d2:	4a2b      	ldr	r2, [pc, #172]	@ (800a980 <shift_sub_rows+0x130>)
 800a8d4:	5c52      	ldrb	r2, [r2, r1]
 800a8d6:	701a      	strb	r2, [r3, #0]
 800a8d8:	7bfa      	ldrb	r2, [r7, #15]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	330d      	adds	r3, #13
 800a8de:	4928      	ldr	r1, [pc, #160]	@ (800a980 <shift_sub_rows+0x130>)
 800a8e0:	5c8a      	ldrb	r2, [r1, r2]
 800a8e2:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	789b      	ldrb	r3, [r3, #2]
 800a8e8:	73fb      	strb	r3, [r7, #15]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	330a      	adds	r3, #10
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	3302      	adds	r3, #2
 800a8f6:	4a22      	ldr	r2, [pc, #136]	@ (800a980 <shift_sub_rows+0x130>)
 800a8f8:	5c52      	ldrb	r2, [r2, r1]
 800a8fa:	701a      	strb	r2, [r3, #0]
 800a8fc:	7bfa      	ldrb	r2, [r7, #15]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	330a      	adds	r3, #10
 800a902:	491f      	ldr	r1, [pc, #124]	@ (800a980 <shift_sub_rows+0x130>)
 800a904:	5c8a      	ldrb	r2, [r1, r2]
 800a906:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	799b      	ldrb	r3, [r3, #6]
 800a90c:	73fb      	strb	r3, [r7, #15]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	330e      	adds	r3, #14
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	4619      	mov	r1, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	3306      	adds	r3, #6
 800a91a:	4a19      	ldr	r2, [pc, #100]	@ (800a980 <shift_sub_rows+0x130>)
 800a91c:	5c52      	ldrb	r2, [r2, r1]
 800a91e:	701a      	strb	r2, [r3, #0]
 800a920:	7bfa      	ldrb	r2, [r7, #15]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	330e      	adds	r3, #14
 800a926:	4916      	ldr	r1, [pc, #88]	@ (800a980 <shift_sub_rows+0x130>)
 800a928:	5c8a      	ldrb	r2, [r1, r2]
 800a92a:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	7bdb      	ldrb	r3, [r3, #15]
 800a930:	73fb      	strb	r3, [r7, #15]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	330b      	adds	r3, #11
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	4619      	mov	r1, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	330f      	adds	r3, #15
 800a93e:	4a10      	ldr	r2, [pc, #64]	@ (800a980 <shift_sub_rows+0x130>)
 800a940:	5c52      	ldrb	r2, [r2, r1]
 800a942:	701a      	strb	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	3307      	adds	r3, #7
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	4619      	mov	r1, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	330b      	adds	r3, #11
 800a950:	4a0b      	ldr	r2, [pc, #44]	@ (800a980 <shift_sub_rows+0x130>)
 800a952:	5c52      	ldrb	r2, [r2, r1]
 800a954:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	3303      	adds	r3, #3
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	4619      	mov	r1, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	3307      	adds	r3, #7
 800a962:	4a07      	ldr	r2, [pc, #28]	@ (800a980 <shift_sub_rows+0x130>)
 800a964:	5c52      	ldrb	r2, [r2, r1]
 800a966:	701a      	strb	r2, [r3, #0]
 800a968:	7bfa      	ldrb	r2, [r7, #15]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	3303      	adds	r3, #3
 800a96e:	4904      	ldr	r1, [pc, #16]	@ (800a980 <shift_sub_rows+0x130>)
 800a970:	5c8a      	ldrb	r2, [r1, r2]
 800a972:	701a      	strb	r2, [r3, #0]
}
 800a974:	bf00      	nop
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	bc80      	pop	{r7}
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	0801d84c 	.word	0x0801d84c

0800a984 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800a984:	b580      	push	{r7, lr}
 800a986:	b086      	sub	sp, #24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800a98c:	f107 0308 	add.w	r3, r7, #8
 800a990:	6879      	ldr	r1, [r7, #4]
 800a992:	4618      	mov	r0, r3
 800a994:	f7ff fd6c 	bl	800a470 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800a998:	7a3b      	ldrb	r3, [r7, #8]
 800a99a:	461a      	mov	r2, r3
 800a99c:	4b9a      	ldr	r3, [pc, #616]	@ (800ac08 <mix_sub_columns+0x284>)
 800a99e:	5c9a      	ldrb	r2, [r3, r2]
 800a9a0:	7b7b      	ldrb	r3, [r7, #13]
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	4b99      	ldr	r3, [pc, #612]	@ (800ac0c <mix_sub_columns+0x288>)
 800a9a6:	5c5b      	ldrb	r3, [r3, r1]
 800a9a8:	4053      	eors	r3, r2
 800a9aa:	b2da      	uxtb	r2, r3
 800a9ac:	7cbb      	ldrb	r3, [r7, #18]
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	4b97      	ldr	r3, [pc, #604]	@ (800ac10 <mix_sub_columns+0x28c>)
 800a9b2:	5c5b      	ldrb	r3, [r3, r1]
 800a9b4:	4053      	eors	r3, r2
 800a9b6:	b2da      	uxtb	r2, r3
 800a9b8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	4b94      	ldr	r3, [pc, #592]	@ (800ac10 <mix_sub_columns+0x28c>)
 800a9be:	5c5b      	ldrb	r3, [r3, r1]
 800a9c0:	4053      	eors	r3, r2
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800a9c8:	7a3b      	ldrb	r3, [r7, #8]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	4b90      	ldr	r3, [pc, #576]	@ (800ac10 <mix_sub_columns+0x28c>)
 800a9ce:	5c9a      	ldrb	r2, [r3, r2]
 800a9d0:	7b7b      	ldrb	r3, [r7, #13]
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	4b8c      	ldr	r3, [pc, #560]	@ (800ac08 <mix_sub_columns+0x284>)
 800a9d6:	5c5b      	ldrb	r3, [r3, r1]
 800a9d8:	4053      	eors	r3, r2
 800a9da:	b2da      	uxtb	r2, r3
 800a9dc:	7cbb      	ldrb	r3, [r7, #18]
 800a9de:	4619      	mov	r1, r3
 800a9e0:	4b8a      	ldr	r3, [pc, #552]	@ (800ac0c <mix_sub_columns+0x288>)
 800a9e2:	5c5b      	ldrb	r3, [r3, r1]
 800a9e4:	4053      	eors	r3, r2
 800a9e6:	b2d9      	uxtb	r1, r3
 800a9e8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	4b88      	ldr	r3, [pc, #544]	@ (800ac10 <mix_sub_columns+0x28c>)
 800a9ee:	5c9a      	ldrb	r2, [r3, r2]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	404a      	eors	r2, r1
 800a9f6:	b2d2      	uxtb	r2, r2
 800a9f8:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800a9fa:	7a3b      	ldrb	r3, [r7, #8]
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	4b84      	ldr	r3, [pc, #528]	@ (800ac10 <mix_sub_columns+0x28c>)
 800aa00:	5c9a      	ldrb	r2, [r3, r2]
 800aa02:	7b7b      	ldrb	r3, [r7, #13]
 800aa04:	4619      	mov	r1, r3
 800aa06:	4b82      	ldr	r3, [pc, #520]	@ (800ac10 <mix_sub_columns+0x28c>)
 800aa08:	5c5b      	ldrb	r3, [r3, r1]
 800aa0a:	4053      	eors	r3, r2
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	7cbb      	ldrb	r3, [r7, #18]
 800aa10:	4619      	mov	r1, r3
 800aa12:	4b7d      	ldr	r3, [pc, #500]	@ (800ac08 <mix_sub_columns+0x284>)
 800aa14:	5c5b      	ldrb	r3, [r3, r1]
 800aa16:	4053      	eors	r3, r2
 800aa18:	b2d9      	uxtb	r1, r3
 800aa1a:	7dfb      	ldrb	r3, [r7, #23]
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	4b7b      	ldr	r3, [pc, #492]	@ (800ac0c <mix_sub_columns+0x288>)
 800aa20:	5c9a      	ldrb	r2, [r3, r2]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	3302      	adds	r3, #2
 800aa26:	404a      	eors	r2, r1
 800aa28:	b2d2      	uxtb	r2, r2
 800aa2a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800aa2c:	7a3b      	ldrb	r3, [r7, #8]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	4b76      	ldr	r3, [pc, #472]	@ (800ac0c <mix_sub_columns+0x288>)
 800aa32:	5c9a      	ldrb	r2, [r3, r2]
 800aa34:	7b7b      	ldrb	r3, [r7, #13]
 800aa36:	4619      	mov	r1, r3
 800aa38:	4b75      	ldr	r3, [pc, #468]	@ (800ac10 <mix_sub_columns+0x28c>)
 800aa3a:	5c5b      	ldrb	r3, [r3, r1]
 800aa3c:	4053      	eors	r3, r2
 800aa3e:	b2da      	uxtb	r2, r3
 800aa40:	7cbb      	ldrb	r3, [r7, #18]
 800aa42:	4619      	mov	r1, r3
 800aa44:	4b72      	ldr	r3, [pc, #456]	@ (800ac10 <mix_sub_columns+0x28c>)
 800aa46:	5c5b      	ldrb	r3, [r3, r1]
 800aa48:	4053      	eors	r3, r2
 800aa4a:	b2d9      	uxtb	r1, r3
 800aa4c:	7dfb      	ldrb	r3, [r7, #23]
 800aa4e:	461a      	mov	r2, r3
 800aa50:	4b6d      	ldr	r3, [pc, #436]	@ (800ac08 <mix_sub_columns+0x284>)
 800aa52:	5c9a      	ldrb	r2, [r3, r2]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	3303      	adds	r3, #3
 800aa58:	404a      	eors	r2, r1
 800aa5a:	b2d2      	uxtb	r2, r2
 800aa5c:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800aa5e:	7b3b      	ldrb	r3, [r7, #12]
 800aa60:	461a      	mov	r2, r3
 800aa62:	4b69      	ldr	r3, [pc, #420]	@ (800ac08 <mix_sub_columns+0x284>)
 800aa64:	5c9a      	ldrb	r2, [r3, r2]
 800aa66:	7c7b      	ldrb	r3, [r7, #17]
 800aa68:	4619      	mov	r1, r3
 800aa6a:	4b68      	ldr	r3, [pc, #416]	@ (800ac0c <mix_sub_columns+0x288>)
 800aa6c:	5c5b      	ldrb	r3, [r3, r1]
 800aa6e:	4053      	eors	r3, r2
 800aa70:	b2da      	uxtb	r2, r3
 800aa72:	7dbb      	ldrb	r3, [r7, #22]
 800aa74:	4619      	mov	r1, r3
 800aa76:	4b66      	ldr	r3, [pc, #408]	@ (800ac10 <mix_sub_columns+0x28c>)
 800aa78:	5c5b      	ldrb	r3, [r3, r1]
 800aa7a:	4053      	eors	r3, r2
 800aa7c:	b2d9      	uxtb	r1, r3
 800aa7e:	7afb      	ldrb	r3, [r7, #11]
 800aa80:	461a      	mov	r2, r3
 800aa82:	4b63      	ldr	r3, [pc, #396]	@ (800ac10 <mix_sub_columns+0x28c>)
 800aa84:	5c9a      	ldrb	r2, [r3, r2]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	3304      	adds	r3, #4
 800aa8a:	404a      	eors	r2, r1
 800aa8c:	b2d2      	uxtb	r2, r2
 800aa8e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800aa90:	7b3b      	ldrb	r3, [r7, #12]
 800aa92:	461a      	mov	r2, r3
 800aa94:	4b5e      	ldr	r3, [pc, #376]	@ (800ac10 <mix_sub_columns+0x28c>)
 800aa96:	5c9a      	ldrb	r2, [r3, r2]
 800aa98:	7c7b      	ldrb	r3, [r7, #17]
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	4b5a      	ldr	r3, [pc, #360]	@ (800ac08 <mix_sub_columns+0x284>)
 800aa9e:	5c5b      	ldrb	r3, [r3, r1]
 800aaa0:	4053      	eors	r3, r2
 800aaa2:	b2da      	uxtb	r2, r3
 800aaa4:	7dbb      	ldrb	r3, [r7, #22]
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	4b58      	ldr	r3, [pc, #352]	@ (800ac0c <mix_sub_columns+0x288>)
 800aaaa:	5c5b      	ldrb	r3, [r3, r1]
 800aaac:	4053      	eors	r3, r2
 800aaae:	b2d9      	uxtb	r1, r3
 800aab0:	7afb      	ldrb	r3, [r7, #11]
 800aab2:	461a      	mov	r2, r3
 800aab4:	4b56      	ldr	r3, [pc, #344]	@ (800ac10 <mix_sub_columns+0x28c>)
 800aab6:	5c9a      	ldrb	r2, [r3, r2]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	3305      	adds	r3, #5
 800aabc:	404a      	eors	r2, r1
 800aabe:	b2d2      	uxtb	r2, r2
 800aac0:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800aac2:	7b3b      	ldrb	r3, [r7, #12]
 800aac4:	461a      	mov	r2, r3
 800aac6:	4b52      	ldr	r3, [pc, #328]	@ (800ac10 <mix_sub_columns+0x28c>)
 800aac8:	5c9a      	ldrb	r2, [r3, r2]
 800aaca:	7c7b      	ldrb	r3, [r7, #17]
 800aacc:	4619      	mov	r1, r3
 800aace:	4b50      	ldr	r3, [pc, #320]	@ (800ac10 <mix_sub_columns+0x28c>)
 800aad0:	5c5b      	ldrb	r3, [r3, r1]
 800aad2:	4053      	eors	r3, r2
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	7dbb      	ldrb	r3, [r7, #22]
 800aad8:	4619      	mov	r1, r3
 800aada:	4b4b      	ldr	r3, [pc, #300]	@ (800ac08 <mix_sub_columns+0x284>)
 800aadc:	5c5b      	ldrb	r3, [r3, r1]
 800aade:	4053      	eors	r3, r2
 800aae0:	b2d9      	uxtb	r1, r3
 800aae2:	7afb      	ldrb	r3, [r7, #11]
 800aae4:	461a      	mov	r2, r3
 800aae6:	4b49      	ldr	r3, [pc, #292]	@ (800ac0c <mix_sub_columns+0x288>)
 800aae8:	5c9a      	ldrb	r2, [r3, r2]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	3306      	adds	r3, #6
 800aaee:	404a      	eors	r2, r1
 800aaf0:	b2d2      	uxtb	r2, r2
 800aaf2:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800aaf4:	7b3b      	ldrb	r3, [r7, #12]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	4b44      	ldr	r3, [pc, #272]	@ (800ac0c <mix_sub_columns+0x288>)
 800aafa:	5c9a      	ldrb	r2, [r3, r2]
 800aafc:	7c7b      	ldrb	r3, [r7, #17]
 800aafe:	4619      	mov	r1, r3
 800ab00:	4b43      	ldr	r3, [pc, #268]	@ (800ac10 <mix_sub_columns+0x28c>)
 800ab02:	5c5b      	ldrb	r3, [r3, r1]
 800ab04:	4053      	eors	r3, r2
 800ab06:	b2da      	uxtb	r2, r3
 800ab08:	7dbb      	ldrb	r3, [r7, #22]
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	4b40      	ldr	r3, [pc, #256]	@ (800ac10 <mix_sub_columns+0x28c>)
 800ab0e:	5c5b      	ldrb	r3, [r3, r1]
 800ab10:	4053      	eors	r3, r2
 800ab12:	b2d9      	uxtb	r1, r3
 800ab14:	7afb      	ldrb	r3, [r7, #11]
 800ab16:	461a      	mov	r2, r3
 800ab18:	4b3b      	ldr	r3, [pc, #236]	@ (800ac08 <mix_sub_columns+0x284>)
 800ab1a:	5c9a      	ldrb	r2, [r3, r2]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	3307      	adds	r3, #7
 800ab20:	404a      	eors	r2, r1
 800ab22:	b2d2      	uxtb	r2, r2
 800ab24:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ab26:	7c3b      	ldrb	r3, [r7, #16]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	4b37      	ldr	r3, [pc, #220]	@ (800ac08 <mix_sub_columns+0x284>)
 800ab2c:	5c9a      	ldrb	r2, [r3, r2]
 800ab2e:	7d7b      	ldrb	r3, [r7, #21]
 800ab30:	4619      	mov	r1, r3
 800ab32:	4b36      	ldr	r3, [pc, #216]	@ (800ac0c <mix_sub_columns+0x288>)
 800ab34:	5c5b      	ldrb	r3, [r3, r1]
 800ab36:	4053      	eors	r3, r2
 800ab38:	b2da      	uxtb	r2, r3
 800ab3a:	7abb      	ldrb	r3, [r7, #10]
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	4b34      	ldr	r3, [pc, #208]	@ (800ac10 <mix_sub_columns+0x28c>)
 800ab40:	5c5b      	ldrb	r3, [r3, r1]
 800ab42:	4053      	eors	r3, r2
 800ab44:	b2d9      	uxtb	r1, r3
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
 800ab48:	461a      	mov	r2, r3
 800ab4a:	4b31      	ldr	r3, [pc, #196]	@ (800ac10 <mix_sub_columns+0x28c>)
 800ab4c:	5c9a      	ldrb	r2, [r3, r2]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	3308      	adds	r3, #8
 800ab52:	404a      	eors	r2, r1
 800ab54:	b2d2      	uxtb	r2, r2
 800ab56:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ab58:	7c3b      	ldrb	r3, [r7, #16]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	4b2c      	ldr	r3, [pc, #176]	@ (800ac10 <mix_sub_columns+0x28c>)
 800ab5e:	5c9a      	ldrb	r2, [r3, r2]
 800ab60:	7d7b      	ldrb	r3, [r7, #21]
 800ab62:	4619      	mov	r1, r3
 800ab64:	4b28      	ldr	r3, [pc, #160]	@ (800ac08 <mix_sub_columns+0x284>)
 800ab66:	5c5b      	ldrb	r3, [r3, r1]
 800ab68:	4053      	eors	r3, r2
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	7abb      	ldrb	r3, [r7, #10]
 800ab6e:	4619      	mov	r1, r3
 800ab70:	4b26      	ldr	r3, [pc, #152]	@ (800ac0c <mix_sub_columns+0x288>)
 800ab72:	5c5b      	ldrb	r3, [r3, r1]
 800ab74:	4053      	eors	r3, r2
 800ab76:	b2d9      	uxtb	r1, r3
 800ab78:	7bfb      	ldrb	r3, [r7, #15]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	4b24      	ldr	r3, [pc, #144]	@ (800ac10 <mix_sub_columns+0x28c>)
 800ab7e:	5c9a      	ldrb	r2, [r3, r2]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	3309      	adds	r3, #9
 800ab84:	404a      	eors	r2, r1
 800ab86:	b2d2      	uxtb	r2, r2
 800ab88:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800ab8a:	7c3b      	ldrb	r3, [r7, #16]
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	4b20      	ldr	r3, [pc, #128]	@ (800ac10 <mix_sub_columns+0x28c>)
 800ab90:	5c9a      	ldrb	r2, [r3, r2]
 800ab92:	7d7b      	ldrb	r3, [r7, #21]
 800ab94:	4619      	mov	r1, r3
 800ab96:	4b1e      	ldr	r3, [pc, #120]	@ (800ac10 <mix_sub_columns+0x28c>)
 800ab98:	5c5b      	ldrb	r3, [r3, r1]
 800ab9a:	4053      	eors	r3, r2
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	7abb      	ldrb	r3, [r7, #10]
 800aba0:	4619      	mov	r1, r3
 800aba2:	4b19      	ldr	r3, [pc, #100]	@ (800ac08 <mix_sub_columns+0x284>)
 800aba4:	5c5b      	ldrb	r3, [r3, r1]
 800aba6:	4053      	eors	r3, r2
 800aba8:	b2d9      	uxtb	r1, r3
 800abaa:	7bfb      	ldrb	r3, [r7, #15]
 800abac:	461a      	mov	r2, r3
 800abae:	4b17      	ldr	r3, [pc, #92]	@ (800ac0c <mix_sub_columns+0x288>)
 800abb0:	5c9a      	ldrb	r2, [r3, r2]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	330a      	adds	r3, #10
 800abb6:	404a      	eors	r2, r1
 800abb8:	b2d2      	uxtb	r2, r2
 800abba:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800abbc:	7c3b      	ldrb	r3, [r7, #16]
 800abbe:	461a      	mov	r2, r3
 800abc0:	4b12      	ldr	r3, [pc, #72]	@ (800ac0c <mix_sub_columns+0x288>)
 800abc2:	5c9a      	ldrb	r2, [r3, r2]
 800abc4:	7d7b      	ldrb	r3, [r7, #21]
 800abc6:	4619      	mov	r1, r3
 800abc8:	4b11      	ldr	r3, [pc, #68]	@ (800ac10 <mix_sub_columns+0x28c>)
 800abca:	5c5b      	ldrb	r3, [r3, r1]
 800abcc:	4053      	eors	r3, r2
 800abce:	b2da      	uxtb	r2, r3
 800abd0:	7abb      	ldrb	r3, [r7, #10]
 800abd2:	4619      	mov	r1, r3
 800abd4:	4b0e      	ldr	r3, [pc, #56]	@ (800ac10 <mix_sub_columns+0x28c>)
 800abd6:	5c5b      	ldrb	r3, [r3, r1]
 800abd8:	4053      	eors	r3, r2
 800abda:	b2d9      	uxtb	r1, r3
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
 800abde:	461a      	mov	r2, r3
 800abe0:	4b09      	ldr	r3, [pc, #36]	@ (800ac08 <mix_sub_columns+0x284>)
 800abe2:	5c9a      	ldrb	r2, [r3, r2]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	330b      	adds	r3, #11
 800abe8:	404a      	eors	r2, r1
 800abea:	b2d2      	uxtb	r2, r2
 800abec:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800abee:	7d3b      	ldrb	r3, [r7, #20]
 800abf0:	461a      	mov	r2, r3
 800abf2:	4b05      	ldr	r3, [pc, #20]	@ (800ac08 <mix_sub_columns+0x284>)
 800abf4:	5c9a      	ldrb	r2, [r3, r2]
 800abf6:	7a7b      	ldrb	r3, [r7, #9]
 800abf8:	4619      	mov	r1, r3
 800abfa:	4b04      	ldr	r3, [pc, #16]	@ (800ac0c <mix_sub_columns+0x288>)
 800abfc:	5c5b      	ldrb	r3, [r3, r1]
 800abfe:	4053      	eors	r3, r2
 800ac00:	b2da      	uxtb	r2, r3
 800ac02:	7bbb      	ldrb	r3, [r7, #14]
 800ac04:	4619      	mov	r1, r3
 800ac06:	e005      	b.n	800ac14 <mix_sub_columns+0x290>
 800ac08:	0801d94c 	.word	0x0801d94c
 800ac0c:	0801da4c 	.word	0x0801da4c
 800ac10:	0801d84c 	.word	0x0801d84c
 800ac14:	4b2d      	ldr	r3, [pc, #180]	@ (800accc <mix_sub_columns+0x348>)
 800ac16:	5c5b      	ldrb	r3, [r3, r1]
 800ac18:	4053      	eors	r3, r2
 800ac1a:	b2d9      	uxtb	r1, r3
 800ac1c:	7cfb      	ldrb	r3, [r7, #19]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	4b2a      	ldr	r3, [pc, #168]	@ (800accc <mix_sub_columns+0x348>)
 800ac22:	5c9a      	ldrb	r2, [r3, r2]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	330c      	adds	r3, #12
 800ac28:	404a      	eors	r2, r1
 800ac2a:	b2d2      	uxtb	r2, r2
 800ac2c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800ac2e:	7d3b      	ldrb	r3, [r7, #20]
 800ac30:	461a      	mov	r2, r3
 800ac32:	4b26      	ldr	r3, [pc, #152]	@ (800accc <mix_sub_columns+0x348>)
 800ac34:	5c9a      	ldrb	r2, [r3, r2]
 800ac36:	7a7b      	ldrb	r3, [r7, #9]
 800ac38:	4619      	mov	r1, r3
 800ac3a:	4b25      	ldr	r3, [pc, #148]	@ (800acd0 <mix_sub_columns+0x34c>)
 800ac3c:	5c5b      	ldrb	r3, [r3, r1]
 800ac3e:	4053      	eors	r3, r2
 800ac40:	b2da      	uxtb	r2, r3
 800ac42:	7bbb      	ldrb	r3, [r7, #14]
 800ac44:	4619      	mov	r1, r3
 800ac46:	4b23      	ldr	r3, [pc, #140]	@ (800acd4 <mix_sub_columns+0x350>)
 800ac48:	5c5b      	ldrb	r3, [r3, r1]
 800ac4a:	4053      	eors	r3, r2
 800ac4c:	b2d9      	uxtb	r1, r3
 800ac4e:	7cfb      	ldrb	r3, [r7, #19]
 800ac50:	461a      	mov	r2, r3
 800ac52:	4b1e      	ldr	r3, [pc, #120]	@ (800accc <mix_sub_columns+0x348>)
 800ac54:	5c9a      	ldrb	r2, [r3, r2]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	330d      	adds	r3, #13
 800ac5a:	404a      	eors	r2, r1
 800ac5c:	b2d2      	uxtb	r2, r2
 800ac5e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800ac60:	7d3b      	ldrb	r3, [r7, #20]
 800ac62:	461a      	mov	r2, r3
 800ac64:	4b19      	ldr	r3, [pc, #100]	@ (800accc <mix_sub_columns+0x348>)
 800ac66:	5c9a      	ldrb	r2, [r3, r2]
 800ac68:	7a7b      	ldrb	r3, [r7, #9]
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	4b17      	ldr	r3, [pc, #92]	@ (800accc <mix_sub_columns+0x348>)
 800ac6e:	5c5b      	ldrb	r3, [r3, r1]
 800ac70:	4053      	eors	r3, r2
 800ac72:	b2da      	uxtb	r2, r3
 800ac74:	7bbb      	ldrb	r3, [r7, #14]
 800ac76:	4619      	mov	r1, r3
 800ac78:	4b15      	ldr	r3, [pc, #84]	@ (800acd0 <mix_sub_columns+0x34c>)
 800ac7a:	5c5b      	ldrb	r3, [r3, r1]
 800ac7c:	4053      	eors	r3, r2
 800ac7e:	b2d9      	uxtb	r1, r3
 800ac80:	7cfb      	ldrb	r3, [r7, #19]
 800ac82:	461a      	mov	r2, r3
 800ac84:	4b13      	ldr	r3, [pc, #76]	@ (800acd4 <mix_sub_columns+0x350>)
 800ac86:	5c9a      	ldrb	r2, [r3, r2]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	330e      	adds	r3, #14
 800ac8c:	404a      	eors	r2, r1
 800ac8e:	b2d2      	uxtb	r2, r2
 800ac90:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800ac92:	7d3b      	ldrb	r3, [r7, #20]
 800ac94:	461a      	mov	r2, r3
 800ac96:	4b0f      	ldr	r3, [pc, #60]	@ (800acd4 <mix_sub_columns+0x350>)
 800ac98:	5c9a      	ldrb	r2, [r3, r2]
 800ac9a:	7a7b      	ldrb	r3, [r7, #9]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	4b0b      	ldr	r3, [pc, #44]	@ (800accc <mix_sub_columns+0x348>)
 800aca0:	5c5b      	ldrb	r3, [r3, r1]
 800aca2:	4053      	eors	r3, r2
 800aca4:	b2da      	uxtb	r2, r3
 800aca6:	7bbb      	ldrb	r3, [r7, #14]
 800aca8:	4619      	mov	r1, r3
 800acaa:	4b08      	ldr	r3, [pc, #32]	@ (800accc <mix_sub_columns+0x348>)
 800acac:	5c5b      	ldrb	r3, [r3, r1]
 800acae:	4053      	eors	r3, r2
 800acb0:	b2d9      	uxtb	r1, r3
 800acb2:	7cfb      	ldrb	r3, [r7, #19]
 800acb4:	461a      	mov	r2, r3
 800acb6:	4b06      	ldr	r3, [pc, #24]	@ (800acd0 <mix_sub_columns+0x34c>)
 800acb8:	5c9a      	ldrb	r2, [r3, r2]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	330f      	adds	r3, #15
 800acbe:	404a      	eors	r2, r1
 800acc0:	b2d2      	uxtb	r2, r2
 800acc2:	701a      	strb	r2, [r3, #0]
  }
 800acc4:	bf00      	nop
 800acc6:	3718      	adds	r7, #24
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	0801d84c 	.word	0x0801d84c
 800acd0:	0801d94c 	.word	0x0801d94c
 800acd4:	0801da4c 	.word	0x0801da4c

0800acd8 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b086      	sub	sp, #24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	460b      	mov	r3, r1
 800ace2:	607a      	str	r2, [r7, #4]
 800ace4:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800ace6:	7afb      	ldrb	r3, [r7, #11]
 800ace8:	3b10      	subs	r3, #16
 800acea:	2b10      	cmp	r3, #16
 800acec:	bf8c      	ite	hi
 800acee:	2201      	movhi	r2, #1
 800acf0:	2200      	movls	r2, #0
 800acf2:	b2d2      	uxtb	r2, r2
 800acf4:	2a00      	cmp	r2, #0
 800acf6:	d10b      	bne.n	800ad10 <lorawan_aes_set_key+0x38>
 800acf8:	4a64      	ldr	r2, [pc, #400]	@ (800ae8c <lorawan_aes_set_key+0x1b4>)
 800acfa:	fa22 f303 	lsr.w	r3, r2, r3
 800acfe:	f003 0301 	and.w	r3, r3, #1
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	bf14      	ite	ne
 800ad06:	2301      	movne	r3, #1
 800ad08:	2300      	moveq	r3, #0
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d105      	bne.n	800ad1c <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800ad18:	23ff      	movs	r3, #255	@ 0xff
 800ad1a:	e0b2      	b.n	800ae82 <lorawan_aes_set_key+0x1aa>
        break;
 800ad1c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	7afa      	ldrb	r2, [r7, #11]
 800ad22:	68f9      	ldr	r1, [r7, #12]
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7ff fbfc 	bl	800a522 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800ad2a:	7afb      	ldrb	r3, [r7, #11]
 800ad2c:	331c      	adds	r3, #28
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800ad34:	7c7b      	ldrb	r3, [r7, #17]
 800ad36:	091b      	lsrs	r3, r3, #4
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ad44:	7afb      	ldrb	r3, [r7, #11]
 800ad46:	75fb      	strb	r3, [r7, #23]
 800ad48:	2301      	movs	r3, #1
 800ad4a:	75bb      	strb	r3, [r7, #22]
 800ad4c:	e093      	b.n	800ae76 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800ad4e:	7dfb      	ldrb	r3, [r7, #23]
 800ad50:	3b04      	subs	r3, #4
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	5cd3      	ldrb	r3, [r2, r3]
 800ad56:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
 800ad5a:	3b03      	subs	r3, #3
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	5cd3      	ldrb	r3, [r2, r3]
 800ad60:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800ad62:	7dfb      	ldrb	r3, [r7, #23]
 800ad64:	3b02      	subs	r3, #2
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	5cd3      	ldrb	r3, [r2, r3]
 800ad6a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800ad6c:	7dfb      	ldrb	r3, [r7, #23]
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	5cd3      	ldrb	r3, [r2, r3]
 800ad74:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800ad76:	7dfb      	ldrb	r3, [r7, #23]
 800ad78:	7afa      	ldrb	r2, [r7, #11]
 800ad7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad7e:	fb01 f202 	mul.w	r2, r1, r2
 800ad82:	1a9b      	subs	r3, r3, r2
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d127      	bne.n	800adda <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800ad8a:	7d7b      	ldrb	r3, [r7, #21]
 800ad8c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800ad8e:	7d3b      	ldrb	r3, [r7, #20]
 800ad90:	4a3f      	ldr	r2, [pc, #252]	@ (800ae90 <lorawan_aes_set_key+0x1b8>)
 800ad92:	5cd2      	ldrb	r2, [r2, r3]
 800ad94:	7dbb      	ldrb	r3, [r7, #22]
 800ad96:	4053      	eors	r3, r2
 800ad98:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800ad9a:	7cfb      	ldrb	r3, [r7, #19]
 800ad9c:	4a3c      	ldr	r2, [pc, #240]	@ (800ae90 <lorawan_aes_set_key+0x1b8>)
 800ad9e:	5cd3      	ldrb	r3, [r2, r3]
 800ada0:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ada2:	7cbb      	ldrb	r3, [r7, #18]
 800ada4:	4a3a      	ldr	r2, [pc, #232]	@ (800ae90 <lorawan_aes_set_key+0x1b8>)
 800ada6:	5cd3      	ldrb	r3, [r2, r3]
 800ada8:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800adaa:	7c3b      	ldrb	r3, [r7, #16]
 800adac:	4a38      	ldr	r2, [pc, #224]	@ (800ae90 <lorawan_aes_set_key+0x1b8>)
 800adae:	5cd3      	ldrb	r3, [r2, r3]
 800adb0:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800adb2:	7dbb      	ldrb	r3, [r7, #22]
 800adb4:	005b      	lsls	r3, r3, #1
 800adb6:	b25a      	sxtb	r2, r3
 800adb8:	7dbb      	ldrb	r3, [r7, #22]
 800adba:	09db      	lsrs	r3, r3, #7
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	4619      	mov	r1, r3
 800adc0:	0049      	lsls	r1, r1, #1
 800adc2:	440b      	add	r3, r1
 800adc4:	4619      	mov	r1, r3
 800adc6:	00c8      	lsls	r0, r1, #3
 800adc8:	4619      	mov	r1, r3
 800adca:	4603      	mov	r3, r0
 800adcc:	440b      	add	r3, r1
 800adce:	b2db      	uxtb	r3, r3
 800add0:	b25b      	sxtb	r3, r3
 800add2:	4053      	eors	r3, r2
 800add4:	b25b      	sxtb	r3, r3
 800add6:	75bb      	strb	r3, [r7, #22]
 800add8:	e01c      	b.n	800ae14 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800adda:	7afb      	ldrb	r3, [r7, #11]
 800addc:	2b18      	cmp	r3, #24
 800adde:	d919      	bls.n	800ae14 <lorawan_aes_set_key+0x13c>
 800ade0:	7dfb      	ldrb	r3, [r7, #23]
 800ade2:	7afa      	ldrb	r2, [r7, #11]
 800ade4:	fbb3 f1f2 	udiv	r1, r3, r2
 800ade8:	fb01 f202 	mul.w	r2, r1, r2
 800adec:	1a9b      	subs	r3, r3, r2
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	2b10      	cmp	r3, #16
 800adf2:	d10f      	bne.n	800ae14 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800adf4:	7d7b      	ldrb	r3, [r7, #21]
 800adf6:	4a26      	ldr	r2, [pc, #152]	@ (800ae90 <lorawan_aes_set_key+0x1b8>)
 800adf8:	5cd3      	ldrb	r3, [r2, r3]
 800adfa:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800adfc:	7d3b      	ldrb	r3, [r7, #20]
 800adfe:	4a24      	ldr	r2, [pc, #144]	@ (800ae90 <lorawan_aes_set_key+0x1b8>)
 800ae00:	5cd3      	ldrb	r3, [r2, r3]
 800ae02:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800ae04:	7cfb      	ldrb	r3, [r7, #19]
 800ae06:	4a22      	ldr	r2, [pc, #136]	@ (800ae90 <lorawan_aes_set_key+0x1b8>)
 800ae08:	5cd3      	ldrb	r3, [r2, r3]
 800ae0a:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800ae0c:	7cbb      	ldrb	r3, [r7, #18]
 800ae0e:	4a20      	ldr	r2, [pc, #128]	@ (800ae90 <lorawan_aes_set_key+0x1b8>)
 800ae10:	5cd3      	ldrb	r3, [r2, r3]
 800ae12:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800ae14:	7dfa      	ldrb	r2, [r7, #23]
 800ae16:	7afb      	ldrb	r3, [r7, #11]
 800ae18:	1ad3      	subs	r3, r2, r3
 800ae1a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ae1c:	7c3b      	ldrb	r3, [r7, #16]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	5cd1      	ldrb	r1, [r2, r3]
 800ae22:	7dfb      	ldrb	r3, [r7, #23]
 800ae24:	7d7a      	ldrb	r2, [r7, #21]
 800ae26:	404a      	eors	r2, r1
 800ae28:	b2d1      	uxtb	r1, r2
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ae2e:	7c3b      	ldrb	r3, [r7, #16]
 800ae30:	3301      	adds	r3, #1
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	5cd1      	ldrb	r1, [r2, r3]
 800ae36:	7dfb      	ldrb	r3, [r7, #23]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	7d3a      	ldrb	r2, [r7, #20]
 800ae3c:	404a      	eors	r2, r1
 800ae3e:	b2d1      	uxtb	r1, r2
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800ae44:	7c3b      	ldrb	r3, [r7, #16]
 800ae46:	3302      	adds	r3, #2
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	5cd1      	ldrb	r1, [r2, r3]
 800ae4c:	7dfb      	ldrb	r3, [r7, #23]
 800ae4e:	3302      	adds	r3, #2
 800ae50:	7cfa      	ldrb	r2, [r7, #19]
 800ae52:	404a      	eors	r2, r1
 800ae54:	b2d1      	uxtb	r1, r2
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800ae5a:	7c3b      	ldrb	r3, [r7, #16]
 800ae5c:	3303      	adds	r3, #3
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	5cd1      	ldrb	r1, [r2, r3]
 800ae62:	7dfb      	ldrb	r3, [r7, #23]
 800ae64:	3303      	adds	r3, #3
 800ae66:	7cba      	ldrb	r2, [r7, #18]
 800ae68:	404a      	eors	r2, r1
 800ae6a:	b2d1      	uxtb	r1, r2
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ae70:	7dfb      	ldrb	r3, [r7, #23]
 800ae72:	3304      	adds	r3, #4
 800ae74:	75fb      	strb	r3, [r7, #23]
 800ae76:	7dfa      	ldrb	r2, [r7, #23]
 800ae78:	7c7b      	ldrb	r3, [r7, #17]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	f4ff af67 	bcc.w	800ad4e <lorawan_aes_set_key+0x76>
    }
    return 0;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3718      	adds	r7, #24
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	00010101 	.word	0x00010101
 800ae90:	0801d84c 	.word	0x0801d84c

0800ae94 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b08a      	sub	sp, #40	@ 0x28
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d038      	beq.n	800af1c <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	f107 0314 	add.w	r3, r7, #20
 800aeb0:	68f9      	ldr	r1, [r7, #12]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7ff fc07 	bl	800a6c6 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800aeb8:	2301      	movs	r3, #1
 800aeba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800aebe:	e014      	b.n	800aeea <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800aec0:	f107 0314 	add.w	r3, r7, #20
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7ff fd5d 	bl	800a984 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800aed0:	0112      	lsls	r2, r2, #4
 800aed2:	441a      	add	r2, r3
 800aed4:	f107 0314 	add.w	r3, r7, #20
 800aed8:	4611      	mov	r1, r2
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7ff fcab 	bl	800a836 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800aee0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aee4:	3301      	adds	r3, #1
 800aee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800aef0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d3e3      	bcc.n	800aec0 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800aef8:	f107 0314 	add.w	r3, r7, #20
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7ff fca7 	bl	800a850 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800af08:	0112      	lsls	r2, r2, #4
 800af0a:	441a      	add	r2, r3
 800af0c:	f107 0314 	add.w	r3, r7, #20
 800af10:	4619      	mov	r1, r3
 800af12:	68b8      	ldr	r0, [r7, #8]
 800af14:	f7ff fbd7 	bl	800a6c6 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800af18:	2300      	movs	r3, #0
 800af1a:	e000      	b.n	800af1e <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800af1c:	23ff      	movs	r3, #255	@ 0xff
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3728      	adds	r7, #40	@ 0x28
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
	...

0800af28 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800af28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af2a:	b0a1      	sub	sp, #132	@ 0x84
 800af2c:	af12      	add	r7, sp, #72	@ 0x48
 800af2e:	4603      	mov	r3, r0
 800af30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800af34:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800af38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800af3c:	4611      	mov	r1, r2
 800af3e:	4618      	mov	r0, r3
 800af40:	f000 fa12 	bl	800b368 <SecureElementGetKeyByID>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d174      	bne.n	800b034 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800af4a:	2300      	movs	r3, #0
 800af4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800af50:	e06c      	b.n	800b02c <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800af52:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800af56:	4939      	ldr	r1, [pc, #228]	@ (800b03c <PrintKey+0x114>)
 800af58:	4613      	mov	r3, r2
 800af5a:	005b      	lsls	r3, r3, #1
 800af5c:	4413      	add	r3, r2
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	440b      	add	r3, r1
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800af68:	429a      	cmp	r2, r3
 800af6a:	d15a      	bne.n	800b022 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800af6c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800af70:	4932      	ldr	r1, [pc, #200]	@ (800b03c <PrintKey+0x114>)
 800af72:	4613      	mov	r3, r2
 800af74:	005b      	lsls	r3, r3, #1
 800af76:	4413      	add	r3, r2
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	440b      	add	r3, r1
 800af7c:	3308      	adds	r3, #8
 800af7e:	6819      	ldr	r1, [r3, #0]
 800af80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af82:	785b      	ldrb	r3, [r3, #1]
 800af84:	461d      	mov	r5, r3
 800af86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af88:	789b      	ldrb	r3, [r3, #2]
 800af8a:	461e      	mov	r6, r3
 800af8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8e:	78db      	ldrb	r3, [r3, #3]
 800af90:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af94:	791b      	ldrb	r3, [r3, #4]
 800af96:	627b      	str	r3, [r7, #36]	@ 0x24
 800af98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9a:	795b      	ldrb	r3, [r3, #5]
 800af9c:	623b      	str	r3, [r7, #32]
 800af9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa0:	799b      	ldrb	r3, [r3, #6]
 800afa2:	61fb      	str	r3, [r7, #28]
 800afa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa6:	79db      	ldrb	r3, [r3, #7]
 800afa8:	61bb      	str	r3, [r7, #24]
 800afaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afac:	7a1b      	ldrb	r3, [r3, #8]
 800afae:	617b      	str	r3, [r7, #20]
 800afb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb2:	7a5b      	ldrb	r3, [r3, #9]
 800afb4:	613b      	str	r3, [r7, #16]
 800afb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb8:	7a9b      	ldrb	r3, [r3, #10]
 800afba:	60fb      	str	r3, [r7, #12]
 800afbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afbe:	7adb      	ldrb	r3, [r3, #11]
 800afc0:	60bb      	str	r3, [r7, #8]
 800afc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc4:	7b1b      	ldrb	r3, [r3, #12]
 800afc6:	607b      	str	r3, [r7, #4]
 800afc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afca:	7b5b      	ldrb	r3, [r3, #13]
 800afcc:	461c      	mov	r4, r3
 800afce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd0:	7b9b      	ldrb	r3, [r3, #14]
 800afd2:	4618      	mov	r0, r3
 800afd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd6:	7bdb      	ldrb	r3, [r3, #15]
 800afd8:	461a      	mov	r2, r3
 800afda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afdc:	7c1b      	ldrb	r3, [r3, #16]
 800afde:	9310      	str	r3, [sp, #64]	@ 0x40
 800afe0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800afe2:	900e      	str	r0, [sp, #56]	@ 0x38
 800afe4:	940d      	str	r4, [sp, #52]	@ 0x34
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	920c      	str	r2, [sp, #48]	@ 0x30
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	920b      	str	r2, [sp, #44]	@ 0x2c
 800afee:	68fa      	ldr	r2, [r7, #12]
 800aff0:	920a      	str	r2, [sp, #40]	@ 0x28
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	9209      	str	r2, [sp, #36]	@ 0x24
 800aff6:	697a      	ldr	r2, [r7, #20]
 800aff8:	9208      	str	r2, [sp, #32]
 800affa:	69ba      	ldr	r2, [r7, #24]
 800affc:	9207      	str	r2, [sp, #28]
 800affe:	69fa      	ldr	r2, [r7, #28]
 800b000:	9206      	str	r2, [sp, #24]
 800b002:	6a3a      	ldr	r2, [r7, #32]
 800b004:	9205      	str	r2, [sp, #20]
 800b006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b008:	9204      	str	r2, [sp, #16]
 800b00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b00c:	9303      	str	r3, [sp, #12]
 800b00e:	9602      	str	r6, [sp, #8]
 800b010:	9501      	str	r5, [sp, #4]
 800b012:	9100      	str	r1, [sp, #0]
 800b014:	4b0a      	ldr	r3, [pc, #40]	@ (800b040 <PrintKey+0x118>)
 800b016:	2200      	movs	r2, #0
 800b018:	2100      	movs	r1, #0
 800b01a:	2002      	movs	r0, #2
 800b01c:	f010 fe1c 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
 800b020:	e008      	b.n	800b034 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b022:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b026:	3301      	adds	r3, #1
 800b028:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b02c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b030:	2b0a      	cmp	r3, #10
 800b032:	d98e      	bls.n	800af52 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800b034:	373c      	adds	r7, #60	@ 0x3c
 800b036:	46bd      	mov	sp, r7
 800b038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b03a:	bf00      	nop
 800b03c:	0801db4c 	.word	0x0801db4c
 800b040:	0801d3fc 	.word	0x0801d3fc

0800b044 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800b044:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b046:	b091      	sub	sp, #68	@ 0x44
 800b048:	af08      	add	r7, sp, #32
 800b04a:	4603      	mov	r3, r0
 800b04c:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800b04e:	2300      	movs	r3, #0
 800b050:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800b052:	f107 0310 	add.w	r3, r7, #16
 800b056:	4618      	mov	r0, r3
 800b058:	f000 fbf0 	bl	800b83c <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800b05c:	7c3b      	ldrb	r3, [r7, #16]
 800b05e:	7c7a      	ldrb	r2, [r7, #17]
 800b060:	7cb9      	ldrb	r1, [r7, #18]
 800b062:	7cf8      	ldrb	r0, [r7, #19]
 800b064:	7d3c      	ldrb	r4, [r7, #20]
 800b066:	7d7d      	ldrb	r5, [r7, #21]
 800b068:	7dbe      	ldrb	r6, [r7, #22]
 800b06a:	f897 c017 	ldrb.w	ip, [r7, #23]
 800b06e:	f8cd c01c 	str.w	ip, [sp, #28]
 800b072:	9606      	str	r6, [sp, #24]
 800b074:	9505      	str	r5, [sp, #20]
 800b076:	9404      	str	r4, [sp, #16]
 800b078:	9003      	str	r0, [sp, #12]
 800b07a:	9102      	str	r1, [sp, #8]
 800b07c:	9201      	str	r2, [sp, #4]
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	4b24      	ldr	r3, [pc, #144]	@ (800b114 <PrintIds+0xd0>)
 800b082:	2200      	movs	r2, #0
 800b084:	2100      	movs	r1, #0
 800b086:	2002      	movs	r0, #2
 800b088:	f010 fde6 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800b08c:	f107 0318 	add.w	r3, r7, #24
 800b090:	4618      	mov	r0, r3
 800b092:	f000 fc03 	bl	800b89c <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800b096:	7e3b      	ldrb	r3, [r7, #24]
 800b098:	7e7a      	ldrb	r2, [r7, #25]
 800b09a:	7eb9      	ldrb	r1, [r7, #26]
 800b09c:	7ef8      	ldrb	r0, [r7, #27]
 800b09e:	7f3c      	ldrb	r4, [r7, #28]
 800b0a0:	7f7d      	ldrb	r5, [r7, #29]
 800b0a2:	7fbe      	ldrb	r6, [r7, #30]
 800b0a4:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800b0a8:	f8cd c01c 	str.w	ip, [sp, #28]
 800b0ac:	9606      	str	r6, [sp, #24]
 800b0ae:	9505      	str	r5, [sp, #20]
 800b0b0:	9404      	str	r4, [sp, #16]
 800b0b2:	9003      	str	r0, [sp, #12]
 800b0b4:	9102      	str	r1, [sp, #8]
 800b0b6:	9201      	str	r2, [sp, #4]
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	4b17      	ldr	r3, [pc, #92]	@ (800b118 <PrintIds+0xd4>)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	2100      	movs	r1, #0
 800b0c0:	2002      	movs	r0, #2
 800b0c2:	f010 fdc9 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800b0c6:	f107 020c 	add.w	r2, r7, #12
 800b0ca:	79fb      	ldrb	r3, [r7, #7]
 800b0cc:	4611      	mov	r1, r2
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f000 fc16 	bl	800b900 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800b0d4:	f107 030c 	add.w	r3, r7, #12
 800b0d8:	3303      	adds	r3, #3
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	f107 030c 	add.w	r3, r7, #12
 800b0e2:	3302      	adds	r3, #2
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	f107 030c 	add.w	r3, r7, #12
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f107 030c 	add.w	r3, r7, #12
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	9303      	str	r3, [sp, #12]
 800b0fa:	9002      	str	r0, [sp, #8]
 800b0fc:	9101      	str	r1, [sp, #4]
 800b0fe:	9200      	str	r2, [sp, #0]
 800b100:	4b06      	ldr	r3, [pc, #24]	@ (800b11c <PrintIds+0xd8>)
 800b102:	2200      	movs	r2, #0
 800b104:	2100      	movs	r1, #0
 800b106:	2002      	movs	r0, #2
 800b108:	f010 fda6 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800b10c:	bf00      	nop
 800b10e:	3724      	adds	r7, #36	@ 0x24
 800b110:	46bd      	mov	sp, r7
 800b112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b114:	0801d458 	.word	0x0801d458
 800b118:	0801d498 	.word	0x0801d498
 800b11c:	0801d4d8 	.word	0x0801d4d8

0800b120 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	4603      	mov	r3, r0
 800b128:	6039      	str	r1, [r7, #0]
 800b12a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b12c:	2300      	movs	r3, #0
 800b12e:	73fb      	strb	r3, [r7, #15]
 800b130:	e01a      	b.n	800b168 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b132:	4b12      	ldr	r3, [pc, #72]	@ (800b17c <GetKeyByID+0x5c>)
 800b134:	6819      	ldr	r1, [r3, #0]
 800b136:	7bfa      	ldrb	r2, [r7, #15]
 800b138:	4613      	mov	r3, r2
 800b13a:	011b      	lsls	r3, r3, #4
 800b13c:	4413      	add	r3, r2
 800b13e:	440b      	add	r3, r1
 800b140:	3318      	adds	r3, #24
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	79fa      	ldrb	r2, [r7, #7]
 800b146:	429a      	cmp	r2, r3
 800b148:	d10b      	bne.n	800b162 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b14a:	4b0c      	ldr	r3, [pc, #48]	@ (800b17c <GetKeyByID+0x5c>)
 800b14c:	6819      	ldr	r1, [r3, #0]
 800b14e:	7bfa      	ldrb	r2, [r7, #15]
 800b150:	4613      	mov	r3, r2
 800b152:	011b      	lsls	r3, r3, #4
 800b154:	4413      	add	r3, r2
 800b156:	3318      	adds	r3, #24
 800b158:	18ca      	adds	r2, r1, r3
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b15e:	2300      	movs	r3, #0
 800b160:	e006      	b.n	800b170 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b162:	7bfb      	ldrb	r3, [r7, #15]
 800b164:	3301      	adds	r3, #1
 800b166:	73fb      	strb	r3, [r7, #15]
 800b168:	7bfb      	ldrb	r3, [r7, #15]
 800b16a:	2b0a      	cmp	r3, #10
 800b16c:	d9e1      	bls.n	800b132 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b16e:	2303      	movs	r3, #3
}
 800b170:	4618      	mov	r0, r3
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	bc80      	pop	{r7}
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	20000430 	.word	0x20000430

0800b180 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800b180:	b590      	push	{r4, r7, lr}
 800b182:	b0d1      	sub	sp, #324	@ 0x144
 800b184:	af00      	add	r7, sp, #0
 800b186:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800b18a:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800b18e:	6020      	str	r0, [r4, #0]
 800b190:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800b194:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800b198:	6001      	str	r1, [r0, #0]
 800b19a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800b19e:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800b1a2:	600a      	str	r2, [r1, #0]
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b1aa:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800b1ae:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800b1b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b1b4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d003      	beq.n	800b1c6 <ComputeCmac+0x46>
 800b1be:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d101      	bne.n	800b1ca <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b1c6:	2302      	movs	r3, #2
 800b1c8:	e05d      	b.n	800b286 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800b1ca:	f107 0314 	add.w	r3, r7, #20
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7fe ff02 	bl	8009fd8 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800b1d4:	f107 0210 	add.w	r2, r7, #16
 800b1d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b1dc:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	4611      	mov	r1, r2
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7ff ff9b 	bl	800b120 <GetKeyByID>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b1f0:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d144      	bne.n	800b282 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800b1f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b1fc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	1c5a      	adds	r2, r3, #1
 800b204:	f107 0314 	add.w	r3, r7, #20
 800b208:	4611      	mov	r1, r2
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fe fefd 	bl	800a00a <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800b210:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b214:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d009      	beq.n	800b232 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800b21e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b222:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800b226:	f107 0014 	add.w	r0, r7, #20
 800b22a:	2210      	movs	r2, #16
 800b22c:	6819      	ldr	r1, [r3, #0]
 800b22e:	f7fe fefb 	bl	800a028 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800b232:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b236:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800b23a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b23e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b242:	f107 0014 	add.w	r0, r7, #20
 800b246:	6812      	ldr	r2, [r2, #0]
 800b248:	6819      	ldr	r1, [r3, #0]
 800b24a:	f7fe feed 	bl	800a028 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800b24e:	f107 0214 	add.w	r2, r7, #20
 800b252:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800b256:	4611      	mov	r1, r2
 800b258:	4618      	mov	r0, r3
 800b25a:	f7fe ffa7 	bl	800a1ac <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800b25e:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800b262:	461a      	mov	r2, r3
 800b264:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800b268:	021b      	lsls	r3, r3, #8
 800b26a:	431a      	orrs	r2, r3
 800b26c:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800b270:	041b      	lsls	r3, r3, #16
 800b272:	431a      	orrs	r2, r3
 800b274:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b278:	061b      	lsls	r3, r3, #24
 800b27a:	431a      	orrs	r2, r3
 800b27c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800b280:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800b282:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800b286:	4618      	mov	r0, r3
 800b288:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd90      	pop	{r4, r7, pc}

0800b290 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d101      	bne.n	800b2a2 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b29e:	2302      	movs	r3, #2
 800b2a0:	e00a      	b.n	800b2b8 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800b2a2:	4a07      	ldr	r2, [pc, #28]	@ (800b2c0 <SecureElementInit+0x30>)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800b2a8:	4b05      	ldr	r3, [pc, #20]	@ (800b2c0 <SecureElementInit+0x30>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	22d8      	movs	r2, #216	@ 0xd8
 800b2ae:	4905      	ldr	r1, [pc, #20]	@ (800b2c4 <SecureElementInit+0x34>)
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f00c fa6e 	bl	8017792 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800b2b6:	2300      	movs	r3, #0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	20000430 	.word	0x20000430
 800b2c4:	0801de20 	.word	0x0801de20

0800b2c8 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800b2d6:	f107 030c 	add.w	r3, r7, #12
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f000 faae 	bl	800b83c <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800b2e0:	f107 0308 	add.w	r3, r7, #8
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	2001      	movs	r0, #1
 800b2e8:	f000 fb0a 	bl	800b900 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d024      	beq.n	800b33c <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	75bb      	strb	r3, [r7, #22]
 800b2fa:	e00c      	b.n	800b316 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800b2fc:	7dbb      	ldrb	r3, [r7, #22]
 800b2fe:	3318      	adds	r3, #24
 800b300:	443b      	add	r3, r7
 800b302:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d002      	beq.n	800b310 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800b30a:	2301      	movs	r3, #1
 800b30c:	75fb      	strb	r3, [r7, #23]
                break;
 800b30e:	e005      	b.n	800b31c <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800b310:	7dbb      	ldrb	r3, [r7, #22]
 800b312:	3301      	adds	r3, #1
 800b314:	75bb      	strb	r3, [r7, #22]
 800b316:	7dbb      	ldrb	r3, [r7, #22]
 800b318:	2b07      	cmp	r3, #7
 800b31a:	d9ef      	bls.n	800b2fc <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800b31c:	7dfb      	ldrb	r3, [r7, #23]
 800b31e:	f083 0301 	eor.w	r3, r3, #1
 800b322:	b2db      	uxtb	r3, r3
 800b324:	2b00      	cmp	r3, #0
 800b326:	d009      	beq.n	800b33c <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800b328:	f107 020c 	add.w	r2, r7, #12
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4610      	mov	r0, r2
 800b330:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800b332:	f107 030c 	add.w	r3, r7, #12
 800b336:	4618      	mov	r0, r3
 800b338:	f000 fa68 	bl	800b80c <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d00c      	beq.n	800b35c <SecureElementInitMcuID+0x94>
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d109      	bne.n	800b35c <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800b348:	f107 0208 	add.w	r2, r7, #8
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	4610      	mov	r0, r2
 800b350:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	4619      	mov	r1, r3
 800b356:	2001      	movs	r0, #1
 800b358:	f000 fab8 	bl	800b8cc <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3718      	adds	r7, #24
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
	...

0800b368 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	4603      	mov	r3, r0
 800b370:	6039      	str	r1, [r7, #0]
 800b372:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b374:	2300      	movs	r3, #0
 800b376:	73fb      	strb	r3, [r7, #15]
 800b378:	e01a      	b.n	800b3b0 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b37a:	4b12      	ldr	r3, [pc, #72]	@ (800b3c4 <SecureElementGetKeyByID+0x5c>)
 800b37c:	6819      	ldr	r1, [r3, #0]
 800b37e:	7bfa      	ldrb	r2, [r7, #15]
 800b380:	4613      	mov	r3, r2
 800b382:	011b      	lsls	r3, r3, #4
 800b384:	4413      	add	r3, r2
 800b386:	440b      	add	r3, r1
 800b388:	3318      	adds	r3, #24
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	79fa      	ldrb	r2, [r7, #7]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d10b      	bne.n	800b3aa <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b392:	4b0c      	ldr	r3, [pc, #48]	@ (800b3c4 <SecureElementGetKeyByID+0x5c>)
 800b394:	6819      	ldr	r1, [r3, #0]
 800b396:	7bfa      	ldrb	r2, [r7, #15]
 800b398:	4613      	mov	r3, r2
 800b39a:	011b      	lsls	r3, r3, #4
 800b39c:	4413      	add	r3, r2
 800b39e:	3318      	adds	r3, #24
 800b3a0:	18ca      	adds	r2, r1, r3
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	e006      	b.n	800b3b8 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b3aa:	7bfb      	ldrb	r3, [r7, #15]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	73fb      	strb	r3, [r7, #15]
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
 800b3b2:	2b0a      	cmp	r3, #10
 800b3b4:	d9e1      	bls.n	800b37a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b3b6:	2303      	movs	r3, #3
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bc80      	pop	{r7}
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	20000430 	.word	0x20000430

0800b3c8 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	f7ff fdab 	bl	800af28 <PrintKey>
    PrintKey( NWK_KEY );
 800b3d2:	2001      	movs	r0, #1
 800b3d4:	f7ff fda8 	bl	800af28 <PrintKey>
    PrintKey( APP_S_KEY );
 800b3d8:	2009      	movs	r0, #9
 800b3da:	f7ff fda5 	bl	800af28 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800b3de:	2008      	movs	r0, #8
 800b3e0:	f7ff fda2 	bl	800af28 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800b3e4:	2000      	movs	r0, #0
 800b3e6:	f7ff fe2d 	bl	800b044 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800b3fa:	200b      	movs	r0, #11
 800b3fc:	f7ff fd94 	bl	800af28 <PrintKey>
    PrintKey( MC_KE_KEY );
 800b400:	200c      	movs	r0, #12
 800b402:	f7ff fd91 	bl	800af28 <PrintKey>
    PrintKey( APP_S_KEY );
 800b406:	2009      	movs	r0, #9
 800b408:	f7ff fd8e 	bl	800af28 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800b40c:	2008      	movs	r0, #8
 800b40e:	f7ff fd8b 	bl	800af28 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800b412:	200a      	movs	r0, #10
 800b414:	f7ff fd88 	bl	800af28 <PrintKey>
    PrintIds( mode );
 800b418:	79fb      	ldrb	r3, [r7, #7]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7ff fe12 	bl	800b044 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3708      	adds	r7, #8
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
	...

0800b42c <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b088      	sub	sp, #32
 800b430:	af00      	add	r7, sp, #0
 800b432:	4603      	mov	r3, r0
 800b434:	6039      	str	r1, [r7, #0]
 800b436:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d101      	bne.n	800b442 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b43e:	2302      	movs	r3, #2
 800b440:	e04c      	b.n	800b4dc <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b442:	2300      	movs	r3, #0
 800b444:	77fb      	strb	r3, [r7, #31]
 800b446:	e045      	b.n	800b4d4 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b448:	4b26      	ldr	r3, [pc, #152]	@ (800b4e4 <SecureElementSetKey+0xb8>)
 800b44a:	6819      	ldr	r1, [r3, #0]
 800b44c:	7ffa      	ldrb	r2, [r7, #31]
 800b44e:	4613      	mov	r3, r2
 800b450:	011b      	lsls	r3, r3, #4
 800b452:	4413      	add	r3, r2
 800b454:	440b      	add	r3, r1
 800b456:	3318      	adds	r3, #24
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	79fa      	ldrb	r2, [r7, #7]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d136      	bne.n	800b4ce <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800b460:	79fb      	ldrb	r3, [r7, #7]
 800b462:	2b0d      	cmp	r3, #13
 800b464:	d123      	bne.n	800b4ae <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b466:	2306      	movs	r3, #6
 800b468:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800b46a:	2300      	movs	r3, #0
 800b46c:	60fb      	str	r3, [r7, #12]
 800b46e:	f107 0310 	add.w	r3, r7, #16
 800b472:	2200      	movs	r2, #0
 800b474:	601a      	str	r2, [r3, #0]
 800b476:	605a      	str	r2, [r3, #4]
 800b478:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800b47a:	f107 030c 	add.w	r3, r7, #12
 800b47e:	220c      	movs	r2, #12
 800b480:	2110      	movs	r1, #16
 800b482:	6838      	ldr	r0, [r7, #0]
 800b484:	f000 f876 	bl	800b574 <SecureElementAesEncrypt>
 800b488:	4603      	mov	r3, r0
 800b48a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800b48c:	4b15      	ldr	r3, [pc, #84]	@ (800b4e4 <SecureElementSetKey+0xb8>)
 800b48e:	6819      	ldr	r1, [r3, #0]
 800b490:	7ffa      	ldrb	r2, [r7, #31]
 800b492:	4613      	mov	r3, r2
 800b494:	011b      	lsls	r3, r3, #4
 800b496:	4413      	add	r3, r2
 800b498:	3318      	adds	r3, #24
 800b49a:	440b      	add	r3, r1
 800b49c:	3301      	adds	r3, #1
 800b49e:	f107 010c 	add.w	r1, r7, #12
 800b4a2:	2210      	movs	r2, #16
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f00c f974 	bl	8017792 <memcpy1>
                return retval;
 800b4aa:	7fbb      	ldrb	r3, [r7, #30]
 800b4ac:	e016      	b.n	800b4dc <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800b4ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b4e4 <SecureElementSetKey+0xb8>)
 800b4b0:	6819      	ldr	r1, [r3, #0]
 800b4b2:	7ffa      	ldrb	r2, [r7, #31]
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	011b      	lsls	r3, r3, #4
 800b4b8:	4413      	add	r3, r2
 800b4ba:	3318      	adds	r3, #24
 800b4bc:	440b      	add	r3, r1
 800b4be:	3301      	adds	r3, #1
 800b4c0:	2210      	movs	r2, #16
 800b4c2:	6839      	ldr	r1, [r7, #0]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f00c f964 	bl	8017792 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	e006      	b.n	800b4dc <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b4ce:	7ffb      	ldrb	r3, [r7, #31]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	77fb      	strb	r3, [r7, #31]
 800b4d4:	7ffb      	ldrb	r3, [r7, #31]
 800b4d6:	2b0a      	cmp	r3, #10
 800b4d8:	d9b6      	bls.n	800b448 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b4da:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3720      	adds	r7, #32
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	20000430 	.word	0x20000430

0800b4e8 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af02      	add	r7, sp, #8
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
 800b4f4:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800b4f6:	78fb      	ldrb	r3, [r7, #3]
 800b4f8:	2b0b      	cmp	r3, #11
 800b4fa:	d901      	bls.n	800b500 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e009      	b.n	800b514 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800b500:	78fa      	ldrb	r2, [r7, #3]
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	4613      	mov	r3, r2
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	68b9      	ldr	r1, [r7, #8]
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f7ff fe37 	bl	800b180 <ComputeCmac>
 800b512:	4603      	mov	r3, r0
}
 800b514:	4618      	mov	r0, r3
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b088      	sub	sp, #32
 800b520:	af02      	add	r7, sp, #8
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
 800b528:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d101      	bne.n	800b534 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b530:	2302      	movs	r3, #2
 800b532:	e01b      	b.n	800b56c <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800b534:	2306      	movs	r3, #6
 800b536:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800b53c:	78fa      	ldrb	r2, [r7, #3]
 800b53e:	f107 0310 	add.w	r3, r7, #16
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	4613      	mov	r3, r2
 800b546:	68ba      	ldr	r2, [r7, #8]
 800b548:	68f9      	ldr	r1, [r7, #12]
 800b54a:	2000      	movs	r0, #0
 800b54c:	f7ff fe18 	bl	800b180 <ComputeCmac>
 800b550:	4603      	mov	r3, r0
 800b552:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b554:	7dfb      	ldrb	r3, [r7, #23]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d001      	beq.n	800b55e <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800b55a:	7dfb      	ldrb	r3, [r7, #23]
 800b55c:	e006      	b.n	800b56c <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	429a      	cmp	r2, r3
 800b564:	d001      	beq.n	800b56a <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800b566:	2301      	movs	r3, #1
 800b568:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800b56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3718      	adds	r7, #24
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b0c2      	sub	sp, #264	@ 0x108
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b580:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800b584:	6001      	str	r1, [r0, #0]
 800b586:	4611      	mov	r1, r2
 800b588:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800b58c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800b590:	6013      	str	r3, [r2, #0]
 800b592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b596:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800b59a:	460a      	mov	r2, r1
 800b59c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d006      	beq.n	800b5b2 <SecureElementAesEncrypt+0x3e>
 800b5a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d101      	bne.n	800b5b6 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b5b2:	2302      	movs	r3, #2
 800b5b4:	e059      	b.n	800b66a <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800b5b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5ba:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f003 030f 	and.w	r3, r3, #15
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d001      	beq.n	800b5cc <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b5c8:	2305      	movs	r3, #5
 800b5ca:	e04e      	b.n	800b66a <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800b5cc:	f107 0314 	add.w	r3, r7, #20
 800b5d0:	22f0      	movs	r2, #240	@ 0xf0
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f00c f917 	bl	8017808 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800b5da:	f107 0210 	add.w	r2, r7, #16
 800b5de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5e2:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7ff fd98 	bl	800b120 <GetKeyByID>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b5f6:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d133      	bne.n	800b666 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	3301      	adds	r3, #1
 800b602:	f107 0214 	add.w	r2, r7, #20
 800b606:	2110      	movs	r1, #16
 800b608:	4618      	mov	r0, r3
 800b60a:	f7ff fb65 	bl	800acd8 <lorawan_aes_set_key>

        uint8_t block = 0;
 800b60e:	2300      	movs	r3, #0
 800b610:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800b614:	e020      	b.n	800b658 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800b616:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800b61a:	68fa      	ldr	r2, [r7, #12]
 800b61c:	18d0      	adds	r0, r2, r3
 800b61e:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800b622:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800b626:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800b62a:	6812      	ldr	r2, [r2, #0]
 800b62c:	4413      	add	r3, r2
 800b62e:	f107 0214 	add.w	r2, r7, #20
 800b632:	4619      	mov	r1, r3
 800b634:	f7ff fc2e 	bl	800ae94 <lorawan_aes_encrypt>
            block = block + 16;
 800b638:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800b63c:	3310      	adds	r3, #16
 800b63e:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800b642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b646:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800b64a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800b64e:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800b652:	6812      	ldr	r2, [r2, #0]
 800b654:	3a10      	subs	r2, #16
 800b656:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800b658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b65c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d1d7      	bne.n	800b616 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800b666:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	460b      	mov	r3, r1
 800b67e:	70fb      	strb	r3, [r7, #3]
 800b680:	4613      	mov	r3, r2
 800b682:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d101      	bne.n	800b68e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b68a:	2302      	movs	r3, #2
 800b68c:	e02e      	b.n	800b6ec <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800b68e:	2306      	movs	r3, #6
 800b690:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800b692:	78bb      	ldrb	r3, [r7, #2]
 800b694:	2b0c      	cmp	r3, #12
 800b696:	d104      	bne.n	800b6a2 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800b698:	78fb      	ldrb	r3, [r7, #3]
 800b69a:	2b0b      	cmp	r3, #11
 800b69c:	d001      	beq.n	800b6a2 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b69e:	2303      	movs	r3, #3
 800b6a0:	e024      	b.n	800b6ec <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	60fb      	str	r3, [r7, #12]
 800b6a6:	f107 0310 	add.w	r3, r7, #16
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	601a      	str	r2, [r3, #0]
 800b6ae:	605a      	str	r2, [r3, #4]
 800b6b0:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800b6b2:	f107 030c 	add.w	r3, r7, #12
 800b6b6:	78fa      	ldrb	r2, [r7, #3]
 800b6b8:	2110      	movs	r1, #16
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f7ff ff5a 	bl	800b574 <SecureElementAesEncrypt>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b6c4:	7ffb      	ldrb	r3, [r7, #31]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d001      	beq.n	800b6ce <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800b6ca:	7ffb      	ldrb	r3, [r7, #31]
 800b6cc:	e00e      	b.n	800b6ec <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800b6ce:	f107 020c 	add.w	r2, r7, #12
 800b6d2:	78bb      	ldrb	r3, [r7, #2]
 800b6d4:	4611      	mov	r1, r2
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7ff fea8 	bl	800b42c <SecureElementSetKey>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b6e0:	7ffb      	ldrb	r3, [r7, #31]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d001      	beq.n	800b6ea <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800b6e6:	7ffb      	ldrb	r3, [r7, #31]
 800b6e8:	e000      	b.n	800b6ec <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b6ea:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3720      	adds	r7, #32
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60b9      	str	r1, [r7, #8]
 800b6fc:	607b      	str	r3, [r7, #4]
 800b6fe:	4603      	mov	r3, r0
 800b700:	73fb      	strb	r3, [r7, #15]
 800b702:	4613      	mov	r3, r2
 800b704:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d005      	beq.n	800b718 <SecureElementProcessJoinAccept+0x24>
 800b70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d002      	beq.n	800b718 <SecureElementProcessJoinAccept+0x24>
 800b712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b714:	2b00      	cmp	r3, #0
 800b716:	d101      	bne.n	800b71c <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b718:	2302      	movs	r3, #2
 800b71a:	e05c      	b.n	800b7d6 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800b71c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b720:	2b21      	cmp	r3, #33	@ 0x21
 800b722:	d901      	bls.n	800b728 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b724:	2305      	movs	r3, #5
 800b726:	e056      	b.n	800b7d6 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800b728:	2301      	movs	r3, #1
 800b72a:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800b72c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b730:	b29b      	uxth	r3, r3
 800b732:	461a      	mov	r2, r3
 800b734:	6879      	ldr	r1, [r7, #4]
 800b736:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b738:	f00c f82b 	bl	8017792 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	1c58      	adds	r0, r3, #1
 800b740:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b744:	3b01      	subs	r3, #1
 800b746:	4619      	mov	r1, r3
 800b748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74a:	3301      	adds	r3, #1
 800b74c:	7dfa      	ldrb	r2, [r7, #23]
 800b74e:	f7ff ff11 	bl	800b574 <SecureElementAesEncrypt>
 800b752:	4603      	mov	r3, r0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d001      	beq.n	800b75c <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800b758:	2307      	movs	r3, #7
 800b75a:	e03c      	b.n	800b7d6 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800b75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b75e:	330b      	adds	r3, #11
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	09db      	lsrs	r3, r3, #7
 800b764:	b2da      	uxtb	r2, r3
 800b766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b768:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800b76a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b76e:	3b04      	subs	r3, #4
 800b770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b772:	4413      	add	r3, r2
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	4619      	mov	r1, r3
 800b778:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b77c:	3b03      	subs	r3, #3
 800b77e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b780:	4413      	add	r3, r2
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	021b      	lsls	r3, r3, #8
 800b786:	ea41 0203 	orr.w	r2, r1, r3
 800b78a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b78e:	3b02      	subs	r3, #2
 800b790:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b792:	440b      	add	r3, r1
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	041b      	lsls	r3, r3, #16
 800b798:	431a      	orrs	r2, r3
 800b79a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b7a2:	440b      	add	r3, r1
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	061b      	lsls	r3, r3, #24
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800b7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10d      	bne.n	800b7d0 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800b7b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b7b8:	3b04      	subs	r3, #4
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	2301      	movs	r3, #1
 800b7be:	693a      	ldr	r2, [r7, #16]
 800b7c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b7c2:	f7ff feab 	bl	800b51c <SecureElementVerifyAesCmac>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d003      	beq.n	800b7d4 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e002      	b.n	800b7d6 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800b7d0:	2304      	movs	r3, #4
 800b7d2:	e000      	b.n	800b7d6 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3718      	adds	r7, #24
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
	...

0800b7e0 <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d101      	bne.n	800b7f2 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b7ee:	2302      	movs	r3, #2
 800b7f0:	e006      	b.n	800b800 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800b7f2:	4b05      	ldr	r3, [pc, #20]	@ (800b808 <SecureElementRandomNumber+0x28>)
 800b7f4:	695b      	ldr	r3, [r3, #20]
 800b7f6:	4798      	blx	r3
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3708      	adds	r7, #8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	0801dc9c 	.word	0x0801dc9c

0800b80c <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d101      	bne.n	800b81e <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b81a:	2302      	movs	r3, #2
 800b81c:	e007      	b.n	800b82e <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800b81e:	4b06      	ldr	r3, [pc, #24]	@ (800b838 <SecureElementSetDevEui+0x2c>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2208      	movs	r2, #8
 800b824:	6879      	ldr	r1, [r7, #4]
 800b826:	4618      	mov	r0, r3
 800b828:	f00b ffb3 	bl	8017792 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b82c:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	20000430 	.word	0x20000430

0800b83c <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d101      	bne.n	800b84e <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b84a:	2302      	movs	r3, #2
 800b84c:	e007      	b.n	800b85e <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800b84e:	4b06      	ldr	r3, [pc, #24]	@ (800b868 <SecureElementGetDevEui+0x2c>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2208      	movs	r2, #8
 800b854:	4619      	mov	r1, r3
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f00b ff9b 	bl	8017792 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b85c:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	20000430 	.word	0x20000430

0800b86c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d101      	bne.n	800b87e <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b87a:	2302      	movs	r3, #2
 800b87c:	e008      	b.n	800b890 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800b87e:	4b06      	ldr	r3, [pc, #24]	@ (800b898 <SecureElementSetJoinEui+0x2c>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3308      	adds	r3, #8
 800b884:	2208      	movs	r2, #8
 800b886:	6879      	ldr	r1, [r7, #4]
 800b888:	4618      	mov	r0, r3
 800b88a:	f00b ff82 	bl	8017792 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b88e:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800b890:	4618      	mov	r0, r3
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	20000430 	.word	0x20000430

0800b89c <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	e008      	b.n	800b8c0 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800b8ae:	4b06      	ldr	r3, [pc, #24]	@ (800b8c8 <SecureElementGetJoinEui+0x2c>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	2208      	movs	r2, #8
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f00b ff6a 	bl	8017792 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b8be:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	20000430 	.word	0x20000430

0800b8cc <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	6039      	str	r1, [r7, #0]
 800b8d6:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800b8d8:	79fb      	ldrb	r3, [r7, #7]
 800b8da:	2b02      	cmp	r3, #2
 800b8dc:	d104      	bne.n	800b8e8 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800b8de:	4b07      	ldr	r3, [pc, #28]	@ (800b8fc <SecureElementSetDevAddr+0x30>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	683a      	ldr	r2, [r7, #0]
 800b8e4:	611a      	str	r2, [r3, #16]
 800b8e6:	e003      	b.n	800b8f0 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800b8e8:	4b04      	ldr	r3, [pc, #16]	@ (800b8fc <SecureElementSetDevAddr+0x30>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	683a      	ldr	r2, [r7, #0]
 800b8ee:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800b8f0:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	370c      	adds	r7, #12
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bc80      	pop	{r7}
 800b8fa:	4770      	bx	lr
 800b8fc:	20000430 	.word	0x20000430

0800b900 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
 800b906:	4603      	mov	r3, r0
 800b908:	6039      	str	r1, [r7, #0]
 800b90a:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d101      	bne.n	800b916 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b912:	2302      	movs	r3, #2
 800b914:	e00e      	b.n	800b934 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800b916:	79fb      	ldrb	r3, [r7, #7]
 800b918:	2b02      	cmp	r3, #2
 800b91a:	d105      	bne.n	800b928 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800b91c:	4b08      	ldr	r3, [pc, #32]	@ (800b940 <SecureElementGetDevAddr+0x40>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	691a      	ldr	r2, [r3, #16]
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	601a      	str	r2, [r3, #0]
 800b926:	e004      	b.n	800b932 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800b928:	4b05      	ldr	r3, [pc, #20]	@ (800b940 <SecureElementGetDevAddr+0x40>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	695a      	ldr	r2, [r3, #20]
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800b932:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800b934:	4618      	mov	r0, r3
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	bc80      	pop	{r7}
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	20000430 	.word	0x20000430

0800b944 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800b94e:	4a22      	ldr	r2, [pc, #136]	@ (800b9d8 <LmHandlerInit+0x94>)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800b954:	4b21      	ldr	r3, [pc, #132]	@ (800b9dc <LmHandlerInit+0x98>)
 800b956:	4a22      	ldr	r2, [pc, #136]	@ (800b9e0 <LmHandlerInit+0x9c>)
 800b958:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800b95a:	4b20      	ldr	r3, [pc, #128]	@ (800b9dc <LmHandlerInit+0x98>)
 800b95c:	4a21      	ldr	r2, [pc, #132]	@ (800b9e4 <LmHandlerInit+0xa0>)
 800b95e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800b960:	4b1e      	ldr	r3, [pc, #120]	@ (800b9dc <LmHandlerInit+0x98>)
 800b962:	4a21      	ldr	r2, [pc, #132]	@ (800b9e8 <LmHandlerInit+0xa4>)
 800b964:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800b966:	4b1d      	ldr	r3, [pc, #116]	@ (800b9dc <LmHandlerInit+0x98>)
 800b968:	4a20      	ldr	r2, [pc, #128]	@ (800b9ec <LmHandlerInit+0xa8>)
 800b96a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800b96c:	4b1a      	ldr	r3, [pc, #104]	@ (800b9d8 <LmHandlerInit+0x94>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a1f      	ldr	r2, [pc, #124]	@ (800b9f0 <LmHandlerInit+0xac>)
 800b974:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800b976:	4b18      	ldr	r3, [pc, #96]	@ (800b9d8 <LmHandlerInit+0x94>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	4a1c      	ldr	r2, [pc, #112]	@ (800b9f0 <LmHandlerInit+0xac>)
 800b97e:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800b980:	4b15      	ldr	r3, [pc, #84]	@ (800b9d8 <LmHandlerInit+0x94>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	4a1a      	ldr	r2, [pc, #104]	@ (800b9f0 <LmHandlerInit+0xac>)
 800b988:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800b98a:	4b13      	ldr	r3, [pc, #76]	@ (800b9d8 <LmHandlerInit+0x94>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	4a17      	ldr	r2, [pc, #92]	@ (800b9f0 <LmHandlerInit+0xac>)
 800b992:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800b994:	4b16      	ldr	r3, [pc, #88]	@ (800b9f0 <LmHandlerInit+0xac>)
 800b996:	4a17      	ldr	r2, [pc, #92]	@ (800b9f4 <LmHandlerInit+0xb0>)
 800b998:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800b99a:	4b0f      	ldr	r3, [pc, #60]	@ (800b9d8 <LmHandlerInit+0x94>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	699b      	ldr	r3, [r3, #24]
 800b9a0:	4a13      	ldr	r2, [pc, #76]	@ (800b9f0 <LmHandlerInit+0xac>)
 800b9a2:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800b9a4:	4914      	ldr	r1, [pc, #80]	@ (800b9f8 <LmHandlerInit+0xb4>)
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	f000 fd3a 	bl	800c420 <LmHandlerPackageRegister>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d002      	beq.n	800b9b8 <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800b9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b6:	e00a      	b.n	800b9ce <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800b9b8:	463b      	mov	r3, r7
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f001 fa02 	bl	800cdc4 <LmhpPackagesRegistrationInit>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d002      	beq.n	800b9cc <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800b9c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ca:	e000      	b.n	800b9ce <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	20000478 	.word	0x20000478
 800b9dc:	2000047c 	.word	0x2000047c
 800b9e0:	0800c0e5 	.word	0x0800c0e5
 800b9e4:	0800c159 	.word	0x0800c159
 800b9e8:	0800c239 	.word	0x0800c239
 800b9ec:	0800c38d 	.word	0x0800c38d
 800b9f0:	2000048c 	.word	0x2000048c
 800b9f4:	0800c799 	.word	0x0800c799
 800b9f8:	20000074 	.word	0x20000074

0800b9fc <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b090      	sub	sp, #64	@ 0x40
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800ba04:	2218      	movs	r2, #24
 800ba06:	6879      	ldr	r1, [r7, #4]
 800ba08:	4853      	ldr	r0, [pc, #332]	@ (800bb58 <LmHandlerConfigure+0x15c>)
 800ba0a:	f00b fec2 	bl	8017792 <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800ba0e:	f7fe fa8b 	bl	8009f28 <LoraInfo_GetPtr>
 800ba12:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800ba14:	4b50      	ldr	r3, [pc, #320]	@ (800bb58 <LmHandlerConfigure+0x15c>)
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	4093      	lsls	r3, r2
 800ba1e:	461a      	mov	r2, r3
 800ba20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	4013      	ands	r3, r2
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d107      	bne.n	800ba3a <LmHandlerConfigure+0x3e>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800ba2a:	4b4c      	ldr	r3, [pc, #304]	@ (800bb5c <LmHandlerConfigure+0x160>)
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	2100      	movs	r1, #0
 800ba30:	2000      	movs	r0, #0
 800ba32:	f010 f911 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800ba36:	bf00      	nop
 800ba38:	e7fd      	b.n	800ba36 <LmHandlerConfigure+0x3a>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800ba3a:	4b47      	ldr	r3, [pc, #284]	@ (800bb58 <LmHandlerConfigure+0x15c>)
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	461a      	mov	r2, r3
 800ba40:	4947      	ldr	r1, [pc, #284]	@ (800bb60 <LmHandlerConfigure+0x164>)
 800ba42:	4848      	ldr	r0, [pc, #288]	@ (800bb64 <LmHandlerConfigure+0x168>)
 800ba44:	f004 fba2 	bl	801018c <LoRaMacInitialization>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d002      	beq.n	800ba54 <LmHandlerConfigure+0x58>
    {
        return LORAMAC_HANDLER_ERROR;
 800ba4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba52:	e07c      	b.n	800bb4e <LmHandlerConfigure+0x152>
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800ba54:	2305      	movs	r3, #5
 800ba56:	753b      	strb	r3, [r7, #20]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	61bb      	str	r3, [r7, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800ba5c:	f107 0314 	add.w	r3, r7, #20
 800ba60:	4618      	mov	r0, r3
 800ba62:	f005 f8e1 	bl	8010c28 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800ba66:	4b3e      	ldr	r3, [pc, #248]	@ (800bb60 <LmHandlerConfigure+0x164>)
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	4a3d      	ldr	r2, [pc, #244]	@ (800bb60 <LmHandlerConfigure+0x164>)
 800ba6c:	68d2      	ldr	r2, [r2, #12]
 800ba6e:	4611      	mov	r1, r2
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7ff fc29 	bl	800b2c8 <SecureElementInitMcuID>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d002      	beq.n	800ba82 <LmHandlerConfigure+0x86>
    {
        return LORAMAC_HANDLER_ERROR;
 800ba7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba80:	e065      	b.n	800bb4e <LmHandlerConfigure+0x152>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800ba82:	2306      	movs	r3, #6
 800ba84:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ba86:	f107 0314 	add.w	r3, r7, #20
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f004 ff16 	bl	80108bc <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	4a35      	ldr	r2, [pc, #212]	@ (800bb68 <LmHandlerConfigure+0x16c>)
 800ba94:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ba96:	f107 0314 	add.w	r3, r7, #20
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f005 f8c4 	bl	8010c28 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800baa0:	2302      	movs	r3, #2
 800baa2:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800baa4:	4b30      	ldr	r3, [pc, #192]	@ (800bb68 <LmHandlerConfigure+0x16c>)
 800baa6:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800baa8:	f107 0314 	add.w	r3, r7, #20
 800baac:	4618      	mov	r0, r3
 800baae:	f004 ff05 	bl	80108bc <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800bab2:	2303      	movs	r3, #3
 800bab4:	753b      	strb	r3, [r7, #20]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800bab6:	4b2d      	ldr	r3, [pc, #180]	@ (800bb6c <LmHandlerConfigure+0x170>)
 800bab8:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800baba:	f107 0314 	add.w	r3, r7, #20
 800babe:	4618      	mov	r0, r3
 800bac0:	f004 fefc 	bl	80108bc <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800bac4:	f7ff fc80 	bl	800b3c8 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800bac8:	230f      	movs	r3, #15
 800baca:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800bacc:	2301      	movs	r3, #1
 800bace:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800bad0:	f107 0314 	add.w	r3, r7, #20
 800bad4:	4618      	mov	r0, r3
 800bad6:	f005 f8a7 	bl	8010c28 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800bada:	2310      	movs	r3, #16
 800badc:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800bade:	2300      	movs	r3, #0
 800bae0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800bae2:	f107 0314 	add.w	r3, r7, #20
 800bae6:	4618      	mov	r0, r3
 800bae8:	f005 f89e 	bl	8010c28 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800baec:	2304      	movs	r3, #4
 800baee:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800baf0:	4b19      	ldr	r3, [pc, #100]	@ (800bb58 <LmHandlerConfigure+0x15c>)
 800baf2:	789b      	ldrb	r3, [r3, #2]
 800baf4:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800baf6:	f107 0314 	add.w	r3, r7, #20
 800bafa:	4618      	mov	r0, r3
 800bafc:	f005 f894 	bl	8010c28 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800bb00:	2339      	movs	r3, #57	@ 0x39
 800bb02:	753b      	strb	r3, [r7, #20]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800bb04:	4b14      	ldr	r3, [pc, #80]	@ (800bb58 <LmHandlerConfigure+0x15c>)
 800bb06:	695b      	ldr	r3, [r3, #20]
 800bb08:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800bb0a:	f107 0314 	add.w	r3, r7, #20
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f005 f88a 	bl	8010c28 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800bb14:	230f      	movs	r3, #15
 800bb16:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800bb18:	4b0f      	ldr	r3, [pc, #60]	@ (800bb58 <LmHandlerConfigure+0x15c>)
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	f107 020c 	add.w	r2, r7, #12
 800bb20:	4611      	mov	r1, r2
 800bb22:	4618      	mov	r0, r3
 800bb24:	f007 ff62 	bl	80139ec <RegionGetPhyParam>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	bf14      	ite	ne
 800bb32:	2301      	movne	r3, #1
 800bb34:	2300      	moveq	r3, #0
 800bb36:	b2da      	uxtb	r2, r3
 800bb38:	4b07      	ldr	r3, [pc, #28]	@ (800bb58 <LmHandlerConfigure+0x15c>)
 800bb3a:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800bb3c:	2014      	movs	r0, #20
 800bb3e:	f000 fab9 	bl	800c0b4 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800bb42:	4b05      	ldr	r3, [pc, #20]	@ (800bb58 <LmHandlerConfigure+0x15c>)
 800bb44:	79db      	ldrb	r3, [r3, #7]
 800bb46:	4618      	mov	r0, r3
 800bb48:	f005 fe4a 	bl	80117e0 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3740      	adds	r7, #64	@ 0x40
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	20000460 	.word	0x20000460
 800bb5c:	0801d504 	.word	0x0801d504
 800bb60:	2000048c 	.word	0x2000048c
 800bb64:	2000047c 	.word	0x2000047c
 800bb68:	20000434 	.word	0x20000434
 800bb6c:	2000043c 	.word	0x2000043c

0800bb70 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800bb74:	f002 fb06 	bl	800e184 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800bb78:	f000 fd90 	bl	800c69c <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800bb7c:	f000 fd60 	bl	800c640 <LmHandlerPackageIsTxPending>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800bb84:	bd80      	pop	{r7, pc}
	...

0800bb88 <LmHandlerJoin>:
{
    return DutyCycleWaitTime;
}

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b092      	sub	sp, #72	@ 0x48
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	4603      	mov	r3, r0
 800bb90:	460a      	mov	r2, r1
 800bb92:	71fb      	strb	r3, [r7, #7]
 800bb94:	4613      	mov	r3, r2
 800bb96:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800bb9e:	4b47      	ldr	r3, [pc, #284]	@ (800bcbc <LmHandlerJoin+0x134>)
 800bba0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800bbaa:	4b44      	ldr	r3, [pc, #272]	@ (800bcbc <LmHandlerJoin+0x134>)
 800bbac:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800bbb0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800bbb4:	79fb      	ldrb	r3, [r7, #7]
 800bbb6:	2b02      	cmp	r3, #2
 800bbb8:	d110      	bne.n	800bbdc <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800bbba:	2302      	movs	r3, #2
 800bbbc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800bbc0:	4b3f      	ldr	r3, [pc, #252]	@ (800bcc0 <LmHandlerJoin+0x138>)
 800bbc2:	2202      	movs	r2, #2
 800bbc4:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800bbc6:	4a3e      	ldr	r2, [pc, #248]	@ (800bcc0 <LmHandlerJoin+0x138>)
 800bbc8:	79bb      	ldrb	r3, [r7, #6]
 800bbca:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800bbcc:	f004 fd90 	bl	80106f0 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800bbd0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f005 fbbb 	bl	8011350 <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800bbda:	e06b      	b.n	800bcb4 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800bbe2:	4b37      	ldr	r3, [pc, #220]	@ (800bcc0 <LmHandlerJoin+0x138>)
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800bbe8:	4b34      	ldr	r3, [pc, #208]	@ (800bcbc <LmHandlerJoin+0x134>)
 800bbea:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800bbee:	4b34      	ldr	r3, [pc, #208]	@ (800bcc0 <LmHandlerJoin+0x138>)
 800bbf0:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800bbf2:	4b32      	ldr	r3, [pc, #200]	@ (800bcbc <LmHandlerJoin+0x134>)
 800bbf4:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800bbf8:	4b31      	ldr	r3, [pc, #196]	@ (800bcc0 <LmHandlerJoin+0x138>)
 800bbfa:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800bbfc:	4b30      	ldr	r3, [pc, #192]	@ (800bcc0 <LmHandlerJoin+0x138>)
 800bbfe:	2200      	movs	r2, #0
 800bc00:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800bc02:	4a2f      	ldr	r2, [pc, #188]	@ (800bcc0 <LmHandlerJoin+0x138>)
 800bc04:	79bb      	ldrb	r3, [r7, #6]
 800bc06:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800bc08:	4b2e      	ldr	r3, [pc, #184]	@ (800bcc4 <LmHandlerJoin+0x13c>)
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	f083 0301 	eor.w	r3, r3, #1
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d034      	beq.n	800bc80 <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800bc16:	231e      	movs	r3, #30
 800bc18:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800bc1a:	4b28      	ldr	r3, [pc, #160]	@ (800bcbc <LmHandlerJoin+0x134>)
 800bc1c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bc20:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800bc22:	f107 030c 	add.w	r3, r7, #12
 800bc26:	4618      	mov	r0, r3
 800bc28:	f004 fffe 	bl	8010c28 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800bc2c:	231f      	movs	r3, #31
 800bc2e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800bc30:	4b22      	ldr	r3, [pc, #136]	@ (800bcbc <LmHandlerJoin+0x134>)
 800bc32:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bc36:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800bc38:	f107 030c 	add.w	r3, r7, #12
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f004 fff3 	bl	8010c28 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800bc42:	2321      	movs	r3, #33	@ 0x21
 800bc44:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800bc46:	4b1d      	ldr	r3, [pc, #116]	@ (800bcbc <LmHandlerJoin+0x134>)
 800bc48:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800bc4c:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800bc4e:	f107 030c 	add.w	r3, r7, #12
 800bc52:	4618      	mov	r0, r3
 800bc54:	f004 ffe8 	bl	8010c28 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800bc58:	2320      	movs	r3, #32
 800bc5a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800bc5c:	4b17      	ldr	r3, [pc, #92]	@ (800bcbc <LmHandlerJoin+0x134>)
 800bc5e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800bc62:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800bc64:	f107 030c 	add.w	r3, r7, #12
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f004 ffdd 	bl	8010c28 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800bc6e:	2328      	movs	r3, #40	@ 0x28
 800bc70:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800bc72:	4b15      	ldr	r3, [pc, #84]	@ (800bcc8 <LmHandlerJoin+0x140>)
 800bc74:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800bc76:	f107 030c 	add.w	r3, r7, #12
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f004 ffd4 	bl	8010c28 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800bc80:	f004 fd36 	bl	80106f0 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800bc84:	2301      	movs	r3, #1
 800bc86:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800bc8c:	f107 030c 	add.w	r3, r7, #12
 800bc90:	4618      	mov	r0, r3
 800bc92:	f004 ffc9 	bl	8010c28 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800bc96:	4b0d      	ldr	r3, [pc, #52]	@ (800bccc <LmHandlerJoin+0x144>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d004      	beq.n	800bcaa <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800bca0:	4b0a      	ldr	r3, [pc, #40]	@ (800bccc <LmHandlerJoin+0x144>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bca6:	4806      	ldr	r0, [pc, #24]	@ (800bcc0 <LmHandlerJoin+0x138>)
 800bca8:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800bcaa:	4b04      	ldr	r3, [pc, #16]	@ (800bcbc <LmHandlerJoin+0x134>)
 800bcac:	785b      	ldrb	r3, [r3, #1]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f000 f930 	bl	800bf14 <LmHandlerRequestClass>
}
 800bcb4:	bf00      	nop
 800bcb6:	3748      	adds	r7, #72	@ 0x48
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	20000460 	.word	0x20000460
 800bcc0:	20000080 	.word	0x20000080
 800bcc4:	2000059a 	.word	0x2000059a
 800bcc8:	01000300 	.word	0x01000300
 800bccc:	20000478 	.word	0x20000478

0800bcd0 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b08c      	sub	sp, #48	@ 0x30
 800bcd4:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800bcda:	1d3b      	adds	r3, r7, #4
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f004 fded 	bl	80108bc <LoRaMacMibGetRequestConfirm>
 800bce2:	4603      	mov	r3, r0
 800bce4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800bce8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d106      	bne.n	800bcfe <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800bcf0:	7a3b      	ldrb	r3, [r7, #8]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d101      	bne.n	800bcfa <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	e002      	b.n	800bd00 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e000      	b.n	800bd00 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800bcfe:	2300      	movs	r3, #0
    }
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3730      	adds	r7, #48	@ 0x30
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b08a      	sub	sp, #40	@ 0x28
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	460b      	mov	r3, r1
 800bd12:	70fb      	strb	r3, [r7, #3]
 800bd14:	4613      	mov	r3, r2
 800bd16:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800bd18:	23ff      	movs	r3, #255	@ 0xff
 800bd1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800bd1e:	f001 ffbd 	bl	800dc9c <LoRaMacIsBusy>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d002      	beq.n	800bd2e <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800bd28:	f06f 0301 	mvn.w	r3, #1
 800bd2c:	e0bc      	b.n	800bea8 <LmHandlerSend+0x1a0>
    }

    if( LoRaMacIsStopped() == true )
 800bd2e:	f001 ffd1 	bl	800dcd4 <LoRaMacIsStopped>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d002      	beq.n	800bd3e <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800bd38:	f06f 0302 	mvn.w	r3, #2
 800bd3c:	e0b4      	b.n	800bea8 <LmHandlerSend+0x1a0>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800bd3e:	f7ff ffc7 	bl	800bcd0 <LmHandlerJoinStatus>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d00a      	beq.n	800bd5e <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800bd48:	4b59      	ldr	r3, [pc, #356]	@ (800beb0 <LmHandlerSend+0x1a8>)
 800bd4a:	79db      	ldrb	r3, [r3, #7]
 800bd4c:	4a58      	ldr	r2, [pc, #352]	@ (800beb0 <LmHandlerSend+0x1a8>)
 800bd4e:	7a12      	ldrb	r2, [r2, #8]
 800bd50:	4611      	mov	r1, r2
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7ff ff18 	bl	800bb88 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800bd58:	f06f 0302 	mvn.w	r3, #2
 800bd5c:	e0a4      	b.n	800bea8 <LmHandlerSend+0x1a0>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800bd5e:	4b55      	ldr	r3, [pc, #340]	@ (800beb4 <LmHandlerSend+0x1ac>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	68db      	ldr	r3, [r3, #12]
 800bd64:	4798      	blx	r3
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00d      	beq.n	800bd88 <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	781a      	ldrb	r2, [r3, #0]
 800bd70:	4b50      	ldr	r3, [pc, #320]	@ (800beb4 <LmHandlerSend+0x1ac>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d006      	beq.n	800bd88 <LmHandlerSend+0x80>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d002      	beq.n	800bd88 <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800bd82:	f06f 0303 	mvn.w	r3, #3
 800bd86:	e08f      	b.n	800bea8 <LmHandlerSend+0x1a0>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800bd88:	4a4b      	ldr	r2, [pc, #300]	@ (800beb8 <LmHandlerSend+0x1b0>)
 800bd8a:	78fb      	ldrb	r3, [r7, #3]
 800bd8c:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800bd8e:	78fb      	ldrb	r3, [r7, #3]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	bf14      	ite	ne
 800bd94:	2301      	movne	r3, #1
 800bd96:	2300      	moveq	r3, #0
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800bd9c:	4b47      	ldr	r3, [pc, #284]	@ (800bebc <LmHandlerSend+0x1b4>)
 800bd9e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bda2:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	785b      	ldrb	r3, [r3, #1]
 800bda8:	f107 020c 	add.w	r2, r7, #12
 800bdac:	4611      	mov	r1, r2
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f004 fcfe 	bl	80107b0 <LoRaMacQueryTxPossible>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d009      	beq.n	800bdce <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800bdc6:	23f9      	movs	r3, #249	@ 0xf9
 800bdc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bdcc:	e008      	b.n	800bde0 <LmHandlerSend+0xd8>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	785b      	ldrb	r3, [r3, #1]
 800bdd8:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800bde0:	4b35      	ldr	r3, [pc, #212]	@ (800beb8 <LmHandlerSend+0x1b0>)
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	3310      	adds	r3, #16
 800bde6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bdea:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800bdee:	4b33      	ldr	r3, [pc, #204]	@ (800bebc <LmHandlerSend+0x1b4>)
 800bdf0:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800bdf4:	4b30      	ldr	r3, [pc, #192]	@ (800beb8 <LmHandlerSend+0x1b0>)
 800bdf6:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800bdf8:	78ba      	ldrb	r2, [r7, #2]
 800bdfa:	f107 0310 	add.w	r3, r7, #16
 800bdfe:	4611      	mov	r1, r2
 800be00:	4618      	mov	r0, r3
 800be02:	f005 fbf7 	bl	80115f4 <LoRaMacMcpsRequest>
 800be06:	4603      	mov	r3, r0
 800be08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800be0c:	6a3b      	ldr	r3, [r7, #32]
 800be0e:	4a2c      	ldr	r2, [pc, #176]	@ (800bec0 <LmHandlerSend+0x1b8>)
 800be10:	6013      	str	r3, [r2, #0]

    switch( status )
 800be12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800be16:	2b11      	cmp	r3, #17
 800be18:	d83f      	bhi.n	800be9a <LmHandlerSend+0x192>
 800be1a:	a201      	add	r2, pc, #4	@ (adr r2, 800be20 <LmHandlerSend+0x118>)
 800be1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be20:	0800be69 	.word	0x0800be69
 800be24:	0800be7b 	.word	0x0800be7b
 800be28:	0800be9b 	.word	0x0800be9b
 800be2c:	0800be9b 	.word	0x0800be9b
 800be30:	0800be9b 	.word	0x0800be9b
 800be34:	0800be9b 	.word	0x0800be9b
 800be38:	0800be9b 	.word	0x0800be9b
 800be3c:	0800be83 	.word	0x0800be83
 800be40:	0800be9b 	.word	0x0800be9b
 800be44:	0800be9b 	.word	0x0800be9b
 800be48:	0800be9b 	.word	0x0800be9b
 800be4c:	0800be93 	.word	0x0800be93
 800be50:	0800be9b 	.word	0x0800be9b
 800be54:	0800be9b 	.word	0x0800be9b
 800be58:	0800be7b 	.word	0x0800be7b
 800be5c:	0800be7b 	.word	0x0800be7b
 800be60:	0800be7b 	.word	0x0800be7b
 800be64:	0800be8b 	.word	0x0800be8b
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800be68:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800be6c:	f113 0f07 	cmn.w	r3, #7
 800be70:	d017      	beq.n	800bea2 <LmHandlerSend+0x19a>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800be72:	2300      	movs	r3, #0
 800be74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800be78:	e013      	b.n	800bea2 <LmHandlerSend+0x19a>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800be7a:	23fe      	movs	r3, #254	@ 0xfe
 800be7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800be80:	e010      	b.n	800bea4 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800be82:	23fd      	movs	r3, #253	@ 0xfd
 800be84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800be88:	e00c      	b.n	800bea4 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800be8a:	23fb      	movs	r3, #251	@ 0xfb
 800be8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800be90:	e008      	b.n	800bea4 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800be92:	23fa      	movs	r3, #250	@ 0xfa
 800be94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800be98:	e004      	b.n	800bea4 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800be9a:	23ff      	movs	r3, #255	@ 0xff
 800be9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bea0:	e000      	b.n	800bea4 <LmHandlerSend+0x19c>
            break;
 800bea2:	bf00      	nop
    }

    return lmhStatus;
 800bea4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3728      	adds	r7, #40	@ 0x28
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	20000080 	.word	0x20000080
 800beb4:	2000044c 	.word	0x2000044c
 800beb8:	2000008c 	.word	0x2000008c
 800bebc:	20000460 	.word	0x20000460
 800bec0:	200004a4 	.word	0x200004a4

0800bec4 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b086      	sub	sp, #24
 800bec8:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800beca:	230a      	movs	r3, #10
 800becc:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800bece:	463b      	mov	r3, r7
 800bed0:	4618      	mov	r0, r3
 800bed2:	f005 fa3d 	bl	8011350 <LoRaMacMlmeRequest>
 800bed6:	4603      	mov	r3, r0
 800bed8:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	4a06      	ldr	r2, [pc, #24]	@ (800bef8 <LmHandlerDeviceTimeReq+0x34>)
 800bede:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800bee0:	7dfb      	ldrb	r3, [r7, #23]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d101      	bne.n	800beea <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800bee6:	2300      	movs	r3, #0
 800bee8:	e001      	b.n	800beee <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800beea:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3718      	adds	r7, #24
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	200004a4 	.word	0x200004a4

0800befc <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800befc:	b480      	push	{r7}
 800befe:	b083      	sub	sp, #12
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	4603      	mov	r3, r0
 800bf04:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800bf06:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	370c      	adds	r7, #12
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bc80      	pop	{r7}
 800bf12:	4770      	bx	lr

0800bf14 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b08e      	sub	sp, #56	@ 0x38
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800bf24:	f001 feba 	bl	800dc9c <LoRaMacIsBusy>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d002      	beq.n	800bf34 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800bf2e:	f06f 0301 	mvn.w	r3, #1
 800bf32:	e071      	b.n	800c018 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800bf34:	f7ff fecc 	bl	800bcd0 <LmHandlerJoinStatus>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d002      	beq.n	800bf44 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800bf3e:	f06f 0302 	mvn.w	r3, #2
 800bf42:	e069      	b.n	800c018 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800bf44:	2300      	movs	r3, #0
 800bf46:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800bf48:	f107 030c 	add.w	r3, r7, #12
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f004 fcb5 	bl	80108bc <LoRaMacMibGetRequestConfirm>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d002      	beq.n	800bf5e <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800bf58:	f04f 33ff 	mov.w	r3, #4294967295
 800bf5c:	e05c      	b.n	800c018 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800bf5e:	7c3b      	ldrb	r3, [r7, #16]
 800bf60:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800bf64:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800bf68:	79fb      	ldrb	r3, [r7, #7]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d052      	beq.n	800c014 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800bf6e:	79fb      	ldrb	r3, [r7, #7]
 800bf70:	2b02      	cmp	r3, #2
 800bf72:	d028      	beq.n	800bfc6 <LmHandlerRequestClass+0xb2>
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	dc48      	bgt.n	800c00a <LmHandlerRequestClass+0xf6>
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d002      	beq.n	800bf82 <LmHandlerRequestClass+0x6e>
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d01e      	beq.n	800bfbe <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800bf80:	e043      	b.n	800c00a <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800bf82:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d041      	beq.n	800c00e <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800bf8a:	79fb      	ldrb	r3, [r7, #7]
 800bf8c:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800bf8e:	f107 030c 	add.w	r3, r7, #12
 800bf92:	4618      	mov	r0, r3
 800bf94:	f004 fe48 	bl	8010c28 <LoRaMacMibSetRequestConfirm>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d10b      	bne.n	800bfb6 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800bf9e:	4b20      	ldr	r3, [pc, #128]	@ (800c020 <LmHandlerRequestClass+0x10c>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d032      	beq.n	800c00e <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800bfa8:	4b1d      	ldr	r3, [pc, #116]	@ (800c020 <LmHandlerRequestClass+0x10c>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfae:	79fa      	ldrb	r2, [r7, #7]
 800bfb0:	4610      	mov	r0, r2
 800bfb2:	4798      	blx	r3
                break;
 800bfb4:	e02b      	b.n	800c00e <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800bfb6:	23ff      	movs	r3, #255	@ 0xff
 800bfb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800bfbc:	e027      	b.n	800c00e <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800bfbe:	23ff      	movs	r3, #255	@ 0xff
 800bfc0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800bfc4:	e026      	b.n	800c014 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800bfc6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d003      	beq.n	800bfd6 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800bfce:	23ff      	movs	r3, #255	@ 0xff
 800bfd0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800bfd4:	e01d      	b.n	800c012 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800bfd6:	79fb      	ldrb	r3, [r7, #7]
 800bfd8:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800bfda:	f107 030c 	add.w	r3, r7, #12
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f004 fe22 	bl	8010c28 <LoRaMacMibSetRequestConfirm>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d10b      	bne.n	800c002 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800bfea:	4b0d      	ldr	r3, [pc, #52]	@ (800c020 <LmHandlerRequestClass+0x10c>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00e      	beq.n	800c012 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800bff4:	4b0a      	ldr	r3, [pc, #40]	@ (800c020 <LmHandlerRequestClass+0x10c>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bffa:	79fa      	ldrb	r2, [r7, #7]
 800bffc:	4610      	mov	r0, r2
 800bffe:	4798      	blx	r3
                break;
 800c000:	e007      	b.n	800c012 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800c002:	23ff      	movs	r3, #255	@ 0xff
 800c004:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800c008:	e003      	b.n	800c012 <LmHandlerRequestClass+0xfe>
                break;
 800c00a:	bf00      	nop
 800c00c:	e002      	b.n	800c014 <LmHandlerRequestClass+0x100>
                break;
 800c00e:	bf00      	nop
 800c010:	e000      	b.n	800c014 <LmHandlerRequestClass+0x100>
                break;
 800c012:	bf00      	nop
        }
    }
    return errorStatus;
 800c014:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3738      	adds	r7, #56	@ 0x38
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	20000478 	.word	0x20000478

0800c024 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b08c      	sub	sp, #48	@ 0x30
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d102      	bne.n	800c038 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c032:	f04f 33ff 	mov.w	r3, #4294967295
 800c036:	e010      	b.n	800c05a <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c038:	2300      	movs	r3, #0
 800c03a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c03c:	f107 0308 	add.w	r3, r7, #8
 800c040:	4618      	mov	r0, r3
 800c042:	f004 fc3b 	bl	80108bc <LoRaMacMibGetRequestConfirm>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d002      	beq.n	800c052 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c04c:	f04f 33ff 	mov.w	r3, #4294967295
 800c050:	e003      	b.n	800c05a <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c052:	7b3a      	ldrb	r2, [r7, #12]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c058:	2300      	movs	r3, #0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3730      	adds	r7, #48	@ 0x30
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
	...

0800c064 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b08c      	sub	sp, #48	@ 0x30
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d102      	bne.n	800c078 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c072:	f04f 33ff 	mov.w	r3, #4294967295
 800c076:	e016      	b.n	800c0a6 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c078:	231f      	movs	r3, #31
 800c07a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800c07c:	f107 0308 	add.w	r3, r7, #8
 800c080:	4618      	mov	r0, r3
 800c082:	f004 fc1b 	bl	80108bc <LoRaMacMibGetRequestConfirm>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d002      	beq.n	800c092 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c08c:	f04f 33ff 	mov.w	r3, #4294967295
 800c090:	e009      	b.n	800c0a6 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c092:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f993 2000 	ldrsb.w	r2, [r3]
 800c0a0:	4b03      	ldr	r3, [pc, #12]	@ (800c0b0 <LmHandlerGetTxDatarate+0x4c>)
 800c0a2:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3730      	adds	r7, #48	@ 0x30
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	20000460 	.word	0x20000460

0800c0b4 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b08c      	sub	sp, #48	@ 0x30
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c0bc:	2322      	movs	r3, #34	@ 0x22
 800c0be:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c0c4:	f107 0308 	add.w	r3, r7, #8
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f004 fdad 	bl	8010c28 <LoRaMacMibSetRequestConfirm>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d002      	beq.n	800c0da <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d8:	e000      	b.n	800c0dc <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3730      	adds	r7, #48	@ 0x30
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c0ec:	4b18      	ldr	r3, [pc, #96]	@ (800c150 <McpsConfirm+0x6c>)
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	785a      	ldrb	r2, [r3, #1]
 800c0f6:	4b16      	ldr	r3, [pc, #88]	@ (800c150 <McpsConfirm+0x6c>)
 800c0f8:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	789b      	ldrb	r3, [r3, #2]
 800c0fe:	b25a      	sxtb	r2, r3
 800c100:	4b13      	ldr	r3, [pc, #76]	@ (800c150 <McpsConfirm+0x6c>)
 800c102:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	4a11      	ldr	r2, [pc, #68]	@ (800c150 <McpsConfirm+0x6c>)
 800c10a:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c112:	4b0f      	ldr	r3, [pc, #60]	@ (800c150 <McpsConfirm+0x6c>)
 800c114:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	691b      	ldr	r3, [r3, #16]
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	4b0c      	ldr	r3, [pc, #48]	@ (800c150 <McpsConfirm+0x6c>)
 800c11e:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	791b      	ldrb	r3, [r3, #4]
 800c124:	461a      	mov	r2, r3
 800c126:	4b0a      	ldr	r3, [pc, #40]	@ (800c150 <McpsConfirm+0x6c>)
 800c128:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800c12a:	4b0a      	ldr	r3, [pc, #40]	@ (800c154 <McpsConfirm+0x70>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c130:	2b00      	cmp	r3, #0
 800c132:	d004      	beq.n	800c13e <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800c134:	4b07      	ldr	r3, [pc, #28]	@ (800c154 <McpsConfirm+0x70>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c13a:	4805      	ldr	r0, [pc, #20]	@ (800c150 <McpsConfirm+0x6c>)
 800c13c:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800c13e:	6879      	ldr	r1, [r7, #4]
 800c140:	2000      	movs	r0, #0
 800c142:	f000 f9eb 	bl	800c51c <LmHandlerPackagesNotify>
}
 800c146:	bf00      	nop
 800c148:	3708      	adds	r7, #8
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	2000008c 	.word	0x2000008c
 800c154:	20000478 	.word	0x20000478

0800c158 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b088      	sub	sp, #32
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800c162:	2300      	movs	r3, #0
 800c164:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800c166:	4b32      	ldr	r3, [pc, #200]	@ (800c230 <McpsIndication+0xd8>)
 800c168:	2201      	movs	r2, #1
 800c16a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	785a      	ldrb	r2, [r3, #1]
 800c170:	4b2f      	ldr	r3, [pc, #188]	@ (800c230 <McpsIndication+0xd8>)
 800c172:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c174:	4b2e      	ldr	r3, [pc, #184]	@ (800c230 <McpsIndication+0xd8>)
 800c176:	785b      	ldrb	r3, [r3, #1]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d155      	bne.n	800c228 <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	791b      	ldrb	r3, [r3, #4]
 800c180:	b25a      	sxtb	r2, r3
 800c182:	4b2b      	ldr	r3, [pc, #172]	@ (800c230 <McpsIndication+0xd8>)
 800c184:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c18c:	b25a      	sxtb	r2, r3
 800c18e:	4b28      	ldr	r3, [pc, #160]	@ (800c230 <McpsIndication+0xd8>)
 800c190:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c198:	4b25      	ldr	r3, [pc, #148]	@ (800c230 <McpsIndication+0xd8>)
 800c19a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	78da      	ldrb	r2, [r3, #3]
 800c1a0:	4b23      	ldr	r3, [pc, #140]	@ (800c230 <McpsIndication+0xd8>)
 800c1a2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	4a21      	ldr	r2, [pc, #132]	@ (800c230 <McpsIndication+0xd8>)
 800c1aa:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	78db      	ldrb	r3, [r3, #3]
 800c1b0:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	7b1b      	ldrb	r3, [r3, #12]
 800c1b6:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800c1be:	4b1d      	ldr	r3, [pc, #116]	@ (800c234 <McpsIndication+0xdc>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d007      	beq.n	800c1d8 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800c1c8:	4b1a      	ldr	r3, [pc, #104]	@ (800c234 <McpsIndication+0xdc>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ce:	f107 0218 	add.w	r2, r7, #24
 800c1d2:	4917      	ldr	r1, [pc, #92]	@ (800c230 <McpsIndication+0xd8>)
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800c1d8:	4b16      	ldr	r3, [pc, #88]	@ (800c234 <McpsIndication+0xdc>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d007      	beq.n	800c1f2 <McpsIndication+0x9a>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	7e1b      	ldrb	r3, [r3, #24]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d003      	beq.n	800c1f2 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800c1ea:	4b12      	ldr	r3, [pc, #72]	@ (800c234 <McpsIndication+0xdc>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1f0:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800c1f2:	6879      	ldr	r1, [r7, #4]
 800c1f4:	2001      	movs	r0, #1
 800c1f6:	f000 f991 	bl	800c51c <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800c1fa:	f107 0317 	add.w	r3, r7, #23
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7ff ff10 	bl	800c024 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	795b      	ldrb	r3, [r3, #5]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00e      	beq.n	800c22a <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 800c20c:	2300      	movs	r3, #0
 800c20e:	733b      	strb	r3, [r7, #12]
 800c210:	2300      	movs	r3, #0
 800c212:	737b      	strb	r3, [r7, #13]
 800c214:	2300      	movs	r3, #0
 800c216:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800c218:	f107 030c 	add.w	r3, r7, #12
 800c21c:	2201      	movs	r2, #1
 800c21e:	2100      	movs	r1, #0
 800c220:	4618      	mov	r0, r3
 800c222:	f7ff fd71 	bl	800bd08 <LmHandlerSend>
 800c226:	e000      	b.n	800c22a <McpsIndication+0xd2>
        return;
 800c228:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800c22a:	3720      	adds	r7, #32
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	200000a8 	.word	0x200000a8
 800c234:	20000478 	.word	0x20000478

0800c238 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b08c      	sub	sp, #48	@ 0x30
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800c240:	4b4a      	ldr	r3, [pc, #296]	@ (800c36c <MlmeConfirm+0x134>)
 800c242:	2200      	movs	r2, #0
 800c244:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	785a      	ldrb	r2, [r3, #1]
 800c24a:	4b48      	ldr	r3, [pc, #288]	@ (800c36c <MlmeConfirm+0x134>)
 800c24c:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800c24e:	4b48      	ldr	r3, [pc, #288]	@ (800c370 <MlmeConfirm+0x138>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c254:	2b00      	cmp	r3, #0
 800c256:	d004      	beq.n	800c262 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800c258:	4b45      	ldr	r3, [pc, #276]	@ (800c370 <MlmeConfirm+0x138>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c25e:	4843      	ldr	r0, [pc, #268]	@ (800c36c <MlmeConfirm+0x134>)
 800c260:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800c262:	6879      	ldr	r1, [r7, #4]
 800c264:	2002      	movs	r0, #2
 800c266:	f000 f959 	bl	800c51c <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	3b01      	subs	r3, #1
 800c270:	2b0c      	cmp	r3, #12
 800c272:	d874      	bhi.n	800c35e <MlmeConfirm+0x126>
 800c274:	a201      	add	r2, pc, #4	@ (adr r2, 800c27c <MlmeConfirm+0x44>)
 800c276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27a:	bf00      	nop
 800c27c:	0800c2b1 	.word	0x0800c2b1
 800c280:	0800c35f 	.word	0x0800c35f
 800c284:	0800c35f 	.word	0x0800c35f
 800c288:	0800c35f 	.word	0x0800c35f
 800c28c:	0800c32d 	.word	0x0800c32d
 800c290:	0800c35f 	.word	0x0800c35f
 800c294:	0800c35f 	.word	0x0800c35f
 800c298:	0800c35f 	.word	0x0800c35f
 800c29c:	0800c35f 	.word	0x0800c35f
 800c2a0:	0800c35f 	.word	0x0800c35f
 800c2a4:	0800c35f 	.word	0x0800c35f
 800c2a8:	0800c345 	.word	0x0800c345
 800c2ac:	0800c35f 	.word	0x0800c35f
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800c2b0:	2306      	movs	r3, #6
 800c2b2:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800c2b4:	f107 0308 	add.w	r3, r7, #8
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f004 faff 	bl	80108bc <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800c2be:	4b2d      	ldr	r3, [pc, #180]	@ (800c374 <MlmeConfirm+0x13c>)
 800c2c0:	79db      	ldrb	r3, [r3, #7]
 800c2c2:	68fa      	ldr	r2, [r7, #12]
 800c2c4:	4611      	mov	r1, r2
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7ff fb00 	bl	800b8cc <SecureElementSetDevAddr>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d102      	bne.n	800c2d8 <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	4a28      	ldr	r2, [pc, #160]	@ (800c378 <MlmeConfirm+0x140>)
 800c2d6:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800c2d8:	4828      	ldr	r0, [pc, #160]	@ (800c37c <MlmeConfirm+0x144>)
 800c2da:	f7ff fec3 	bl	800c064 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800c2de:	4828      	ldr	r0, [pc, #160]	@ (800c380 <MlmeConfirm+0x148>)
 800c2e0:	f000 fa2a 	bl	800c738 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c2e4:	4b21      	ldr	r3, [pc, #132]	@ (800c36c <MlmeConfirm+0x134>)
 800c2e6:	785b      	ldrb	r3, [r3, #1]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d108      	bne.n	800c2fe <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c2ec:	4b21      	ldr	r3, [pc, #132]	@ (800c374 <MlmeConfirm+0x13c>)
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800c2f2:	4b24      	ldr	r3, [pc, #144]	@ (800c384 <MlmeConfirm+0x14c>)
 800c2f4:	785b      	ldrb	r3, [r3, #1]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7ff fe0c 	bl	800bf14 <LmHandlerRequestClass>
 800c2fc:	e002      	b.n	800c304 <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800c2fe:	4b1d      	ldr	r3, [pc, #116]	@ (800c374 <MlmeConfirm+0x13c>)
 800c300:	22ff      	movs	r2, #255	@ 0xff
 800c302:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800c304:	4b1a      	ldr	r3, [pc, #104]	@ (800c370 <MlmeConfirm+0x138>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d004      	beq.n	800c318 <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c30e:	4b18      	ldr	r3, [pc, #96]	@ (800c370 <MlmeConfirm+0x138>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c314:	4817      	ldr	r0, [pc, #92]	@ (800c374 <MlmeConfirm+0x13c>)
 800c316:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c318:	4b14      	ldr	r3, [pc, #80]	@ (800c36c <MlmeConfirm+0x134>)
 800c31a:	785b      	ldrb	r3, [r3, #1]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d120      	bne.n	800c362 <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800c320:	4b14      	ldr	r3, [pc, #80]	@ (800c374 <MlmeConfirm+0x13c>)
 800c322:	79db      	ldrb	r3, [r3, #7]
 800c324:	4618      	mov	r0, r3
 800c326:	f7ff f863 	bl	800b3f0 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800c32a:	e01a      	b.n	800c362 <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800c32c:	4b16      	ldr	r3, [pc, #88]	@ (800c388 <MlmeConfirm+0x150>)
 800c32e:	2201      	movs	r2, #1
 800c330:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	7a1a      	ldrb	r2, [r3, #8]
 800c336:	4b14      	ldr	r3, [pc, #80]	@ (800c388 <MlmeConfirm+0x150>)
 800c338:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	7a5a      	ldrb	r2, [r3, #9]
 800c33e:	4b12      	ldr	r3, [pc, #72]	@ (800c388 <MlmeConfirm+0x150>)
 800c340:	74da      	strb	r2, [r3, #19]
            }
            break;
 800c342:	e00f      	b.n	800c364 <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	785b      	ldrb	r3, [r3, #1]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d105      	bne.n	800c358 <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800c34c:	4b0d      	ldr	r3, [pc, #52]	@ (800c384 <MlmeConfirm+0x14c>)
 800c34e:	7c1b      	ldrb	r3, [r3, #16]
 800c350:	4618      	mov	r0, r3
 800c352:	f7ff fdd3 	bl	800befc <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800c356:	e005      	b.n	800c364 <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 800c358:	f7ff fdb4 	bl	800bec4 <LmHandlerDeviceTimeReq>
            break;
 800c35c:	e002      	b.n	800c364 <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800c35e:	bf00      	nop
 800c360:	e000      	b.n	800c364 <MlmeConfirm+0x12c>
            break;
 800c362:	bf00      	nop
    }
}
 800c364:	bf00      	nop
 800c366:	3730      	adds	r7, #48	@ 0x30
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	2000008c 	.word	0x2000008c
 800c370:	20000478 	.word	0x20000478
 800c374:	20000080 	.word	0x20000080
 800c378:	20000434 	.word	0x20000434
 800c37c:	20000084 	.word	0x20000084
 800c380:	20000085 	.word	0x20000085
 800c384:	20000460 	.word	0x20000460
 800c388:	200000a8 	.word	0x200000a8

0800c38c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b082      	sub	sp, #8
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800c396:	4b20      	ldr	r3, [pc, #128]	@ (800c418 <MlmeIndication+0x8c>)
 800c398:	2200      	movs	r2, #0
 800c39a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	785a      	ldrb	r2, [r3, #1]
 800c3a0:	4b1d      	ldr	r3, [pc, #116]	@ (800c418 <MlmeIndication+0x8c>)
 800c3a2:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	789b      	ldrb	r3, [r3, #2]
 800c3a8:	b25a      	sxtb	r2, r3
 800c3aa:	4b1b      	ldr	r3, [pc, #108]	@ (800c418 <MlmeIndication+0x8c>)
 800c3ac:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c3b4:	b25a      	sxtb	r2, r3
 800c3b6:	4b18      	ldr	r3, [pc, #96]	@ (800c418 <MlmeIndication+0x8c>)
 800c3b8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c3c0:	4b15      	ldr	r3, [pc, #84]	@ (800c418 <MlmeIndication+0x8c>)
 800c3c2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	78da      	ldrb	r2, [r3, #3]
 800c3c8:	4b13      	ldr	r3, [pc, #76]	@ (800c418 <MlmeIndication+0x8c>)
 800c3ca:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	4a11      	ldr	r2, [pc, #68]	@ (800c418 <MlmeIndication+0x8c>)
 800c3d2:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800c3d4:	4b11      	ldr	r3, [pc, #68]	@ (800c41c <MlmeIndication+0x90>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00d      	beq.n	800c3fa <MlmeIndication+0x6e>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	2b0b      	cmp	r3, #11
 800c3e4:	d009      	beq.n	800c3fa <MlmeIndication+0x6e>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	2b0f      	cmp	r3, #15
 800c3ec:	d005      	beq.n	800c3fa <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800c3ee:	4b0b      	ldr	r3, [pc, #44]	@ (800c41c <MlmeIndication+0x90>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3f4:	4908      	ldr	r1, [pc, #32]	@ (800c418 <MlmeIndication+0x8c>)
 800c3f6:	2000      	movs	r0, #0
 800c3f8:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800c3fa:	6879      	ldr	r1, [r7, #4]
 800c3fc:	2003      	movs	r0, #3
 800c3fe:	f000 f88d 	bl	800c51c <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	2b0b      	cmp	r3, #11
 800c408:	d001      	beq.n	800c40e <MlmeIndication+0x82>
 800c40a:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800c40c:	e000      	b.n	800c410 <MlmeIndication+0x84>
            break;
 800c40e:	bf00      	nop
    }
}
 800c410:	bf00      	nop
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	200000a8 	.word	0x200000a8
 800c41c:	20000478 	.word	0x20000478

0800c420 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	4603      	mov	r3, r0
 800c428:	6039      	str	r1, [r7, #0]
 800c42a:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800c42c:	2300      	movs	r3, #0
 800c42e:	60fb      	str	r3, [r7, #12]
    switch( id )
 800c430:	79fb      	ldrb	r3, [r7, #7]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d104      	bne.n	800c440 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800c436:	f000 f9b9 	bl	800c7ac <LmhpCompliancePackageFactory>
 800c43a:	4603      	mov	r3, r0
 800c43c:	60fb      	str	r3, [r7, #12]
                break;
 800c43e:	e00d      	b.n	800c45c <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800c440:	f107 020c 	add.w	r2, r7, #12
 800c444:	79fb      	ldrb	r3, [r7, #7]
 800c446:	4611      	mov	r1, r2
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 fcc5 	bl	800cdd8 <LmhpPackagesRegister>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	d002      	beq.n	800c45a <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800c454:	f04f 33ff 	mov.w	r3, #4294967295
 800c458:	e031      	b.n	800c4be <LmHandlerPackageRegister+0x9e>
                }
                break;
 800c45a:	bf00      	nop
            }
    }
    if( package != NULL )
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d02b      	beq.n	800c4ba <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 800c462:	79fb      	ldrb	r3, [r7, #7]
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	4918      	ldr	r1, [pc, #96]	@ (800c4c8 <LmHandlerPackageRegister+0xa8>)
 800c468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800c46c:	79fb      	ldrb	r3, [r7, #7]
 800c46e:	4a16      	ldr	r2, [pc, #88]	@ (800c4c8 <LmHandlerPackageRegister+0xa8>)
 800c470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c474:	4a15      	ldr	r2, [pc, #84]	@ (800c4cc <LmHandlerPackageRegister+0xac>)
 800c476:	62da      	str	r2, [r3, #44]	@ 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800c478:	79fb      	ldrb	r3, [r7, #7]
 800c47a:	4a13      	ldr	r2, [pc, #76]	@ (800c4c8 <LmHandlerPackageRegister+0xa8>)
 800c47c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c480:	4a13      	ldr	r2, [pc, #76]	@ (800c4d0 <LmHandlerPackageRegister+0xb0>)
 800c482:	631a      	str	r2, [r3, #48]	@ 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800c484:	79fb      	ldrb	r3, [r7, #7]
 800c486:	4a10      	ldr	r2, [pc, #64]	@ (800c4c8 <LmHandlerPackageRegister+0xa8>)
 800c488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c48c:	4a11      	ldr	r2, [pc, #68]	@ (800c4d4 <LmHandlerPackageRegister+0xb4>)
 800c48e:	635a      	str	r2, [r3, #52]	@ 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800c490:	4b11      	ldr	r3, [pc, #68]	@ (800c4d8 <LmHandlerPackageRegister+0xb8>)
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	79fb      	ldrb	r3, [r7, #7]
 800c496:	490c      	ldr	r1, [pc, #48]	@ (800c4c8 <LmHandlerPackageRegister+0xa8>)
 800c498:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c49c:	6992      	ldr	r2, [r2, #24]
 800c49e:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800c4a0:	79fb      	ldrb	r3, [r7, #7]
 800c4a2:	4a09      	ldr	r2, [pc, #36]	@ (800c4c8 <LmHandlerPackageRegister+0xa8>)
 800c4a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	4a0c      	ldr	r2, [pc, #48]	@ (800c4dc <LmHandlerPackageRegister+0xbc>)
 800c4ac:	6851      	ldr	r1, [r2, #4]
 800c4ae:	4a0b      	ldr	r2, [pc, #44]	@ (800c4dc <LmHandlerPackageRegister+0xbc>)
 800c4b0:	7852      	ldrb	r2, [r2, #1]
 800c4b2:	6838      	ldr	r0, [r7, #0]
 800c4b4:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	e001      	b.n	800c4be <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c4ba:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3710      	adds	r7, #16
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	2000044c 	.word	0x2000044c
 800c4cc:	0800bb89 	.word	0x0800bb89
 800c4d0:	0800bd09 	.word	0x0800bd09
 800c4d4:	0800bec5 	.word	0x0800bec5
 800c4d8:	20000478 	.word	0x20000478
 800c4dc:	200000bc 	.word	0x200000bc

0800c4e0 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800c4ea:	79fb      	ldrb	r3, [r7, #7]
 800c4ec:	2b04      	cmp	r3, #4
 800c4ee:	d80e      	bhi.n	800c50e <LmHandlerPackageIsInitialized+0x2e>
 800c4f0:	79fb      	ldrb	r3, [r7, #7]
 800c4f2:	4a09      	ldr	r2, [pc, #36]	@ (800c518 <LmHandlerPackageIsInitialized+0x38>)
 800c4f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d007      	beq.n	800c50e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800c4fe:	79fb      	ldrb	r3, [r7, #7]
 800c500:	4a05      	ldr	r2, [pc, #20]	@ (800c518 <LmHandlerPackageIsInitialized+0x38>)
 800c502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	4798      	blx	r3
 800c50a:	4603      	mov	r3, r0
 800c50c:	e000      	b.n	800c510 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800c50e:	2300      	movs	r3, #0
    }
}
 800c510:	4618      	mov	r0, r3
 800c512:	3708      	adds	r7, #8
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	2000044c 	.word	0x2000044c

0800c51c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	4603      	mov	r3, r0
 800c524:	6039      	str	r1, [r7, #0]
 800c526:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c528:	2300      	movs	r3, #0
 800c52a:	73fb      	strb	r3, [r7, #15]
 800c52c:	e07c      	b.n	800c628 <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 800c52e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c532:	4a42      	ldr	r2, [pc, #264]	@ (800c63c <LmHandlerPackagesNotify+0x120>)
 800c534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d06f      	beq.n	800c61c <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 800c53c:	79fb      	ldrb	r3, [r7, #7]
 800c53e:	2b03      	cmp	r3, #3
 800c540:	d863      	bhi.n	800c60a <LmHandlerPackagesNotify+0xee>
 800c542:	a201      	add	r2, pc, #4	@ (adr r2, 800c548 <LmHandlerPackagesNotify+0x2c>)
 800c544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c548:	0800c559 	.word	0x0800c559
 800c54c:	0800c57b 	.word	0x0800c57b
 800c550:	0800c5c7 	.word	0x0800c5c7
 800c554:	0800c5e9 	.word	0x0800c5e9
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800c558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c55c:	4a37      	ldr	r2, [pc, #220]	@ (800c63c <LmHandlerPackagesNotify+0x120>)
 800c55e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c562:	69db      	ldr	r3, [r3, #28]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d052      	beq.n	800c60e <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800c568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c56c:	4a33      	ldr	r2, [pc, #204]	@ (800c63c <LmHandlerPackagesNotify+0x120>)
 800c56e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c572:	69db      	ldr	r3, [r3, #28]
 800c574:	6838      	ldr	r0, [r7, #0]
 800c576:	4798      	blx	r3
                        }
                        break;
 800c578:	e049      	b.n	800c60e <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800c57a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c57e:	4a2f      	ldr	r2, [pc, #188]	@ (800c63c <LmHandlerPackagesNotify+0x120>)
 800c580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c584:	6a1b      	ldr	r3, [r3, #32]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d043      	beq.n	800c612 <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800c58a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c58e:	4a2b      	ldr	r2, [pc, #172]	@ (800c63c <LmHandlerPackagesNotify+0x120>)
 800c590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c594:	781a      	ldrb	r2, [r3, #0]
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d00a      	beq.n	800c5b4 <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800c59e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d135      	bne.n	800c612 <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800c5a6:	4b25      	ldr	r3, [pc, #148]	@ (800c63c <LmHandlerPackagesNotify+0x120>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	4798      	blx	r3
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d02e      	beq.n	800c612 <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800c5b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5b8:	4a20      	ldr	r2, [pc, #128]	@ (800c63c <LmHandlerPackagesNotify+0x120>)
 800c5ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5be:	6a1b      	ldr	r3, [r3, #32]
 800c5c0:	6838      	ldr	r0, [r7, #0]
 800c5c2:	4798      	blx	r3
                        }
                        break;
 800c5c4:	e025      	b.n	800c612 <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800c5c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5ca:	4a1c      	ldr	r2, [pc, #112]	@ (800c63c <LmHandlerPackagesNotify+0x120>)
 800c5cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d01f      	beq.n	800c616 <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800c5d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5da:	4a18      	ldr	r2, [pc, #96]	@ (800c63c <LmHandlerPackagesNotify+0x120>)
 800c5dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5e2:	6838      	ldr	r0, [r7, #0]
 800c5e4:	4798      	blx	r3
                        }
                        break;
 800c5e6:	e016      	b.n	800c616 <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800c5e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5ec:	4a13      	ldr	r2, [pc, #76]	@ (800c63c <LmHandlerPackagesNotify+0x120>)
 800c5ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d010      	beq.n	800c61a <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800c5f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5fc:	4a0f      	ldr	r2, [pc, #60]	@ (800c63c <LmHandlerPackagesNotify+0x120>)
 800c5fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c604:	6838      	ldr	r0, [r7, #0]
 800c606:	4798      	blx	r3
                        }
                        break;
 800c608:	e007      	b.n	800c61a <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 800c60a:	bf00      	nop
 800c60c:	e006      	b.n	800c61c <LmHandlerPackagesNotify+0x100>
                        break;
 800c60e:	bf00      	nop
 800c610:	e004      	b.n	800c61c <LmHandlerPackagesNotify+0x100>
                        break;
 800c612:	bf00      	nop
 800c614:	e002      	b.n	800c61c <LmHandlerPackagesNotify+0x100>
                        break;
 800c616:	bf00      	nop
 800c618:	e000      	b.n	800c61c <LmHandlerPackagesNotify+0x100>
                        break;
 800c61a:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c61c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c620:	b2db      	uxtb	r3, r3
 800c622:	3301      	adds	r3, #1
 800c624:	b2db      	uxtb	r3, r3
 800c626:	73fb      	strb	r3, [r7, #15]
 800c628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c62c:	2b04      	cmp	r3, #4
 800c62e:	f77f af7e 	ble.w	800c52e <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800c632:	bf00      	nop
 800c634:	bf00      	nop
 800c636:	3710      	adds	r7, #16
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	2000044c 	.word	0x2000044c

0800c640 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c646:	2300      	movs	r3, #0
 800c648:	71fb      	strb	r3, [r7, #7]
 800c64a:	e01c      	b.n	800c686 <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 800c64c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c650:	4a11      	ldr	r2, [pc, #68]	@ (800c698 <LmHandlerPackageIsTxPending+0x58>)
 800c652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00f      	beq.n	800c67a <LmHandlerPackageIsTxPending+0x3a>
 800c65a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00b      	beq.n	800c67a <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800c662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c666:	4a0c      	ldr	r2, [pc, #48]	@ (800c698 <LmHandlerPackageIsTxPending+0x58>)
 800c668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c66c:	691b      	ldr	r3, [r3, #16]
 800c66e:	4798      	blx	r3
 800c670:	4603      	mov	r3, r0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d001      	beq.n	800c67a <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 800c676:	2301      	movs	r3, #1
 800c678:	e00a      	b.n	800c690 <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c67a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	3301      	adds	r3, #1
 800c682:	b2db      	uxtb	r3, r3
 800c684:	71fb      	strb	r3, [r7, #7]
 800c686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c68a:	2b04      	cmp	r3, #4
 800c68c:	ddde      	ble.n	800c64c <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800c68e:	2300      	movs	r3, #0
}
 800c690:	4618      	mov	r0, r3
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	2000044c 	.word	0x2000044c

0800c69c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	71fb      	strb	r3, [r7, #7]
 800c6a6:	e022      	b.n	800c6ee <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800c6a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6ac:	4a14      	ldr	r2, [pc, #80]	@ (800c700 <LmHandlerPackagesProcess+0x64>)
 800c6ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d015      	beq.n	800c6e2 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800c6b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6ba:	4a11      	ldr	r2, [pc, #68]	@ (800c700 <LmHandlerPackagesProcess+0x64>)
 800c6bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6c0:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00d      	beq.n	800c6e2 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800c6c6:	79fb      	ldrb	r3, [r7, #7]
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7ff ff09 	bl	800c4e0 <LmHandlerPackageIsInitialized>
 800c6ce:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d006      	beq.n	800c6e2 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800c6d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6d8:	4a09      	ldr	r2, [pc, #36]	@ (800c700 <LmHandlerPackagesProcess+0x64>)
 800c6da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6de:	695b      	ldr	r3, [r3, #20]
 800c6e0:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c6e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	71fb      	strb	r3, [r7, #7]
 800c6ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6f2:	2b04      	cmp	r3, #4
 800c6f4:	ddd8      	ble.n	800c6a8 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800c6f6:	bf00      	nop
 800c6f8:	bf00      	nop
 800c6fa:	3708      	adds	r7, #8
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	2000044c 	.word	0x2000044c

0800c704 <LmHandlerStop>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800c708:	f005 f890 	bl	801182c <LoRaMacDeInitialization>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d101      	bne.n	800c716 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c712:	2300      	movs	r3, #0
 800c714:	e001      	b.n	800c71a <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c716:	f06f 0301 	mvn.w	r3, #1
    }
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800c722:	f004 f81b 	bl	801075c <LoRaMacHalt>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d101      	bne.n	800c730 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c72c:	2300      	movs	r3, #0
 800c72e:	e001      	b.n	800c734 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c730:	f06f 0301 	mvn.w	r3, #1
    }
}
 800c734:	4618      	mov	r0, r3
 800c736:	bd80      	pop	{r7, pc}

0800c738 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b08c      	sub	sp, #48	@ 0x30
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d102      	bne.n	800c74c <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c746:	f04f 33ff 	mov.w	r3, #4294967295
 800c74a:	e016      	b.n	800c77a <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800c74c:	2320      	movs	r3, #32
 800c74e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c750:	f107 0308 	add.w	r3, r7, #8
 800c754:	4618      	mov	r0, r3
 800c756:	f004 f8b1 	bl	80108bc <LoRaMacMibGetRequestConfirm>
 800c75a:	4603      	mov	r3, r0
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c760:	f04f 33ff 	mov.w	r3, #4294967295
 800c764:	e009      	b.n	800c77a <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800c766:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f993 2000 	ldrsb.w	r2, [r3]
 800c774:	4b03      	ldr	r3, [pc, #12]	@ (800c784 <LmHandlerGetTxPower+0x4c>)
 800c776:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800c778:	2300      	movs	r3, #0
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3730      	adds	r7, #48	@ 0x30
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	20000460 	.word	0x20000460

0800c788 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800c788:	b480      	push	{r7}
 800c78a:	af00      	add	r7, sp, #0
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
    }

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
 800c78c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c790:	4618      	mov	r0, r3
 800c792:	46bd      	mov	sp, r7
 800c794:	bc80      	pop	{r7}
 800c796:	4770      	bx	lr

0800c798 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	4603      	mov	r3, r0
 800c7a0:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800c7a2:	bf00      	nop
 800c7a4:	370c      	adds	r7, #12
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bc80      	pop	{r7}
 800c7aa:	4770      	bx	lr

0800c7ac <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800c7b0:	4b02      	ldr	r3, [pc, #8]	@ (800c7bc <LmhpCompliancePackageFactory+0x10>)
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bc80      	pop	{r7}
 800c7b8:	4770      	bx	lr
 800c7ba:	bf00      	nop
 800c7bc:	200000c4 	.word	0x200000c4

0800c7c0 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00f      	beq.n	800c7f4 <LmhpComplianceInit+0x34>
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00c      	beq.n	800c7f4 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 800c7da:	4a0c      	ldr	r2, [pc, #48]	@ (800c80c <LmhpComplianceInit+0x4c>)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800c7e0:	4a0b      	ldr	r2, [pc, #44]	@ (800c810 <LmhpComplianceInit+0x50>)
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800c7e6:	4a0a      	ldr	r2, [pc, #40]	@ (800c810 <LmhpComplianceInit+0x50>)
 800c7e8:	79fb      	ldrb	r3, [r7, #7]
 800c7ea:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800c7ec:	4b08      	ldr	r3, [pc, #32]	@ (800c810 <LmhpComplianceInit+0x50>)
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	701a      	strb	r2, [r3, #0]
 800c7f2:	e006      	b.n	800c802 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800c7f4:	4b05      	ldr	r3, [pc, #20]	@ (800c80c <LmhpComplianceInit+0x4c>)
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800c7fa:	4b05      	ldr	r3, [pc, #20]	@ (800c810 <LmhpComplianceInit+0x50>)
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	701a      	strb	r2, [r3, #0]
    }
}
 800c800:	bf00      	nop
 800c802:	bf00      	nop
 800c804:	3714      	adds	r7, #20
 800c806:	46bd      	mov	sp, r7
 800c808:	bc80      	pop	{r7}
 800c80a:	4770      	bx	lr
 800c80c:	200005c8 	.word	0x200005c8
 800c810:	200005b4 	.word	0x200005b4

0800c814 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800c814:	b480      	push	{r7}
 800c816:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800c818:	4b02      	ldr	r3, [pc, #8]	@ (800c824 <LmhpComplianceIsInitialized+0x10>)
 800c81a:	781b      	ldrb	r3, [r3, #0]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	46bd      	mov	sp, r7
 800c820:	bc80      	pop	{r7}
 800c822:	4770      	bx	lr
 800c824:	200005b4 	.word	0x200005b4

0800c828 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800c828:	b480      	push	{r7}
 800c82a:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800c82c:	4b07      	ldr	r3, [pc, #28]	@ (800c84c <LmhpComplianceIsRunning+0x24>)
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	f083 0301 	eor.w	r3, r3, #1
 800c834:	b2db      	uxtb	r3, r3
 800c836:	2b00      	cmp	r3, #0
 800c838:	d001      	beq.n	800c83e <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800c83a:	2300      	movs	r3, #0
 800c83c:	e001      	b.n	800c842 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800c83e:	4b03      	ldr	r3, [pc, #12]	@ (800c84c <LmhpComplianceIsRunning+0x24>)
 800c840:	785b      	ldrb	r3, [r3, #1]
}
 800c842:	4618      	mov	r0, r3
 800c844:	46bd      	mov	sp, r7
 800c846:	bc80      	pop	{r7}
 800c848:	4770      	bx	lr
 800c84a:	bf00      	nop
 800c84c:	200005b4 	.word	0x200005b4

0800c850 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c858:	4b0f      	ldr	r3, [pc, #60]	@ (800c898 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	f083 0301 	eor.w	r3, r3, #1
 800c860:	b2db      	uxtb	r3, r3
 800c862:	2b00      	cmp	r3, #0
 800c864:	d112      	bne.n	800c88c <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800c866:	4b0c      	ldr	r3, [pc, #48]	@ (800c898 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c868:	785b      	ldrb	r3, [r3, #1]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00f      	beq.n	800c88e <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 800c872:	2b01      	cmp	r3, #1
 800c874:	d10b      	bne.n	800c88e <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d007      	beq.n	800c88e <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800c87e:	4b06      	ldr	r3, [pc, #24]	@ (800c898 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c880:	899b      	ldrh	r3, [r3, #12]
 800c882:	3301      	adds	r3, #1
 800c884:	b29a      	uxth	r2, r3
 800c886:	4b04      	ldr	r3, [pc, #16]	@ (800c898 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c888:	819a      	strh	r2, [r3, #12]
 800c88a:	e000      	b.n	800c88e <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800c88c:	bf00      	nop
    }
}
 800c88e:	370c      	adds	r7, #12
 800c890:	46bd      	mov	sp, r7
 800c892:	bc80      	pop	{r7}
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop
 800c898:	200005b4 	.word	0x200005b4

0800c89c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c8a4:	4b12      	ldr	r3, [pc, #72]	@ (800c8f0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	f083 0301 	eor.w	r3, r3, #1
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d116      	bne.n	800c8e0 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800c8b2:	4b0f      	ldr	r3, [pc, #60]	@ (800c8f0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c8b4:	785b      	ldrb	r3, [r3, #1]
 800c8b6:	f083 0301 	eor.w	r3, r3, #1
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d111      	bne.n	800c8e4 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	2b05      	cmp	r3, #5
 800c8c6:	d10e      	bne.n	800c8e6 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800c8c8:	4b09      	ldr	r3, [pc, #36]	@ (800c8f0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	7a1a      	ldrb	r2, [r3, #8]
 800c8d2:	4b07      	ldr	r3, [pc, #28]	@ (800c8f0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c8d4:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	7a5a      	ldrb	r2, [r3, #9]
 800c8da:	4b05      	ldr	r3, [pc, #20]	@ (800c8f0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c8dc:	741a      	strb	r2, [r3, #16]
 800c8de:	e002      	b.n	800c8e6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800c8e0:	bf00      	nop
 800c8e2:	e000      	b.n	800c8e6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800c8e4:	bf00      	nop
    }
}
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bc80      	pop	{r7}
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop
 800c8f0:	200005b4 	.word	0x200005b4

0800c8f4 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800c8fa:	4b36      	ldr	r3, [pc, #216]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	f083 0301 	eor.w	r3, r3, #1
 800c902:	b2db      	uxtb	r3, r3
 800c904:	2b00      	cmp	r3, #0
 800c906:	d002      	beq.n	800c90e <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c908:	f04f 33ff 	mov.w	r3, #4294967295
 800c90c:	e05e      	b.n	800c9cc <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 800c90e:	4b31      	ldr	r3, [pc, #196]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c910:	785b      	ldrb	r3, [r3, #1]
 800c912:	f083 0301 	eor.w	r3, r3, #1
 800c916:	b2db      	uxtb	r3, r3
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d001      	beq.n	800c920 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c91c:	2300      	movs	r3, #0
 800c91e:	e055      	b.n	800c9cc <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 800c920:	4b2c      	ldr	r3, [pc, #176]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c922:	7b9b      	ldrb	r3, [r3, #14]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d019      	beq.n	800c95c <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800c928:	4b2a      	ldr	r3, [pc, #168]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c92a:	2200      	movs	r2, #0
 800c92c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800c92e:	4b29      	ldr	r3, [pc, #164]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c930:	2203      	movs	r2, #3
 800c932:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800c934:	4b27      	ldr	r3, [pc, #156]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	2205      	movs	r2, #5
 800c93a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800c93c:	4b25      	ldr	r3, [pc, #148]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	3301      	adds	r3, #1
 800c942:	4a24      	ldr	r2, [pc, #144]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c944:	7bd2      	ldrb	r2, [r2, #15]
 800c946:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800c948:	4b22      	ldr	r3, [pc, #136]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	3302      	adds	r3, #2
 800c94e:	4a21      	ldr	r2, [pc, #132]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c950:	7c12      	ldrb	r2, [r2, #16]
 800c952:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800c954:	4b1f      	ldr	r3, [pc, #124]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c956:	2201      	movs	r2, #1
 800c958:	709a      	strb	r2, [r3, #2]
 800c95a:	e01c      	b.n	800c996 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800c95c:	4b1d      	ldr	r3, [pc, #116]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c95e:	789b      	ldrb	r3, [r3, #2]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d005      	beq.n	800c970 <LmhpComplianceTxProcess+0x7c>
 800c964:	2b04      	cmp	r3, #4
 800c966:	d116      	bne.n	800c996 <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 800c968:	4b1a      	ldr	r3, [pc, #104]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c96a:	2201      	movs	r2, #1
 800c96c:	709a      	strb	r2, [r3, #2]
                break;
 800c96e:	e012      	b.n	800c996 <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 800c970:	4b18      	ldr	r3, [pc, #96]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c972:	2202      	movs	r2, #2
 800c974:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800c976:	4b17      	ldr	r3, [pc, #92]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c978:	899b      	ldrh	r3, [r3, #12]
 800c97a:	0a1b      	lsrs	r3, r3, #8
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	4b15      	ldr	r3, [pc, #84]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	b2d2      	uxtb	r2, r2
 800c984:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800c986:	4b13      	ldr	r3, [pc, #76]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c988:	899a      	ldrh	r2, [r3, #12]
 800c98a:	4b12      	ldr	r3, [pc, #72]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	3301      	adds	r3, #1
 800c990:	b2d2      	uxtb	r2, r2
 800c992:	701a      	strb	r2, [r3, #0]
                break;
 800c994:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800c996:	23e0      	movs	r3, #224	@ 0xe0
 800c998:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800c99a:	4b0e      	ldr	r3, [pc, #56]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c99c:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800c99e:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800c9a0:	4b0c      	ldr	r3, [pc, #48]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c9a2:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800c9a4:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 800c9a6:	480c      	ldr	r0, [pc, #48]	@ (800c9d8 <LmhpComplianceTxProcess+0xe4>)
 800c9a8:	f00e fede 	bl	801b768 <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 800c9ac:	4b0b      	ldr	r3, [pc, #44]	@ (800c9dc <LmhpComplianceTxProcess+0xe8>)
 800c9ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d102      	bne.n	800c9ba <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 800c9b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c9b8:	e008      	b.n	800c9cc <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800c9ba:	4b08      	ldr	r3, [pc, #32]	@ (800c9dc <LmhpComplianceTxProcess+0xe8>)
 800c9bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9be:	4a05      	ldr	r2, [pc, #20]	@ (800c9d4 <LmhpComplianceTxProcess+0xe0>)
 800c9c0:	78d2      	ldrb	r2, [r2, #3]
 800c9c2:	4611      	mov	r1, r2
 800c9c4:	4638      	mov	r0, r7
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	4798      	blx	r3
 800c9ca:	4603      	mov	r3, r0
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3708      	adds	r7, #8
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	200005b4 	.word	0x200005b4
 800c9d8:	2000059c 	.word	0x2000059c
 800c9dc:	200000c4 	.word	0x200000c4

0800c9e0 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b0a4      	sub	sp, #144	@ 0x90
 800c9e4:	af02      	add	r7, sp, #8
 800c9e6:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c9e8:	4ba5      	ldr	r3, [pc, #660]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	f083 0301 	eor.w	r3, r3, #1
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	f040 81c6 	bne.w	800cd84 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	7b5b      	ldrb	r3, [r3, #13]
 800c9fc:	f083 0301 	eor.w	r3, r3, #1
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	f040 81c0 	bne.w	800cd88 <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800ca08:	4b9d      	ldr	r3, [pc, #628]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ca0a:	785b      	ldrb	r3, [r3, #1]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d00c      	beq.n	800ca2a <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	7b9b      	ldrb	r3, [r3, #14]
 800ca14:	f083 0301 	eor.w	r3, r3, #1
 800ca18:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d005      	beq.n	800ca2a <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800ca1e:	4b98      	ldr	r3, [pc, #608]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ca20:	899b      	ldrh	r3, [r3, #12]
 800ca22:	3301      	adds	r3, #1
 800ca24:	b29a      	uxth	r2, r3
 800ca26:	4b96      	ldr	r3, [pc, #600]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ca28:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	78db      	ldrb	r3, [r3, #3]
 800ca2e:	2be0      	cmp	r3, #224	@ 0xe0
 800ca30:	f040 81ac 	bne.w	800cd8c <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800ca34:	4b92      	ldr	r3, [pc, #584]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ca36:	785b      	ldrb	r3, [r3, #1]
 800ca38:	f083 0301 	eor.w	r3, r3, #1
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d060      	beq.n	800cb04 <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	7b1b      	ldrb	r3, [r3, #12]
 800ca46:	2b04      	cmp	r3, #4
 800ca48:	f040 81a7 	bne.w	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	f040 81a1 	bne.w	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	689b      	ldr	r3, [r3, #8]
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	f040 819a 	bne.w	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	3302      	adds	r3, #2
 800ca6c:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	f040 8193 	bne.w	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	689b      	ldr	r3, [r3, #8]
 800ca78:	3303      	adds	r3, #3
 800ca7a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	f040 818c 	bne.w	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 800ca82:	4b7f      	ldr	r3, [pc, #508]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ca84:	2200      	movs	r2, #0
 800ca86:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800ca88:	4b7d      	ldr	r3, [pc, #500]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ca8a:	22e0      	movs	r2, #224	@ 0xe0
 800ca8c:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800ca8e:	4b7c      	ldr	r3, [pc, #496]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ca90:	2202      	movs	r2, #2
 800ca92:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800ca94:	4b7a      	ldr	r3, [pc, #488]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ca96:	2200      	movs	r2, #0
 800ca98:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800ca9a:	4b79      	ldr	r3, [pc, #484]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800caa0:	4b77      	ldr	r3, [pc, #476]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800caa2:	2200      	movs	r2, #0
 800caa4:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800caa6:	4b76      	ldr	r3, [pc, #472]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800caa8:	2200      	movs	r2, #0
 800caaa:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800caac:	4b74      	ldr	r3, [pc, #464]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800caae:	2201      	movs	r2, #1
 800cab0:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800cab2:	4b73      	ldr	r3, [pc, #460]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cab4:	2201      	movs	r2, #1
 800cab6:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 800cab8:	2304      	movs	r3, #4
 800caba:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 800cabc:	2301      	movs	r3, #1
 800cabe:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cac0:	f107 030c 	add.w	r3, r7, #12
 800cac4:	4618      	mov	r0, r3
 800cac6:	f004 f8af 	bl	8010c28 <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 800caca:	2000      	movs	r0, #0
 800cacc:	f004 fe88 	bl	80117e0 <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800cad0:	4b6c      	ldr	r3, [pc, #432]	@ (800cc84 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d003      	beq.n	800cae2 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800cada:	4b6a      	ldr	r3, [pc, #424]	@ (800cc84 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800cae2:	2300      	movs	r3, #0
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	4b68      	ldr	r3, [pc, #416]	@ (800cc88 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800cae8:	2200      	movs	r2, #0
 800caea:	f04f 31ff 	mov.w	r1, #4294967295
 800caee:	4867      	ldr	r0, [pc, #412]	@ (800cc8c <LmhpComplianceOnMcpsIndication+0x2ac>)
 800caf0:	f00e fe04 	bl	801b6fc <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800caf4:	f241 3188 	movw	r1, #5000	@ 0x1388
 800caf8:	4864      	ldr	r0, [pc, #400]	@ (800cc8c <LmhpComplianceOnMcpsIndication+0x2ac>)
 800cafa:	f00e ff13 	bl	801b924 <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 800cafe:	f7ff fef9 	bl	800c8f4 <LmhpComplianceTxProcess>
 800cb02:	e14a      	b.n	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	781a      	ldrb	r2, [r3, #0]
 800cb0a:	4b5d      	ldr	r3, [pc, #372]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cb0c:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800cb0e:	4b5c      	ldr	r3, [pc, #368]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cb10:	789b      	ldrb	r3, [r3, #2]
 800cb12:	2b0a      	cmp	r3, #10
 800cb14:	f200 813c 	bhi.w	800cd90 <LmhpComplianceOnMcpsIndication+0x3b0>
 800cb18:	a201      	add	r2, pc, #4	@ (adr r2, 800cb20 <LmhpComplianceOnMcpsIndication+0x140>)
 800cb1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1e:	bf00      	nop
 800cb20:	0800cb4d 	.word	0x0800cb4d
 800cb24:	0800cb97 	.word	0x0800cb97
 800cb28:	0800cb9f 	.word	0x0800cb9f
 800cb2c:	0800cbad 	.word	0x0800cbad
 800cb30:	0800cbbb 	.word	0x0800cbbb
 800cb34:	0800cc13 	.word	0x0800cc13
 800cb38:	0800cc25 	.word	0x0800cc25
 800cb3c:	0800cc95 	.word	0x0800cc95
 800cb40:	0800cd3d 	.word	0x0800cd3d
 800cb44:	0800cd4f 	.word	0x0800cd4f
 800cb48:	0800cd69 	.word	0x0800cd69
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800cb4c:	484f      	ldr	r0, [pc, #316]	@ (800cc8c <LmhpComplianceOnMcpsIndication+0x2ac>)
 800cb4e:	f00e fe79 	bl	801b844 <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800cb52:	4b4b      	ldr	r3, [pc, #300]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cb54:	2200      	movs	r2, #0
 800cb56:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800cb58:	4b49      	ldr	r3, [pc, #292]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800cb5e:	2304      	movs	r3, #4
 800cb60:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800cb62:	4b48      	ldr	r3, [pc, #288]	@ (800cc84 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800cb6a:	f107 030c 	add.w	r3, r7, #12
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f004 f85a 	bl	8010c28 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800cb74:	4b43      	ldr	r3, [pc, #268]	@ (800cc84 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	785b      	ldrb	r3, [r3, #1]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f004 fe30 	bl	80117e0 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800cb80:	4b40      	ldr	r3, [pc, #256]	@ (800cc84 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	689b      	ldr	r3, [r3, #8]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f000 8104 	beq.w	800cd94 <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800cb8c:	4b3d      	ldr	r3, [pc, #244]	@ (800cc84 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	4798      	blx	r3
                    }
                }
                break;
 800cb94:	e0fe      	b.n	800cd94 <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 800cb96:	4b3a      	ldr	r3, [pc, #232]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cb98:	2202      	movs	r2, #2
 800cb9a:	719a      	strb	r2, [r3, #6]
                break;
 800cb9c:	e0fd      	b.n	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 800cb9e:	4b38      	ldr	r3, [pc, #224]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cba0:	2201      	movs	r2, #1
 800cba2:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800cba4:	4b36      	ldr	r3, [pc, #216]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cba6:	2201      	movs	r2, #1
 800cba8:	709a      	strb	r2, [r3, #2]
                break;
 800cbaa:	e0f6      	b.n	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 800cbac:	4b34      	ldr	r3, [pc, #208]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cbae:	2200      	movs	r2, #0
 800cbb0:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800cbb2:	4b33      	ldr	r3, [pc, #204]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	709a      	strb	r2, [r3, #2]
                break;
 800cbb8:	e0ef      	b.n	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	7b1a      	ldrb	r2, [r3, #12]
 800cbbe:	4b30      	ldr	r3, [pc, #192]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cbc0:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 800cbc2:	4b2f      	ldr	r3, [pc, #188]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	2204      	movs	r2, #4
 800cbc8:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800cbca:	2301      	movs	r3, #1
 800cbcc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800cbd0:	e012      	b.n	800cbf8 <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	689a      	ldr	r2, [r3, #8]
 800cbd6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800cbda:	4413      	add	r3, r2
 800cbdc:	781a      	ldrb	r2, [r3, #0]
 800cbde:	4b28      	ldr	r3, [pc, #160]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cbe0:	6899      	ldr	r1, [r3, #8]
 800cbe2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800cbe6:	440b      	add	r3, r1
 800cbe8:	3201      	adds	r2, #1
 800cbea:	b2d2      	uxtb	r2, r2
 800cbec:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800cbee:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800cbf8:	4b21      	ldr	r3, [pc, #132]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cbfa:	795a      	ldrb	r2, [r3, #5]
 800cbfc:	4b20      	ldr	r3, [pc, #128]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cbfe:	799b      	ldrb	r3, [r3, #6]
 800cc00:	4293      	cmp	r3, r2
 800cc02:	bf28      	it	cs
 800cc04:	4613      	movcs	r3, r2
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d3e0      	bcc.n	800cbd2 <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 800cc10:	e0c3      	b.n	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 800cc12:	2305      	movs	r3, #5
 800cc14:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 800cc18:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f004 fb97 	bl	8011350 <LoRaMacMlmeRequest>
                }
                break;
 800cc22:	e0ba      	b.n	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800cc24:	4819      	ldr	r0, [pc, #100]	@ (800cc8c <LmhpComplianceOnMcpsIndication+0x2ac>)
 800cc26:	f00e fe0d 	bl	801b844 <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800cc2a:	4b15      	ldr	r3, [pc, #84]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800cc30:	4b13      	ldr	r3, [pc, #76]	@ (800cc80 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800cc36:	2304      	movs	r3, #4
 800cc38:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800cc3a:	4b12      	ldr	r3, [pc, #72]	@ (800cc84 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800cc42:	f107 030c 	add.w	r3, r7, #12
 800cc46:	4618      	mov	r0, r3
 800cc48:	f003 ffee 	bl	8010c28 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800cc4c:	4b0d      	ldr	r3, [pc, #52]	@ (800cc84 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	785b      	ldrb	r3, [r3, #1]
 800cc52:	4618      	mov	r0, r3
 800cc54:	f004 fdc4 	bl	80117e0 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800cc58:	4b0a      	ldr	r3, [pc, #40]	@ (800cc84 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d003      	beq.n	800cc6a <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800cc62:	4b08      	ldr	r3, [pc, #32]	@ (800cc84 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 800cc6a:	4b09      	ldr	r3, [pc, #36]	@ (800cc90 <LmhpComplianceOnMcpsIndication+0x2b0>)
 800cc6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	f000 8092 	beq.w	800cd98 <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800cc74:	4b06      	ldr	r3, [pc, #24]	@ (800cc90 <LmhpComplianceOnMcpsIndication+0x2b0>)
 800cc76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc78:	2101      	movs	r1, #1
 800cc7a:	2002      	movs	r0, #2
 800cc7c:	4798      	blx	r3
                    }
                }
                break;
 800cc7e:	e08b      	b.n	800cd98 <LmhpComplianceOnMcpsIndication+0x3b8>
 800cc80:	200005b4 	.word	0x200005b4
 800cc84:	200005c8 	.word	0x200005c8
 800cc88:	0800cdb1 	.word	0x0800cdb1
 800cc8c:	2000059c 	.word	0x2000059c
 800cc90:	200000c4 	.word	0x200000c4
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	7b1b      	ldrb	r3, [r3, #12]
 800cc98:	2b03      	cmp	r3, #3
 800cc9a:	d113      	bne.n	800ccc4 <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 800cc9c:	2306      	movs	r3, #6
 800cc9e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	3301      	adds	r3, #1
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	021b      	lsls	r3, r3, #8
 800ccac:	b21a      	sxth	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	3302      	adds	r3, #2
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	b21b      	sxth	r3, r3
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	b21b      	sxth	r3, r3
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800ccc2:	e032      	b.n	800cd2a <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	7b1b      	ldrb	r3, [r3, #12]
 800ccc8:	2b07      	cmp	r3, #7
 800ccca:	d12e      	bne.n	800cd2a <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 800cccc:	2307      	movs	r3, #7
 800ccce:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	021b      	lsls	r3, r3, #8
 800ccdc:	b21a      	sxth	r2, r3
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	689b      	ldr	r3, [r3, #8]
 800cce2:	3302      	adds	r3, #2
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	b21b      	sxth	r3, r3
 800cce8:	4313      	orrs	r3, r2
 800ccea:	b21b      	sxth	r3, r3
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	3303      	adds	r3, #3
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	041a      	lsls	r2, r3, #16
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	3304      	adds	r3, #4
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	021b      	lsls	r3, r3, #8
 800cd06:	4313      	orrs	r3, r2
 800cd08:	687a      	ldr	r2, [r7, #4]
 800cd0a:	6892      	ldr	r2, [r2, #8]
 800cd0c:	3205      	adds	r2, #5
 800cd0e:	7812      	ldrb	r2, [r2, #0]
 800cd10:	4313      	orrs	r3, r2
 800cd12:	461a      	mov	r2, r3
 800cd14:	2364      	movs	r3, #100	@ 0x64
 800cd16:	fb02 f303 	mul.w	r3, r2, r3
 800cd1a:	667b      	str	r3, [r7, #100]	@ 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	3306      	adds	r3, #6
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	b25b      	sxtb	r3, r3
 800cd26:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 800cd2a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f004 fb0e 	bl	8011350 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 800cd34:	4b1a      	ldr	r3, [pc, #104]	@ (800cda0 <LmhpComplianceOnMcpsIndication+0x3c0>)
 800cd36:	2201      	movs	r2, #1
 800cd38:	709a      	strb	r2, [r3, #2]
                }
                break;
 800cd3a:	e02e      	b.n	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 800cd3c:	230a      	movs	r3, #10
 800cd3e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800cd42:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800cd46:	4618      	mov	r0, r3
 800cd48:	f004 fb02 	bl	8011350 <LoRaMacMlmeRequest>
                }
                break;
 800cd4c:	e025      	b.n	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	3301      	adds	r3, #1
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800cd5c:	f107 030c 	add.w	r3, r7, #12
 800cd60:	4618      	mov	r0, r3
 800cd62:	f003 ff61 	bl	8010c28 <LoRaMacMibSetRequestConfirm>
                }
                break;
 800cd66:	e018      	b.n	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800cd68:	230d      	movs	r3, #13
 800cd6a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	689b      	ldr	r3, [r3, #8]
 800cd72:	785b      	ldrb	r3, [r3, #1]
 800cd74:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 800cd78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f004 fae7 	bl	8011350 <LoRaMacMlmeRequest>
                }
                break;
 800cd82:	e00a      	b.n	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800cd84:	bf00      	nop
 800cd86:	e008      	b.n	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800cd88:	bf00      	nop
 800cd8a:	e006      	b.n	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800cd8c:	bf00      	nop
 800cd8e:	e004      	b.n	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 800cd90:	bf00      	nop
 800cd92:	e002      	b.n	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800cd94:	bf00      	nop
 800cd96:	e000      	b.n	800cd9a <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800cd98:	bf00      	nop
        }
    }
}
 800cd9a:	3788      	adds	r7, #136	@ 0x88
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	200005b4 	.word	0x200005b4

0800cda4 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800cda4:	b480      	push	{r7}
 800cda6:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800cda8:	bf00      	nop
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bc80      	pop	{r7}
 800cdae:	4770      	bx	lr

0800cdb0 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800cdb8:	f7ff fd9c 	bl	800c8f4 <LmhpComplianceTxProcess>
}
 800cdbc:	bf00      	nop
 800cdbe:	3708      	adds	r7, #8
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	370c      	adds	r7, #12
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bc80      	pop	{r7}
 800cdd6:	4770      	bx	lr

0800cdd8 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b083      	sub	sp, #12
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	4603      	mov	r3, r0
 800cde0:	6039      	str	r1, [r7, #0]
 800cde2:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800cde4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	370c      	adds	r7, #12
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bc80      	pop	{r7}
 800cdf0:	4770      	bx	lr
	...

0800cdf4 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800cdf4:	b590      	push	{r4, r7, lr}
 800cdf6:	b083      	sub	sp, #12
 800cdf8:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800cdfa:	f00e fe3d 	bl	801ba78 <UTIL_TIMER_GetCurrentTime>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	4a0f      	ldr	r2, [pc, #60]	@ (800ce40 <OnRadioTxDone+0x4c>)
 800ce02:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800ce04:	4c0f      	ldr	r4, [pc, #60]	@ (800ce44 <OnRadioTxDone+0x50>)
 800ce06:	463b      	mov	r3, r7
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f00e f8bd 	bl	801af88 <SysTimeGet>
 800ce0e:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800ce12:	463a      	mov	r2, r7
 800ce14:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce18:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800ce1c:	4a0a      	ldr	r2, [pc, #40]	@ (800ce48 <OnRadioTxDone+0x54>)
 800ce1e:	7813      	ldrb	r3, [r2, #0]
 800ce20:	f043 0310 	orr.w	r3, r3, #16
 800ce24:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800ce26:	f003 f8ef 	bl	8010008 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800ce2a:	4b08      	ldr	r3, [pc, #32]	@ (800ce4c <OnRadioTxDone+0x58>)
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	2100      	movs	r1, #0
 800ce30:	2002      	movs	r0, #2
 800ce32:	f00e ff11 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
}
 800ce36:	bf00      	nop
 800ce38:	370c      	adds	r7, #12
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd90      	pop	{r4, r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	20001250 	.word	0x20001250
 800ce44:	200005cc 	.word	0x200005cc
 800ce48:	2000124c 	.word	0x2000124c
 800ce4c:	0801d550 	.word	0x0801d550

0800ce50 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	4608      	mov	r0, r1
 800ce5a:	4611      	mov	r1, r2
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	4603      	mov	r3, r0
 800ce60:	817b      	strh	r3, [r7, #10]
 800ce62:	460b      	mov	r3, r1
 800ce64:	813b      	strh	r3, [r7, #8]
 800ce66:	4613      	mov	r3, r2
 800ce68:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800ce6a:	f00e fe05 	bl	801ba78 <UTIL_TIMER_GetCurrentTime>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	4a0f      	ldr	r2, [pc, #60]	@ (800ceb0 <OnRadioRxDone+0x60>)
 800ce72:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800ce74:	4a0e      	ldr	r2, [pc, #56]	@ (800ceb0 <OnRadioRxDone+0x60>)
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800ce7a:	4a0d      	ldr	r2, [pc, #52]	@ (800ceb0 <OnRadioRxDone+0x60>)
 800ce7c:	897b      	ldrh	r3, [r7, #10]
 800ce7e:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800ce80:	4a0b      	ldr	r2, [pc, #44]	@ (800ceb0 <OnRadioRxDone+0x60>)
 800ce82:	893b      	ldrh	r3, [r7, #8]
 800ce84:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800ce86:	4a0a      	ldr	r2, [pc, #40]	@ (800ceb0 <OnRadioRxDone+0x60>)
 800ce88:	79fb      	ldrb	r3, [r7, #7]
 800ce8a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800ce8c:	4a09      	ldr	r2, [pc, #36]	@ (800ceb4 <OnRadioRxDone+0x64>)
 800ce8e:	7813      	ldrb	r3, [r2, #0]
 800ce90:	f043 0308 	orr.w	r3, r3, #8
 800ce94:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800ce96:	f003 f8b7 	bl	8010008 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800ce9a:	4b07      	ldr	r3, [pc, #28]	@ (800ceb8 <OnRadioRxDone+0x68>)
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	2100      	movs	r1, #0
 800cea0:	2002      	movs	r0, #2
 800cea2:	f00e fed9 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
}
 800cea6:	bf00      	nop
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	20001254 	.word	0x20001254
 800ceb4:	2000124c 	.word	0x2000124c
 800ceb8:	0801d560 	.word	0x0801d560

0800cebc <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800cec0:	4a07      	ldr	r2, [pc, #28]	@ (800cee0 <OnRadioTxTimeout+0x24>)
 800cec2:	7813      	ldrb	r3, [r2, #0]
 800cec4:	f043 0304 	orr.w	r3, r3, #4
 800cec8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800ceca:	f003 f89d 	bl	8010008 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800cece:	4b05      	ldr	r3, [pc, #20]	@ (800cee4 <OnRadioTxTimeout+0x28>)
 800ced0:	2201      	movs	r2, #1
 800ced2:	2100      	movs	r1, #0
 800ced4:	2002      	movs	r0, #2
 800ced6:	f00e febf 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
}
 800ceda:	bf00      	nop
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	bf00      	nop
 800cee0:	2000124c 	.word	0x2000124c
 800cee4:	0801d570 	.word	0x0801d570

0800cee8 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800ceec:	4a04      	ldr	r2, [pc, #16]	@ (800cf00 <OnRadioRxError+0x18>)
 800ceee:	7813      	ldrb	r3, [r2, #0]
 800cef0:	f043 0302 	orr.w	r3, r3, #2
 800cef4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800cef6:	f003 f887 	bl	8010008 <OnMacProcessNotify>
}
 800cefa:	bf00      	nop
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	2000124c 	.word	0x2000124c

0800cf04 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800cf08:	4a07      	ldr	r2, [pc, #28]	@ (800cf28 <OnRadioRxTimeout+0x24>)
 800cf0a:	7813      	ldrb	r3, [r2, #0]
 800cf0c:	f043 0301 	orr.w	r3, r3, #1
 800cf10:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800cf12:	f003 f879 	bl	8010008 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800cf16:	4b05      	ldr	r3, [pc, #20]	@ (800cf2c <OnRadioRxTimeout+0x28>)
 800cf18:	2201      	movs	r2, #1
 800cf1a:	2100      	movs	r1, #0
 800cf1c:	2002      	movs	r0, #2
 800cf1e:	f00e fe9b 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
}
 800cf22:	bf00      	nop
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	2000124c 	.word	0x2000124c
 800cf2c:	0801d580 	.word	0x0801d580

0800cf30 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800cf30:	b480      	push	{r7}
 800cf32:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800cf34:	4b08      	ldr	r3, [pc, #32]	@ (800cf58 <UpdateRxSlotIdleState+0x28>)
 800cf36:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	d004      	beq.n	800cf48 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800cf3e:	4b07      	ldr	r3, [pc, #28]	@ (800cf5c <UpdateRxSlotIdleState+0x2c>)
 800cf40:	2206      	movs	r2, #6
 800cf42:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800cf46:	e003      	b.n	800cf50 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800cf48:	4b04      	ldr	r3, [pc, #16]	@ (800cf5c <UpdateRxSlotIdleState+0x2c>)
 800cf4a:	2202      	movs	r2, #2
 800cf4c:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
}
 800cf50:	bf00      	nop
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bc80      	pop	{r7}
 800cf56:	4770      	bx	lr
 800cf58:	20000ad4 	.word	0x20000ad4
 800cf5c:	200005cc 	.word	0x200005cc

0800cf60 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b092      	sub	sp, #72	@ 0x48
 800cf64:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800cf66:	4b50      	ldr	r3, [pc, #320]	@ (800d0a8 <ProcessRadioTxDone+0x148>)
 800cf68:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800cf6c:	2b02      	cmp	r3, #2
 800cf6e:	d002      	beq.n	800cf76 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800cf70:	4b4e      	ldr	r3, [pc, #312]	@ (800d0ac <ProcessRadioTxDone+0x14c>)
 800cf72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf74:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf76:	f3ef 8310 	mrs	r3, PRIMASK
 800cf7a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800cf7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800cf80:	b672      	cpsid	i
}
 800cf82:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800cf84:	f00e fd78 	bl	801ba78 <UTIL_TIMER_GetCurrentTime>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	4b49      	ldr	r3, [pc, #292]	@ (800d0b0 <ProcessRadioTxDone+0x150>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800cf92:	4b48      	ldr	r3, [pc, #288]	@ (800d0b4 <ProcessRadioTxDone+0x154>)
 800cf94:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800cf98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf9a:	1ad3      	subs	r3, r2, r3
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	4846      	ldr	r0, [pc, #280]	@ (800d0b8 <ProcessRadioTxDone+0x158>)
 800cfa0:	f00e fcc0 	bl	801b924 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800cfa4:	4844      	ldr	r0, [pc, #272]	@ (800d0b8 <ProcessRadioTxDone+0x158>)
 800cfa6:	f00e fbdf 	bl	801b768 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800cfaa:	4b42      	ldr	r3, [pc, #264]	@ (800d0b4 <ProcessRadioTxDone+0x154>)
 800cfac:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800cfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb2:	1ad3      	subs	r3, r2, r3
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	4841      	ldr	r0, [pc, #260]	@ (800d0bc <ProcessRadioTxDone+0x15c>)
 800cfb8:	f00e fcb4 	bl	801b924 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800cfbc:	483f      	ldr	r0, [pc, #252]	@ (800d0bc <ProcessRadioTxDone+0x15c>)
 800cfbe:	f00e fbd3 	bl	801b768 <UTIL_TIMER_Start>
 800cfc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfc4:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfc8:	f383 8810 	msr	PRIMASK, r3
}
 800cfcc:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800cfce:	4b36      	ldr	r3, [pc, #216]	@ (800d0a8 <ProcessRadioTxDone+0x148>)
 800cfd0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800cfd4:	2b02      	cmp	r3, #2
 800cfd6:	d004      	beq.n	800cfe2 <ProcessRadioTxDone+0x82>
 800cfd8:	4b36      	ldr	r3, [pc, #216]	@ (800d0b4 <ProcessRadioTxDone+0x154>)
 800cfda:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d019      	beq.n	800d016 <ProcessRadioTxDone+0xb6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800cfe2:	2316      	movs	r3, #22
 800cfe4:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cfe8:	4b2f      	ldr	r3, [pc, #188]	@ (800d0a8 <ProcessRadioTxDone+0x148>)
 800cfea:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800cfee:	f107 0220 	add.w	r2, r7, #32
 800cff2:	4611      	mov	r1, r2
 800cff4:	4618      	mov	r0, r3
 800cff6:	f006 fcf9 	bl	80139ec <RegionGetPhyParam>
 800cffa:	4603      	mov	r3, r0
 800cffc:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800cffe:	4b2d      	ldr	r3, [pc, #180]	@ (800d0b4 <ProcessRadioTxDone+0x154>)
 800d000:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	4413      	add	r3, r2
 800d008:	4619      	mov	r1, r3
 800d00a:	482d      	ldr	r0, [pc, #180]	@ (800d0c0 <ProcessRadioTxDone+0x160>)
 800d00c:	f00e fc8a 	bl	801b924 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800d010:	482b      	ldr	r0, [pc, #172]	@ (800d0c0 <ProcessRadioTxDone+0x160>)
 800d012:	f00e fba9 	bl	801b768 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800d016:	4b26      	ldr	r3, [pc, #152]	@ (800d0b0 <ProcessRadioTxDone+0x150>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4a23      	ldr	r2, [pc, #140]	@ (800d0a8 <ProcessRadioTxDone+0x148>)
 800d01c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800d01e:	4b25      	ldr	r3, [pc, #148]	@ (800d0b4 <ProcessRadioTxDone+0x154>)
 800d020:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 800d024:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800d026:	4b22      	ldr	r3, [pc, #136]	@ (800d0b0 <ProcessRadioTxDone+0x150>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d02c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d030:	4618      	mov	r0, r3
 800d032:	f00d ffe1 	bl	801aff8 <SysTimeGetMcuTime>
 800d036:	4638      	mov	r0, r7
 800d038:	4b1b      	ldr	r3, [pc, #108]	@ (800d0a8 <ProcessRadioTxDone+0x148>)
 800d03a:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 800d03e:	9200      	str	r2, [sp, #0]
 800d040:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d044:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800d048:	ca06      	ldmia	r2, {r1, r2}
 800d04a:	f00d ff36 	bl	801aeba <SysTimeSub>
 800d04e:	f107 0314 	add.w	r3, r7, #20
 800d052:	463a      	mov	r2, r7
 800d054:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d058:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800d05c:	4b15      	ldr	r3, [pc, #84]	@ (800d0b4 <ProcessRadioTxDone+0x154>)
 800d05e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800d062:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800d064:	2301      	movs	r3, #1
 800d066:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d068:	4b0f      	ldr	r3, [pc, #60]	@ (800d0a8 <ProcessRadioTxDone+0x148>)
 800d06a:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d101      	bne.n	800d076 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800d072:	2300      	movs	r3, #0
 800d074:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800d076:	4b0c      	ldr	r3, [pc, #48]	@ (800d0a8 <ProcessRadioTxDone+0x148>)
 800d078:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d07c:	f107 0208 	add.w	r2, r7, #8
 800d080:	4611      	mov	r1, r2
 800d082:	4618      	mov	r0, r3
 800d084:	f006 fcd3 	bl	8013a2e <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800d088:	4b0a      	ldr	r3, [pc, #40]	@ (800d0b4 <ProcessRadioTxDone+0x154>)
 800d08a:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800d08e:	f083 0301 	eor.w	r3, r3, #1
 800d092:	b2db      	uxtb	r3, r3
 800d094:	2b00      	cmp	r3, #0
 800d096:	d003      	beq.n	800d0a0 <ProcessRadioTxDone+0x140>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d098:	4b06      	ldr	r3, [pc, #24]	@ (800d0b4 <ProcessRadioTxDone+0x154>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    }
#endif /* LORAMAC_VERSION */
}
 800d0a0:	bf00      	nop
 800d0a2:	3740      	adds	r7, #64	@ 0x40
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	20000ad4 	.word	0x20000ad4
 800d0ac:	0801dc9c 	.word	0x0801dc9c
 800d0b0:	20001250 	.word	0x20001250
 800d0b4:	200005cc 	.word	0x200005cc
 800d0b8:	2000094c 	.word	0x2000094c
 800d0bc:	20000964 	.word	0x20000964
 800d0c0:	200009c0 	.word	0x200009c0

0800d0c4 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800d0c8:	4b10      	ldr	r3, [pc, #64]	@ (800d10c <PrepareRxDoneAbort+0x48>)
 800d0ca:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800d0ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0d2:	4a0e      	ldr	r2, [pc, #56]	@ (800d10c <PrepareRxDoneAbort+0x48>)
 800d0d4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800d0d8:	4b0c      	ldr	r3, [pc, #48]	@ (800d10c <PrepareRxDoneAbort+0x48>)
 800d0da:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d002      	beq.n	800d0e8 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800d0e2:	2000      	movs	r0, #0
 800d0e4:	f001 f950 	bl	800e388 <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800d0e8:	4a08      	ldr	r2, [pc, #32]	@ (800d10c <PrepareRxDoneAbort+0x48>)
 800d0ea:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d0ee:	f043 0302 	orr.w	r3, r3, #2
 800d0f2:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d0f6:	4a05      	ldr	r2, [pc, #20]	@ (800d10c <PrepareRxDoneAbort+0x48>)
 800d0f8:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d0fc:	f043 0310 	orr.w	r3, r3, #16
 800d100:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481

    UpdateRxSlotIdleState( );
 800d104:	f7ff ff14 	bl	800cf30 <UpdateRxSlotIdleState>
}
 800d108:	bf00      	nop
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	200005cc 	.word	0x200005cc

0800d110 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800d110:	b5b0      	push	{r4, r5, r7, lr}
 800d112:	b0aa      	sub	sp, #168	@ 0xa8
 800d114:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d116:	2313      	movs	r3, #19
 800d118:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800d11c:	4b78      	ldr	r3, [pc, #480]	@ (800d300 <ProcessRadioRxDone+0x1f0>)
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint16_t size = RxDoneParams.Size;
 800d124:	4b76      	ldr	r3, [pc, #472]	@ (800d300 <ProcessRadioRxDone+0x1f0>)
 800d126:	891b      	ldrh	r3, [r3, #8]
 800d128:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 800d12c:	4b74      	ldr	r3, [pc, #464]	@ (800d300 <ProcessRadioRxDone+0x1f0>)
 800d12e:	895b      	ldrh	r3, [r3, #10]
 800d130:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    int8_t snr = RxDoneParams.Snr;
 800d134:	4b72      	ldr	r3, [pc, #456]	@ (800d300 <ProcessRadioRxDone+0x1f0>)
 800d136:	7b1b      	ldrb	r3, [r3, #12]
 800d138:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    uint8_t pktHeaderLen = 0;
 800d13c:	2300      	movs	r3, #0
 800d13e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    uint32_t downLinkCounter = 0;
 800d142:	2300      	movs	r3, #0
 800d144:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800d146:	4b6f      	ldr	r3, [pc, #444]	@ (800d304 <ProcessRadioRxDone+0x1f4>)
 800d148:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d14c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t multicast = 0;
 800d150:	2300      	movs	r3, #0
 800d152:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800d156:	2301      	movs	r3, #1
 800d158:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800d15c:	2301      	movs	r3, #1
 800d15e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800d162:	4b69      	ldr	r3, [pc, #420]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d164:	2200      	movs	r2, #0
 800d166:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    MacCtx.RxStatus.Rssi = rssi;
 800d16a:	4a67      	ldr	r2, [pc, #412]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d16c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800d170:	f8a2 347c 	strh.w	r3, [r2, #1148]	@ 0x47c
    MacCtx.RxStatus.Snr = snr;
 800d174:	4a64      	ldr	r2, [pc, #400]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d176:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d17a:	f882 347e 	strb.w	r3, [r2, #1150]	@ 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800d17e:	4b62      	ldr	r3, [pc, #392]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d180:	f893 2480 	ldrb.w	r2, [r3, #1152]	@ 0x480
 800d184:	4b60      	ldr	r3, [pc, #384]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d186:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
    MacCtx.McpsIndication.Port = 0;
 800d18a:	4b5f      	ldr	r3, [pc, #380]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d18c:	2200      	movs	r2, #0
 800d18e:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 800d192:	4b5d      	ldr	r3, [pc, #372]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d194:	2200      	movs	r2, #0
 800d196:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800d19a:	4b5b      	ldr	r3, [pc, #364]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 800d1a2:	4b59      	ldr	r3, [pc, #356]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 800d1aa:	4b57      	ldr	r3, [pc, #348]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.RxData = false;
 800d1b2:	4b55      	ldr	r3, [pc, #340]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.AckReceived = false;
 800d1ba:	4b53      	ldr	r3, [pc, #332]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800d1c2:	4b51      	ldr	r3, [pc, #324]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d1ca:	4b4f      	ldr	r3, [pc, #316]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 800d1d2:	4b4d      	ldr	r3, [pc, #308]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800d1da:	4b4b      	ldr	r3, [pc, #300]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800d1e2:	4b4a      	ldr	r3, [pc, #296]	@ (800d30c <ProcessRadioRxDone+0x1fc>)
 800d1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1e6:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800d1e8:	4849      	ldr	r0, [pc, #292]	@ (800d310 <ProcessRadioRxDone+0x200>)
 800d1ea:	f00e fb2b 	bl	801b844 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800d1ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800d1f8:	f004 fc59 	bl	8011aae <LoRaMacClassBRxBeacon>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d00b      	beq.n	800d21a <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800d202:	4a41      	ldr	r2, [pc, #260]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d204:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800d208:	f8a2 3472 	strh.w	r3, [r2, #1138]	@ 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800d20c:	4a3e      	ldr	r2, [pc, #248]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d20e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d212:	f882 3474 	strb.w	r3, [r2, #1140]	@ 0x474
        return;
 800d216:	f000 bc1f 	b.w	800da58 <ProcessRadioRxDone+0x948>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d21a:	4b3a      	ldr	r3, [pc, #232]	@ (800d304 <ProcessRadioRxDone+0x1f4>)
 800d21c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d220:	2b01      	cmp	r3, #1
 800d222:	d11e      	bne.n	800d262 <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d224:	f004 fc56 	bl	8011ad4 <LoRaMacClassBIsPingExpected>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00a      	beq.n	800d244 <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d22e:	2000      	movs	r0, #0
 800d230:	f004 fc07 	bl	8011a42 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d234:	2000      	movs	r0, #0
 800d236:	f004 fc28 	bl	8011a8a <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800d23a:	4b33      	ldr	r3, [pc, #204]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d23c:	2204      	movs	r2, #4
 800d23e:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
 800d242:	e00e      	b.n	800d262 <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d244:	f004 fc4d 	bl	8011ae2 <LoRaMacClassBIsMulticastExpected>
 800d248:	4603      	mov	r3, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d009      	beq.n	800d262 <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d24e:	2000      	movs	r0, #0
 800d250:	f004 fc01 	bl	8011a56 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d254:	2000      	movs	r0, #0
 800d256:	f004 fc21 	bl	8011a9c <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800d25a:	4b2b      	ldr	r3, [pc, #172]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d25c:	2205      	movs	r2, #5
 800d25e:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800d262:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d266:	2b00      	cmp	r3, #0
 800d268:	d106      	bne.n	800d278 <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d26a:	4b27      	ldr	r3, [pc, #156]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d26c:	2201      	movs	r2, #1
 800d26e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
        PrepareRxDoneAbort( );
 800d272:	f7ff ff27 	bl	800d0c4 <PrepareRxDoneAbort>
        return;
 800d276:	e3ef      	b.n	800da58 <ProcessRadioRxDone+0x948>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800d278:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800d27c:	1c5a      	adds	r2, r3, #1
 800d27e:	f887 2086 	strb.w	r2, [r7, #134]	@ 0x86
 800d282:	461a      	mov	r2, r3
 800d284:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d288:	4413      	add	r3, r2
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800d290:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800d294:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	3b01      	subs	r3, #1
 800d29c:	2b06      	cmp	r3, #6
 800d29e:	f200 83b4 	bhi.w	800da0a <ProcessRadioRxDone+0x8fa>
 800d2a2:	a201      	add	r2, pc, #4	@ (adr r2, 800d2a8 <ProcessRadioRxDone+0x198>)
 800d2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a8:	0800d2c5 	.word	0x0800d2c5
 800d2ac:	0800da0b 	.word	0x0800da0b
 800d2b0:	0800d4a5 	.word	0x0800d4a5
 800d2b4:	0800da0b 	.word	0x0800da0b
 800d2b8:	0800d49d 	.word	0x0800d49d
 800d2bc:	0800da0b 	.word	0x0800da0b
 800d2c0:	0800d9af 	.word	0x0800d9af
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800d2c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d2c8:	2b10      	cmp	r3, #16
 800d2ca:	d806      	bhi.n	800d2da <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d2cc:	4b0e      	ldr	r3, [pc, #56]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d2d4:	f7ff fef6 	bl	800d0c4 <PrepareRxDoneAbort>
                return;
 800d2d8:	e3be      	b.n	800da58 <ProcessRadioRxDone+0x948>
            }
            macMsgJoinAccept.Buffer = payload;
 800d2da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d2de:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 800d2e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d2e4:	b2db      	uxtb	r3, r3
 800d2e6:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d2e8:	4b06      	ldr	r3, [pc, #24]	@ (800d304 <ProcessRadioRxDone+0x1f4>)
 800d2ea:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d010      	beq.n	800d314 <ProcessRadioRxDone+0x204>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d2f2:	4b05      	ldr	r3, [pc, #20]	@ (800d308 <ProcessRadioRxDone+0x1f8>)
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d2fa:	f7ff fee3 	bl	800d0c4 <PrepareRxDoneAbort>
                return;
 800d2fe:	e3ab      	b.n	800da58 <ProcessRadioRxDone+0x948>
 800d300:	20001254 	.word	0x20001254
 800d304:	20000ad4 	.word	0x20000ad4
 800d308:	200005cc 	.word	0x200005cc
 800d30c:	0801dc9c 	.word	0x0801dc9c
 800d310:	20000964 	.word	0x20000964
            }

            SecureElementGetJoinEui( joinEui );
 800d314:	1d3b      	adds	r3, r7, #4
 800d316:	4618      	mov	r0, r3
 800d318:	f7fe fac0 	bl	800b89c <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800d31c:	f107 0214 	add.w	r2, r7, #20
 800d320:	1d3b      	adds	r3, r7, #4
 800d322:	4619      	mov	r1, r3
 800d324:	20ff      	movs	r0, #255	@ 0xff
 800d326:	f005 fde3 	bl	8012ef0 <LoRaMacCryptoHandleJoinAccept>
 800d32a:	4603      	mov	r3, r0
 800d32c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800d330:	2300      	movs	r3, #0
 800d332:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d336:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d33a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	b25b      	sxtb	r3, r3
 800d342:	703b      	strb	r3, [r7, #0]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d344:	4bbb      	ldr	r3, [pc, #748]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d346:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d34a:	707b      	strb	r3, [r7, #1]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800d34c:	4bb9      	ldr	r3, [pc, #740]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d34e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d352:	4639      	mov	r1, r7
 800d354:	2207      	movs	r2, #7
 800d356:	4618      	mov	r0, r3
 800d358:	f006 fb96 	bl	8013a88 <RegionVerify>
 800d35c:	4603      	mov	r3, r0
 800d35e:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800d362:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d366:	2b00      	cmp	r3, #0
 800d368:	f040 808c 	bne.w	800d484 <ProcessRadioRxDone+0x374>
 800d36c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800d370:	2b00      	cmp	r3, #0
 800d372:	f000 8087 	beq.w	800d484 <ProcessRadioRxDone+0x374>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800d376:	7f7b      	ldrb	r3, [r7, #29]
 800d378:	461a      	mov	r2, r3
 800d37a:	4bae      	ldr	r3, [pc, #696]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d37c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800d380:	4bac      	ldr	r3, [pc, #688]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d382:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800d386:	7fbb      	ldrb	r3, [r7, #30]
 800d388:	021b      	lsls	r3, r3, #8
 800d38a:	4313      	orrs	r3, r2
 800d38c:	4aa9      	ldr	r2, [pc, #676]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d38e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800d392:	4ba8      	ldr	r3, [pc, #672]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d394:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800d398:	7ffb      	ldrb	r3, [r7, #31]
 800d39a:	041b      	lsls	r3, r3, #16
 800d39c:	4313      	orrs	r3, r2
 800d39e:	4aa5      	ldr	r2, [pc, #660]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d3a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800d3a4:	6a3b      	ldr	r3, [r7, #32]
 800d3a6:	4aa3      	ldr	r2, [pc, #652]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d3a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800d3ac:	4ba1      	ldr	r3, [pc, #644]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d3ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	2002      	movs	r0, #2
 800d3b6:	f7fe fa89 	bl	800b8cc <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800d3ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d3be:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800d3c2:	b2db      	uxtb	r3, r3
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	4b9b      	ldr	r3, [pc, #620]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d3c8:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d3cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d3d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	4b96      	ldr	r3, [pc, #600]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d3da:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d3de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d3e2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	4b92      	ldr	r3, [pc, #584]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d3ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800d3f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	4b8f      	ldr	r3, [pc, #572]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d3f8:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800d3fa:	4b8e      	ldr	r3, [pc, #568]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d3fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d102      	bne.n	800d408 <ProcessRadioRxDone+0x2f8>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800d402:	4b8c      	ldr	r3, [pc, #560]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d404:	2201      	movs	r2, #1
 800d406:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800d408:	4b8a      	ldr	r3, [pc, #552]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d40a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d40c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d410:	fb02 f303 	mul.w	r3, r2, r3
 800d414:	4a87      	ldr	r2, [pc, #540]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d416:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800d418:	4b86      	ldr	r3, [pc, #536]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d41a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d41c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d420:	4a84      	ldr	r2, [pc, #528]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d422:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800d424:	4b83      	ldr	r3, [pc, #524]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d426:	2201      	movs	r2, #1
 800d428:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800d42c:	4b81      	ldr	r3, [pc, #516]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d42e:	2200      	movs	r2, #0
 800d430:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800d434:	f107 0314 	add.w	r3, r7, #20
 800d438:	3312      	adds	r3, #18
 800d43a:	67bb      	str	r3, [r7, #120]	@ 0x78
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800d43c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d440:	b2db      	uxtb	r3, r3
 800d442:	3b11      	subs	r3, #17
 800d444:	b2db      	uxtb	r3, r3
 800d446:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800d44a:	4b7a      	ldr	r3, [pc, #488]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d44c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d450:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800d454:	4611      	mov	r1, r2
 800d456:	4618      	mov	r0, r3
 800d458:	f006 fb37 	bl	8013aca <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d45c:	4b75      	ldr	r3, [pc, #468]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d45e:	2202      	movs	r2, #2
 800d460:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800d464:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800d468:	4618      	mov	r0, r3
 800d46a:	f005 f81b 	bl	80124a4 <LoRaMacConfirmQueueIsCmdActive>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	f000 82d2 	beq.w	800da1a <ProcessRadioRxDone+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800d476:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800d47a:	4619      	mov	r1, r3
 800d47c:	2000      	movs	r0, #0
 800d47e:	f004 ff85 	bl	801238c <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800d482:	e2ca      	b.n	800da1a <ProcessRadioRxDone+0x90a>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800d484:	2001      	movs	r0, #1
 800d486:	f005 f80d 	bl	80124a4 <LoRaMacConfirmQueueIsCmdActive>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f000 82c3 	beq.w	800da18 <ProcessRadioRxDone+0x908>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800d492:	2101      	movs	r1, #1
 800d494:	2007      	movs	r0, #7
 800d496:	f004 ff79 	bl	801238c <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800d49a:	e2bd      	b.n	800da18 <ProcessRadioRxDone+0x908>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800d49c:	4b66      	ldr	r3, [pc, #408]	@ (800d638 <ProcessRadioRxDone+0x528>)
 800d49e:	2201      	movs	r2, #1
 800d4a0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d4a4:	4b63      	ldr	r3, [pc, #396]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d4a6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d4aa:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800d4ae:	4b62      	ldr	r3, [pc, #392]	@ (800d638 <ProcessRadioRxDone+0x528>)
 800d4b0:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 800d4b4:	b25b      	sxtb	r3, r3
 800d4b6:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800d4ba:	230d      	movs	r3, #13
 800d4bc:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800d4c0:	4b5c      	ldr	r3, [pc, #368]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d4c2:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d002      	beq.n	800d4d0 <ProcessRadioRxDone+0x3c0>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800d4ca:	230e      	movs	r3, #14
 800d4cc:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d4d0:	4b58      	ldr	r3, [pc, #352]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d4d2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d4d6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800d4da:	4611      	mov	r1, r2
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f006 fa85 	bl	80139ec <RegionGetPhyParam>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800d4e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d4ea:	3b0d      	subs	r3, #13
 800d4ec:	b29b      	uxth	r3, r3
 800d4ee:	b21b      	sxth	r3, r3
 800d4f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d4f4:	b21a      	sxth	r2, r3
 800d4f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4f8:	b21b      	sxth	r3, r3
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	dc03      	bgt.n	800d506 <ProcessRadioRxDone+0x3f6>
 800d4fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d502:	2b0b      	cmp	r3, #11
 800d504:	d806      	bhi.n	800d514 <ProcessRadioRxDone+0x404>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d506:	4b4c      	ldr	r3, [pc, #304]	@ (800d638 <ProcessRadioRxDone+0x528>)
 800d508:	2201      	movs	r2, #1
 800d50a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d50e:	f7ff fdd9 	bl	800d0c4 <PrepareRxDoneAbort>
                return;
 800d512:	e2a1      	b.n	800da58 <ProcessRadioRxDone+0x948>
            }
            macMsgData.Buffer = payload;
 800d514:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d518:	63fb      	str	r3, [r7, #60]	@ 0x3c
            macMsgData.BufSize = size;
 800d51a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800d524:	4b45      	ldr	r3, [pc, #276]	@ (800d63c <ProcessRadioRxDone+0x52c>)
 800d526:	663b      	str	r3, [r7, #96]	@ 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800d528:	23ff      	movs	r3, #255	@ 0xff
 800d52a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800d52e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d532:	4618      	mov	r0, r3
 800d534:	f005 ffdc 	bl	80134f0 <LoRaMacParserData>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d006      	beq.n	800d54c <ProcessRadioRxDone+0x43c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d53e:	4b3e      	ldr	r3, [pc, #248]	@ (800d638 <ProcessRadioRxDone+0x528>)
 800d540:	2201      	movs	r2, #1
 800d542:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d546:	f7ff fdbd 	bl	800d0c4 <PrepareRxDoneAbort>
                return;
 800d54a:	e285      	b.n	800da58 <ProcessRadioRxDone+0x948>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800d54c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d54e:	4a3a      	ldr	r2, [pc, #232]	@ (800d638 <ProcessRadioRxDone+0x528>)
 800d550:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800d554:	f107 020e 	add.w	r2, r7, #14
 800d558:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d55c:	4611      	mov	r1, r2
 800d55e:	4618      	mov	r0, r3
 800d560:	f002 fc79 	bl	800fe56 <DetermineFrameType>
 800d564:	4603      	mov	r3, r0
 800d566:	2b00      	cmp	r3, #0
 800d568:	d006      	beq.n	800d578 <ProcessRadioRxDone+0x468>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d56a:	4b33      	ldr	r3, [pc, #204]	@ (800d638 <ProcessRadioRxDone+0x528>)
 800d56c:	2201      	movs	r2, #1
 800d56e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d572:	f7ff fda7 	bl	800d0c4 <PrepareRxDoneAbort>
                return;
 800d576:	e26f      	b.n	800da58 <ProcessRadioRxDone+0x948>
            }

            //Check if it is a multicast message
            multicast = 0;
 800d578:	2300      	movs	r3, #0
 800d57a:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            downLinkCounter = 0;
 800d57e:	2300      	movs	r3, #0
 800d580:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d582:	2300      	movs	r3, #0
 800d584:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800d588:	e04f      	b.n	800d62a <ProcessRadioRxDone+0x51a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800d58a:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800d58e:	4929      	ldr	r1, [pc, #164]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d590:	4613      	mov	r3, r2
 800d592:	005b      	lsls	r3, r3, #1
 800d594:	4413      	add	r3, r2
 800d596:	011b      	lsls	r3, r3, #4
 800d598:	440b      	add	r3, r1
 800d59a:	33ec      	adds	r3, #236	@ 0xec
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d13d      	bne.n	800d620 <ProcessRadioRxDone+0x510>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800d5a4:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800d5a8:	4922      	ldr	r1, [pc, #136]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	005b      	lsls	r3, r3, #1
 800d5ae:	4413      	add	r3, r2
 800d5b0:	011b      	lsls	r3, r3, #4
 800d5b2:	440b      	add	r3, r1
 800d5b4:	33e9      	adds	r3, #233	@ 0xe9
 800d5b6:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d031      	beq.n	800d620 <ProcessRadioRxDone+0x510>
                {
                    multicast = 1;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800d5c2:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800d5c6:	491b      	ldr	r1, [pc, #108]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d5c8:	4613      	mov	r3, r2
 800d5ca:	005b      	lsls	r3, r3, #1
 800d5cc:	4413      	add	r3, r2
 800d5ce:	011b      	lsls	r3, r3, #4
 800d5d0:	440b      	add	r3, r1
 800d5d2:	33ea      	adds	r3, #234	@ 0xea
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800d5da:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800d5de:	4915      	ldr	r1, [pc, #84]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	005b      	lsls	r3, r3, #1
 800d5e4:	4413      	add	r3, r2
 800d5e6:	011b      	lsls	r3, r3, #4
 800d5e8:	440b      	add	r3, r1
 800d5ea:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800d5f4:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800d5f8:	490e      	ldr	r1, [pc, #56]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	005b      	lsls	r3, r3, #1
 800d5fe:	4413      	add	r3, r2
 800d600:	011b      	lsls	r3, r3, #4
 800d602:	440b      	add	r3, r1
 800d604:	33ec      	adds	r3, #236	@ 0xec
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800d60c:	4b09      	ldr	r3, [pc, #36]	@ (800d634 <ProcessRadioRxDone+0x524>)
 800d60e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d612:	2b02      	cmp	r3, #2
 800d614:	d114      	bne.n	800d640 <ProcessRadioRxDone+0x530>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800d616:	4b08      	ldr	r3, [pc, #32]	@ (800d638 <ProcessRadioRxDone+0x528>)
 800d618:	2203      	movs	r2, #3
 800d61a:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
                    }
                    break;
 800d61e:	e00f      	b.n	800d640 <ProcessRadioRxDone+0x530>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d620:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800d624:	3301      	adds	r3, #1
 800d626:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800d62a:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d0ab      	beq.n	800d58a <ProcessRadioRxDone+0x47a>
 800d632:	e006      	b.n	800d642 <ProcessRadioRxDone+0x532>
 800d634:	20000ad4 	.word	0x20000ad4
 800d638:	200005cc 	.word	0x200005cc
 800d63c:	20000804 	.word	0x20000804
                    break;
 800d640:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800d642:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800d646:	2b01      	cmp	r3, #1
 800d648:	d117      	bne.n	800d67a <ProcessRadioRxDone+0x56a>
 800d64a:	7bbb      	ldrb	r3, [r7, #14]
 800d64c:	2b03      	cmp	r3, #3
 800d64e:	d10d      	bne.n	800d66c <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800d650:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d654:	f003 0320 	and.w	r3, r3, #32
 800d658:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d106      	bne.n	800d66c <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800d65e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d666:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d006      	beq.n	800d67a <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d66c:	4bb3      	ldr	r3, [pc, #716]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d66e:	2201      	movs	r2, #1
 800d670:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d674:	f7ff fd26 	bl	800d0c4 <PrepareRxDoneAbort>
                return;
 800d678:	e1ee      	b.n	800da58 <ProcessRadioRxDone+0x948>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800d67a:	2315      	movs	r3, #21
 800d67c:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d680:	4baf      	ldr	r3, [pc, #700]	@ (800d940 <ProcessRadioRxDone+0x830>)
 800d682:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d686:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800d68a:	4611      	mov	r1, r2
 800d68c:	4618      	mov	r0, r3
 800d68e:	f006 f9ad 	bl	80139ec <RegionGetPhyParam>
 800d692:	4603      	mov	r3, r0
 800d694:	66fb      	str	r3, [r7, #108]	@ 0x6c

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800d696:	7bb9      	ldrb	r1, [r7, #14]
 800d698:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	4da8      	ldr	r5, [pc, #672]	@ (800d940 <ProcessRadioRxDone+0x830>)
 800d69e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800d6a2:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800d6a6:	f107 0210 	add.w	r2, r7, #16
 800d6aa:	9202      	str	r2, [sp, #8]
 800d6ac:	f107 020f 	add.w	r2, r7, #15
 800d6b0:	9201      	str	r2, [sp, #4]
 800d6b2:	9300      	str	r3, [sp, #0]
 800d6b4:	f8d5 3128 	ldr.w	r3, [r5, #296]	@ 0x128
 800d6b8:	4622      	mov	r2, r4
 800d6ba:	f000 fe8d 	bl	800e3d8 <GetFCntDown>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d6c4:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d035      	beq.n	800d738 <ProcessRadioRxDone+0x628>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800d6cc:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d6d0:	2b07      	cmp	r3, #7
 800d6d2:	d119      	bne.n	800d708 <ProcessRadioRxDone+0x5f8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800d6d4:	4b99      	ldr	r3, [pc, #612]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d6d6:	2208      	movs	r2, #8
 800d6d8:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800d6dc:	4b98      	ldr	r3, [pc, #608]	@ (800d940 <ProcessRadioRxDone+0x830>)
 800d6de:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d11d      	bne.n	800d722 <ProcessRadioRxDone+0x612>
 800d6e6:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800d6ea:	f023 031f 	bic.w	r3, r3, #31
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	2ba0      	cmp	r3, #160	@ 0xa0
 800d6f2:	d116      	bne.n	800d722 <ProcessRadioRxDone+0x612>
 800d6f4:	4b92      	ldr	r3, [pc, #584]	@ (800d940 <ProcessRadioRxDone+0x830>)
 800d6f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d6f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d111      	bne.n	800d722 <ProcessRadioRxDone+0x612>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800d6fe:	4b90      	ldr	r3, [pc, #576]	@ (800d940 <ProcessRadioRxDone+0x830>)
 800d700:	2201      	movs	r2, #1
 800d702:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800d706:	e00c      	b.n	800d722 <ProcessRadioRxDone+0x612>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800d708:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d70c:	2b08      	cmp	r3, #8
 800d70e:	d104      	bne.n	800d71a <ProcessRadioRxDone+0x60a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800d710:	4b8a      	ldr	r3, [pc, #552]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d712:	220a      	movs	r2, #10
 800d714:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800d718:	e003      	b.n	800d722 <ProcessRadioRxDone+0x612>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d71a:	4b88      	ldr	r3, [pc, #544]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d71c:	2201      	movs	r2, #1
 800d71e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	4a85      	ldr	r2, [pc, #532]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d726:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	4a83      	ldr	r2, [pc, #524]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d72e:	f8c2 3460 	str.w	r3, [r2, #1120]	@ 0x460
                PrepareRxDoneAbort( );
 800d732:	f7ff fcc7 	bl	800d0c4 <PrepareRxDoneAbort>
                return;
 800d736:	e18f      	b.n	800da58 <ProcessRadioRxDone+0x948>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800d738:	7bfa      	ldrb	r2, [r7, #15]
 800d73a:	6939      	ldr	r1, [r7, #16]
 800d73c:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800d740:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d744:	9300      	str	r3, [sp, #0]
 800d746:	460b      	mov	r3, r1
 800d748:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800d74c:	f005 fd32 	bl	80131b4 <LoRaMacCryptoUnsecureMessage>
 800d750:	4603      	mov	r3, r0
 800d752:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d756:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00f      	beq.n	800d77e <ProcessRadioRxDone+0x66e>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800d75e:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d762:	2b02      	cmp	r3, #2
 800d764:	d104      	bne.n	800d770 <ProcessRadioRxDone+0x660>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800d766:	4b75      	ldr	r3, [pc, #468]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d768:	220b      	movs	r2, #11
 800d76a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800d76e:	e003      	b.n	800d778 <ProcessRadioRxDone+0x668>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800d770:	4b72      	ldr	r3, [pc, #456]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d772:	220c      	movs	r2, #12
 800d774:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                }
                PrepareRxDoneAbort( );
 800d778:	f7ff fca4 	bl	800d0c4 <PrepareRxDoneAbort>
                return;
 800d77c:	e16c      	b.n	800da58 <ProcessRadioRxDone+0x948>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d77e:	4b6f      	ldr	r3, [pc, #444]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d780:	2200      	movs	r2, #0
 800d782:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 800d786:	4a6d      	ldr	r2, [pc, #436]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d788:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800d78c:	f882 341a 	strb.w	r3, [r2, #1050]	@ 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 800d790:	4b6a      	ldr	r3, [pc, #424]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d792:	2200      	movs	r2, #0
 800d794:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 800d798:	4b68      	ldr	r3, [pc, #416]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d79a:	2200      	movs	r2, #0
 800d79c:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	4a66      	ldr	r2, [pc, #408]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d7a4:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	4a64      	ldr	r2, [pc, #400]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d7ac:	f8c2 3460 	str.w	r3, [r2, #1120]	@ 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800d7b0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d7b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	bf14      	ite	ne
 800d7be:	2301      	movne	r3, #1
 800d7c0:	2300      	moveq	r3, #0
 800d7c2:	b2da      	uxtb	r2, r3
 800d7c4:	4b5d      	ldr	r3, [pc, #372]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d7c6:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d7ca:	4b5c      	ldr	r3, [pc, #368]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800d7d2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d7d6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	bf14      	ite	ne
 800d7e0:	2301      	movne	r3, #1
 800d7e2:	2300      	moveq	r3, #0
 800d7e4:	b2da      	uxtb	r2, r3
 800d7e6:	4b55      	ldr	r3, [pc, #340]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d7e8:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d7ec:	4b53      	ldr	r3, [pc, #332]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d7ee:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d004      	beq.n	800d800 <ProcessRadioRxDone+0x6f0>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800d7f6:	4b51      	ldr	r3, [pc, #324]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d7f8:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d102      	bne.n	800d806 <ProcessRadioRxDone+0x6f6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800d800:	4b4f      	ldr	r3, [pc, #316]	@ (800d940 <ProcessRadioRxDone+0x830>)
 800d802:	2200      	movs	r2, #0
 800d804:	629a      	str	r2, [r3, #40]	@ 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800d806:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	d104      	bne.n	800d818 <ProcessRadioRxDone+0x708>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800d80e:	4b4b      	ldr	r3, [pc, #300]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d810:	2202      	movs	r2, #2
 800d812:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800d816:	e01f      	b.n	800d858 <ProcessRadioRxDone+0x748>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800d818:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800d81c:	f023 031f 	bic.w	r3, r3, #31
 800d820:	b2db      	uxtb	r3, r3
 800d822:	2ba0      	cmp	r3, #160	@ 0xa0
 800d824:	d110      	bne.n	800d848 <ProcessRadioRxDone+0x738>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800d826:	4b46      	ldr	r3, [pc, #280]	@ (800d940 <ProcessRadioRxDone+0x830>)
 800d828:	2201      	movs	r2, #1
 800d82a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800d82e:	4b44      	ldr	r3, [pc, #272]	@ (800d940 <ProcessRadioRxDone+0x830>)
 800d830:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800d834:	2b00      	cmp	r3, #0
 800d836:	d102      	bne.n	800d83e <ProcessRadioRxDone+0x72e>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800d838:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d83a:	4a41      	ldr	r2, [pc, #260]	@ (800d940 <ProcessRadioRxDone+0x830>)
 800d83c:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800d83e:	4b3f      	ldr	r3, [pc, #252]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d840:	2201      	movs	r2, #1
 800d842:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800d846:	e007      	b.n	800d858 <ProcessRadioRxDone+0x748>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800d848:	4b3d      	ldr	r3, [pc, #244]	@ (800d940 <ProcessRadioRxDone+0x830>)
 800d84a:	2200      	movs	r2, #0
 800d84c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d850:	4b3a      	ldr	r3, [pc, #232]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d852:	2200      	movs	r2, #0
 800d854:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800d858:	4b39      	ldr	r3, [pc, #228]	@ (800d940 <ProcessRadioRxDone+0x830>)
 800d85a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d106      	bne.n	800d870 <ProcessRadioRxDone+0x760>
 800d862:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d866:	f003 0310 	and.w	r3, r3, #16
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d008      	beq.n	800d882 <ProcessRadioRxDone+0x772>
 800d870:	4b33      	ldr	r3, [pc, #204]	@ (800d940 <ProcessRadioRxDone+0x830>)
 800d872:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d876:	2b00      	cmp	r3, #0
 800d878:	d103      	bne.n	800d882 <ProcessRadioRxDone+0x772>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800d87a:	4b30      	ldr	r3, [pc, #192]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d87c:	2201      	movs	r2, #1
 800d87e:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800d882:	4b2e      	ldr	r3, [pc, #184]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d884:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800d888:	4a2c      	ldr	r2, [pc, #176]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d88a:	f892 2434 	ldrb.w	r2, [r2, #1076]	@ 0x434
 800d88e:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 800d892:	4618      	mov	r0, r3
 800d894:	f001 ff02 	bl	800f69c <RemoveMacCommands>

            switch( fType )
 800d898:	7bbb      	ldrb	r3, [r7, #14]
 800d89a:	2b03      	cmp	r3, #3
 800d89c:	d878      	bhi.n	800d990 <ProcessRadioRxDone+0x880>
 800d89e:	a201      	add	r2, pc, #4	@ (adr r2, 800d8a4 <ProcessRadioRxDone+0x794>)
 800d8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8a4:	0800d8b5 	.word	0x0800d8b5
 800d8a8:	0800d905 	.word	0x0800d905
 800d8ac:	0800d945 	.word	0x0800d945
 800d8b0:	0800d96b 	.word	0x0800d96b
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d8b4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d8b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	461c      	mov	r4, r3
 800d8c0:	4b1e      	ldr	r3, [pc, #120]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d8c2:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800d8c6:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800d8ca:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800d8ce:	f102 0010 	add.w	r0, r2, #16
 800d8d2:	9300      	str	r3, [sp, #0]
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	4622      	mov	r2, r4
 800d8d8:	2100      	movs	r1, #0
 800d8da:	f000 fef7 	bl	800e6cc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d8de:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800d8e2:	4b16      	ldr	r3, [pc, #88]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d8e4:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d8e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d8ea:	4a14      	ldr	r2, [pc, #80]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d8ec:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d8f0:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800d8f4:	4b11      	ldr	r3, [pc, #68]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d8f6:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                    MacCtx.McpsIndication.RxData = true;
 800d8fa:	4b10      	ldr	r3, [pc, #64]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    break;
 800d902:	e04c      	b.n	800d99e <ProcessRadioRxDone+0x88e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d904:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d908:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	461c      	mov	r4, r3
 800d910:	4b0a      	ldr	r3, [pc, #40]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d912:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800d916:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800d91a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800d91e:	f102 0010 	add.w	r0, r2, #16
 800d922:	9300      	str	r3, [sp, #0]
 800d924:	460b      	mov	r3, r1
 800d926:	4622      	mov	r2, r4
 800d928:	2100      	movs	r1, #0
 800d92a:	f000 fecf 	bl	800e6cc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d92e:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800d932:	4b02      	ldr	r3, [pc, #8]	@ (800d93c <ProcessRadioRxDone+0x82c>)
 800d934:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    break;
 800d938:	e031      	b.n	800d99e <ProcessRadioRxDone+0x88e>
 800d93a:	bf00      	nop
 800d93c:	200005cc 	.word	0x200005cc
 800d940:	20000ad4 	.word	0x20000ad4
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800d944:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800d946:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800d94a:	4b45      	ldr	r3, [pc, #276]	@ (800da60 <ProcessRadioRxDone+0x950>)
 800d94c:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800d950:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	460b      	mov	r3, r1
 800d958:	2100      	movs	r1, #0
 800d95a:	f000 feb7 	bl	800e6cc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d95e:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800d962:	4b3f      	ldr	r3, [pc, #252]	@ (800da60 <ProcessRadioRxDone+0x950>)
 800d964:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    break;
 800d968:	e019      	b.n	800d99e <ProcessRadioRxDone+0x88e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d96a:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800d96e:	4b3c      	ldr	r3, [pc, #240]	@ (800da60 <ProcessRadioRxDone+0x950>)
 800d970:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d974:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d976:	4a3a      	ldr	r2, [pc, #232]	@ (800da60 <ProcessRadioRxDone+0x950>)
 800d978:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d97c:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800d980:	4b37      	ldr	r3, [pc, #220]	@ (800da60 <ProcessRadioRxDone+0x950>)
 800d982:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                    MacCtx.McpsIndication.RxData = true;
 800d986:	4b36      	ldr	r3, [pc, #216]	@ (800da60 <ProcessRadioRxDone+0x950>)
 800d988:	2201      	movs	r2, #1
 800d98a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    break;
 800d98e:	e006      	b.n	800d99e <ProcessRadioRxDone+0x88e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d990:	4b33      	ldr	r3, [pc, #204]	@ (800da60 <ProcessRadioRxDone+0x950>)
 800d992:	2201      	movs	r2, #1
 800d994:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                    PrepareRxDoneAbort( );
 800d998:	f7ff fb94 	bl	800d0c4 <PrepareRxDoneAbort>
                    break;
 800d99c:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d99e:	4a30      	ldr	r2, [pc, #192]	@ (800da60 <ProcessRadioRxDone+0x950>)
 800d9a0:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d9a4:	f043 0302 	orr.w	r3, r3, #2
 800d9a8:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481

            break;
 800d9ac:	e035      	b.n	800da1a <ProcessRadioRxDone+0x90a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800d9ae:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800d9b2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800d9b6:	18d1      	adds	r1, r2, r3
 800d9b8:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800d9c2:	1ad3      	subs	r3, r2, r3
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	4826      	ldr	r0, [pc, #152]	@ (800da64 <ProcessRadioRxDone+0x954>)
 800d9ca:	f009 fee2 	bl	8017792 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800d9ce:	4b24      	ldr	r3, [pc, #144]	@ (800da60 <ProcessRadioRxDone+0x950>)
 800d9d0:	2203      	movs	r2, #3
 800d9d2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d9d6:	4b22      	ldr	r3, [pc, #136]	@ (800da60 <ProcessRadioRxDone+0x950>)
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800d9de:	4b20      	ldr	r3, [pc, #128]	@ (800da60 <ProcessRadioRxDone+0x950>)
 800d9e0:	4a20      	ldr	r2, [pc, #128]	@ (800da64 <ProcessRadioRxDone+0x954>)
 800d9e2:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800d9e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d9ea:	b2da      	uxtb	r2, r3
 800d9ec:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800d9f0:	1ad3      	subs	r3, r2, r3
 800d9f2:	b2da      	uxtb	r2, r3
 800d9f4:	4b1a      	ldr	r3, [pc, #104]	@ (800da60 <ProcessRadioRxDone+0x950>)
 800d9f6:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d9fa:	4a19      	ldr	r2, [pc, #100]	@ (800da60 <ProcessRadioRxDone+0x950>)
 800d9fc:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800da00:	f043 0302 	orr.w	r3, r3, #2
 800da04:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            break;
 800da08:	e007      	b.n	800da1a <ProcessRadioRxDone+0x90a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800da0a:	4b15      	ldr	r3, [pc, #84]	@ (800da60 <ProcessRadioRxDone+0x950>)
 800da0c:	2201      	movs	r2, #1
 800da0e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            PrepareRxDoneAbort( );
 800da12:	f7ff fb57 	bl	800d0c4 <PrepareRxDoneAbort>
            break;
 800da16:	e000      	b.n	800da1a <ProcessRadioRxDone+0x90a>
            break;
 800da18:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800da1a:	4b11      	ldr	r3, [pc, #68]	@ (800da60 <ProcessRadioRxDone+0x950>)
 800da1c:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800da20:	2b00      	cmp	r3, #0
 800da22:	d008      	beq.n	800da36 <ProcessRadioRxDone+0x926>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800da24:	4b0e      	ldr	r3, [pc, #56]	@ (800da60 <ProcessRadioRxDone+0x950>)
 800da26:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00b      	beq.n	800da46 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 800da2e:	2000      	movs	r0, #0
 800da30:	f000 fcaa 	bl	800e388 <OnAckTimeoutTimerEvent>
 800da34:	e007      	b.n	800da46 <ProcessRadioRxDone+0x936>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800da36:	4b0c      	ldr	r3, [pc, #48]	@ (800da68 <ProcessRadioRxDone+0x958>)
 800da38:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800da3c:	2b02      	cmp	r3, #2
 800da3e:	d102      	bne.n	800da46 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 800da40:	2000      	movs	r0, #0
 800da42:	f000 fca1 	bl	800e388 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800da46:	4a06      	ldr	r2, [pc, #24]	@ (800da60 <ProcessRadioRxDone+0x950>)
 800da48:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800da4c:	f043 0310 	orr.w	r3, r3, #16
 800da50:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800da54:	f7ff fa6c 	bl	800cf30 <UpdateRxSlotIdleState>
}
 800da58:	3798      	adds	r7, #152	@ 0x98
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bdb0      	pop	{r4, r5, r7, pc}
 800da5e:	bf00      	nop
 800da60:	200005cc 	.word	0x200005cc
 800da64:	20000804 	.word	0x20000804
 800da68:	20000ad4 	.word	0x20000ad4

0800da6c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800da70:	4b11      	ldr	r3, [pc, #68]	@ (800dab8 <ProcessRadioTxTimeout+0x4c>)
 800da72:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800da76:	2b02      	cmp	r3, #2
 800da78:	d002      	beq.n	800da80 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800da7a:	4b10      	ldr	r3, [pc, #64]	@ (800dabc <ProcessRadioTxTimeout+0x50>)
 800da7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da7e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800da80:	f7ff fa56 	bl	800cf30 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800da84:	4b0e      	ldr	r3, [pc, #56]	@ (800dac0 <ProcessRadioTxTimeout+0x54>)
 800da86:	2202      	movs	r2, #2
 800da88:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800da8c:	2002      	movs	r0, #2
 800da8e:	f004 fcd5 	bl	801243c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800da92:	4b0b      	ldr	r3, [pc, #44]	@ (800dac0 <ProcessRadioTxTimeout+0x54>)
 800da94:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d003      	beq.n	800daa4 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 800da9c:	4b08      	ldr	r3, [pc, #32]	@ (800dac0 <ProcessRadioTxTimeout+0x54>)
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800daa4:	4a06      	ldr	r2, [pc, #24]	@ (800dac0 <ProcessRadioTxTimeout+0x54>)
 800daa6:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800daaa:	f043 0310 	orr.w	r3, r3, #16
 800daae:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
}
 800dab2:	bf00      	nop
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	20000ad4 	.word	0x20000ad4
 800dabc:	0801dc9c 	.word	0x0801dc9c
 800dac0:	200005cc 	.word	0x200005cc

0800dac4 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	4603      	mov	r3, r0
 800dacc:	460a      	mov	r2, r1
 800dace:	71fb      	strb	r3, [r7, #7]
 800dad0:	4613      	mov	r3, r2
 800dad2:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800dad4:	2300      	movs	r3, #0
 800dad6:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800dad8:	4b40      	ldr	r3, [pc, #256]	@ (800dbdc <HandleRadioRxErrorTimeout+0x118>)
 800dada:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800dade:	2b02      	cmp	r3, #2
 800dae0:	d002      	beq.n	800dae8 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800dae2:	4b3f      	ldr	r3, [pc, #252]	@ (800dbe0 <HandleRadioRxErrorTimeout+0x11c>)
 800dae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dae6:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800dae8:	f003 ffed 	bl	8011ac6 <LoRaMacClassBIsBeaconExpected>
 800daec:	4603      	mov	r3, r0
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d007      	beq.n	800db02 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800daf2:	2002      	movs	r0, #2
 800daf4:	f003 ff9b 	bl	8011a2e <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800daf8:	2000      	movs	r0, #0
 800dafa:	f003 ffbd 	bl	8011a78 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800dafe:	2301      	movs	r3, #1
 800db00:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800db02:	4b36      	ldr	r3, [pc, #216]	@ (800dbdc <HandleRadioRxErrorTimeout+0x118>)
 800db04:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800db08:	2b01      	cmp	r3, #1
 800db0a:	d119      	bne.n	800db40 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800db0c:	f003 ffe2 	bl	8011ad4 <LoRaMacClassBIsPingExpected>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d007      	beq.n	800db26 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800db16:	2000      	movs	r0, #0
 800db18:	f003 ff93 	bl	8011a42 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800db1c:	2000      	movs	r0, #0
 800db1e:	f003 ffb4 	bl	8011a8a <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800db22:	2301      	movs	r3, #1
 800db24:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800db26:	f003 ffdc 	bl	8011ae2 <LoRaMacClassBIsMulticastExpected>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d007      	beq.n	800db40 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800db30:	2000      	movs	r0, #0
 800db32:	f003 ff90 	bl	8011a56 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800db36:	2000      	movs	r0, #0
 800db38:	f003 ffb0 	bl	8011a9c <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800db3c:	2301      	movs	r3, #1
 800db3e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800db40:	7bfb      	ldrb	r3, [r7, #15]
 800db42:	f083 0301 	eor.w	r3, r3, #1
 800db46:	b2db      	uxtb	r3, r3
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d040      	beq.n	800dbce <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800db4c:	4b25      	ldr	r3, [pc, #148]	@ (800dbe4 <HandleRadioRxErrorTimeout+0x120>)
 800db4e:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800db52:	2b00      	cmp	r3, #0
 800db54:	d122      	bne.n	800db9c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800db56:	4b23      	ldr	r3, [pc, #140]	@ (800dbe4 <HandleRadioRxErrorTimeout+0x120>)
 800db58:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d003      	beq.n	800db68 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800db60:	4a20      	ldr	r2, [pc, #128]	@ (800dbe4 <HandleRadioRxErrorTimeout+0x120>)
 800db62:	79fb      	ldrb	r3, [r7, #7]
 800db64:	f882 3435 	strb.w	r3, [r2, #1077]	@ 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800db68:	79fb      	ldrb	r3, [r7, #7]
 800db6a:	4618      	mov	r0, r3
 800db6c:	f004 fc66 	bl	801243c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800db70:	4b1a      	ldr	r3, [pc, #104]	@ (800dbdc <HandleRadioRxErrorTimeout+0x118>)
 800db72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db74:	4618      	mov	r0, r3
 800db76:	f00d ff91 	bl	801ba9c <UTIL_TIMER_GetElapsedTime>
 800db7a:	4602      	mov	r2, r0
 800db7c:	4b19      	ldr	r3, [pc, #100]	@ (800dbe4 <HandleRadioRxErrorTimeout+0x120>)
 800db7e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800db82:	429a      	cmp	r2, r3
 800db84:	d323      	bcc.n	800dbce <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800db86:	4818      	ldr	r0, [pc, #96]	@ (800dbe8 <HandleRadioRxErrorTimeout+0x124>)
 800db88:	f00d fe5c 	bl	801b844 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800db8c:	4a15      	ldr	r2, [pc, #84]	@ (800dbe4 <HandleRadioRxErrorTimeout+0x120>)
 800db8e:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800db92:	f043 0310 	orr.w	r3, r3, #16
 800db96:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 800db9a:	e018      	b.n	800dbce <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800db9c:	4b11      	ldr	r3, [pc, #68]	@ (800dbe4 <HandleRadioRxErrorTimeout+0x120>)
 800db9e:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d003      	beq.n	800dbae <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800dba6:	4a0f      	ldr	r2, [pc, #60]	@ (800dbe4 <HandleRadioRxErrorTimeout+0x120>)
 800dba8:	79bb      	ldrb	r3, [r7, #6]
 800dbaa:	f882 3435 	strb.w	r3, [r2, #1077]	@ 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800dbae:	79bb      	ldrb	r3, [r7, #6]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f004 fc43 	bl	801243c <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800dbb6:	4b09      	ldr	r3, [pc, #36]	@ (800dbdc <HandleRadioRxErrorTimeout+0x118>)
 800dbb8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800dbbc:	2b02      	cmp	r3, #2
 800dbbe:	d006      	beq.n	800dbce <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800dbc0:	4a08      	ldr	r2, [pc, #32]	@ (800dbe4 <HandleRadioRxErrorTimeout+0x120>)
 800dbc2:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dbc6:	f043 0310 	orr.w	r3, r3, #16
 800dbca:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800dbce:	f7ff f9af 	bl	800cf30 <UpdateRxSlotIdleState>
}
 800dbd2:	bf00      	nop
 800dbd4:	3710      	adds	r7, #16
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	20000ad4 	.word	0x20000ad4
 800dbe0:	0801dc9c 	.word	0x0801dc9c
 800dbe4:	200005cc 	.word	0x200005cc
 800dbe8:	20000964 	.word	0x20000964

0800dbec <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800dbf0:	2106      	movs	r1, #6
 800dbf2:	2005      	movs	r0, #5
 800dbf4:	f7ff ff66 	bl	800dac4 <HandleRadioRxErrorTimeout>
}
 800dbf8:	bf00      	nop
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800dc00:	2104      	movs	r1, #4
 800dc02:	2003      	movs	r0, #3
 800dc04:	f7ff ff5e 	bl	800dac4 <HandleRadioRxErrorTimeout>
}
 800dc08:	bf00      	nop
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b084      	sub	sp, #16
 800dc10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc12:	f3ef 8310 	mrs	r3, PRIMASK
 800dc16:	607b      	str	r3, [r7, #4]
  return(result);
 800dc18:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800dc1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc1c:	b672      	cpsid	i
}
 800dc1e:	bf00      	nop
    events = LoRaMacRadioEvents;
 800dc20:	4b1d      	ldr	r3, [pc, #116]	@ (800dc98 <LoRaMacHandleIrqEvents+0x8c>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800dc26:	4b1c      	ldr	r3, [pc, #112]	@ (800dc98 <LoRaMacHandleIrqEvents+0x8c>)
 800dc28:	2200      	movs	r2, #0
 800dc2a:	601a      	str	r2, [r3, #0]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	f383 8810 	msr	PRIMASK, r3
}
 800dc36:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d027      	beq.n	800dc8e <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800dc3e:	783b      	ldrb	r3, [r7, #0]
 800dc40:	f003 0310 	and.w	r3, r3, #16
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d001      	beq.n	800dc4e <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800dc4a:	f7ff f989 	bl	800cf60 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800dc4e:	783b      	ldrb	r3, [r7, #0]
 800dc50:	f003 0308 	and.w	r3, r3, #8
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d001      	beq.n	800dc5e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800dc5a:	f7ff fa59 	bl	800d110 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800dc5e:	783b      	ldrb	r3, [r7, #0]
 800dc60:	f003 0304 	and.w	r3, r3, #4
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d001      	beq.n	800dc6e <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800dc6a:	f7ff feff 	bl	800da6c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800dc6e:	783b      	ldrb	r3, [r7, #0]
 800dc70:	f003 0302 	and.w	r3, r3, #2
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d001      	beq.n	800dc7e <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800dc7a:	f7ff ffb7 	bl	800dbec <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800dc7e:	783b      	ldrb	r3, [r7, #0]
 800dc80:	f003 0301 	and.w	r3, r3, #1
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d001      	beq.n	800dc8e <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800dc8a:	f7ff ffb7 	bl	800dbfc <ProcessRadioRxTimeout>
        }
    }
}
 800dc8e:	bf00      	nop
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	2000124c 	.word	0x2000124c

0800dc9c <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800dca0:	4b0b      	ldr	r3, [pc, #44]	@ (800dcd0 <LoRaMacIsBusy+0x34>)
 800dca2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	d101      	bne.n	800dcae <LoRaMacIsBusy+0x12>
    {
        return false;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	e00c      	b.n	800dcc8 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800dcae:	4b08      	ldr	r3, [pc, #32]	@ (800dcd0 <LoRaMacIsBusy+0x34>)
 800dcb0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d106      	bne.n	800dcc6 <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800dcb8:	4b05      	ldr	r3, [pc, #20]	@ (800dcd0 <LoRaMacIsBusy+0x34>)
 800dcba:	f893 3482 	ldrb.w	r3, [r3, #1154]	@ 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d101      	bne.n	800dcc6 <LoRaMacIsBusy+0x2a>
    {
        return false;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	e000      	b.n	800dcc8 <LoRaMacIsBusy+0x2c>
    }
    return true;
 800dcc6:	2301      	movs	r3, #1
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bc80      	pop	{r7}
 800dcce:	4770      	bx	lr
 800dcd0:	200005cc 	.word	0x200005cc

0800dcd4 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800dcd8:	4b05      	ldr	r3, [pc, #20]	@ (800dcf0 <LoRaMacIsStopped+0x1c>)
 800dcda:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d101      	bne.n	800dce6 <LoRaMacIsStopped+0x12>
    {
        return true;
 800dce2:	2301      	movs	r3, #1
 800dce4:	e000      	b.n	800dce8 <LoRaMacIsStopped+0x14>
    }
    return false;
 800dce6:	2300      	movs	r3, #0
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bc80      	pop	{r7}
 800dcee:	4770      	bx	lr
 800dcf0:	200005cc 	.word	0x200005cc

0800dcf4 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800dcfe:	4a04      	ldr	r2, [pc, #16]	@ (800dd10 <LoRaMacEnableRequests+0x1c>)
 800dd00:	79fb      	ldrb	r3, [r7, #7]
 800dd02:	f882 3482 	strb.w	r3, [r2, #1154]	@ 0x482
}
 800dd06:	bf00      	nop
 800dd08:	370c      	adds	r7, #12
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bc80      	pop	{r7}
 800dd0e:	4770      	bx	lr
 800dd10:	200005cc 	.word	0x200005cc

0800dd14 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800dd1a:	4b2c      	ldr	r3, [pc, #176]	@ (800ddcc <LoRaMacHandleRequestEvents+0xb8>)
 800dd1c:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dd20:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800dd22:	4b2a      	ldr	r3, [pc, #168]	@ (800ddcc <LoRaMacHandleRequestEvents+0xb8>)
 800dd24:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d14a      	bne.n	800ddc2 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800dd2c:	4b27      	ldr	r3, [pc, #156]	@ (800ddcc <LoRaMacHandleRequestEvents+0xb8>)
 800dd2e:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dd32:	f003 0301 	and.w	r3, r3, #1
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d006      	beq.n	800dd4a <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800dd3c:	4a23      	ldr	r2, [pc, #140]	@ (800ddcc <LoRaMacHandleRequestEvents+0xb8>)
 800dd3e:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dd42:	f36f 0300 	bfc	r3, #0, #1
 800dd46:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800dd4a:	4b20      	ldr	r3, [pc, #128]	@ (800ddcc <LoRaMacHandleRequestEvents+0xb8>)
 800dd4c:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dd50:	f003 0304 	and.w	r3, r3, #4
 800dd54:	b2db      	uxtb	r3, r3
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d006      	beq.n	800dd68 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800dd5a:	4a1c      	ldr	r2, [pc, #112]	@ (800ddcc <LoRaMacHandleRequestEvents+0xb8>)
 800dd5c:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dd60:	f36f 0382 	bfc	r3, #2, #1
 800dd64:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800dd68:	2001      	movs	r0, #1
 800dd6a:	f7ff ffc3 	bl	800dcf4 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800dd6e:	793b      	ldrb	r3, [r7, #4]
 800dd70:	f003 0301 	and.w	r3, r3, #1
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d005      	beq.n	800dd86 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800dd7a:	4b14      	ldr	r3, [pc, #80]	@ (800ddcc <LoRaMacHandleRequestEvents+0xb8>)
 800dd7c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4813      	ldr	r0, [pc, #76]	@ (800ddd0 <LoRaMacHandleRequestEvents+0xbc>)
 800dd84:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800dd86:	793b      	ldrb	r3, [r7, #4]
 800dd88:	f003 0304 	and.w	r3, r3, #4
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d00e      	beq.n	800ddb0 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800dd92:	4810      	ldr	r0, [pc, #64]	@ (800ddd4 <LoRaMacHandleRequestEvents+0xc0>)
 800dd94:	f004 fba0 	bl	80124d8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800dd98:	f004 fbf0 	bl	801257c <LoRaMacConfirmQueueGetCnt>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d006      	beq.n	800ddb0 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800dda2:	4a0a      	ldr	r2, [pc, #40]	@ (800ddcc <LoRaMacHandleRequestEvents+0xb8>)
 800dda4:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dda8:	f043 0304 	orr.w	r3, r3, #4
 800ddac:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800ddb0:	f003 feb5 	bl	8011b1e <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800ddb4:	4a05      	ldr	r2, [pc, #20]	@ (800ddcc <LoRaMacHandleRequestEvents+0xb8>)
 800ddb6:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ddba:	f36f 1304 	bfc	r3, #4, #1
 800ddbe:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
}
 800ddc2:	bf00      	nop
 800ddc4:	3708      	adds	r7, #8
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	200005cc 	.word	0x200005cc
 800ddd0:	20000a00 	.word	0x20000a00
 800ddd4:	20000a14 	.word	0x20000a14

0800ddd8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800dddc:	4b16      	ldr	r3, [pc, #88]	@ (800de38 <LoRaMacHandleIndicationEvents+0x60>)
 800ddde:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dde2:	f003 0308 	and.w	r3, r3, #8
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d00d      	beq.n	800de08 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800ddec:	4a12      	ldr	r2, [pc, #72]	@ (800de38 <LoRaMacHandleIndicationEvents+0x60>)
 800ddee:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ddf2:	f36f 03c3 	bfc	r3, #3, #1
 800ddf6:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800ddfa:	4b0f      	ldr	r3, [pc, #60]	@ (800de38 <LoRaMacHandleIndicationEvents+0x60>)
 800ddfc:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800de00:	68db      	ldr	r3, [r3, #12]
 800de02:	490e      	ldr	r1, [pc, #56]	@ (800de3c <LoRaMacHandleIndicationEvents+0x64>)
 800de04:	480e      	ldr	r0, [pc, #56]	@ (800de40 <LoRaMacHandleIndicationEvents+0x68>)
 800de06:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800de08:	4b0b      	ldr	r3, [pc, #44]	@ (800de38 <LoRaMacHandleIndicationEvents+0x60>)
 800de0a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800de0e:	f003 0302 	and.w	r3, r3, #2
 800de12:	b2db      	uxtb	r3, r3
 800de14:	2b00      	cmp	r3, #0
 800de16:	d00d      	beq.n	800de34 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800de18:	4a07      	ldr	r2, [pc, #28]	@ (800de38 <LoRaMacHandleIndicationEvents+0x60>)
 800de1a:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800de1e:	f36f 0341 	bfc	r3, #1, #1
 800de22:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800de26:	4b04      	ldr	r3, [pc, #16]	@ (800de38 <LoRaMacHandleIndicationEvents+0x60>)
 800de28:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	4903      	ldr	r1, [pc, #12]	@ (800de3c <LoRaMacHandleIndicationEvents+0x64>)
 800de30:	4804      	ldr	r0, [pc, #16]	@ (800de44 <LoRaMacHandleIndicationEvents+0x6c>)
 800de32:	4798      	blx	r3
    }
}
 800de34:	bf00      	nop
 800de36:	bd80      	pop	{r7, pc}
 800de38:	200005cc 	.word	0x200005cc
 800de3c:	20000a48 	.word	0x20000a48
 800de40:	20000a28 	.word	0x20000a28
 800de44:	200009e4 	.word	0x200009e4

0800de48 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800de4e:	4b32      	ldr	r3, [pc, #200]	@ (800df18 <LoRaMacHandleMcpsRequest+0xd0>)
 800de50:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800de54:	f003 0301 	and.w	r3, r3, #1
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d058      	beq.n	800df10 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800de5e:	2300      	movs	r3, #0
 800de60:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800de62:	2300      	movs	r3, #0
 800de64:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800de66:	4b2c      	ldr	r3, [pc, #176]	@ (800df18 <LoRaMacHandleMcpsRequest+0xd0>)
 800de68:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d004      	beq.n	800de7a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800de70:	4b29      	ldr	r3, [pc, #164]	@ (800df18 <LoRaMacHandleMcpsRequest+0xd0>)
 800de72:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800de76:	2b03      	cmp	r3, #3
 800de78:	d104      	bne.n	800de84 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800de7a:	f002 f83b 	bl	800fef4 <CheckRetransUnconfirmedUplink>
 800de7e:	4603      	mov	r3, r0
 800de80:	71fb      	strb	r3, [r7, #7]
 800de82:	e020      	b.n	800dec6 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800de84:	4b24      	ldr	r3, [pc, #144]	@ (800df18 <LoRaMacHandleMcpsRequest+0xd0>)
 800de86:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d11b      	bne.n	800dec6 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 800de8e:	4b22      	ldr	r3, [pc, #136]	@ (800df18 <LoRaMacHandleMcpsRequest+0xd0>)
 800de90:	f893 340f 	ldrb.w	r3, [r3, #1039]	@ 0x40f
 800de94:	2b00      	cmp	r3, #0
 800de96:	d014      	beq.n	800dec2 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800de98:	f002 f858 	bl	800ff4c <CheckRetransConfirmedUplink>
 800de9c:	4603      	mov	r3, r0
 800de9e:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800dea0:	4b1e      	ldr	r3, [pc, #120]	@ (800df1c <LoRaMacHandleMcpsRequest+0xd4>)
 800dea2:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d10d      	bne.n	800dec6 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800deaa:	79fb      	ldrb	r3, [r7, #7]
 800deac:	f083 0301 	eor.w	r3, r3, #1
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d002      	beq.n	800debc <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800deb6:	f002 f8db 	bl	8010070 <AckTimeoutRetriesProcess>
 800deba:	e004      	b.n	800dec6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800debc:	f002 f916 	bl	80100ec <AckTimeoutRetriesFinalize>
 800dec0:	e001      	b.n	800dec6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800dec2:	2301      	movs	r3, #1
 800dec4:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800dec6:	79fb      	ldrb	r3, [r7, #7]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d00d      	beq.n	800dee8 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800decc:	4814      	ldr	r0, [pc, #80]	@ (800df20 <LoRaMacHandleMcpsRequest+0xd8>)
 800dece:	f00d fcb9 	bl	801b844 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ded2:	4b11      	ldr	r3, [pc, #68]	@ (800df18 <LoRaMacHandleMcpsRequest+0xd0>)
 800ded4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ded8:	f023 0320 	bic.w	r3, r3, #32
 800dedc:	4a0e      	ldr	r2, [pc, #56]	@ (800df18 <LoRaMacHandleMcpsRequest+0xd0>)
 800dede:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800dee2:	f002 f855 	bl	800ff90 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800dee6:	e013      	b.n	800df10 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800dee8:	79bb      	ldrb	r3, [r7, #6]
 800deea:	f083 0301 	eor.w	r3, r3, #1
 800deee:	b2db      	uxtb	r3, r3
 800def0:	2b00      	cmp	r3, #0
 800def2:	d00d      	beq.n	800df10 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800def4:	4a08      	ldr	r2, [pc, #32]	@ (800df18 <LoRaMacHandleMcpsRequest+0xd0>)
 800def6:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800defa:	f36f 1304 	bfc	r3, #4, #1
 800defe:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            MacCtx.AckTimeoutRetry = false;
 800df02:	4b05      	ldr	r3, [pc, #20]	@ (800df18 <LoRaMacHandleMcpsRequest+0xd0>)
 800df04:	2200      	movs	r2, #0
 800df06:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
            OnTxDelayedTimerEvent( NULL );
 800df0a:	2000      	movs	r0, #0
 800df0c:	f000 f992 	bl	800e234 <OnTxDelayedTimerEvent>
}
 800df10:	bf00      	nop
 800df12:	3708      	adds	r7, #8
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	200005cc 	.word	0x200005cc
 800df1c:	20000ad4 	.word	0x20000ad4
 800df20:	20000934 	.word	0x20000934

0800df24 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800df24:	b580      	push	{r7, lr}
 800df26:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800df28:	4b1b      	ldr	r3, [pc, #108]	@ (800df98 <LoRaMacHandleMlmeRequest+0x74>)
 800df2a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800df2e:	f003 0304 	and.w	r3, r3, #4
 800df32:	b2db      	uxtb	r3, r3
 800df34:	2b00      	cmp	r3, #0
 800df36:	d02c      	beq.n	800df92 <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800df38:	2001      	movs	r0, #1
 800df3a:	f004 fab3 	bl	80124a4 <LoRaMacConfirmQueueIsCmdActive>
 800df3e:	4603      	mov	r3, r0
 800df40:	2b00      	cmp	r3, #0
 800df42:	d012      	beq.n	800df6a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800df44:	2001      	movs	r0, #1
 800df46:	f004 fa4f 	bl	80123e8 <LoRaMacConfirmQueueGetStatus>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d103      	bne.n	800df58 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800df50:	4b11      	ldr	r3, [pc, #68]	@ (800df98 <LoRaMacHandleMlmeRequest+0x74>)
 800df52:	2200      	movs	r2, #0
 800df54:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800df58:	4b0f      	ldr	r3, [pc, #60]	@ (800df98 <LoRaMacHandleMlmeRequest+0x74>)
 800df5a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800df5e:	f023 0302 	bic.w	r3, r3, #2
 800df62:	4a0d      	ldr	r2, [pc, #52]	@ (800df98 <LoRaMacHandleMlmeRequest+0x74>)
 800df64:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800df68:	e013      	b.n	800df92 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800df6a:	2006      	movs	r0, #6
 800df6c:	f004 fa9a 	bl	80124a4 <LoRaMacConfirmQueueIsCmdActive>
 800df70:	4603      	mov	r3, r0
 800df72:	2b00      	cmp	r3, #0
 800df74:	d105      	bne.n	800df82 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800df76:	2007      	movs	r0, #7
 800df78:	f004 fa94 	bl	80124a4 <LoRaMacConfirmQueueIsCmdActive>
 800df7c:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d007      	beq.n	800df92 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800df82:	4b05      	ldr	r3, [pc, #20]	@ (800df98 <LoRaMacHandleMlmeRequest+0x74>)
 800df84:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800df88:	f023 0302 	bic.w	r3, r3, #2
 800df8c:	4a02      	ldr	r2, [pc, #8]	@ (800df98 <LoRaMacHandleMlmeRequest+0x74>)
 800df8e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800df92:	bf00      	nop
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	200005cc 	.word	0x200005cc

0800df9c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800dfa0:	200c      	movs	r0, #12
 800dfa2:	f004 fa7f 	bl	80124a4 <LoRaMacConfirmQueueIsCmdActive>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d019      	beq.n	800dfe0 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800dfac:	4b0e      	ldr	r3, [pc, #56]	@ (800dfe8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800dfae:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dfb2:	f003 0301 	and.w	r3, r3, #1
 800dfb6:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d111      	bne.n	800dfe0 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800dfbc:	4b0a      	ldr	r3, [pc, #40]	@ (800dfe8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800dfbe:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dfc2:	f003 0304 	and.w	r3, r3, #4
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d009      	beq.n	800dfe0 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800dfcc:	4b06      	ldr	r3, [pc, #24]	@ (800dfe8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800dfce:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dfd2:	f023 0302 	bic.w	r3, r3, #2
 800dfd6:	4a04      	ldr	r2, [pc, #16]	@ (800dfe8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800dfd8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800dfdc:	2301      	movs	r3, #1
 800dfde:	e000      	b.n	800dfe2 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800dfe0:	2300      	movs	r3, #0
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	200005cc 	.word	0x200005cc

0800dfec <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800dfec:	b480      	push	{r7}
 800dfee:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800dff0:	4b0d      	ldr	r3, [pc, #52]	@ (800e028 <LoRaMacCheckForRxAbort+0x3c>)
 800dff2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d00f      	beq.n	800e01e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800dffe:	4b0a      	ldr	r3, [pc, #40]	@ (800e028 <LoRaMacCheckForRxAbort+0x3c>)
 800e000:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e004:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e008:	4a07      	ldr	r2, [pc, #28]	@ (800e028 <LoRaMacCheckForRxAbort+0x3c>)
 800e00a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e00e:	4b06      	ldr	r3, [pc, #24]	@ (800e028 <LoRaMacCheckForRxAbort+0x3c>)
 800e010:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e014:	f023 0302 	bic.w	r3, r3, #2
 800e018:	4a03      	ldr	r2, [pc, #12]	@ (800e028 <LoRaMacCheckForRxAbort+0x3c>)
 800e01a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800e01e:	bf00      	nop
 800e020:	46bd      	mov	sp, r7
 800e022:	bc80      	pop	{r7}
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop
 800e028:	200005cc 	.word	0x200005cc

0800e02c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e034:	2300      	movs	r3, #0
 800e036:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e038:	2300      	movs	r3, #0
 800e03a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e03c:	4b50      	ldr	r3, [pc, #320]	@ (800e180 <LoRaMacHandleNvm+0x154>)
 800e03e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e042:	2b00      	cmp	r3, #0
 800e044:	f040 8098 	bne.w	800e178 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2124      	movs	r1, #36	@ 0x24
 800e04c:	4618      	mov	r0, r3
 800e04e:	f009 fbf5 	bl	801783c <Crc32>
 800e052:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e058:	68ba      	ldr	r2, [r7, #8]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d006      	beq.n	800e06c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	68ba      	ldr	r2, [r7, #8]
 800e062:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800e064:	89fb      	ldrh	r3, [r7, #14]
 800e066:	f043 0301 	orr.w	r3, r3, #1
 800e06a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	3328      	adds	r3, #40	@ 0x28
 800e070:	211c      	movs	r1, #28
 800e072:	4618      	mov	r0, r3
 800e074:	f009 fbe2 	bl	801783c <Crc32>
 800e078:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e07e:	68ba      	ldr	r2, [r7, #8]
 800e080:	429a      	cmp	r2, r3
 800e082:	d006      	beq.n	800e092 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	68ba      	ldr	r2, [r7, #8]
 800e088:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800e08a:	89fb      	ldrh	r3, [r7, #14]
 800e08c:	f043 0302 	orr.w	r3, r3, #2
 800e090:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	3348      	adds	r3, #72	@ 0x48
 800e096:	21fc      	movs	r1, #252	@ 0xfc
 800e098:	4618      	mov	r0, r3
 800e09a:	f009 fbcf 	bl	801783c <Crc32>
 800e09e:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800e0a6:	68ba      	ldr	r2, [r7, #8]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d007      	beq.n	800e0bc <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	68ba      	ldr	r2, [r7, #8]
 800e0b0:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800e0b4:	89fb      	ldrh	r3, [r7, #14]
 800e0b6:	f043 0304 	orr.w	r3, r3, #4
 800e0ba:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800e0c2:	21d4      	movs	r1, #212	@ 0xd4
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f009 fbb9 	bl	801783c <Crc32>
 800e0ca:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800e0d2:	68ba      	ldr	r2, [r7, #8]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d007      	beq.n	800e0e8 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	68ba      	ldr	r2, [r7, #8]
 800e0dc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800e0e0:	89fb      	ldrh	r3, [r7, #14]
 800e0e2:	f043 0308 	orr.w	r3, r3, #8
 800e0e6:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800e0ee:	21a0      	movs	r1, #160	@ 0xa0
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f009 fba3 	bl	801783c <Crc32>
 800e0f6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e0fe:	68ba      	ldr	r2, [r7, #8]
 800e100:	429a      	cmp	r2, r3
 800e102:	d007      	beq.n	800e114 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	68ba      	ldr	r2, [r7, #8]
 800e108:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800e10c:	89fb      	ldrh	r3, [r7, #14]
 800e10e:	f043 0310 	orr.w	r3, r3, #16
 800e112:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800e11a:	f44f 6193 	mov.w	r1, #1176	@ 0x498
 800e11e:	4618      	mov	r0, r3
 800e120:	f009 fb8c 	bl	801783c <Crc32>
 800e124:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f8d3 375c 	ldr.w	r3, [r3, #1884]	@ 0x75c
 800e12c:	68ba      	ldr	r2, [r7, #8]
 800e12e:	429a      	cmp	r2, r3
 800e130:	d007      	beq.n	800e142 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	68ba      	ldr	r2, [r7, #8]
 800e136:	f8c3 275c 	str.w	r2, [r3, #1884]	@ 0x75c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800e13a:	89fb      	ldrh	r3, [r7, #14]
 800e13c:	f043 0320 	orr.w	r3, r3, #32
 800e140:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 800e148:	2114      	movs	r1, #20
 800e14a:	4618      	mov	r0, r3
 800e14c:	f009 fb76 	bl	801783c <Crc32>
 800e150:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8d3 3774 	ldr.w	r3, [r3, #1908]	@ 0x774
 800e158:	68ba      	ldr	r2, [r7, #8]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d007      	beq.n	800e16e <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	68ba      	ldr	r2, [r7, #8]
 800e162:	f8c3 2774 	str.w	r2, [r3, #1908]	@ 0x774
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800e166:	89fb      	ldrh	r3, [r7, #14]
 800e168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e16c:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800e16e:	89fb      	ldrh	r3, [r7, #14]
 800e170:	4618      	mov	r0, r3
 800e172:	f001 ff5f 	bl	8010034 <CallNvmDataChangeCallback>
 800e176:	e000      	b.n	800e17a <LoRaMacHandleNvm+0x14e>
        return;
 800e178:	bf00      	nop
}
 800e17a:	3710      	adds	r7, #16
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	200005cc 	.word	0x200005cc

0800e184 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800e18a:	2300      	movs	r3, #0
 800e18c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800e18e:	f7ff fd3d 	bl	800dc0c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e192:	f003 fd28 	bl	8011be6 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e196:	4b25      	ldr	r3, [pc, #148]	@ (800e22c <LoRaMacProcess+0xa8>)
 800e198:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e19c:	f003 0310 	and.w	r3, r3, #16
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d023      	beq.n	800e1ee <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800e1a6:	2000      	movs	r0, #0
 800e1a8:	f7ff fda4 	bl	800dcf4 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800e1ac:	f7ff ff1e 	bl	800dfec <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800e1b0:	f001 ffd0 	bl	8010154 <IsRequestPending>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d006      	beq.n	800e1c8 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800e1ba:	f7ff feef 	bl	800df9c <LoRaMacCheckForBeaconAcquisition>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	461a      	mov	r2, r3
 800e1c2:	79fb      	ldrb	r3, [r7, #7]
 800e1c4:	4313      	orrs	r3, r2
 800e1c6:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800e1c8:	79fb      	ldrb	r3, [r7, #7]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d103      	bne.n	800e1d6 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800e1ce:	f7ff fea9 	bl	800df24 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800e1d2:	f7ff fe39 	bl	800de48 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800e1d6:	f7ff fd9d 	bl	800dd14 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e1da:	2001      	movs	r0, #1
 800e1dc:	f7ff fd8a 	bl	800dcf4 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800e1e0:	4a12      	ldr	r2, [pc, #72]	@ (800e22c <LoRaMacProcess+0xa8>)
 800e1e2:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e1e6:	f043 0320 	orr.w	r3, r3, #32
 800e1ea:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
    LoRaMacHandleIndicationEvents( );
 800e1ee:	f7ff fdf3 	bl	800ddd8 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800e1f2:	4b0e      	ldr	r3, [pc, #56]	@ (800e22c <LoRaMacProcess+0xa8>)
 800e1f4:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800e1f8:	2b02      	cmp	r3, #2
 800e1fa:	d101      	bne.n	800e200 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800e1fc:	f001 fbc8 	bl	800f990 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800e200:	4b0a      	ldr	r3, [pc, #40]	@ (800e22c <LoRaMacProcess+0xa8>)
 800e202:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e206:	f003 0320 	and.w	r3, r3, #32
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d009      	beq.n	800e224 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800e210:	4a06      	ldr	r2, [pc, #24]	@ (800e22c <LoRaMacProcess+0xa8>)
 800e212:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e216:	f36f 1345 	bfc	r3, #5, #1
 800e21a:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        LoRaMacHandleNvm( &Nvm );
 800e21e:	4804      	ldr	r0, [pc, #16]	@ (800e230 <LoRaMacProcess+0xac>)
 800e220:	f7ff ff04 	bl	800e02c <LoRaMacHandleNvm>
    }
}
 800e224:	bf00      	nop
 800e226:	3708      	adds	r7, #8
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}
 800e22c:	200005cc 	.word	0x200005cc
 800e230:	20000ad4 	.word	0x20000ad4

0800e234 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800e23c:	4817      	ldr	r0, [pc, #92]	@ (800e29c <OnTxDelayedTimerEvent+0x68>)
 800e23e:	f00d fb01 	bl	801b844 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e242:	4b17      	ldr	r3, [pc, #92]	@ (800e2a0 <OnTxDelayedTimerEvent+0x6c>)
 800e244:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e248:	f023 0320 	bic.w	r3, r3, #32
 800e24c:	4a14      	ldr	r2, [pc, #80]	@ (800e2a0 <OnTxDelayedTimerEvent+0x6c>)
 800e24e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800e252:	2001      	movs	r0, #1
 800e254:	f001 f8f4 	bl	800f440 <ScheduleTx>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d018      	beq.n	800e290 <OnTxDelayedTimerEvent+0x5c>
 800e25e:	2b0b      	cmp	r3, #11
 800e260:	d016      	beq.n	800e290 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e262:	4b10      	ldr	r3, [pc, #64]	@ (800e2a4 <OnTxDelayedTimerEvent+0x70>)
 800e264:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800e268:	b2da      	uxtb	r2, r3
 800e26a:	4b0d      	ldr	r3, [pc, #52]	@ (800e2a0 <OnTxDelayedTimerEvent+0x6c>)
 800e26c:	f883 2436 	strb.w	r2, [r3, #1078]	@ 0x436
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800e270:	4b0b      	ldr	r3, [pc, #44]	@ (800e2a0 <OnTxDelayedTimerEvent+0x6c>)
 800e272:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 800e276:	4b0a      	ldr	r3, [pc, #40]	@ (800e2a0 <OnTxDelayedTimerEvent+0x6c>)
 800e278:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800e27c:	4b08      	ldr	r3, [pc, #32]	@ (800e2a0 <OnTxDelayedTimerEvent+0x6c>)
 800e27e:	2209      	movs	r2, #9
 800e280:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800e284:	2009      	movs	r0, #9
 800e286:	f004 f8d9 	bl	801243c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800e28a:	f001 fe81 	bl	800ff90 <StopRetransmission>
            break;
 800e28e:	e000      	b.n	800e292 <OnTxDelayedTimerEvent+0x5e>
            break;
 800e290:	bf00      	nop
        }
    }
}
 800e292:	bf00      	nop
 800e294:	3708      	adds	r7, #8
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	20000934 	.word	0x20000934
 800e2a0:	200005cc 	.word	0x200005cc
 800e2a4:	20000ad4 	.word	0x20000ad4

0800e2a8 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800e2b0:	4b14      	ldr	r3, [pc, #80]	@ (800e304 <OnRxWindow1TimerEvent+0x5c>)
 800e2b2:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800e2b6:	4b13      	ldr	r3, [pc, #76]	@ (800e304 <OnRxWindow1TimerEvent+0x5c>)
 800e2b8:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800e2bc:	4b12      	ldr	r3, [pc, #72]	@ (800e308 <OnRxWindow1TimerEvent+0x60>)
 800e2be:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800e2c2:	b25a      	sxtb	r2, r3
 800e2c4:	4b0f      	ldr	r3, [pc, #60]	@ (800e304 <OnRxWindow1TimerEvent+0x5c>)
 800e2c6:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e2ca:	4b0f      	ldr	r3, [pc, #60]	@ (800e308 <OnRxWindow1TimerEvent+0x60>)
 800e2cc:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800e2d0:	4b0c      	ldr	r3, [pc, #48]	@ (800e304 <OnRxWindow1TimerEvent+0x5c>)
 800e2d2:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e2d6:	4b0c      	ldr	r3, [pc, #48]	@ (800e308 <OnRxWindow1TimerEvent+0x60>)
 800e2d8:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800e2dc:	4b09      	ldr	r3, [pc, #36]	@ (800e304 <OnRxWindow1TimerEvent+0x5c>)
 800e2de:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800e2e2:	4b08      	ldr	r3, [pc, #32]	@ (800e304 <OnRxWindow1TimerEvent+0x5c>)
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800e2ea:	4b06      	ldr	r3, [pc, #24]	@ (800e304 <OnRxWindow1TimerEvent+0x5c>)
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800e2f2:	4906      	ldr	r1, [pc, #24]	@ (800e30c <OnRxWindow1TimerEvent+0x64>)
 800e2f4:	4806      	ldr	r0, [pc, #24]	@ (800e310 <OnRxWindow1TimerEvent+0x68>)
 800e2f6:	f001 fb17 	bl	800f928 <RxWindowSetup>
}
 800e2fa:	bf00      	nop
 800e2fc:	3708      	adds	r7, #8
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	200005cc 	.word	0x200005cc
 800e308:	20000ad4 	.word	0x20000ad4
 800e30c:	20000984 	.word	0x20000984
 800e310:	2000094c 	.word	0x2000094c

0800e314 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b082      	sub	sp, #8
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e31c:	4b16      	ldr	r3, [pc, #88]	@ (800e378 <OnRxWindow2TimerEvent+0x64>)
 800e31e:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800e322:	2b00      	cmp	r3, #0
 800e324:	d023      	beq.n	800e36e <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800e326:	4b14      	ldr	r3, [pc, #80]	@ (800e378 <OnRxWindow2TimerEvent+0x64>)
 800e328:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800e32c:	4b12      	ldr	r3, [pc, #72]	@ (800e378 <OnRxWindow2TimerEvent+0x64>)
 800e32e:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800e332:	4b12      	ldr	r3, [pc, #72]	@ (800e37c <OnRxWindow2TimerEvent+0x68>)
 800e334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e336:	4a10      	ldr	r2, [pc, #64]	@ (800e378 <OnRxWindow2TimerEvent+0x64>)
 800e338:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e33c:	4b0f      	ldr	r3, [pc, #60]	@ (800e37c <OnRxWindow2TimerEvent+0x68>)
 800e33e:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800e342:	4b0d      	ldr	r3, [pc, #52]	@ (800e378 <OnRxWindow2TimerEvent+0x64>)
 800e344:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e348:	4b0c      	ldr	r3, [pc, #48]	@ (800e37c <OnRxWindow2TimerEvent+0x68>)
 800e34a:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800e34e:	4b0a      	ldr	r3, [pc, #40]	@ (800e378 <OnRxWindow2TimerEvent+0x64>)
 800e350:	f883 23dd 	strb.w	r2, [r3, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800e354:	4b08      	ldr	r3, [pc, #32]	@ (800e378 <OnRxWindow2TimerEvent+0x64>)
 800e356:	2200      	movs	r2, #0
 800e358:	f883 23de 	strb.w	r2, [r3, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800e35c:	4b06      	ldr	r3, [pc, #24]	@ (800e378 <OnRxWindow2TimerEvent+0x64>)
 800e35e:	2201      	movs	r2, #1
 800e360:	f883 23df 	strb.w	r2, [r3, #991]	@ 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800e364:	4906      	ldr	r1, [pc, #24]	@ (800e380 <OnRxWindow2TimerEvent+0x6c>)
 800e366:	4807      	ldr	r0, [pc, #28]	@ (800e384 <OnRxWindow2TimerEvent+0x70>)
 800e368:	f001 fade 	bl	800f928 <RxWindowSetup>
 800e36c:	e000      	b.n	800e370 <OnRxWindow2TimerEvent+0x5c>
        return;
 800e36e:	bf00      	nop
}
 800e370:	3708      	adds	r7, #8
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	200005cc 	.word	0x200005cc
 800e37c:	20000ad4 	.word	0x20000ad4
 800e380:	20000998 	.word	0x20000998
 800e384:	20000964 	.word	0x20000964

0800e388 <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800e390:	480e      	ldr	r0, [pc, #56]	@ (800e3cc <OnAckTimeoutTimerEvent+0x44>)
 800e392:	f00d fa57 	bl	801b844 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800e396:	4b0e      	ldr	r3, [pc, #56]	@ (800e3d0 <OnAckTimeoutTimerEvent+0x48>)
 800e398:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d003      	beq.n	800e3a8 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800e3a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e3d0 <OnAckTimeoutTimerEvent+0x48>)
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e3a8:	4b0a      	ldr	r3, [pc, #40]	@ (800e3d4 <OnAckTimeoutTimerEvent+0x4c>)
 800e3aa:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e3ae:	2b02      	cmp	r3, #2
 800e3b0:	d106      	bne.n	800e3c0 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800e3b2:	4a07      	ldr	r2, [pc, #28]	@ (800e3d0 <OnAckTimeoutTimerEvent+0x48>)
 800e3b4:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e3b8:	f043 0310 	orr.w	r3, r3, #16
 800e3bc:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
    OnMacProcessNotify( );
 800e3c0:	f001 fe22 	bl	8010008 <OnMacProcessNotify>
}
 800e3c4:	bf00      	nop
 800e3c6:	3708      	adds	r7, #8
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	200009c0 	.word	0x200009c0
 800e3d0:	200005cc 	.word	0x200005cc
 800e3d4:	20000ad4 	.word	0x20000ad4

0800e3d8 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b084      	sub	sp, #16
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60ba      	str	r2, [r7, #8]
 800e3e0:	607b      	str	r3, [r7, #4]
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	73fb      	strb	r3, [r7, #15]
 800e3e6:	460b      	mov	r3, r1
 800e3e8:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d005      	beq.n	800e3fc <GetFCntDown+0x24>
 800e3f0:	69fb      	ldr	r3, [r7, #28]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d002      	beq.n	800e3fc <GetFCntDown+0x24>
 800e3f6:	6a3b      	ldr	r3, [r7, #32]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d101      	bne.n	800e400 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e3fc:	230a      	movs	r3, #10
 800e3fe:	e029      	b.n	800e454 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800e400:	7bfb      	ldrb	r3, [r7, #15]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d016      	beq.n	800e434 <GetFCntDown+0x5c>
 800e406:	2b01      	cmp	r3, #1
 800e408:	d118      	bne.n	800e43c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800e40a:	79bb      	ldrb	r3, [r7, #6]
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d10d      	bne.n	800e42c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800e410:	7bbb      	ldrb	r3, [r7, #14]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d002      	beq.n	800e41c <GetFCntDown+0x44>
 800e416:	7bbb      	ldrb	r3, [r7, #14]
 800e418:	2b03      	cmp	r3, #3
 800e41a:	d103      	bne.n	800e424 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	2202      	movs	r2, #2
 800e420:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800e422:	e00d      	b.n	800e440 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	2201      	movs	r2, #1
 800e428:	701a      	strb	r2, [r3, #0]
            break;
 800e42a:	e009      	b.n	800e440 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	2203      	movs	r2, #3
 800e430:	701a      	strb	r2, [r3, #0]
            break;
 800e432:	e005      	b.n	800e440 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	2204      	movs	r2, #4
 800e438:	701a      	strb	r2, [r3, #0]
            break;
 800e43a:	e001      	b.n	800e440 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800e43c:	2305      	movs	r3, #5
 800e43e:	e009      	b.n	800e454 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800e440:	69fb      	ldr	r3, [r7, #28]
 800e442:	7818      	ldrb	r0, [r3, #0]
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	89db      	ldrh	r3, [r3, #14]
 800e448:	461a      	mov	r2, r3
 800e44a:	8b39      	ldrh	r1, [r7, #24]
 800e44c:	6a3b      	ldr	r3, [r7, #32]
 800e44e:	f004 fc33 	bl	8012cb8 <LoRaMacCryptoGetFCntDown>
 800e452:	4603      	mov	r3, r0
}
 800e454:	4618      	mov	r0, r3
 800e456:	3710      	adds	r7, #16
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800e45c:	b5b0      	push	{r4, r5, r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	4603      	mov	r3, r0
 800e464:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e466:	2303      	movs	r3, #3
 800e468:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800e46a:	4b6d      	ldr	r3, [pc, #436]	@ (800e620 <SwitchClass+0x1c4>)
 800e46c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e470:	2b02      	cmp	r3, #2
 800e472:	f000 80b9 	beq.w	800e5e8 <SwitchClass+0x18c>
 800e476:	2b02      	cmp	r3, #2
 800e478:	f300 80cc 	bgt.w	800e614 <SwitchClass+0x1b8>
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d003      	beq.n	800e488 <SwitchClass+0x2c>
 800e480:	2b01      	cmp	r3, #1
 800e482:	f000 80a3 	beq.w	800e5cc <SwitchClass+0x170>
 800e486:	e0c5      	b.n	800e614 <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800e488:	79fb      	ldrb	r3, [r7, #7]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d109      	bne.n	800e4a2 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800e48e:	4b64      	ldr	r3, [pc, #400]	@ (800e620 <SwitchClass+0x1c4>)
 800e490:	4a63      	ldr	r2, [pc, #396]	@ (800e620 <SwitchClass+0x1c4>)
 800e492:	3374      	adds	r3, #116	@ 0x74
 800e494:	326c      	adds	r2, #108	@ 0x6c
 800e496:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e49a:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800e4a2:	79fb      	ldrb	r3, [r7, #7]
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d10c      	bne.n	800e4c2 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800e4a8:	79fb      	ldrb	r3, [r7, #7]
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f003 fb3d 	bl	8011b2a <LoRaMacClassBSwitchClass>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800e4b4:	7bfb      	ldrb	r3, [r7, #15]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d103      	bne.n	800e4c2 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800e4ba:	4a59      	ldr	r2, [pc, #356]	@ (800e620 <SwitchClass+0x1c4>)
 800e4bc:	79fb      	ldrb	r3, [r7, #7]
 800e4be:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800e4c2:	79fb      	ldrb	r3, [r7, #7]
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	f040 80a0 	bne.w	800e60a <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e4ca:	4a55      	ldr	r2, [pc, #340]	@ (800e620 <SwitchClass+0x1c4>)
 800e4cc:	79fb      	ldrb	r3, [r7, #7]
 800e4ce:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800e4d2:	4a54      	ldr	r2, [pc, #336]	@ (800e624 <SwitchClass+0x1c8>)
 800e4d4:	4b53      	ldr	r3, [pc, #332]	@ (800e624 <SwitchClass+0x1c8>)
 800e4d6:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 800e4da:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 800e4de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e4e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4e2:	682b      	ldr	r3, [r5, #0]
 800e4e4:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e4e6:	4b4f      	ldr	r3, [pc, #316]	@ (800e624 <SwitchClass+0x1c8>)
 800e4e8:	2202      	movs	r2, #2
 800e4ea:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	73bb      	strb	r3, [r7, #14]
 800e4f2:	e05b      	b.n	800e5ac <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800e4f4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800e4f8:	4949      	ldr	r1, [pc, #292]	@ (800e620 <SwitchClass+0x1c4>)
 800e4fa:	4613      	mov	r3, r2
 800e4fc:	005b      	lsls	r3, r3, #1
 800e4fe:	4413      	add	r3, r2
 800e500:	011b      	lsls	r3, r3, #4
 800e502:	440b      	add	r3, r1
 800e504:	33e9      	adds	r3, #233	@ 0xe9
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d049      	beq.n	800e5a0 <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800e50c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800e510:	4943      	ldr	r1, [pc, #268]	@ (800e620 <SwitchClass+0x1c4>)
 800e512:	4613      	mov	r3, r2
 800e514:	005b      	lsls	r3, r3, #1
 800e516:	4413      	add	r3, r2
 800e518:	011b      	lsls	r3, r3, #4
 800e51a:	440b      	add	r3, r1
 800e51c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e520:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800e522:	2b02      	cmp	r3, #2
 800e524:	d13c      	bne.n	800e5a0 <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800e526:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800e52a:	493d      	ldr	r1, [pc, #244]	@ (800e620 <SwitchClass+0x1c4>)
 800e52c:	4613      	mov	r3, r2
 800e52e:	005b      	lsls	r3, r3, #1
 800e530:	4413      	add	r3, r2
 800e532:	011b      	lsls	r3, r3, #4
 800e534:	440b      	add	r3, r1
 800e536:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4a38      	ldr	r2, [pc, #224]	@ (800e620 <SwitchClass+0x1c4>)
 800e53e:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800e540:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800e544:	4936      	ldr	r1, [pc, #216]	@ (800e620 <SwitchClass+0x1c4>)
 800e546:	4613      	mov	r3, r2
 800e548:	005b      	lsls	r3, r3, #1
 800e54a:	4413      	add	r3, r2
 800e54c:	011b      	lsls	r3, r3, #4
 800e54e:	440b      	add	r3, r1
 800e550:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800e554:	f993 3000 	ldrsb.w	r3, [r3]
 800e558:	b2da      	uxtb	r2, r3
 800e55a:	4b31      	ldr	r3, [pc, #196]	@ (800e620 <SwitchClass+0x1c4>)
 800e55c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800e560:	4b30      	ldr	r3, [pc, #192]	@ (800e624 <SwitchClass+0x1c8>)
 800e562:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800e566:	4b2f      	ldr	r3, [pc, #188]	@ (800e624 <SwitchClass+0x1c8>)
 800e568:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800e56c:	4b2c      	ldr	r3, [pc, #176]	@ (800e620 <SwitchClass+0x1c4>)
 800e56e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e570:	4a2c      	ldr	r2, [pc, #176]	@ (800e624 <SwitchClass+0x1c8>)
 800e572:	f8c2 33e4 	str.w	r3, [r2, #996]	@ 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e576:	4b2a      	ldr	r3, [pc, #168]	@ (800e620 <SwitchClass+0x1c4>)
 800e578:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800e57c:	4b29      	ldr	r3, [pc, #164]	@ (800e624 <SwitchClass+0x1c8>)
 800e57e:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e582:	4b27      	ldr	r3, [pc, #156]	@ (800e620 <SwitchClass+0x1c4>)
 800e584:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800e588:	4b26      	ldr	r3, [pc, #152]	@ (800e624 <SwitchClass+0x1c8>)
 800e58a:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e58e:	4b25      	ldr	r3, [pc, #148]	@ (800e624 <SwitchClass+0x1c8>)
 800e590:	2203      	movs	r2, #3
 800e592:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800e596:	4b23      	ldr	r3, [pc, #140]	@ (800e624 <SwitchClass+0x1c8>)
 800e598:	2201      	movs	r2, #1
 800e59a:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
                        break;
 800e59e:	e009      	b.n	800e5b4 <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e5a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	73bb      	strb	r3, [r7, #14]
 800e5ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	dd9f      	ble.n	800e4f4 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800e5b4:	4b1b      	ldr	r3, [pc, #108]	@ (800e624 <SwitchClass+0x1c8>)
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800e5bc:	4b1a      	ldr	r3, [pc, #104]	@ (800e628 <SwitchClass+0x1cc>)
 800e5be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5c0:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800e5c2:	f001 f9e5 	bl	800f990 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800e5ca:	e01e      	b.n	800e60a <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800e5cc:	79fb      	ldrb	r3, [r7, #7]
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f003 faab 	bl	8011b2a <LoRaMacClassBSwitchClass>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800e5d8:	7bfb      	ldrb	r3, [r7, #15]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d117      	bne.n	800e60e <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e5de:	4a10      	ldr	r2, [pc, #64]	@ (800e620 <SwitchClass+0x1c4>)
 800e5e0:	79fb      	ldrb	r3, [r7, #7]
 800e5e2:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 800e5e6:	e012      	b.n	800e60e <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800e5e8:	79fb      	ldrb	r3, [r7, #7]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d111      	bne.n	800e612 <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800e5ee:	4b0d      	ldr	r3, [pc, #52]	@ (800e624 <SwitchClass+0x1c8>)
 800e5f0:	2206      	movs	r2, #6
 800e5f2:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e5f6:	4a0a      	ldr	r2, [pc, #40]	@ (800e620 <SwitchClass+0x1c4>)
 800e5f8:	79fb      	ldrb	r3, [r7, #7]
 800e5fa:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800e5fe:	4b0a      	ldr	r3, [pc, #40]	@ (800e628 <SwitchClass+0x1cc>)
 800e600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e602:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800e604:	2300      	movs	r3, #0
 800e606:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800e608:	e003      	b.n	800e612 <SwitchClass+0x1b6>
            break;
 800e60a:	bf00      	nop
 800e60c:	e002      	b.n	800e614 <SwitchClass+0x1b8>
            break;
 800e60e:	bf00      	nop
 800e610:	e000      	b.n	800e614 <SwitchClass+0x1b8>
            break;
 800e612:	bf00      	nop
        }
    }

    return status;
 800e614:	7bfb      	ldrb	r3, [r7, #15]
}
 800e616:	4618      	mov	r0, r3
 800e618:	3710      	adds	r7, #16
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bdb0      	pop	{r4, r5, r7, pc}
 800e61e:	bf00      	nop
 800e620:	20000ad4 	.word	0x20000ad4
 800e624:	200005cc 	.word	0x200005cc
 800e628:	0801dc9c 	.word	0x0801dc9c

0800e62c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b086      	sub	sp, #24
 800e630:	af00      	add	r7, sp, #0
 800e632:	4603      	mov	r3, r0
 800e634:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e636:	4b10      	ldr	r3, [pc, #64]	@ (800e678 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e638:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800e63c:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800e63e:	79fb      	ldrb	r3, [r7, #7]
 800e640:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e642:	230d      	movs	r3, #13
 800e644:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e646:	4b0c      	ldr	r3, [pc, #48]	@ (800e678 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e648:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d001      	beq.n	800e654 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e650:	230e      	movs	r3, #14
 800e652:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e654:	4b08      	ldr	r3, [pc, #32]	@ (800e678 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e656:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e65a:	f107 0210 	add.w	r2, r7, #16
 800e65e:	4611      	mov	r1, r2
 800e660:	4618      	mov	r0, r3
 800e662:	f005 f9c3 	bl	80139ec <RegionGetPhyParam>
 800e666:	4603      	mov	r3, r0
 800e668:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	b2db      	uxtb	r3, r3
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3718      	adds	r7, #24
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	20000ad4 	.word	0x20000ad4

0800e67c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b084      	sub	sp, #16
 800e680:	af00      	add	r7, sp, #0
 800e682:	4603      	mov	r3, r0
 800e684:	71fb      	strb	r3, [r7, #7]
 800e686:	460b      	mov	r3, r1
 800e688:	71bb      	strb	r3, [r7, #6]
 800e68a:	4613      	mov	r3, r2
 800e68c:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800e68e:	2300      	movs	r3, #0
 800e690:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800e692:	2300      	movs	r3, #0
 800e694:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800e696:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7ff ffc6 	bl	800e62c <GetMaxAppPayloadWithoutFOptsLength>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800e6a4:	79fb      	ldrb	r3, [r7, #7]
 800e6a6:	b29a      	uxth	r2, r3
 800e6a8:	797b      	ldrb	r3, [r7, #5]
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	4413      	add	r3, r2
 800e6ae:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800e6b0:	89ba      	ldrh	r2, [r7, #12]
 800e6b2:	89fb      	ldrh	r3, [r7, #14]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d804      	bhi.n	800e6c2 <ValidatePayloadLength+0x46>
 800e6b8:	89bb      	ldrh	r3, [r7, #12]
 800e6ba:	2bff      	cmp	r3, #255	@ 0xff
 800e6bc:	d801      	bhi.n	800e6c2 <ValidatePayloadLength+0x46>
    {
        return true;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	e000      	b.n	800e6c4 <ValidatePayloadLength+0x48>
    }
    return false;
 800e6c2:	2300      	movs	r3, #0
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3710      	adds	r7, #16
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800e6cc:	b590      	push	{r4, r7, lr}
 800e6ce:	b0a5      	sub	sp, #148	@ 0x94
 800e6d0:	af02      	add	r7, sp, #8
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	4608      	mov	r0, r1
 800e6d6:	4611      	mov	r1, r2
 800e6d8:	461a      	mov	r2, r3
 800e6da:	4603      	mov	r3, r0
 800e6dc:	70fb      	strb	r3, [r7, #3]
 800e6de:	460b      	mov	r3, r1
 800e6e0:	70bb      	strb	r3, [r7, #2]
 800e6e2:	4613      	mov	r3, r2
 800e6e4:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800e6f8:	f000 bc7d 	b.w	800eff6 <ProcessMacCommands+0x92a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800e6fc:	78fb      	ldrb	r3, [r7, #3]
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	4413      	add	r3, r2
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	4618      	mov	r0, r3
 800e706:	f003 fcf5 	bl	80120f4 <LoRaMacCommandsGetCmdSize>
 800e70a:	4603      	mov	r3, r0
 800e70c:	461a      	mov	r2, r3
 800e70e:	78fb      	ldrb	r3, [r7, #3]
 800e710:	441a      	add	r2, r3
 800e712:	78bb      	ldrb	r3, [r7, #2]
 800e714:	429a      	cmp	r2, r3
 800e716:	f300 8474 	bgt.w	800f002 <ProcessMacCommands+0x936>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800e71a:	78fb      	ldrb	r3, [r7, #3]
 800e71c:	1c5a      	adds	r2, r3, #1
 800e71e:	70fa      	strb	r2, [r7, #3]
 800e720:	461a      	mov	r2, r3
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	4413      	add	r3, r2
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	3b02      	subs	r3, #2
 800e72a:	2b11      	cmp	r3, #17
 800e72c:	f200 846b 	bhi.w	800f006 <ProcessMacCommands+0x93a>
 800e730:	a201      	add	r2, pc, #4	@ (adr r2, 800e738 <ProcessMacCommands+0x6c>)
 800e732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e736:	bf00      	nop
 800e738:	0800e781 	.word	0x0800e781
 800e73c:	0800e7c3 	.word	0x0800e7c3
 800e740:	0800e8df 	.word	0x0800e8df
 800e744:	0800e91d 	.word	0x0800e91d
 800e748:	0800ea07 	.word	0x0800ea07
 800e74c:	0800ea65 	.word	0x0800ea65
 800e750:	0800eb21 	.word	0x0800eb21
 800e754:	0800eb77 	.word	0x0800eb77
 800e758:	0800ec5d 	.word	0x0800ec5d
 800e75c:	0800f007 	.word	0x0800f007
 800e760:	0800f007 	.word	0x0800f007
 800e764:	0800ed01 	.word	0x0800ed01
 800e768:	0800f007 	.word	0x0800f007
 800e76c:	0800f007 	.word	0x0800f007
 800e770:	0800ee17 	.word	0x0800ee17
 800e774:	0800ee4b 	.word	0x0800ee4b
 800e778:	0800eedb 	.word	0x0800eedb
 800e77c:	0800ef53 	.word	0x0800ef53
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800e780:	2005      	movs	r0, #5
 800e782:	f003 fe8f 	bl	80124a4 <LoRaMacConfirmQueueIsCmdActive>
 800e786:	4603      	mov	r3, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f000 8425 	beq.w	800efd8 <ProcessMacCommands+0x90c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800e78e:	2105      	movs	r1, #5
 800e790:	2000      	movs	r0, #0
 800e792:	f003 fdfb 	bl	801238c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800e796:	78fb      	ldrb	r3, [r7, #3]
 800e798:	1c5a      	adds	r2, r3, #1
 800e79a:	70fa      	strb	r2, [r7, #3]
 800e79c:	461a      	mov	r2, r3
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	781a      	ldrb	r2, [r3, #0]
 800e7a4:	4bac      	ldr	r3, [pc, #688]	@ (800ea58 <ProcessMacCommands+0x38c>)
 800e7a6:	f883 2450 	strb.w	r2, [r3, #1104]	@ 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800e7aa:	78fb      	ldrb	r3, [r7, #3]
 800e7ac:	1c5a      	adds	r2, r3, #1
 800e7ae:	70fa      	strb	r2, [r7, #3]
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	781a      	ldrb	r2, [r3, #0]
 800e7b8:	4ba7      	ldr	r3, [pc, #668]	@ (800ea58 <ProcessMacCommands+0x38c>)
 800e7ba:	f883 2451 	strb.w	r2, [r3, #1105]	@ 0x451
                }
                break;
 800e7be:	f000 bc0b 	b.w	800efd8 <ProcessMacCommands+0x90c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 800e7da:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800e7de:	f083 0301 	eor.w	r3, r3, #1
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	f000 83f9 	beq.w	800efdc <ProcessMacCommands+0x910>
                {
                    adrBlockFound = true;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800e7f0:	78fb      	ldrb	r3, [r7, #3]
 800e7f2:	3b01      	subs	r3, #1
 800e7f4:	687a      	ldr	r2, [r7, #4]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800e7fa:	78ba      	ldrb	r2, [r7, #2]
 800e7fc:	78fb      	ldrb	r3, [r7, #3]
 800e7fe:	1ad3      	subs	r3, r2, r3
 800e800:	b2db      	uxtb	r3, r3
 800e802:	3301      	adds	r3, #1
 800e804:	b2db      	uxtb	r3, r3
 800e806:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800e80a:	4b94      	ldr	r3, [pc, #592]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e80c:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800e810:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e814:	4b91      	ldr	r3, [pc, #580]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e816:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800e81a:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800e81e:	4b8f      	ldr	r3, [pc, #572]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e820:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800e824:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e828:	4b8c      	ldr	r3, [pc, #560]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e82a:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800e82e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e832:	4b8a      	ldr	r3, [pc, #552]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e834:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800e838:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800e83c:	4b87      	ldr	r3, [pc, #540]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e83e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800e842:	65bb      	str	r3, [r7, #88]	@ 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800e844:	4b85      	ldr	r3, [pc, #532]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e846:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800e84a:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800e84e:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800e852:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800e856:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800e85a:	9301      	str	r3, [sp, #4]
 800e85c:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800e860:	9300      	str	r3, [sp, #0]
 800e862:	4623      	mov	r3, r4
 800e864:	f005 f9c5 	bl	8013bf2 <RegionLinkAdrReq>
 800e868:	4603      	mov	r3, r0
 800e86a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800e86e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800e872:	f003 0307 	and.w	r3, r3, #7
 800e876:	2b07      	cmp	r3, #7
 800e878:	d10e      	bne.n	800e898 <ProcessMacCommands+0x1cc>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800e87a:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800e87e:	4b77      	ldr	r3, [pc, #476]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e880:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800e884:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800e888:	4b74      	ldr	r3, [pc, #464]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e88a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800e88e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800e892:	4b72      	ldr	r3, [pc, #456]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e894:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800e898:	2300      	movs	r3, #0
 800e89a:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800e89e:	e00b      	b.n	800e8b8 <ProcessMacCommands+0x1ec>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800e8a0:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	2003      	movs	r0, #3
 800e8aa:	f003 fac3 	bl	8011e34 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800e8ae:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800e8b8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800e8bc:	4a68      	ldr	r2, [pc, #416]	@ (800ea60 <ProcessMacCommands+0x394>)
 800e8be:	fba2 2303 	umull	r2, r3, r2, r3
 800e8c2:	089b      	lsrs	r3, r3, #2
 800e8c4:	b2db      	uxtb	r3, r3
 800e8c6:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d3e8      	bcc.n	800e8a0 <ProcessMacCommands+0x1d4>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800e8ce:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e8d2:	78fb      	ldrb	r3, [r7, #3]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	3b01      	subs	r3, #1
 800e8da:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800e8dc:	e37e      	b.n	800efdc <ProcessMacCommands+0x910>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800e8de:	78fb      	ldrb	r3, [r7, #3]
 800e8e0:	1c5a      	adds	r2, r3, #1
 800e8e2:	70fa      	strb	r2, [r7, #3]
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	4413      	add	r3, r2
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	f003 030f 	and.w	r3, r3, #15
 800e8f0:	b2da      	uxtb	r2, r3
 800e8f2:	4b5a      	ldr	r3, [pc, #360]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e8f4:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800e8f8:	4b58      	ldr	r3, [pc, #352]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e8fa:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800e8fe:	461a      	mov	r2, r3
 800e900:	2301      	movs	r3, #1
 800e902:	4093      	lsls	r3, r2
 800e904:	b29a      	uxth	r2, r3
 800e906:	4b55      	ldr	r3, [pc, #340]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e908:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800e90c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800e910:	2200      	movs	r2, #0
 800e912:	4619      	mov	r1, r3
 800e914:	2004      	movs	r0, #4
 800e916:	f003 fa8d 	bl	8011e34 <LoRaMacCommandsAddCmd>
                break;
 800e91a:	e36c      	b.n	800eff6 <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800e91c:	2307      	movs	r3, #7
 800e91e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800e922:	78fb      	ldrb	r3, [r7, #3]
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	4413      	add	r3, r2
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	091b      	lsrs	r3, r3, #4
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	b25b      	sxtb	r3, r3
 800e930:	f003 0307 	and.w	r3, r3, #7
 800e934:	b25b      	sxtb	r3, r3
 800e936:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800e93a:	78fb      	ldrb	r3, [r7, #3]
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	4413      	add	r3, r2
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	b25b      	sxtb	r3, r3
 800e944:	f003 030f 	and.w	r3, r3, #15
 800e948:	b25b      	sxtb	r3, r3
 800e94a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800e94e:	78fb      	ldrb	r3, [r7, #3]
 800e950:	3301      	adds	r3, #1
 800e952:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800e954:	78fb      	ldrb	r3, [r7, #3]
 800e956:	1c5a      	adds	r2, r3, #1
 800e958:	70fa      	strb	r2, [r7, #3]
 800e95a:	461a      	mov	r2, r3
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	4413      	add	r3, r2
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e964:	78fb      	ldrb	r3, [r7, #3]
 800e966:	1c5a      	adds	r2, r3, #1
 800e968:	70fa      	strb	r2, [r7, #3]
 800e96a:	461a      	mov	r2, r3
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	4413      	add	r3, r2
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	021a      	lsls	r2, r3, #8
 800e974:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e976:	4313      	orrs	r3, r2
 800e978:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e97a:	78fb      	ldrb	r3, [r7, #3]
 800e97c:	1c5a      	adds	r2, r3, #1
 800e97e:	70fa      	strb	r2, [r7, #3]
 800e980:	461a      	mov	r2, r3
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4413      	add	r3, r2
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	041a      	lsls	r2, r3, #16
 800e98a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e98c:	4313      	orrs	r3, r2
 800e98e:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800e990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e992:	2264      	movs	r2, #100	@ 0x64
 800e994:	fb02 f303 	mul.w	r3, r2, r3
 800e998:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800e99a:	4b30      	ldr	r3, [pc, #192]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e99c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e9a0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800e9a4:	4611      	mov	r1, r2
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f005 f94a 	bl	8013c40 <RegionRxParamSetupReq>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800e9b2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800e9b6:	f003 0307 	and.w	r3, r3, #7
 800e9ba:	2b07      	cmp	r3, #7
 800e9bc:	d117      	bne.n	800e9ee <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800e9be:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800e9c2:	b2da      	uxtb	r2, r3
 800e9c4:	4b25      	ldr	r3, [pc, #148]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e9c6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800e9ca:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800e9ce:	b2da      	uxtb	r2, r3
 800e9d0:	4b22      	ldr	r3, [pc, #136]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e9d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800e9d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9d8:	4a20      	ldr	r2, [pc, #128]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e9da:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800e9dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9de:	4a1f      	ldr	r2, [pc, #124]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e9e0:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800e9e2:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800e9e6:	b2da      	uxtb	r2, r3
 800e9e8:	4b1c      	ldr	r3, [pc, #112]	@ (800ea5c <ProcessMacCommands+0x390>)
 800e9ea:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 800e9ee:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800e9f2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800e9f6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	2005      	movs	r0, #5
 800ea00:	f003 fa18 	bl	8011e34 <LoRaMacCommandsAddCmd>
                break;
 800ea04:	e2f7      	b.n	800eff6 <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800ea06:	23ff      	movs	r3, #255	@ 0xff
 800ea08:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800ea0c:	4b12      	ldr	r3, [pc, #72]	@ (800ea58 <ProcessMacCommands+0x38c>)
 800ea0e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d00d      	beq.n	800ea32 <ProcessMacCommands+0x366>
 800ea16:	4b10      	ldr	r3, [pc, #64]	@ (800ea58 <ProcessMacCommands+0x38c>)
 800ea18:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d007      	beq.n	800ea32 <ProcessMacCommands+0x366>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800ea22:	4b0d      	ldr	r3, [pc, #52]	@ (800ea58 <ProcessMacCommands+0x38c>)
 800ea24:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	4798      	blx	r3
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800ea32:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800ea36:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800ea3a:	787b      	ldrb	r3, [r7, #1]
 800ea3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ea40:	b2db      	uxtb	r3, r3
 800ea42:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800ea46:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ea4a:	2202      	movs	r2, #2
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	2006      	movs	r0, #6
 800ea50:	f003 f9f0 	bl	8011e34 <LoRaMacCommandsAddCmd>
                break;
 800ea54:	e2cf      	b.n	800eff6 <ProcessMacCommands+0x92a>
 800ea56:	bf00      	nop
 800ea58:	200005cc 	.word	0x200005cc
 800ea5c:	20000ad4 	.word	0x20000ad4
 800ea60:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800ea64:	2303      	movs	r3, #3
 800ea66:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800ea6a:	78fb      	ldrb	r3, [r7, #3]
 800ea6c:	1c5a      	adds	r2, r3, #1
 800ea6e:	70fa      	strb	r2, [r7, #3]
 800ea70:	461a      	mov	r2, r3
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	4413      	add	r3, r2
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	b25b      	sxtb	r3, r3
 800ea7a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800ea7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ea82:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800ea84:	78fb      	ldrb	r3, [r7, #3]
 800ea86:	1c5a      	adds	r2, r3, #1
 800ea88:	70fa      	strb	r2, [r7, #3]
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	4413      	add	r3, r2
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800ea94:	78fb      	ldrb	r3, [r7, #3]
 800ea96:	1c5a      	adds	r2, r3, #1
 800ea98:	70fa      	strb	r2, [r7, #3]
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	781b      	ldrb	r3, [r3, #0]
 800eaa2:	021a      	lsls	r2, r3, #8
 800eaa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800eaaa:	78fb      	ldrb	r3, [r7, #3]
 800eaac:	1c5a      	adds	r2, r3, #1
 800eaae:	70fa      	strb	r2, [r7, #3]
 800eab0:	461a      	mov	r2, r3
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	4413      	add	r3, r2
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	041a      	lsls	r2, r3, #16
 800eaba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eabc:	4313      	orrs	r3, r2
 800eabe:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800eac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eac2:	2264      	movs	r2, #100	@ 0x64
 800eac4:	fb02 f303 	mul.w	r3, r2, r3
 800eac8:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800eaca:	2300      	movs	r3, #0
 800eacc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800eace:	78fb      	ldrb	r3, [r7, #3]
 800ead0:	1c5a      	adds	r2, r3, #1
 800ead2:	70fa      	strb	r2, [r7, #3]
 800ead4:	461a      	mov	r2, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4413      	add	r3, r2
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	b25b      	sxtb	r3, r3
 800eade:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800eae2:	4b85      	ldr	r3, [pc, #532]	@ (800ecf8 <ProcessMacCommands+0x62c>)
 800eae4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eae8:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800eaec:	4611      	mov	r1, r2
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f005 f8c1 	bl	8013c76 <RegionNewChannelReq>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800eafc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800eb00:	b25b      	sxtb	r3, r3
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f2c0 826c 	blt.w	800efe0 <ProcessMacCommands+0x914>
                {
                    macCmdPayload[0] = status;
 800eb08:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800eb0c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800eb10:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800eb14:	2201      	movs	r2, #1
 800eb16:	4619      	mov	r1, r3
 800eb18:	2007      	movs	r0, #7
 800eb1a:	f003 f98b 	bl	8011e34 <LoRaMacCommandsAddCmd>
                }
                break;
 800eb1e:	e25f      	b.n	800efe0 <ProcessMacCommands+0x914>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800eb20:	78fb      	ldrb	r3, [r7, #3]
 800eb22:	1c5a      	adds	r2, r3, #1
 800eb24:	70fa      	strb	r2, [r7, #3]
 800eb26:	461a      	mov	r2, r3
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	f003 030f 	and.w	r3, r3, #15
 800eb32:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800eb36:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d104      	bne.n	800eb48 <ProcessMacCommands+0x47c>
                {
                    delay++;
 800eb3e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800eb42:	3301      	adds	r3, #1
 800eb44:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800eb48:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800eb4c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eb50:	fb02 f303 	mul.w	r3, r2, r3
 800eb54:	461a      	mov	r2, r3
 800eb56:	4b68      	ldr	r3, [pc, #416]	@ (800ecf8 <ProcessMacCommands+0x62c>)
 800eb58:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800eb5a:	4b67      	ldr	r3, [pc, #412]	@ (800ecf8 <ProcessMacCommands+0x62c>)
 800eb5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb5e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800eb62:	4a65      	ldr	r2, [pc, #404]	@ (800ecf8 <ProcessMacCommands+0x62c>)
 800eb64:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800eb66:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	2008      	movs	r0, #8
 800eb70:	f003 f960 	bl	8011e34 <LoRaMacCommandsAddCmd>
                break;
 800eb74:	e23f      	b.n	800eff6 <ProcessMacCommands+0x92a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800eb76:	78fb      	ldrb	r3, [r7, #3]
 800eb78:	1c5a      	adds	r2, r3, #1
 800eb7a:	70fa      	strb	r2, [r7, #3]
 800eb7c:	461a      	mov	r2, r3
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	4413      	add	r3, r2
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800eb94:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800eb98:	f003 0320 	and.w	r3, r3, #32
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d002      	beq.n	800eba6 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800eba0:	2301      	movs	r3, #1
 800eba2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800eba6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800ebaa:	f003 0310 	and.w	r3, r3, #16
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d002      	beq.n	800ebb8 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800ebb8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800ebbc:	f003 030f 	and.w	r3, r3, #15
 800ebc0:	b2db      	uxtb	r3, r3
 800ebc2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800ebc6:	4b4c      	ldr	r3, [pc, #304]	@ (800ecf8 <ProcessMacCommands+0x62c>)
 800ebc8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ebcc:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800ebd0:	4611      	mov	r1, r2
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f005 f86a 	bl	8013cac <RegionTxParamSetupReq>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebde:	f000 8201 	beq.w	800efe4 <ProcessMacCommands+0x918>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800ebe2:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800ebe6:	4b44      	ldr	r3, [pc, #272]	@ (800ecf8 <ProcessMacCommands+0x62c>)
 800ebe8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800ebec:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800ebf0:	4b41      	ldr	r3, [pc, #260]	@ (800ecf8 <ProcessMacCommands+0x62c>)
 800ebf2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800ebf6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	4b3f      	ldr	r3, [pc, #252]	@ (800ecfc <ProcessMacCommands+0x630>)
 800ebfe:	5c9b      	ldrb	r3, [r3, r2]
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7f2 f899 	bl	8000d38 <__aeabi_ui2f>
 800ec06:	4603      	mov	r3, r0
 800ec08:	4a3b      	ldr	r2, [pc, #236]	@ (800ecf8 <ProcessMacCommands+0x62c>)
 800ec0a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800ec0e:	2302      	movs	r3, #2
 800ec10:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ec14:	4b38      	ldr	r3, [pc, #224]	@ (800ecf8 <ProcessMacCommands+0x62c>)
 800ec16:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800ec1a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ec1e:	4b36      	ldr	r3, [pc, #216]	@ (800ecf8 <ProcessMacCommands+0x62c>)
 800ec20:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ec24:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ec28:	4611      	mov	r1, r2
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f004 fede 	bl	80139ec <RegionGetPhyParam>
 800ec30:	4603      	mov	r3, r0
 800ec32:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800ec34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec36:	b25a      	sxtb	r2, r3
 800ec38:	4b2f      	ldr	r3, [pc, #188]	@ (800ecf8 <ProcessMacCommands+0x62c>)
 800ec3a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	bfb8      	it	lt
 800ec42:	4613      	movlt	r3, r2
 800ec44:	b25a      	sxtb	r2, r3
 800ec46:	4b2c      	ldr	r3, [pc, #176]	@ (800ecf8 <ProcessMacCommands+0x62c>)
 800ec48:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800ec4c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ec50:	2200      	movs	r2, #0
 800ec52:	4619      	mov	r1, r3
 800ec54:	2009      	movs	r0, #9
 800ec56:	f003 f8ed 	bl	8011e34 <LoRaMacCommandsAddCmd>
                }
                break;
 800ec5a:	e1c3      	b.n	800efe4 <ProcessMacCommands+0x918>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800ec5c:	2303      	movs	r3, #3
 800ec5e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800ec62:	78fb      	ldrb	r3, [r7, #3]
 800ec64:	1c5a      	adds	r2, r3, #1
 800ec66:	70fa      	strb	r2, [r7, #3]
 800ec68:	461a      	mov	r2, r3
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	4413      	add	r3, r2
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800ec74:	78fb      	ldrb	r3, [r7, #3]
 800ec76:	1c5a      	adds	r2, r3, #1
 800ec78:	70fa      	strb	r2, [r7, #3]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	4413      	add	r3, r2
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800ec84:	78fb      	ldrb	r3, [r7, #3]
 800ec86:	1c5a      	adds	r2, r3, #1
 800ec88:	70fa      	strb	r2, [r7, #3]
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	4413      	add	r3, r2
 800ec90:	781b      	ldrb	r3, [r3, #0]
 800ec92:	021a      	lsls	r2, r3, #8
 800ec94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec96:	4313      	orrs	r3, r2
 800ec98:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ec9a:	78fb      	ldrb	r3, [r7, #3]
 800ec9c:	1c5a      	adds	r2, r3, #1
 800ec9e:	70fa      	strb	r2, [r7, #3]
 800eca0:	461a      	mov	r2, r3
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4413      	add	r3, r2
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	041a      	lsls	r2, r3, #16
 800ecaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecac:	4313      	orrs	r3, r2
 800ecae:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800ecb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecb2:	2264      	movs	r2, #100	@ 0x64
 800ecb4:	fb02 f303 	mul.w	r3, r2, r3
 800ecb8:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800ecba:	4b0f      	ldr	r3, [pc, #60]	@ (800ecf8 <ProcessMacCommands+0x62c>)
 800ecbc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ecc0:	f107 0220 	add.w	r2, r7, #32
 800ecc4:	4611      	mov	r1, r2
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f005 f80b 	bl	8013ce2 <RegionDlChannelReq>
 800eccc:	4603      	mov	r3, r0
 800ecce:	b2db      	uxtb	r3, r3
 800ecd0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800ecd4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ecd8:	b25b      	sxtb	r3, r3
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	f2c0 8184 	blt.w	800efe8 <ProcessMacCommands+0x91c>
                {
                    macCmdPayload[0] = status;
 800ece0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ece4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800ece8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ecec:	2201      	movs	r2, #1
 800ecee:	4619      	mov	r1, r3
 800ecf0:	200a      	movs	r0, #10
 800ecf2:	f003 f89f 	bl	8011e34 <LoRaMacCommandsAddCmd>
                }
                break;
 800ecf6:	e177      	b.n	800efe8 <ProcessMacCommands+0x91c>
 800ecf8:	20000ad4 	.word	0x20000ad4
 800ecfc:	0801dbd0 	.word	0x0801dbd0
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800ed00:	200a      	movs	r0, #10
 800ed02:	f003 fbcf 	bl	80124a4 <LoRaMacConfirmQueueIsCmdActive>
 800ed06:	4603      	mov	r3, r0
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	f000 816f 	beq.w	800efec <ProcessMacCommands+0x920>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800ed0e:	210a      	movs	r1, #10
 800ed10:	2000      	movs	r0, #0
 800ed12:	f003 fb3b 	bl	801238c <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800ed16:	f107 0318 	add.w	r3, r7, #24
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	601a      	str	r2, [r3, #0]
 800ed1e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800ed20:	f107 0310 	add.w	r3, r7, #16
 800ed24:	2200      	movs	r2, #0
 800ed26:	601a      	str	r2, [r3, #0]
 800ed28:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800ed2a:	f107 0308 	add.w	r3, r7, #8
 800ed2e:	2200      	movs	r2, #0
 800ed30:	601a      	str	r2, [r3, #0]
 800ed32:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800ed34:	78fb      	ldrb	r3, [r7, #3]
 800ed36:	1c5a      	adds	r2, r3, #1
 800ed38:	70fa      	strb	r2, [r7, #3]
 800ed3a:	461a      	mov	r2, r3
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	4413      	add	r3, r2
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800ed44:	78fb      	ldrb	r3, [r7, #3]
 800ed46:	1c5a      	adds	r2, r3, #1
 800ed48:	70fa      	strb	r2, [r7, #3]
 800ed4a:	461a      	mov	r2, r3
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	4413      	add	r3, r2
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	021a      	lsls	r2, r3, #8
 800ed54:	69bb      	ldr	r3, [r7, #24]
 800ed56:	4313      	orrs	r3, r2
 800ed58:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800ed5a:	78fb      	ldrb	r3, [r7, #3]
 800ed5c:	1c5a      	adds	r2, r3, #1
 800ed5e:	70fa      	strb	r2, [r7, #3]
 800ed60:	461a      	mov	r2, r3
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	4413      	add	r3, r2
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	041a      	lsls	r2, r3, #16
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800ed70:	78fb      	ldrb	r3, [r7, #3]
 800ed72:	1c5a      	adds	r2, r3, #1
 800ed74:	70fa      	strb	r2, [r7, #3]
 800ed76:	461a      	mov	r2, r3
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	061a      	lsls	r2, r3, #24
 800ed80:	69bb      	ldr	r3, [r7, #24]
 800ed82:	4313      	orrs	r3, r2
 800ed84:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800ed86:	78fb      	ldrb	r3, [r7, #3]
 800ed88:	1c5a      	adds	r2, r3, #1
 800ed8a:	70fa      	strb	r2, [r7, #3]
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	4413      	add	r3, r2
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	b21b      	sxth	r3, r3
 800ed96:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800ed98:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ed9c:	461a      	mov	r2, r3
 800ed9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800eda2:	fb02 f303 	mul.w	r3, r2, r3
 800eda6:	121b      	asrs	r3, r3, #8
 800eda8:	b21b      	sxth	r3, r3
 800edaa:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800edac:	f107 0310 	add.w	r3, r7, #16
 800edb0:	f107 0218 	add.w	r2, r7, #24
 800edb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800edb8:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800edbc:	693a      	ldr	r2, [r7, #16]
 800edbe:	4b94      	ldr	r3, [pc, #592]	@ (800f010 <ProcessMacCommands+0x944>)
 800edc0:	4413      	add	r3, r2
 800edc2:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800edc4:	f107 0308 	add.w	r3, r7, #8
 800edc8:	4618      	mov	r0, r3
 800edca:	f00c f8dd 	bl	801af88 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800edce:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800edd2:	4b90      	ldr	r3, [pc, #576]	@ (800f014 <ProcessMacCommands+0x948>)
 800edd4:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800edd8:	9200      	str	r2, [sp, #0]
 800edda:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800edde:	f107 0210 	add.w	r2, r7, #16
 800ede2:	ca06      	ldmia	r2, {r1, r2}
 800ede4:	f00c f869 	bl	801aeba <SysTimeSub>
 800ede8:	f107 0010 	add.w	r0, r7, #16
 800edec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800edee:	9300      	str	r3, [sp, #0]
 800edf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800edf2:	f107 0208 	add.w	r2, r7, #8
 800edf6:	ca06      	ldmia	r2, {r1, r2}
 800edf8:	f00c f826 	bl	801ae48 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800edfc:	f107 0310 	add.w	r3, r7, #16
 800ee00:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ee04:	f00c f892 	bl	801af2c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800ee08:	f002 fecd 	bl	8011ba6 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800ee0c:	4b81      	ldr	r3, [pc, #516]	@ (800f014 <ProcessMacCommands+0x948>)
 800ee0e:	2201      	movs	r2, #1
 800ee10:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800ee14:	e0ea      	b.n	800efec <ProcessMacCommands+0x920>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800ee16:	200d      	movs	r0, #13
 800ee18:	f003 fb44 	bl	80124a4 <LoRaMacConfirmQueueIsCmdActive>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	f000 80e6 	beq.w	800eff0 <ProcessMacCommands+0x924>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800ee24:	210d      	movs	r1, #13
 800ee26:	2000      	movs	r0, #0
 800ee28:	f003 fab0 	bl	801238c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800ee2c:	4b79      	ldr	r3, [pc, #484]	@ (800f014 <ProcessMacCommands+0x948>)
 800ee2e:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800ee32:	2b04      	cmp	r3, #4
 800ee34:	f000 80dc 	beq.w	800eff0 <ProcessMacCommands+0x924>
 800ee38:	4b76      	ldr	r3, [pc, #472]	@ (800f014 <ProcessMacCommands+0x948>)
 800ee3a:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800ee3e:	2b05      	cmp	r3, #5
 800ee40:	f000 80d6 	beq.w	800eff0 <ProcessMacCommands+0x924>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800ee44:	f002 fe90 	bl	8011b68 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800ee48:	e0d2      	b.n	800eff0 <ProcessMacCommands+0x924>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800ee4a:	2303      	movs	r3, #3
 800ee4c:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800ee50:	2300      	movs	r3, #0
 800ee52:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800ee54:	78fb      	ldrb	r3, [r7, #3]
 800ee56:	1c5a      	adds	r2, r3, #1
 800ee58:	70fa      	strb	r2, [r7, #3]
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	4413      	add	r3, r2
 800ee60:	781b      	ldrb	r3, [r3, #0]
 800ee62:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800ee64:	78fb      	ldrb	r3, [r7, #3]
 800ee66:	1c5a      	adds	r2, r3, #1
 800ee68:	70fa      	strb	r2, [r7, #3]
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	4413      	add	r3, r2
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	021b      	lsls	r3, r3, #8
 800ee74:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ee76:	4313      	orrs	r3, r2
 800ee78:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800ee7a:	78fb      	ldrb	r3, [r7, #3]
 800ee7c:	1c5a      	adds	r2, r3, #1
 800ee7e:	70fa      	strb	r2, [r7, #3]
 800ee80:	461a      	mov	r2, r3
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	4413      	add	r3, r2
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	041b      	lsls	r3, r3, #16
 800ee8a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ee8c:	4313      	orrs	r3, r2
 800ee8e:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800ee90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ee92:	2264      	movs	r2, #100	@ 0x64
 800ee94:	fb02 f303 	mul.w	r3, r2, r3
 800ee98:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800ee9a:	78fb      	ldrb	r3, [r7, #3]
 800ee9c:	1c5a      	adds	r2, r3, #1
 800ee9e:	70fa      	strb	r2, [r7, #3]
 800eea0:	461a      	mov	r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	4413      	add	r3, r2
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	f003 030f 	and.w	r3, r3, #15
 800eeac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800eeb0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800eeb4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f002 fe5c 	bl	8011b74 <LoRaMacClassBPingSlotChannelReq>
 800eebc:	4603      	mov	r3, r0
 800eebe:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 800eec2:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800eec6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800eeca:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800eece:	2201      	movs	r2, #1
 800eed0:	4619      	mov	r1, r3
 800eed2:	2011      	movs	r0, #17
 800eed4:	f002 ffae 	bl	8011e34 <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 800eed8:	e08d      	b.n	800eff6 <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800eeda:	200e      	movs	r0, #14
 800eedc:	f003 fae2 	bl	80124a4 <LoRaMacConfirmQueueIsCmdActive>
 800eee0:	4603      	mov	r3, r0
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	f000 8086 	beq.w	800eff4 <ProcessMacCommands+0x928>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800eee8:	210e      	movs	r1, #14
 800eeea:	2000      	movs	r0, #0
 800eeec:	f003 fa4e 	bl	801238c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800eef0:	2300      	movs	r3, #0
 800eef2:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 800eef6:	2300      	movs	r3, #0
 800eef8:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800eefc:	78fb      	ldrb	r3, [r7, #3]
 800eefe:	1c5a      	adds	r2, r3, #1
 800ef00:	70fa      	strb	r2, [r7, #3]
 800ef02:	461a      	mov	r2, r3
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4413      	add	r3, r2
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800ef0e:	78fb      	ldrb	r3, [r7, #3]
 800ef10:	1c5a      	adds	r2, r3, #1
 800ef12:	70fa      	strb	r2, [r7, #3]
 800ef14:	461a      	mov	r2, r3
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4413      	add	r3, r2
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	021b      	lsls	r3, r3, #8
 800ef1e:	b21a      	sxth	r2, r3
 800ef20:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800ef24:	4313      	orrs	r3, r2
 800ef26:	b21b      	sxth	r3, r3
 800ef28:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800ef2c:	78fb      	ldrb	r3, [r7, #3]
 800ef2e:	1c5a      	adds	r2, r3, #1
 800ef30:	70fa      	strb	r2, [r7, #3]
 800ef32:	461a      	mov	r2, r3
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	4413      	add	r3, r2
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800ef3e:	4b36      	ldr	r3, [pc, #216]	@ (800f018 <ProcessMacCommands+0x94c>)
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 800ef46:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f002 fe1e 	bl	8011b8c <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800ef50:	e050      	b.n	800eff4 <ProcessMacCommands+0x928>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800ef52:	2300      	movs	r3, #0
 800ef54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800ef58:	78fb      	ldrb	r3, [r7, #3]
 800ef5a:	1c5a      	adds	r2, r3, #1
 800ef5c:	70fa      	strb	r2, [r7, #3]
 800ef5e:	461a      	mov	r2, r3
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	4413      	add	r3, r2
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800ef6a:	78fb      	ldrb	r3, [r7, #3]
 800ef6c:	1c5a      	adds	r2, r3, #1
 800ef6e:	70fa      	strb	r2, [r7, #3]
 800ef70:	461a      	mov	r2, r3
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	4413      	add	r3, r2
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	021b      	lsls	r3, r3, #8
 800ef7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ef7e:	4313      	orrs	r3, r2
 800ef80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800ef84:	78fb      	ldrb	r3, [r7, #3]
 800ef86:	1c5a      	adds	r2, r3, #1
 800ef88:	70fa      	strb	r2, [r7, #3]
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	4413      	add	r3, r2
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	041b      	lsls	r3, r3, #16
 800ef94:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ef98:	4313      	orrs	r3, r2
 800ef9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 800ef9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800efa2:	2264      	movs	r2, #100	@ 0x64
 800efa4:	fb02 f303 	mul.w	r3, r2, r3
 800efa8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800efac:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800efb0:	f002 fdff 	bl	8011bb2 <LoRaMacClassBBeaconFreqReq>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d003      	beq.n	800efc2 <ProcessMacCommands+0x8f6>
                    {
                        macCmdPayload[0] = 1;
 800efba:	2301      	movs	r3, #1
 800efbc:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800efc0:	e002      	b.n	800efc8 <ProcessMacCommands+0x8fc>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800efc2:	2300      	movs	r3, #0
 800efc4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800efc8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800efcc:	2201      	movs	r2, #1
 800efce:	4619      	mov	r1, r3
 800efd0:	2013      	movs	r0, #19
 800efd2:	f002 ff2f 	bl	8011e34 <LoRaMacCommandsAddCmd>
                }
                break;
 800efd6:	e00e      	b.n	800eff6 <ProcessMacCommands+0x92a>
                break;
 800efd8:	bf00      	nop
 800efda:	e00c      	b.n	800eff6 <ProcessMacCommands+0x92a>
                break;
 800efdc:	bf00      	nop
 800efde:	e00a      	b.n	800eff6 <ProcessMacCommands+0x92a>
                break;
 800efe0:	bf00      	nop
 800efe2:	e008      	b.n	800eff6 <ProcessMacCommands+0x92a>
                break;
 800efe4:	bf00      	nop
 800efe6:	e006      	b.n	800eff6 <ProcessMacCommands+0x92a>
                break;
 800efe8:	bf00      	nop
 800efea:	e004      	b.n	800eff6 <ProcessMacCommands+0x92a>
                break;
 800efec:	bf00      	nop
 800efee:	e002      	b.n	800eff6 <ProcessMacCommands+0x92a>
                break;
 800eff0:	bf00      	nop
 800eff2:	e000      	b.n	800eff6 <ProcessMacCommands+0x92a>
                break;
 800eff4:	bf00      	nop
    while( macIndex < commandsSize )
 800eff6:	78fa      	ldrb	r2, [r7, #3]
 800eff8:	78bb      	ldrb	r3, [r7, #2]
 800effa:	429a      	cmp	r2, r3
 800effc:	f4ff ab7e 	bcc.w	800e6fc <ProcessMacCommands+0x30>
 800f000:	e002      	b.n	800f008 <ProcessMacCommands+0x93c>
            return;
 800f002:	bf00      	nop
 800f004:	e000      	b.n	800f008 <ProcessMacCommands+0x93c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800f006:	bf00      	nop
        }
    }
}
 800f008:	378c      	adds	r7, #140	@ 0x8c
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd90      	pop	{r4, r7, pc}
 800f00e:	bf00      	nop
 800f010:	12d53d80 	.word	0x12d53d80
 800f014:	200005cc 	.word	0x200005cc
 800f018:	20001254 	.word	0x20001254

0800f01c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b08e      	sub	sp, #56	@ 0x38
 800f020:	af02      	add	r7, sp, #8
 800f022:	60f8      	str	r0, [r7, #12]
 800f024:	607a      	str	r2, [r7, #4]
 800f026:	461a      	mov	r2, r3
 800f028:	460b      	mov	r3, r1
 800f02a:	72fb      	strb	r3, [r7, #11]
 800f02c:	4613      	mov	r3, r2
 800f02e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f030:	2303      	movs	r3, #3
 800f032:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f036:	4b65      	ldr	r3, [pc, #404]	@ (800f1cc <Send+0x1b0>)
 800f038:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f03c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f040:	4b62      	ldr	r3, [pc, #392]	@ (800f1cc <Send+0x1b0>)
 800f042:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f046:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f04a:	4b60      	ldr	r3, [pc, #384]	@ (800f1cc <Send+0x1b0>)
 800f04c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f04e:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f050:	4b5e      	ldr	r3, [pc, #376]	@ (800f1cc <Send+0x1b0>)
 800f052:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800f056:	2b00      	cmp	r3, #0
 800f058:	d101      	bne.n	800f05e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f05a:	2307      	movs	r3, #7
 800f05c:	e0b1      	b.n	800f1c2 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f05e:	4b5b      	ldr	r3, [pc, #364]	@ (800f1cc <Send+0x1b0>)
 800f060:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800f064:	2b00      	cmp	r3, #0
 800f066:	d102      	bne.n	800f06e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f068:	4b58      	ldr	r3, [pc, #352]	@ (800f1cc <Send+0x1b0>)
 800f06a:	2200      	movs	r2, #0
 800f06c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 800f06e:	2300      	movs	r3, #0
 800f070:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800f074:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f078:	f36f 0303 	bfc	r3, #0, #4
 800f07c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800f080:	4b52      	ldr	r3, [pc, #328]	@ (800f1cc <Send+0x1b0>)
 800f082:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800f086:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f08a:	f362 13c7 	bfi	r3, r2, #7, #1
 800f08e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f092:	4b4e      	ldr	r3, [pc, #312]	@ (800f1cc <Send+0x1b0>)
 800f094:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d106      	bne.n	800f0aa <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800f09c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f0a0:	f043 0310 	orr.w	r3, r3, #16
 800f0a4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800f0a8:	e005      	b.n	800f0b6 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800f0aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f0ae:	f36f 1304 	bfc	r3, #4, #1
 800f0b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800f0b6:	4b45      	ldr	r3, [pc, #276]	@ (800f1cc <Send+0x1b0>)
 800f0b8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d005      	beq.n	800f0cc <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800f0c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f0c4:	f043 0320 	orr.w	r3, r3, #32
 800f0c8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800f0d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f0d4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f0d8:	b2db      	uxtb	r3, r3
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	bf14      	ite	ne
 800f0de:	2301      	movne	r3, #1
 800f0e0:	2300      	moveq	r3, #0
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f0e6:	4b39      	ldr	r3, [pc, #228]	@ (800f1cc <Send+0x1b0>)
 800f0e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0ea:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800f0ec:	4b37      	ldr	r3, [pc, #220]	@ (800f1cc <Send+0x1b0>)
 800f0ee:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800f0f2:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800f0f4:	4b35      	ldr	r3, [pc, #212]	@ (800f1cc <Send+0x1b0>)
 800f0f6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800f0fa:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f0fc:	4b33      	ldr	r3, [pc, #204]	@ (800f1cc <Send+0x1b0>)
 800f0fe:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f102:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f106:	4b31      	ldr	r3, [pc, #196]	@ (800f1cc <Send+0x1b0>)
 800f108:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800f10c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f110:	4b2e      	ldr	r3, [pc, #184]	@ (800f1cc <Send+0x1b0>)
 800f112:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f116:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800f11a:	4b2c      	ldr	r3, [pc, #176]	@ (800f1cc <Send+0x1b0>)
 800f11c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f120:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800f124:	4b29      	ldr	r3, [pc, #164]	@ (800f1cc <Send+0x1b0>)
 800f126:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800f12a:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800f12c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f130:	f107 0014 	add.w	r0, r7, #20
 800f134:	4a26      	ldr	r2, [pc, #152]	@ (800f1d0 <Send+0x1b4>)
 800f136:	4927      	ldr	r1, [pc, #156]	@ (800f1d4 <Send+0x1b8>)
 800f138:	f002 fc56 	bl	80119e8 <LoRaMacAdrCalcNext>
 800f13c:	4603      	mov	r3, r0
 800f13e:	461a      	mov	r2, r3
 800f140:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f144:	f362 1386 	bfi	r3, r2, #6, #1
 800f148:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800f14c:	7afa      	ldrb	r2, [r7, #11]
 800f14e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800f152:	893b      	ldrh	r3, [r7, #8]
 800f154:	9300      	str	r3, [sp, #0]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	68f8      	ldr	r0, [r7, #12]
 800f15a:	f000 fc5d 	bl	800fa18 <PrepareFrame>
 800f15e:	4603      	mov	r3, r0
 800f160:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800f164:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d003      	beq.n	800f174 <Send+0x158>
 800f16c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f170:	2b0a      	cmp	r3, #10
 800f172:	d107      	bne.n	800f184 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 800f174:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800f178:	4618      	mov	r0, r3
 800f17a:	f000 f961 	bl	800f440 <ScheduleTx>
 800f17e:	4603      	mov	r3, r0
 800f180:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800f184:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d00a      	beq.n	800f1a2 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800f18c:	4a0f      	ldr	r2, [pc, #60]	@ (800f1cc <Send+0x1b0>)
 800f18e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f192:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800f196:	4a0d      	ldr	r2, [pc, #52]	@ (800f1cc <Send+0x1b0>)
 800f198:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800f19c:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 800f1a0:	e00d      	b.n	800f1be <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800f1a2:	4b0a      	ldr	r3, [pc, #40]	@ (800f1cc <Send+0x1b0>)
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800f1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1ac:	4a07      	ldr	r2, [pc, #28]	@ (800f1cc <Send+0x1b0>)
 800f1ae:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800f1b0:	f002 fee6 	bl	8011f80 <LoRaMacCommandsRemoveNoneStickyCmds>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d001      	beq.n	800f1be <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f1ba:	2313      	movs	r3, #19
 800f1bc:	e001      	b.n	800f1c2 <Send+0x1a6>
        }
    }
    return status;
 800f1be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3730      	adds	r7, #48	@ 0x30
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	20000ad4 	.word	0x20000ad4
 800f1d0:	20000b0c 	.word	0x20000b0c
 800f1d4:	20000b0d 	.word	0x20000b0d

0800f1d8 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	4603      	mov	r3, r0
 800f1e0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800f1ee:	79fb      	ldrb	r3, [r7, #7]
 800f1f0:	2bff      	cmp	r3, #255	@ 0xff
 800f1f2:	d11f      	bne.n	800f234 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800f1f4:	2000      	movs	r0, #0
 800f1f6:	f7ff f931 	bl	800e45c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800f1fa:	4b15      	ldr	r3, [pc, #84]	@ (800f250 <SendReJoinReq+0x78>)
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800f202:	4b13      	ldr	r3, [pc, #76]	@ (800f250 <SendReJoinReq+0x78>)
 800f204:	4a13      	ldr	r2, [pc, #76]	@ (800f254 <SendReJoinReq+0x7c>)
 800f206:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f20a:	4b11      	ldr	r3, [pc, #68]	@ (800f250 <SendReJoinReq+0x78>)
 800f20c:	22ff      	movs	r2, #255	@ 0xff
 800f20e:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800f212:	7b3b      	ldrb	r3, [r7, #12]
 800f214:	f36f 1347 	bfc	r3, #5, #3
 800f218:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800f21a:	7b3a      	ldrb	r2, [r7, #12]
 800f21c:	4b0c      	ldr	r3, [pc, #48]	@ (800f250 <SendReJoinReq+0x78>)
 800f21e:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800f222:	480d      	ldr	r0, [pc, #52]	@ (800f258 <SendReJoinReq+0x80>)
 800f224:	f7fc fb3a 	bl	800b89c <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800f228:	480c      	ldr	r0, [pc, #48]	@ (800f25c <SendReJoinReq+0x84>)
 800f22a:	f7fc fb07 	bl	800b83c <SecureElementGetDevEui>

            allowDelayedTx = false;
 800f22e:	2300      	movs	r3, #0
 800f230:	73fb      	strb	r3, [r7, #15]

            break;
 800f232:	e002      	b.n	800f23a <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f234:	2302      	movs	r3, #2
 800f236:	73bb      	strb	r3, [r7, #14]
            break;
 800f238:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800f23a:	7bfb      	ldrb	r3, [r7, #15]
 800f23c:	4618      	mov	r0, r3
 800f23e:	f000 f8ff 	bl	800f440 <ScheduleTx>
 800f242:	4603      	mov	r3, r0
 800f244:	73bb      	strb	r3, [r7, #14]
    return status;
 800f246:	7bbb      	ldrb	r3, [r7, #14]
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3710      	adds	r7, #16
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}
 800f250:	200005cc 	.word	0x200005cc
 800f254:	200005ce 	.word	0x200005ce
 800f258:	200006da 	.word	0x200006da
 800f25c:	200006e2 	.word	0x200006e2

0800f260 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800f260:	b580      	push	{r7, lr}
 800f262:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f264:	f002 fc2f 	bl	8011ac6 <LoRaMacClassBIsBeaconExpected>
 800f268:	4603      	mov	r3, r0
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d001      	beq.n	800f272 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800f26e:	230e      	movs	r3, #14
 800f270:	e013      	b.n	800f29a <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f272:	4b0b      	ldr	r3, [pc, #44]	@ (800f2a0 <CheckForClassBCollision+0x40>)
 800f274:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f278:	2b01      	cmp	r3, #1
 800f27a:	d10d      	bne.n	800f298 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f27c:	f002 fc2a 	bl	8011ad4 <LoRaMacClassBIsPingExpected>
 800f280:	4603      	mov	r3, r0
 800f282:	2b00      	cmp	r3, #0
 800f284:	d001      	beq.n	800f28a <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f286:	230f      	movs	r3, #15
 800f288:	e007      	b.n	800f29a <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f28a:	f002 fc2a 	bl	8011ae2 <LoRaMacClassBIsMulticastExpected>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d001      	beq.n	800f298 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f294:	230f      	movs	r3, #15
 800f296:	e000      	b.n	800f29a <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800f298:	2300      	movs	r3, #0
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	20000ad4 	.word	0x20000ad4

0800f2a4 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800f2a4:	b590      	push	{r4, r7, lr}
 800f2a6:	b083      	sub	sp, #12
 800f2a8:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f2aa:	4b2d      	ldr	r3, [pc, #180]	@ (800f360 <ComputeRxWindowParameters+0xbc>)
 800f2ac:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f2b0:	4b2b      	ldr	r3, [pc, #172]	@ (800f360 <ComputeRxWindowParameters+0xbc>)
 800f2b2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f2b6:	4b2a      	ldr	r3, [pc, #168]	@ (800f360 <ComputeRxWindowParameters+0xbc>)
 800f2b8:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 800f2bc:	4b28      	ldr	r3, [pc, #160]	@ (800f360 <ComputeRxWindowParameters+0xbc>)
 800f2be:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800f2c2:	4b27      	ldr	r3, [pc, #156]	@ (800f360 <ComputeRxWindowParameters+0xbc>)
 800f2c4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f2c8:	b25b      	sxtb	r3, r3
 800f2ca:	f004 fd85 	bl	8013dd8 <RegionApplyDrOffset>
 800f2ce:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f2d0:	b259      	sxtb	r1, r3
 800f2d2:	4b23      	ldr	r3, [pc, #140]	@ (800f360 <ComputeRxWindowParameters+0xbc>)
 800f2d4:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800f2d8:	4b21      	ldr	r3, [pc, #132]	@ (800f360 <ComputeRxWindowParameters+0xbc>)
 800f2da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f2dc:	4821      	ldr	r0, [pc, #132]	@ (800f364 <ComputeRxWindowParameters+0xc0>)
 800f2de:	9000      	str	r0, [sp, #0]
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	f004 fc24 	bl	8013b2e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f2e6:	4b1e      	ldr	r3, [pc, #120]	@ (800f360 <ComputeRxWindowParameters+0xbc>)
 800f2e8:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800f2ec:	4b1c      	ldr	r3, [pc, #112]	@ (800f360 <ComputeRxWindowParameters+0xbc>)
 800f2ee:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f2f2:	b259      	sxtb	r1, r3
 800f2f4:	4b1a      	ldr	r3, [pc, #104]	@ (800f360 <ComputeRxWindowParameters+0xbc>)
 800f2f6:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800f2fa:	4b19      	ldr	r3, [pc, #100]	@ (800f360 <ComputeRxWindowParameters+0xbc>)
 800f2fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f2fe:	4c1a      	ldr	r4, [pc, #104]	@ (800f368 <ComputeRxWindowParameters+0xc4>)
 800f300:	9400      	str	r4, [sp, #0]
 800f302:	f004 fc14 	bl	8013b2e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f306:	4b16      	ldr	r3, [pc, #88]	@ (800f360 <ComputeRxWindowParameters+0xbc>)
 800f308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f30a:	4a18      	ldr	r2, [pc, #96]	@ (800f36c <ComputeRxWindowParameters+0xc8>)
 800f30c:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800f310:	4413      	add	r3, r2
 800f312:	4a16      	ldr	r2, [pc, #88]	@ (800f36c <ComputeRxWindowParameters+0xc8>)
 800f314:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f318:	4b11      	ldr	r3, [pc, #68]	@ (800f360 <ComputeRxWindowParameters+0xbc>)
 800f31a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f31c:	4a13      	ldr	r2, [pc, #76]	@ (800f36c <ComputeRxWindowParameters+0xc8>)
 800f31e:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 800f322:	4413      	add	r3, r2
 800f324:	4a11      	ldr	r2, [pc, #68]	@ (800f36c <ComputeRxWindowParameters+0xc8>)
 800f326:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800f32a:	4b10      	ldr	r3, [pc, #64]	@ (800f36c <ComputeRxWindowParameters+0xc8>)
 800f32c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f330:	2b04      	cmp	r3, #4
 800f332:	d011      	beq.n	800f358 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f334:	4b0a      	ldr	r3, [pc, #40]	@ (800f360 <ComputeRxWindowParameters+0xbc>)
 800f336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f338:	4a0c      	ldr	r2, [pc, #48]	@ (800f36c <ComputeRxWindowParameters+0xc8>)
 800f33a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800f33e:	4413      	add	r3, r2
 800f340:	4a0a      	ldr	r2, [pc, #40]	@ (800f36c <ComputeRxWindowParameters+0xc8>)
 800f342:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f346:	4b06      	ldr	r3, [pc, #24]	@ (800f360 <ComputeRxWindowParameters+0xbc>)
 800f348:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f34a:	4a08      	ldr	r2, [pc, #32]	@ (800f36c <ComputeRxWindowParameters+0xc8>)
 800f34c:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 800f350:	4413      	add	r3, r2
 800f352:	4a06      	ldr	r2, [pc, #24]	@ (800f36c <ComputeRxWindowParameters+0xc8>)
 800f354:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 800f358:	bf00      	nop
 800f35a:	3704      	adds	r7, #4
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd90      	pop	{r4, r7, pc}
 800f360:	20000ad4 	.word	0x20000ad4
 800f364:	20000984 	.word	0x20000984
 800f368:	20000998 	.word	0x20000998
 800f36c:	200005cc 	.word	0x200005cc

0800f370 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b082      	sub	sp, #8
 800f374:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800f376:	2300      	movs	r3, #0
 800f378:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f37a:	4b13      	ldr	r3, [pc, #76]	@ (800f3c8 <VerifyTxFrame+0x58>)
 800f37c:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800f380:	2b00      	cmp	r3, #0
 800f382:	d01b      	beq.n	800f3bc <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f384:	1d3b      	adds	r3, r7, #4
 800f386:	4618      	mov	r0, r3
 800f388:	f002 fe4a 	bl	8012020 <LoRaMacCommandsGetSizeSerializedCmds>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d001      	beq.n	800f396 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f392:	2313      	movs	r3, #19
 800f394:	e013      	b.n	800f3be <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800f396:	4b0d      	ldr	r3, [pc, #52]	@ (800f3cc <VerifyTxFrame+0x5c>)
 800f398:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800f39c:	4a0a      	ldr	r2, [pc, #40]	@ (800f3c8 <VerifyTxFrame+0x58>)
 800f39e:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	b2d2      	uxtb	r2, r2
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7ff f968 	bl	800e67c <ValidatePayloadLength>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	f083 0301 	eor.w	r3, r3, #1
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d001      	beq.n	800f3bc <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800f3b8:	2308      	movs	r3, #8
 800f3ba:	e000      	b.n	800f3be <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800f3bc:	2300      	movs	r3, #0
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3708      	adds	r7, #8
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	20000ad4 	.word	0x20000ad4
 800f3cc:	200005cc 	.word	0x200005cc

0800f3d0 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800f3d6:	4b18      	ldr	r3, [pc, #96]	@ (800f438 <SerializeTxFrame+0x68>)
 800f3d8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d002      	beq.n	800f3e6 <SerializeTxFrame+0x16>
 800f3e0:	2b04      	cmp	r3, #4
 800f3e2:	d011      	beq.n	800f408 <SerializeTxFrame+0x38>
 800f3e4:	e021      	b.n	800f42a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800f3e6:	4815      	ldr	r0, [pc, #84]	@ (800f43c <SerializeTxFrame+0x6c>)
 800f3e8:	f004 f974 	bl	80136d4 <LoRaMacSerializerJoinRequest>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800f3f0:	79fb      	ldrb	r3, [r7, #7]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d001      	beq.n	800f3fa <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f3f6:	2311      	movs	r3, #17
 800f3f8:	e01a      	b.n	800f430 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800f3fa:	4b0f      	ldr	r3, [pc, #60]	@ (800f438 <SerializeTxFrame+0x68>)
 800f3fc:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800f400:	461a      	mov	r2, r3
 800f402:	4b0d      	ldr	r3, [pc, #52]	@ (800f438 <SerializeTxFrame+0x68>)
 800f404:	801a      	strh	r2, [r3, #0]
            break;
 800f406:	e012      	b.n	800f42e <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800f408:	480c      	ldr	r0, [pc, #48]	@ (800f43c <SerializeTxFrame+0x6c>)
 800f40a:	f004 f9e5 	bl	80137d8 <LoRaMacSerializerData>
 800f40e:	4603      	mov	r3, r0
 800f410:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800f412:	79fb      	ldrb	r3, [r7, #7]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d001      	beq.n	800f41c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f418:	2311      	movs	r3, #17
 800f41a:	e009      	b.n	800f430 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800f41c:	4b06      	ldr	r3, [pc, #24]	@ (800f438 <SerializeTxFrame+0x68>)
 800f41e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800f422:	461a      	mov	r2, r3
 800f424:	4b04      	ldr	r3, [pc, #16]	@ (800f438 <SerializeTxFrame+0x68>)
 800f426:	801a      	strh	r2, [r3, #0]
            break;
 800f428:	e001      	b.n	800f42e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800f42a:	2303      	movs	r3, #3
 800f42c:	e000      	b.n	800f430 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800f42e:	2300      	movs	r3, #0
}
 800f430:	4618      	mov	r0, r3
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}
 800f438:	200005cc 	.word	0x200005cc
 800f43c:	200006d4 	.word	0x200006d4

0800f440 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b090      	sub	sp, #64	@ 0x40
 800f444:	af02      	add	r7, sp, #8
 800f446:	4603      	mov	r3, r0
 800f448:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f44a:	2303      	movs	r3, #3
 800f44c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800f450:	f7ff ff06 	bl	800f260 <CheckForClassBCollision>
 800f454:	4603      	mov	r3, r0
 800f456:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800f45a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d002      	beq.n	800f468 <ScheduleTx+0x28>
    {
        return status;
 800f462:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f466:	e092      	b.n	800f58e <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 800f468:	f000 f8fe 	bl	800f668 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800f46c:	f7ff ffb0 	bl	800f3d0 <SerializeTxFrame>
 800f470:	4603      	mov	r3, r0
 800f472:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800f476:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d002      	beq.n	800f484 <ScheduleTx+0x44>
    {
        return status;
 800f47e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f482:	e084      	b.n	800f58e <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800f484:	4b44      	ldr	r3, [pc, #272]	@ (800f598 <ScheduleTx+0x158>)
 800f486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f488:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f48a:	4b43      	ldr	r3, [pc, #268]	@ (800f598 <ScheduleTx+0x158>)
 800f48c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f490:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800f492:	4b41      	ldr	r3, [pc, #260]	@ (800f598 <ScheduleTx+0x158>)
 800f494:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800f498:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f49a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f00b fdaa 	bl	801aff8 <SysTimeGetMcuTime>
 800f4a4:	4638      	mov	r0, r7
 800f4a6:	4b3c      	ldr	r3, [pc, #240]	@ (800f598 <ScheduleTx+0x158>)
 800f4a8:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 800f4ac:	9200      	str	r2, [sp, #0]
 800f4ae:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800f4b2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f4b6:	ca06      	ldmia	r2, {r1, r2}
 800f4b8:	f00b fcff 	bl	801aeba <SysTimeSub>
 800f4bc:	f107 0320 	add.w	r3, r7, #32
 800f4c0:	463a      	mov	r2, r7
 800f4c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f4c6:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800f4ca:	4b33      	ldr	r3, [pc, #204]	@ (800f598 <ScheduleTx+0x158>)
 800f4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4ce:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800f4da:	4b30      	ldr	r3, [pc, #192]	@ (800f59c <ScheduleTx+0x15c>)
 800f4dc:	881b      	ldrh	r3, [r3, #0]
 800f4de:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f4e0:	4b2d      	ldr	r3, [pc, #180]	@ (800f598 <ScheduleTx+0x158>)
 800f4e2:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d104      	bne.n	800f4f4 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800f4f4:	4b28      	ldr	r3, [pc, #160]	@ (800f598 <ScheduleTx+0x158>)
 800f4f6:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f4fa:	f107 0114 	add.w	r1, r7, #20
 800f4fe:	4b28      	ldr	r3, [pc, #160]	@ (800f5a0 <ScheduleTx+0x160>)
 800f500:	9300      	str	r3, [sp, #0]
 800f502:	4b28      	ldr	r3, [pc, #160]	@ (800f5a4 <ScheduleTx+0x164>)
 800f504:	4a28      	ldr	r2, [pc, #160]	@ (800f5a8 <ScheduleTx+0x168>)
 800f506:	f004 fc2d 	bl	8013d64 <RegionNextChannel>
 800f50a:	4603      	mov	r3, r0
 800f50c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 800f510:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f514:	2b00      	cmp	r3, #0
 800f516:	d025      	beq.n	800f564 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800f518:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f51c:	2b0b      	cmp	r3, #11
 800f51e:	d11e      	bne.n	800f55e <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 800f520:	4b1e      	ldr	r3, [pc, #120]	@ (800f59c <ScheduleTx+0x15c>)
 800f522:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 800f526:	2b00      	cmp	r3, #0
 800f528:	d01c      	beq.n	800f564 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 800f52a:	7bfb      	ldrb	r3, [r7, #15]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d013      	beq.n	800f558 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800f530:	4b1a      	ldr	r3, [pc, #104]	@ (800f59c <ScheduleTx+0x15c>)
 800f532:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f536:	f043 0320 	orr.w	r3, r3, #32
 800f53a:	4a18      	ldr	r2, [pc, #96]	@ (800f59c <ScheduleTx+0x15c>)
 800f53c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800f540:	4b16      	ldr	r3, [pc, #88]	@ (800f59c <ScheduleTx+0x15c>)
 800f542:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 800f546:	4619      	mov	r1, r3
 800f548:	4818      	ldr	r0, [pc, #96]	@ (800f5ac <ScheduleTx+0x16c>)
 800f54a:	f00c f9eb 	bl	801b924 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800f54e:	4817      	ldr	r0, [pc, #92]	@ (800f5ac <ScheduleTx+0x16c>)
 800f550:	f00c f90a 	bl	801b768 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800f554:	2300      	movs	r3, #0
 800f556:	e01a      	b.n	800f58e <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 800f558:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f55c:	e017      	b.n	800f58e <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800f55e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f562:	e014      	b.n	800f58e <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800f564:	f7ff fe9e 	bl	800f2a4 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800f568:	f7ff ff02 	bl	800f370 <VerifyTxFrame>
 800f56c:	4603      	mov	r3, r0
 800f56e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800f572:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f576:	2b00      	cmp	r3, #0
 800f578:	d002      	beq.n	800f580 <ScheduleTx+0x140>
    {
        return status;
 800f57a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f57e:	e006      	b.n	800f58e <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800f580:	4b06      	ldr	r3, [pc, #24]	@ (800f59c <ScheduleTx+0x15c>)
 800f582:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 800f586:	4618      	mov	r0, r3
 800f588:	f000 fb60 	bl	800fc4c <SendFrameOnChannel>
 800f58c:	4603      	mov	r3, r0
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3738      	adds	r7, #56	@ 0x38
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}
 800f596:	bf00      	nop
 800f598:	20000ad4 	.word	0x20000ad4
 800f59c:	200005cc 	.word	0x200005cc
 800f5a0:	20000b04 	.word	0x20000b04
 800f5a4:	20000a50 	.word	0x20000a50
 800f5a8:	200009dd 	.word	0x200009dd
 800f5ac:	20000934 	.word	0x20000934

0800f5b0 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	460a      	mov	r2, r1
 800f5ba:	71fb      	strb	r3, [r7, #7]
 800f5bc:	4613      	mov	r3, r2
 800f5be:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f5c0:	2313      	movs	r3, #19
 800f5c2:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800f5c8:	4b25      	ldr	r3, [pc, #148]	@ (800f660 <SecureFrame+0xb0>)
 800f5ca:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d002      	beq.n	800f5d8 <SecureFrame+0x28>
 800f5d2:	2b04      	cmp	r3, #4
 800f5d4:	d011      	beq.n	800f5fa <SecureFrame+0x4a>
 800f5d6:	e03b      	b.n	800f650 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800f5d8:	4822      	ldr	r0, [pc, #136]	@ (800f664 <SecureFrame+0xb4>)
 800f5da:	f003 fc45 	bl	8012e68 <LoRaMacCryptoPrepareJoinRequest>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800f5e2:	7bfb      	ldrb	r3, [r7, #15]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d001      	beq.n	800f5ec <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f5e8:	2311      	movs	r3, #17
 800f5ea:	e034      	b.n	800f656 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800f5ec:	4b1c      	ldr	r3, [pc, #112]	@ (800f660 <SecureFrame+0xb0>)
 800f5ee:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	4b1a      	ldr	r3, [pc, #104]	@ (800f660 <SecureFrame+0xb0>)
 800f5f6:	801a      	strh	r2, [r3, #0]
            break;
 800f5f8:	e02c      	b.n	800f654 <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800f5fa:	f107 0308 	add.w	r3, r7, #8
 800f5fe:	4618      	mov	r0, r3
 800f600:	f003 fb42 	bl	8012c88 <LoRaMacCryptoGetFCntUp>
 800f604:	4603      	mov	r3, r0
 800f606:	2b00      	cmp	r3, #0
 800f608:	d001      	beq.n	800f60e <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800f60a:	2312      	movs	r3, #18
 800f60c:	e023      	b.n	800f656 <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800f60e:	4b14      	ldr	r3, [pc, #80]	@ (800f660 <SecureFrame+0xb0>)
 800f610:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 800f614:	2b00      	cmp	r3, #0
 800f616:	d104      	bne.n	800f622 <SecureFrame+0x72>
 800f618:	4b11      	ldr	r3, [pc, #68]	@ (800f660 <SecureFrame+0xb0>)
 800f61a:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 800f61e:	2b01      	cmp	r3, #1
 800f620:	d902      	bls.n	800f628 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	3b01      	subs	r3, #1
 800f626:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800f628:	68b8      	ldr	r0, [r7, #8]
 800f62a:	79ba      	ldrb	r2, [r7, #6]
 800f62c:	79f9      	ldrb	r1, [r7, #7]
 800f62e:	4b0d      	ldr	r3, [pc, #52]	@ (800f664 <SecureFrame+0xb4>)
 800f630:	f003 fd48 	bl	80130c4 <LoRaMacCryptoSecureMessage>
 800f634:	4603      	mov	r3, r0
 800f636:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800f638:	7bfb      	ldrb	r3, [r7, #15]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d001      	beq.n	800f642 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f63e:	2311      	movs	r3, #17
 800f640:	e009      	b.n	800f656 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800f642:	4b07      	ldr	r3, [pc, #28]	@ (800f660 <SecureFrame+0xb0>)
 800f644:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800f648:	461a      	mov	r2, r3
 800f64a:	4b05      	ldr	r3, [pc, #20]	@ (800f660 <SecureFrame+0xb0>)
 800f64c:	801a      	strh	r2, [r3, #0]
            break;
 800f64e:	e001      	b.n	800f654 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800f650:	2303      	movs	r3, #3
 800f652:	e000      	b.n	800f656 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800f654:	2300      	movs	r3, #0
}
 800f656:	4618      	mov	r0, r3
 800f658:	3710      	adds	r7, #16
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	200005cc 	.word	0x200005cc
 800f664:	200006d4 	.word	0x200006d4

0800f668 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800f668:	b480      	push	{r7}
 800f66a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800f66c:	4b09      	ldr	r3, [pc, #36]	@ (800f694 <CalculateBackOff+0x2c>)
 800f66e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f670:	2b00      	cmp	r3, #0
 800f672:	d10a      	bne.n	800f68a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800f674:	4b07      	ldr	r3, [pc, #28]	@ (800f694 <CalculateBackOff+0x2c>)
 800f676:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 800f67a:	3b01      	subs	r3, #1
 800f67c:	4a06      	ldr	r2, [pc, #24]	@ (800f698 <CalculateBackOff+0x30>)
 800f67e:	f8d2 2414 	ldr.w	r2, [r2, #1044]	@ 0x414
 800f682:	fb02 f303 	mul.w	r3, r2, r3
 800f686:	4a03      	ldr	r2, [pc, #12]	@ (800f694 <CalculateBackOff+0x2c>)
 800f688:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 800f68a:	bf00      	nop
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bc80      	pop	{r7}
 800f690:	4770      	bx	lr
 800f692:	bf00      	nop
 800f694:	20000ad4 	.word	0x20000ad4
 800f698:	200005cc 	.word	0x200005cc

0800f69c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	7139      	strb	r1, [r7, #4]
 800f6a6:	71fb      	strb	r3, [r7, #7]
 800f6a8:	4613      	mov	r3, r2
 800f6aa:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800f6ac:	79fb      	ldrb	r3, [r7, #7]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d002      	beq.n	800f6b8 <RemoveMacCommands+0x1c>
 800f6b2:	79fb      	ldrb	r3, [r7, #7]
 800f6b4:	2b01      	cmp	r3, #1
 800f6b6:	d10d      	bne.n	800f6d4 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800f6b8:	79bb      	ldrb	r3, [r7, #6]
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	d108      	bne.n	800f6d0 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800f6be:	793b      	ldrb	r3, [r7, #4]
 800f6c0:	f003 0320 	and.w	r3, r3, #32
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d004      	beq.n	800f6d4 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800f6ca:	f002 fc7d 	bl	8011fc8 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800f6ce:	e001      	b.n	800f6d4 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800f6d0:	f002 fc7a 	bl	8011fc8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800f6d4:	bf00      	nop
 800f6d6:	3708      	adds	r7, #8
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 800f6dc:	b5b0      	push	{r4, r5, r7, lr}
 800f6de:	b090      	sub	sp, #64	@ 0x40
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 800f6e6:	79fb      	ldrb	r3, [r7, #7]
 800f6e8:	f083 0301 	eor.w	r3, r3, #1
 800f6ec:	b2db      	uxtb	r3, r3
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d003      	beq.n	800f6fa <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800f6f2:	4b80      	ldr	r3, [pc, #512]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800f6fa:	4b7e      	ldr	r3, [pc, #504]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800f700:	4b7d      	ldr	r3, [pc, #500]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f702:	2200      	movs	r2, #0
 800f704:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 800f708:	4b7b      	ldr	r3, [pc, #492]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f70a:	2201      	movs	r2, #1
 800f70c:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 800f710:	4b79      	ldr	r3, [pc, #484]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f712:	2201      	movs	r2, #1
 800f714:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
    MacCtx.AckTimeoutRetry = false;
 800f718:	4b77      	ldr	r3, [pc, #476]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f71a:	2200      	movs	r2, #0
 800f71c:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 800f720:	4b74      	ldr	r3, [pc, #464]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f722:	2200      	movs	r2, #0
 800f724:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800f728:	4b72      	ldr	r3, [pc, #456]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f72a:	2201      	movs	r2, #1
 800f72c:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800f730:	4b70      	ldr	r3, [pc, #448]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f732:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 800f736:	4b6f      	ldr	r3, [pc, #444]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f738:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800f73c:	4b6d      	ldr	r3, [pc, #436]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f73e:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800f742:	4b6c      	ldr	r3, [pc, #432]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f744:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800f748:	4b6a      	ldr	r3, [pc, #424]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f74a:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 800f74e:	4b69      	ldr	r3, [pc, #420]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f750:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800f754:	4b67      	ldr	r3, [pc, #412]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f756:	4a67      	ldr	r2, [pc, #412]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f758:	336c      	adds	r3, #108	@ 0x6c
 800f75a:	32b4      	adds	r2, #180	@ 0xb4
 800f75c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f760:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800f764:	4b63      	ldr	r3, [pc, #396]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f766:	4a63      	ldr	r2, [pc, #396]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f768:	3374      	adds	r3, #116	@ 0x74
 800f76a:	32bc      	adds	r2, #188	@ 0xbc
 800f76c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f770:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800f774:	4b5f      	ldr	r3, [pc, #380]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f776:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 800f77a:	4b5e      	ldr	r3, [pc, #376]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f77c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800f780:	4b5c      	ldr	r3, [pc, #368]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f782:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 800f786:	4b5b      	ldr	r3, [pc, #364]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f788:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800f78c:	4b59      	ldr	r3, [pc, #356]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f78e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f792:	4a58      	ldr	r2, [pc, #352]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f794:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800f798:	4b56      	ldr	r3, [pc, #344]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f79a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800f79e:	4a55      	ldr	r2, [pc, #340]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f7a0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800f7a4:	4b53      	ldr	r3, [pc, #332]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f7a6:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 800f7aa:	4b52      	ldr	r3, [pc, #328]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f7ac:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800f7b0:	4b50      	ldr	r3, [pc, #320]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f7b2:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 800f7b6:	4b4f      	ldr	r3, [pc, #316]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f7b8:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 800f7bc:	4b4e      	ldr	r3, [pc, #312]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f7be:	2200      	movs	r2, #0
 800f7c0:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 800f7c4:	4b4b      	ldr	r3, [pc, #300]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800f7cc:	4b49      	ldr	r3, [pc, #292]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800f7d4:	4b47      	ldr	r3, [pc, #284]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 800f7dc:	4b45      	ldr	r3, [pc, #276]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f7de:	2200      	movs	r2, #0
 800f7e0:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800f7e4:	4b43      	ldr	r3, [pc, #268]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800f7ec:	4b41      	ldr	r3, [pc, #260]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800f7f4:	4b3f      	ldr	r3, [pc, #252]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800f7fc:	4b3d      	ldr	r3, [pc, #244]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f7fe:	2200      	movs	r2, #0
 800f800:	f883 2142 	strb.w	r2, [r3, #322]	@ 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800f804:	4b3b      	ldr	r3, [pc, #236]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f806:	2200      	movs	r2, #0
 800f808:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800f80c:	2301      	movs	r3, #1
 800f80e:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800f810:	4b3a      	ldr	r3, [pc, #232]	@ (800f8fc <ResetMacParameters+0x220>)
 800f812:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800f814:	4b3a      	ldr	r3, [pc, #232]	@ (800f900 <ResetMacParameters+0x224>)
 800f816:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800f818:	4b36      	ldr	r3, [pc, #216]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f81a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f81e:	f107 020c 	add.w	r2, r7, #12
 800f822:	4611      	mov	r1, r2
 800f824:	4618      	mov	r0, r3
 800f826:	f004 f918 	bl	8013a5a <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800f82a:	4b33      	ldr	r3, [pc, #204]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f82c:	2200      	movs	r2, #0
 800f82e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f832:	4b31      	ldr	r3, [pc, #196]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f834:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800f838:	4b2f      	ldr	r3, [pc, #188]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f83a:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f83e:	4b2d      	ldr	r3, [pc, #180]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f840:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f842:	4a2d      	ldr	r2, [pc, #180]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f844:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f848:	4b2a      	ldr	r3, [pc, #168]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f84a:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800f84e:	4b2a      	ldr	r3, [pc, #168]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f850:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f854:	4b27      	ldr	r3, [pc, #156]	@ (800f8f4 <ResetMacParameters+0x218>)
 800f856:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800f85a:	4b27      	ldr	r3, [pc, #156]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f85c:	f883 23dd 	strb.w	r2, [r3, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f860:	4b25      	ldr	r3, [pc, #148]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f862:	2200      	movs	r2, #0
 800f864:	f883 23de 	strb.w	r2, [r3, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f868:	4b23      	ldr	r3, [pc, #140]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f86a:	2201      	movs	r2, #1
 800f86c:	f883 23df 	strb.w	r2, [r3, #991]	@ 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f870:	4a21      	ldr	r2, [pc, #132]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f872:	4b21      	ldr	r3, [pc, #132]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f874:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 800f878:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 800f87c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f87e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f880:	682b      	ldr	r3, [r5, #0]
 800f882:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f884:	4b1c      	ldr	r3, [pc, #112]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f886:	2201      	movs	r2, #1
 800f888:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f88c:	4b1a      	ldr	r3, [pc, #104]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f88e:	2202      	movs	r2, #2
 800f890:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800f894:	2300      	movs	r3, #0
 800f896:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800f898:	2300      	movs	r3, #0
 800f89a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 800f89c:	4b16      	ldr	r3, [pc, #88]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f89e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d009      	beq.n	800f8ba <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800f8a6:	4b14      	ldr	r3, [pc, #80]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f8a8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800f8b0:	4b11      	ldr	r3, [pc, #68]	@ (800f8f8 <ResetMacParameters+0x21c>)
 800f8b2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f8b6:	695b      	ldr	r3, [r3, #20]
 800f8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800f8ba:	4b12      	ldr	r3, [pc, #72]	@ (800f904 <ResetMacParameters+0x228>)
 800f8bc:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800f8be:	4b12      	ldr	r3, [pc, #72]	@ (800f908 <ResetMacParameters+0x22c>)
 800f8c0:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800f8c2:	4b12      	ldr	r3, [pc, #72]	@ (800f90c <ResetMacParameters+0x230>)
 800f8c4:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800f8c6:	4b12      	ldr	r3, [pc, #72]	@ (800f910 <ResetMacParameters+0x234>)
 800f8c8:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800f8ca:	4b12      	ldr	r3, [pc, #72]	@ (800f914 <ResetMacParameters+0x238>)
 800f8cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800f8ce:	4b12      	ldr	r3, [pc, #72]	@ (800f918 <ResetMacParameters+0x23c>)
 800f8d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800f8d2:	4b12      	ldr	r3, [pc, #72]	@ (800f91c <ResetMacParameters+0x240>)
 800f8d4:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800f8d6:	4b12      	ldr	r3, [pc, #72]	@ (800f920 <ResetMacParameters+0x244>)
 800f8d8:	637b      	str	r3, [r7, #52]	@ 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800f8da:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800f8de:	f107 0318 	add.w	r3, r7, #24
 800f8e2:	4a10      	ldr	r2, [pc, #64]	@ (800f924 <ResetMacParameters+0x248>)
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f002 f897 	bl	8011a18 <LoRaMacClassBInit>
}
 800f8ea:	bf00      	nop
 800f8ec:	3740      	adds	r7, #64	@ 0x40
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bdb0      	pop	{r4, r5, r7, pc}
 800f8f2:	bf00      	nop
 800f8f4:	20000ad4 	.word	0x20000ad4
 800f8f8:	200005cc 	.word	0x200005cc
 800f8fc:	20000cf4 	.word	0x20000cf4
 800f900:	20000d98 	.word	0x20000d98
 800f904:	20000a28 	.word	0x20000a28
 800f908:	200009e4 	.word	0x200009e4
 800f90c:	20000a14 	.word	0x20000a14
 800f910:	20000a4d 	.word	0x20000a4d
 800f914:	20000bb8 	.word	0x20000bb8
 800f918:	20000b1c 	.word	0x20000b1c
 800f91c:	20000b20 	.word	0x20000b20
 800f920:	20000bbc 	.word	0x20000bbc
 800f924:	20001234 	.word	0x20001234

0800f928 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b082      	sub	sp, #8
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f00b ff86 	bl	801b844 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800f938:	4b11      	ldr	r3, [pc, #68]	@ (800f980 <RxWindowSetup+0x58>)
 800f93a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f93c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f93e:	4b11      	ldr	r3, [pc, #68]	@ (800f984 <RxWindowSetup+0x5c>)
 800f940:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f944:	4a10      	ldr	r2, [pc, #64]	@ (800f988 <RxWindowSetup+0x60>)
 800f946:	6839      	ldr	r1, [r7, #0]
 800f948:	4618      	mov	r0, r3
 800f94a:	f004 f913 	bl	8013b74 <RegionRxConfig>
 800f94e:	4603      	mov	r3, r0
 800f950:	2b00      	cmp	r3, #0
 800f952:	d010      	beq.n	800f976 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800f954:	4b0d      	ldr	r3, [pc, #52]	@ (800f98c <RxWindowSetup+0x64>)
 800f956:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800f95a:	4b0c      	ldr	r3, [pc, #48]	@ (800f98c <RxWindowSetup+0x64>)
 800f95c:	f883 245e 	strb.w	r2, [r3, #1118]	@ 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800f960:	4b07      	ldr	r3, [pc, #28]	@ (800f980 <RxWindowSetup+0x58>)
 800f962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f964:	4a07      	ldr	r2, [pc, #28]	@ (800f984 <RxWindowSetup+0x5c>)
 800f966:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800f968:	4610      	mov	r0, r2
 800f96a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	7cda      	ldrb	r2, [r3, #19]
 800f970:	4b06      	ldr	r3, [pc, #24]	@ (800f98c <RxWindowSetup+0x64>)
 800f972:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 800f976:	bf00      	nop
 800f978:	3708      	adds	r7, #8
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	0801dc9c 	.word	0x0801dc9c
 800f984:	20000ad4 	.word	0x20000ad4
 800f988:	200009e8 	.word	0x200009e8
 800f98c:	200005cc 	.word	0x200005cc

0800f990 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800f990:	b590      	push	{r4, r7, lr}
 800f992:	b083      	sub	sp, #12
 800f994:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f996:	4b1b      	ldr	r3, [pc, #108]	@ (800fa04 <OpenContinuousRxCWindow+0x74>)
 800f998:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800f99c:	4b19      	ldr	r3, [pc, #100]	@ (800fa04 <OpenContinuousRxCWindow+0x74>)
 800f99e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f9a2:	b259      	sxtb	r1, r3
 800f9a4:	4b17      	ldr	r3, [pc, #92]	@ (800fa04 <OpenContinuousRxCWindow+0x74>)
 800f9a6:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800f9aa:	4b16      	ldr	r3, [pc, #88]	@ (800fa04 <OpenContinuousRxCWindow+0x74>)
 800f9ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f9ae:	4c16      	ldr	r4, [pc, #88]	@ (800fa08 <OpenContinuousRxCWindow+0x78>)
 800f9b0:	9400      	str	r4, [sp, #0]
 800f9b2:	f004 f8bc 	bl	8013b2e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f9b6:	4b15      	ldr	r3, [pc, #84]	@ (800fa0c <OpenContinuousRxCWindow+0x7c>)
 800f9b8:	2202      	movs	r2, #2
 800f9ba:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f9be:	4b13      	ldr	r3, [pc, #76]	@ (800fa0c <OpenContinuousRxCWindow+0x7c>)
 800f9c0:	2201      	movs	r2, #1
 800f9c2:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f9c6:	4b0f      	ldr	r3, [pc, #60]	@ (800fa04 <OpenContinuousRxCWindow+0x74>)
 800f9c8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f9cc:	4a10      	ldr	r2, [pc, #64]	@ (800fa10 <OpenContinuousRxCWindow+0x80>)
 800f9ce:	490e      	ldr	r1, [pc, #56]	@ (800fa08 <OpenContinuousRxCWindow+0x78>)
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f004 f8cf 	bl	8013b74 <RegionRxConfig>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d00f      	beq.n	800f9fc <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800f9dc:	4b0b      	ldr	r3, [pc, #44]	@ (800fa0c <OpenContinuousRxCWindow+0x7c>)
 800f9de:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800f9e2:	4b0a      	ldr	r3, [pc, #40]	@ (800fa0c <OpenContinuousRxCWindow+0x7c>)
 800f9e4:	f883 245e 	strb.w	r2, [r3, #1118]	@ 0x45e
        Radio.Rx( 0 ); // Continuous mode
 800f9e8:	4b0a      	ldr	r3, [pc, #40]	@ (800fa14 <OpenContinuousRxCWindow+0x84>)
 800f9ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9ec:	2000      	movs	r0, #0
 800f9ee:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800f9f0:	4b06      	ldr	r3, [pc, #24]	@ (800fa0c <OpenContinuousRxCWindow+0x7c>)
 800f9f2:	f893 23f3 	ldrb.w	r2, [r3, #1011]	@ 0x3f3
 800f9f6:	4b05      	ldr	r3, [pc, #20]	@ (800fa0c <OpenContinuousRxCWindow+0x7c>)
 800f9f8:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 800f9fc:	bf00      	nop
 800f9fe:	3704      	adds	r7, #4
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd90      	pop	{r4, r7, pc}
 800fa04:	20000ad4 	.word	0x20000ad4
 800fa08:	200009ac 	.word	0x200009ac
 800fa0c:	200005cc 	.word	0x200005cc
 800fa10:	200009e8 	.word	0x200009e8
 800fa14:	0801dc9c 	.word	0x0801dc9c

0800fa18 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b088      	sub	sp, #32
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	60f8      	str	r0, [r7, #12]
 800fa20:	60b9      	str	r1, [r7, #8]
 800fa22:	603b      	str	r3, [r7, #0]
 800fa24:	4613      	mov	r3, r2
 800fa26:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800fa28:	4b81      	ldr	r3, [pc, #516]	@ (800fc30 <PrepareFrame+0x218>)
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800fa2e:	4b80      	ldr	r3, [pc, #512]	@ (800fc30 <PrepareFrame+0x218>)
 800fa30:	2200      	movs	r2, #0
 800fa32:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    uint32_t fCntUp = 0;
 800fa36:	2300      	movs	r3, #0
 800fa38:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d101      	bne.n	800fa4c <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800fa4c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fa4e:	461a      	mov	r2, r3
 800fa50:	6839      	ldr	r1, [r7, #0]
 800fa52:	4878      	ldr	r0, [pc, #480]	@ (800fc34 <PrepareFrame+0x21c>)
 800fa54:	f007 fe9d 	bl	8017792 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800fa58:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fa5a:	b2da      	uxtb	r2, r3
 800fa5c:	4b74      	ldr	r3, [pc, #464]	@ (800fc30 <PrepareFrame+0x218>)
 800fa5e:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	781a      	ldrb	r2, [r3, #0]
 800fa66:	4b72      	ldr	r3, [pc, #456]	@ (800fc30 <PrepareFrame+0x218>)
 800fa68:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	781b      	ldrb	r3, [r3, #0]
 800fa6e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	2b07      	cmp	r3, #7
 800fa76:	f000 80b9 	beq.w	800fbec <PrepareFrame+0x1d4>
 800fa7a:	2b07      	cmp	r3, #7
 800fa7c:	f300 80ce 	bgt.w	800fc1c <PrepareFrame+0x204>
 800fa80:	2b02      	cmp	r3, #2
 800fa82:	d006      	beq.n	800fa92 <PrepareFrame+0x7a>
 800fa84:	2b04      	cmp	r3, #4
 800fa86:	f040 80c9 	bne.w	800fc1c <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800fa8a:	4b69      	ldr	r3, [pc, #420]	@ (800fc30 <PrepareFrame+0x218>)
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800fa92:	4b67      	ldr	r3, [pc, #412]	@ (800fc30 <PrepareFrame+0x218>)
 800fa94:	2204      	movs	r2, #4
 800fa96:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800fa9a:	4b65      	ldr	r3, [pc, #404]	@ (800fc30 <PrepareFrame+0x218>)
 800fa9c:	4a66      	ldr	r2, [pc, #408]	@ (800fc38 <PrepareFrame+0x220>)
 800fa9e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800faa2:	4b63      	ldr	r3, [pc, #396]	@ (800fc30 <PrepareFrame+0x218>)
 800faa4:	22ff      	movs	r2, #255	@ 0xff
 800faa6:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	781a      	ldrb	r2, [r3, #0]
 800faae:	4b60      	ldr	r3, [pc, #384]	@ (800fc30 <PrepareFrame+0x218>)
 800fab0:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800fab4:	4a5e      	ldr	r2, [pc, #376]	@ (800fc30 <PrepareFrame+0x218>)
 800fab6:	79fb      	ldrb	r3, [r7, #7]
 800fab8:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800fabc:	4b5f      	ldr	r3, [pc, #380]	@ (800fc3c <PrepareFrame+0x224>)
 800fabe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fac2:	4a5b      	ldr	r2, [pc, #364]	@ (800fc30 <PrepareFrame+0x218>)
 800fac4:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	781a      	ldrb	r2, [r3, #0]
 800facc:	4b58      	ldr	r3, [pc, #352]	@ (800fc30 <PrepareFrame+0x218>)
 800face:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800fad2:	4b57      	ldr	r3, [pc, #348]	@ (800fc30 <PrepareFrame+0x218>)
 800fad4:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 800fad8:	4b55      	ldr	r3, [pc, #340]	@ (800fc30 <PrepareFrame+0x218>)
 800fada:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800fade:	4b54      	ldr	r3, [pc, #336]	@ (800fc30 <PrepareFrame+0x218>)
 800fae0:	4a54      	ldr	r2, [pc, #336]	@ (800fc34 <PrepareFrame+0x21c>)
 800fae2:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800fae6:	f107 0318 	add.w	r3, r7, #24
 800faea:	4618      	mov	r0, r3
 800faec:	f003 f8cc 	bl	8012c88 <LoRaMacCryptoGetFCntUp>
 800faf0:	4603      	mov	r3, r0
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d001      	beq.n	800fafa <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800faf6:	2312      	movs	r3, #18
 800faf8:	e096      	b.n	800fc28 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800fafa:	69bb      	ldr	r3, [r7, #24]
 800fafc:	b29a      	uxth	r2, r3
 800fafe:	4b4c      	ldr	r3, [pc, #304]	@ (800fc30 <PrepareFrame+0x218>)
 800fb00:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 800fb04:	4b4a      	ldr	r3, [pc, #296]	@ (800fc30 <PrepareFrame+0x218>)
 800fb06:	2200      	movs	r2, #0
 800fb08:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 800fb0c:	4b48      	ldr	r3, [pc, #288]	@ (800fc30 <PrepareFrame+0x218>)
 800fb0e:	2200      	movs	r2, #0
 800fb10:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800fb14:	69bb      	ldr	r3, [r7, #24]
 800fb16:	4a46      	ldr	r2, [pc, #280]	@ (800fc30 <PrepareFrame+0x218>)
 800fb18:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800fb1c:	f107 0314 	add.w	r3, r7, #20
 800fb20:	4618      	mov	r0, r3
 800fb22:	f002 fa7d 	bl	8012020 <LoRaMacCommandsGetSizeSerializedCmds>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d001      	beq.n	800fb30 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fb2c:	2313      	movs	r3, #19
 800fb2e:	e07b      	b.n	800fc28 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d074      	beq.n	800fc20 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800fb36:	4b41      	ldr	r3, [pc, #260]	@ (800fc3c <PrepareFrame+0x224>)
 800fb38:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fe fd75 	bl	800e62c <GetMaxAppPayloadWithoutFOptsLength>
 800fb42:	4603      	mov	r3, r0
 800fb44:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800fb46:	4b3a      	ldr	r3, [pc, #232]	@ (800fc30 <PrepareFrame+0x218>)
 800fb48:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d01d      	beq.n	800fb8c <PrepareFrame+0x174>
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	2b0f      	cmp	r3, #15
 800fb54:	d81a      	bhi.n	800fb8c <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800fb56:	f107 0314 	add.w	r3, r7, #20
 800fb5a:	4a39      	ldr	r2, [pc, #228]	@ (800fc40 <PrepareFrame+0x228>)
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	200f      	movs	r0, #15
 800fb60:	f002 fa74 	bl	801204c <LoRaMacCommandsSerializeCmds>
 800fb64:	4603      	mov	r3, r0
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d001      	beq.n	800fb6e <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fb6a:	2313      	movs	r3, #19
 800fb6c:	e05c      	b.n	800fc28 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	f003 030f 	and.w	r3, r3, #15
 800fb74:	b2d9      	uxtb	r1, r3
 800fb76:	68ba      	ldr	r2, [r7, #8]
 800fb78:	7813      	ldrb	r3, [r2, #0]
 800fb7a:	f361 0303 	bfi	r3, r1, #0, #4
 800fb7e:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	781a      	ldrb	r2, [r3, #0]
 800fb84:	4b2a      	ldr	r3, [pc, #168]	@ (800fc30 <PrepareFrame+0x218>)
 800fb86:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800fb8a:	e049      	b.n	800fc20 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800fb8c:	4b28      	ldr	r3, [pc, #160]	@ (800fc30 <PrepareFrame+0x218>)
 800fb8e:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d010      	beq.n	800fbb8 <PrepareFrame+0x1a0>
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	2b0f      	cmp	r3, #15
 800fb9a:	d90d      	bls.n	800fbb8 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800fb9c:	7ffb      	ldrb	r3, [r7, #31]
 800fb9e:	f107 0114 	add.w	r1, r7, #20
 800fba2:	4a28      	ldr	r2, [pc, #160]	@ (800fc44 <PrepareFrame+0x22c>)
 800fba4:	4618      	mov	r0, r3
 800fba6:	f002 fa51 	bl	801204c <LoRaMacCommandsSerializeCmds>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d001      	beq.n	800fbb4 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fbb0:	2313      	movs	r3, #19
 800fbb2:	e039      	b.n	800fc28 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800fbb4:	230a      	movs	r3, #10
 800fbb6:	e037      	b.n	800fc28 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800fbb8:	7ffb      	ldrb	r3, [r7, #31]
 800fbba:	f107 0114 	add.w	r1, r7, #20
 800fbbe:	4a21      	ldr	r2, [pc, #132]	@ (800fc44 <PrepareFrame+0x22c>)
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f002 fa43 	bl	801204c <LoRaMacCommandsSerializeCmds>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d001      	beq.n	800fbd0 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fbcc:	2313      	movs	r3, #19
 800fbce:	e02b      	b.n	800fc28 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800fbd0:	4b17      	ldr	r3, [pc, #92]	@ (800fc30 <PrepareFrame+0x218>)
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800fbd8:	4b15      	ldr	r3, [pc, #84]	@ (800fc30 <PrepareFrame+0x218>)
 800fbda:	4a1a      	ldr	r2, [pc, #104]	@ (800fc44 <PrepareFrame+0x22c>)
 800fbdc:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	b2da      	uxtb	r2, r3
 800fbe4:	4b12      	ldr	r3, [pc, #72]	@ (800fc30 <PrepareFrame+0x218>)
 800fbe6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 800fbea:	e019      	b.n	800fc20 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d018      	beq.n	800fc24 <PrepareFrame+0x20c>
 800fbf2:	4b0f      	ldr	r3, [pc, #60]	@ (800fc30 <PrepareFrame+0x218>)
 800fbf4:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d013      	beq.n	800fc24 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800fbfc:	4812      	ldr	r0, [pc, #72]	@ (800fc48 <PrepareFrame+0x230>)
 800fbfe:	4b0c      	ldr	r3, [pc, #48]	@ (800fc30 <PrepareFrame+0x218>)
 800fc00:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fc04:	461a      	mov	r2, r3
 800fc06:	6839      	ldr	r1, [r7, #0]
 800fc08:	f007 fdc3 	bl	8017792 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800fc0c:	4b08      	ldr	r3, [pc, #32]	@ (800fc30 <PrepareFrame+0x218>)
 800fc0e:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fc12:	3301      	adds	r3, #1
 800fc14:	b29a      	uxth	r2, r3
 800fc16:	4b06      	ldr	r3, [pc, #24]	@ (800fc30 <PrepareFrame+0x218>)
 800fc18:	801a      	strh	r2, [r3, #0]
            }
            break;
 800fc1a:	e003      	b.n	800fc24 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fc1c:	2302      	movs	r3, #2
 800fc1e:	e003      	b.n	800fc28 <PrepareFrame+0x210>
            break;
 800fc20:	bf00      	nop
 800fc22:	e000      	b.n	800fc26 <PrepareFrame+0x20e>
            break;
 800fc24:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800fc26:	2300      	movs	r3, #0
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3720      	adds	r7, #32
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	200005cc 	.word	0x200005cc
 800fc34:	20000704 	.word	0x20000704
 800fc38:	200005ce 	.word	0x200005ce
 800fc3c:	20000ad4 	.word	0x20000ad4
 800fc40:	200006e4 	.word	0x200006e4
 800fc44:	20000a54 	.word	0x20000a54
 800fc48:	200005cf 	.word	0x200005cf

0800fc4c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b08a      	sub	sp, #40	@ 0x28
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	4603      	mov	r3, r0
 800fc54:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fc56:	2303      	movs	r3, #3
 800fc58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 800fc60:	79fb      	ldrb	r3, [r7, #7]
 800fc62:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fc64:	4b48      	ldr	r3, [pc, #288]	@ (800fd88 <SendFrameOnChannel+0x13c>)
 800fc66:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fc6a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fc6c:	4b46      	ldr	r3, [pc, #280]	@ (800fd88 <SendFrameOnChannel+0x13c>)
 800fc6e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800fc72:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800fc74:	4b44      	ldr	r3, [pc, #272]	@ (800fd88 <SendFrameOnChannel+0x13c>)
 800fc76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc7a:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800fc7c:	4b42      	ldr	r3, [pc, #264]	@ (800fd88 <SendFrameOnChannel+0x13c>)
 800fc7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fc82:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800fc84:	4b41      	ldr	r3, [pc, #260]	@ (800fd8c <SendFrameOnChannel+0x140>)
 800fc86:	881b      	ldrh	r3, [r3, #0]
 800fc88:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800fc8a:	4b3f      	ldr	r3, [pc, #252]	@ (800fd88 <SendFrameOnChannel+0x13c>)
 800fc8c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800fc90:	f107 020f 	add.w	r2, r7, #15
 800fc94:	f107 0110 	add.w	r1, r7, #16
 800fc98:	4b3d      	ldr	r3, [pc, #244]	@ (800fd90 <SendFrameOnChannel+0x144>)
 800fc9a:	f003 ff89 	bl	8013bb0 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fc9e:	4b3b      	ldr	r3, [pc, #236]	@ (800fd8c <SendFrameOnChannel+0x140>)
 800fca0:	2201      	movs	r2, #1
 800fca2:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fca6:	4b38      	ldr	r3, [pc, #224]	@ (800fd88 <SendFrameOnChannel+0x13c>)
 800fca8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fcac:	b2da      	uxtb	r2, r3
 800fcae:	4b37      	ldr	r3, [pc, #220]	@ (800fd8c <SendFrameOnChannel+0x140>)
 800fcb0:	f883 2436 	strb.w	r2, [r3, #1078]	@ 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 800fcb4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800fcb8:	4b34      	ldr	r3, [pc, #208]	@ (800fd8c <SendFrameOnChannel+0x140>)
 800fcba:	f883 2437 	strb.w	r2, [r3, #1079]	@ 0x437
    MacCtx.McpsConfirm.Channel = channel;
 800fcbe:	79fb      	ldrb	r3, [r7, #7]
 800fcc0:	4a32      	ldr	r2, [pc, #200]	@ (800fd8c <SendFrameOnChannel+0x140>)
 800fcc2:	f8c2 3444 	str.w	r3, [r2, #1092]	@ 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800fcc6:	4b31      	ldr	r3, [pc, #196]	@ (800fd8c <SendFrameOnChannel+0x140>)
 800fcc8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800fccc:	4a2f      	ldr	r2, [pc, #188]	@ (800fd8c <SendFrameOnChannel+0x140>)
 800fcce:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800fcd2:	4b2e      	ldr	r3, [pc, #184]	@ (800fd8c <SendFrameOnChannel+0x140>)
 800fcd4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800fcd8:	4a2c      	ldr	r2, [pc, #176]	@ (800fd8c <SendFrameOnChannel+0x140>)
 800fcda:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800fcde:	f001 ff07 	bl	8011af0 <LoRaMacClassBIsBeaconModeActive>
 800fce2:	4603      	mov	r3, r0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d00b      	beq.n	800fd00 <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800fce8:	4b28      	ldr	r3, [pc, #160]	@ (800fd8c <SendFrameOnChannel+0x140>)
 800fcea:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f001 ff69 	bl	8011bc6 <LoRaMacClassBIsUplinkCollision>
 800fcf4:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 800fcf6:	6a3b      	ldr	r3, [r7, #32]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d001      	beq.n	800fd00 <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800fcfc:	2310      	movs	r3, #16
 800fcfe:	e03e      	b.n	800fd7e <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fd00:	4b21      	ldr	r3, [pc, #132]	@ (800fd88 <SendFrameOnChannel+0x13c>)
 800fd02:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d101      	bne.n	800fd0e <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800fd0a:	f001 ff66 	bl	8011bda <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800fd0e:	f001 ff00 	bl	8011b12 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800fd12:	4b1d      	ldr	r3, [pc, #116]	@ (800fd88 <SendFrameOnChannel+0x13c>)
 800fd14:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fd18:	b2db      	uxtb	r3, r3
 800fd1a:	4a1c      	ldr	r2, [pc, #112]	@ (800fd8c <SendFrameOnChannel+0x140>)
 800fd1c:	f892 2411 	ldrb.w	r2, [r2, #1041]	@ 0x411
 800fd20:	4611      	mov	r1, r2
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7ff fc44 	bl	800f5b0 <SecureFrame>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 800fd2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d002      	beq.n	800fd3c <SendFrameOnChannel+0xf0>
    {
        return status;
 800fd36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd3a:	e020      	b.n	800fd7e <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800fd3c:	4b13      	ldr	r3, [pc, #76]	@ (800fd8c <SendFrameOnChannel+0x140>)
 800fd3e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fd42:	f043 0302 	orr.w	r3, r3, #2
 800fd46:	4a11      	ldr	r2, [pc, #68]	@ (800fd8c <SendFrameOnChannel+0x140>)
 800fd48:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800fd4c:	4b0f      	ldr	r3, [pc, #60]	@ (800fd8c <SendFrameOnChannel+0x140>)
 800fd4e:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800fd52:	f083 0301 	eor.w	r3, r3, #1
 800fd56:	b2db      	uxtb	r3, r3
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d007      	beq.n	800fd6c <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 800fd5c:	4b0b      	ldr	r3, [pc, #44]	@ (800fd8c <SendFrameOnChannel+0x140>)
 800fd5e:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 800fd62:	3301      	adds	r3, #1
 800fd64:	b2da      	uxtb	r2, r3
 800fd66:	4b09      	ldr	r3, [pc, #36]	@ (800fd8c <SendFrameOnChannel+0x140>)
 800fd68:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800fd6c:	4b09      	ldr	r3, [pc, #36]	@ (800fd94 <SendFrameOnChannel+0x148>)
 800fd6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd70:	4a06      	ldr	r2, [pc, #24]	@ (800fd8c <SendFrameOnChannel+0x140>)
 800fd72:	8812      	ldrh	r2, [r2, #0]
 800fd74:	b2d2      	uxtb	r2, r2
 800fd76:	4611      	mov	r1, r2
 800fd78:	4807      	ldr	r0, [pc, #28]	@ (800fd98 <SendFrameOnChannel+0x14c>)
 800fd7a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800fd7c:	2300      	movs	r3, #0
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3728      	adds	r7, #40	@ 0x28
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
 800fd86:	bf00      	nop
 800fd88:	20000ad4 	.word	0x20000ad4
 800fd8c:	200005cc 	.word	0x200005cc
 800fd90:	200009e0 	.word	0x200009e0
 800fd94:	0801dc9c 	.word	0x0801dc9c
 800fd98:	200005ce 	.word	0x200005ce

0800fd9c <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b086      	sub	sp, #24
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	4603      	mov	r3, r0
 800fda4:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 800fda6:	4b16      	ldr	r3, [pc, #88]	@ (800fe00 <SetTxContinuousWave+0x64>)
 800fda8:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 800fdac:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fdae:	4b15      	ldr	r3, [pc, #84]	@ (800fe04 <SetTxContinuousWave+0x68>)
 800fdb0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fdb4:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fdb6:	4b13      	ldr	r3, [pc, #76]	@ (800fe04 <SetTxContinuousWave+0x68>)
 800fdb8:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800fdbc:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800fdbe:	4b11      	ldr	r3, [pc, #68]	@ (800fe04 <SetTxContinuousWave+0x68>)
 800fdc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fdc4:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800fdc6:	4b0f      	ldr	r3, [pc, #60]	@ (800fe04 <SetTxContinuousWave+0x68>)
 800fdc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fdcc:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 800fdce:	88fb      	ldrh	r3, [r7, #6]
 800fdd0:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800fdd2:	4b0c      	ldr	r3, [pc, #48]	@ (800fe04 <SetTxContinuousWave+0x68>)
 800fdd4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fdd8:	f107 0208 	add.w	r2, r7, #8
 800fddc:	4611      	mov	r1, r2
 800fdde:	4618      	mov	r0, r3
 800fde0:	f003 ffe3 	bl	8013daa <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800fde4:	4b06      	ldr	r3, [pc, #24]	@ (800fe00 <SetTxContinuousWave+0x64>)
 800fde6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fdea:	f043 0302 	orr.w	r3, r3, #2
 800fdee:	4a04      	ldr	r2, [pc, #16]	@ (800fe00 <SetTxContinuousWave+0x64>)
 800fdf0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 800fdf4:	2300      	movs	r3, #0
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	3718      	adds	r7, #24
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}
 800fdfe:	bf00      	nop
 800fe00:	200005cc 	.word	0x200005cc
 800fe04:	20000ad4 	.word	0x20000ad4

0800fe08 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	4603      	mov	r3, r0
 800fe10:	6039      	str	r1, [r7, #0]
 800fe12:	80fb      	strh	r3, [r7, #6]
 800fe14:	4613      	mov	r3, r2
 800fe16:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800fe18:	4b09      	ldr	r3, [pc, #36]	@ (800fe40 <SetTxContinuousWave1+0x38>)
 800fe1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe1c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800fe20:	88fa      	ldrh	r2, [r7, #6]
 800fe22:	6838      	ldr	r0, [r7, #0]
 800fe24:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800fe26:	4b07      	ldr	r3, [pc, #28]	@ (800fe44 <SetTxContinuousWave1+0x3c>)
 800fe28:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fe2c:	f043 0302 	orr.w	r3, r3, #2
 800fe30:	4a04      	ldr	r2, [pc, #16]	@ (800fe44 <SetTxContinuousWave1+0x3c>)
 800fe32:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 800fe36:	2300      	movs	r3, #0
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3708      	adds	r7, #8
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	0801dc9c 	.word	0x0801dc9c
 800fe44:	200005cc 	.word	0x200005cc

0800fe48 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 800fe48:	b480      	push	{r7}
 800fe4a:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 800fe4c:	2300      	movs	r3, #0
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bc80      	pop	{r7}
 800fe54:	4770      	bx	lr

0800fe56 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800fe56:	b480      	push	{r7}
 800fe58:	b083      	sub	sp, #12
 800fe5a:	af00      	add	r7, sp, #0
 800fe5c:	6078      	str	r0, [r7, #4]
 800fe5e:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d002      	beq.n	800fe6c <DetermineFrameType+0x16>
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d101      	bne.n	800fe70 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fe6c:	2303      	movs	r3, #3
 800fe6e:	e03b      	b.n	800fee8 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	7b1b      	ldrb	r3, [r3, #12]
 800fe74:	f003 030f 	and.w	r3, r3, #15
 800fe78:	b2db      	uxtb	r3, r3
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d008      	beq.n	800fe90 <DetermineFrameType+0x3a>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d003      	beq.n	800fe90 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	701a      	strb	r2, [r3, #0]
 800fe8e:	e02a      	b.n	800fee6 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d103      	bne.n	800fea2 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	2201      	movs	r2, #1
 800fe9e:	701a      	strb	r2, [r3, #0]
 800fea0:	e021      	b.n	800fee6 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	7b1b      	ldrb	r3, [r3, #12]
 800fea6:	f003 030f 	and.w	r3, r3, #15
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	2b00      	cmp	r3, #0
 800feae:	d108      	bne.n	800fec2 <DetermineFrameType+0x6c>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d103      	bne.n	800fec2 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	2202      	movs	r2, #2
 800febe:	701a      	strb	r2, [r3, #0]
 800fec0:	e011      	b.n	800fee6 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	7b1b      	ldrb	r3, [r3, #12]
 800fec6:	f003 030f 	and.w	r3, r3, #15
 800feca:	b2db      	uxtb	r3, r3
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d108      	bne.n	800fee2 <DetermineFrameType+0x8c>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d003      	beq.n	800fee2 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	2203      	movs	r2, #3
 800fede:	701a      	strb	r2, [r3, #0]
 800fee0:	e001      	b.n	800fee6 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800fee2:	2318      	movs	r3, #24
 800fee4:	e000      	b.n	800fee8 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800fee6:	2300      	movs	r3, #0
}
 800fee8:	4618      	mov	r0, r3
 800feea:	370c      	adds	r7, #12
 800feec:	46bd      	mov	sp, r7
 800feee:	bc80      	pop	{r7}
 800fef0:	4770      	bx	lr
	...

0800fef4 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 800fef4:	b480      	push	{r7}
 800fef6:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 800fef8:	4b12      	ldr	r3, [pc, #72]	@ (800ff44 <CheckRetransUnconfirmedUplink+0x50>)
 800fefa:	f893 240c 	ldrb.w	r2, [r3, #1036]	@ 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800fefe:	4b12      	ldr	r3, [pc, #72]	@ (800ff48 <CheckRetransUnconfirmedUplink+0x54>)
 800ff00:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d301      	bcc.n	800ff0c <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 800ff08:	2301      	movs	r3, #1
 800ff0a:	e016      	b.n	800ff3a <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ff0c:	4b0d      	ldr	r3, [pc, #52]	@ (800ff44 <CheckRetransUnconfirmedUplink+0x50>)
 800ff0e:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800ff12:	f003 0302 	and.w	r3, r3, #2
 800ff16:	b2db      	uxtb	r3, r3
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d00d      	beq.n	800ff38 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800ff1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ff48 <CheckRetransUnconfirmedUplink+0x54>)
 800ff1e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d101      	bne.n	800ff2a <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 800ff26:	2301      	movs	r3, #1
 800ff28:	e007      	b.n	800ff3a <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800ff2a:	4b06      	ldr	r3, [pc, #24]	@ (800ff44 <CheckRetransUnconfirmedUplink+0x50>)
 800ff2c:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d101      	bne.n	800ff38 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 800ff34:	2301      	movs	r3, #1
 800ff36:	e000      	b.n	800ff3a <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 800ff38:	2300      	movs	r3, #0
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bc80      	pop	{r7}
 800ff40:	4770      	bx	lr
 800ff42:	bf00      	nop
 800ff44:	200005cc 	.word	0x200005cc
 800ff48:	20000ad4 	.word	0x20000ad4

0800ff4c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 800ff50:	4b0e      	ldr	r3, [pc, #56]	@ (800ff8c <CheckRetransConfirmedUplink+0x40>)
 800ff52:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
        MacCtx.AckTimeoutRetries )
 800ff56:	4b0d      	ldr	r3, [pc, #52]	@ (800ff8c <CheckRetransConfirmedUplink+0x40>)
 800ff58:	f893 340d 	ldrb.w	r3, [r3, #1037]	@ 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	d301      	bcc.n	800ff64 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 800ff60:	2301      	movs	r3, #1
 800ff62:	e00f      	b.n	800ff84 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ff64:	4b09      	ldr	r3, [pc, #36]	@ (800ff8c <CheckRetransConfirmedUplink+0x40>)
 800ff66:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800ff6a:	f003 0302 	and.w	r3, r3, #2
 800ff6e:	b2db      	uxtb	r3, r3
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d006      	beq.n	800ff82 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800ff74:	4b05      	ldr	r3, [pc, #20]	@ (800ff8c <CheckRetransConfirmedUplink+0x40>)
 800ff76:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d001      	beq.n	800ff82 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 800ff7e:	2301      	movs	r3, #1
 800ff80:	e000      	b.n	800ff84 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 800ff82:	2300      	movs	r3, #0
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bc80      	pop	{r7}
 800ff8a:	4770      	bx	lr
 800ff8c:	200005cc 	.word	0x200005cc

0800ff90 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800ff90:	b480      	push	{r7}
 800ff92:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800ff94:	4b1a      	ldr	r3, [pc, #104]	@ (8010000 <StopRetransmission+0x70>)
 800ff96:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800ff9a:	f003 0302 	and.w	r3, r3, #2
 800ff9e:	b2db      	uxtb	r3, r3
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d009      	beq.n	800ffb8 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ffa4:	4b16      	ldr	r3, [pc, #88]	@ (8010000 <StopRetransmission+0x70>)
 800ffa6:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d00e      	beq.n	800ffcc <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 800ffae:	4b14      	ldr	r3, [pc, #80]	@ (8010000 <StopRetransmission+0x70>)
 800ffb0:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d009      	beq.n	800ffcc <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800ffb8:	4b12      	ldr	r3, [pc, #72]	@ (8010004 <StopRetransmission+0x74>)
 800ffba:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d004      	beq.n	800ffcc <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 800ffc2:	4b10      	ldr	r3, [pc, #64]	@ (8010004 <StopRetransmission+0x74>)
 800ffc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	4a0e      	ldr	r2, [pc, #56]	@ (8010004 <StopRetransmission+0x74>)
 800ffca:	6293      	str	r3, [r2, #40]	@ 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800ffcc:	4b0c      	ldr	r3, [pc, #48]	@ (8010000 <StopRetransmission+0x70>)
 800ffce:	2200      	movs	r2, #0
 800ffd0:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
    MacCtx.NodeAckRequested = false;
 800ffd4:	4b0a      	ldr	r3, [pc, #40]	@ (8010000 <StopRetransmission+0x70>)
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 800ffdc:	4b08      	ldr	r3, [pc, #32]	@ (8010000 <StopRetransmission+0x70>)
 800ffde:	2200      	movs	r2, #0
 800ffe0:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ffe4:	4b06      	ldr	r3, [pc, #24]	@ (8010000 <StopRetransmission+0x70>)
 800ffe6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ffea:	f023 0302 	bic.w	r3, r3, #2
 800ffee:	4a04      	ldr	r2, [pc, #16]	@ (8010000 <StopRetransmission+0x70>)
 800fff0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 800fff4:	2301      	movs	r3, #1
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bc80      	pop	{r7}
 800fffc:	4770      	bx	lr
 800fffe:	bf00      	nop
 8010000:	200005cc 	.word	0x200005cc
 8010004:	20000ad4 	.word	0x20000ad4

08010008 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8010008:	b580      	push	{r7, lr}
 801000a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 801000c:	4b08      	ldr	r3, [pc, #32]	@ (8010030 <OnMacProcessNotify+0x28>)
 801000e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010012:	2b00      	cmp	r3, #0
 8010014:	d00a      	beq.n	801002c <OnMacProcessNotify+0x24>
 8010016:	4b06      	ldr	r3, [pc, #24]	@ (8010030 <OnMacProcessNotify+0x28>)
 8010018:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801001c:	695b      	ldr	r3, [r3, #20]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d004      	beq.n	801002c <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010022:	4b03      	ldr	r3, [pc, #12]	@ (8010030 <OnMacProcessNotify+0x28>)
 8010024:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010028:	695b      	ldr	r3, [r3, #20]
 801002a:	4798      	blx	r3
    }
}
 801002c:	bf00      	nop
 801002e:	bd80      	pop	{r7, pc}
 8010030:	200005cc 	.word	0x200005cc

08010034 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
 801003a:	4603      	mov	r3, r0
 801003c:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 801003e:	4b0b      	ldr	r3, [pc, #44]	@ (801006c <CallNvmDataChangeCallback+0x38>)
 8010040:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010044:	2b00      	cmp	r3, #0
 8010046:	d00c      	beq.n	8010062 <CallNvmDataChangeCallback+0x2e>
 8010048:	4b08      	ldr	r3, [pc, #32]	@ (801006c <CallNvmDataChangeCallback+0x38>)
 801004a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801004e:	691b      	ldr	r3, [r3, #16]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d006      	beq.n	8010062 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010054:	4b05      	ldr	r3, [pc, #20]	@ (801006c <CallNvmDataChangeCallback+0x38>)
 8010056:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801005a:	691b      	ldr	r3, [r3, #16]
 801005c:	88fa      	ldrh	r2, [r7, #6]
 801005e:	4610      	mov	r0, r2
 8010060:	4798      	blx	r3
    }
}
 8010062:	bf00      	nop
 8010064:	3708      	adds	r7, #8
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	200005cc 	.word	0x200005cc

08010070 <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8010076:	4b1b      	ldr	r3, [pc, #108]	@ (80100e4 <AckTimeoutRetriesProcess+0x74>)
 8010078:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 801007c:	4b19      	ldr	r3, [pc, #100]	@ (80100e4 <AckTimeoutRetriesProcess+0x74>)
 801007e:	f893 340d 	ldrb.w	r3, [r3, #1037]	@ 0x40d
 8010082:	429a      	cmp	r2, r3
 8010084:	d229      	bcs.n	80100da <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8010086:	4b17      	ldr	r3, [pc, #92]	@ (80100e4 <AckTimeoutRetriesProcess+0x74>)
 8010088:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 801008c:	3301      	adds	r3, #1
 801008e:	b2da      	uxtb	r2, r3
 8010090:	4b14      	ldr	r3, [pc, #80]	@ (80100e4 <AckTimeoutRetriesProcess+0x74>)
 8010092:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8010096:	4b13      	ldr	r3, [pc, #76]	@ (80100e4 <AckTimeoutRetriesProcess+0x74>)
 8010098:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 801009c:	f003 0301 	and.w	r3, r3, #1
 80100a0:	b2db      	uxtb	r3, r3
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d019      	beq.n	80100da <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80100a6:	2322      	movs	r3, #34	@ 0x22
 80100a8:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80100aa:	4b0f      	ldr	r3, [pc, #60]	@ (80100e8 <AckTimeoutRetriesProcess+0x78>)
 80100ac:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80100b0:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80100b2:	4b0d      	ldr	r3, [pc, #52]	@ (80100e8 <AckTimeoutRetriesProcess+0x78>)
 80100b4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80100b8:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80100ba:	4b0b      	ldr	r3, [pc, #44]	@ (80100e8 <AckTimeoutRetriesProcess+0x78>)
 80100bc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80100c0:	f107 0208 	add.w	r2, r7, #8
 80100c4:	4611      	mov	r1, r2
 80100c6:	4618      	mov	r0, r3
 80100c8:	f003 fc90 	bl	80139ec <RegionGetPhyParam>
 80100cc:	4603      	mov	r3, r0
 80100ce:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	b25a      	sxtb	r2, r3
 80100d4:	4b04      	ldr	r3, [pc, #16]	@ (80100e8 <AckTimeoutRetriesProcess+0x78>)
 80100d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
    }
}
 80100da:	bf00      	nop
 80100dc:	3710      	adds	r7, #16
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}
 80100e2:	bf00      	nop
 80100e4:	200005cc 	.word	0x200005cc
 80100e8:	20000ad4 	.word	0x20000ad4

080100ec <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 80100f2:	4b14      	ldr	r3, [pc, #80]	@ (8010144 <AckTimeoutRetriesFinalize+0x58>)
 80100f4:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 80100f8:	f083 0301 	eor.w	r3, r3, #1
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d015      	beq.n	801012e <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8010102:	2302      	movs	r3, #2
 8010104:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8010106:	4b10      	ldr	r3, [pc, #64]	@ (8010148 <AckTimeoutRetriesFinalize+0x5c>)
 8010108:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 801010a:	4b10      	ldr	r3, [pc, #64]	@ (801014c <AckTimeoutRetriesFinalize+0x60>)
 801010c:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801010e:	4b10      	ldr	r3, [pc, #64]	@ (8010150 <AckTimeoutRetriesFinalize+0x64>)
 8010110:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010114:	1d3a      	adds	r2, r7, #4
 8010116:	4611      	mov	r1, r2
 8010118:	4618      	mov	r0, r3
 801011a:	f003 fc9e 	bl	8013a5a <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 801011e:	4b09      	ldr	r3, [pc, #36]	@ (8010144 <AckTimeoutRetriesFinalize+0x58>)
 8010120:	2200      	movs	r2, #0
 8010122:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 8010126:	4b07      	ldr	r3, [pc, #28]	@ (8010144 <AckTimeoutRetriesFinalize+0x58>)
 8010128:	2200      	movs	r2, #0
 801012a:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 801012e:	4b05      	ldr	r3, [pc, #20]	@ (8010144 <AckTimeoutRetriesFinalize+0x58>)
 8010130:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 8010134:	4b03      	ldr	r3, [pc, #12]	@ (8010144 <AckTimeoutRetriesFinalize+0x58>)
 8010136:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
}
 801013a:	bf00      	nop
 801013c:	3710      	adds	r7, #16
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	200005cc 	.word	0x200005cc
 8010148:	20000cf4 	.word	0x20000cf4
 801014c:	20000d98 	.word	0x20000d98
 8010150:	20000ad4 	.word	0x20000ad4

08010154 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8010154:	b480      	push	{r7}
 8010156:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010158:	4b0b      	ldr	r3, [pc, #44]	@ (8010188 <IsRequestPending+0x34>)
 801015a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 801015e:	f003 0304 	and.w	r3, r3, #4
 8010162:	b2db      	uxtb	r3, r3
 8010164:	2b00      	cmp	r3, #0
 8010166:	d107      	bne.n	8010178 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010168:	4b07      	ldr	r3, [pc, #28]	@ (8010188 <IsRequestPending+0x34>)
 801016a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 801016e:	f003 0301 	and.w	r3, r3, #1
 8010172:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010174:	2b00      	cmp	r3, #0
 8010176:	d001      	beq.n	801017c <IsRequestPending+0x28>
    {
        return 1;
 8010178:	2301      	movs	r3, #1
 801017a:	e000      	b.n	801017e <IsRequestPending+0x2a>
    }
    return 0;
 801017c:	2300      	movs	r3, #0
}
 801017e:	4618      	mov	r0, r3
 8010180:	46bd      	mov	sp, r7
 8010182:	bc80      	pop	{r7}
 8010184:	4770      	bx	lr
 8010186:	bf00      	nop
 8010188:	200005cc 	.word	0x200005cc

0801018c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 801018c:	b590      	push	{r4, r7, lr}
 801018e:	b08f      	sub	sp, #60	@ 0x3c
 8010190:	af02      	add	r7, sp, #8
 8010192:	6178      	str	r0, [r7, #20]
 8010194:	6139      	str	r1, [r7, #16]
 8010196:	4613      	mov	r3, r2
 8010198:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d002      	beq.n	80101a6 <LoRaMacInitialization+0x1a>
 80101a0:	693b      	ldr	r3, [r7, #16]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d101      	bne.n	80101aa <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80101a6:	2303      	movs	r3, #3
 80101a8:	e273      	b.n	8010692 <LoRaMacInitialization+0x506>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d00b      	beq.n	80101ca <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d007      	beq.n	80101ca <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d003      	beq.n	80101ca <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d101      	bne.n	80101ce <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80101ca:	2303      	movs	r3, #3
 80101cc:	e261      	b.n	8010692 <LoRaMacInitialization+0x506>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80101ce:	7bfb      	ldrb	r3, [r7, #15]
 80101d0:	4618      	mov	r0, r3
 80101d2:	f003 fbf6 	bl	80139c2 <RegionIsActive>
 80101d6:	4603      	mov	r3, r0
 80101d8:	f083 0301 	eor.w	r3, r3, #1
 80101dc:	b2db      	uxtb	r3, r3
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d001      	beq.n	80101e6 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80101e2:	2309      	movs	r3, #9
 80101e4:	e255      	b.n	8010692 <LoRaMacInitialization+0x506>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80101e6:	6978      	ldr	r0, [r7, #20]
 80101e8:	f002 f852 	bl	8012290 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80101ec:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 80101f0:	2100      	movs	r1, #0
 80101f2:	48c7      	ldr	r0, [pc, #796]	@ (8010510 <LoRaMacInitialization+0x384>)
 80101f4:	f007 fb08 	bl	8017808 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80101f8:	f44f 62a1 	mov.w	r2, #1288	@ 0x508
 80101fc:	2100      	movs	r1, #0
 80101fe:	48c5      	ldr	r0, [pc, #788]	@ (8010514 <LoRaMacInitialization+0x388>)
 8010200:	f007 fb02 	bl	8017808 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010204:	4bc3      	ldr	r3, [pc, #780]	@ (8010514 <LoRaMacInitialization+0x388>)
 8010206:	2201      	movs	r2, #1
 8010208:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
    MacCtx.AckTimeoutRetries = 1;
 801020c:	4bc1      	ldr	r3, [pc, #772]	@ (8010514 <LoRaMacInitialization+0x388>)
 801020e:	2201      	movs	r2, #1
 8010210:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8010214:	4abe      	ldr	r2, [pc, #760]	@ (8010510 <LoRaMacInitialization+0x384>)
 8010216:	7bfb      	ldrb	r3, [r7, #15]
 8010218:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 801021c:	4bbc      	ldr	r3, [pc, #752]	@ (8010510 <LoRaMacInitialization+0x384>)
 801021e:	2200      	movs	r2, #0
 8010220:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8010224:	4bba      	ldr	r3, [pc, #744]	@ (8010510 <LoRaMacInitialization+0x384>)
 8010226:	2200      	movs	r2, #0
 8010228:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 801022c:	4bb8      	ldr	r3, [pc, #736]	@ (8010510 <LoRaMacInitialization+0x384>)
 801022e:	4aba      	ldr	r2, [pc, #744]	@ (8010518 <LoRaMacInitialization+0x38c>)
 8010230:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010234:	230f      	movs	r3, #15
 8010236:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801023a:	4bb5      	ldr	r3, [pc, #724]	@ (8010510 <LoRaMacInitialization+0x384>)
 801023c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010240:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010244:	4611      	mov	r1, r2
 8010246:	4618      	mov	r0, r3
 8010248:	f003 fbd0 	bl	80139ec <RegionGetPhyParam>
 801024c:	4603      	mov	r3, r0
 801024e:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010252:	2b00      	cmp	r3, #0
 8010254:	bf14      	ite	ne
 8010256:	2301      	movne	r3, #1
 8010258:	2300      	moveq	r3, #0
 801025a:	b2da      	uxtb	r2, r3
 801025c:	4bac      	ldr	r3, [pc, #688]	@ (8010510 <LoRaMacInitialization+0x384>)
 801025e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010262:	230a      	movs	r3, #10
 8010264:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010268:	4ba9      	ldr	r3, [pc, #676]	@ (8010510 <LoRaMacInitialization+0x384>)
 801026a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801026e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010272:	4611      	mov	r1, r2
 8010274:	4618      	mov	r0, r3
 8010276:	f003 fbb9 	bl	80139ec <RegionGetPhyParam>
 801027a:	4603      	mov	r3, r0
 801027c:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 801027e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010280:	b25a      	sxtb	r2, r3
 8010282:	4ba3      	ldr	r3, [pc, #652]	@ (8010510 <LoRaMacInitialization+0x384>)
 8010284:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010288:	2306      	movs	r3, #6
 801028a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801028e:	4ba0      	ldr	r3, [pc, #640]	@ (8010510 <LoRaMacInitialization+0x384>)
 8010290:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010294:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010298:	4611      	mov	r1, r2
 801029a:	4618      	mov	r0, r3
 801029c:	f003 fba6 	bl	80139ec <RegionGetPhyParam>
 80102a0:	4603      	mov	r3, r0
 80102a2:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80102a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102a6:	b25a      	sxtb	r2, r3
 80102a8:	4b99      	ldr	r3, [pc, #612]	@ (8010510 <LoRaMacInitialization+0x384>)
 80102aa:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80102ae:	2310      	movs	r3, #16
 80102b0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80102b4:	4b96      	ldr	r3, [pc, #600]	@ (8010510 <LoRaMacInitialization+0x384>)
 80102b6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80102ba:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80102be:	4611      	mov	r1, r2
 80102c0:	4618      	mov	r0, r3
 80102c2:	f003 fb93 	bl	80139ec <RegionGetPhyParam>
 80102c6:	4603      	mov	r3, r0
 80102c8:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80102ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102cc:	4a90      	ldr	r2, [pc, #576]	@ (8010510 <LoRaMacInitialization+0x384>)
 80102ce:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80102d2:	2311      	movs	r3, #17
 80102d4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80102d8:	4b8d      	ldr	r3, [pc, #564]	@ (8010510 <LoRaMacInitialization+0x384>)
 80102da:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80102de:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80102e2:	4611      	mov	r1, r2
 80102e4:	4618      	mov	r0, r3
 80102e6:	f003 fb81 	bl	80139ec <RegionGetPhyParam>
 80102ea:	4603      	mov	r3, r0
 80102ec:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80102ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f0:	4a87      	ldr	r2, [pc, #540]	@ (8010510 <LoRaMacInitialization+0x384>)
 80102f2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80102f6:	2312      	movs	r3, #18
 80102f8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80102fc:	4b84      	ldr	r3, [pc, #528]	@ (8010510 <LoRaMacInitialization+0x384>)
 80102fe:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010302:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010306:	4611      	mov	r1, r2
 8010308:	4618      	mov	r0, r3
 801030a:	f003 fb6f 	bl	80139ec <RegionGetPhyParam>
 801030e:	4603      	mov	r3, r0
 8010310:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010314:	4a7e      	ldr	r2, [pc, #504]	@ (8010510 <LoRaMacInitialization+0x384>)
 8010316:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801031a:	2313      	movs	r3, #19
 801031c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010320:	4b7b      	ldr	r3, [pc, #492]	@ (8010510 <LoRaMacInitialization+0x384>)
 8010322:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010326:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801032a:	4611      	mov	r1, r2
 801032c:	4618      	mov	r0, r3
 801032e:	f003 fb5d 	bl	80139ec <RegionGetPhyParam>
 8010332:	4603      	mov	r3, r0
 8010334:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010338:	4a75      	ldr	r2, [pc, #468]	@ (8010510 <LoRaMacInitialization+0x384>)
 801033a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 801033e:	2314      	movs	r3, #20
 8010340:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010344:	4b72      	ldr	r3, [pc, #456]	@ (8010510 <LoRaMacInitialization+0x384>)
 8010346:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801034a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801034e:	4611      	mov	r1, r2
 8010350:	4618      	mov	r0, r3
 8010352:	f003 fb4b 	bl	80139ec <RegionGetPhyParam>
 8010356:	4603      	mov	r3, r0
 8010358:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801035a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801035c:	4a6c      	ldr	r2, [pc, #432]	@ (8010510 <LoRaMacInitialization+0x384>)
 801035e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010362:	2317      	movs	r3, #23
 8010364:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010368:	4b69      	ldr	r3, [pc, #420]	@ (8010510 <LoRaMacInitialization+0x384>)
 801036a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801036e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010372:	4611      	mov	r1, r2
 8010374:	4618      	mov	r0, r3
 8010376:	f003 fb39 	bl	80139ec <RegionGetPhyParam>
 801037a:	4603      	mov	r3, r0
 801037c:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801037e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010380:	b2da      	uxtb	r2, r3
 8010382:	4b63      	ldr	r3, [pc, #396]	@ (8010510 <LoRaMacInitialization+0x384>)
 8010384:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010388:	2318      	movs	r3, #24
 801038a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801038e:	4b60      	ldr	r3, [pc, #384]	@ (8010510 <LoRaMacInitialization+0x384>)
 8010390:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010394:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010398:	4611      	mov	r1, r2
 801039a:	4618      	mov	r0, r3
 801039c:	f003 fb26 	bl	80139ec <RegionGetPhyParam>
 80103a0:	4603      	mov	r3, r0
 80103a2:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80103a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103a6:	4a5a      	ldr	r2, [pc, #360]	@ (8010510 <LoRaMacInitialization+0x384>)
 80103a8:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80103ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103ae:	4a58      	ldr	r2, [pc, #352]	@ (8010510 <LoRaMacInitialization+0x384>)
 80103b0:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80103b4:	2319      	movs	r3, #25
 80103b6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80103ba:	4b55      	ldr	r3, [pc, #340]	@ (8010510 <LoRaMacInitialization+0x384>)
 80103bc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80103c0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80103c4:	4611      	mov	r1, r2
 80103c6:	4618      	mov	r0, r3
 80103c8:	f003 fb10 	bl	80139ec <RegionGetPhyParam>
 80103cc:	4603      	mov	r3, r0
 80103ce:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80103d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103d2:	b2da      	uxtb	r2, r3
 80103d4:	4b4e      	ldr	r3, [pc, #312]	@ (8010510 <LoRaMacInitialization+0x384>)
 80103d6:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80103da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103dc:	b2da      	uxtb	r2, r3
 80103de:	4b4c      	ldr	r3, [pc, #304]	@ (8010510 <LoRaMacInitialization+0x384>)
 80103e0:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80103e4:	231e      	movs	r3, #30
 80103e6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80103ea:	4b49      	ldr	r3, [pc, #292]	@ (8010510 <LoRaMacInitialization+0x384>)
 80103ec:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80103f0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80103f4:	4611      	mov	r1, r2
 80103f6:	4618      	mov	r0, r3
 80103f8:	f003 faf8 	bl	80139ec <RegionGetPhyParam>
 80103fc:	4603      	mov	r3, r0
 80103fe:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010402:	b2da      	uxtb	r2, r3
 8010404:	4b42      	ldr	r3, [pc, #264]	@ (8010510 <LoRaMacInitialization+0x384>)
 8010406:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801040a:	231f      	movs	r3, #31
 801040c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010410:	4b3f      	ldr	r3, [pc, #252]	@ (8010510 <LoRaMacInitialization+0x384>)
 8010412:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010416:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801041a:	4611      	mov	r1, r2
 801041c:	4618      	mov	r0, r3
 801041e:	f003 fae5 	bl	80139ec <RegionGetPhyParam>
 8010422:	4603      	mov	r3, r0
 8010424:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010428:	b2da      	uxtb	r2, r3
 801042a:	4b39      	ldr	r3, [pc, #228]	@ (8010510 <LoRaMacInitialization+0x384>)
 801042c:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010430:	2320      	movs	r3, #32
 8010432:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010436:	4b36      	ldr	r3, [pc, #216]	@ (8010510 <LoRaMacInitialization+0x384>)
 8010438:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801043c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010440:	4611      	mov	r1, r2
 8010442:	4618      	mov	r0, r3
 8010444:	f003 fad2 	bl	80139ec <RegionGetPhyParam>
 8010448:	4603      	mov	r3, r0
 801044a:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 801044c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801044e:	4a30      	ldr	r2, [pc, #192]	@ (8010510 <LoRaMacInitialization+0x384>)
 8010450:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010454:	2321      	movs	r3, #33	@ 0x21
 8010456:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801045a:	4b2d      	ldr	r3, [pc, #180]	@ (8010510 <LoRaMacInitialization+0x384>)
 801045c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010460:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010464:	4611      	mov	r1, r2
 8010466:	4618      	mov	r0, r3
 8010468:	f003 fac0 	bl	80139ec <RegionGetPhyParam>
 801046c:	4603      	mov	r3, r0
 801046e:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010472:	4a27      	ldr	r2, [pc, #156]	@ (8010510 <LoRaMacInitialization+0x384>)
 8010474:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010478:	230b      	movs	r3, #11
 801047a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801047e:	4b24      	ldr	r3, [pc, #144]	@ (8010510 <LoRaMacInitialization+0x384>)
 8010480:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010484:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010488:	4611      	mov	r1, r2
 801048a:	4618      	mov	r0, r3
 801048c:	f003 faae 	bl	80139ec <RegionGetPhyParam>
 8010490:	4603      	mov	r3, r0
 8010492:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8010494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010496:	b29a      	uxth	r2, r3
 8010498:	4b1d      	ldr	r3, [pc, #116]	@ (8010510 <LoRaMacInitialization+0x384>)
 801049a:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 801049e:	230c      	movs	r3, #12
 80104a0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80104a4:	4b1a      	ldr	r3, [pc, #104]	@ (8010510 <LoRaMacInitialization+0x384>)
 80104a6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80104aa:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80104ae:	4611      	mov	r1, r2
 80104b0:	4618      	mov	r0, r3
 80104b2:	f003 fa9b 	bl	80139ec <RegionGetPhyParam>
 80104b6:	4603      	mov	r3, r0
 80104b8:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 80104ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104bc:	b29a      	uxth	r2, r3
 80104be:	4b14      	ldr	r3, [pc, #80]	@ (8010510 <LoRaMacInitialization+0x384>)
 80104c0:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80104c4:	4b12      	ldr	r3, [pc, #72]	@ (8010510 <LoRaMacInitialization+0x384>)
 80104c6:	2201      	movs	r2, #1
 80104c8:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80104cc:	4b10      	ldr	r3, [pc, #64]	@ (8010510 <LoRaMacInitialization+0x384>)
 80104ce:	220a      	movs	r2, #10
 80104d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80104d4:	4b0e      	ldr	r3, [pc, #56]	@ (8010510 <LoRaMacInitialization+0x384>)
 80104d6:	2206      	movs	r2, #6
 80104d8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80104dc:	4b0c      	ldr	r3, [pc, #48]	@ (8010510 <LoRaMacInitialization+0x384>)
 80104de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80104e2:	4a0b      	ldr	r2, [pc, #44]	@ (8010510 <LoRaMacInitialization+0x384>)
 80104e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80104e6:	4b0a      	ldr	r3, [pc, #40]	@ (8010510 <LoRaMacInitialization+0x384>)
 80104e8:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 80104ec:	4b08      	ldr	r3, [pc, #32]	@ (8010510 <LoRaMacInitialization+0x384>)
 80104ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80104f2:	4b07      	ldr	r3, [pc, #28]	@ (8010510 <LoRaMacInitialization+0x384>)
 80104f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80104f8:	4a05      	ldr	r2, [pc, #20]	@ (8010510 <LoRaMacInitialization+0x384>)
 80104fa:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80104fc:	4b04      	ldr	r3, [pc, #16]	@ (8010510 <LoRaMacInitialization+0x384>)
 80104fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010502:	4a03      	ldr	r2, [pc, #12]	@ (8010510 <LoRaMacInitialization+0x384>)
 8010504:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010506:	4b02      	ldr	r3, [pc, #8]	@ (8010510 <LoRaMacInitialization+0x384>)
 8010508:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801050c:	e006      	b.n	801051c <LoRaMacInitialization+0x390>
 801050e:	bf00      	nop
 8010510:	20000ad4 	.word	0x20000ad4
 8010514:	200005cc 	.word	0x200005cc
 8010518:	01000300 	.word	0x01000300
 801051c:	4a5f      	ldr	r2, [pc, #380]	@ (801069c <LoRaMacInitialization+0x510>)
 801051e:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010520:	4b5e      	ldr	r3, [pc, #376]	@ (801069c <LoRaMacInitialization+0x510>)
 8010522:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010526:	4a5d      	ldr	r2, [pc, #372]	@ (801069c <LoRaMacInitialization+0x510>)
 8010528:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801052a:	4b5c      	ldr	r3, [pc, #368]	@ (801069c <LoRaMacInitialization+0x510>)
 801052c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8010530:	4a5a      	ldr	r2, [pc, #360]	@ (801069c <LoRaMacInitialization+0x510>)
 8010532:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010534:	4b59      	ldr	r3, [pc, #356]	@ (801069c <LoRaMacInitialization+0x510>)
 8010536:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 801053a:	4b58      	ldr	r3, [pc, #352]	@ (801069c <LoRaMacInitialization+0x510>)
 801053c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010540:	2300      	movs	r3, #0
 8010542:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010546:	4b56      	ldr	r3, [pc, #344]	@ (80106a0 <LoRaMacInitialization+0x514>)
 8010548:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801054a:	4b56      	ldr	r3, [pc, #344]	@ (80106a4 <LoRaMacInitialization+0x518>)
 801054c:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801054e:	4b53      	ldr	r3, [pc, #332]	@ (801069c <LoRaMacInitialization+0x510>)
 8010550:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010554:	f107 0218 	add.w	r2, r7, #24
 8010558:	4611      	mov	r1, r2
 801055a:	4618      	mov	r0, r3
 801055c:	f003 fa7d 	bl	8013a5a <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8010560:	4a51      	ldr	r2, [pc, #324]	@ (80106a8 <LoRaMacInitialization+0x51c>)
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 8010568:	2000      	movs	r0, #0
 801056a:	f7ff f8b7 	bl	800f6dc <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 801056e:	4b4b      	ldr	r3, [pc, #300]	@ (801069c <LoRaMacInitialization+0x510>)
 8010570:	2201      	movs	r2, #1
 8010572:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 8010576:	4a4c      	ldr	r2, [pc, #304]	@ (80106a8 <LoRaMacInitialization+0x51c>)
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 801057e:	4b4a      	ldr	r3, [pc, #296]	@ (80106a8 <LoRaMacInitialization+0x51c>)
 8010580:	2200      	movs	r2, #0
 8010582:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8010586:	4b48      	ldr	r3, [pc, #288]	@ (80106a8 <LoRaMacInitialization+0x51c>)
 8010588:	2201      	movs	r2, #1
 801058a:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 801058e:	4b43      	ldr	r3, [pc, #268]	@ (801069c <LoRaMacInitialization+0x510>)
 8010590:	2200      	movs	r2, #0
 8010592:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010594:	4b41      	ldr	r3, [pc, #260]	@ (801069c <LoRaMacInitialization+0x510>)
 8010596:	2200      	movs	r2, #0
 8010598:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 801059a:	2300      	movs	r3, #0
 801059c:	9300      	str	r3, [sp, #0]
 801059e:	4b43      	ldr	r3, [pc, #268]	@ (80106ac <LoRaMacInitialization+0x520>)
 80105a0:	2200      	movs	r2, #0
 80105a2:	f04f 31ff 	mov.w	r1, #4294967295
 80105a6:	4842      	ldr	r0, [pc, #264]	@ (80106b0 <LoRaMacInitialization+0x524>)
 80105a8:	f00b f8a8 	bl	801b6fc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80105ac:	2300      	movs	r3, #0
 80105ae:	9300      	str	r3, [sp, #0]
 80105b0:	4b40      	ldr	r3, [pc, #256]	@ (80106b4 <LoRaMacInitialization+0x528>)
 80105b2:	2200      	movs	r2, #0
 80105b4:	f04f 31ff 	mov.w	r1, #4294967295
 80105b8:	483f      	ldr	r0, [pc, #252]	@ (80106b8 <LoRaMacInitialization+0x52c>)
 80105ba:	f00b f89f 	bl	801b6fc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80105be:	2300      	movs	r3, #0
 80105c0:	9300      	str	r3, [sp, #0]
 80105c2:	4b3e      	ldr	r3, [pc, #248]	@ (80106bc <LoRaMacInitialization+0x530>)
 80105c4:	2200      	movs	r2, #0
 80105c6:	f04f 31ff 	mov.w	r1, #4294967295
 80105ca:	483d      	ldr	r0, [pc, #244]	@ (80106c0 <LoRaMacInitialization+0x534>)
 80105cc:	f00b f896 	bl	801b6fc <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80105d0:	2300      	movs	r3, #0
 80105d2:	9300      	str	r3, [sp, #0]
 80105d4:	4b3b      	ldr	r3, [pc, #236]	@ (80106c4 <LoRaMacInitialization+0x538>)
 80105d6:	2200      	movs	r2, #0
 80105d8:	f04f 31ff 	mov.w	r1, #4294967295
 80105dc:	483a      	ldr	r0, [pc, #232]	@ (80106c8 <LoRaMacInitialization+0x53c>)
 80105de:	f00b f88d 	bl	801b6fc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80105e2:	4c2e      	ldr	r4, [pc, #184]	@ (801069c <LoRaMacInitialization+0x510>)
 80105e4:	463b      	mov	r3, r7
 80105e6:	4618      	mov	r0, r3
 80105e8:	f00a fd06 	bl	801aff8 <SysTimeGetMcuTime>
 80105ec:	f504 7390 	add.w	r3, r4, #288	@ 0x120
 80105f0:	463a      	mov	r2, r7
 80105f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105f6:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80105fa:	4b2b      	ldr	r3, [pc, #172]	@ (80106a8 <LoRaMacInitialization+0x51c>)
 80105fc:	4a33      	ldr	r2, [pc, #204]	@ (80106cc <LoRaMacInitialization+0x540>)
 80105fe:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010602:	4b29      	ldr	r3, [pc, #164]	@ (80106a8 <LoRaMacInitialization+0x51c>)
 8010604:	4a32      	ldr	r2, [pc, #200]	@ (80106d0 <LoRaMacInitialization+0x544>)
 8010606:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801060a:	4b27      	ldr	r3, [pc, #156]	@ (80106a8 <LoRaMacInitialization+0x51c>)
 801060c:	4a31      	ldr	r2, [pc, #196]	@ (80106d4 <LoRaMacInitialization+0x548>)
 801060e:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8010612:	4b25      	ldr	r3, [pc, #148]	@ (80106a8 <LoRaMacInitialization+0x51c>)
 8010614:	4a30      	ldr	r2, [pc, #192]	@ (80106d8 <LoRaMacInitialization+0x54c>)
 8010616:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801061a:	4b23      	ldr	r3, [pc, #140]	@ (80106a8 <LoRaMacInitialization+0x51c>)
 801061c:	4a2f      	ldr	r2, [pc, #188]	@ (80106dc <LoRaMacInitialization+0x550>)
 801061e:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8010622:	4b2f      	ldr	r3, [pc, #188]	@ (80106e0 <LoRaMacInitialization+0x554>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	482f      	ldr	r0, [pc, #188]	@ (80106e4 <LoRaMacInitialization+0x558>)
 8010628:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 801062a:	482f      	ldr	r0, [pc, #188]	@ (80106e8 <LoRaMacInitialization+0x55c>)
 801062c:	f7fa fe30 	bl	800b290 <SecureElementInit>
 8010630:	4603      	mov	r3, r0
 8010632:	2b00      	cmp	r3, #0
 8010634:	d001      	beq.n	801063a <LoRaMacInitialization+0x4ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010636:	2311      	movs	r3, #17
 8010638:	e02b      	b.n	8010692 <LoRaMacInitialization+0x506>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 801063a:	4818      	ldr	r0, [pc, #96]	@ (801069c <LoRaMacInitialization+0x510>)
 801063c:	f002 fae8 	bl	8012c10 <LoRaMacCryptoInit>
 8010640:	4603      	mov	r3, r0
 8010642:	2b00      	cmp	r3, #0
 8010644:	d001      	beq.n	801064a <LoRaMacInitialization+0x4be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010646:	2311      	movs	r3, #17
 8010648:	e023      	b.n	8010692 <LoRaMacInitialization+0x506>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 801064a:	f001 fbe3 	bl	8011e14 <LoRaMacCommandsInit>
 801064e:	4603      	mov	r3, r0
 8010650:	2b00      	cmp	r3, #0
 8010652:	d001      	beq.n	8010658 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010654:	2313      	movs	r3, #19
 8010656:	e01c      	b.n	8010692 <LoRaMacInitialization+0x506>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8010658:	4824      	ldr	r0, [pc, #144]	@ (80106ec <LoRaMacInitialization+0x560>)
 801065a:	f002 fba3 	bl	8012da4 <LoRaMacCryptoSetMulticastReference>
 801065e:	4603      	mov	r3, r0
 8010660:	2b00      	cmp	r3, #0
 8010662:	d001      	beq.n	8010668 <LoRaMacInitialization+0x4dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010664:	2311      	movs	r3, #17
 8010666:	e014      	b.n	8010692 <LoRaMacInitialization+0x506>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8010668:	4b1d      	ldr	r3, [pc, #116]	@ (80106e0 <LoRaMacInitialization+0x554>)
 801066a:	695b      	ldr	r3, [r3, #20]
 801066c:	4798      	blx	r3
 801066e:	4603      	mov	r3, r0
 8010670:	4618      	mov	r0, r3
 8010672:	f007 f869 	bl	8017748 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010676:	4b1a      	ldr	r3, [pc, #104]	@ (80106e0 <LoRaMacInitialization+0x554>)
 8010678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801067a:	4a08      	ldr	r2, [pc, #32]	@ (801069c <LoRaMacInitialization+0x510>)
 801067c:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8010680:	4610      	mov	r0, r2
 8010682:	4798      	blx	r3
    Radio.Sleep( );
 8010684:	4b16      	ldr	r3, [pc, #88]	@ (80106e0 <LoRaMacInitialization+0x554>)
 8010686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010688:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801068a:	2001      	movs	r0, #1
 801068c:	f7fd fb32 	bl	800dcf4 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8010690:	2300      	movs	r3, #0
}
 8010692:	4618      	mov	r0, r3
 8010694:	3734      	adds	r7, #52	@ 0x34
 8010696:	46bd      	mov	sp, r7
 8010698:	bd90      	pop	{r4, r7, pc}
 801069a:	bf00      	nop
 801069c:	20000ad4 	.word	0x20000ad4
 80106a0:	20000cf4 	.word	0x20000cf4
 80106a4:	20000d98 	.word	0x20000d98
 80106a8:	200005cc 	.word	0x200005cc
 80106ac:	0800e235 	.word	0x0800e235
 80106b0:	20000934 	.word	0x20000934
 80106b4:	0800e2a9 	.word	0x0800e2a9
 80106b8:	2000094c 	.word	0x2000094c
 80106bc:	0800e315 	.word	0x0800e315
 80106c0:	20000964 	.word	0x20000964
 80106c4:	0800e389 	.word	0x0800e389
 80106c8:	200009c0 	.word	0x200009c0
 80106cc:	0800cdf5 	.word	0x0800cdf5
 80106d0:	0800ce51 	.word	0x0800ce51
 80106d4:	0800cee9 	.word	0x0800cee9
 80106d8:	0800cebd 	.word	0x0800cebd
 80106dc:	0800cf05 	.word	0x0800cf05
 80106e0:	0801dc9c 	.word	0x0801dc9c
 80106e4:	20000918 	.word	0x20000918
 80106e8:	20000c1c 	.word	0x20000c1c
 80106ec:	20000bbc 	.word	0x20000bbc

080106f0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80106f4:	4b04      	ldr	r3, [pc, #16]	@ (8010708 <LoRaMacStart+0x18>)
 80106f6:	2200      	movs	r2, #0
 80106f8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 80106fc:	f7fc fc18 	bl	800cf30 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8010700:	2300      	movs	r3, #0
}
 8010702:	4618      	mov	r0, r3
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	200005cc 	.word	0x200005cc

0801070c <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 801070c:	b580      	push	{r7, lr}
 801070e:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8010710:	f7fd fac4 	bl	800dc9c <LoRaMacIsBusy>
 8010714:	4603      	mov	r3, r0
 8010716:	f083 0301 	eor.w	r3, r3, #1
 801071a:	b2db      	uxtb	r3, r3
 801071c:	2b00      	cmp	r3, #0
 801071e:	d00d      	beq.n	801073c <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8010720:	4b0b      	ldr	r3, [pc, #44]	@ (8010750 <LoRaMacStop+0x44>)
 8010722:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010726:	2b02      	cmp	r3, #2
 8010728:	d102      	bne.n	8010730 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 801072a:	4b0a      	ldr	r3, [pc, #40]	@ (8010754 <LoRaMacStop+0x48>)
 801072c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801072e:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8010730:	4b09      	ldr	r3, [pc, #36]	@ (8010758 <LoRaMacStop+0x4c>)
 8010732:	2201      	movs	r2, #1
 8010734:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 8010738:	2300      	movs	r3, #0
 801073a:	e007      	b.n	801074c <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 801073c:	4b06      	ldr	r3, [pc, #24]	@ (8010758 <LoRaMacStop+0x4c>)
 801073e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010742:	2b01      	cmp	r3, #1
 8010744:	d101      	bne.n	801074a <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8010746:	2300      	movs	r3, #0
 8010748:	e000      	b.n	801074c <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 801074a:	2301      	movs	r3, #1
}
 801074c:	4618      	mov	r0, r3
 801074e:	bd80      	pop	{r7, pc}
 8010750:	20000ad4 	.word	0x20000ad4
 8010754:	0801dc9c 	.word	0x0801dc9c
 8010758:	200005cc 	.word	0x200005cc

0801075c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 801075c:	b580      	push	{r7, lr}
 801075e:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8010760:	480d      	ldr	r0, [pc, #52]	@ (8010798 <LoRaMacHalt+0x3c>)
 8010762:	f00b f86f 	bl	801b844 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8010766:	480d      	ldr	r0, [pc, #52]	@ (801079c <LoRaMacHalt+0x40>)
 8010768:	f00b f86c 	bl	801b844 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 801076c:	480c      	ldr	r0, [pc, #48]	@ (80107a0 <LoRaMacHalt+0x44>)
 801076e:	f00b f869 	bl	801b844 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8010772:	480c      	ldr	r0, [pc, #48]	@ (80107a4 <LoRaMacHalt+0x48>)
 8010774:	f00b f866 	bl	801b844 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8010778:	f001 f9cb 	bl	8011b12 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 801077c:	4b0a      	ldr	r3, [pc, #40]	@ (80107a8 <LoRaMacHalt+0x4c>)
 801077e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010780:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8010782:	4b0a      	ldr	r3, [pc, #40]	@ (80107ac <LoRaMacHalt+0x50>)
 8010784:	2200      	movs	r2, #0
 8010786:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 801078a:	4b08      	ldr	r3, [pc, #32]	@ (80107ac <LoRaMacHalt+0x50>)
 801078c:	2201      	movs	r2, #1
 801078e:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8010792:	2300      	movs	r3, #0
}
 8010794:	4618      	mov	r0, r3
 8010796:	bd80      	pop	{r7, pc}
 8010798:	20000934 	.word	0x20000934
 801079c:	2000094c 	.word	0x2000094c
 80107a0:	20000964 	.word	0x20000964
 80107a4:	200009c0 	.word	0x200009c0
 80107a8:	0801dc9c 	.word	0x0801dc9c
 80107ac:	200005cc 	.word	0x200005cc

080107b0 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b08a      	sub	sp, #40	@ 0x28
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	4603      	mov	r3, r0
 80107b8:	6039      	str	r1, [r7, #0]
 80107ba:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80107bc:	4b3e      	ldr	r3, [pc, #248]	@ (80108b8 <LoRaMacQueryTxPossible+0x108>)
 80107be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107c0:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80107c2:	4b3d      	ldr	r3, [pc, #244]	@ (80108b8 <LoRaMacQueryTxPossible+0x108>)
 80107c4:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 80107c8:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80107ca:	4b3b      	ldr	r3, [pc, #236]	@ (80108b8 <LoRaMacQueryTxPossible+0x108>)
 80107cc:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 80107d0:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80107d2:	2300      	movs	r3, #0
 80107d4:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d101      	bne.n	80107e0 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80107dc:	2303      	movs	r3, #3
 80107de:	e066      	b.n	80108ae <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 80107e0:	4b35      	ldr	r3, [pc, #212]	@ (80108b8 <LoRaMacQueryTxPossible+0x108>)
 80107e2:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 80107e6:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80107e8:	2300      	movs	r3, #0
 80107ea:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80107ec:	4b32      	ldr	r3, [pc, #200]	@ (80108b8 <LoRaMacQueryTxPossible+0x108>)
 80107ee:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80107f2:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80107f4:	4b30      	ldr	r3, [pc, #192]	@ (80108b8 <LoRaMacQueryTxPossible+0x108>)
 80107f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107f8:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80107fa:	4b2f      	ldr	r3, [pc, #188]	@ (80108b8 <LoRaMacQueryTxPossible+0x108>)
 80107fc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8010800:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8010802:	4b2d      	ldr	r3, [pc, #180]	@ (80108b8 <LoRaMacQueryTxPossible+0x108>)
 8010804:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8010808:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801080a:	4b2b      	ldr	r3, [pc, #172]	@ (80108b8 <LoRaMacQueryTxPossible+0x108>)
 801080c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010810:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010814:	4b28      	ldr	r3, [pc, #160]	@ (80108b8 <LoRaMacQueryTxPossible+0x108>)
 8010816:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 801081a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801081e:	4b26      	ldr	r3, [pc, #152]	@ (80108b8 <LoRaMacQueryTxPossible+0x108>)
 8010820:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010824:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010828:	4b23      	ldr	r3, [pc, #140]	@ (80108b8 <LoRaMacQueryTxPossible+0x108>)
 801082a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801082e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8010832:	f107 0310 	add.w	r3, r7, #16
 8010836:	f107 020e 	add.w	r2, r7, #14
 801083a:	f107 010f 	add.w	r1, r7, #15
 801083e:	f107 0014 	add.w	r0, r7, #20
 8010842:	f001 f8d1 	bl	80119e8 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801084a:	4618      	mov	r0, r3
 801084c:	f7fd feee 	bl	800e62c <GetMaxAppPayloadWithoutFOptsLength>
 8010850:	4603      	mov	r3, r0
 8010852:	461a      	mov	r2, r3
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010858:	f107 0308 	add.w	r3, r7, #8
 801085c:	4618      	mov	r0, r3
 801085e:	f001 fbdf 	bl	8012020 <LoRaMacCommandsGetSizeSerializedCmds>
 8010862:	4603      	mov	r3, r0
 8010864:	2b00      	cmp	r3, #0
 8010866:	d001      	beq.n	801086c <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010868:	2313      	movs	r3, #19
 801086a:	e020      	b.n	80108ae <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	2b0f      	cmp	r3, #15
 8010870:	d819      	bhi.n	80108a6 <LoRaMacQueryTxPossible+0xf6>
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	785b      	ldrb	r3, [r3, #1]
 8010876:	461a      	mov	r2, r3
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	429a      	cmp	r2, r3
 801087c:	d313      	bcc.n	80108a6 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	785a      	ldrb	r2, [r3, #1]
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	b2db      	uxtb	r3, r3
 8010886:	1ad3      	subs	r3, r2, r3
 8010888:	b2da      	uxtb	r2, r3
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	785b      	ldrb	r3, [r3, #1]
 8010892:	4619      	mov	r1, r3
 8010894:	79fa      	ldrb	r2, [r7, #7]
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	4413      	add	r3, r2
 801089a:	4299      	cmp	r1, r3
 801089c:	d301      	bcc.n	80108a2 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 801089e:	2300      	movs	r3, #0
 80108a0:	e005      	b.n	80108ae <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80108a2:	2308      	movs	r3, #8
 80108a4:	e003      	b.n	80108ae <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	2200      	movs	r2, #0
 80108aa:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80108ac:	2308      	movs	r3, #8
    }
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3728      	adds	r7, #40	@ 0x28
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	20000ad4 	.word	0x20000ad4

080108bc <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80108bc:	b590      	push	{r4, r7, lr}
 80108be:	b087      	sub	sp, #28
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80108c4:	2300      	movs	r3, #0
 80108c6:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d101      	bne.n	80108d2 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80108ce:	2303      	movs	r3, #3
 80108d0:	e1a4      	b.n	8010c1c <LoRaMacMibGetRequestConfirm+0x360>
    }

    switch( mibGet->Type )
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	781b      	ldrb	r3, [r3, #0]
 80108d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80108d8:	f200 8199 	bhi.w	8010c0e <LoRaMacMibGetRequestConfirm+0x352>
 80108dc:	a201      	add	r2, pc, #4	@ (adr r2, 80108e4 <LoRaMacMibGetRequestConfirm+0x28>)
 80108de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108e2:	bf00      	nop
 80108e4:	080109e5 	.word	0x080109e5
 80108e8:	080109f1 	.word	0x080109f1
 80108ec:	080109fd 	.word	0x080109fd
 80108f0:	08010a09 	.word	0x08010a09
 80108f4:	08010a15 	.word	0x08010a15
 80108f8:	08010a21 	.word	0x08010a21
 80108fc:	08010a2d 	.word	0x08010a2d
 8010900:	08010c0f 	.word	0x08010c0f
 8010904:	08010c0f 	.word	0x08010c0f
 8010908:	08010c0f 	.word	0x08010c0f
 801090c:	08010c0f 	.word	0x08010c0f
 8010910:	08010c0f 	.word	0x08010c0f
 8010914:	08010c0f 	.word	0x08010c0f
 8010918:	08010c0f 	.word	0x08010c0f
 801091c:	08010c0f 	.word	0x08010c0f
 8010920:	08010a41 	.word	0x08010a41
 8010924:	08010a4d 	.word	0x08010a4d
 8010928:	08010a59 	.word	0x08010a59
 801092c:	08010a7b 	.word	0x08010a7b
 8010930:	08010a8d 	.word	0x08010a8d
 8010934:	08010a9f 	.word	0x08010a9f
 8010938:	08010ab1 	.word	0x08010ab1
 801093c:	08010ae5 	.word	0x08010ae5
 8010940:	08010ac3 	.word	0x08010ac3
 8010944:	08010b07 	.word	0x08010b07
 8010948:	08010b13 	.word	0x08010b13
 801094c:	08010b1d 	.word	0x08010b1d
 8010950:	08010b27 	.word	0x08010b27
 8010954:	08010b31 	.word	0x08010b31
 8010958:	08010b3b 	.word	0x08010b3b
 801095c:	08010b45 	.word	0x08010b45
 8010960:	08010b51 	.word	0x08010b51
 8010964:	08010b69 	.word	0x08010b69
 8010968:	08010b5d 	.word	0x08010b5d
 801096c:	08010b75 	.word	0x08010b75
 8010970:	08010b7f 	.word	0x08010b7f
 8010974:	08010b8b 	.word	0x08010b8b
 8010978:	08010ba7 	.word	0x08010ba7
 801097c:	08010b97 	.word	0x08010b97
 8010980:	08010b9f 	.word	0x08010b9f
 8010984:	08010c0f 	.word	0x08010c0f
 8010988:	08010bb3 	.word	0x08010bb3
 801098c:	08010c0f 	.word	0x08010c0f
 8010990:	08010c0f 	.word	0x08010c0f
 8010994:	08010c0f 	.word	0x08010c0f
 8010998:	08010c0f 	.word	0x08010c0f
 801099c:	08010c0f 	.word	0x08010c0f
 80109a0:	08010c0f 	.word	0x08010c0f
 80109a4:	08010c0f 	.word	0x08010c0f
 80109a8:	08010c0f 	.word	0x08010c0f
 80109ac:	08010c0f 	.word	0x08010c0f
 80109b0:	08010c0f 	.word	0x08010c0f
 80109b4:	08010c0f 	.word	0x08010c0f
 80109b8:	08010c0f 	.word	0x08010c0f
 80109bc:	08010c0f 	.word	0x08010c0f
 80109c0:	08010c0f 	.word	0x08010c0f
 80109c4:	08010c0f 	.word	0x08010c0f
 80109c8:	08010bc7 	.word	0x08010bc7
 80109cc:	08010bd3 	.word	0x08010bd3
 80109d0:	08010bdf 	.word	0x08010bdf
 80109d4:	08010beb 	.word	0x08010beb
 80109d8:	08010bf7 	.word	0x08010bf7
 80109dc:	08010c03 	.word	0x08010c03
 80109e0:	08010c09 	.word	0x08010c09
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80109e4:	4b8f      	ldr	r3, [pc, #572]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 80109e6:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	711a      	strb	r2, [r3, #4]
            break;
 80109ee:	e114      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80109f0:	4b8c      	ldr	r3, [pc, #560]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 80109f2:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	711a      	strb	r2, [r3, #4]
            break;
 80109fa:	e10e      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	685b      	ldr	r3, [r3, #4]
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7fa ff1b 	bl	800b83c <SecureElementGetDevEui>
            break;
 8010a06:	e108      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	685b      	ldr	r3, [r3, #4]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7fa ff45 	bl	800b89c <SecureElementGetJoinEui>
            break;
 8010a12:	e102      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8010a14:	4b83      	ldr	r3, [pc, #524]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a16:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	711a      	strb	r2, [r3, #4]
            break;
 8010a1e:	e0fc      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8010a20:	4b80      	ldr	r3, [pc, #512]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	605a      	str	r2, [r3, #4]
            break;
 8010a2a:	e0f6      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8010a2c:	4b7d      	ldr	r3, [pc, #500]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a2e:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	3304      	adds	r3, #4
 8010a36:	4619      	mov	r1, r3
 8010a38:	4610      	mov	r0, r2
 8010a3a:	f7fa ff61 	bl	800b900 <SecureElementGetDevAddr>
            break;
 8010a3e:	e0ec      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8010a40:	4b78      	ldr	r3, [pc, #480]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a42:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	711a      	strb	r2, [r3, #4]
            break;
 8010a4a:	e0e6      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010a4c:	4b75      	ldr	r3, [pc, #468]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a4e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	711a      	strb	r2, [r3, #4]
            break;
 8010a56:	e0e0      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8010a58:	231d      	movs	r3, #29
 8010a5a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a5c:	4b71      	ldr	r3, [pc, #452]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a5e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010a62:	f107 0210 	add.w	r2, r7, #16
 8010a66:	4611      	mov	r1, r2
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f002 ffbf 	bl	80139ec <RegionGetPhyParam>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8010a72:	68fa      	ldr	r2, [r7, #12]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	605a      	str	r2, [r3, #4]
            break;
 8010a78:	e0cf      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	4a69      	ldr	r2, [pc, #420]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a7e:	3304      	adds	r3, #4
 8010a80:	326c      	adds	r2, #108	@ 0x6c
 8010a82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a86:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010a8a:	e0c6      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	4a65      	ldr	r2, [pc, #404]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a90:	3304      	adds	r3, #4
 8010a92:	32b4      	adds	r2, #180	@ 0xb4
 8010a94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a98:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010a9c:	e0bd      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	4a60      	ldr	r2, [pc, #384]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010aa2:	3304      	adds	r3, #4
 8010aa4:	3274      	adds	r2, #116	@ 0x74
 8010aa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010aaa:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010aae:	e0b4      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	4a5c      	ldr	r2, [pc, #368]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010ab4:	3304      	adds	r3, #4
 8010ab6:	32bc      	adds	r2, #188	@ 0xbc
 8010ab8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010abc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010ac0:	e0ab      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8010ac2:	231b      	movs	r3, #27
 8010ac4:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ac6:	4b57      	ldr	r3, [pc, #348]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010ac8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010acc:	f107 0210 	add.w	r2, r7, #16
 8010ad0:	4611      	mov	r1, r2
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f002 ff8a 	bl	80139ec <RegionGetPhyParam>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8010adc:	68fa      	ldr	r2, [r7, #12]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	605a      	str	r2, [r3, #4]
            break;
 8010ae2:	e09a      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8010ae4:	231a      	movs	r3, #26
 8010ae6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010aea:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010aee:	f107 0210 	add.w	r2, r7, #16
 8010af2:	4611      	mov	r1, r2
 8010af4:	4618      	mov	r0, r3
 8010af6:	f002 ff79 	bl	80139ec <RegionGetPhyParam>
 8010afa:	4603      	mov	r3, r0
 8010afc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8010afe:	68fa      	ldr	r2, [r7, #12]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	605a      	str	r2, [r3, #4]
            break;
 8010b04:	e089      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010b06:	4b47      	ldr	r3, [pc, #284]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b08:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	711a      	strb	r2, [r3, #4]
            break;
 8010b10:	e083      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8010b12:	4b44      	ldr	r3, [pc, #272]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	605a      	str	r2, [r3, #4]
            break;
 8010b1a:	e07e      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8010b1c:	4b41      	ldr	r3, [pc, #260]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b1e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	605a      	str	r2, [r3, #4]
            break;
 8010b24:	e079      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8010b26:	4b3f      	ldr	r3, [pc, #252]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	605a      	str	r2, [r3, #4]
            break;
 8010b2e:	e074      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8010b30:	4b3c      	ldr	r3, [pc, #240]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b32:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	605a      	str	r2, [r3, #4]
            break;
 8010b38:	e06f      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8010b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b3c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	605a      	str	r2, [r3, #4]
            break;
 8010b42:	e06a      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010b44:	4b37      	ldr	r3, [pc, #220]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b46:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	711a      	strb	r2, [r3, #4]
            break;
 8010b4e:	e064      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8010b50:	4b34      	ldr	r3, [pc, #208]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b52:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	711a      	strb	r2, [r3, #4]
            break;
 8010b5a:	e05e      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010b5c:	4b31      	ldr	r3, [pc, #196]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b5e:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	711a      	strb	r2, [r3, #4]
            break;
 8010b66:	e058      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010b68:	4b2e      	ldr	r3, [pc, #184]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b6a:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	711a      	strb	r2, [r3, #4]
            break;
 8010b72:	e052      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8010b74:	4b2b      	ldr	r3, [pc, #172]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	605a      	str	r2, [r3, #4]
            break;
 8010b7c:	e04d      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8010b7e:	4b29      	ldr	r3, [pc, #164]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b80:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	711a      	strb	r2, [r3, #4]
            break;
 8010b88:	e047      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010b8a:	4b26      	ldr	r3, [pc, #152]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b8c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	605a      	str	r2, [r3, #4]
            break;
 8010b94:	e041      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	4a22      	ldr	r2, [pc, #136]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b9a:	605a      	str	r2, [r3, #4]
            break;
 8010b9c:	e03d      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8010ba4:	e039      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010ba8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	605a      	str	r2, [r3, #4]
            break;
 8010bb0:	e033      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010bb6:	f8d2 2128 	ldr.w	r2, [r2, #296]	@ 0x128
 8010bba:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8010bbc:	687c      	ldr	r4, [r7, #4]
 8010bbe:	f003 f939 	bl	8013e34 <RegionGetVersion>
 8010bc2:	60a0      	str	r0, [r4, #8]
            break;
 8010bc4:	e029      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8010bc6:	4b17      	ldr	r3, [pc, #92]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010bc8:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	605a      	str	r2, [r3, #4]
            break;
 8010bd0:	e023      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8010bd2:	4b14      	ldr	r3, [pc, #80]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010bd4:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	809a      	strh	r2, [r3, #4]
            break;
 8010bdc:	e01d      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8010bde:	4b11      	ldr	r3, [pc, #68]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010be0:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	809a      	strh	r2, [r3, #4]
            break;
 8010be8:	e017      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8010bea:	4b0e      	ldr	r3, [pc, #56]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010bec:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	809a      	strh	r2, [r3, #4]
            break;
 8010bf4:	e011      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8010bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8010c24 <LoRaMacMibGetRequestConfirm+0x368>)
 8010bf8:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	809a      	strh	r2, [r3, #4]
            break;
 8010c00:	e00b      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8010c02:	2318      	movs	r3, #24
 8010c04:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8010c06:	e008      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8010c08:	2318      	movs	r3, #24
 8010c0a:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8010c0c:	e005      	b.n	8010c1a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f000 ff96 	bl	8011b40 <LoRaMacClassBMibGetRequestConfirm>
 8010c14:	4603      	mov	r3, r0
 8010c16:	75fb      	strb	r3, [r7, #23]
            break;
 8010c18:	bf00      	nop
        }
    }
    return status;
 8010c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	371c      	adds	r7, #28
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd90      	pop	{r4, r7, pc}
 8010c24:	20000ad4 	.word	0x20000ad4

08010c28 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b086      	sub	sp, #24
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010c30:	2300      	movs	r3, #0
 8010c32:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d101      	bne.n	8010c3e <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010c3a:	2303      	movs	r3, #3
 8010c3c:	e382      	b.n	8011344 <LoRaMacMibSetRequestConfirm+0x71c>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8010c3e:	4bbb      	ldr	r3, [pc, #748]	@ (8010f2c <LoRaMacMibSetRequestConfirm+0x304>)
 8010c40:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010c44:	f003 0302 	and.w	r3, r3, #2
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d001      	beq.n	8010c50 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	e379      	b.n	8011344 <LoRaMacMibSetRequestConfirm+0x71c>
    }

    switch( mibSet->Type )
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	781b      	ldrb	r3, [r3, #0]
 8010c54:	2b3f      	cmp	r3, #63	@ 0x3f
 8010c56:	f200 8353 	bhi.w	8011300 <LoRaMacMibSetRequestConfirm+0x6d8>
 8010c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8010c60 <LoRaMacMibSetRequestConfirm+0x38>)
 8010c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c60:	08010d61 	.word	0x08010d61
 8010c64:	08010d71 	.word	0x08010d71
 8010c68:	08010d8b 	.word	0x08010d8b
 8010c6c:	08010da3 	.word	0x08010da3
 8010c70:	08010dbb 	.word	0x08010dbb
 8010c74:	08010dc7 	.word	0x08010dc7
 8010c78:	08010dd3 	.word	0x08010dd3
 8010c7c:	08010dfd 	.word	0x08010dfd
 8010c80:	08010e23 	.word	0x08010e23
 8010c84:	08010e49 	.word	0x08010e49
 8010c88:	08010e6f 	.word	0x08010e6f
 8010c8c:	08010e95 	.word	0x08010e95
 8010c90:	08010ebb 	.word	0x08010ebb
 8010c94:	08010ee1 	.word	0x08010ee1
 8010c98:	08010f07 	.word	0x08010f07
 8010c9c:	08010f35 	.word	0x08010f35
 8010ca0:	08010f55 	.word	0x08010f55
 8010ca4:	08011301 	.word	0x08011301
 8010ca8:	08010f61 	.word	0x08010f61
 8010cac:	08010fd1 	.word	0x08010fd1
 8010cb0:	08011011 	.word	0x08011011
 8010cb4:	08011073 	.word	0x08011073
 8010cb8:	080110e3 	.word	0x080110e3
 8010cbc:	080110b3 	.word	0x080110b3
 8010cc0:	08011113 	.word	0x08011113
 8010cc4:	08011135 	.word	0x08011135
 8010cc8:	0801113f 	.word	0x0801113f
 8010ccc:	08011149 	.word	0x08011149
 8010cd0:	08011153 	.word	0x08011153
 8010cd4:	0801115d 	.word	0x0801115d
 8010cd8:	08011167 	.word	0x08011167
 8010cdc:	08011199 	.word	0x08011199
 8010ce0:	0801120d 	.word	0x0801120d
 8010ce4:	080111d3 	.word	0x080111d3
 8010ce8:	0801123f 	.word	0x0801123f
 8010cec:	08011255 	.word	0x08011255
 8010cf0:	0801126d 	.word	0x0801126d
 8010cf4:	08011279 	.word	0x08011279
 8010cf8:	08011285 	.word	0x08011285
 8010cfc:	08011301 	.word	0x08011301
 8010d00:	0801128f 	.word	0x0801128f
 8010d04:	08011301 	.word	0x08011301
 8010d08:	08011301 	.word	0x08011301
 8010d0c:	08011301 	.word	0x08011301
 8010d10:	08011301 	.word	0x08011301
 8010d14:	08011301 	.word	0x08011301
 8010d18:	08011301 	.word	0x08011301
 8010d1c:	08011301 	.word	0x08011301
 8010d20:	08011301 	.word	0x08011301
 8010d24:	08011301 	.word	0x08011301
 8010d28:	08011301 	.word	0x08011301
 8010d2c:	08011301 	.word	0x08011301
 8010d30:	08011301 	.word	0x08011301
 8010d34:	08011301 	.word	0x08011301
 8010d38:	08011301 	.word	0x08011301
 8010d3c:	08011301 	.word	0x08011301
 8010d40:	08011301 	.word	0x08011301
 8010d44:	080112b9 	.word	0x080112b9
 8010d48:	080112c5 	.word	0x080112c5
 8010d4c:	080112d1 	.word	0x080112d1
 8010d50:	080112dd 	.word	0x080112dd
 8010d54:	080112e9 	.word	0x080112e9
 8010d58:	080112f5 	.word	0x080112f5
 8010d5c:	080112fb 	.word	0x080112fb
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	791b      	ldrb	r3, [r3, #4]
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7fd fb79 	bl	800e45c <SwitchClass>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	75fb      	strb	r3, [r7, #23]
            break;
 8010d6e:	e2e8      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	791b      	ldrb	r3, [r3, #4]
 8010d74:	2b02      	cmp	r3, #2
 8010d76:	d005      	beq.n	8010d84 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	791a      	ldrb	r2, [r3, #4]
 8010d7c:	4b6c      	ldr	r3, [pc, #432]	@ (8010f30 <LoRaMacMibSetRequestConfirm+0x308>)
 8010d7e:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010d82:	e2de      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d84:	2303      	movs	r3, #3
 8010d86:	75fb      	strb	r3, [r7, #23]
            break;
 8010d88:	e2db      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7fa fd3c 	bl	800b80c <SecureElementSetDevEui>
 8010d94:	4603      	mov	r3, r0
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	f000 82b8 	beq.w	801130c <LoRaMacMibSetRequestConfirm+0x6e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d9c:	2303      	movs	r3, #3
 8010d9e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010da0:	e2b4      	b.n	801130c <LoRaMacMibSetRequestConfirm+0x6e4>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fa fd60 	bl	800b86c <SecureElementSetJoinEui>
 8010dac:	4603      	mov	r3, r0
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	f000 82ae 	beq.w	8011310 <LoRaMacMibSetRequestConfirm+0x6e8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010db4:	2303      	movs	r3, #3
 8010db6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010db8:	e2aa      	b.n	8011310 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	791a      	ldrb	r2, [r3, #4]
 8010dbe:	4b5c      	ldr	r3, [pc, #368]	@ (8010f30 <LoRaMacMibSetRequestConfirm+0x308>)
 8010dc0:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 8010dc4:	e2bd      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	4a59      	ldr	r2, [pc, #356]	@ (8010f30 <LoRaMacMibSetRequestConfirm+0x308>)
 8010dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 8010dd0:	e2b7      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8010dd2:	4b57      	ldr	r3, [pc, #348]	@ (8010f30 <LoRaMacMibSetRequestConfirm+0x308>)
 8010dd4:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	685b      	ldr	r3, [r3, #4]
 8010ddc:	4619      	mov	r1, r3
 8010dde:	4610      	mov	r0, r2
 8010de0:	f7fa fd74 	bl	800b8cc <SecureElementSetDevAddr>
 8010de4:	4603      	mov	r3, r0
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d002      	beq.n	8010df0 <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010dea:	2303      	movs	r3, #3
 8010dec:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8010dee:	e2a8      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	4a4e      	ldr	r2, [pc, #312]	@ (8010f30 <LoRaMacMibSetRequestConfirm+0x308>)
 8010df6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 8010dfa:	e2a2      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d00b      	beq.n	8010e1c <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	685b      	ldr	r3, [r3, #4]
 8010e08:	4619      	mov	r1, r3
 8010e0a:	2000      	movs	r0, #0
 8010e0c:	f001 fff4 	bl	8012df8 <LoRaMacCryptoSetKey>
 8010e10:	4603      	mov	r3, r0
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	f000 827e 	beq.w	8011314 <LoRaMacMibSetRequestConfirm+0x6ec>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010e18:	2311      	movs	r3, #17
 8010e1a:	e293      	b.n	8011344 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e1c:	2303      	movs	r3, #3
 8010e1e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010e20:	e278      	b.n	8011314 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d00b      	beq.n	8010e42 <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	4619      	mov	r1, r3
 8010e30:	2001      	movs	r0, #1
 8010e32:	f001 ffe1 	bl	8012df8 <LoRaMacCryptoSetKey>
 8010e36:	4603      	mov	r3, r0
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	f000 826d 	beq.w	8011318 <LoRaMacMibSetRequestConfirm+0x6f0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010e3e:	2311      	movs	r3, #17
 8010e40:	e280      	b.n	8011344 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e42:	2303      	movs	r3, #3
 8010e44:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010e46:	e267      	b.n	8011318 <LoRaMacMibSetRequestConfirm+0x6f0>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	685b      	ldr	r3, [r3, #4]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d00b      	beq.n	8010e68 <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	685b      	ldr	r3, [r3, #4]
 8010e54:	4619      	mov	r1, r3
 8010e56:	2008      	movs	r0, #8
 8010e58:	f001 ffce 	bl	8012df8 <LoRaMacCryptoSetKey>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	f000 825c 	beq.w	801131c <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010e64:	2311      	movs	r3, #17
 8010e66:	e26d      	b.n	8011344 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e68:	2303      	movs	r3, #3
 8010e6a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010e6c:	e256      	b.n	801131c <LoRaMacMibSetRequestConfirm+0x6f4>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	685b      	ldr	r3, [r3, #4]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d00b      	beq.n	8010e8e <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	685b      	ldr	r3, [r3, #4]
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	2009      	movs	r0, #9
 8010e7e:	f001 ffbb 	bl	8012df8 <LoRaMacCryptoSetKey>
 8010e82:	4603      	mov	r3, r0
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	f000 824b 	beq.w	8011320 <LoRaMacMibSetRequestConfirm+0x6f8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010e8a:	2311      	movs	r3, #17
 8010e8c:	e25a      	b.n	8011344 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e8e:	2303      	movs	r3, #3
 8010e90:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010e92:	e245      	b.n	8011320 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	685b      	ldr	r3, [r3, #4]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d00b      	beq.n	8010eb4 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	685b      	ldr	r3, [r3, #4]
 8010ea0:	4619      	mov	r1, r3
 8010ea2:	200c      	movs	r0, #12
 8010ea4:	f001 ffa8 	bl	8012df8 <LoRaMacCryptoSetKey>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	f000 823a 	beq.w	8011324 <LoRaMacMibSetRequestConfirm+0x6fc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010eb0:	2311      	movs	r3, #17
 8010eb2:	e247      	b.n	8011344 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010eb4:	2303      	movs	r3, #3
 8010eb6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010eb8:	e234      	b.n	8011324 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	685b      	ldr	r3, [r3, #4]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d00b      	beq.n	8010eda <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	685b      	ldr	r3, [r3, #4]
 8010ec6:	4619      	mov	r1, r3
 8010ec8:	200d      	movs	r0, #13
 8010eca:	f001 ff95 	bl	8012df8 <LoRaMacCryptoSetKey>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	f000 8229 	beq.w	8011328 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010ed6:	2311      	movs	r3, #17
 8010ed8:	e234      	b.n	8011344 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010eda:	2303      	movs	r3, #3
 8010edc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010ede:	e223      	b.n	8011328 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	685b      	ldr	r3, [r3, #4]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d00b      	beq.n	8010f00 <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	4619      	mov	r1, r3
 8010eee:	200e      	movs	r0, #14
 8010ef0:	f001 ff82 	bl	8012df8 <LoRaMacCryptoSetKey>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	f000 8218 	beq.w	801132c <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010efc:	2311      	movs	r3, #17
 8010efe:	e221      	b.n	8011344 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010f00:	2303      	movs	r3, #3
 8010f02:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010f04:	e212      	b.n	801132c <LoRaMacMibSetRequestConfirm+0x704>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	685b      	ldr	r3, [r3, #4]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d00b      	beq.n	8010f26 <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	685b      	ldr	r3, [r3, #4]
 8010f12:	4619      	mov	r1, r3
 8010f14:	200f      	movs	r0, #15
 8010f16:	f001 ff6f 	bl	8012df8 <LoRaMacCryptoSetKey>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	f000 8207 	beq.w	8011330 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010f22:	2311      	movs	r3, #17
 8010f24:	e20e      	b.n	8011344 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010f26:	2303      	movs	r3, #3
 8010f28:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010f2a:	e201      	b.n	8011330 <LoRaMacMibSetRequestConfirm+0x708>
 8010f2c:	200005cc 	.word	0x200005cc
 8010f30:	20000ad4 	.word	0x20000ad4
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	791a      	ldrb	r2, [r3, #4]
 8010f38:	4bb2      	ldr	r3, [pc, #712]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010f3a:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010f3e:	4bb2      	ldr	r3, [pc, #712]	@ (8011208 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8010f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f42:	4ab0      	ldr	r2, [pc, #704]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010f44:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8010f48:	4610      	mov	r0, r2
 8010f4a:	4798      	blx	r3
            Radio.Sleep( );
 8010f4c:	4bae      	ldr	r3, [pc, #696]	@ (8011208 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8010f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f50:	4798      	blx	r3
            break;
 8010f52:	e1f6      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	791a      	ldrb	r2, [r3, #4]
 8010f58:	4baa      	ldr	r3, [pc, #680]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010f5a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 8010f5e:	e1f0      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	7a1b      	ldrb	r3, [r3, #8]
 8010f64:	b25b      	sxtb	r3, r3
 8010f66:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010f68:	4ba6      	ldr	r3, [pc, #664]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010f6a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8010f6e:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8010f70:	4ba4      	ldr	r3, [pc, #656]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010f72:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010f76:	f107 0108 	add.w	r1, r7, #8
 8010f7a:	2207      	movs	r2, #7
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f002 fd83 	bl	8013a88 <RegionVerify>
 8010f82:	4603      	mov	r3, r0
 8010f84:	f083 0301 	eor.w	r3, r3, #1
 8010f88:	b2db      	uxtb	r3, r3
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d002      	beq.n	8010f94 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010f8e:	2303      	movs	r3, #3
 8010f90:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8010f92:	e1d6      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	685b      	ldr	r3, [r3, #4]
 8010f98:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8010f9a:	4b9a      	ldr	r3, [pc, #616]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010f9c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010fa0:	f107 0108 	add.w	r1, r7, #8
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f002 fd6e 	bl	8013a88 <RegionVerify>
 8010fac:	4603      	mov	r3, r0
 8010fae:	f083 0301 	eor.w	r3, r3, #1
 8010fb2:	b2db      	uxtb	r3, r3
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d002      	beq.n	8010fbe <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010fb8:	2303      	movs	r3, #3
 8010fba:	75fb      	strb	r3, [r7, #23]
            break;
 8010fbc:	e1c1      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8010fbe:	4b91      	ldr	r3, [pc, #580]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010fc0:	687a      	ldr	r2, [r7, #4]
 8010fc2:	336c      	adds	r3, #108	@ 0x6c
 8010fc4:	3204      	adds	r2, #4
 8010fc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010fca:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010fce:	e1b8      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	7a1b      	ldrb	r3, [r3, #8]
 8010fd4:	b25b      	sxtb	r3, r3
 8010fd6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010fd8:	4b8a      	ldr	r3, [pc, #552]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010fda:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8010fde:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010fe0:	4b88      	ldr	r3, [pc, #544]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010fe2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010fe6:	f107 0108 	add.w	r1, r7, #8
 8010fea:	2207      	movs	r2, #7
 8010fec:	4618      	mov	r0, r3
 8010fee:	f002 fd4b 	bl	8013a88 <RegionVerify>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d008      	beq.n	801100a <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8010ff8:	4b82      	ldr	r3, [pc, #520]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010ffa:	687a      	ldr	r2, [r7, #4]
 8010ffc:	33b4      	adds	r3, #180	@ 0xb4
 8010ffe:	3204      	adds	r2, #4
 8011000:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011004:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011008:	e19b      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801100a:	2303      	movs	r3, #3
 801100c:	75fb      	strb	r3, [r7, #23]
            break;
 801100e:	e198      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	7a1b      	ldrb	r3, [r3, #8]
 8011014:	b25b      	sxtb	r3, r3
 8011016:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011018:	4b7a      	ldr	r3, [pc, #488]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801101a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801101e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011020:	4b78      	ldr	r3, [pc, #480]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011022:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011026:	f107 0108 	add.w	r1, r7, #8
 801102a:	2207      	movs	r2, #7
 801102c:	4618      	mov	r0, r3
 801102e:	f002 fd2b 	bl	8013a88 <RegionVerify>
 8011032:	4603      	mov	r3, r0
 8011034:	2b00      	cmp	r3, #0
 8011036:	d019      	beq.n	801106c <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8011038:	4b72      	ldr	r3, [pc, #456]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801103a:	687a      	ldr	r2, [r7, #4]
 801103c:	3374      	adds	r3, #116	@ 0x74
 801103e:	3204      	adds	r2, #4
 8011040:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011044:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8011048:	4b6e      	ldr	r3, [pc, #440]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801104a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801104e:	2b02      	cmp	r3, #2
 8011050:	f040 8170 	bne.w	8011334 <LoRaMacMibSetRequestConfirm+0x70c>
 8011054:	4b6b      	ldr	r3, [pc, #428]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011056:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 801105a:	2b00      	cmp	r3, #0
 801105c:	f000 816a 	beq.w	8011334 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8011060:	4b69      	ldr	r3, [pc, #420]	@ (8011208 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011064:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8011066:	f7fe fc93 	bl	800f990 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801106a:	e163      	b.n	8011334 <LoRaMacMibSetRequestConfirm+0x70c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801106c:	2303      	movs	r3, #3
 801106e:	75fb      	strb	r3, [r7, #23]
            break;
 8011070:	e160      	b.n	8011334 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	7a1b      	ldrb	r3, [r3, #8]
 8011076:	b25b      	sxtb	r3, r3
 8011078:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801107a:	4b62      	ldr	r3, [pc, #392]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801107c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8011080:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011082:	4b60      	ldr	r3, [pc, #384]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011084:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011088:	f107 0108 	add.w	r1, r7, #8
 801108c:	2207      	movs	r2, #7
 801108e:	4618      	mov	r0, r3
 8011090:	f002 fcfa 	bl	8013a88 <RegionVerify>
 8011094:	4603      	mov	r3, r0
 8011096:	2b00      	cmp	r3, #0
 8011098:	d008      	beq.n	80110ac <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801109a:	4b5a      	ldr	r3, [pc, #360]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801109c:	687a      	ldr	r2, [r7, #4]
 801109e:	33bc      	adds	r3, #188	@ 0xbc
 80110a0:	3204      	adds	r2, #4
 80110a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110a6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80110aa:	e14a      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80110ac:	2303      	movs	r3, #3
 80110ae:	75fb      	strb	r3, [r7, #23]
            break;
 80110b0:	e147      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80110b8:	2301      	movs	r3, #1
 80110ba:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80110bc:	4b51      	ldr	r3, [pc, #324]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80110be:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80110c2:	f107 020c 	add.w	r2, r7, #12
 80110c6:	4611      	mov	r1, r2
 80110c8:	4618      	mov	r0, r3
 80110ca:	f002 fd15 	bl	8013af8 <RegionChanMaskSet>
 80110ce:	4603      	mov	r3, r0
 80110d0:	f083 0301 	eor.w	r3, r3, #1
 80110d4:	b2db      	uxtb	r3, r3
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	f000 812e 	beq.w	8011338 <LoRaMacMibSetRequestConfirm+0x710>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80110dc:	2303      	movs	r3, #3
 80110de:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80110e0:	e12a      	b.n	8011338 <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	685b      	ldr	r3, [r3, #4]
 80110e6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80110e8:	2300      	movs	r3, #0
 80110ea:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80110ec:	4b45      	ldr	r3, [pc, #276]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80110ee:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80110f2:	f107 020c 	add.w	r2, r7, #12
 80110f6:	4611      	mov	r1, r2
 80110f8:	4618      	mov	r0, r3
 80110fa:	f002 fcfd 	bl	8013af8 <RegionChanMaskSet>
 80110fe:	4603      	mov	r3, r0
 8011100:	f083 0301 	eor.w	r3, r3, #1
 8011104:	b2db      	uxtb	r3, r3
 8011106:	2b00      	cmp	r3, #0
 8011108:	f000 8118 	beq.w	801133c <LoRaMacMibSetRequestConfirm+0x714>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801110c:	2303      	movs	r3, #3
 801110e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011110:	e114      	b.n	801133c <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	791b      	ldrb	r3, [r3, #4]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d009      	beq.n	801112e <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801111e:	2b0f      	cmp	r3, #15
 8011120:	d805      	bhi.n	801112e <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	791a      	ldrb	r2, [r3, #4]
 8011126:	4b37      	ldr	r3, [pc, #220]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011128:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801112c:	e109      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801112e:	2303      	movs	r3, #3
 8011130:	75fb      	strb	r3, [r7, #23]
            break;
 8011132:	e106      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	685b      	ldr	r3, [r3, #4]
 8011138:	4a32      	ldr	r2, [pc, #200]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801113a:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 801113c:	e101      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	4a30      	ldr	r2, [pc, #192]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011144:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 8011146:	e0fc      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	4a2d      	ldr	r2, [pc, #180]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801114e:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8011150:	e0f7      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	4a2b      	ldr	r2, [pc, #172]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011158:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 801115a:	e0f2      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	685b      	ldr	r3, [r3, #4]
 8011160:	4a28      	ldr	r2, [pc, #160]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011162:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 8011164:	e0ed      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801116c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801116e:	4b25      	ldr	r3, [pc, #148]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011170:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011174:	f107 0108 	add.w	r1, r7, #8
 8011178:	2206      	movs	r2, #6
 801117a:	4618      	mov	r0, r3
 801117c:	f002 fc84 	bl	8013a88 <RegionVerify>
 8011180:	4603      	mov	r3, r0
 8011182:	2b00      	cmp	r3, #0
 8011184:	d005      	beq.n	8011192 <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8011186:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801118a:	4b1e      	ldr	r3, [pc, #120]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801118c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011190:	e0d7      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011192:	2303      	movs	r3, #3
 8011194:	75fb      	strb	r3, [r7, #23]
            break;
 8011196:	e0d4      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801119e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80111a0:	4b18      	ldr	r3, [pc, #96]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80111a2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80111a6:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80111a8:	4b16      	ldr	r3, [pc, #88]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80111aa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80111ae:	f107 0108 	add.w	r1, r7, #8
 80111b2:	2205      	movs	r2, #5
 80111b4:	4618      	mov	r0, r3
 80111b6:	f002 fc67 	bl	8013a88 <RegionVerify>
 80111ba:	4603      	mov	r3, r0
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d005      	beq.n	80111cc <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80111c0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80111c4:	4b0f      	ldr	r3, [pc, #60]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80111c6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80111ca:	e0ba      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80111cc:	2303      	movs	r3, #3
 80111ce:	75fb      	strb	r3, [r7, #23]
            break;
 80111d0:	e0b7      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80111d8:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80111da:	4b0a      	ldr	r3, [pc, #40]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80111dc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80111e0:	f107 0108 	add.w	r1, r7, #8
 80111e4:	220a      	movs	r2, #10
 80111e6:	4618      	mov	r0, r3
 80111e8:	f002 fc4e 	bl	8013a88 <RegionVerify>
 80111ec:	4603      	mov	r3, r0
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d005      	beq.n	80111fe <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80111f2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80111f6:	4b03      	ldr	r3, [pc, #12]	@ (8011204 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80111f8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80111fc:	e0a1      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80111fe:	2303      	movs	r3, #3
 8011200:	75fb      	strb	r3, [r7, #23]
            break;
 8011202:	e09e      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
 8011204:	20000ad4 	.word	0x20000ad4
 8011208:	0801dc9c 	.word	0x0801dc9c
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011212:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011214:	4b4d      	ldr	r3, [pc, #308]	@ (801134c <LoRaMacMibSetRequestConfirm+0x724>)
 8011216:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801121a:	f107 0108 	add.w	r1, r7, #8
 801121e:	2209      	movs	r2, #9
 8011220:	4618      	mov	r0, r3
 8011222:	f002 fc31 	bl	8013a88 <RegionVerify>
 8011226:	4603      	mov	r3, r0
 8011228:	2b00      	cmp	r3, #0
 801122a:	d005      	beq.n	8011238 <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 801122c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011230:	4b46      	ldr	r3, [pc, #280]	@ (801134c <LoRaMacMibSetRequestConfirm+0x724>)
 8011232:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011236:	e084      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011238:	2303      	movs	r3, #3
 801123a:	75fb      	strb	r3, [r7, #23]
            break;
 801123c:	e081      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	4a42      	ldr	r2, [pc, #264]	@ (801134c <LoRaMacMibSetRequestConfirm+0x724>)
 8011244:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8011248:	4b40      	ldr	r3, [pc, #256]	@ (801134c <LoRaMacMibSetRequestConfirm+0x724>)
 801124a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801124e:	4a3f      	ldr	r2, [pc, #252]	@ (801134c <LoRaMacMibSetRequestConfirm+0x724>)
 8011250:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 8011252:	e076      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	791a      	ldrb	r2, [r3, #4]
 8011258:	4b3c      	ldr	r3, [pc, #240]	@ (801134c <LoRaMacMibSetRequestConfirm+0x724>)
 801125a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 801125e:	4b3b      	ldr	r3, [pc, #236]	@ (801134c <LoRaMacMibSetRequestConfirm+0x724>)
 8011260:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8011264:	4b39      	ldr	r3, [pc, #228]	@ (801134c <LoRaMacMibSetRequestConfirm+0x724>)
 8011266:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 801126a:	e06a      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	4a36      	ldr	r2, [pc, #216]	@ (801134c <LoRaMacMibSetRequestConfirm+0x724>)
 8011272:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 8011276:	e064      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	685b      	ldr	r3, [r3, #4]
 801127c:	4a33      	ldr	r2, [pc, #204]	@ (801134c <LoRaMacMibSetRequestConfirm+0x724>)
 801127e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 8011282:	e05e      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8011284:	f7fe fde0 	bl	800fe48 <RestoreNvmData>
 8011288:	4603      	mov	r3, r0
 801128a:	75fb      	strb	r3, [r7, #23]
            break;
 801128c:	e059      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	799b      	ldrb	r3, [r3, #6]
 8011292:	2b01      	cmp	r3, #1
 8011294:	d80d      	bhi.n	80112b2 <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011296:	4a2d      	ldr	r2, [pc, #180]	@ (801134c <LoRaMacMibSetRequestConfirm+0x724>)
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	685b      	ldr	r3, [r3, #4]
 801129c:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6858      	ldr	r0, [r3, #4]
 80112a4:	f001 fce0 	bl	8012c68 <LoRaMacCryptoSetLrWanVersion>
 80112a8:	4603      	mov	r3, r0
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d048      	beq.n	8011340 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80112ae:	2311      	movs	r3, #17
 80112b0:	e048      	b.n	8011344 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80112b2:	2303      	movs	r3, #3
 80112b4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80112b6:	e043      	b.n	8011340 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	4a23      	ldr	r2, [pc, #140]	@ (801134c <LoRaMacMibSetRequestConfirm+0x724>)
 80112be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 80112c2:	e03e      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	889a      	ldrh	r2, [r3, #4]
 80112c8:	4b20      	ldr	r3, [pc, #128]	@ (801134c <LoRaMacMibSetRequestConfirm+0x724>)
 80112ca:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 80112ce:	e038      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	889a      	ldrh	r2, [r3, #4]
 80112d4:	4b1d      	ldr	r3, [pc, #116]	@ (801134c <LoRaMacMibSetRequestConfirm+0x724>)
 80112d6:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 80112da:	e032      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	889a      	ldrh	r2, [r3, #4]
 80112e0:	4b1a      	ldr	r3, [pc, #104]	@ (801134c <LoRaMacMibSetRequestConfirm+0x724>)
 80112e2:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 80112e6:	e02c      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	889a      	ldrh	r2, [r3, #4]
 80112ec:	4b17      	ldr	r3, [pc, #92]	@ (801134c <LoRaMacMibSetRequestConfirm+0x724>)
 80112ee:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 80112f2:	e026      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80112f4:	2318      	movs	r3, #24
 80112f6:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80112f8:	e023      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80112fa:	2318      	movs	r3, #24
 80112fc:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80112fe:	e020      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f000 fc27 	bl	8011b54 <LoRaMacMibClassBSetRequestConfirm>
 8011306:	4603      	mov	r3, r0
 8011308:	75fb      	strb	r3, [r7, #23]
            break;
 801130a:	e01a      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801130c:	bf00      	nop
 801130e:	e018      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011310:	bf00      	nop
 8011312:	e016      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011314:	bf00      	nop
 8011316:	e014      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011318:	bf00      	nop
 801131a:	e012      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801131c:	bf00      	nop
 801131e:	e010      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011320:	bf00      	nop
 8011322:	e00e      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011324:	bf00      	nop
 8011326:	e00c      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011328:	bf00      	nop
 801132a:	e00a      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801132c:	bf00      	nop
 801132e:	e008      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011330:	bf00      	nop
 8011332:	e006      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011334:	bf00      	nop
 8011336:	e004      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011338:	bf00      	nop
 801133a:	e002      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801133c:	bf00      	nop
 801133e:	e000      	b.n	8011342 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011340:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8011342:	7dfb      	ldrb	r3, [r7, #23]
}
 8011344:	4618      	mov	r0, r3
 8011346:	3718      	adds	r7, #24
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}
 801134c:	20000ad4 	.word	0x20000ad4

08011350 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b086      	sub	sp, #24
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011358:	2302      	movs	r3, #2
 801135a:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801135c:	2300      	movs	r3, #0
 801135e:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d101      	bne.n	801136a <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011366:	2303      	movs	r3, #3
 8011368:	e13a      	b.n	80115e0 <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 801136a:	f7fc fc97 	bl	800dc9c <LoRaMacIsBusy>
 801136e:	4603      	mov	r3, r0
 8011370:	2b00      	cmp	r3, #0
 8011372:	d001      	beq.n	8011378 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011374:	2301      	movs	r3, #1
 8011376:	e133      	b.n	80115e0 <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011378:	f001 f90c 	bl	8012594 <LoRaMacConfirmQueueIsFull>
 801137c:	4603      	mov	r3, r0
 801137e:	2b00      	cmp	r3, #0
 8011380:	d001      	beq.n	8011386 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8011382:	2301      	movs	r3, #1
 8011384:	e12c      	b.n	80115e0 <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011386:	f001 f8f9 	bl	801257c <LoRaMacConfirmQueueGetCnt>
 801138a:	4603      	mov	r3, r0
 801138c:	2b00      	cmp	r3, #0
 801138e:	d104      	bne.n	801139a <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011390:	2214      	movs	r2, #20
 8011392:	2100      	movs	r1, #0
 8011394:	4894      	ldr	r0, [pc, #592]	@ (80115e8 <LoRaMacMlmeRequest+0x298>)
 8011396:	f006 fa37 	bl	8017808 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801139a:	4b94      	ldr	r3, [pc, #592]	@ (80115ec <LoRaMacMlmeRequest+0x29c>)
 801139c:	2201      	movs	r2, #1
 801139e:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80113a2:	4a92      	ldr	r2, [pc, #584]	@ (80115ec <LoRaMacMlmeRequest+0x29c>)
 80113a4:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 80113a8:	f043 0304 	orr.w	r3, r3, #4
 80113ac:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    queueElement.Request = mlmeRequest->Type;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80113b6:	2301      	movs	r3, #1
 80113b8:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 80113ba:	2300      	movs	r3, #0
 80113bc:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	781b      	ldrb	r3, [r3, #0]
 80113c2:	3b01      	subs	r3, #1
 80113c4:	2b0d      	cmp	r3, #13
 80113c6:	f200 80e1 	bhi.w	801158c <LoRaMacMlmeRequest+0x23c>
 80113ca:	a201      	add	r2, pc, #4	@ (adr r2, 80113d0 <LoRaMacMlmeRequest+0x80>)
 80113cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113d0:	08011409 	.word	0x08011409
 80113d4:	0801158d 	.word	0x0801158d
 80113d8:	0801158d 	.word	0x0801158d
 80113dc:	0801158d 	.word	0x0801158d
 80113e0:	08011481 	.word	0x08011481
 80113e4:	0801149f 	.word	0x0801149f
 80113e8:	080114af 	.word	0x080114af
 80113ec:	0801158d 	.word	0x0801158d
 80113f0:	0801158d 	.word	0x0801158d
 80113f4:	080114cb 	.word	0x080114cb
 80113f8:	0801158d 	.word	0x0801158d
 80113fc:	08011561 	.word	0x08011561
 8011400:	08011501 	.word	0x08011501
 8011404:	08011543 	.word	0x08011543
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011408:	4b78      	ldr	r3, [pc, #480]	@ (80115ec <LoRaMacMlmeRequest+0x29c>)
 801140a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801140e:	f003 0320 	and.w	r3, r3, #32
 8011412:	2b00      	cmp	r3, #0
 8011414:	d001      	beq.n	801141a <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8011416:	2301      	movs	r3, #1
 8011418:	e0e2      	b.n	80115e0 <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 801141a:	2000      	movs	r0, #0
 801141c:	f7fe f95e 	bl	800f6dc <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8011420:	4b73      	ldr	r3, [pc, #460]	@ (80115f0 <LoRaMacMlmeRequest+0x2a0>)
 8011422:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	795b      	ldrb	r3, [r3, #5]
 801142a:	b25b      	sxtb	r3, r3
 801142c:	2200      	movs	r2, #0
 801142e:	4619      	mov	r1, r3
 8011430:	f002 fc72 	bl	8013d18 <RegionAlternateDr>
 8011434:	4603      	mov	r3, r0
 8011436:	461a      	mov	r2, r3
 8011438:	4b6d      	ldr	r3, [pc, #436]	@ (80115f0 <LoRaMacMlmeRequest+0x2a0>)
 801143a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8011444:	4b6a      	ldr	r3, [pc, #424]	@ (80115f0 <LoRaMacMlmeRequest+0x2a0>)
 8011446:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801144a:	2307      	movs	r3, #7
 801144c:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 801144e:	20ff      	movs	r0, #255	@ 0xff
 8011450:	f7fd fec2 	bl	800f1d8 <SendReJoinReq>
 8011454:	4603      	mov	r3, r0
 8011456:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8011458:	7dfb      	ldrb	r3, [r7, #23]
 801145a:	2b00      	cmp	r3, #0
 801145c:	f000 8098 	beq.w	8011590 <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011460:	4b63      	ldr	r3, [pc, #396]	@ (80115f0 <LoRaMacMlmeRequest+0x2a0>)
 8011462:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	795b      	ldrb	r3, [r3, #5]
 801146a:	b25b      	sxtb	r3, r3
 801146c:	2201      	movs	r2, #1
 801146e:	4619      	mov	r1, r3
 8011470:	f002 fc52 	bl	8013d18 <RegionAlternateDr>
 8011474:	4603      	mov	r3, r0
 8011476:	461a      	mov	r2, r3
 8011478:	4b5d      	ldr	r3, [pc, #372]	@ (80115f0 <LoRaMacMlmeRequest+0x2a0>)
 801147a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 801147e:	e087      	b.n	8011590 <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011480:	2300      	movs	r3, #0
 8011482:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011484:	f107 030c 	add.w	r3, r7, #12
 8011488:	2200      	movs	r2, #0
 801148a:	4619      	mov	r1, r3
 801148c:	2002      	movs	r0, #2
 801148e:	f000 fcd1 	bl	8011e34 <LoRaMacCommandsAddCmd>
 8011492:	4603      	mov	r3, r0
 8011494:	2b00      	cmp	r3, #0
 8011496:	d07d      	beq.n	8011594 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011498:	2313      	movs	r3, #19
 801149a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801149c:	e07a      	b.n	8011594 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	889b      	ldrh	r3, [r3, #4]
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7fe fc7a 	bl	800fd9c <SetTxContinuousWave>
 80114a8:	4603      	mov	r3, r0
 80114aa:	75fb      	strb	r3, [r7, #23]
            break;
 80114ac:	e079      	b.n	80115a2 <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	8898      	ldrh	r0, [r3, #4]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6899      	ldr	r1, [r3, #8]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80114bc:	b2db      	uxtb	r3, r3
 80114be:	461a      	mov	r2, r3
 80114c0:	f7fe fca2 	bl	800fe08 <SetTxContinuousWave1>
 80114c4:	4603      	mov	r3, r0
 80114c6:	75fb      	strb	r3, [r7, #23]
            break;
 80114c8:	e06b      	b.n	80115a2 <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80114ca:	2300      	movs	r3, #0
 80114cc:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 80114ce:	f107 0308 	add.w	r3, r7, #8
 80114d2:	4619      	mov	r1, r3
 80114d4:	200d      	movs	r0, #13
 80114d6:	f000 fd2d 	bl	8011f34 <LoRaMacCommandsGetCmd>
 80114da:	4603      	mov	r3, r0
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d102      	bne.n	80114e6 <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 80114e0:	2300      	movs	r3, #0
 80114e2:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 80114e4:	e058      	b.n	8011598 <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80114e6:	f107 030c 	add.w	r3, r7, #12
 80114ea:	2200      	movs	r2, #0
 80114ec:	4619      	mov	r1, r3
 80114ee:	200d      	movs	r0, #13
 80114f0:	f000 fca0 	bl	8011e34 <LoRaMacCommandsAddCmd>
 80114f4:	4603      	mov	r3, r0
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d04e      	beq.n	8011598 <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80114fa:	2313      	movs	r3, #19
 80114fc:	75fb      	strb	r3, [r7, #23]
            break;
 80114fe:	e04b      	b.n	8011598 <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011500:	4b3b      	ldr	r3, [pc, #236]	@ (80115f0 <LoRaMacMlmeRequest+0x2a0>)
 8011502:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011506:	2b00      	cmp	r3, #0
 8011508:	d148      	bne.n	801159c <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	791b      	ldrb	r3, [r3, #4]
 801150e:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	791b      	ldrb	r3, [r3, #4]
 8011514:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8011518:	b2db      	uxtb	r3, r3
 801151a:	4618      	mov	r0, r3
 801151c:	f000 faef 	bl	8011afe <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011520:	7dbb      	ldrb	r3, [r7, #22]
 8011522:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8011524:	2300      	movs	r3, #0
 8011526:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8011528:	f107 030c 	add.w	r3, r7, #12
 801152c:	2201      	movs	r2, #1
 801152e:	4619      	mov	r1, r3
 8011530:	2010      	movs	r0, #16
 8011532:	f000 fc7f 	bl	8011e34 <LoRaMacCommandsAddCmd>
 8011536:	4603      	mov	r3, r0
 8011538:	2b00      	cmp	r3, #0
 801153a:	d02f      	beq.n	801159c <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801153c:	2313      	movs	r3, #19
 801153e:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8011540:	e02c      	b.n	801159c <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011542:	2300      	movs	r3, #0
 8011544:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011546:	f107 030c 	add.w	r3, r7, #12
 801154a:	2200      	movs	r2, #0
 801154c:	4619      	mov	r1, r3
 801154e:	2012      	movs	r0, #18
 8011550:	f000 fc70 	bl	8011e34 <LoRaMacCommandsAddCmd>
 8011554:	4603      	mov	r3, r0
 8011556:	2b00      	cmp	r3, #0
 8011558:	d022      	beq.n	80115a0 <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801155a:	2313      	movs	r3, #19
 801155c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801155e:	e01f      	b.n	80115a0 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011560:	2301      	movs	r3, #1
 8011562:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011564:	f000 fa81 	bl	8011a6a <LoRaMacClassBIsAcquisitionInProgress>
 8011568:	4603      	mov	r3, r0
 801156a:	f083 0301 	eor.w	r3, r3, #1
 801156e:	b2db      	uxtb	r3, r3
 8011570:	2b00      	cmp	r3, #0
 8011572:	d008      	beq.n	8011586 <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011574:	2000      	movs	r0, #0
 8011576:	f000 fa5a 	bl	8011a2e <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801157a:	2000      	movs	r0, #0
 801157c:	f000 fa7c 	bl	8011a78 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8011580:	2300      	movs	r3, #0
 8011582:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8011584:	e00d      	b.n	80115a2 <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 8011586:	2301      	movs	r3, #1
 8011588:	75fb      	strb	r3, [r7, #23]
            break;
 801158a:	e00a      	b.n	80115a2 <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 801158c:	bf00      	nop
 801158e:	e008      	b.n	80115a2 <LoRaMacMlmeRequest+0x252>
            break;
 8011590:	bf00      	nop
 8011592:	e006      	b.n	80115a2 <LoRaMacMlmeRequest+0x252>
            break;
 8011594:	bf00      	nop
 8011596:	e004      	b.n	80115a2 <LoRaMacMlmeRequest+0x252>
            break;
 8011598:	bf00      	nop
 801159a:	e002      	b.n	80115a2 <LoRaMacMlmeRequest+0x252>
            break;
 801159c:	bf00      	nop
 801159e:	e000      	b.n	80115a2 <LoRaMacMlmeRequest+0x252>
            break;
 80115a0:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80115a2:	4b12      	ldr	r3, [pc, #72]	@ (80115ec <LoRaMacMlmeRequest+0x29c>)
 80115a4:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80115ac:	7dfb      	ldrb	r3, [r7, #23]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d010      	beq.n	80115d4 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80115b2:	f000 ffe3 	bl	801257c <LoRaMacConfirmQueueGetCnt>
 80115b6:	4603      	mov	r3, r0
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d110      	bne.n	80115de <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 80115bc:	4b0b      	ldr	r3, [pc, #44]	@ (80115ec <LoRaMacMlmeRequest+0x29c>)
 80115be:	2200      	movs	r2, #0
 80115c0:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80115c4:	4a09      	ldr	r2, [pc, #36]	@ (80115ec <LoRaMacMlmeRequest+0x29c>)
 80115c6:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 80115ca:	f36f 0382 	bfc	r3, #2, #1
 80115ce:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 80115d2:	e004      	b.n	80115de <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80115d4:	f107 0310 	add.w	r3, r7, #16
 80115d8:	4618      	mov	r0, r3
 80115da:	f000 fe7b 	bl	80122d4 <LoRaMacConfirmQueueAdd>
    }
    return status;
 80115de:	7dfb      	ldrb	r3, [r7, #23]
}
 80115e0:	4618      	mov	r0, r3
 80115e2:	3718      	adds	r7, #24
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}
 80115e8:	20000a14 	.word	0x20000a14
 80115ec:	200005cc 	.word	0x200005cc
 80115f0:	20000ad4 	.word	0x20000ad4

080115f4 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b08c      	sub	sp, #48	@ 0x30
 80115f8:	af02      	add	r7, sp, #8
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	460b      	mov	r3, r1
 80115fe:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011600:	2302      	movs	r3, #2
 8011602:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8011606:	2300      	movs	r3, #0
 8011608:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    void* fBuffer = NULL;
 801160c:	2300      	movs	r3, #0
 801160e:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011610:	2300      	movs	r3, #0
 8011612:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8011614:	2300      	movs	r3, #0
 8011616:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d101      	bne.n	8011622 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801161e:	2303      	movs	r3, #3
 8011620:	e0d4      	b.n	80117cc <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8011622:	f7fc fb3b 	bl	800dc9c <LoRaMacIsBusy>
 8011626:	4603      	mov	r3, r0
 8011628:	2b00      	cmp	r3, #0
 801162a:	d001      	beq.n	8011630 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 801162c:	2301      	movs	r3, #1
 801162e:	e0cd      	b.n	80117cc <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8011630:	2300      	movs	r3, #0
 8011632:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011634:	2214      	movs	r2, #20
 8011636:	2100      	movs	r1, #0
 8011638:	4866      	ldr	r0, [pc, #408]	@ (80117d4 <LoRaMacMcpsRequest+0x1e0>)
 801163a:	f006 f8e5 	bl	8017808 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801163e:	4b66      	ldr	r3, [pc, #408]	@ (80117d8 <LoRaMacMcpsRequest+0x1e4>)
 8011640:	2201      	movs	r2, #1
 8011642:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011646:	4b64      	ldr	r3, [pc, #400]	@ (80117d8 <LoRaMacMcpsRequest+0x1e4>)
 8011648:	2201      	movs	r2, #1
 801164a:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e

    switch( mcpsRequest->Type )
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	2b03      	cmp	r3, #3
 8011654:	d03d      	beq.n	80116d2 <LoRaMacMcpsRequest+0xde>
 8011656:	2b03      	cmp	r3, #3
 8011658:	dc4f      	bgt.n	80116fa <LoRaMacMcpsRequest+0x106>
 801165a:	2b00      	cmp	r3, #0
 801165c:	d002      	beq.n	8011664 <LoRaMacMcpsRequest+0x70>
 801165e:	2b01      	cmp	r3, #1
 8011660:	d019      	beq.n	8011696 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8011662:	e04a      	b.n	80116fa <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8011664:	2301      	movs	r3, #1
 8011666:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011668:	4b5b      	ldr	r3, [pc, #364]	@ (80117d8 <LoRaMacMcpsRequest+0x1e4>)
 801166a:	2201      	movs	r2, #1
 801166c:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8011670:	7b3b      	ldrb	r3, [r7, #12]
 8011672:	2202      	movs	r2, #2
 8011674:	f362 1347 	bfi	r3, r2, #5, #3
 8011678:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	791b      	ldrb	r3, [r3, #4]
 801167e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	689b      	ldr	r3, [r3, #8]
 8011686:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	899b      	ldrh	r3, [r3, #12]
 801168c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	7b9b      	ldrb	r3, [r3, #14]
 8011692:	777b      	strb	r3, [r7, #29]
            break;
 8011694:	e032      	b.n	80116fc <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011696:	2301      	movs	r3, #1
 8011698:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	7bdb      	ldrb	r3, [r3, #15]
 801169e:	2b08      	cmp	r3, #8
 80116a0:	bf28      	it	cs
 80116a2:	2308      	movcs	r3, #8
 80116a4:	b2da      	uxtb	r2, r3
 80116a6:	4b4c      	ldr	r3, [pc, #304]	@ (80117d8 <LoRaMacMcpsRequest+0x1e4>)
 80116a8:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80116ac:	7b3b      	ldrb	r3, [r7, #12]
 80116ae:	2204      	movs	r2, #4
 80116b0:	f362 1347 	bfi	r3, r2, #5, #3
 80116b4:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	791b      	ldrb	r3, [r3, #4]
 80116ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	689b      	ldr	r3, [r3, #8]
 80116c2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	899b      	ldrh	r3, [r3, #12]
 80116c8:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	7b9b      	ldrb	r3, [r3, #14]
 80116ce:	777b      	strb	r3, [r7, #29]
            break;
 80116d0:	e014      	b.n	80116fc <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80116d2:	2301      	movs	r3, #1
 80116d4:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80116d6:	4b40      	ldr	r3, [pc, #256]	@ (80117d8 <LoRaMacMcpsRequest+0x1e4>)
 80116d8:	2201      	movs	r2, #1
 80116da:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80116de:	7b3b      	ldrb	r3, [r7, #12]
 80116e0:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80116e4:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	685b      	ldr	r3, [r3, #4]
 80116ea:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	891b      	ldrh	r3, [r3, #8]
 80116f0:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	7a9b      	ldrb	r3, [r3, #10]
 80116f6:	777b      	strb	r3, [r7, #29]
            break;
 80116f8:	e000      	b.n	80116fc <LoRaMacMcpsRequest+0x108>
            break;
 80116fa:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80116fc:	2302      	movs	r3, #2
 80116fe:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011700:	4b36      	ldr	r3, [pc, #216]	@ (80117dc <LoRaMacMcpsRequest+0x1e8>)
 8011702:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011706:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011708:	4b34      	ldr	r3, [pc, #208]	@ (80117dc <LoRaMacMcpsRequest+0x1e8>)
 801170a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801170e:	f107 0214 	add.w	r2, r7, #20
 8011712:	4611      	mov	r1, r2
 8011714:	4618      	mov	r0, r3
 8011716:	f002 f969 	bl	80139ec <RegionGetPhyParam>
 801171a:	4603      	mov	r3, r0
 801171c:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	b25b      	sxtb	r3, r3
 8011722:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011726:	4293      	cmp	r3, r2
 8011728:	bfb8      	it	lt
 801172a:	4613      	movlt	r3, r2
 801172c:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 801172e:	7f3b      	ldrb	r3, [r7, #28]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d044      	beq.n	80117be <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8011734:	4b29      	ldr	r3, [pc, #164]	@ (80117dc <LoRaMacMcpsRequest+0x1e8>)
 8011736:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801173a:	f083 0301 	eor.w	r3, r3, #1
 801173e:	b2db      	uxtb	r3, r3
 8011740:	2b00      	cmp	r3, #0
 8011742:	d019      	beq.n	8011778 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8011744:	7f7b      	ldrb	r3, [r7, #29]
 8011746:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011748:	4b24      	ldr	r3, [pc, #144]	@ (80117dc <LoRaMacMcpsRequest+0x1e8>)
 801174a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801174e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011750:	4b22      	ldr	r3, [pc, #136]	@ (80117dc <LoRaMacMcpsRequest+0x1e8>)
 8011752:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011756:	f107 0108 	add.w	r1, r7, #8
 801175a:	2205      	movs	r2, #5
 801175c:	4618      	mov	r0, r3
 801175e:	f002 f993 	bl	8013a88 <RegionVerify>
 8011762:	4603      	mov	r3, r0
 8011764:	2b00      	cmp	r3, #0
 8011766:	d005      	beq.n	8011774 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011768:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801176c:	4b1b      	ldr	r3, [pc, #108]	@ (80117dc <LoRaMacMcpsRequest+0x1e8>)
 801176e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8011772:	e001      	b.n	8011778 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8011774:	2303      	movs	r3, #3
 8011776:	e029      	b.n	80117cc <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8011778:	8bfa      	ldrh	r2, [r7, #30]
 801177a:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 801177e:	f107 000c 	add.w	r0, r7, #12
 8011782:	78fb      	ldrb	r3, [r7, #3]
 8011784:	9300      	str	r3, [sp, #0]
 8011786:	4613      	mov	r3, r2
 8011788:	6a3a      	ldr	r2, [r7, #32]
 801178a:	f7fd fc47 	bl	800f01c <Send>
 801178e:	4603      	mov	r3, r0
 8011790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if( status == LORAMAC_STATUS_OK )
 8011794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011798:	2b00      	cmp	r3, #0
 801179a:	d10c      	bne.n	80117b6 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	781a      	ldrb	r2, [r3, #0]
 80117a0:	4b0d      	ldr	r3, [pc, #52]	@ (80117d8 <LoRaMacMcpsRequest+0x1e4>)
 80117a2:	f883 2434 	strb.w	r2, [r3, #1076]	@ 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80117a6:	4a0c      	ldr	r2, [pc, #48]	@ (80117d8 <LoRaMacMcpsRequest+0x1e4>)
 80117a8:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 80117ac:	f043 0301 	orr.w	r3, r3, #1
 80117b0:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 80117b4:	e003      	b.n	80117be <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80117b6:	4b08      	ldr	r3, [pc, #32]	@ (80117d8 <LoRaMacMcpsRequest+0x1e4>)
 80117b8:	2200      	movs	r2, #0
 80117ba:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80117be:	4b06      	ldr	r3, [pc, #24]	@ (80117d8 <LoRaMacMcpsRequest+0x1e4>)
 80117c0:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	611a      	str	r2, [r3, #16]

    return status;
 80117c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	3728      	adds	r7, #40	@ 0x28
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}
 80117d4:	20000a00 	.word	0x20000a00
 80117d8:	200005cc 	.word	0x200005cc
 80117dc:	20000ad4 	.word	0x20000ad4

080117e0 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b084      	sub	sp, #16
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	4603      	mov	r3, r0
 80117e8:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80117ea:	79fb      	ldrb	r3, [r7, #7]
 80117ec:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80117ee:	4b0d      	ldr	r3, [pc, #52]	@ (8011824 <LoRaMacTestSetDutyCycleOn+0x44>)
 80117f0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80117f4:	f107 010c 	add.w	r1, r7, #12
 80117f8:	220f      	movs	r2, #15
 80117fa:	4618      	mov	r0, r3
 80117fc:	f002 f944 	bl	8013a88 <RegionVerify>
 8011800:	4603      	mov	r3, r0
 8011802:	2b00      	cmp	r3, #0
 8011804:	d00a      	beq.n	801181c <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8011806:	4a07      	ldr	r2, [pc, #28]	@ (8011824 <LoRaMacTestSetDutyCycleOn+0x44>)
 8011808:	79fb      	ldrb	r3, [r7, #7]
 801180a:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801180e:	4a06      	ldr	r2, [pc, #24]	@ (8011828 <LoRaMacTestSetDutyCycleOn+0x48>)
 8011810:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8011814:	f043 0320 	orr.w	r3, r3, #32
 8011818:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
}
 801181c:	bf00      	nop
 801181e:	3710      	adds	r7, #16
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}
 8011824:	20000ad4 	.word	0x20000ad4
 8011828:	200005cc 	.word	0x200005cc

0801182c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 801182c:	b580      	push	{r7, lr}
 801182e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8011830:	f7fe ff6c 	bl	801070c <LoRaMacStop>
 8011834:	4603      	mov	r3, r0
 8011836:	2b00      	cmp	r3, #0
 8011838:	d115      	bne.n	8011866 <LoRaMacDeInitialization+0x3a>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801183a:	480c      	ldr	r0, [pc, #48]	@ (801186c <LoRaMacDeInitialization+0x40>)
 801183c:	f00a f802 	bl	801b844 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8011840:	480b      	ldr	r0, [pc, #44]	@ (8011870 <LoRaMacDeInitialization+0x44>)
 8011842:	f009 ffff 	bl	801b844 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8011846:	480b      	ldr	r0, [pc, #44]	@ (8011874 <LoRaMacDeInitialization+0x48>)
 8011848:	f009 fffc 	bl	801b844 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 801184c:	480a      	ldr	r0, [pc, #40]	@ (8011878 <LoRaMacDeInitialization+0x4c>)
 801184e:	f009 fff9 	bl	801b844 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8011852:	f000 f95e 	bl	8011b12 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8011856:	2000      	movs	r0, #0
 8011858:	f7fd ff40 	bl	800f6dc <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 801185c:	4b07      	ldr	r3, [pc, #28]	@ (801187c <LoRaMacDeInitialization+0x50>)
 801185e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011860:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8011862:	2300      	movs	r3, #0
 8011864:	e000      	b.n	8011868 <LoRaMacDeInitialization+0x3c>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8011866:	2301      	movs	r3, #1
    }
}
 8011868:	4618      	mov	r0, r3
 801186a:	bd80      	pop	{r7, pc}
 801186c:	20000934 	.word	0x20000934
 8011870:	2000094c 	.word	0x2000094c
 8011874:	20000964 	.word	0x20000964
 8011878:	200009c0 	.word	0x200009c0
 801187c:	0801dc9c 	.word	0x0801dc9c

08011880 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b08c      	sub	sp, #48	@ 0x30
 8011884:	af00      	add	r7, sp, #0
 8011886:	60f8      	str	r0, [r7, #12]
 8011888:	60b9      	str	r1, [r7, #8]
 801188a:	607a      	str	r2, [r7, #4]
 801188c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801188e:	2300      	movs	r3, #0
 8011890:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	7c1b      	ldrb	r3, [r3, #16]
 8011898:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	7c5b      	ldrb	r3, [r3, #17]
 80118a0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	689a      	ldr	r2, [r3, #8]
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	795b      	ldrb	r3, [r3, #5]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	f000 808b 	beq.w	80119cc <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80118b6:	2302      	movs	r3, #2
 80118b8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	7c9b      	ldrb	r3, [r3, #18]
 80118c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	7cdb      	ldrb	r3, [r3, #19]
 80118c8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80118cc:	4611      	mov	r1, r2
 80118ce:	4618      	mov	r0, r3
 80118d0:	f002 f88c 	bl	80139ec <RegionGetPhyParam>
 80118d4:	4603      	mov	r3, r0
 80118d6:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80118d8:	6a3b      	ldr	r3, [r7, #32]
 80118da:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        datarate = MAX( datarate, minTxDatarate );
 80118de:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 80118e2:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 80118e6:	4293      	cmp	r3, r2
 80118e8:	bfb8      	it	lt
 80118ea:	4613      	movlt	r3, r2
 80118ec:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        if( datarate == minTxDatarate )
 80118f0:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 80118f4:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d106      	bne.n	801190a <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	2200      	movs	r2, #0
 8011900:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8011902:	2300      	movs	r3, #0
 8011904:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011908:	e060      	b.n	80119cc <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	689b      	ldr	r3, [r3, #8]
 801190e:	68fa      	ldr	r2, [r7, #12]
 8011910:	8992      	ldrh	r2, [r2, #12]
 8011912:	4293      	cmp	r3, r2
 8011914:	d303      	bcc.n	801191e <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8011916:	2301      	movs	r3, #1
 8011918:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801191c:	e002      	b.n	8011924 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 801191e:	2300      	movs	r3, #0
 8011920:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	689b      	ldr	r3, [r3, #8]
 8011928:	68fa      	ldr	r2, [r7, #12]
 801192a:	8992      	ldrh	r2, [r2, #12]
 801192c:	4611      	mov	r1, r2
 801192e:	68fa      	ldr	r2, [r7, #12]
 8011930:	89d2      	ldrh	r2, [r2, #14]
 8011932:	440a      	add	r2, r1
 8011934:	4293      	cmp	r3, r2
 8011936:	d349      	bcc.n	80119cc <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8011938:	2308      	movs	r3, #8
 801193a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	7cdb      	ldrb	r3, [r3, #19]
 8011942:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8011946:	4611      	mov	r1, r2
 8011948:	4618      	mov	r0, r3
 801194a:	f002 f84f 	bl	80139ec <RegionGetPhyParam>
 801194e:	4603      	mov	r3, r0
 8011950:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8011952:	6a3b      	ldr	r3, [r7, #32]
 8011954:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	689b      	ldr	r3, [r3, #8]
 801195c:	68fa      	ldr	r2, [r7, #12]
 801195e:	89d2      	ldrh	r2, [r2, #14]
 8011960:	fbb3 f1f2 	udiv	r1, r3, r2
 8011964:	fb01 f202 	mul.w	r2, r1, r2
 8011968:	1a9b      	subs	r3, r3, r2
 801196a:	2b01      	cmp	r3, #1
 801196c:	d12e      	bne.n	80119cc <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801196e:	2322      	movs	r3, #34	@ 0x22
 8011970:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                    getPhy.Datarate = datarate;
 8011974:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011978:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	7c9b      	ldrb	r3, [r3, #18]
 8011980:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	7cdb      	ldrb	r3, [r3, #19]
 8011988:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801198c:	4611      	mov	r1, r2
 801198e:	4618      	mov	r0, r3
 8011990:	f002 f82c 	bl	80139ec <RegionGetPhyParam>
 8011994:	4603      	mov	r3, r0
 8011996:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8011998:	6a3b      	ldr	r3, [r7, #32]
 801199a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

                    if( datarate == minTxDatarate )
 801199e:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 80119a2:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d110      	bne.n	80119cc <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 80119aa:	2300      	movs	r3, #0
 80119ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        if( adrNext->UpdateChanMask == true )
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	791b      	ldrb	r3, [r3, #4]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d009      	beq.n	80119cc <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80119b8:	2302      	movs	r3, #2
 80119ba:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	7cdb      	ldrb	r3, [r3, #19]
 80119c0:	f107 0214 	add.w	r2, r7, #20
 80119c4:	4611      	mov	r1, r2
 80119c6:	4618      	mov	r0, r3
 80119c8:	f002 f847 	bl	8013a5a <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80119d2:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80119da:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80119dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80119e0:	4618      	mov	r0, r3
 80119e2:	3730      	adds	r7, #48	@ 0x30
 80119e4:	46bd      	mov	sp, r7
 80119e6:	bd80      	pop	{r7, pc}

080119e8 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b084      	sub	sp, #16
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	60f8      	str	r0, [r7, #12]
 80119f0:	60b9      	str	r1, [r7, #8]
 80119f2:	607a      	str	r2, [r7, #4]
 80119f4:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	789b      	ldrb	r3, [r3, #2]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d107      	bne.n	8011a0e <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	687a      	ldr	r2, [r7, #4]
 8011a02:	68b9      	ldr	r1, [r7, #8]
 8011a04:	68f8      	ldr	r0, [r7, #12]
 8011a06:	f7ff ff3b 	bl	8011880 <CalcNextV10X>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	e000      	b.n	8011a10 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8011a0e:	2300      	movs	r3, #0
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	3710      	adds	r7, #16
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}

08011a18 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8011a18:	b480      	push	{r7}
 8011a1a:	b085      	sub	sp, #20
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	60f8      	str	r0, [r7, #12]
 8011a20:	60b9      	str	r1, [r7, #8]
 8011a22:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011a24:	bf00      	nop
 8011a26:	3714      	adds	r7, #20
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bc80      	pop	{r7}
 8011a2c:	4770      	bx	lr

08011a2e <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8011a2e:	b480      	push	{r7}
 8011a30:	b083      	sub	sp, #12
 8011a32:	af00      	add	r7, sp, #0
 8011a34:	4603      	mov	r3, r0
 8011a36:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011a38:	bf00      	nop
 8011a3a:	370c      	adds	r7, #12
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bc80      	pop	{r7}
 8011a40:	4770      	bx	lr

08011a42 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8011a42:	b480      	push	{r7}
 8011a44:	b083      	sub	sp, #12
 8011a46:	af00      	add	r7, sp, #0
 8011a48:	4603      	mov	r3, r0
 8011a4a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011a4c:	bf00      	nop
 8011a4e:	370c      	adds	r7, #12
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bc80      	pop	{r7}
 8011a54:	4770      	bx	lr

08011a56 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8011a56:	b480      	push	{r7}
 8011a58:	b083      	sub	sp, #12
 8011a5a:	af00      	add	r7, sp, #0
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011a60:	bf00      	nop
 8011a62:	370c      	adds	r7, #12
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bc80      	pop	{r7}
 8011a68:	4770      	bx	lr

08011a6a <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8011a6a:	b480      	push	{r7}
 8011a6c:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8011a6e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bc80      	pop	{r7}
 8011a76:	4770      	bx	lr

08011a78 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8011a78:	b480      	push	{r7}
 8011a7a:	b083      	sub	sp, #12
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011a80:	bf00      	nop
 8011a82:	370c      	adds	r7, #12
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bc80      	pop	{r7}
 8011a88:	4770      	bx	lr

08011a8a <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8011a8a:	b480      	push	{r7}
 8011a8c:	b083      	sub	sp, #12
 8011a8e:	af00      	add	r7, sp, #0
 8011a90:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011a92:	bf00      	nop
 8011a94:	370c      	adds	r7, #12
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bc80      	pop	{r7}
 8011a9a:	4770      	bx	lr

08011a9c <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	b083      	sub	sp, #12
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011aa4:	bf00      	nop
 8011aa6:	370c      	adds	r7, #12
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bc80      	pop	{r7}
 8011aac:	4770      	bx	lr

08011aae <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8011aae:	b480      	push	{r7}
 8011ab0:	b083      	sub	sp, #12
 8011ab2:	af00      	add	r7, sp, #0
 8011ab4:	6078      	str	r0, [r7, #4]
 8011ab6:	460b      	mov	r3, r1
 8011ab8:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8011aba:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	370c      	adds	r7, #12
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bc80      	pop	{r7}
 8011ac4:	4770      	bx	lr

08011ac6 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8011ac6:	b480      	push	{r7}
 8011ac8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011aca:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011acc:	4618      	mov	r0, r3
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bc80      	pop	{r7}
 8011ad2:	4770      	bx	lr

08011ad4 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8011ad4:	b480      	push	{r7}
 8011ad6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011ad8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bc80      	pop	{r7}
 8011ae0:	4770      	bx	lr

08011ae2 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8011ae2:	b480      	push	{r7}
 8011ae4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011ae6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ae8:	4618      	mov	r0, r3
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bc80      	pop	{r7}
 8011aee:	4770      	bx	lr

08011af0 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8011af0:	b480      	push	{r7}
 8011af2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011af4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bc80      	pop	{r7}
 8011afc:	4770      	bx	lr

08011afe <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8011afe:	b480      	push	{r7}
 8011b00:	b083      	sub	sp, #12
 8011b02:	af00      	add	r7, sp, #0
 8011b04:	4603      	mov	r3, r0
 8011b06:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b08:	bf00      	nop
 8011b0a:	370c      	adds	r7, #12
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bc80      	pop	{r7}
 8011b10:	4770      	bx	lr

08011b12 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8011b12:	b480      	push	{r7}
 8011b14:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b16:	bf00      	nop
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bc80      	pop	{r7}
 8011b1c:	4770      	bx	lr

08011b1e <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8011b1e:	b480      	push	{r7}
 8011b20:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b22:	bf00      	nop
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bc80      	pop	{r7}
 8011b28:	4770      	bx	lr

08011b2a <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8011b2a:	b480      	push	{r7}
 8011b2c:	b083      	sub	sp, #12
 8011b2e:	af00      	add	r7, sp, #0
 8011b30:	4603      	mov	r3, r0
 8011b32:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011b34:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	370c      	adds	r7, #12
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bc80      	pop	{r7}
 8011b3e:	4770      	bx	lr

08011b40 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8011b40:	b480      	push	{r7}
 8011b42:	b083      	sub	sp, #12
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011b48:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	370c      	adds	r7, #12
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bc80      	pop	{r7}
 8011b52:	4770      	bx	lr

08011b54 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8011b54:	b480      	push	{r7}
 8011b56:	b083      	sub	sp, #12
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011b5c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	370c      	adds	r7, #12
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bc80      	pop	{r7}
 8011b66:	4770      	bx	lr

08011b68 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8011b68:	b480      	push	{r7}
 8011b6a:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b6c:	bf00      	nop
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bc80      	pop	{r7}
 8011b72:	4770      	bx	lr

08011b74 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8011b74:	b480      	push	{r7}
 8011b76:	b083      	sub	sp, #12
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	6039      	str	r1, [r7, #0]
 8011b7e:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8011b80:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b82:	4618      	mov	r0, r3
 8011b84:	370c      	adds	r7, #12
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bc80      	pop	{r7}
 8011b8a:	4770      	bx	lr

08011b8c <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b083      	sub	sp, #12
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	4603      	mov	r3, r0
 8011b94:	603a      	str	r2, [r7, #0]
 8011b96:	80fb      	strh	r3, [r7, #6]
 8011b98:	460b      	mov	r3, r1
 8011b9a:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b9c:	bf00      	nop
 8011b9e:	370c      	adds	r7, #12
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bc80      	pop	{r7}
 8011ba4:	4770      	bx	lr

08011ba6 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8011ba6:	b480      	push	{r7}
 8011ba8:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011baa:	bf00      	nop
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bc80      	pop	{r7}
 8011bb0:	4770      	bx	lr

08011bb2 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8011bb2:	b480      	push	{r7}
 8011bb4:	b083      	sub	sp, #12
 8011bb6:	af00      	add	r7, sp, #0
 8011bb8:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8011bba:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	370c      	adds	r7, #12
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bc80      	pop	{r7}
 8011bc4:	4770      	bx	lr

08011bc6 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8011bc6:	b480      	push	{r7}
 8011bc8:	b083      	sub	sp, #12
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8011bce:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	370c      	adds	r7, #12
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bc80      	pop	{r7}
 8011bd8:	4770      	bx	lr

08011bda <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8011bda:	b480      	push	{r7}
 8011bdc:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011bde:	bf00      	nop
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bc80      	pop	{r7}
 8011be4:	4770      	bx	lr

08011be6 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8011be6:	b480      	push	{r7}
 8011be8:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011bea:	bf00      	nop
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bc80      	pop	{r7}
 8011bf0:	4770      	bx	lr

08011bf2 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8011bf2:	b480      	push	{r7}
 8011bf4:	b085      	sub	sp, #20
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011bfe:	2300      	movs	r3, #0
 8011c00:	81fb      	strh	r3, [r7, #14]
 8011c02:	e00a      	b.n	8011c1a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8011c04:	89fb      	ldrh	r3, [r7, #14]
 8011c06:	68ba      	ldr	r2, [r7, #8]
 8011c08:	4413      	add	r3, r2
 8011c0a:	781b      	ldrb	r3, [r3, #0]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d001      	beq.n	8011c14 <IsSlotFree+0x22>
        {
            return false;
 8011c10:	2300      	movs	r3, #0
 8011c12:	e006      	b.n	8011c22 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011c14:	89fb      	ldrh	r3, [r7, #14]
 8011c16:	3301      	adds	r3, #1
 8011c18:	81fb      	strh	r3, [r7, #14]
 8011c1a:	89fb      	ldrh	r3, [r7, #14]
 8011c1c:	2b0f      	cmp	r3, #15
 8011c1e:	d9f1      	bls.n	8011c04 <IsSlotFree+0x12>
        }
    }
    return true;
 8011c20:	2301      	movs	r3, #1
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	3714      	adds	r7, #20
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bc80      	pop	{r7}
 8011c2a:	4770      	bx	lr

08011c2c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b082      	sub	sp, #8
 8011c30:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8011c32:	2300      	movs	r3, #0
 8011c34:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8011c36:	e007      	b.n	8011c48 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8011c38:	79fb      	ldrb	r3, [r7, #7]
 8011c3a:	3301      	adds	r3, #1
 8011c3c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8011c3e:	79fb      	ldrb	r3, [r7, #7]
 8011c40:	2b0f      	cmp	r3, #15
 8011c42:	d101      	bne.n	8011c48 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8011c44:	2300      	movs	r3, #0
 8011c46:	e012      	b.n	8011c6e <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8011c48:	79fb      	ldrb	r3, [r7, #7]
 8011c4a:	011b      	lsls	r3, r3, #4
 8011c4c:	3308      	adds	r3, #8
 8011c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8011c78 <MallocNewMacCommandSlot+0x4c>)
 8011c50:	4413      	add	r3, r2
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7ff ffcd 	bl	8011bf2 <IsSlotFree>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	f083 0301 	eor.w	r3, r3, #1
 8011c5e:	b2db      	uxtb	r3, r3
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d1e9      	bne.n	8011c38 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8011c64:	79fb      	ldrb	r3, [r7, #7]
 8011c66:	011b      	lsls	r3, r3, #4
 8011c68:	3308      	adds	r3, #8
 8011c6a:	4a03      	ldr	r2, [pc, #12]	@ (8011c78 <MallocNewMacCommandSlot+0x4c>)
 8011c6c:	4413      	add	r3, r2
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	3708      	adds	r7, #8
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}
 8011c76:	bf00      	nop
 8011c78:	20001264 	.word	0x20001264

08011c7c <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d101      	bne.n	8011c8e <FreeMacCommandSlot+0x12>
    {
        return false;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	e005      	b.n	8011c9a <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8011c8e:	2210      	movs	r2, #16
 8011c90:	2100      	movs	r1, #0
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	f005 fdb8 	bl	8017808 <memset1>

    return true;
 8011c98:	2301      	movs	r3, #1
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3708      	adds	r7, #8
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}

08011ca2 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8011ca2:	b480      	push	{r7}
 8011ca4:	b083      	sub	sp, #12
 8011ca6:	af00      	add	r7, sp, #0
 8011ca8:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d101      	bne.n	8011cb4 <LinkedListInit+0x12>
    {
        return false;
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	e006      	b.n	8011cc2 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	605a      	str	r2, [r3, #4]

    return true;
 8011cc0:	2301      	movs	r3, #1
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	370c      	adds	r7, #12
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bc80      	pop	{r7}
 8011cca:	4770      	bx	lr

08011ccc <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8011ccc:	b480      	push	{r7}
 8011cce:	b083      	sub	sp, #12
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
 8011cd4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d002      	beq.n	8011ce2 <LinkedListAdd+0x16>
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d101      	bne.n	8011ce6 <LinkedListAdd+0x1a>
    {
        return false;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	e015      	b.n	8011d12 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d102      	bne.n	8011cf4 <LinkedListAdd+0x28>
    {
        list->First = element;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	683a      	ldr	r2, [r7, #0]
 8011cf2:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	685b      	ldr	r3, [r3, #4]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d003      	beq.n	8011d04 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	685b      	ldr	r3, [r3, #4]
 8011d00:	683a      	ldr	r2, [r7, #0]
 8011d02:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	2200      	movs	r2, #0
 8011d08:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	683a      	ldr	r2, [r7, #0]
 8011d0e:	605a      	str	r2, [r3, #4]

    return true;
 8011d10:	2301      	movs	r3, #1
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	370c      	adds	r7, #12
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bc80      	pop	{r7}
 8011d1a:	4770      	bx	lr

08011d1c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b085      	sub	sp, #20
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d002      	beq.n	8011d32 <LinkedListGetPrevious+0x16>
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d101      	bne.n	8011d36 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8011d32:	2300      	movs	r3, #0
 8011d34:	e016      	b.n	8011d64 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8011d3c:	683a      	ldr	r2, [r7, #0]
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d00c      	beq.n	8011d5e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8011d44:	e002      	b.n	8011d4c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d007      	beq.n	8011d62 <LinkedListGetPrevious+0x46>
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	683a      	ldr	r2, [r7, #0]
 8011d58:	429a      	cmp	r2, r3
 8011d5a:	d1f4      	bne.n	8011d46 <LinkedListGetPrevious+0x2a>
 8011d5c:	e001      	b.n	8011d62 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8011d62:	68fb      	ldr	r3, [r7, #12]
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	3714      	adds	r7, #20
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bc80      	pop	{r7}
 8011d6c:	4770      	bx	lr

08011d6e <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8011d6e:	b580      	push	{r7, lr}
 8011d70:	b084      	sub	sp, #16
 8011d72:	af00      	add	r7, sp, #0
 8011d74:	6078      	str	r0, [r7, #4]
 8011d76:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d002      	beq.n	8011d84 <LinkedListRemove+0x16>
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d101      	bne.n	8011d88 <LinkedListRemove+0x1a>
    {
        return false;
 8011d84:	2300      	movs	r3, #0
 8011d86:	e020      	b.n	8011dca <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8011d88:	6839      	ldr	r1, [r7, #0]
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f7ff ffc6 	bl	8011d1c <LinkedListGetPrevious>
 8011d90:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	683a      	ldr	r2, [r7, #0]
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d103      	bne.n	8011da4 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	681a      	ldr	r2, [r3, #0]
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	683a      	ldr	r2, [r7, #0]
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d102      	bne.n	8011db4 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	68fa      	ldr	r2, [r7, #12]
 8011db2:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d003      	beq.n	8011dc2 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	681a      	ldr	r2, [r3, #0]
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8011dc2:	683b      	ldr	r3, [r7, #0]
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	601a      	str	r2, [r3, #0]

    return true;
 8011dc8:	2301      	movs	r3, #1
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	3710      	adds	r7, #16
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}

08011dd2 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8011dd2:	b480      	push	{r7}
 8011dd4:	b083      	sub	sp, #12
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	4603      	mov	r3, r0
 8011dda:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8011ddc:	79fb      	ldrb	r3, [r7, #7]
 8011dde:	2b05      	cmp	r3, #5
 8011de0:	d004      	beq.n	8011dec <IsSticky+0x1a>
 8011de2:	2b05      	cmp	r3, #5
 8011de4:	db04      	blt.n	8011df0 <IsSticky+0x1e>
 8011de6:	3b08      	subs	r3, #8
 8011de8:	2b02      	cmp	r3, #2
 8011dea:	d801      	bhi.n	8011df0 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8011dec:	2301      	movs	r3, #1
 8011dee:	e000      	b.n	8011df2 <IsSticky+0x20>
        default:
            return false;
 8011df0:	2300      	movs	r3, #0
    }
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	370c      	adds	r7, #12
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bc80      	pop	{r7}
 8011dfa:	4770      	bx	lr

08011dfc <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8011dfc:	b480      	push	{r7}
 8011dfe:	b083      	sub	sp, #12
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	4603      	mov	r3, r0
 8011e04:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8011e06:	2300      	movs	r3, #0
    }
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	370c      	adds	r7, #12
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bc80      	pop	{r7}
 8011e10:	4770      	bx	lr
	...

08011e14 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8011e18:	22fc      	movs	r2, #252	@ 0xfc
 8011e1a:	2100      	movs	r1, #0
 8011e1c:	4804      	ldr	r0, [pc, #16]	@ (8011e30 <LoRaMacCommandsInit+0x1c>)
 8011e1e:	f005 fcf3 	bl	8017808 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8011e22:	4803      	ldr	r0, [pc, #12]	@ (8011e30 <LoRaMacCommandsInit+0x1c>)
 8011e24:	f7ff ff3d 	bl	8011ca2 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8011e28:	2300      	movs	r3, #0
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	bd80      	pop	{r7, pc}
 8011e2e:	bf00      	nop
 8011e30:	20001264 	.word	0x20001264

08011e34 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b086      	sub	sp, #24
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	60b9      	str	r1, [r7, #8]
 8011e3e:	607a      	str	r2, [r7, #4]
 8011e40:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d101      	bne.n	8011e4c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011e48:	2301      	movs	r3, #1
 8011e4a:	e03b      	b.n	8011ec4 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8011e4c:	f7ff feee 	bl	8011c2c <MallocNewMacCommandSlot>
 8011e50:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d101      	bne.n	8011e5c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8011e58:	2302      	movs	r3, #2
 8011e5a:	e033      	b.n	8011ec4 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8011e5c:	6979      	ldr	r1, [r7, #20]
 8011e5e:	481b      	ldr	r0, [pc, #108]	@ (8011ecc <LoRaMacCommandsAddCmd+0x98>)
 8011e60:	f7ff ff34 	bl	8011ccc <LinkedListAdd>
 8011e64:	4603      	mov	r3, r0
 8011e66:	f083 0301 	eor.w	r3, r3, #1
 8011e6a:	b2db      	uxtb	r3, r3
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d001      	beq.n	8011e74 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8011e70:	2305      	movs	r3, #5
 8011e72:	e027      	b.n	8011ec4 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8011e74:	697b      	ldr	r3, [r7, #20]
 8011e76:	7bfa      	ldrb	r2, [r7, #15]
 8011e78:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	687a      	ldr	r2, [r7, #4]
 8011e7e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8011e80:	697b      	ldr	r3, [r7, #20]
 8011e82:	3305      	adds	r3, #5
 8011e84:	687a      	ldr	r2, [r7, #4]
 8011e86:	b292      	uxth	r2, r2
 8011e88:	68b9      	ldr	r1, [r7, #8]
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f005 fc81 	bl	8017792 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8011e90:	7bfb      	ldrb	r3, [r7, #15]
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7ff ff9d 	bl	8011dd2 <IsSticky>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	461a      	mov	r2, r3
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8011ea0:	7bfb      	ldrb	r3, [r7, #15]
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f7ff ffaa 	bl	8011dfc <IsConfirmationRequired>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	461a      	mov	r2, r3
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8011eb0:	4b06      	ldr	r3, [pc, #24]	@ (8011ecc <LoRaMacCommandsAddCmd+0x98>)
 8011eb2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	4413      	add	r3, r2
 8011eba:	3301      	adds	r3, #1
 8011ebc:	4a03      	ldr	r2, [pc, #12]	@ (8011ecc <LoRaMacCommandsAddCmd+0x98>)
 8011ebe:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8011ec2:	2300      	movs	r3, #0
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3718      	adds	r7, #24
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}
 8011ecc:	20001264 	.word	0x20001264

08011ed0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b082      	sub	sp, #8
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d101      	bne.n	8011ee2 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011ede:	2301      	movs	r3, #1
 8011ee0:	e021      	b.n	8011f26 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8011ee2:	6879      	ldr	r1, [r7, #4]
 8011ee4:	4812      	ldr	r0, [pc, #72]	@ (8011f30 <LoRaMacCommandsRemoveCmd+0x60>)
 8011ee6:	f7ff ff42 	bl	8011d6e <LinkedListRemove>
 8011eea:	4603      	mov	r3, r0
 8011eec:	f083 0301 	eor.w	r3, r3, #1
 8011ef0:	b2db      	uxtb	r3, r3
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d001      	beq.n	8011efa <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8011ef6:	2303      	movs	r3, #3
 8011ef8:	e015      	b.n	8011f26 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8011efa:	4b0d      	ldr	r3, [pc, #52]	@ (8011f30 <LoRaMacCommandsRemoveCmd+0x60>)
 8011efc:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	689b      	ldr	r3, [r3, #8]
 8011f04:	1ad3      	subs	r3, r2, r3
 8011f06:	3b01      	subs	r3, #1
 8011f08:	4a09      	ldr	r2, [pc, #36]	@ (8011f30 <LoRaMacCommandsRemoveCmd+0x60>)
 8011f0a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f7ff feb4 	bl	8011c7c <FreeMacCommandSlot>
 8011f14:	4603      	mov	r3, r0
 8011f16:	f083 0301 	eor.w	r3, r3, #1
 8011f1a:	b2db      	uxtb	r3, r3
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d001      	beq.n	8011f24 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8011f20:	2305      	movs	r3, #5
 8011f22:	e000      	b.n	8011f26 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011f24:	2300      	movs	r3, #0
}
 8011f26:	4618      	mov	r0, r3
 8011f28:	3708      	adds	r7, #8
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}
 8011f2e:	bf00      	nop
 8011f30:	20001264 	.word	0x20001264

08011f34 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8011f34:	b480      	push	{r7}
 8011f36:	b085      	sub	sp, #20
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	6039      	str	r1, [r7, #0]
 8011f3e:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8011f40:	4b0e      	ldr	r3, [pc, #56]	@ (8011f7c <LoRaMacCommandsGetCmd+0x48>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8011f46:	e002      	b.n	8011f4e <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d004      	beq.n	8011f5e <LoRaMacCommandsGetCmd+0x2a>
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	791b      	ldrb	r3, [r3, #4]
 8011f58:	79fa      	ldrb	r2, [r7, #7]
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d1f4      	bne.n	8011f48 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	68fa      	ldr	r2, [r7, #12]
 8011f62:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d101      	bne.n	8011f6e <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8011f6a:	2303      	movs	r3, #3
 8011f6c:	e000      	b.n	8011f70 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8011f6e:	2300      	movs	r3, #0
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	3714      	adds	r7, #20
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bc80      	pop	{r7}
 8011f78:	4770      	bx	lr
 8011f7a:	bf00      	nop
 8011f7c:	20001264 	.word	0x20001264

08011f80 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b082      	sub	sp, #8
 8011f84:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8011f86:	4b0f      	ldr	r3, [pc, #60]	@ (8011fc4 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8011f8c:	e012      	b.n	8011fb4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	7b1b      	ldrb	r3, [r3, #12]
 8011f92:	f083 0301 	eor.w	r3, r3, #1
 8011f96:	b2db      	uxtb	r3, r3
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d008      	beq.n	8011fae <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f7ff ff94 	bl	8011ed0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	607b      	str	r3, [r7, #4]
 8011fac:	e002      	b.n	8011fb4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d1e9      	bne.n	8011f8e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011fba:	2300      	movs	r3, #0
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3708      	adds	r7, #8
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	20001264 	.word	0x20001264

08011fc8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b082      	sub	sp, #8
 8011fcc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8011fce:	4b13      	ldr	r3, [pc, #76]	@ (801201c <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8011fd4:	e01a      	b.n	801200c <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	791b      	ldrb	r3, [r3, #4]
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f7ff fef6 	bl	8011dd2 <IsSticky>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d00d      	beq.n	8012008 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	791b      	ldrb	r3, [r3, #4]
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7ff ff03 	bl	8011dfc <IsConfirmationRequired>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	f083 0301 	eor.w	r3, r3, #1
 8011ffc:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d002      	beq.n	8012008 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f7ff ff64 	bl	8011ed0 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d1e1      	bne.n	8011fd6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012012:	2300      	movs	r3, #0
}
 8012014:	4618      	mov	r0, r3
 8012016:	3708      	adds	r7, #8
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}
 801201c:	20001264 	.word	0x20001264

08012020 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8012020:	b480      	push	{r7}
 8012022:	b083      	sub	sp, #12
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d101      	bne.n	8012032 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801202e:	2301      	movs	r3, #1
 8012030:	e005      	b.n	801203e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8012032:	4b05      	ldr	r3, [pc, #20]	@ (8012048 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012034:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 801203c:	2300      	movs	r3, #0
}
 801203e:	4618      	mov	r0, r3
 8012040:	370c      	adds	r7, #12
 8012042:	46bd      	mov	sp, r7
 8012044:	bc80      	pop	{r7}
 8012046:	4770      	bx	lr
 8012048:	20001264 	.word	0x20001264

0801204c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b088      	sub	sp, #32
 8012050:	af00      	add	r7, sp, #0
 8012052:	60f8      	str	r0, [r7, #12]
 8012054:	60b9      	str	r1, [r7, #8]
 8012056:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8012058:	4b25      	ldr	r3, [pc, #148]	@ (80120f0 <LoRaMacCommandsSerializeCmds+0xa4>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801205e:	2300      	movs	r3, #0
 8012060:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d002      	beq.n	801206e <LoRaMacCommandsSerializeCmds+0x22>
 8012068:	68bb      	ldr	r3, [r7, #8]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d126      	bne.n	80120bc <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801206e:	2301      	movs	r3, #1
 8012070:	e039      	b.n	80120e6 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8012072:	7efb      	ldrb	r3, [r7, #27]
 8012074:	68fa      	ldr	r2, [r7, #12]
 8012076:	1ad2      	subs	r2, r2, r3
 8012078:	69fb      	ldr	r3, [r7, #28]
 801207a:	689b      	ldr	r3, [r3, #8]
 801207c:	3301      	adds	r3, #1
 801207e:	429a      	cmp	r2, r3
 8012080:	d320      	bcc.n	80120c4 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8012082:	7efb      	ldrb	r3, [r7, #27]
 8012084:	1c5a      	adds	r2, r3, #1
 8012086:	76fa      	strb	r2, [r7, #27]
 8012088:	461a      	mov	r2, r3
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	4413      	add	r3, r2
 801208e:	69fa      	ldr	r2, [r7, #28]
 8012090:	7912      	ldrb	r2, [r2, #4]
 8012092:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8012094:	7efb      	ldrb	r3, [r7, #27]
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	18d0      	adds	r0, r2, r3
 801209a:	69fb      	ldr	r3, [r7, #28]
 801209c:	1d59      	adds	r1, r3, #5
 801209e:	69fb      	ldr	r3, [r7, #28]
 80120a0:	689b      	ldr	r3, [r3, #8]
 80120a2:	b29b      	uxth	r3, r3
 80120a4:	461a      	mov	r2, r3
 80120a6:	f005 fb74 	bl	8017792 <memcpy1>
            itr += curElement->PayloadSize;
 80120aa:	69fb      	ldr	r3, [r7, #28]
 80120ac:	689b      	ldr	r3, [r3, #8]
 80120ae:	b2da      	uxtb	r2, r3
 80120b0:	7efb      	ldrb	r3, [r7, #27]
 80120b2:	4413      	add	r3, r2
 80120b4:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80120b6:	69fb      	ldr	r3, [r7, #28]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80120bc:	69fb      	ldr	r3, [r7, #28]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d1d7      	bne.n	8012072 <LoRaMacCommandsSerializeCmds+0x26>
 80120c2:	e009      	b.n	80120d8 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80120c4:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80120c6:	e007      	b.n	80120d8 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80120c8:	69fb      	ldr	r3, [r7, #28]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80120ce:	69f8      	ldr	r0, [r7, #28]
 80120d0:	f7ff fefe 	bl	8011ed0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80120d8:	69fb      	ldr	r3, [r7, #28]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d1f4      	bne.n	80120c8 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80120de:	68b8      	ldr	r0, [r7, #8]
 80120e0:	f7ff ff9e 	bl	8012020 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80120e4:	2300      	movs	r3, #0
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	3720      	adds	r7, #32
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}
 80120ee:	bf00      	nop
 80120f0:	20001264 	.word	0x20001264

080120f4 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80120f4:	b480      	push	{r7}
 80120f6:	b085      	sub	sp, #20
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	4603      	mov	r3, r0
 80120fc:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80120fe:	2300      	movs	r3, #0
 8012100:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8012102:	79fb      	ldrb	r3, [r7, #7]
 8012104:	3b02      	subs	r3, #2
 8012106:	2b11      	cmp	r3, #17
 8012108:	d850      	bhi.n	80121ac <LoRaMacCommandsGetCmdSize+0xb8>
 801210a:	a201      	add	r2, pc, #4	@ (adr r2, 8012110 <LoRaMacCommandsGetCmdSize+0x1c>)
 801210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012110:	08012159 	.word	0x08012159
 8012114:	0801215f 	.word	0x0801215f
 8012118:	08012165 	.word	0x08012165
 801211c:	0801216b 	.word	0x0801216b
 8012120:	08012171 	.word	0x08012171
 8012124:	08012177 	.word	0x08012177
 8012128:	0801217d 	.word	0x0801217d
 801212c:	08012183 	.word	0x08012183
 8012130:	08012189 	.word	0x08012189
 8012134:	080121ad 	.word	0x080121ad
 8012138:	080121ad 	.word	0x080121ad
 801213c:	0801218f 	.word	0x0801218f
 8012140:	080121ad 	.word	0x080121ad
 8012144:	080121ad 	.word	0x080121ad
 8012148:	08012195 	.word	0x08012195
 801214c:	0801219b 	.word	0x0801219b
 8012150:	080121a1 	.word	0x080121a1
 8012154:	080121a7 	.word	0x080121a7
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8012158:	2303      	movs	r3, #3
 801215a:	73fb      	strb	r3, [r7, #15]
            break;
 801215c:	e027      	b.n	80121ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801215e:	2305      	movs	r3, #5
 8012160:	73fb      	strb	r3, [r7, #15]
            break;
 8012162:	e024      	b.n	80121ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8012164:	2302      	movs	r3, #2
 8012166:	73fb      	strb	r3, [r7, #15]
            break;
 8012168:	e021      	b.n	80121ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801216a:	2305      	movs	r3, #5
 801216c:	73fb      	strb	r3, [r7, #15]
            break;
 801216e:	e01e      	b.n	80121ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8012170:	2301      	movs	r3, #1
 8012172:	73fb      	strb	r3, [r7, #15]
            break;
 8012174:	e01b      	b.n	80121ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8012176:	2306      	movs	r3, #6
 8012178:	73fb      	strb	r3, [r7, #15]
            break;
 801217a:	e018      	b.n	80121ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801217c:	2302      	movs	r3, #2
 801217e:	73fb      	strb	r3, [r7, #15]
            break;
 8012180:	e015      	b.n	80121ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8012182:	2302      	movs	r3, #2
 8012184:	73fb      	strb	r3, [r7, #15]
            break;
 8012186:	e012      	b.n	80121ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8012188:	2305      	movs	r3, #5
 801218a:	73fb      	strb	r3, [r7, #15]
            break;
 801218c:	e00f      	b.n	80121ae <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801218e:	2306      	movs	r3, #6
 8012190:	73fb      	strb	r3, [r7, #15]
            break;
 8012192:	e00c      	b.n	80121ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8012194:	2301      	movs	r3, #1
 8012196:	73fb      	strb	r3, [r7, #15]
            break;
 8012198:	e009      	b.n	80121ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801219a:	2305      	movs	r3, #5
 801219c:	73fb      	strb	r3, [r7, #15]
            break;
 801219e:	e006      	b.n	80121ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80121a0:	2304      	movs	r3, #4
 80121a2:	73fb      	strb	r3, [r7, #15]
            break;
 80121a4:	e003      	b.n	80121ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80121a6:	2304      	movs	r3, #4
 80121a8:	73fb      	strb	r3, [r7, #15]
            break;
 80121aa:	e000      	b.n	80121ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80121ac:	bf00      	nop
        }
    }
    return cidSize;
 80121ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3714      	adds	r7, #20
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bc80      	pop	{r7}
 80121b8:	4770      	bx	lr
 80121ba:	bf00      	nop

080121bc <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80121bc:	b480      	push	{r7}
 80121be:	b083      	sub	sp, #12
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	4a07      	ldr	r2, [pc, #28]	@ (80121e4 <IncreaseBufferPointer+0x28>)
 80121c8:	4293      	cmp	r3, r2
 80121ca:	d102      	bne.n	80121d2 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80121cc:	4b06      	ldr	r3, [pc, #24]	@ (80121e8 <IncreaseBufferPointer+0x2c>)
 80121ce:	607b      	str	r3, [r7, #4]
 80121d0:	e002      	b.n	80121d8 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	3304      	adds	r3, #4
 80121d6:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80121d8:	687b      	ldr	r3, [r7, #4]
}
 80121da:	4618      	mov	r0, r3
 80121dc:	370c      	adds	r7, #12
 80121de:	46bd      	mov	sp, r7
 80121e0:	bc80      	pop	{r7}
 80121e2:	4770      	bx	lr
 80121e4:	2000137c 	.word	0x2000137c
 80121e8:	2000136c 	.word	0x2000136c

080121ec <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80121ec:	b480      	push	{r7}
 80121ee:	b083      	sub	sp, #12
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	4603      	mov	r3, r0
 80121f4:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80121f6:	79fb      	ldrb	r3, [r7, #7]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d101      	bne.n	8012200 <IsListEmpty+0x14>
    {
        return true;
 80121fc:	2301      	movs	r3, #1
 80121fe:	e000      	b.n	8012202 <IsListEmpty+0x16>
    }
    return false;
 8012200:	2300      	movs	r3, #0
}
 8012202:	4618      	mov	r0, r3
 8012204:	370c      	adds	r7, #12
 8012206:	46bd      	mov	sp, r7
 8012208:	bc80      	pop	{r7}
 801220a:	4770      	bx	lr

0801220c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801220c:	b480      	push	{r7}
 801220e:	b083      	sub	sp, #12
 8012210:	af00      	add	r7, sp, #0
 8012212:	4603      	mov	r3, r0
 8012214:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8012216:	79fb      	ldrb	r3, [r7, #7]
 8012218:	2b04      	cmp	r3, #4
 801221a:	d901      	bls.n	8012220 <IsListFull+0x14>
    {
        return true;
 801221c:	2301      	movs	r3, #1
 801221e:	e000      	b.n	8012222 <IsListFull+0x16>
    }
    return false;
 8012220:	2300      	movs	r3, #0
}
 8012222:	4618      	mov	r0, r3
 8012224:	370c      	adds	r7, #12
 8012226:	46bd      	mov	sp, r7
 8012228:	bc80      	pop	{r7}
 801222a:	4770      	bx	lr

0801222c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b086      	sub	sp, #24
 8012230:	af00      	add	r7, sp, #0
 8012232:	4603      	mov	r3, r0
 8012234:	60b9      	str	r1, [r7, #8]
 8012236:	607a      	str	r2, [r7, #4]
 8012238:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801223e:	4b13      	ldr	r3, [pc, #76]	@ (801228c <GetElement+0x60>)
 8012240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012244:	4618      	mov	r0, r3
 8012246:	f7ff ffd1 	bl	80121ec <IsListEmpty>
 801224a:	4603      	mov	r3, r0
 801224c:	2b00      	cmp	r3, #0
 801224e:	d001      	beq.n	8012254 <GetElement+0x28>
    {
        return NULL;
 8012250:	2300      	movs	r3, #0
 8012252:	e017      	b.n	8012284 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012254:	2300      	movs	r3, #0
 8012256:	74fb      	strb	r3, [r7, #19]
 8012258:	e00d      	b.n	8012276 <GetElement+0x4a>
    {
        if( element->Request == request )
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	781b      	ldrb	r3, [r3, #0]
 801225e:	7bfa      	ldrb	r2, [r7, #15]
 8012260:	429a      	cmp	r2, r3
 8012262:	d101      	bne.n	8012268 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	e00d      	b.n	8012284 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8012268:	6978      	ldr	r0, [r7, #20]
 801226a:	f7ff ffa7 	bl	80121bc <IncreaseBufferPointer>
 801226e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012270:	7cfb      	ldrb	r3, [r7, #19]
 8012272:	3301      	adds	r3, #1
 8012274:	74fb      	strb	r3, [r7, #19]
 8012276:	4b05      	ldr	r3, [pc, #20]	@ (801228c <GetElement+0x60>)
 8012278:	f893 3020 	ldrb.w	r3, [r3, #32]
 801227c:	7cfa      	ldrb	r2, [r7, #19]
 801227e:	429a      	cmp	r2, r3
 8012280:	d3eb      	bcc.n	801225a <GetElement+0x2e>
    }

    return NULL;
 8012282:	2300      	movs	r3, #0
}
 8012284:	4618      	mov	r0, r3
 8012286:	3718      	adds	r7, #24
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}
 801228c:	20001360 	.word	0x20001360

08012290 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b082      	sub	sp, #8
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012298:	4a0c      	ldr	r2, [pc, #48]	@ (80122cc <LoRaMacConfirmQueueInit+0x3c>)
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801229e:	4b0b      	ldr	r3, [pc, #44]	@ (80122cc <LoRaMacConfirmQueueInit+0x3c>)
 80122a0:	2200      	movs	r2, #0
 80122a2:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80122a6:	4b09      	ldr	r3, [pc, #36]	@ (80122cc <LoRaMacConfirmQueueInit+0x3c>)
 80122a8:	4a09      	ldr	r2, [pc, #36]	@ (80122d0 <LoRaMacConfirmQueueInit+0x40>)
 80122aa:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80122ac:	4b07      	ldr	r3, [pc, #28]	@ (80122cc <LoRaMacConfirmQueueInit+0x3c>)
 80122ae:	4a08      	ldr	r2, [pc, #32]	@ (80122d0 <LoRaMacConfirmQueueInit+0x40>)
 80122b0:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80122b2:	2214      	movs	r2, #20
 80122b4:	21ff      	movs	r1, #255	@ 0xff
 80122b6:	4806      	ldr	r0, [pc, #24]	@ (80122d0 <LoRaMacConfirmQueueInit+0x40>)
 80122b8:	f005 faa6 	bl	8017808 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80122bc:	4b03      	ldr	r3, [pc, #12]	@ (80122cc <LoRaMacConfirmQueueInit+0x3c>)
 80122be:	2201      	movs	r2, #1
 80122c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80122c4:	bf00      	nop
 80122c6:	3708      	adds	r7, #8
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd80      	pop	{r7, pc}
 80122cc:	20001360 	.word	0x20001360
 80122d0:	2000136c 	.word	0x2000136c

080122d4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b082      	sub	sp, #8
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80122dc:	4b19      	ldr	r3, [pc, #100]	@ (8012344 <LoRaMacConfirmQueueAdd+0x70>)
 80122de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7ff ff92 	bl	801220c <IsListFull>
 80122e8:	4603      	mov	r3, r0
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d001      	beq.n	80122f2 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80122ee:	2300      	movs	r3, #0
 80122f0:	e023      	b.n	801233a <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80122f2:	4b14      	ldr	r3, [pc, #80]	@ (8012344 <LoRaMacConfirmQueueAdd+0x70>)
 80122f4:	689b      	ldr	r3, [r3, #8]
 80122f6:	687a      	ldr	r2, [r7, #4]
 80122f8:	7812      	ldrb	r2, [r2, #0]
 80122fa:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80122fc:	4b11      	ldr	r3, [pc, #68]	@ (8012344 <LoRaMacConfirmQueueAdd+0x70>)
 80122fe:	689b      	ldr	r3, [r3, #8]
 8012300:	687a      	ldr	r2, [r7, #4]
 8012302:	7852      	ldrb	r2, [r2, #1]
 8012304:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012306:	4b0f      	ldr	r3, [pc, #60]	@ (8012344 <LoRaMacConfirmQueueAdd+0x70>)
 8012308:	689b      	ldr	r3, [r3, #8]
 801230a:	687a      	ldr	r2, [r7, #4]
 801230c:	78d2      	ldrb	r2, [r2, #3]
 801230e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8012310:	4b0c      	ldr	r3, [pc, #48]	@ (8012344 <LoRaMacConfirmQueueAdd+0x70>)
 8012312:	689b      	ldr	r3, [r3, #8]
 8012314:	2200      	movs	r2, #0
 8012316:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012318:	4b0a      	ldr	r3, [pc, #40]	@ (8012344 <LoRaMacConfirmQueueAdd+0x70>)
 801231a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801231e:	3301      	adds	r3, #1
 8012320:	b2da      	uxtb	r2, r3
 8012322:	4b08      	ldr	r3, [pc, #32]	@ (8012344 <LoRaMacConfirmQueueAdd+0x70>)
 8012324:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012328:	4b06      	ldr	r3, [pc, #24]	@ (8012344 <LoRaMacConfirmQueueAdd+0x70>)
 801232a:	689b      	ldr	r3, [r3, #8]
 801232c:	4618      	mov	r0, r3
 801232e:	f7ff ff45 	bl	80121bc <IncreaseBufferPointer>
 8012332:	4603      	mov	r3, r0
 8012334:	4a03      	ldr	r2, [pc, #12]	@ (8012344 <LoRaMacConfirmQueueAdd+0x70>)
 8012336:	6093      	str	r3, [r2, #8]

    return true;
 8012338:	2301      	movs	r3, #1
}
 801233a:	4618      	mov	r0, r3
 801233c:	3708      	adds	r7, #8
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}
 8012342:	bf00      	nop
 8012344:	20001360 	.word	0x20001360

08012348 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012348:	b580      	push	{r7, lr}
 801234a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801234c:	4b0e      	ldr	r3, [pc, #56]	@ (8012388 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801234e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012352:	4618      	mov	r0, r3
 8012354:	f7ff ff4a 	bl	80121ec <IsListEmpty>
 8012358:	4603      	mov	r3, r0
 801235a:	2b00      	cmp	r3, #0
 801235c:	d001      	beq.n	8012362 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801235e:	2300      	movs	r3, #0
 8012360:	e010      	b.n	8012384 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8012362:	4b09      	ldr	r3, [pc, #36]	@ (8012388 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012368:	3b01      	subs	r3, #1
 801236a:	b2da      	uxtb	r2, r3
 801236c:	4b06      	ldr	r3, [pc, #24]	@ (8012388 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801236e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8012372:	4b05      	ldr	r3, [pc, #20]	@ (8012388 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012374:	685b      	ldr	r3, [r3, #4]
 8012376:	4618      	mov	r0, r3
 8012378:	f7ff ff20 	bl	80121bc <IncreaseBufferPointer>
 801237c:	4603      	mov	r3, r0
 801237e:	4a02      	ldr	r2, [pc, #8]	@ (8012388 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012380:	6053      	str	r3, [r2, #4]

    return true;
 8012382:	2301      	movs	r3, #1
}
 8012384:	4618      	mov	r0, r3
 8012386:	bd80      	pop	{r7, pc}
 8012388:	20001360 	.word	0x20001360

0801238c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b084      	sub	sp, #16
 8012390:	af00      	add	r7, sp, #0
 8012392:	4603      	mov	r3, r0
 8012394:	460a      	mov	r2, r1
 8012396:	71fb      	strb	r3, [r7, #7]
 8012398:	4613      	mov	r3, r2
 801239a:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 801239c:	2300      	movs	r3, #0
 801239e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80123a0:	4b10      	ldr	r3, [pc, #64]	@ (80123e4 <LoRaMacConfirmQueueSetStatus+0x58>)
 80123a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7ff ff20 	bl	80121ec <IsListEmpty>
 80123ac:	4603      	mov	r3, r0
 80123ae:	f083 0301 	eor.w	r3, r3, #1
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d011      	beq.n	80123dc <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80123b8:	4b0a      	ldr	r3, [pc, #40]	@ (80123e4 <LoRaMacConfirmQueueSetStatus+0x58>)
 80123ba:	6859      	ldr	r1, [r3, #4]
 80123bc:	4b09      	ldr	r3, [pc, #36]	@ (80123e4 <LoRaMacConfirmQueueSetStatus+0x58>)
 80123be:	689a      	ldr	r2, [r3, #8]
 80123c0:	79bb      	ldrb	r3, [r7, #6]
 80123c2:	4618      	mov	r0, r3
 80123c4:	f7ff ff32 	bl	801222c <GetElement>
 80123c8:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d005      	beq.n	80123dc <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	79fa      	ldrb	r2, [r7, #7]
 80123d4:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	2201      	movs	r2, #1
 80123da:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80123dc:	bf00      	nop
 80123de:	3710      	adds	r7, #16
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bd80      	pop	{r7, pc}
 80123e4:	20001360 	.word	0x20001360

080123e8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b084      	sub	sp, #16
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	4603      	mov	r3, r0
 80123f0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80123f2:	2300      	movs	r3, #0
 80123f4:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80123f6:	4b10      	ldr	r3, [pc, #64]	@ (8012438 <LoRaMacConfirmQueueGetStatus+0x50>)
 80123f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7ff fef5 	bl	80121ec <IsListEmpty>
 8012402:	4603      	mov	r3, r0
 8012404:	f083 0301 	eor.w	r3, r3, #1
 8012408:	b2db      	uxtb	r3, r3
 801240a:	2b00      	cmp	r3, #0
 801240c:	d00e      	beq.n	801242c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801240e:	4b0a      	ldr	r3, [pc, #40]	@ (8012438 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012410:	6859      	ldr	r1, [r3, #4]
 8012412:	4b09      	ldr	r3, [pc, #36]	@ (8012438 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012414:	689a      	ldr	r2, [r3, #8]
 8012416:	79fb      	ldrb	r3, [r7, #7]
 8012418:	4618      	mov	r0, r3
 801241a:	f7ff ff07 	bl	801222c <GetElement>
 801241e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d002      	beq.n	801242c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	785b      	ldrb	r3, [r3, #1]
 801242a:	e000      	b.n	801242e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801242c:	2301      	movs	r3, #1
}
 801242e:	4618      	mov	r0, r3
 8012430:	3710      	adds	r7, #16
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
 8012436:	bf00      	nop
 8012438:	20001360 	.word	0x20001360

0801243c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b084      	sub	sp, #16
 8012440:	af00      	add	r7, sp, #0
 8012442:	4603      	mov	r3, r0
 8012444:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8012446:	4b16      	ldr	r3, [pc, #88]	@ (80124a0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012448:	685b      	ldr	r3, [r3, #4]
 801244a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 801244c:	4a14      	ldr	r2, [pc, #80]	@ (80124a0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801244e:	79fb      	ldrb	r3, [r7, #7]
 8012450:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012454:	4b12      	ldr	r3, [pc, #72]	@ (80124a0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012456:	f893 3020 	ldrb.w	r3, [r3, #32]
 801245a:	4618      	mov	r0, r3
 801245c:	f7ff fec6 	bl	80121ec <IsListEmpty>
 8012460:	4603      	mov	r3, r0
 8012462:	f083 0301 	eor.w	r3, r3, #1
 8012466:	b2db      	uxtb	r3, r3
 8012468:	2b00      	cmp	r3, #0
 801246a:	d015      	beq.n	8012498 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	79fa      	ldrb	r2, [r7, #7]
 8012470:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	78db      	ldrb	r3, [r3, #3]
 8012476:	f083 0301 	eor.w	r3, r3, #1
 801247a:	b2db      	uxtb	r3, r3
 801247c:	2b00      	cmp	r3, #0
 801247e:	d002      	beq.n	8012486 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	2201      	movs	r2, #1
 8012484:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8012486:	68f8      	ldr	r0, [r7, #12]
 8012488:	f7ff fe98 	bl	80121bc <IncreaseBufferPointer>
 801248c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801248e:	4b04      	ldr	r3, [pc, #16]	@ (80124a0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012490:	689b      	ldr	r3, [r3, #8]
 8012492:	68fa      	ldr	r2, [r7, #12]
 8012494:	429a      	cmp	r2, r3
 8012496:	d1e9      	bne.n	801246c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8012498:	bf00      	nop
 801249a:	3710      	adds	r7, #16
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}
 80124a0:	20001360 	.word	0x20001360

080124a4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b082      	sub	sp, #8
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	4603      	mov	r3, r0
 80124ac:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80124ae:	4b09      	ldr	r3, [pc, #36]	@ (80124d4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80124b0:	6859      	ldr	r1, [r3, #4]
 80124b2:	4b08      	ldr	r3, [pc, #32]	@ (80124d4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80124b4:	689a      	ldr	r2, [r3, #8]
 80124b6:	79fb      	ldrb	r3, [r7, #7]
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7ff feb7 	bl	801222c <GetElement>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d001      	beq.n	80124c8 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80124c4:	2301      	movs	r3, #1
 80124c6:	e000      	b.n	80124ca <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80124c8:	2300      	movs	r3, #0
}
 80124ca:	4618      	mov	r0, r3
 80124cc:	3708      	adds	r7, #8
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}
 80124d2:	bf00      	nop
 80124d4:	20001360 	.word	0x20001360

080124d8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b084      	sub	sp, #16
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80124e0:	4b25      	ldr	r3, [pc, #148]	@ (8012578 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80124e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80124e6:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80124e8:	2300      	movs	r3, #0
 80124ea:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 80124ec:	f107 0308 	add.w	r3, r7, #8
 80124f0:	2204      	movs	r2, #4
 80124f2:	2100      	movs	r1, #0
 80124f4:	4618      	mov	r0, r3
 80124f6:	f005 f987 	bl	8017808 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 80124fa:	2300      	movs	r3, #0
 80124fc:	73fb      	strb	r3, [r7, #15]
 80124fe:	e032      	b.n	8012566 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8012500:	4b1d      	ldr	r3, [pc, #116]	@ (8012578 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012502:	685b      	ldr	r3, [r3, #4]
 8012504:	781a      	ldrb	r2, [r3, #0]
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 801250a:	4b1b      	ldr	r3, [pc, #108]	@ (8012578 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801250c:	685b      	ldr	r3, [r3, #4]
 801250e:	785a      	ldrb	r2, [r3, #1]
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8012514:	4b18      	ldr	r3, [pc, #96]	@ (8012578 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012516:	685b      	ldr	r3, [r3, #4]
 8012518:	789b      	ldrb	r3, [r3, #2]
 801251a:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 801251c:	7b7b      	ldrb	r3, [r7, #13]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d005      	beq.n	801252e <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8012522:	4b15      	ldr	r3, [pc, #84]	@ (8012578 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	689b      	ldr	r3, [r3, #8]
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	4798      	blx	r3
 801252c:	e00b      	b.n	8012546 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801252e:	4b12      	ldr	r3, [pc, #72]	@ (8012578 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012530:	685b      	ldr	r3, [r3, #4]
 8012532:	781b      	ldrb	r3, [r3, #0]
 8012534:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012536:	4b10      	ldr	r3, [pc, #64]	@ (8012578 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	785b      	ldrb	r3, [r3, #1]
 801253c:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801253e:	4b0e      	ldr	r3, [pc, #56]	@ (8012578 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012540:	685b      	ldr	r3, [r3, #4]
 8012542:	78db      	ldrb	r3, [r3, #3]
 8012544:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8012546:	f7ff feff 	bl	8012348 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801254a:	7b7b      	ldrb	r3, [r7, #13]
 801254c:	f083 0301 	eor.w	r3, r3, #1
 8012550:	b2db      	uxtb	r3, r3
 8012552:	2b00      	cmp	r3, #0
 8012554:	d004      	beq.n	8012560 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8012556:	f107 0308 	add.w	r3, r7, #8
 801255a:	4618      	mov	r0, r3
 801255c:	f7ff feba 	bl	80122d4 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8012560:	7bfb      	ldrb	r3, [r7, #15]
 8012562:	3301      	adds	r3, #1
 8012564:	73fb      	strb	r3, [r7, #15]
 8012566:	7bfa      	ldrb	r2, [r7, #15]
 8012568:	7bbb      	ldrb	r3, [r7, #14]
 801256a:	429a      	cmp	r2, r3
 801256c:	d3c8      	bcc.n	8012500 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 801256e:	bf00      	nop
 8012570:	bf00      	nop
 8012572:	3710      	adds	r7, #16
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}
 8012578:	20001360 	.word	0x20001360

0801257c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801257c:	b480      	push	{r7}
 801257e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012580:	4b03      	ldr	r3, [pc, #12]	@ (8012590 <LoRaMacConfirmQueueGetCnt+0x14>)
 8012582:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8012586:	4618      	mov	r0, r3
 8012588:	46bd      	mov	sp, r7
 801258a:	bc80      	pop	{r7}
 801258c:	4770      	bx	lr
 801258e:	bf00      	nop
 8012590:	20001360 	.word	0x20001360

08012594 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012594:	b580      	push	{r7, lr}
 8012596:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012598:	4b06      	ldr	r3, [pc, #24]	@ (80125b4 <LoRaMacConfirmQueueIsFull+0x20>)
 801259a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801259e:	4618      	mov	r0, r3
 80125a0:	f7ff fe34 	bl	801220c <IsListFull>
 80125a4:	4603      	mov	r3, r0
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d001      	beq.n	80125ae <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80125aa:	2301      	movs	r3, #1
 80125ac:	e000      	b.n	80125b0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80125ae:	2300      	movs	r3, #0
    }
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	20001360 	.word	0x20001360

080125b8 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b08e      	sub	sp, #56	@ 0x38
 80125bc:	af00      	add	r7, sp, #0
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	607b      	str	r3, [r7, #4]
 80125c2:	460b      	mov	r3, r1
 80125c4:	817b      	strh	r3, [r7, #10]
 80125c6:	4613      	mov	r3, r2
 80125c8:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d101      	bne.n	80125d4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80125d0:	230a      	movs	r3, #10
 80125d2:	e086      	b.n	80126e2 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80125d4:	2300      	movs	r3, #0
 80125d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 80125da:	2301      	movs	r3, #1
 80125dc:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 80125de:	2300      	movs	r3, #0
 80125e0:	623b      	str	r3, [r7, #32]
 80125e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80125e6:	2200      	movs	r2, #0
 80125e8:	601a      	str	r2, [r3, #0]
 80125ea:	605a      	str	r2, [r3, #4]
 80125ec:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80125ee:	2300      	movs	r3, #0
 80125f0:	613b      	str	r3, [r7, #16]
 80125f2:	f107 0314 	add.w	r3, r7, #20
 80125f6:	2200      	movs	r2, #0
 80125f8:	601a      	str	r2, [r3, #0]
 80125fa:	605a      	str	r2, [r3, #4]
 80125fc:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80125fe:	2301      	movs	r3, #1
 8012600:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8012602:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8012606:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	b2db      	uxtb	r3, r3
 801260c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	0a1b      	lsrs	r3, r3, #8
 8012612:	b2db      	uxtb	r3, r3
 8012614:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	0c1b      	lsrs	r3, r3, #16
 801261a:	b2db      	uxtb	r3, r3
 801261c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	0e1b      	lsrs	r3, r3, #24
 8012622:	b2db      	uxtb	r3, r3
 8012624:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8012626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012628:	b2db      	uxtb	r3, r3
 801262a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 801262c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801262e:	0a1b      	lsrs	r3, r3, #8
 8012630:	b2db      	uxtb	r3, r3
 8012632:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012636:	0c1b      	lsrs	r3, r3, #16
 8012638:	b2db      	uxtb	r3, r3
 801263a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801263c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801263e:	0e1b      	lsrs	r3, r3, #24
 8012640:	b2db      	uxtb	r3, r3
 8012642:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012644:	e048      	b.n	80126d8 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8012646:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012648:	b2db      	uxtb	r3, r3
 801264a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 801264c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801264e:	3301      	adds	r3, #1
 8012650:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012652:	f107 0320 	add.w	r3, r7, #32
 8012656:	7a7a      	ldrb	r2, [r7, #9]
 8012658:	f107 0010 	add.w	r0, r7, #16
 801265c:	2110      	movs	r1, #16
 801265e:	f7f8 ff89 	bl	800b574 <SecureElementAesEncrypt>
 8012662:	4603      	mov	r3, r0
 8012664:	2b00      	cmp	r3, #0
 8012666:	d001      	beq.n	801266c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012668:	230f      	movs	r3, #15
 801266a:	e03a      	b.n	80126e2 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801266c:	2300      	movs	r3, #0
 801266e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8012672:	e01e      	b.n	80126b2 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012674:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8012678:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801267c:	4413      	add	r3, r2
 801267e:	461a      	mov	r2, r3
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	4413      	add	r3, r2
 8012684:	7819      	ldrb	r1, [r3, #0]
 8012686:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801268a:	3338      	adds	r3, #56	@ 0x38
 801268c:	443b      	add	r3, r7
 801268e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012692:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8012696:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801269a:	4403      	add	r3, r0
 801269c:	4618      	mov	r0, r3
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	4403      	add	r3, r0
 80126a2:	404a      	eors	r2, r1
 80126a4:	b2d2      	uxtb	r2, r2
 80126a6:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80126a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80126ac:	3301      	adds	r3, #1
 80126ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80126b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80126b6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80126ba:	2a10      	cmp	r2, #16
 80126bc:	bfa8      	it	ge
 80126be:	2210      	movge	r2, #16
 80126c0:	b212      	sxth	r2, r2
 80126c2:	4293      	cmp	r3, r2
 80126c4:	dbd6      	blt.n	8012674 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80126c6:	897b      	ldrh	r3, [r7, #10]
 80126c8:	3b10      	subs	r3, #16
 80126ca:	b29b      	uxth	r3, r3
 80126cc:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80126ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80126d2:	3310      	adds	r3, #16
 80126d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 80126d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	dcb2      	bgt.n	8012646 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80126e0:	2300      	movs	r3, #0
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	3738      	adds	r7, #56	@ 0x38
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}

080126ea <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80126ea:	b490      	push	{r4, r7}
 80126ec:	b082      	sub	sp, #8
 80126ee:	af00      	add	r7, sp, #0
 80126f0:	4604      	mov	r4, r0
 80126f2:	4608      	mov	r0, r1
 80126f4:	4611      	mov	r1, r2
 80126f6:	461a      	mov	r2, r3
 80126f8:	4623      	mov	r3, r4
 80126fa:	80fb      	strh	r3, [r7, #6]
 80126fc:	4603      	mov	r3, r0
 80126fe:	717b      	strb	r3, [r7, #5]
 8012700:	460b      	mov	r3, r1
 8012702:	713b      	strb	r3, [r7, #4]
 8012704:	4613      	mov	r3, r2
 8012706:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8012708:	69bb      	ldr	r3, [r7, #24]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d101      	bne.n	8012712 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801270e:	230a      	movs	r3, #10
 8012710:	e04e      	b.n	80127b0 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8012712:	69bb      	ldr	r3, [r7, #24]
 8012714:	2249      	movs	r2, #73	@ 0x49
 8012716:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8012718:	69bb      	ldr	r3, [r7, #24]
 801271a:	3301      	adds	r3, #1
 801271c:	2200      	movs	r2, #0
 801271e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8012720:	69bb      	ldr	r3, [r7, #24]
 8012722:	3302      	adds	r3, #2
 8012724:	2200      	movs	r2, #0
 8012726:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8012728:	69bb      	ldr	r3, [r7, #24]
 801272a:	3303      	adds	r3, #3
 801272c:	2200      	movs	r2, #0
 801272e:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012730:	69bb      	ldr	r3, [r7, #24]
 8012732:	3304      	adds	r3, #4
 8012734:	2200      	movs	r2, #0
 8012736:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8012738:	69bb      	ldr	r3, [r7, #24]
 801273a:	3305      	adds	r3, #5
 801273c:	78fa      	ldrb	r2, [r7, #3]
 801273e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012740:	69bb      	ldr	r3, [r7, #24]
 8012742:	3306      	adds	r3, #6
 8012744:	693a      	ldr	r2, [r7, #16]
 8012746:	b2d2      	uxtb	r2, r2
 8012748:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801274a:	693b      	ldr	r3, [r7, #16]
 801274c:	0a1a      	lsrs	r2, r3, #8
 801274e:	69bb      	ldr	r3, [r7, #24]
 8012750:	3307      	adds	r3, #7
 8012752:	b2d2      	uxtb	r2, r2
 8012754:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8012756:	693b      	ldr	r3, [r7, #16]
 8012758:	0c1a      	lsrs	r2, r3, #16
 801275a:	69bb      	ldr	r3, [r7, #24]
 801275c:	3308      	adds	r3, #8
 801275e:	b2d2      	uxtb	r2, r2
 8012760:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012762:	693b      	ldr	r3, [r7, #16]
 8012764:	0e1a      	lsrs	r2, r3, #24
 8012766:	69bb      	ldr	r3, [r7, #24]
 8012768:	3309      	adds	r3, #9
 801276a:	b2d2      	uxtb	r2, r2
 801276c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801276e:	69bb      	ldr	r3, [r7, #24]
 8012770:	330a      	adds	r3, #10
 8012772:	697a      	ldr	r2, [r7, #20]
 8012774:	b2d2      	uxtb	r2, r2
 8012776:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	0a1a      	lsrs	r2, r3, #8
 801277c:	69bb      	ldr	r3, [r7, #24]
 801277e:	330b      	adds	r3, #11
 8012780:	b2d2      	uxtb	r2, r2
 8012782:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012784:	697b      	ldr	r3, [r7, #20]
 8012786:	0c1a      	lsrs	r2, r3, #16
 8012788:	69bb      	ldr	r3, [r7, #24]
 801278a:	330c      	adds	r3, #12
 801278c:	b2d2      	uxtb	r2, r2
 801278e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	0e1a      	lsrs	r2, r3, #24
 8012794:	69bb      	ldr	r3, [r7, #24]
 8012796:	330d      	adds	r3, #13
 8012798:	b2d2      	uxtb	r2, r2
 801279a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801279c:	69bb      	ldr	r3, [r7, #24]
 801279e:	330e      	adds	r3, #14
 80127a0:	2200      	movs	r2, #0
 80127a2:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80127a4:	69bb      	ldr	r3, [r7, #24]
 80127a6:	330f      	adds	r3, #15
 80127a8:	88fa      	ldrh	r2, [r7, #6]
 80127aa:	b2d2      	uxtb	r2, r2
 80127ac:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80127ae:	2300      	movs	r3, #0
}
 80127b0:	4618      	mov	r0, r3
 80127b2:	3708      	adds	r7, #8
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bc90      	pop	{r4, r7}
 80127b8:	4770      	bx	lr

080127ba <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80127ba:	b590      	push	{r4, r7, lr}
 80127bc:	b08b      	sub	sp, #44	@ 0x2c
 80127be:	af04      	add	r7, sp, #16
 80127c0:	6078      	str	r0, [r7, #4]
 80127c2:	4608      	mov	r0, r1
 80127c4:	4611      	mov	r1, r2
 80127c6:	461a      	mov	r2, r3
 80127c8:	4603      	mov	r3, r0
 80127ca:	807b      	strh	r3, [r7, #2]
 80127cc:	460b      	mov	r3, r1
 80127ce:	707b      	strb	r3, [r7, #1]
 80127d0:	4613      	mov	r3, r2
 80127d2:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d002      	beq.n	80127e0 <ComputeCmacB0+0x26>
 80127da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d101      	bne.n	80127e4 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80127e0:	230a      	movs	r3, #10
 80127e2:	e024      	b.n	801282e <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80127e4:	887b      	ldrh	r3, [r7, #2]
 80127e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80127ea:	d901      	bls.n	80127f0 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80127ec:	230e      	movs	r3, #14
 80127ee:	e01e      	b.n	801282e <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80127f0:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 80127f4:	783a      	ldrb	r2, [r7, #0]
 80127f6:	7879      	ldrb	r1, [r7, #1]
 80127f8:	8878      	ldrh	r0, [r7, #2]
 80127fa:	f107 0308 	add.w	r3, r7, #8
 80127fe:	9302      	str	r3, [sp, #8]
 8012800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012802:	9301      	str	r3, [sp, #4]
 8012804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012806:	9300      	str	r3, [sp, #0]
 8012808:	4623      	mov	r3, r4
 801280a:	f7ff ff6e 	bl	80126ea <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801280e:	887a      	ldrh	r2, [r7, #2]
 8012810:	7879      	ldrb	r1, [r7, #1]
 8012812:	f107 0008 	add.w	r0, r7, #8
 8012816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012818:	9300      	str	r3, [sp, #0]
 801281a:	460b      	mov	r3, r1
 801281c:	6879      	ldr	r1, [r7, #4]
 801281e:	f7f8 fe63 	bl	800b4e8 <SecureElementComputeAesCmac>
 8012822:	4603      	mov	r3, r0
 8012824:	2b00      	cmp	r3, #0
 8012826:	d001      	beq.n	801282c <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012828:	230f      	movs	r3, #15
 801282a:	e000      	b.n	801282e <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801282c:	2300      	movs	r3, #0
}
 801282e:	4618      	mov	r0, r3
 8012830:	371c      	adds	r7, #28
 8012832:	46bd      	mov	sp, r7
 8012834:	bd90      	pop	{r4, r7, pc}

08012836 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8012836:	b590      	push	{r4, r7, lr}
 8012838:	b0cd      	sub	sp, #308	@ 0x134
 801283a:	af04      	add	r7, sp, #16
 801283c:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8012840:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8012844:	6020      	str	r0, [r4, #0]
 8012846:	460c      	mov	r4, r1
 8012848:	4610      	mov	r0, r2
 801284a:	4619      	mov	r1, r3
 801284c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012850:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8012854:	4622      	mov	r2, r4
 8012856:	801a      	strh	r2, [r3, #0]
 8012858:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801285c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8012860:	4602      	mov	r2, r0
 8012862:	701a      	strb	r2, [r3, #0]
 8012864:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012868:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801286c:	460a      	mov	r2, r1
 801286e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8012870:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012874:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d101      	bne.n	8012882 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801287e:	230a      	movs	r3, #10
 8012880:	e063      	b.n	801294a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012882:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012886:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801288a:	881b      	ldrh	r3, [r3, #0]
 801288c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012890:	d901      	bls.n	8012896 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012892:	230e      	movs	r3, #14
 8012894:	e059      	b.n	801294a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8012896:	f107 030c 	add.w	r3, r7, #12
 801289a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 801289e:	2100      	movs	r1, #0
 80128a0:	4618      	mov	r0, r3
 80128a2:	f004 ffb1 	bl	8017808 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80128a6:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 80128aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80128ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80128b2:	781a      	ldrb	r2, [r3, #0]
 80128b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80128b8:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80128bc:	7819      	ldrb	r1, [r3, #0]
 80128be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80128c2:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80128c6:	8818      	ldrh	r0, [r3, #0]
 80128c8:	f107 030c 	add.w	r3, r7, #12
 80128cc:	9302      	str	r3, [sp, #8]
 80128ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80128d2:	9301      	str	r3, [sp, #4]
 80128d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80128d8:	9300      	str	r3, [sp, #0]
 80128da:	4623      	mov	r3, r4
 80128dc:	f7ff ff05 	bl	80126ea <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80128e0:	f107 030c 	add.w	r3, r7, #12
 80128e4:	3310      	adds	r3, #16
 80128e6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80128ea:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 80128ee:	8812      	ldrh	r2, [r2, #0]
 80128f0:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80128f4:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 80128f8:	6809      	ldr	r1, [r1, #0]
 80128fa:	4618      	mov	r0, r3
 80128fc:	f004 ff49 	bl	8017792 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8012900:	2306      	movs	r3, #6
 8012902:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8012906:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801290a:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801290e:	881b      	ldrh	r3, [r3, #0]
 8012910:	3310      	adds	r3, #16
 8012912:	4619      	mov	r1, r3
 8012914:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012918:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801291c:	781b      	ldrb	r3, [r3, #0]
 801291e:	f107 000c 	add.w	r0, r7, #12
 8012922:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8012926:	f7f8 fdf9 	bl	800b51c <SecureElementVerifyAesCmac>
 801292a:	4603      	mov	r3, r0
 801292c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8012930:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8012934:	2b00      	cmp	r3, #0
 8012936:	d101      	bne.n	801293c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8012938:	2300      	movs	r3, #0
 801293a:	e006      	b.n	801294a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801293c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8012940:	2b01      	cmp	r3, #1
 8012942:	d101      	bne.n	8012948 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8012944:	2301      	movs	r3, #1
 8012946:	e000      	b.n	801294a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012948:	230f      	movs	r3, #15
}
 801294a:	4618      	mov	r0, r3
 801294c:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8012950:	46bd      	mov	sp, r7
 8012952:	bd90      	pop	{r4, r7, pc}

08012954 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8012954:	b480      	push	{r7}
 8012956:	b085      	sub	sp, #20
 8012958:	af00      	add	r7, sp, #0
 801295a:	4603      	mov	r3, r0
 801295c:	6039      	str	r1, [r7, #0]
 801295e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012960:	2300      	movs	r3, #0
 8012962:	73fb      	strb	r3, [r7, #15]
 8012964:	e011      	b.n	801298a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8012966:	7bfb      	ldrb	r3, [r7, #15]
 8012968:	4a0c      	ldr	r2, [pc, #48]	@ (801299c <GetKeyAddrItem+0x48>)
 801296a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801296e:	79fa      	ldrb	r2, [r7, #7]
 8012970:	429a      	cmp	r2, r3
 8012972:	d107      	bne.n	8012984 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8012974:	7bfb      	ldrb	r3, [r7, #15]
 8012976:	009b      	lsls	r3, r3, #2
 8012978:	4a08      	ldr	r2, [pc, #32]	@ (801299c <GetKeyAddrItem+0x48>)
 801297a:	441a      	add	r2, r3
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8012980:	2300      	movs	r3, #0
 8012982:	e006      	b.n	8012992 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012984:	7bfb      	ldrb	r3, [r7, #15]
 8012986:	3301      	adds	r3, #1
 8012988:	73fb      	strb	r3, [r7, #15]
 801298a:	7bfb      	ldrb	r3, [r7, #15]
 801298c:	2b01      	cmp	r3, #1
 801298e:	d9ea      	bls.n	8012966 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8012990:	230c      	movs	r3, #12
}
 8012992:	4618      	mov	r0, r3
 8012994:	3714      	adds	r7, #20
 8012996:	46bd      	mov	sp, r7
 8012998:	bc80      	pop	{r7}
 801299a:	4770      	bx	lr
 801299c:	20000100 	.word	0x20000100

080129a0 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b088      	sub	sp, #32
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	60b9      	str	r1, [r7, #8]
 80129a8:	607a      	str	r2, [r7, #4]
 80129aa:	461a      	mov	r2, r3
 80129ac:	4603      	mov	r3, r0
 80129ae:	73fb      	strb	r3, [r7, #15]
 80129b0:	4613      	mov	r3, r2
 80129b2:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80129b4:	2300      	movs	r3, #0
 80129b6:	613b      	str	r3, [r7, #16]
 80129b8:	f107 0314 	add.w	r3, r7, #20
 80129bc:	2200      	movs	r2, #0
 80129be:	601a      	str	r2, [r3, #0]
 80129c0:	605a      	str	r2, [r3, #4]
 80129c2:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80129c4:	7bfb      	ldrb	r3, [r7, #15]
 80129c6:	2b08      	cmp	r3, #8
 80129c8:	d002      	beq.n	80129d0 <DeriveSessionKey10x+0x30>
 80129ca:	2b09      	cmp	r3, #9
 80129cc:	d003      	beq.n	80129d6 <DeriveSessionKey10x+0x36>
 80129ce:	e005      	b.n	80129dc <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 80129d0:	2301      	movs	r3, #1
 80129d2:	743b      	strb	r3, [r7, #16]
            break;
 80129d4:	e004      	b.n	80129e0 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80129d6:	2302      	movs	r3, #2
 80129d8:	743b      	strb	r3, [r7, #16]
            break;
 80129da:	e001      	b.n	80129e0 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80129dc:	230b      	movs	r3, #11
 80129de:	e02a      	b.n	8012a36 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80129e0:	68bb      	ldr	r3, [r7, #8]
 80129e2:	b2db      	uxtb	r3, r3
 80129e4:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	0a1b      	lsrs	r3, r3, #8
 80129ea:	b2db      	uxtb	r3, r3
 80129ec:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	0c1b      	lsrs	r3, r3, #16
 80129f2:	b2db      	uxtb	r3, r3
 80129f4:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	b2db      	uxtb	r3, r3
 80129fa:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	0a1b      	lsrs	r3, r3, #8
 8012a00:	b2db      	uxtb	r3, r3
 8012a02:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	0c1b      	lsrs	r3, r3, #16
 8012a08:	b2db      	uxtb	r3, r3
 8012a0a:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8012a0c:	89bb      	ldrh	r3, [r7, #12]
 8012a0e:	b2db      	uxtb	r3, r3
 8012a10:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8012a12:	89bb      	ldrh	r3, [r7, #12]
 8012a14:	0a1b      	lsrs	r3, r3, #8
 8012a16:	b29b      	uxth	r3, r3
 8012a18:	b2db      	uxtb	r3, r3
 8012a1a:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8012a1c:	7bfa      	ldrb	r2, [r7, #15]
 8012a1e:	f107 0310 	add.w	r3, r7, #16
 8012a22:	2101      	movs	r1, #1
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7f8 fe25 	bl	800b674 <SecureElementDeriveAndStoreKey>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d001      	beq.n	8012a34 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012a30:	230f      	movs	r3, #15
 8012a32:	e000      	b.n	8012a36 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012a34:	2300      	movs	r3, #0
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	3720      	adds	r7, #32
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}
	...

08012a40 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8012a40:	b480      	push	{r7}
 8012a42:	b083      	sub	sp, #12
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	4603      	mov	r3, r0
 8012a48:	6039      	str	r1, [r7, #0]
 8012a4a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d101      	bne.n	8012a56 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012a52:	230a      	movs	r3, #10
 8012a54:	e029      	b.n	8012aaa <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8012a56:	79fb      	ldrb	r3, [r7, #7]
 8012a58:	3b01      	subs	r3, #1
 8012a5a:	2b03      	cmp	r3, #3
 8012a5c:	d822      	bhi.n	8012aa4 <GetLastFcntDown+0x64>
 8012a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8012a64 <GetLastFcntDown+0x24>)
 8012a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a64:	08012a75 	.word	0x08012a75
 8012a68:	08012a81 	.word	0x08012a81
 8012a6c:	08012a8d 	.word	0x08012a8d
 8012a70:	08012a99 	.word	0x08012a99
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8012a74:	4b0f      	ldr	r3, [pc, #60]	@ (8012ab4 <GetLastFcntDown+0x74>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	691a      	ldr	r2, [r3, #16]
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	601a      	str	r2, [r3, #0]
            break;
 8012a7e:	e013      	b.n	8012aa8 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8012a80:	4b0c      	ldr	r3, [pc, #48]	@ (8012ab4 <GetLastFcntDown+0x74>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	695a      	ldr	r2, [r3, #20]
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	601a      	str	r2, [r3, #0]
            break;
 8012a8a:	e00d      	b.n	8012aa8 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8012a8c:	4b09      	ldr	r3, [pc, #36]	@ (8012ab4 <GetLastFcntDown+0x74>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	699a      	ldr	r2, [r3, #24]
 8012a92:	683b      	ldr	r3, [r7, #0]
 8012a94:	601a      	str	r2, [r3, #0]
            break;
 8012a96:	e007      	b.n	8012aa8 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8012a98:	4b06      	ldr	r3, [pc, #24]	@ (8012ab4 <GetLastFcntDown+0x74>)
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	69da      	ldr	r2, [r3, #28]
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	601a      	str	r2, [r3, #0]
            break;
 8012aa2:	e001      	b.n	8012aa8 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012aa4:	2305      	movs	r3, #5
 8012aa6:	e000      	b.n	8012aaa <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012aa8:	2300      	movs	r3, #0
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	370c      	adds	r7, #12
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bc80      	pop	{r7}
 8012ab2:	4770      	bx	lr
 8012ab4:	20001384 	.word	0x20001384

08012ab8 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b084      	sub	sp, #16
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	4603      	mov	r3, r0
 8012ac0:	6039      	str	r1, [r7, #0]
 8012ac2:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8012ac8:	f107 020c 	add.w	r2, r7, #12
 8012acc:	79fb      	ldrb	r3, [r7, #7]
 8012ace:	4611      	mov	r1, r2
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f7ff ffb5 	bl	8012a40 <GetLastFcntDown>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d001      	beq.n	8012ae0 <CheckFCntDown+0x28>
    {
        return false;
 8012adc:	2300      	movs	r3, #0
 8012ade:	e00a      	b.n	8012af6 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	683a      	ldr	r2, [r7, #0]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d803      	bhi.n	8012af0 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8012ae8:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8012aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012aee:	d101      	bne.n	8012af4 <CheckFCntDown+0x3c>
    {
        return true;
 8012af0:	2301      	movs	r3, #1
 8012af2:	e000      	b.n	8012af6 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8012af4:	2300      	movs	r3, #0
    }
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	3710      	adds	r7, #16
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
	...

08012b00 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012b00:	b480      	push	{r7}
 8012b02:	b083      	sub	sp, #12
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	4603      	mov	r3, r0
 8012b08:	6039      	str	r1, [r7, #0]
 8012b0a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8012b0c:	79fb      	ldrb	r3, [r7, #7]
 8012b0e:	3b01      	subs	r3, #1
 8012b10:	2b03      	cmp	r3, #3
 8012b12:	d82b      	bhi.n	8012b6c <UpdateFCntDown+0x6c>
 8012b14:	a201      	add	r2, pc, #4	@ (adr r2, 8012b1c <UpdateFCntDown+0x1c>)
 8012b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b1a:	bf00      	nop
 8012b1c:	08012b2d 	.word	0x08012b2d
 8012b20:	08012b3f 	.word	0x08012b3f
 8012b24:	08012b51 	.word	0x08012b51
 8012b28:	08012b63 	.word	0x08012b63
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8012b2c:	4b12      	ldr	r3, [pc, #72]	@ (8012b78 <UpdateFCntDown+0x78>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	683a      	ldr	r2, [r7, #0]
 8012b32:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8012b34:	4b10      	ldr	r3, [pc, #64]	@ (8012b78 <UpdateFCntDown+0x78>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	683a      	ldr	r2, [r7, #0]
 8012b3a:	621a      	str	r2, [r3, #32]
            break;
 8012b3c:	e017      	b.n	8012b6e <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8012b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8012b78 <UpdateFCntDown+0x78>)
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	683a      	ldr	r2, [r7, #0]
 8012b44:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8012b46:	4b0c      	ldr	r3, [pc, #48]	@ (8012b78 <UpdateFCntDown+0x78>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	683a      	ldr	r2, [r7, #0]
 8012b4c:	621a      	str	r2, [r3, #32]
            break;
 8012b4e:	e00e      	b.n	8012b6e <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8012b50:	4b09      	ldr	r3, [pc, #36]	@ (8012b78 <UpdateFCntDown+0x78>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	683a      	ldr	r2, [r7, #0]
 8012b56:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8012b58:	4b07      	ldr	r3, [pc, #28]	@ (8012b78 <UpdateFCntDown+0x78>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	683a      	ldr	r2, [r7, #0]
 8012b5e:	621a      	str	r2, [r3, #32]
            break;
 8012b60:	e005      	b.n	8012b6e <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8012b62:	4b05      	ldr	r3, [pc, #20]	@ (8012b78 <UpdateFCntDown+0x78>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	683a      	ldr	r2, [r7, #0]
 8012b68:	61da      	str	r2, [r3, #28]
            break;
 8012b6a:	e000      	b.n	8012b6e <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8012b6c:	bf00      	nop
    }
}
 8012b6e:	bf00      	nop
 8012b70:	370c      	adds	r7, #12
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bc80      	pop	{r7}
 8012b76:	4770      	bx	lr
 8012b78:	20001384 	.word	0x20001384

08012b7c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8012b7c:	b480      	push	{r7}
 8012b7e:	b083      	sub	sp, #12
 8012b80:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8012b82:	4b18      	ldr	r3, [pc, #96]	@ (8012be4 <ResetFCnts+0x68>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	2200      	movs	r2, #0
 8012b88:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8012b8a:	4b16      	ldr	r3, [pc, #88]	@ (8012be4 <ResetFCnts+0x68>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8012b92:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8012b94:	4b13      	ldr	r3, [pc, #76]	@ (8012be4 <ResetFCnts+0x68>)
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	f04f 32ff 	mov.w	r2, #4294967295
 8012b9c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8012b9e:	4b11      	ldr	r3, [pc, #68]	@ (8012be4 <ResetFCnts+0x68>)
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8012ba6:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8012be4 <ResetFCnts+0x68>)
 8012baa:	681a      	ldr	r2, [r3, #0]
 8012bac:	4b0d      	ldr	r3, [pc, #52]	@ (8012be4 <ResetFCnts+0x68>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	6992      	ldr	r2, [r2, #24]
 8012bb2:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	607b      	str	r3, [r7, #4]
 8012bb8:	e00b      	b.n	8012bd2 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8012bba:	4b0a      	ldr	r3, [pc, #40]	@ (8012be4 <ResetFCnts+0x68>)
 8012bbc:	681a      	ldr	r2, [r3, #0]
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	3306      	adds	r3, #6
 8012bc2:	009b      	lsls	r3, r3, #2
 8012bc4:	4413      	add	r3, r2
 8012bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8012bca:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	3301      	adds	r3, #1
 8012bd0:	607b      	str	r3, [r7, #4]
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	ddf0      	ble.n	8012bba <ResetFCnts+0x3e>
    }
}
 8012bd8:	bf00      	nop
 8012bda:	bf00      	nop
 8012bdc:	370c      	adds	r7, #12
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bc80      	pop	{r7}
 8012be2:	4770      	bx	lr
 8012be4:	20001384 	.word	0x20001384

08012be8 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8012be8:	b480      	push	{r7}
 8012bea:	b083      	sub	sp, #12
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8012bf0:	4b06      	ldr	r3, [pc, #24]	@ (8012c0c <IsJoinNonce10xOk+0x24>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	689b      	ldr	r3, [r3, #8]
 8012bf6:	687a      	ldr	r2, [r7, #4]
 8012bf8:	429a      	cmp	r2, r3
 8012bfa:	bf8c      	ite	hi
 8012bfc:	2301      	movhi	r3, #1
 8012bfe:	2300      	movls	r3, #0
 8012c00:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	370c      	adds	r7, #12
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bc80      	pop	{r7}
 8012c0a:	4770      	bx	lr
 8012c0c:	20001384 	.word	0x20001384

08012c10 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b082      	sub	sp, #8
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d101      	bne.n	8012c22 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8012c1e:	2309      	movs	r3, #9
 8012c20:	e01c      	b.n	8012c5c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8012c22:	4a10      	ldr	r2, [pc, #64]	@ (8012c64 <LoRaMacCryptoInit+0x54>)
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8012c28:	4b0e      	ldr	r3, [pc, #56]	@ (8012c64 <LoRaMacCryptoInit+0x54>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	2228      	movs	r2, #40	@ 0x28
 8012c2e:	2100      	movs	r1, #0
 8012c30:	4618      	mov	r0, r3
 8012c32:	f004 fde9 	bl	8017808 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8012c36:	4b0b      	ldr	r3, [pc, #44]	@ (8012c64 <LoRaMacCryptoInit+0x54>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	2201      	movs	r2, #1
 8012c3c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8012c3e:	4b09      	ldr	r3, [pc, #36]	@ (8012c64 <LoRaMacCryptoInit+0x54>)
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	2201      	movs	r2, #1
 8012c44:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8012c46:	4b07      	ldr	r3, [pc, #28]	@ (8012c64 <LoRaMacCryptoInit+0x54>)
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	2201      	movs	r2, #1
 8012c4c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8012c4e:	4b05      	ldr	r3, [pc, #20]	@ (8012c64 <LoRaMacCryptoInit+0x54>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2200      	movs	r2, #0
 8012c54:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8012c56:	f7ff ff91 	bl	8012b7c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8012c5a:	2300      	movs	r3, #0
}
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3708      	adds	r7, #8
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}
 8012c64:	20001384 	.word	0x20001384

08012c68 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8012c68:	b480      	push	{r7}
 8012c6a:	b083      	sub	sp, #12
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8012c70:	4b04      	ldr	r3, [pc, #16]	@ (8012c84 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	687a      	ldr	r2, [r7, #4]
 8012c76:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8012c78:	2300      	movs	r3, #0
}
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	370c      	adds	r7, #12
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bc80      	pop	{r7}
 8012c82:	4770      	bx	lr
 8012c84:	20001384 	.word	0x20001384

08012c88 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8012c88:	b480      	push	{r7}
 8012c8a:	b083      	sub	sp, #12
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d101      	bne.n	8012c9a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012c96:	230a      	movs	r3, #10
 8012c98:	e006      	b.n	8012ca8 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8012c9a:	4b06      	ldr	r3, [pc, #24]	@ (8012cb4 <LoRaMacCryptoGetFCntUp+0x2c>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	68db      	ldr	r3, [r3, #12]
 8012ca0:	1c5a      	adds	r2, r3, #1
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012ca6:	2300      	movs	r3, #0
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	370c      	adds	r7, #12
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bc80      	pop	{r7}
 8012cb0:	4770      	bx	lr
 8012cb2:	bf00      	nop
 8012cb4:	20001384 	.word	0x20001384

08012cb8 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8012cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012cbc:	b08a      	sub	sp, #40	@ 0x28
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	613a      	str	r2, [r7, #16]
 8012cc2:	60fb      	str	r3, [r7, #12]
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	75fb      	strb	r3, [r7, #23]
 8012cc8:	460b      	mov	r3, r1
 8012cca:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8012ccc:	2300      	movs	r3, #0
 8012cce:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8012cd4:	2313      	movs	r3, #19
 8012cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if( currentDown == NULL )
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d101      	bne.n	8012ce4 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012ce0:	230a      	movs	r3, #10
 8012ce2:	e057      	b.n	8012d94 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8012ce4:	f107 021c 	add.w	r2, r7, #28
 8012ce8:	7dfb      	ldrb	r3, [r7, #23]
 8012cea:	4611      	mov	r1, r2
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7ff fea7 	bl	8012a40 <GetLastFcntDown>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8012cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d002      	beq.n	8012d06 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8012d00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012d04:	e046      	b.n	8012d94 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8012d06:	69fb      	ldr	r3, [r7, #28]
 8012d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d0c:	d103      	bne.n	8012d16 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	693a      	ldr	r2, [r7, #16]
 8012d12:	601a      	str	r2, [r3, #0]
 8012d14:	e01e      	b.n	8012d54 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8012d16:	69fb      	ldr	r3, [r7, #28]
 8012d18:	b29b      	uxth	r3, r3
 8012d1a:	693a      	ldr	r2, [r7, #16]
 8012d1c:	1ad3      	subs	r3, r2, r3
 8012d1e:	627b      	str	r3, [r7, #36]	@ 0x24

        if( fCntDiff > 0 )
 8012d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	dd05      	ble.n	8012d32 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8012d26:	69fa      	ldr	r2, [r7, #28]
 8012d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d2a:	441a      	add	r2, r3
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	601a      	str	r2, [r3, #0]
 8012d30:	e010      	b.n	8012d54 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8012d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d104      	bne.n	8012d42 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8012d38:	69fa      	ldr	r2, [r7, #28]
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8012d3e:	2307      	movs	r3, #7
 8012d40:	e028      	b.n	8012d94 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8012d42:	69fb      	ldr	r3, [r7, #28]
 8012d44:	0c1b      	lsrs	r3, r3, #16
 8012d46:	041b      	lsls	r3, r3, #16
 8012d48:	693a      	ldr	r2, [r7, #16]
 8012d4a:	4413      	add	r3, r2
 8012d4c:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8012d54:	4b12      	ldr	r3, [pc, #72]	@ (8012da0 <LoRaMacCryptoGetFCntDown+0xe8>)
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	789b      	ldrb	r3, [r3, #2]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d119      	bne.n	8012d92 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	2200      	movs	r2, #0
 8012d64:	603b      	str	r3, [r7, #0]
 8012d66:	607a      	str	r2, [r7, #4]
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	469a      	mov	sl, r3
 8012d6e:	4693      	mov	fp, r2
 8012d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012d74:	4611      	mov	r1, r2
 8012d76:	ebb1 040a 	subs.w	r4, r1, sl
 8012d7a:	eb63 050b 	sbc.w	r5, r3, fp
 8012d7e:	8abb      	ldrh	r3, [r7, #20]
 8012d80:	2200      	movs	r2, #0
 8012d82:	4698      	mov	r8, r3
 8012d84:	4691      	mov	r9, r2
 8012d86:	4544      	cmp	r4, r8
 8012d88:	eb75 0309 	sbcs.w	r3, r5, r9
 8012d8c:	db01      	blt.n	8012d92 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8012d8e:	2308      	movs	r3, #8
 8012d90:	e000      	b.n	8012d94 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012d92:	2300      	movs	r3, #0
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	3728      	adds	r7, #40	@ 0x28
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012d9e:	bf00      	nop
 8012da0:	20001384 	.word	0x20001384

08012da4 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8012da4:	b480      	push	{r7}
 8012da6:	b085      	sub	sp, #20
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d101      	bne.n	8012db6 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012db2:	230a      	movs	r3, #10
 8012db4:	e019      	b.n	8012dea <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012db6:	2300      	movs	r3, #0
 8012db8:	60fb      	str	r3, [r7, #12]
 8012dba:	e012      	b.n	8012de2 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8012dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8012df4 <LoRaMacCryptoSetMulticastReference+0x50>)
 8012dbe:	6819      	ldr	r1, [r3, #0]
 8012dc0:	68fa      	ldr	r2, [r7, #12]
 8012dc2:	4613      	mov	r3, r2
 8012dc4:	005b      	lsls	r3, r3, #1
 8012dc6:	4413      	add	r3, r2
 8012dc8:	011b      	lsls	r3, r3, #4
 8012dca:	461a      	mov	r2, r3
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	4413      	add	r3, r2
 8012dd0:	68fa      	ldr	r2, [r7, #12]
 8012dd2:	3206      	adds	r2, #6
 8012dd4:	0092      	lsls	r2, r2, #2
 8012dd6:	440a      	add	r2, r1
 8012dd8:	3204      	adds	r2, #4
 8012dda:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	3301      	adds	r3, #1
 8012de0:	60fb      	str	r3, [r7, #12]
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	dde9      	ble.n	8012dbc <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012de8:	2300      	movs	r3, #0
}
 8012dea:	4618      	mov	r0, r3
 8012dec:	3714      	adds	r7, #20
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bc80      	pop	{r7}
 8012df2:	4770      	bx	lr
 8012df4:	20001384 	.word	0x20001384

08012df8 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b082      	sub	sp, #8
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	4603      	mov	r3, r0
 8012e00:	6039      	str	r1, [r7, #0]
 8012e02:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8012e04:	79fb      	ldrb	r3, [r7, #7]
 8012e06:	6839      	ldr	r1, [r7, #0]
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f7f8 fb0f 	bl	800b42c <SecureElementSetKey>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d001      	beq.n	8012e18 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012e14:	230f      	movs	r3, #15
 8012e16:	e021      	b.n	8012e5c <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8012e18:	79fb      	ldrb	r3, [r7, #7]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d11d      	bne.n	8012e5a <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8012e1e:	4b11      	ldr	r3, [pc, #68]	@ (8012e64 <LoRaMacCryptoSetKey+0x6c>)
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	789b      	ldrb	r3, [r3, #2]
 8012e24:	210b      	movs	r1, #11
 8012e26:	4618      	mov	r0, r3
 8012e28:	f000 fa5c 	bl	80132e4 <LoRaMacCryptoDeriveLifeTimeKey>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d001      	beq.n	8012e36 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012e32:	230f      	movs	r3, #15
 8012e34:	e012      	b.n	8012e5c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8012e36:	210c      	movs	r1, #12
 8012e38:	2000      	movs	r0, #0
 8012e3a:	f000 fa53 	bl	80132e4 <LoRaMacCryptoDeriveLifeTimeKey>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d001      	beq.n	8012e48 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012e44:	230f      	movs	r3, #15
 8012e46:	e009      	b.n	8012e5c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8012e48:	210a      	movs	r1, #10
 8012e4a:	2000      	movs	r0, #0
 8012e4c:	f000 fa4a 	bl	80132e4 <LoRaMacCryptoDeriveLifeTimeKey>
 8012e50:	4603      	mov	r3, r0
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d001      	beq.n	8012e5a <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012e56:	230f      	movs	r3, #15
 8012e58:	e000      	b.n	8012e5c <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012e5a:	2300      	movs	r3, #0
}
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	3708      	adds	r7, #8
 8012e60:	46bd      	mov	sp, r7
 8012e62:	bd80      	pop	{r7, pc}
 8012e64:	20001384 	.word	0x20001384

08012e68 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b086      	sub	sp, #24
 8012e6c:	af02      	add	r7, sp, #8
 8012e6e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d101      	bne.n	8012e7a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012e76:	230a      	movs	r3, #10
 8012e78:	e033      	b.n	8012ee2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8012e7a:	2301      	movs	r3, #1
 8012e7c:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8012e7e:	2300      	movs	r3, #0
 8012e80:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8012e82:	f107 0308 	add.w	r3, r7, #8
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7f8 fcaa 	bl	800b7e0 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8012e8c:	68ba      	ldr	r2, [r7, #8]
 8012e8e:	4b17      	ldr	r3, [pc, #92]	@ (8012eec <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	b292      	uxth	r2, r2
 8012e94:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8012e96:	4b15      	ldr	r3, [pc, #84]	@ (8012eec <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	889a      	ldrh	r2, [r3, #4]
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012ea0:	6878      	ldr	r0, [r7, #4]
 8012ea2:	f000 fc17 	bl	80136d4 <LoRaMacSerializerJoinRequest>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d001      	beq.n	8012eb0 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012eac:	2311      	movs	r3, #17
 8012eae:	e018      	b.n	8012ee2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	6819      	ldr	r1, [r3, #0]
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	3318      	adds	r3, #24
 8012eb8:	7bfa      	ldrb	r2, [r7, #15]
 8012eba:	9300      	str	r3, [sp, #0]
 8012ebc:	4613      	mov	r3, r2
 8012ebe:	2213      	movs	r2, #19
 8012ec0:	2000      	movs	r0, #0
 8012ec2:	f7f8 fb11 	bl	800b4e8 <SecureElementComputeAesCmac>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d001      	beq.n	8012ed0 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012ecc:	230f      	movs	r3, #15
 8012ece:	e008      	b.n	8012ee2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012ed0:	6878      	ldr	r0, [r7, #4]
 8012ed2:	f000 fbff 	bl	80136d4 <LoRaMacSerializerJoinRequest>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d001      	beq.n	8012ee0 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012edc:	2311      	movs	r3, #17
 8012ede:	e000      	b.n	8012ee2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012ee0:	2300      	movs	r3, #0
}
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	3710      	adds	r7, #16
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bd80      	pop	{r7, pc}
 8012eea:	bf00      	nop
 8012eec:	20001384 	.word	0x20001384

08012ef0 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8012ef0:	b590      	push	{r4, r7, lr}
 8012ef2:	b097      	sub	sp, #92	@ 0x5c
 8012ef4:	af04      	add	r7, sp, #16
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	60b9      	str	r1, [r7, #8]
 8012efa:	607a      	str	r2, [r7, #4]
 8012efc:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d002      	beq.n	8012f0a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d101      	bne.n	8012f0e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012f0a:	230a      	movs	r3, #10
 8012f0c:	e0d3      	b.n	80130b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012f0e:	2313      	movs	r3, #19
 8012f10:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8012f14:	2300      	movs	r3, #0
 8012f16:	617b      	str	r3, [r7, #20]
 8012f18:	f107 0318 	add.w	r3, r7, #24
 8012f1c:	221d      	movs	r2, #29
 8012f1e:	2100      	movs	r1, #0
 8012f20:	4618      	mov	r0, r3
 8012f22:	f009 fba3 	bl	801c66c <memset>
    uint8_t versionMinor         = 0;
 8012f26:	2300      	movs	r3, #0
 8012f28:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8012f2a:	4b65      	ldr	r3, [pc, #404]	@ (80130c0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	889b      	ldrh	r3, [r3, #4]
 8012f30:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	681c      	ldr	r4, [r3, #0]
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	791b      	ldrb	r3, [r3, #4]
 8012f3c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8012f40:	7bf8      	ldrb	r0, [r7, #15]
 8012f42:	f107 0213 	add.w	r2, r7, #19
 8012f46:	9202      	str	r2, [sp, #8]
 8012f48:	f107 0214 	add.w	r2, r7, #20
 8012f4c:	9201      	str	r2, [sp, #4]
 8012f4e:	9300      	str	r3, [sp, #0]
 8012f50:	4623      	mov	r3, r4
 8012f52:	460a      	mov	r2, r1
 8012f54:	68b9      	ldr	r1, [r7, #8]
 8012f56:	f7f8 fbcd 	bl	800b6f4 <SecureElementProcessJoinAccept>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d001      	beq.n	8012f64 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012f60:	230f      	movs	r3, #15
 8012f62:	e0a8      	b.n	80130b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	6818      	ldr	r0, [r3, #0]
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	791b      	ldrb	r3, [r3, #4]
 8012f6c:	461a      	mov	r2, r3
 8012f6e:	f107 0314 	add.w	r3, r7, #20
 8012f72:	4619      	mov	r1, r3
 8012f74:	f004 fc0d 	bl	8017792 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8012f78:	6878      	ldr	r0, [r7, #4]
 8012f7a:	f000 f9ee 	bl	801335a <LoRaMacParserJoinAccept>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d001      	beq.n	8012f88 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8012f84:	2310      	movs	r3, #16
 8012f86:	e096      	b.n	80130b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8012f88:	2300      	movs	r3, #0
 8012f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	799b      	ldrb	r3, [r3, #6]
 8012f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	79db      	ldrb	r3, [r3, #7]
 8012f98:	021b      	lsls	r3, r3, #8
 8012f9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012f9c:	4313      	orrs	r3, r2
 8012f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	7a1b      	ldrb	r3, [r3, #8]
 8012fa4:	041b      	lsls	r3, r3, #16
 8012fa6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012fa8:	4313      	orrs	r3, r2
 8012faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8012fac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012fae:	f7ff fe1b 	bl	8012be8 <IsJoinNonce10xOk>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 8012fb8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d010      	beq.n	8012fe2 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8012fc0:	4b3f      	ldr	r3, [pc, #252]	@ (80130c0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012fc6:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8012fc8:	7cfb      	ldrb	r3, [r7, #19]
 8012fca:	210b      	movs	r1, #11
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f000 f989 	bl	80132e4 <LoRaMacCryptoDeriveLifeTimeKey>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012fd8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d005      	beq.n	8012fec <LoRaMacCryptoHandleJoinAccept+0xfc>
 8012fe0:	e001      	b.n	8012fe6 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8012fe2:	2303      	movs	r3, #3
 8012fe4:	e067      	b.n	80130b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8012fe6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012fea:	e064      	b.n	80130b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8012fec:	210c      	movs	r1, #12
 8012fee:	2000      	movs	r0, #0
 8012ff0:	f000 f978 	bl	80132e4 <LoRaMacCryptoDeriveLifeTimeKey>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012ffa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d002      	beq.n	8013008 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8013002:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013006:	e056      	b.n	80130b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8013008:	210a      	movs	r1, #10
 801300a:	2000      	movs	r0, #0
 801300c:	f000 f96a 	bl	80132e4 <LoRaMacCryptoDeriveLifeTimeKey>
 8013010:	4603      	mov	r3, r0
 8013012:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013016:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801301a:	2b00      	cmp	r3, #0
 801301c:	d002      	beq.n	8013024 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 801301e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013022:	e048      	b.n	80130b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	7a5b      	ldrb	r3, [r3, #9]
 8013028:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	7a9b      	ldrb	r3, [r3, #10]
 801302e:	021b      	lsls	r3, r3, #8
 8013030:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013032:	4313      	orrs	r3, r2
 8013034:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	7adb      	ldrb	r3, [r3, #11]
 801303a:	041b      	lsls	r3, r3, #16
 801303c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801303e:	4313      	orrs	r3, r2
 8013040:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8013042:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013046:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013048:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801304a:	2009      	movs	r0, #9
 801304c:	f7ff fca8 	bl	80129a0 <DeriveSessionKey10x>
 8013050:	4603      	mov	r3, r0
 8013052:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013056:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801305a:	2b00      	cmp	r3, #0
 801305c:	d002      	beq.n	8013064 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 801305e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013062:	e028      	b.n	80130b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8013064:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013068:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801306a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801306c:	2008      	movs	r0, #8
 801306e:	f7ff fc97 	bl	80129a0 <DeriveSessionKey10x>
 8013072:	4603      	mov	r3, r0
 8013074:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013078:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801307c:	2b00      	cmp	r3, #0
 801307e:	d002      	beq.n	8013086 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8013080:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013084:	e017      	b.n	80130b6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8013086:	4b0e      	ldr	r3, [pc, #56]	@ (80130c0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	7cfa      	ldrb	r2, [r7, #19]
 801308c:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 801308e:	4b0c      	ldr	r3, [pc, #48]	@ (80130c0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	2200      	movs	r2, #0
 8013094:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8013096:	4b0a      	ldr	r3, [pc, #40]	@ (80130c0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	f04f 32ff 	mov.w	r2, #4294967295
 801309e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80130a0:	4b07      	ldr	r3, [pc, #28]	@ (80130c0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	f04f 32ff 	mov.w	r2, #4294967295
 80130a8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80130aa:	4b05      	ldr	r3, [pc, #20]	@ (80130c0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	f04f 32ff 	mov.w	r2, #4294967295
 80130b2:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80130b4:	2300      	movs	r3, #0
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	374c      	adds	r7, #76	@ 0x4c
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd90      	pop	{r4, r7, pc}
 80130be:	bf00      	nop
 80130c0:	20001384 	.word	0x20001384

080130c4 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80130c4:	b590      	push	{r4, r7, lr}
 80130c6:	b08b      	sub	sp, #44	@ 0x2c
 80130c8:	af04      	add	r7, sp, #16
 80130ca:	60f8      	str	r0, [r7, #12]
 80130cc:	607b      	str	r3, [r7, #4]
 80130ce:	460b      	mov	r3, r1
 80130d0:	72fb      	strb	r3, [r7, #11]
 80130d2:	4613      	mov	r3, r2
 80130d4:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80130d6:	2313      	movs	r3, #19
 80130d8:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80130da:	2309      	movs	r3, #9
 80130dc:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d101      	bne.n	80130e8 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80130e4:	230a      	movs	r3, #10
 80130e6:	e05e      	b.n	80131a6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80130e8:	4b31      	ldr	r3, [pc, #196]	@ (80131b0 <LoRaMacCryptoSecureMessage+0xec>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	68db      	ldr	r3, [r3, #12]
 80130ee:	68fa      	ldr	r2, [r7, #12]
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d201      	bcs.n	80130f8 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80130f4:	2306      	movs	r3, #6
 80130f6:	e056      	b.n	80131a6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d101      	bne.n	8013106 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8013102:	2308      	movs	r3, #8
 8013104:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8013106:	4b2a      	ldr	r3, [pc, #168]	@ (80131b0 <LoRaMacCryptoSecureMessage+0xec>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	68db      	ldr	r3, [r3, #12]
 801310c:	68fa      	ldr	r2, [r7, #12]
 801310e:	429a      	cmp	r2, r3
 8013110:	d916      	bls.n	8013140 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801311c:	b219      	sxth	r1, r3
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	689c      	ldr	r4, [r3, #8]
 8013122:	7dfa      	ldrb	r2, [r7, #23]
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	9301      	str	r3, [sp, #4]
 8013128:	2300      	movs	r3, #0
 801312a:	9300      	str	r3, [sp, #0]
 801312c:	4623      	mov	r3, r4
 801312e:	f7ff fa43 	bl	80125b8 <PayloadEncrypt>
 8013132:	4603      	mov	r3, r0
 8013134:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013136:	7dbb      	ldrb	r3, [r7, #22]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d001      	beq.n	8013140 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 801313c:	7dbb      	ldrb	r3, [r7, #22]
 801313e:	e032      	b.n	80131a6 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f000 fb49 	bl	80137d8 <LoRaMacSerializerData>
 8013146:	4603      	mov	r3, r0
 8013148:	2b00      	cmp	r3, #0
 801314a:	d001      	beq.n	8013150 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801314c:	2311      	movs	r3, #17
 801314e:	e02a      	b.n	80131a6 <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8013150:	2308      	movs	r3, #8
 8013152:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	6818      	ldr	r0, [r3, #0]
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	791b      	ldrb	r3, [r3, #4]
 801315c:	3b04      	subs	r3, #4
 801315e:	b299      	uxth	r1, r3
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	689b      	ldr	r3, [r3, #8]
 8013164:	687a      	ldr	r2, [r7, #4]
 8013166:	322c      	adds	r2, #44	@ 0x2c
 8013168:	7dfc      	ldrb	r4, [r7, #23]
 801316a:	9203      	str	r2, [sp, #12]
 801316c:	68fa      	ldr	r2, [r7, #12]
 801316e:	9202      	str	r2, [sp, #8]
 8013170:	9301      	str	r3, [sp, #4]
 8013172:	2300      	movs	r3, #0
 8013174:	9300      	str	r3, [sp, #0]
 8013176:	2300      	movs	r3, #0
 8013178:	4622      	mov	r2, r4
 801317a:	f7ff fb1e 	bl	80127ba <ComputeCmacB0>
 801317e:	4603      	mov	r3, r0
 8013180:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013182:	7dbb      	ldrb	r3, [r7, #22]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d001      	beq.n	801318c <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8013188:	7dbb      	ldrb	r3, [r7, #22]
 801318a:	e00c      	b.n	80131a6 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801318c:	6878      	ldr	r0, [r7, #4]
 801318e:	f000 fb23 	bl	80137d8 <LoRaMacSerializerData>
 8013192:	4603      	mov	r3, r0
 8013194:	2b00      	cmp	r3, #0
 8013196:	d001      	beq.n	801319c <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013198:	2311      	movs	r3, #17
 801319a:	e004      	b.n	80131a6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801319c:	4b04      	ldr	r3, [pc, #16]	@ (80131b0 <LoRaMacCryptoSecureMessage+0xec>)
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	68fa      	ldr	r2, [r7, #12]
 80131a2:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80131a4:	2300      	movs	r3, #0
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	371c      	adds	r7, #28
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd90      	pop	{r4, r7, pc}
 80131ae:	bf00      	nop
 80131b0:	20001384 	.word	0x20001384

080131b4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80131b4:	b590      	push	{r4, r7, lr}
 80131b6:	b08b      	sub	sp, #44	@ 0x2c
 80131b8:	af04      	add	r7, sp, #16
 80131ba:	60b9      	str	r1, [r7, #8]
 80131bc:	607b      	str	r3, [r7, #4]
 80131be:	4603      	mov	r3, r0
 80131c0:	73fb      	strb	r3, [r7, #15]
 80131c2:	4613      	mov	r3, r2
 80131c4:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80131c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d101      	bne.n	80131d0 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80131cc:	230a      	movs	r3, #10
 80131ce:	e083      	b.n	80132d8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80131d0:	7bbb      	ldrb	r3, [r7, #14]
 80131d2:	6879      	ldr	r1, [r7, #4]
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7ff fc6f 	bl	8012ab8 <CheckFCntDown>
 80131da:	4603      	mov	r3, r0
 80131dc:	f083 0301 	eor.w	r3, r3, #1
 80131e0:	b2db      	uxtb	r3, r3
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d001      	beq.n	80131ea <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80131e6:	2306      	movs	r3, #6
 80131e8:	e076      	b.n	80132d8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80131ea:	2313      	movs	r3, #19
 80131ec:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80131ee:	2309      	movs	r3, #9
 80131f0:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80131f2:	2308      	movs	r3, #8
 80131f4:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80131f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80131f8:	f000 f97a 	bl	80134f0 <LoRaMacParserData>
 80131fc:	4603      	mov	r3, r0
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d001      	beq.n	8013206 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013202:	2310      	movs	r3, #16
 8013204:	e068      	b.n	80132d8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8013206:	f107 0210 	add.w	r2, r7, #16
 801320a:	7bfb      	ldrb	r3, [r7, #15]
 801320c:	4611      	mov	r1, r2
 801320e:	4618      	mov	r0, r3
 8013210:	f7ff fba0 	bl	8012954 <GetKeyAddrItem>
 8013214:	4603      	mov	r3, r0
 8013216:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013218:	7d7b      	ldrb	r3, [r7, #21]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d001      	beq.n	8013222 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801321e:	7d7b      	ldrb	r3, [r7, #21]
 8013220:	e05a      	b.n	80132d8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	785b      	ldrb	r3, [r3, #1]
 8013226:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	789b      	ldrb	r3, [r3, #2]
 801322c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801322e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013230:	689b      	ldr	r3, [r3, #8]
 8013232:	68ba      	ldr	r2, [r7, #8]
 8013234:	429a      	cmp	r2, r3
 8013236:	d001      	beq.n	801323c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8013238:	2302      	movs	r3, #2
 801323a:	e04d      	b.n	80132d8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801323c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801323e:	7b1b      	ldrb	r3, [r3, #12]
 8013240:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013244:	b2db      	uxtb	r3, r3
 8013246:	2b00      	cmp	r3, #0
 8013248:	bf14      	ite	ne
 801324a:	2301      	movne	r3, #1
 801324c:	2300      	moveq	r3, #0
 801324e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013250:	4b23      	ldr	r3, [pc, #140]	@ (80132e0 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	789b      	ldrb	r3, [r3, #2]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d101      	bne.n	801325e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801325a:	2300      	movs	r3, #0
 801325c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801325e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013260:	6818      	ldr	r0, [r3, #0]
 8013262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013264:	791b      	ldrb	r3, [r3, #4]
 8013266:	3b04      	subs	r3, #4
 8013268:	b299      	uxth	r1, r3
 801326a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801326c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801326e:	7dbc      	ldrb	r4, [r7, #22]
 8013270:	7d3a      	ldrb	r2, [r7, #20]
 8013272:	9303      	str	r3, [sp, #12]
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	9302      	str	r3, [sp, #8]
 8013278:	68bb      	ldr	r3, [r7, #8]
 801327a:	9301      	str	r3, [sp, #4]
 801327c:	2301      	movs	r3, #1
 801327e:	9300      	str	r3, [sp, #0]
 8013280:	4623      	mov	r3, r4
 8013282:	f7ff fad8 	bl	8012836 <VerifyCmacB0>
 8013286:	4603      	mov	r3, r0
 8013288:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801328a:	7d7b      	ldrb	r3, [r7, #21]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d001      	beq.n	8013294 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8013290:	7d7b      	ldrb	r3, [r7, #21]
 8013292:	e021      	b.n	80132d8 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8013294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013296:	f893 3020 	ldrb.w	r3, [r3, #32]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d101      	bne.n	80132a2 <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801329e:	2308      	movs	r3, #8
 80132a0:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80132a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132a4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80132a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80132ac:	b219      	sxth	r1, r3
 80132ae:	7dfa      	ldrb	r2, [r7, #23]
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	9301      	str	r3, [sp, #4]
 80132b4:	2301      	movs	r3, #1
 80132b6:	9300      	str	r3, [sp, #0]
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	f7ff f97d 	bl	80125b8 <PayloadEncrypt>
 80132be:	4603      	mov	r3, r0
 80132c0:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80132c2:	7d7b      	ldrb	r3, [r7, #21]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d001      	beq.n	80132cc <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 80132c8:	7d7b      	ldrb	r3, [r7, #21]
 80132ca:	e005      	b.n	80132d8 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 80132cc:	7bbb      	ldrb	r3, [r7, #14]
 80132ce:	6879      	ldr	r1, [r7, #4]
 80132d0:	4618      	mov	r0, r3
 80132d2:	f7ff fc15 	bl	8012b00 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80132d6:	2300      	movs	r3, #0
}
 80132d8:	4618      	mov	r0, r3
 80132da:	371c      	adds	r7, #28
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd90      	pop	{r4, r7, pc}
 80132e0:	20001384 	.word	0x20001384

080132e4 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b088      	sub	sp, #32
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	4603      	mov	r3, r0
 80132ec:	460a      	mov	r2, r1
 80132ee:	71fb      	strb	r3, [r7, #7]
 80132f0:	4613      	mov	r3, r2
 80132f2:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 80132f4:	2300      	movs	r3, #0
 80132f6:	60fb      	str	r3, [r7, #12]
 80132f8:	f107 0310 	add.w	r3, r7, #16
 80132fc:	2200      	movs	r2, #0
 80132fe:	601a      	str	r2, [r3, #0]
 8013300:	605a      	str	r2, [r3, #4]
 8013302:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8013304:	2300      	movs	r3, #0
 8013306:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8013308:	79bb      	ldrb	r3, [r7, #6]
 801330a:	2b0c      	cmp	r3, #12
 801330c:	d00b      	beq.n	8013326 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 801330e:	2b0c      	cmp	r3, #12
 8013310:	dc0f      	bgt.n	8013332 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8013312:	2b0a      	cmp	r3, #10
 8013314:	d00a      	beq.n	801332c <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8013316:	2b0b      	cmp	r3, #11
 8013318:	d10b      	bne.n	8013332 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 801331a:	79fb      	ldrb	r3, [r7, #7]
 801331c:	2b01      	cmp	r3, #1
 801331e:	d10a      	bne.n	8013336 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8013320:	2320      	movs	r3, #32
 8013322:	733b      	strb	r3, [r7, #12]
            }
            break;
 8013324:	e007      	b.n	8013336 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8013326:	230b      	movs	r3, #11
 8013328:	77fb      	strb	r3, [r7, #31]
            break;
 801332a:	e005      	b.n	8013338 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 801332c:	2330      	movs	r3, #48	@ 0x30
 801332e:	733b      	strb	r3, [r7, #12]
            break;
 8013330:	e002      	b.n	8013338 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013332:	230b      	movs	r3, #11
 8013334:	e00d      	b.n	8013352 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8013336:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013338:	79ba      	ldrb	r2, [r7, #6]
 801333a:	7ff9      	ldrb	r1, [r7, #31]
 801333c:	f107 030c 	add.w	r3, r7, #12
 8013340:	4618      	mov	r0, r3
 8013342:	f7f8 f997 	bl	800b674 <SecureElementDeriveAndStoreKey>
 8013346:	4603      	mov	r3, r0
 8013348:	2b00      	cmp	r3, #0
 801334a:	d001      	beq.n	8013350 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801334c:	230f      	movs	r3, #15
 801334e:	e000      	b.n	8013352 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013350:	2300      	movs	r3, #0
}
 8013352:	4618      	mov	r0, r3
 8013354:	3720      	adds	r7, #32
 8013356:	46bd      	mov	sp, r7
 8013358:	bd80      	pop	{r7, pc}

0801335a <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801335a:	b580      	push	{r7, lr}
 801335c:	b084      	sub	sp, #16
 801335e:	af00      	add	r7, sp, #0
 8013360:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d003      	beq.n	8013370 <LoRaMacParserJoinAccept+0x16>
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d101      	bne.n	8013374 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013370:	2302      	movs	r3, #2
 8013372:	e0b9      	b.n	80134e8 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8013374:	2300      	movs	r3, #0
 8013376:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681a      	ldr	r2, [r3, #0]
 801337c:	89fb      	ldrh	r3, [r7, #14]
 801337e:	1c59      	adds	r1, r3, #1
 8013380:	81f9      	strh	r1, [r7, #14]
 8013382:	4413      	add	r3, r2
 8013384:	781a      	ldrb	r2, [r3, #0]
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	1d98      	adds	r0, r3, #6
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	681a      	ldr	r2, [r3, #0]
 8013392:	89fb      	ldrh	r3, [r7, #14]
 8013394:	4413      	add	r3, r2
 8013396:	2203      	movs	r2, #3
 8013398:	4619      	mov	r1, r3
 801339a:	f004 f9fa 	bl	8017792 <memcpy1>
    bufItr = bufItr + 3;
 801339e:	89fb      	ldrh	r3, [r7, #14]
 80133a0:	3303      	adds	r3, #3
 80133a2:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f103 0009 	add.w	r0, r3, #9
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	681a      	ldr	r2, [r3, #0]
 80133ae:	89fb      	ldrh	r3, [r7, #14]
 80133b0:	4413      	add	r3, r2
 80133b2:	2203      	movs	r2, #3
 80133b4:	4619      	mov	r1, r3
 80133b6:	f004 f9ec 	bl	8017792 <memcpy1>
    bufItr = bufItr + 3;
 80133ba:	89fb      	ldrh	r3, [r7, #14]
 80133bc:	3303      	adds	r3, #3
 80133be:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	681a      	ldr	r2, [r3, #0]
 80133c4:	89fb      	ldrh	r3, [r7, #14]
 80133c6:	1c59      	adds	r1, r3, #1
 80133c8:	81f9      	strh	r1, [r7, #14]
 80133ca:	4413      	add	r3, r2
 80133cc:	781b      	ldrb	r3, [r3, #0]
 80133ce:	461a      	mov	r2, r3
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	681a      	ldr	r2, [r3, #0]
 80133d8:	89fb      	ldrh	r3, [r7, #14]
 80133da:	1c59      	adds	r1, r3, #1
 80133dc:	81f9      	strh	r1, [r7, #14]
 80133de:	4413      	add	r3, r2
 80133e0:	781b      	ldrb	r3, [r3, #0]
 80133e2:	021a      	lsls	r2, r3, #8
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	68db      	ldr	r3, [r3, #12]
 80133e8:	431a      	orrs	r2, r3
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681a      	ldr	r2, [r3, #0]
 80133f2:	89fb      	ldrh	r3, [r7, #14]
 80133f4:	1c59      	adds	r1, r3, #1
 80133f6:	81f9      	strh	r1, [r7, #14]
 80133f8:	4413      	add	r3, r2
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	041a      	lsls	r2, r3, #16
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	68db      	ldr	r3, [r3, #12]
 8013402:	431a      	orrs	r2, r3
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681a      	ldr	r2, [r3, #0]
 801340c:	89fb      	ldrh	r3, [r7, #14]
 801340e:	1c59      	adds	r1, r3, #1
 8013410:	81f9      	strh	r1, [r7, #14]
 8013412:	4413      	add	r3, r2
 8013414:	781b      	ldrb	r3, [r3, #0]
 8013416:	061a      	lsls	r2, r3, #24
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	68db      	ldr	r3, [r3, #12]
 801341c:	431a      	orrs	r2, r3
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681a      	ldr	r2, [r3, #0]
 8013426:	89fb      	ldrh	r3, [r7, #14]
 8013428:	1c59      	adds	r1, r3, #1
 801342a:	81f9      	strh	r1, [r7, #14]
 801342c:	4413      	add	r3, r2
 801342e:	781a      	ldrb	r2, [r3, #0]
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681a      	ldr	r2, [r3, #0]
 8013438:	89fb      	ldrh	r3, [r7, #14]
 801343a:	1c59      	adds	r1, r3, #1
 801343c:	81f9      	strh	r1, [r7, #14]
 801343e:	4413      	add	r3, r2
 8013440:	781a      	ldrb	r2, [r3, #0]
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	791b      	ldrb	r3, [r3, #4]
 801344a:	1f1a      	subs	r2, r3, #4
 801344c:	89fb      	ldrh	r3, [r7, #14]
 801344e:	1ad3      	subs	r3, r2, r3
 8013450:	2b10      	cmp	r3, #16
 8013452:	d10e      	bne.n	8013472 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f103 0012 	add.w	r0, r3, #18
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	681a      	ldr	r2, [r3, #0]
 801345e:	89fb      	ldrh	r3, [r7, #14]
 8013460:	4413      	add	r3, r2
 8013462:	2210      	movs	r2, #16
 8013464:	4619      	mov	r1, r3
 8013466:	f004 f994 	bl	8017792 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801346a:	89fb      	ldrh	r3, [r7, #14]
 801346c:	3310      	adds	r3, #16
 801346e:	81fb      	strh	r3, [r7, #14]
 8013470:	e008      	b.n	8013484 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	791b      	ldrb	r3, [r3, #4]
 8013476:	1f1a      	subs	r2, r3, #4
 8013478:	89fb      	ldrh	r3, [r7, #14]
 801347a:	1ad3      	subs	r3, r2, r3
 801347c:	2b00      	cmp	r3, #0
 801347e:	dd01      	ble.n	8013484 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8013480:	2301      	movs	r3, #1
 8013482:	e031      	b.n	80134e8 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681a      	ldr	r2, [r3, #0]
 8013488:	89fb      	ldrh	r3, [r7, #14]
 801348a:	1c59      	adds	r1, r3, #1
 801348c:	81f9      	strh	r1, [r7, #14]
 801348e:	4413      	add	r3, r2
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	461a      	mov	r2, r3
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	681a      	ldr	r2, [r3, #0]
 801349c:	89fb      	ldrh	r3, [r7, #14]
 801349e:	1c59      	adds	r1, r3, #1
 80134a0:	81f9      	strh	r1, [r7, #14]
 80134a2:	4413      	add	r3, r2
 80134a4:	781b      	ldrb	r3, [r3, #0]
 80134a6:	021a      	lsls	r2, r3, #8
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134ac:	431a      	orrs	r2, r3
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	681a      	ldr	r2, [r3, #0]
 80134b6:	89fb      	ldrh	r3, [r7, #14]
 80134b8:	1c59      	adds	r1, r3, #1
 80134ba:	81f9      	strh	r1, [r7, #14]
 80134bc:	4413      	add	r3, r2
 80134be:	781b      	ldrb	r3, [r3, #0]
 80134c0:	041a      	lsls	r2, r3, #16
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134c6:	431a      	orrs	r2, r3
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	681a      	ldr	r2, [r3, #0]
 80134d0:	89fb      	ldrh	r3, [r7, #14]
 80134d2:	1c59      	adds	r1, r3, #1
 80134d4:	81f9      	strh	r1, [r7, #14]
 80134d6:	4413      	add	r3, r2
 80134d8:	781b      	ldrb	r3, [r3, #0]
 80134da:	061a      	lsls	r2, r3, #24
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134e0:	431a      	orrs	r2, r3
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 80134e6:	2300      	movs	r3, #0
}
 80134e8:	4618      	mov	r0, r3
 80134ea:	3710      	adds	r7, #16
 80134ec:	46bd      	mov	sp, r7
 80134ee:	bd80      	pop	{r7, pc}

080134f0 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b084      	sub	sp, #16
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d003      	beq.n	8013506 <LoRaMacParserData+0x16>
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d101      	bne.n	801350a <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013506:	2302      	movs	r3, #2
 8013508:	e0e0      	b.n	80136cc <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 801350a:	2300      	movs	r3, #0
 801350c:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	681a      	ldr	r2, [r3, #0]
 8013512:	89fb      	ldrh	r3, [r7, #14]
 8013514:	1c59      	adds	r1, r3, #1
 8013516:	81f9      	strh	r1, [r7, #14]
 8013518:	4413      	add	r3, r2
 801351a:	781a      	ldrb	r2, [r3, #0]
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681a      	ldr	r2, [r3, #0]
 8013524:	89fb      	ldrh	r3, [r7, #14]
 8013526:	1c59      	adds	r1, r3, #1
 8013528:	81f9      	strh	r1, [r7, #14]
 801352a:	4413      	add	r3, r2
 801352c:	781b      	ldrb	r3, [r3, #0]
 801352e:	461a      	mov	r2, r3
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681a      	ldr	r2, [r3, #0]
 8013538:	89fb      	ldrh	r3, [r7, #14]
 801353a:	1c59      	adds	r1, r3, #1
 801353c:	81f9      	strh	r1, [r7, #14]
 801353e:	4413      	add	r3, r2
 8013540:	781b      	ldrb	r3, [r3, #0]
 8013542:	021a      	lsls	r2, r3, #8
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	689b      	ldr	r3, [r3, #8]
 8013548:	431a      	orrs	r2, r3
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681a      	ldr	r2, [r3, #0]
 8013552:	89fb      	ldrh	r3, [r7, #14]
 8013554:	1c59      	adds	r1, r3, #1
 8013556:	81f9      	strh	r1, [r7, #14]
 8013558:	4413      	add	r3, r2
 801355a:	781b      	ldrb	r3, [r3, #0]
 801355c:	041a      	lsls	r2, r3, #16
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	689b      	ldr	r3, [r3, #8]
 8013562:	431a      	orrs	r2, r3
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	681a      	ldr	r2, [r3, #0]
 801356c:	89fb      	ldrh	r3, [r7, #14]
 801356e:	1c59      	adds	r1, r3, #1
 8013570:	81f9      	strh	r1, [r7, #14]
 8013572:	4413      	add	r3, r2
 8013574:	781b      	ldrb	r3, [r3, #0]
 8013576:	061a      	lsls	r2, r3, #24
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	689b      	ldr	r3, [r3, #8]
 801357c:	431a      	orrs	r2, r3
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	681a      	ldr	r2, [r3, #0]
 8013586:	89fb      	ldrh	r3, [r7, #14]
 8013588:	1c59      	adds	r1, r3, #1
 801358a:	81f9      	strh	r1, [r7, #14]
 801358c:	4413      	add	r3, r2
 801358e:	781a      	ldrb	r2, [r3, #0]
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681a      	ldr	r2, [r3, #0]
 8013598:	89fb      	ldrh	r3, [r7, #14]
 801359a:	1c59      	adds	r1, r3, #1
 801359c:	81f9      	strh	r1, [r7, #14]
 801359e:	4413      	add	r3, r2
 80135a0:	781b      	ldrb	r3, [r3, #0]
 80135a2:	461a      	mov	r2, r3
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681a      	ldr	r2, [r3, #0]
 80135ac:	89fb      	ldrh	r3, [r7, #14]
 80135ae:	1c59      	adds	r1, r3, #1
 80135b0:	81f9      	strh	r1, [r7, #14]
 80135b2:	4413      	add	r3, r2
 80135b4:	781b      	ldrb	r3, [r3, #0]
 80135b6:	0219      	lsls	r1, r3, #8
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	89db      	ldrh	r3, [r3, #14]
 80135bc:	b21a      	sxth	r2, r3
 80135be:	b20b      	sxth	r3, r1
 80135c0:	4313      	orrs	r3, r2
 80135c2:	b21b      	sxth	r3, r3
 80135c4:	b29a      	uxth	r2, r3
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f103 0010 	add.w	r0, r3, #16
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681a      	ldr	r2, [r3, #0]
 80135d4:	89fb      	ldrh	r3, [r7, #14]
 80135d6:	18d1      	adds	r1, r2, r3
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	7b1b      	ldrb	r3, [r3, #12]
 80135dc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80135e0:	b2db      	uxtb	r3, r3
 80135e2:	461a      	mov	r2, r3
 80135e4:	f004 f8d5 	bl	8017792 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	7b1b      	ldrb	r3, [r3, #12]
 80135ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80135f0:	b2db      	uxtb	r3, r3
 80135f2:	461a      	mov	r2, r3
 80135f4:	89fb      	ldrh	r3, [r7, #14]
 80135f6:	4413      	add	r3, r2
 80135f8:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	2200      	movs	r2, #0
 80135fe:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	2200      	movs	r2, #0
 8013606:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	791b      	ldrb	r3, [r3, #4]
 801360e:	461a      	mov	r2, r3
 8013610:	89fb      	ldrh	r3, [r7, #14]
 8013612:	1ad3      	subs	r3, r2, r3
 8013614:	2b04      	cmp	r3, #4
 8013616:	dd27      	ble.n	8013668 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	681a      	ldr	r2, [r3, #0]
 801361c:	89fb      	ldrh	r3, [r7, #14]
 801361e:	1c59      	adds	r1, r3, #1
 8013620:	81f9      	strh	r1, [r7, #14]
 8013622:	4413      	add	r3, r2
 8013624:	781a      	ldrb	r2, [r3, #0]
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	791a      	ldrb	r2, [r3, #4]
 8013630:	89fb      	ldrh	r3, [r7, #14]
 8013632:	b2db      	uxtb	r3, r3
 8013634:	1ad3      	subs	r3, r2, r3
 8013636:	b2db      	uxtb	r3, r3
 8013638:	3b04      	subs	r3, #4
 801363a:	b2da      	uxtb	r2, r3
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	681a      	ldr	r2, [r3, #0]
 801364a:	89fb      	ldrh	r3, [r7, #14]
 801364c:	18d1      	adds	r1, r2, r3
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013654:	461a      	mov	r2, r3
 8013656:	f004 f89c 	bl	8017792 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013660:	461a      	mov	r2, r3
 8013662:	89fb      	ldrh	r3, [r7, #14]
 8013664:	4413      	add	r3, r2
 8013666:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	681a      	ldr	r2, [r3, #0]
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	791b      	ldrb	r3, [r3, #4]
 8013670:	3b04      	subs	r3, #4
 8013672:	4413      	add	r3, r2
 8013674:	781b      	ldrb	r3, [r3, #0]
 8013676:	461a      	mov	r2, r3
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	6819      	ldr	r1, [r3, #0]
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	791b      	ldrb	r3, [r3, #4]
 8013688:	3b03      	subs	r3, #3
 801368a:	440b      	add	r3, r1
 801368c:	781b      	ldrb	r3, [r3, #0]
 801368e:	021b      	lsls	r3, r3, #8
 8013690:	431a      	orrs	r2, r3
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6819      	ldr	r1, [r3, #0]
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	791b      	ldrb	r3, [r3, #4]
 80136a2:	3b02      	subs	r3, #2
 80136a4:	440b      	add	r3, r1
 80136a6:	781b      	ldrb	r3, [r3, #0]
 80136a8:	041b      	lsls	r3, r3, #16
 80136aa:	431a      	orrs	r2, r3
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	6819      	ldr	r1, [r3, #0]
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	791b      	ldrb	r3, [r3, #4]
 80136bc:	3b01      	subs	r3, #1
 80136be:	440b      	add	r3, r1
 80136c0:	781b      	ldrb	r3, [r3, #0]
 80136c2:	061b      	lsls	r3, r3, #24
 80136c4:	431a      	orrs	r2, r3
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80136ca:	2300      	movs	r3, #0
}
 80136cc:	4618      	mov	r0, r3
 80136ce:	3710      	adds	r7, #16
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}

080136d4 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b084      	sub	sp, #16
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d003      	beq.n	80136ea <LoRaMacSerializerJoinRequest+0x16>
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d101      	bne.n	80136ee <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80136ea:	2301      	movs	r3, #1
 80136ec:	e070      	b.n	80137d0 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80136ee:	2300      	movs	r3, #0
 80136f0:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	791b      	ldrb	r3, [r3, #4]
 80136f6:	2b16      	cmp	r3, #22
 80136f8:	d801      	bhi.n	80136fe <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80136fa:	2302      	movs	r3, #2
 80136fc:	e068      	b.n	80137d0 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681a      	ldr	r2, [r3, #0]
 8013702:	89fb      	ldrh	r3, [r7, #14]
 8013704:	1c59      	adds	r1, r3, #1
 8013706:	81f9      	strh	r1, [r7, #14]
 8013708:	4413      	add	r3, r2
 801370a:	687a      	ldr	r2, [r7, #4]
 801370c:	7952      	ldrb	r2, [r2, #5]
 801370e:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	681a      	ldr	r2, [r3, #0]
 8013714:	89fb      	ldrh	r3, [r7, #14]
 8013716:	18d0      	adds	r0, r2, r3
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	3306      	adds	r3, #6
 801371c:	2208      	movs	r2, #8
 801371e:	4619      	mov	r1, r3
 8013720:	f004 f852 	bl	80177c8 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013724:	89fb      	ldrh	r3, [r7, #14]
 8013726:	3308      	adds	r3, #8
 8013728:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681a      	ldr	r2, [r3, #0]
 801372e:	89fb      	ldrh	r3, [r7, #14]
 8013730:	18d0      	adds	r0, r2, r3
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	330e      	adds	r3, #14
 8013736:	2208      	movs	r2, #8
 8013738:	4619      	mov	r1, r3
 801373a:	f004 f845 	bl	80177c8 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 801373e:	89fb      	ldrh	r3, [r7, #14]
 8013740:	3308      	adds	r3, #8
 8013742:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	8ad9      	ldrh	r1, [r3, #22]
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	681a      	ldr	r2, [r3, #0]
 801374c:	89fb      	ldrh	r3, [r7, #14]
 801374e:	1c58      	adds	r0, r3, #1
 8013750:	81f8      	strh	r0, [r7, #14]
 8013752:	4413      	add	r3, r2
 8013754:	b2ca      	uxtb	r2, r1
 8013756:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	8adb      	ldrh	r3, [r3, #22]
 801375c:	0a1b      	lsrs	r3, r3, #8
 801375e:	b299      	uxth	r1, r3
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	681a      	ldr	r2, [r3, #0]
 8013764:	89fb      	ldrh	r3, [r7, #14]
 8013766:	1c58      	adds	r0, r3, #1
 8013768:	81f8      	strh	r0, [r7, #14]
 801376a:	4413      	add	r3, r2
 801376c:	b2ca      	uxtb	r2, r1
 801376e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	6999      	ldr	r1, [r3, #24]
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	681a      	ldr	r2, [r3, #0]
 8013778:	89fb      	ldrh	r3, [r7, #14]
 801377a:	1c58      	adds	r0, r3, #1
 801377c:	81f8      	strh	r0, [r7, #14]
 801377e:	4413      	add	r3, r2
 8013780:	b2ca      	uxtb	r2, r1
 8013782:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	699b      	ldr	r3, [r3, #24]
 8013788:	0a19      	lsrs	r1, r3, #8
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	681a      	ldr	r2, [r3, #0]
 801378e:	89fb      	ldrh	r3, [r7, #14]
 8013790:	1c58      	adds	r0, r3, #1
 8013792:	81f8      	strh	r0, [r7, #14]
 8013794:	4413      	add	r3, r2
 8013796:	b2ca      	uxtb	r2, r1
 8013798:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	699b      	ldr	r3, [r3, #24]
 801379e:	0c19      	lsrs	r1, r3, #16
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681a      	ldr	r2, [r3, #0]
 80137a4:	89fb      	ldrh	r3, [r7, #14]
 80137a6:	1c58      	adds	r0, r3, #1
 80137a8:	81f8      	strh	r0, [r7, #14]
 80137aa:	4413      	add	r3, r2
 80137ac:	b2ca      	uxtb	r2, r1
 80137ae:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	699b      	ldr	r3, [r3, #24]
 80137b4:	0e19      	lsrs	r1, r3, #24
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681a      	ldr	r2, [r3, #0]
 80137ba:	89fb      	ldrh	r3, [r7, #14]
 80137bc:	1c58      	adds	r0, r3, #1
 80137be:	81f8      	strh	r0, [r7, #14]
 80137c0:	4413      	add	r3, r2
 80137c2:	b2ca      	uxtb	r2, r1
 80137c4:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80137c6:	89fb      	ldrh	r3, [r7, #14]
 80137c8:	b2da      	uxtb	r2, r3
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80137ce:	2300      	movs	r3, #0
}
 80137d0:	4618      	mov	r0, r3
 80137d2:	3710      	adds	r7, #16
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}

080137d8 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b084      	sub	sp, #16
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d003      	beq.n	80137ee <LoRaMacSerializerData+0x16>
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d101      	bne.n	80137f2 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80137ee:	2301      	movs	r3, #1
 80137f0:	e0e3      	b.n	80139ba <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 80137f2:	2300      	movs	r3, #0
 80137f4:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80137f6:	2308      	movs	r3, #8
 80137f8:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	7b1b      	ldrb	r3, [r3, #12]
 80137fe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013802:	b2db      	uxtb	r3, r3
 8013804:	461a      	mov	r2, r3
 8013806:	89bb      	ldrh	r3, [r7, #12]
 8013808:	4413      	add	r3, r2
 801380a:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013812:	2b00      	cmp	r3, #0
 8013814:	d002      	beq.n	801381c <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013816:	89bb      	ldrh	r3, [r7, #12]
 8013818:	3301      	adds	r3, #1
 801381a:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013822:	461a      	mov	r2, r3
 8013824:	89bb      	ldrh	r3, [r7, #12]
 8013826:	4413      	add	r3, r2
 8013828:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 801382a:	89bb      	ldrh	r3, [r7, #12]
 801382c:	3304      	adds	r3, #4
 801382e:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	791b      	ldrb	r3, [r3, #4]
 8013834:	461a      	mov	r2, r3
 8013836:	89bb      	ldrh	r3, [r7, #12]
 8013838:	4293      	cmp	r3, r2
 801383a:	d901      	bls.n	8013840 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801383c:	2302      	movs	r3, #2
 801383e:	e0bc      	b.n	80139ba <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	681a      	ldr	r2, [r3, #0]
 8013844:	89fb      	ldrh	r3, [r7, #14]
 8013846:	1c59      	adds	r1, r3, #1
 8013848:	81f9      	strh	r1, [r7, #14]
 801384a:	4413      	add	r3, r2
 801384c:	687a      	ldr	r2, [r7, #4]
 801384e:	7952      	ldrb	r2, [r2, #5]
 8013850:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	6899      	ldr	r1, [r3, #8]
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	681a      	ldr	r2, [r3, #0]
 801385a:	89fb      	ldrh	r3, [r7, #14]
 801385c:	1c58      	adds	r0, r3, #1
 801385e:	81f8      	strh	r0, [r7, #14]
 8013860:	4413      	add	r3, r2
 8013862:	b2ca      	uxtb	r2, r1
 8013864:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	689b      	ldr	r3, [r3, #8]
 801386a:	0a19      	lsrs	r1, r3, #8
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681a      	ldr	r2, [r3, #0]
 8013870:	89fb      	ldrh	r3, [r7, #14]
 8013872:	1c58      	adds	r0, r3, #1
 8013874:	81f8      	strh	r0, [r7, #14]
 8013876:	4413      	add	r3, r2
 8013878:	b2ca      	uxtb	r2, r1
 801387a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	689b      	ldr	r3, [r3, #8]
 8013880:	0c19      	lsrs	r1, r3, #16
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	681a      	ldr	r2, [r3, #0]
 8013886:	89fb      	ldrh	r3, [r7, #14]
 8013888:	1c58      	adds	r0, r3, #1
 801388a:	81f8      	strh	r0, [r7, #14]
 801388c:	4413      	add	r3, r2
 801388e:	b2ca      	uxtb	r2, r1
 8013890:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	689b      	ldr	r3, [r3, #8]
 8013896:	0e19      	lsrs	r1, r3, #24
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681a      	ldr	r2, [r3, #0]
 801389c:	89fb      	ldrh	r3, [r7, #14]
 801389e:	1c58      	adds	r0, r3, #1
 80138a0:	81f8      	strh	r0, [r7, #14]
 80138a2:	4413      	add	r3, r2
 80138a4:	b2ca      	uxtb	r2, r1
 80138a6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681a      	ldr	r2, [r3, #0]
 80138ac:	89fb      	ldrh	r3, [r7, #14]
 80138ae:	1c59      	adds	r1, r3, #1
 80138b0:	81f9      	strh	r1, [r7, #14]
 80138b2:	4413      	add	r3, r2
 80138b4:	687a      	ldr	r2, [r7, #4]
 80138b6:	7b12      	ldrb	r2, [r2, #12]
 80138b8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	89d9      	ldrh	r1, [r3, #14]
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	681a      	ldr	r2, [r3, #0]
 80138c2:	89fb      	ldrh	r3, [r7, #14]
 80138c4:	1c58      	adds	r0, r3, #1
 80138c6:	81f8      	strh	r0, [r7, #14]
 80138c8:	4413      	add	r3, r2
 80138ca:	b2ca      	uxtb	r2, r1
 80138cc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	89db      	ldrh	r3, [r3, #14]
 80138d2:	0a1b      	lsrs	r3, r3, #8
 80138d4:	b299      	uxth	r1, r3
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	681a      	ldr	r2, [r3, #0]
 80138da:	89fb      	ldrh	r3, [r7, #14]
 80138dc:	1c58      	adds	r0, r3, #1
 80138de:	81f8      	strh	r0, [r7, #14]
 80138e0:	4413      	add	r3, r2
 80138e2:	b2ca      	uxtb	r2, r1
 80138e4:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	681a      	ldr	r2, [r3, #0]
 80138ea:	89fb      	ldrh	r3, [r7, #14]
 80138ec:	18d0      	adds	r0, r2, r3
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	f103 0110 	add.w	r1, r3, #16
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	7b1b      	ldrb	r3, [r3, #12]
 80138f8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80138fc:	b2db      	uxtb	r3, r3
 80138fe:	461a      	mov	r2, r3
 8013900:	f003 ff47 	bl	8017792 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	7b1b      	ldrb	r3, [r3, #12]
 8013908:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801390c:	b2db      	uxtb	r3, r3
 801390e:	461a      	mov	r2, r3
 8013910:	89fb      	ldrh	r3, [r7, #14]
 8013912:	4413      	add	r3, r2
 8013914:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801391c:	2b00      	cmp	r3, #0
 801391e:	d009      	beq.n	8013934 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	681a      	ldr	r2, [r3, #0]
 8013924:	89fb      	ldrh	r3, [r7, #14]
 8013926:	1c59      	adds	r1, r3, #1
 8013928:	81f9      	strh	r1, [r7, #14]
 801392a:	4413      	add	r3, r2
 801392c:	687a      	ldr	r2, [r7, #4]
 801392e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8013932:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	681a      	ldr	r2, [r3, #0]
 8013938:	89fb      	ldrh	r3, [r7, #14]
 801393a:	18d0      	adds	r0, r2, r3
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013946:	461a      	mov	r2, r3
 8013948:	f003 ff23 	bl	8017792 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013952:	461a      	mov	r2, r3
 8013954:	89fb      	ldrh	r3, [r7, #14]
 8013956:	4413      	add	r3, r2
 8013958:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	681a      	ldr	r2, [r3, #0]
 8013962:	89fb      	ldrh	r3, [r7, #14]
 8013964:	1c58      	adds	r0, r3, #1
 8013966:	81f8      	strh	r0, [r7, #14]
 8013968:	4413      	add	r3, r2
 801396a:	b2ca      	uxtb	r2, r1
 801396c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013972:	0a19      	lsrs	r1, r3, #8
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	681a      	ldr	r2, [r3, #0]
 8013978:	89fb      	ldrh	r3, [r7, #14]
 801397a:	1c58      	adds	r0, r3, #1
 801397c:	81f8      	strh	r0, [r7, #14]
 801397e:	4413      	add	r3, r2
 8013980:	b2ca      	uxtb	r2, r1
 8013982:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013988:	0c19      	lsrs	r1, r3, #16
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681a      	ldr	r2, [r3, #0]
 801398e:	89fb      	ldrh	r3, [r7, #14]
 8013990:	1c58      	adds	r0, r3, #1
 8013992:	81f8      	strh	r0, [r7, #14]
 8013994:	4413      	add	r3, r2
 8013996:	b2ca      	uxtb	r2, r1
 8013998:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801399e:	0e19      	lsrs	r1, r3, #24
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681a      	ldr	r2, [r3, #0]
 80139a4:	89fb      	ldrh	r3, [r7, #14]
 80139a6:	1c58      	adds	r0, r3, #1
 80139a8:	81f8      	strh	r0, [r7, #14]
 80139aa:	4413      	add	r3, r2
 80139ac:	b2ca      	uxtb	r2, r1
 80139ae:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80139b0:	89fb      	ldrh	r3, [r7, #14]
 80139b2:	b2da      	uxtb	r2, r3
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80139b8:	2300      	movs	r3, #0
}
 80139ba:	4618      	mov	r0, r3
 80139bc:	3710      	adds	r7, #16
 80139be:	46bd      	mov	sp, r7
 80139c0:	bd80      	pop	{r7, pc}

080139c2 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80139c2:	b480      	push	{r7}
 80139c4:	b083      	sub	sp, #12
 80139c6:	af00      	add	r7, sp, #0
 80139c8:	4603      	mov	r3, r0
 80139ca:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80139cc:	79fb      	ldrb	r3, [r7, #7]
 80139ce:	2b05      	cmp	r3, #5
 80139d0:	d002      	beq.n	80139d8 <RegionIsActive+0x16>
 80139d2:	2b08      	cmp	r3, #8
 80139d4:	d002      	beq.n	80139dc <RegionIsActive+0x1a>
 80139d6:	e003      	b.n	80139e0 <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80139d8:	2301      	movs	r3, #1
 80139da:	e002      	b.n	80139e2 <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 80139dc:	2301      	movs	r3, #1
 80139de:	e000      	b.n	80139e2 <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80139e0:	2300      	movs	r3, #0
        }
    }
}
 80139e2:	4618      	mov	r0, r3
 80139e4:	370c      	adds	r7, #12
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bc80      	pop	{r7}
 80139ea:	4770      	bx	lr

080139ec <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b084      	sub	sp, #16
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	4603      	mov	r3, r0
 80139f4:	6039      	str	r1, [r7, #0]
 80139f6:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80139f8:	2300      	movs	r3, #0
 80139fa:	60bb      	str	r3, [r7, #8]
    switch( region )
 80139fc:	79fb      	ldrb	r3, [r7, #7]
 80139fe:	2b05      	cmp	r3, #5
 8013a00:	d002      	beq.n	8013a08 <RegionGetPhyParam+0x1c>
 8013a02:	2b08      	cmp	r3, #8
 8013a04:	d006      	beq.n	8013a14 <RegionGetPhyParam+0x28>
 8013a06:	e00b      	b.n	8013a20 <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8013a08:	6838      	ldr	r0, [r7, #0]
 8013a0a:	f001 fae7 	bl	8014fdc <RegionEU868GetPhyParam>
 8013a0e:	4603      	mov	r3, r0
 8013a10:	60fb      	str	r3, [r7, #12]
 8013a12:	e007      	b.n	8013a24 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8013a14:	6838      	ldr	r0, [r7, #0]
 8013a16:	f002 fcbb 	bl	8016390 <RegionUS915GetPhyParam>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	60fb      	str	r3, [r7, #12]
 8013a1e:	e001      	b.n	8013a24 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8013a20:	68bb      	ldr	r3, [r7, #8]
 8013a22:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	4618      	mov	r0, r3
 8013a28:	3710      	adds	r7, #16
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}

08013a2e <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8013a2e:	b580      	push	{r7, lr}
 8013a30:	b082      	sub	sp, #8
 8013a32:	af00      	add	r7, sp, #0
 8013a34:	4603      	mov	r3, r0
 8013a36:	6039      	str	r1, [r7, #0]
 8013a38:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013a3a:	79fb      	ldrb	r3, [r7, #7]
 8013a3c:	2b05      	cmp	r3, #5
 8013a3e:	d002      	beq.n	8013a46 <RegionSetBandTxDone+0x18>
 8013a40:	2b08      	cmp	r3, #8
 8013a42:	d004      	beq.n	8013a4e <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8013a44:	e006      	b.n	8013a54 <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 8013a46:	6838      	ldr	r0, [r7, #0]
 8013a48:	f001 fc14 	bl	8015274 <RegionEU868SetBandTxDone>
 8013a4c:	e002      	b.n	8013a54 <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 8013a4e:	6838      	ldr	r0, [r7, #0]
 8013a50:	f002 fe00 	bl	8016654 <RegionUS915SetBandTxDone>
        }
    }
}
 8013a54:	3708      	adds	r7, #8
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bd80      	pop	{r7, pc}

08013a5a <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8013a5a:	b580      	push	{r7, lr}
 8013a5c:	b082      	sub	sp, #8
 8013a5e:	af00      	add	r7, sp, #0
 8013a60:	4603      	mov	r3, r0
 8013a62:	6039      	str	r1, [r7, #0]
 8013a64:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013a66:	79fb      	ldrb	r3, [r7, #7]
 8013a68:	2b05      	cmp	r3, #5
 8013a6a:	d002      	beq.n	8013a72 <RegionInitDefaults+0x18>
 8013a6c:	2b08      	cmp	r3, #8
 8013a6e:	d004      	beq.n	8013a7a <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8013a70:	e006      	b.n	8013a80 <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 8013a72:	6838      	ldr	r0, [r7, #0]
 8013a74:	f001 fc2a 	bl	80152cc <RegionEU868InitDefaults>
 8013a78:	e002      	b.n	8013a80 <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 8013a7a:	6838      	ldr	r0, [r7, #0]
 8013a7c:	f002 fe16 	bl	80166ac <RegionUS915InitDefaults>
        }
    }
}
 8013a80:	bf00      	nop
 8013a82:	3708      	adds	r7, #8
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}

08013a88 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b082      	sub	sp, #8
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	4603      	mov	r3, r0
 8013a90:	6039      	str	r1, [r7, #0]
 8013a92:	71fb      	strb	r3, [r7, #7]
 8013a94:	4613      	mov	r3, r2
 8013a96:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8013a98:	79fb      	ldrb	r3, [r7, #7]
 8013a9a:	2b05      	cmp	r3, #5
 8013a9c:	d002      	beq.n	8013aa4 <RegionVerify+0x1c>
 8013a9e:	2b08      	cmp	r3, #8
 8013aa0:	d007      	beq.n	8013ab2 <RegionVerify+0x2a>
 8013aa2:	e00d      	b.n	8013ac0 <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8013aa4:	79bb      	ldrb	r3, [r7, #6]
 8013aa6:	4619      	mov	r1, r3
 8013aa8:	6838      	ldr	r0, [r7, #0]
 8013aaa:	f001 fcad 	bl	8015408 <RegionEU868Verify>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	e007      	b.n	8013ac2 <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8013ab2:	79bb      	ldrb	r3, [r7, #6]
 8013ab4:	4619      	mov	r1, r3
 8013ab6:	6838      	ldr	r0, [r7, #0]
 8013ab8:	f002 ff2a 	bl	8016910 <RegionUS915Verify>
 8013abc:	4603      	mov	r3, r0
 8013abe:	e000      	b.n	8013ac2 <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 8013ac0:	2300      	movs	r3, #0
        }
    }
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	3708      	adds	r7, #8
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}

08013aca <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8013aca:	b580      	push	{r7, lr}
 8013acc:	b082      	sub	sp, #8
 8013ace:	af00      	add	r7, sp, #0
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	6039      	str	r1, [r7, #0]
 8013ad4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013ad6:	79fb      	ldrb	r3, [r7, #7]
 8013ad8:	2b05      	cmp	r3, #5
 8013ada:	d002      	beq.n	8013ae2 <RegionApplyCFList+0x18>
 8013adc:	2b08      	cmp	r3, #8
 8013ade:	d004      	beq.n	8013aea <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8013ae0:	e006      	b.n	8013af0 <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 8013ae2:	6838      	ldr	r0, [r7, #0]
 8013ae4:	f001 fd0c 	bl	8015500 <RegionEU868ApplyCFList>
 8013ae8:	e002      	b.n	8013af0 <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 8013aea:	6838      	ldr	r0, [r7, #0]
 8013aec:	f002 ff78 	bl	80169e0 <RegionUS915ApplyCFList>
        }
    }
}
 8013af0:	bf00      	nop
 8013af2:	3708      	adds	r7, #8
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}

08013af8 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b082      	sub	sp, #8
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	4603      	mov	r3, r0
 8013b00:	6039      	str	r1, [r7, #0]
 8013b02:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013b04:	79fb      	ldrb	r3, [r7, #7]
 8013b06:	2b05      	cmp	r3, #5
 8013b08:	d002      	beq.n	8013b10 <RegionChanMaskSet+0x18>
 8013b0a:	2b08      	cmp	r3, #8
 8013b0c:	d005      	beq.n	8013b1a <RegionChanMaskSet+0x22>
 8013b0e:	e009      	b.n	8013b24 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8013b10:	6838      	ldr	r0, [r7, #0]
 8013b12:	f001 fd69 	bl	80155e8 <RegionEU868ChanMaskSet>
 8013b16:	4603      	mov	r3, r0
 8013b18:	e005      	b.n	8013b26 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8013b1a:	6838      	ldr	r0, [r7, #0]
 8013b1c:	f002 ffd4 	bl	8016ac8 <RegionUS915ChanMaskSet>
 8013b20:	4603      	mov	r3, r0
 8013b22:	e000      	b.n	8013b26 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8013b24:	2300      	movs	r3, #0
        }
    }
}
 8013b26:	4618      	mov	r0, r3
 8013b28:	3708      	adds	r7, #8
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}

08013b2e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013b2e:	b580      	push	{r7, lr}
 8013b30:	b082      	sub	sp, #8
 8013b32:	af00      	add	r7, sp, #0
 8013b34:	603b      	str	r3, [r7, #0]
 8013b36:	4603      	mov	r3, r0
 8013b38:	71fb      	strb	r3, [r7, #7]
 8013b3a:	460b      	mov	r3, r1
 8013b3c:	71bb      	strb	r3, [r7, #6]
 8013b3e:	4613      	mov	r3, r2
 8013b40:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013b42:	79fb      	ldrb	r3, [r7, #7]
 8013b44:	2b05      	cmp	r3, #5
 8013b46:	d002      	beq.n	8013b4e <RegionComputeRxWindowParameters+0x20>
 8013b48:	2b08      	cmp	r3, #8
 8013b4a:	d008      	beq.n	8013b5e <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8013b4c:	e00e      	b.n	8013b6c <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8013b4e:	7979      	ldrb	r1, [r7, #5]
 8013b50:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8013b54:	693b      	ldr	r3, [r7, #16]
 8013b56:	683a      	ldr	r2, [r7, #0]
 8013b58:	f001 fd70 	bl	801563c <RegionEU868ComputeRxWindowParameters>
 8013b5c:	e006      	b.n	8013b6c <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8013b5e:	7979      	ldrb	r1, [r7, #5]
 8013b60:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8013b64:	693b      	ldr	r3, [r7, #16]
 8013b66:	683a      	ldr	r2, [r7, #0]
 8013b68:	f003 f818 	bl	8016b9c <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 8013b6c:	bf00      	nop
 8013b6e:	3708      	adds	r7, #8
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}

08013b74 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b084      	sub	sp, #16
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	60b9      	str	r1, [r7, #8]
 8013b7e:	607a      	str	r2, [r7, #4]
 8013b80:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013b82:	7bfb      	ldrb	r3, [r7, #15]
 8013b84:	2b05      	cmp	r3, #5
 8013b86:	d002      	beq.n	8013b8e <RegionRxConfig+0x1a>
 8013b88:	2b08      	cmp	r3, #8
 8013b8a:	d006      	beq.n	8013b9a <RegionRxConfig+0x26>
 8013b8c:	e00b      	b.n	8013ba6 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8013b8e:	6879      	ldr	r1, [r7, #4]
 8013b90:	68b8      	ldr	r0, [r7, #8]
 8013b92:	f001 fdad 	bl	80156f0 <RegionEU868RxConfig>
 8013b96:	4603      	mov	r3, r0
 8013b98:	e006      	b.n	8013ba8 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8013b9a:	6879      	ldr	r1, [r7, #4]
 8013b9c:	68b8      	ldr	r0, [r7, #8]
 8013b9e:	f003 f847 	bl	8016c30 <RegionUS915RxConfig>
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	e000      	b.n	8013ba8 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8013ba6:	2300      	movs	r3, #0
        }
    }
}
 8013ba8:	4618      	mov	r0, r3
 8013baa:	3710      	adds	r7, #16
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bd80      	pop	{r7, pc}

08013bb0 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b084      	sub	sp, #16
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	60b9      	str	r1, [r7, #8]
 8013bb8:	607a      	str	r2, [r7, #4]
 8013bba:	603b      	str	r3, [r7, #0]
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013bc0:	7bfb      	ldrb	r3, [r7, #15]
 8013bc2:	2b05      	cmp	r3, #5
 8013bc4:	d002      	beq.n	8013bcc <RegionTxConfig+0x1c>
 8013bc6:	2b08      	cmp	r3, #8
 8013bc8:	d007      	beq.n	8013bda <RegionTxConfig+0x2a>
 8013bca:	e00d      	b.n	8013be8 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8013bcc:	683a      	ldr	r2, [r7, #0]
 8013bce:	6879      	ldr	r1, [r7, #4]
 8013bd0:	68b8      	ldr	r0, [r7, #8]
 8013bd2:	f001 fe5d 	bl	8015890 <RegionEU868TxConfig>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	e007      	b.n	8013bea <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8013bda:	683a      	ldr	r2, [r7, #0]
 8013bdc:	6879      	ldr	r1, [r7, #4]
 8013bde:	68b8      	ldr	r0, [r7, #8]
 8013be0:	f003 f8aa 	bl	8016d38 <RegionUS915TxConfig>
 8013be4:	4603      	mov	r3, r0
 8013be6:	e000      	b.n	8013bea <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8013be8:	2300      	movs	r3, #0
        }
    }
}
 8013bea:	4618      	mov	r0, r3
 8013bec:	3710      	adds	r7, #16
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}

08013bf2 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013bf2:	b580      	push	{r7, lr}
 8013bf4:	b086      	sub	sp, #24
 8013bf6:	af02      	add	r7, sp, #8
 8013bf8:	60b9      	str	r1, [r7, #8]
 8013bfa:	607a      	str	r2, [r7, #4]
 8013bfc:	603b      	str	r3, [r7, #0]
 8013bfe:	4603      	mov	r3, r0
 8013c00:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013c02:	7bfb      	ldrb	r3, [r7, #15]
 8013c04:	2b05      	cmp	r3, #5
 8013c06:	d002      	beq.n	8013c0e <RegionLinkAdrReq+0x1c>
 8013c08:	2b08      	cmp	r3, #8
 8013c0a:	d00a      	beq.n	8013c22 <RegionLinkAdrReq+0x30>
 8013c0c:	e013      	b.n	8013c36 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8013c0e:	69fb      	ldr	r3, [r7, #28]
 8013c10:	9300      	str	r3, [sp, #0]
 8013c12:	69bb      	ldr	r3, [r7, #24]
 8013c14:	683a      	ldr	r2, [r7, #0]
 8013c16:	6879      	ldr	r1, [r7, #4]
 8013c18:	68b8      	ldr	r0, [r7, #8]
 8013c1a:	f001 ff09 	bl	8015a30 <RegionEU868LinkAdrReq>
 8013c1e:	4603      	mov	r3, r0
 8013c20:	e00a      	b.n	8013c38 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8013c22:	69fb      	ldr	r3, [r7, #28]
 8013c24:	9300      	str	r3, [sp, #0]
 8013c26:	69bb      	ldr	r3, [r7, #24]
 8013c28:	683a      	ldr	r2, [r7, #0]
 8013c2a:	6879      	ldr	r1, [r7, #4]
 8013c2c:	68b8      	ldr	r0, [r7, #8]
 8013c2e:	f003 f92f 	bl	8016e90 <RegionUS915LinkAdrReq>
 8013c32:	4603      	mov	r3, r0
 8013c34:	e000      	b.n	8013c38 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8013c36:	2300      	movs	r3, #0
        }
    }
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3710      	adds	r7, #16
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}

08013c40 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b082      	sub	sp, #8
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	4603      	mov	r3, r0
 8013c48:	6039      	str	r1, [r7, #0]
 8013c4a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013c4c:	79fb      	ldrb	r3, [r7, #7]
 8013c4e:	2b05      	cmp	r3, #5
 8013c50:	d002      	beq.n	8013c58 <RegionRxParamSetupReq+0x18>
 8013c52:	2b08      	cmp	r3, #8
 8013c54:	d005      	beq.n	8013c62 <RegionRxParamSetupReq+0x22>
 8013c56:	e009      	b.n	8013c6c <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8013c58:	6838      	ldr	r0, [r7, #0]
 8013c5a:	f002 f80b 	bl	8015c74 <RegionEU868RxParamSetupReq>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	e005      	b.n	8013c6e <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8013c62:	6838      	ldr	r0, [r7, #0]
 8013c64:	f003 fb38 	bl	80172d8 <RegionUS915RxParamSetupReq>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	e000      	b.n	8013c6e <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013c6c:	2300      	movs	r3, #0
        }
    }
}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	3708      	adds	r7, #8
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}

08013c76 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8013c76:	b580      	push	{r7, lr}
 8013c78:	b082      	sub	sp, #8
 8013c7a:	af00      	add	r7, sp, #0
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	6039      	str	r1, [r7, #0]
 8013c80:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013c82:	79fb      	ldrb	r3, [r7, #7]
 8013c84:	2b05      	cmp	r3, #5
 8013c86:	d002      	beq.n	8013c8e <RegionNewChannelReq+0x18>
 8013c88:	2b08      	cmp	r3, #8
 8013c8a:	d005      	beq.n	8013c98 <RegionNewChannelReq+0x22>
 8013c8c:	e009      	b.n	8013ca2 <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8013c8e:	6838      	ldr	r0, [r7, #0]
 8013c90:	f002 f82e 	bl	8015cf0 <RegionEU868NewChannelReq>
 8013c94:	4603      	mov	r3, r0
 8013c96:	e005      	b.n	8013ca4 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8013c98:	6838      	ldr	r0, [r7, #0]
 8013c9a:	f003 fb69 	bl	8017370 <RegionUS915NewChannelReq>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	e000      	b.n	8013ca4 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013ca2:	2300      	movs	r3, #0
        }
    }
}
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	3708      	adds	r7, #8
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}

08013cac <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b082      	sub	sp, #8
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	6039      	str	r1, [r7, #0]
 8013cb6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013cb8:	79fb      	ldrb	r3, [r7, #7]
 8013cba:	2b05      	cmp	r3, #5
 8013cbc:	d002      	beq.n	8013cc4 <RegionTxParamSetupReq+0x18>
 8013cbe:	2b08      	cmp	r3, #8
 8013cc0:	d005      	beq.n	8013cce <RegionTxParamSetupReq+0x22>
 8013cc2:	e009      	b.n	8013cd8 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8013cc4:	6838      	ldr	r0, [r7, #0]
 8013cc6:	f002 f871 	bl	8015dac <RegionEU868TxParamSetupReq>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	e005      	b.n	8013cda <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8013cce:	6838      	ldr	r0, [r7, #0]
 8013cd0:	f003 fb59 	bl	8017386 <RegionUS915TxParamSetupReq>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	e000      	b.n	8013cda <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013cd8:	2300      	movs	r3, #0
        }
    }
}
 8013cda:	4618      	mov	r0, r3
 8013cdc:	3708      	adds	r7, #8
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	bd80      	pop	{r7, pc}

08013ce2 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8013ce2:	b580      	push	{r7, lr}
 8013ce4:	b082      	sub	sp, #8
 8013ce6:	af00      	add	r7, sp, #0
 8013ce8:	4603      	mov	r3, r0
 8013cea:	6039      	str	r1, [r7, #0]
 8013cec:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013cee:	79fb      	ldrb	r3, [r7, #7]
 8013cf0:	2b05      	cmp	r3, #5
 8013cf2:	d002      	beq.n	8013cfa <RegionDlChannelReq+0x18>
 8013cf4:	2b08      	cmp	r3, #8
 8013cf6:	d005      	beq.n	8013d04 <RegionDlChannelReq+0x22>
 8013cf8:	e009      	b.n	8013d0e <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8013cfa:	6838      	ldr	r0, [r7, #0]
 8013cfc:	f002 f862 	bl	8015dc4 <RegionEU868DlChannelReq>
 8013d00:	4603      	mov	r3, r0
 8013d02:	e005      	b.n	8013d10 <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8013d04:	6838      	ldr	r0, [r7, #0]
 8013d06:	f003 fb49 	bl	801739c <RegionUS915DlChannelReq>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	e000      	b.n	8013d10 <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013d0e:	2300      	movs	r3, #0
        }
    }
}
 8013d10:	4618      	mov	r0, r3
 8013d12:	3708      	adds	r7, #8
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bd80      	pop	{r7, pc}

08013d18 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b082      	sub	sp, #8
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	4603      	mov	r3, r0
 8013d20:	71fb      	strb	r3, [r7, #7]
 8013d22:	460b      	mov	r3, r1
 8013d24:	71bb      	strb	r3, [r7, #6]
 8013d26:	4613      	mov	r3, r2
 8013d28:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013d2a:	79fb      	ldrb	r3, [r7, #7]
 8013d2c:	2b05      	cmp	r3, #5
 8013d2e:	d002      	beq.n	8013d36 <RegionAlternateDr+0x1e>
 8013d30:	2b08      	cmp	r3, #8
 8013d32:	d009      	beq.n	8013d48 <RegionAlternateDr+0x30>
 8013d34:	e011      	b.n	8013d5a <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8013d36:	797a      	ldrb	r2, [r7, #5]
 8013d38:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013d3c:	4611      	mov	r1, r2
 8013d3e:	4618      	mov	r0, r3
 8013d40:	f002 f88a 	bl	8015e58 <RegionEU868AlternateDr>
 8013d44:	4603      	mov	r3, r0
 8013d46:	e009      	b.n	8013d5c <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8013d48:	797a      	ldrb	r2, [r7, #5]
 8013d4a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013d4e:	4611      	mov	r1, r2
 8013d50:	4618      	mov	r0, r3
 8013d52:	f003 fb2f 	bl	80173b4 <RegionUS915AlternateDr>
 8013d56:	4603      	mov	r3, r0
 8013d58:	e000      	b.n	8013d5c <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8013d5a:	2300      	movs	r3, #0
        }
    }
}
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	3708      	adds	r7, #8
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bd80      	pop	{r7, pc}

08013d64 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b084      	sub	sp, #16
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	60b9      	str	r1, [r7, #8]
 8013d6c:	607a      	str	r2, [r7, #4]
 8013d6e:	603b      	str	r3, [r7, #0]
 8013d70:	4603      	mov	r3, r0
 8013d72:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013d74:	7bfb      	ldrb	r3, [r7, #15]
 8013d76:	2b05      	cmp	r3, #5
 8013d78:	d002      	beq.n	8013d80 <RegionNextChannel+0x1c>
 8013d7a:	2b08      	cmp	r3, #8
 8013d7c:	d008      	beq.n	8013d90 <RegionNextChannel+0x2c>
 8013d7e:	e00f      	b.n	8013da0 <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8013d80:	69bb      	ldr	r3, [r7, #24]
 8013d82:	683a      	ldr	r2, [r7, #0]
 8013d84:	6879      	ldr	r1, [r7, #4]
 8013d86:	68b8      	ldr	r0, [r7, #8]
 8013d88:	f002 f876 	bl	8015e78 <RegionEU868NextChannel>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	e008      	b.n	8013da2 <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8013d90:	69bb      	ldr	r3, [r7, #24]
 8013d92:	683a      	ldr	r2, [r7, #0]
 8013d94:	6879      	ldr	r1, [r7, #4]
 8013d96:	68b8      	ldr	r0, [r7, #8]
 8013d98:	f003 fb48 	bl	801742c <RegionUS915NextChannel>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	e000      	b.n	8013da2 <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013da0:	2309      	movs	r3, #9
        }
    }
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	3710      	adds	r7, #16
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}

08013daa <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8013daa:	b580      	push	{r7, lr}
 8013dac:	b082      	sub	sp, #8
 8013dae:	af00      	add	r7, sp, #0
 8013db0:	4603      	mov	r3, r0
 8013db2:	6039      	str	r1, [r7, #0]
 8013db4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013db6:	79fb      	ldrb	r3, [r7, #7]
 8013db8:	2b05      	cmp	r3, #5
 8013dba:	d002      	beq.n	8013dc2 <RegionSetContinuousWave+0x18>
 8013dbc:	2b08      	cmp	r3, #8
 8013dbe:	d004      	beq.n	8013dca <RegionSetContinuousWave+0x20>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8013dc0:	e006      	b.n	8013dd0 <RegionSetContinuousWave+0x26>
        EU868_SET_CONTINUOUS_WAVE( );
 8013dc2:	6838      	ldr	r0, [r7, #0]
 8013dc4:	f002 f9d2 	bl	801616c <RegionEU868SetContinuousWave>
 8013dc8:	e002      	b.n	8013dd0 <RegionSetContinuousWave+0x26>
        US915_SET_CONTINUOUS_WAVE( );
 8013dca:	6838      	ldr	r0, [r7, #0]
 8013dcc:	f003 fc22 	bl	8017614 <RegionUS915SetContinuousWave>
        }
    }
}
 8013dd0:	bf00      	nop
 8013dd2:	3708      	adds	r7, #8
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}

08013dd8 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8013dd8:	b590      	push	{r4, r7, lr}
 8013dda:	b083      	sub	sp, #12
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	4604      	mov	r4, r0
 8013de0:	4608      	mov	r0, r1
 8013de2:	4611      	mov	r1, r2
 8013de4:	461a      	mov	r2, r3
 8013de6:	4623      	mov	r3, r4
 8013de8:	71fb      	strb	r3, [r7, #7]
 8013dea:	4603      	mov	r3, r0
 8013dec:	71bb      	strb	r3, [r7, #6]
 8013dee:	460b      	mov	r3, r1
 8013df0:	717b      	strb	r3, [r7, #5]
 8013df2:	4613      	mov	r3, r2
 8013df4:	713b      	strb	r3, [r7, #4]
    switch( region )
 8013df6:	79fb      	ldrb	r3, [r7, #7]
 8013df8:	2b05      	cmp	r3, #5
 8013dfa:	d002      	beq.n	8013e02 <RegionApplyDrOffset+0x2a>
 8013dfc:	2b08      	cmp	r3, #8
 8013dfe:	d00a      	beq.n	8013e16 <RegionApplyDrOffset+0x3e>
 8013e00:	e013      	b.n	8013e2a <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8013e02:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8013e06:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013e0a:	79bb      	ldrb	r3, [r7, #6]
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f002 f9fb 	bl	8016208 <RegionEU868ApplyDrOffset>
 8013e12:	4603      	mov	r3, r0
 8013e14:	e00a      	b.n	8013e2c <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8013e16:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8013e1a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013e1e:	79bb      	ldrb	r3, [r7, #6]
 8013e20:	4618      	mov	r0, r3
 8013e22:	f003 fc4d 	bl	80176c0 <RegionUS915ApplyDrOffset>
 8013e26:	4603      	mov	r3, r0
 8013e28:	e000      	b.n	8013e2c <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8013e2a:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	370c      	adds	r7, #12
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd90      	pop	{r4, r7, pc}

08013e34 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8013e34:	b480      	push	{r7}
 8013e36:	b083      	sub	sp, #12
 8013e38:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8013e3a:	4b04      	ldr	r3, [pc, #16]	@ (8013e4c <RegionGetVersion+0x18>)
 8013e3c:	607b      	str	r3, [r7, #4]

    return version;
 8013e3e:	687b      	ldr	r3, [r7, #4]
}
 8013e40:	4618      	mov	r0, r3
 8013e42:	370c      	adds	r7, #12
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bc80      	pop	{r7}
 8013e48:	4770      	bx	lr
 8013e4a:	bf00      	nop
 8013e4c:	01010003 	.word	0x01010003

08013e50 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8013e50:	b480      	push	{r7}
 8013e52:	b087      	sub	sp, #28
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	4603      	mov	r3, r0
 8013e58:	60b9      	str	r1, [r7, #8]
 8013e5a:	607a      	str	r2, [r7, #4]
 8013e5c:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8013e5e:	68bb      	ldr	r3, [r7, #8]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d002      	beq.n	8013e6a <FindAvailable125kHzChannels+0x1a>
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d101      	bne.n	8013e6e <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013e6a:	2303      	movs	r3, #3
 8013e6c:	e021      	b.n	8013eb2 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2200      	movs	r2, #0
 8013e72:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8013e74:	2300      	movs	r3, #0
 8013e76:	75fb      	strb	r3, [r7, #23]
 8013e78:	e017      	b.n	8013eaa <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8013e7a:	89fa      	ldrh	r2, [r7, #14]
 8013e7c:	7dfb      	ldrb	r3, [r7, #23]
 8013e7e:	fa42 f303 	asr.w	r3, r2, r3
 8013e82:	f003 0301 	and.w	r3, r3, #1
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d00c      	beq.n	8013ea4 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	781b      	ldrb	r3, [r3, #0]
 8013e8e:	461a      	mov	r2, r3
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	4413      	add	r3, r2
 8013e94:	7dfa      	ldrb	r2, [r7, #23]
 8013e96:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	781b      	ldrb	r3, [r3, #0]
 8013e9c:	3301      	adds	r3, #1
 8013e9e:	b2da      	uxtb	r2, r3
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8013ea4:	7dfb      	ldrb	r3, [r7, #23]
 8013ea6:	3301      	adds	r3, #1
 8013ea8:	75fb      	strb	r3, [r7, #23]
 8013eaa:	7dfb      	ldrb	r3, [r7, #23]
 8013eac:	2b07      	cmp	r3, #7
 8013eae:	d9e4      	bls.n	8013e7a <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8013eb0:	2300      	movs	r3, #0
}
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	371c      	adds	r7, #28
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bc80      	pop	{r7}
 8013eba:	4770      	bx	lr

08013ebc <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8013ebc:	b590      	push	{r4, r7, lr}
 8013ebe:	b089      	sub	sp, #36	@ 0x24
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	60f8      	str	r0, [r7, #12]
 8013ec4:	60b9      	str	r1, [r7, #8]
 8013ec6:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8013ec8:	2300      	movs	r3, #0
 8013eca:	617b      	str	r3, [r7, #20]
 8013ecc:	2300      	movs	r3, #0
 8013ece:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d005      	beq.n	8013ee6 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8013eda:	68bb      	ldr	r3, [r7, #8]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d002      	beq.n	8013ee6 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d101      	bne.n	8013eea <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013ee6:	2303      	movs	r3, #3
 8013ee8:	e055      	b.n	8013f96 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	781b      	ldrb	r3, [r3, #0]
 8013eee:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8013ef0:	7f7b      	ldrb	r3, [r7, #29]
 8013ef2:	085b      	lsrs	r3, r3, #1
 8013ef4:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8013ef6:	7f7b      	ldrb	r3, [r7, #29]
 8013ef8:	f003 0301 	and.w	r3, r3, #1
 8013efc:	b2db      	uxtb	r3, r3
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d107      	bne.n	8013f12 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8013f02:	7f3b      	ldrb	r3, [r7, #28]
 8013f04:	005b      	lsls	r3, r3, #1
 8013f06:	68fa      	ldr	r2, [r7, #12]
 8013f08:	4413      	add	r3, r2
 8013f0a:	881b      	ldrh	r3, [r3, #0]
 8013f0c:	b2db      	uxtb	r3, r3
 8013f0e:	83fb      	strh	r3, [r7, #30]
 8013f10:	e006      	b.n	8013f20 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8013f12:	7f3b      	ldrb	r3, [r7, #28]
 8013f14:	005b      	lsls	r3, r3, #1
 8013f16:	68fa      	ldr	r2, [r7, #12]
 8013f18:	4413      	add	r3, r2
 8013f1a:	881b      	ldrh	r3, [r3, #0]
 8013f1c:	0a1b      	lsrs	r3, r3, #8
 8013f1e:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8013f20:	f107 0213 	add.w	r2, r7, #19
 8013f24:	f107 0114 	add.w	r1, r7, #20
 8013f28:	8bfb      	ldrh	r3, [r7, #30]
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f7ff ff90 	bl	8013e50 <FindAvailable125kHzChannels>
 8013f30:	4603      	mov	r3, r0
 8013f32:	2b03      	cmp	r3, #3
 8013f34:	d101      	bne.n	8013f3a <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013f36:	2303      	movs	r3, #3
 8013f38:	e02d      	b.n	8013f96 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 8013f3a:	7cfb      	ldrb	r3, [r7, #19]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d011      	beq.n	8013f64 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8013f40:	7f7b      	ldrb	r3, [r7, #29]
 8013f42:	00db      	lsls	r3, r3, #3
 8013f44:	b2dc      	uxtb	r4, r3
 8013f46:	7cfb      	ldrb	r3, [r7, #19]
 8013f48:	3b01      	subs	r3, #1
 8013f4a:	4619      	mov	r1, r3
 8013f4c:	2000      	movs	r0, #0
 8013f4e:	f003 fc09 	bl	8017764 <randr>
 8013f52:	4603      	mov	r3, r0
 8013f54:	3320      	adds	r3, #32
 8013f56:	443b      	add	r3, r7
 8013f58:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8013f5c:	4423      	add	r3, r4
 8013f5e:	b2da      	uxtb	r2, r3
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8013f64:	7f7b      	ldrb	r3, [r7, #29]
 8013f66:	3301      	adds	r3, #1
 8013f68:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8013f6a:	7f7b      	ldrb	r3, [r7, #29]
 8013f6c:	2b07      	cmp	r3, #7
 8013f6e:	d901      	bls.n	8013f74 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8013f70:	2300      	movs	r3, #0
 8013f72:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8013f74:	7cfb      	ldrb	r3, [r7, #19]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d104      	bne.n	8013f84 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	781b      	ldrb	r3, [r3, #0]
 8013f7e:	7f7a      	ldrb	r2, [r7, #29]
 8013f80:	429a      	cmp	r2, r3
 8013f82:	d1b5      	bne.n	8013ef0 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8013f84:	7cfb      	ldrb	r3, [r7, #19]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d004      	beq.n	8013f94 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 8013f8a:	68bb      	ldr	r3, [r7, #8]
 8013f8c:	7f7a      	ldrb	r2, [r7, #29]
 8013f8e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8013f90:	2300      	movs	r3, #0
 8013f92:	e000      	b.n	8013f96 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8013f94:	2303      	movs	r3, #3
}
 8013f96:	4618      	mov	r0, r3
 8013f98:	3724      	adds	r7, #36	@ 0x24
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bd90      	pop	{r4, r7, pc}

08013f9e <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8013f9e:	b480      	push	{r7}
 8013fa0:	b085      	sub	sp, #20
 8013fa2:	af00      	add	r7, sp, #0
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	60b9      	str	r1, [r7, #8]
 8013fa8:	607a      	str	r2, [r7, #4]
 8013faa:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8013fac:	7bfb      	ldrb	r3, [r7, #15]
 8013fae:	687a      	ldr	r2, [r7, #4]
 8013fb0:	fb03 f202 	mul.w	r2, r3, r2
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	4413      	add	r3, r2
}
 8013fb8:	4618      	mov	r0, r3
 8013fba:	3714      	adds	r7, #20
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	bc80      	pop	{r7}
 8013fc0:	4770      	bx	lr

08013fc2 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8013fc2:	b480      	push	{r7}
 8013fc4:	b087      	sub	sp, #28
 8013fc6:	af00      	add	r7, sp, #0
 8013fc8:	60f8      	str	r0, [r7, #12]
 8013fca:	4608      	mov	r0, r1
 8013fcc:	4639      	mov	r1, r7
 8013fce:	e881 000c 	stmia.w	r1, {r2, r3}
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	881b      	ldrh	r3, [r3, #0]
 8013fda:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8013fdc:	7afb      	ldrb	r3, [r7, #11]
 8013fde:	f083 0301 	eor.w	r3, r3, #1
 8013fe2:	b2db      	uxtb	r3, r3
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d01b      	beq.n	8014020 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8013fe8:	f242 7310 	movw	r3, #10000	@ 0x2710
 8013fec:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8013fee:	683b      	ldr	r3, [r7, #0]
 8013ff0:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8013ff4:	d202      	bcs.n	8013ffc <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8013ff6:	2364      	movs	r3, #100	@ 0x64
 8013ff8:	82bb      	strh	r3, [r7, #20]
 8013ffa:	e00b      	b.n	8014014 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8013ffc:	683b      	ldr	r3, [r7, #0]
 8013ffe:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8014002:	4293      	cmp	r3, r2
 8014004:	d803      	bhi.n	801400e <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8014006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801400a:	82bb      	strh	r3, [r7, #20]
 801400c:	e002      	b.n	8014014 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 801400e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8014012:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8014014:	8aba      	ldrh	r2, [r7, #20]
 8014016:	8afb      	ldrh	r3, [r7, #22]
 8014018:	4293      	cmp	r3, r2
 801401a:	bf38      	it	cc
 801401c:	4613      	movcc	r3, r2
 801401e:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8014020:	8afb      	ldrh	r3, [r7, #22]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d101      	bne.n	801402a <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8014026:	2301      	movs	r3, #1
 8014028:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 801402a:	8afb      	ldrh	r3, [r7, #22]
}
 801402c:	4618      	mov	r0, r3
 801402e:	371c      	adds	r7, #28
 8014030:	46bd      	mov	sp, r7
 8014032:	bc80      	pop	{r7}
 8014034:	4770      	bx	lr
	...

08014038 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b08e      	sub	sp, #56	@ 0x38
 801403c:	af02      	add	r7, sp, #8
 801403e:	60f8      	str	r0, [r7, #12]
 8014040:	4608      	mov	r0, r1
 8014042:	4639      	mov	r1, r7
 8014044:	e881 000c 	stmia.w	r1, {r2, r3}
 8014048:	4603      	mov	r3, r0
 801404a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	881b      	ldrh	r3, [r3, #0]
 8014050:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8014052:	4b4b      	ldr	r3, [pc, #300]	@ (8014180 <SetMaxTimeCredits+0x148>)
 8014054:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8014056:	463b      	mov	r3, r7
 8014058:	e893 0003 	ldmia.w	r3, {r0, r1}
 801405c:	f006 ffec 	bl	801b038 <SysTimeToMs>
 8014060:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 8014062:	f107 0314 	add.w	r3, r7, #20
 8014066:	2200      	movs	r2, #0
 8014068:	601a      	str	r2, [r3, #0]
 801406a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801406c:	7af9      	ldrb	r1, [r7, #11]
 801406e:	463b      	mov	r3, r7
 8014070:	cb0c      	ldmia	r3, {r2, r3}
 8014072:	68f8      	ldr	r0, [r7, #12]
 8014074:	f7ff ffa5 	bl	8013fc2 <GetDutyCycle>
 8014078:	4603      	mov	r3, r0
 801407a:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 801407c:	7afb      	ldrb	r3, [r7, #11]
 801407e:	f083 0301 	eor.w	r3, r3, #1
 8014082:	b2db      	uxtb	r3, r3
 8014084:	2b00      	cmp	r3, #0
 8014086:	d062      	beq.n	801414e <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014088:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801408a:	2b64      	cmp	r3, #100	@ 0x64
 801408c:	d105      	bne.n	801409a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801408e:	4b3c      	ldr	r3, [pc, #240]	@ (8014180 <SetMaxTimeCredits+0x148>)
 8014090:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014096:	609a      	str	r2, [r3, #8]
 8014098:	e00b      	b.n	80140b2 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801409a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801409c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80140a0:	d105      	bne.n	80140ae <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80140a2:	4b38      	ldr	r3, [pc, #224]	@ (8014184 <SetMaxTimeCredits+0x14c>)
 80140a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80140aa:	609a      	str	r2, [r3, #8]
 80140ac:	e001      	b.n	80140b2 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80140ae:	4b36      	ldr	r3, [pc, #216]	@ (8014188 <SetMaxTimeCredits+0x150>)
 80140b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	689a      	ldr	r2, [r3, #8]
 80140b6:	f107 031c 	add.w	r3, r7, #28
 80140ba:	4611      	mov	r1, r2
 80140bc:	4618      	mov	r0, r3
 80140be:	f006 ffe3 	bl	801b088 <SysTimeFromMs>
 80140c2:	f107 0014 	add.w	r0, r7, #20
 80140c6:	6a3b      	ldr	r3, [r7, #32]
 80140c8:	9300      	str	r3, [sp, #0]
 80140ca:	69fb      	ldr	r3, [r7, #28]
 80140cc:	463a      	mov	r2, r7
 80140ce:	ca06      	ldmia	r2, {r1, r2}
 80140d0:	f006 fef3 	bl	801aeba <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80140d4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80140d8:	f083 0301 	eor.w	r3, r3, #1
 80140dc:	b2db      	uxtb	r3, r3
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d006      	beq.n	80140f0 <SetMaxTimeCredits+0xb8>
 80140e2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80140e6:	f083 0301 	eor.w	r3, r3, #1
 80140ea:	b2db      	uxtb	r3, r3
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d108      	bne.n	8014102 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80140f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d103      	bne.n	8014102 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80140fa:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80140fc:	4a23      	ldr	r2, [pc, #140]	@ (801418c <SetMaxTimeCredits+0x154>)
 80140fe:	4293      	cmp	r3, r2
 8014100:	d92f      	bls.n	8014162 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014106:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	4a21      	ldr	r2, [pc, #132]	@ (8014190 <SetMaxTimeCredits+0x158>)
 801410c:	4293      	cmp	r3, r2
 801410e:	d928      	bls.n	8014162 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8014116:	3b30      	subs	r3, #48	@ 0x30
 8014118:	4a1e      	ldr	r2, [pc, #120]	@ (8014194 <SetMaxTimeCredits+0x15c>)
 801411a:	fba2 2303 	umull	r2, r3, r2, r3
 801411e:	0c1b      	lsrs	r3, r3, #16
 8014120:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8014122:	697b      	ldr	r3, [r7, #20]
 8014124:	4a1c      	ldr	r2, [pc, #112]	@ (8014198 <SetMaxTimeCredits+0x160>)
 8014126:	fb02 f303 	mul.w	r3, r2, r3
 801412a:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 8014132:	3330      	adds	r3, #48	@ 0x30
 8014134:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8014136:	2300      	movs	r3, #0
 8014138:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801413a:	f107 0314 	add.w	r3, r7, #20
 801413e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014142:	f006 ff79 	bl	801b038 <SysTimeToMs>
 8014146:	4602      	mov	r2, r0
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	609a      	str	r2, [r3, #8]
 801414c:	e009      	b.n	8014162 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801414e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8014152:	f083 0301 	eor.w	r3, r3, #1
 8014156:	b2db      	uxtb	r3, r3
 8014158:	2b00      	cmp	r3, #0
 801415a:	d002      	beq.n	8014162 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014160:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	685b      	ldr	r3, [r3, #4]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d102      	bne.n	8014170 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801416e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014174:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8014176:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 8014178:	4618      	mov	r0, r3
 801417a:	3730      	adds	r7, #48	@ 0x30
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}
 8014180:	001b7740 	.word	0x001b7740
 8014184:	0112a880 	.word	0x0112a880
 8014188:	02932e00 	.word	0x02932e00
 801418c:	0001517f 	.word	0x0001517f
 8014190:	0001ec2f 	.word	0x0001ec2f
 8014194:	c22e4507 	.word	0xc22e4507
 8014198:	00015180 	.word	0x00015180

0801419c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b086      	sub	sp, #24
 80141a0:	af02      	add	r7, sp, #8
 80141a2:	6078      	str	r0, [r7, #4]
 80141a4:	4608      	mov	r0, r1
 80141a6:	4611      	mov	r1, r2
 80141a8:	461a      	mov	r2, r3
 80141aa:	4603      	mov	r3, r0
 80141ac:	70fb      	strb	r3, [r7, #3]
 80141ae:	460b      	mov	r3, r1
 80141b0:	70bb      	strb	r3, [r7, #2]
 80141b2:	4613      	mov	r3, r2
 80141b4:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80141b6:	78f9      	ldrb	r1, [r7, #3]
 80141b8:	787b      	ldrb	r3, [r7, #1]
 80141ba:	9301      	str	r3, [sp, #4]
 80141bc:	78bb      	ldrb	r3, [r7, #2]
 80141be:	9300      	str	r3, [sp, #0]
 80141c0:	f107 0318 	add.w	r3, r7, #24
 80141c4:	cb0c      	ldmia	r3, {r2, r3}
 80141c6:	6878      	ldr	r0, [r7, #4]
 80141c8:	f7ff ff36 	bl	8014038 <SetMaxTimeCredits>
 80141cc:	4603      	mov	r3, r0
 80141ce:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80141d0:	78fb      	ldrb	r3, [r7, #3]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d00a      	beq.n	80141ec <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	685b      	ldr	r3, [r3, #4]
 80141da:	4618      	mov	r0, r3
 80141dc:	f007 fc5e 	bl	801ba9c <UTIL_TIMER_GetElapsedTime>
 80141e0:	4602      	mov	r2, r0
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	68db      	ldr	r3, [r3, #12]
 80141e6:	441a      	add	r2, r3
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	68da      	ldr	r2, [r3, #12]
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	691b      	ldr	r3, [r3, #16]
 80141f4:	429a      	cmp	r2, r3
 80141f6:	d903      	bls.n	8014200 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	691a      	ldr	r2, [r3, #16]
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	6a3a      	ldr	r2, [r7, #32]
 8014204:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8014206:	89fb      	ldrh	r3, [r7, #14]
}
 8014208:	4618      	mov	r0, r3
 801420a:	3710      	adds	r7, #16
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}

08014210 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8014210:	b480      	push	{r7}
 8014212:	b085      	sub	sp, #20
 8014214:	af00      	add	r7, sp, #0
 8014216:	4603      	mov	r3, r0
 8014218:	460a      	mov	r2, r1
 801421a:	80fb      	strh	r3, [r7, #6]
 801421c:	4613      	mov	r3, r2
 801421e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8014220:	2300      	movs	r3, #0
 8014222:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8014224:	2300      	movs	r3, #0
 8014226:	73bb      	strb	r3, [r7, #14]
 8014228:	e011      	b.n	801424e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801422a:	88fa      	ldrh	r2, [r7, #6]
 801422c:	7bbb      	ldrb	r3, [r7, #14]
 801422e:	2101      	movs	r1, #1
 8014230:	fa01 f303 	lsl.w	r3, r1, r3
 8014234:	401a      	ands	r2, r3
 8014236:	7bbb      	ldrb	r3, [r7, #14]
 8014238:	2101      	movs	r1, #1
 801423a:	fa01 f303 	lsl.w	r3, r1, r3
 801423e:	429a      	cmp	r2, r3
 8014240:	d102      	bne.n	8014248 <CountChannels+0x38>
        {
            nbActiveBits++;
 8014242:	7bfb      	ldrb	r3, [r7, #15]
 8014244:	3301      	adds	r3, #1
 8014246:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8014248:	7bbb      	ldrb	r3, [r7, #14]
 801424a:	3301      	adds	r3, #1
 801424c:	73bb      	strb	r3, [r7, #14]
 801424e:	7bba      	ldrb	r2, [r7, #14]
 8014250:	797b      	ldrb	r3, [r7, #5]
 8014252:	429a      	cmp	r2, r3
 8014254:	d3e9      	bcc.n	801422a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8014256:	7bfb      	ldrb	r3, [r7, #15]
}
 8014258:	4618      	mov	r0, r3
 801425a:	3714      	adds	r7, #20
 801425c:	46bd      	mov	sp, r7
 801425e:	bc80      	pop	{r7}
 8014260:	4770      	bx	lr

08014262 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8014262:	b580      	push	{r7, lr}
 8014264:	b084      	sub	sp, #16
 8014266:	af00      	add	r7, sp, #0
 8014268:	6039      	str	r1, [r7, #0]
 801426a:	4611      	mov	r1, r2
 801426c:	461a      	mov	r2, r3
 801426e:	4603      	mov	r3, r0
 8014270:	71fb      	strb	r3, [r7, #7]
 8014272:	460b      	mov	r3, r1
 8014274:	71bb      	strb	r3, [r7, #6]
 8014276:	4613      	mov	r3, r2
 8014278:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801427a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801427e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014282:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014286:	4618      	mov	r0, r3
 8014288:	f000 f85d 	bl	8014346 <RegionCommonValueInRange>
 801428c:	4603      	mov	r3, r0
 801428e:	2b00      	cmp	r3, #0
 8014290:	d101      	bne.n	8014296 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8014292:	2300      	movs	r3, #0
 8014294:	e053      	b.n	801433e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014296:	2300      	movs	r3, #0
 8014298:	73fb      	strb	r3, [r7, #15]
 801429a:	2300      	movs	r3, #0
 801429c:	73bb      	strb	r3, [r7, #14]
 801429e:	e049      	b.n	8014334 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80142a0:	2300      	movs	r3, #0
 80142a2:	737b      	strb	r3, [r7, #13]
 80142a4:	e03d      	b.n	8014322 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80142a6:	7bbb      	ldrb	r3, [r7, #14]
 80142a8:	005b      	lsls	r3, r3, #1
 80142aa:	683a      	ldr	r2, [r7, #0]
 80142ac:	4413      	add	r3, r2
 80142ae:	881b      	ldrh	r3, [r3, #0]
 80142b0:	461a      	mov	r2, r3
 80142b2:	7b7b      	ldrb	r3, [r7, #13]
 80142b4:	fa42 f303 	asr.w	r3, r2, r3
 80142b8:	f003 0301 	and.w	r3, r3, #1
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d02d      	beq.n	801431c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80142c0:	7bfa      	ldrb	r2, [r7, #15]
 80142c2:	7b7b      	ldrb	r3, [r7, #13]
 80142c4:	4413      	add	r3, r2
 80142c6:	461a      	mov	r2, r3
 80142c8:	4613      	mov	r3, r2
 80142ca:	005b      	lsls	r3, r3, #1
 80142cc:	4413      	add	r3, r2
 80142ce:	009b      	lsls	r3, r3, #2
 80142d0:	461a      	mov	r2, r3
 80142d2:	69fb      	ldr	r3, [r7, #28]
 80142d4:	4413      	add	r3, r2
 80142d6:	7a1b      	ldrb	r3, [r3, #8]
 80142d8:	f343 0303 	sbfx	r3, r3, #0, #4
 80142dc:	b25b      	sxtb	r3, r3
 80142de:	f003 030f 	and.w	r3, r3, #15
 80142e2:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80142e4:	7bfa      	ldrb	r2, [r7, #15]
 80142e6:	7b7b      	ldrb	r3, [r7, #13]
 80142e8:	4413      	add	r3, r2
 80142ea:	461a      	mov	r2, r3
 80142ec:	4613      	mov	r3, r2
 80142ee:	005b      	lsls	r3, r3, #1
 80142f0:	4413      	add	r3, r2
 80142f2:	009b      	lsls	r3, r3, #2
 80142f4:	461a      	mov	r2, r3
 80142f6:	69fb      	ldr	r3, [r7, #28]
 80142f8:	4413      	add	r3, r2
 80142fa:	7a1b      	ldrb	r3, [r3, #8]
 80142fc:	f343 1303 	sbfx	r3, r3, #4, #4
 8014300:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014302:	f003 030f 	and.w	r3, r3, #15
 8014306:	b25a      	sxtb	r2, r3
 8014308:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801430c:	4618      	mov	r0, r3
 801430e:	f000 f81a 	bl	8014346 <RegionCommonValueInRange>
 8014312:	4603      	mov	r3, r0
 8014314:	2b01      	cmp	r3, #1
 8014316:	d101      	bne.n	801431c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014318:	2301      	movs	r3, #1
 801431a:	e010      	b.n	801433e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 801431c:	7b7b      	ldrb	r3, [r7, #13]
 801431e:	3301      	adds	r3, #1
 8014320:	737b      	strb	r3, [r7, #13]
 8014322:	7b7b      	ldrb	r3, [r7, #13]
 8014324:	2b0f      	cmp	r3, #15
 8014326:	d9be      	bls.n	80142a6 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014328:	7bfb      	ldrb	r3, [r7, #15]
 801432a:	3310      	adds	r3, #16
 801432c:	73fb      	strb	r3, [r7, #15]
 801432e:	7bbb      	ldrb	r3, [r7, #14]
 8014330:	3301      	adds	r3, #1
 8014332:	73bb      	strb	r3, [r7, #14]
 8014334:	7bfa      	ldrb	r2, [r7, #15]
 8014336:	79fb      	ldrb	r3, [r7, #7]
 8014338:	429a      	cmp	r2, r3
 801433a:	d3b1      	bcc.n	80142a0 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 801433c:	2300      	movs	r3, #0
}
 801433e:	4618      	mov	r0, r3
 8014340:	3710      	adds	r7, #16
 8014342:	46bd      	mov	sp, r7
 8014344:	bd80      	pop	{r7, pc}

08014346 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8014346:	b480      	push	{r7}
 8014348:	b083      	sub	sp, #12
 801434a:	af00      	add	r7, sp, #0
 801434c:	4603      	mov	r3, r0
 801434e:	71fb      	strb	r3, [r7, #7]
 8014350:	460b      	mov	r3, r1
 8014352:	71bb      	strb	r3, [r7, #6]
 8014354:	4613      	mov	r3, r2
 8014356:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8014358:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801435c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014360:	429a      	cmp	r2, r3
 8014362:	db07      	blt.n	8014374 <RegionCommonValueInRange+0x2e>
 8014364:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014368:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801436c:	429a      	cmp	r2, r3
 801436e:	dc01      	bgt.n	8014374 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8014370:	2301      	movs	r3, #1
 8014372:	e000      	b.n	8014376 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8014374:	2300      	movs	r3, #0
}
 8014376:	4618      	mov	r0, r3
 8014378:	370c      	adds	r7, #12
 801437a:	46bd      	mov	sp, r7
 801437c:	bc80      	pop	{r7}
 801437e:	4770      	bx	lr

08014380 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8014380:	b480      	push	{r7}
 8014382:	b085      	sub	sp, #20
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
 8014388:	460b      	mov	r3, r1
 801438a:	70fb      	strb	r3, [r7, #3]
 801438c:	4613      	mov	r3, r2
 801438e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8014390:	78fb      	ldrb	r3, [r7, #3]
 8014392:	091b      	lsrs	r3, r3, #4
 8014394:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8014396:	78bb      	ldrb	r3, [r7, #2]
 8014398:	091b      	lsrs	r3, r3, #4
 801439a:	b2db      	uxtb	r3, r3
 801439c:	7bfa      	ldrb	r2, [r7, #15]
 801439e:	429a      	cmp	r2, r3
 80143a0:	d803      	bhi.n	80143aa <RegionCommonChanDisable+0x2a>
 80143a2:	78fa      	ldrb	r2, [r7, #3]
 80143a4:	78bb      	ldrb	r3, [r7, #2]
 80143a6:	429a      	cmp	r2, r3
 80143a8:	d301      	bcc.n	80143ae <RegionCommonChanDisable+0x2e>
    {
        return false;
 80143aa:	2300      	movs	r3, #0
 80143ac:	e017      	b.n	80143de <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80143ae:	7bfb      	ldrb	r3, [r7, #15]
 80143b0:	005b      	lsls	r3, r3, #1
 80143b2:	687a      	ldr	r2, [r7, #4]
 80143b4:	4413      	add	r3, r2
 80143b6:	881b      	ldrh	r3, [r3, #0]
 80143b8:	b21a      	sxth	r2, r3
 80143ba:	78fb      	ldrb	r3, [r7, #3]
 80143bc:	f003 030f 	and.w	r3, r3, #15
 80143c0:	2101      	movs	r1, #1
 80143c2:	fa01 f303 	lsl.w	r3, r1, r3
 80143c6:	b21b      	sxth	r3, r3
 80143c8:	43db      	mvns	r3, r3
 80143ca:	b21b      	sxth	r3, r3
 80143cc:	4013      	ands	r3, r2
 80143ce:	b219      	sxth	r1, r3
 80143d0:	7bfb      	ldrb	r3, [r7, #15]
 80143d2:	005b      	lsls	r3, r3, #1
 80143d4:	687a      	ldr	r2, [r7, #4]
 80143d6:	4413      	add	r3, r2
 80143d8:	b28a      	uxth	r2, r1
 80143da:	801a      	strh	r2, [r3, #0]

    return true;
 80143dc:	2301      	movs	r3, #1
}
 80143de:	4618      	mov	r0, r3
 80143e0:	3714      	adds	r7, #20
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bc80      	pop	{r7}
 80143e6:	4770      	bx	lr

080143e8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b084      	sub	sp, #16
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
 80143f0:	460b      	mov	r3, r1
 80143f2:	70fb      	strb	r3, [r7, #3]
 80143f4:	4613      	mov	r3, r2
 80143f6:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 80143f8:	2300      	movs	r3, #0
 80143fa:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d101      	bne.n	8014406 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8014402:	2300      	movs	r3, #0
 8014404:	e018      	b.n	8014438 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014406:	78fb      	ldrb	r3, [r7, #3]
 8014408:	73bb      	strb	r3, [r7, #14]
 801440a:	e010      	b.n	801442e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801440c:	7bbb      	ldrb	r3, [r7, #14]
 801440e:	005b      	lsls	r3, r3, #1
 8014410:	687a      	ldr	r2, [r7, #4]
 8014412:	4413      	add	r3, r2
 8014414:	881b      	ldrh	r3, [r3, #0]
 8014416:	2110      	movs	r1, #16
 8014418:	4618      	mov	r0, r3
 801441a:	f7ff fef9 	bl	8014210 <CountChannels>
 801441e:	4603      	mov	r3, r0
 8014420:	461a      	mov	r2, r3
 8014422:	7bfb      	ldrb	r3, [r7, #15]
 8014424:	4413      	add	r3, r2
 8014426:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014428:	7bbb      	ldrb	r3, [r7, #14]
 801442a:	3301      	adds	r3, #1
 801442c:	73bb      	strb	r3, [r7, #14]
 801442e:	7bba      	ldrb	r2, [r7, #14]
 8014430:	78bb      	ldrb	r3, [r7, #2]
 8014432:	429a      	cmp	r2, r3
 8014434:	d3ea      	bcc.n	801440c <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8014436:	7bfb      	ldrb	r3, [r7, #15]
}
 8014438:	4618      	mov	r0, r3
 801443a:	3710      	adds	r7, #16
 801443c:	46bd      	mov	sp, r7
 801443e:	bd80      	pop	{r7, pc}

08014440 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8014440:	b480      	push	{r7}
 8014442:	b087      	sub	sp, #28
 8014444:	af00      	add	r7, sp, #0
 8014446:	60f8      	str	r0, [r7, #12]
 8014448:	60b9      	str	r1, [r7, #8]
 801444a:	4613      	mov	r3, r2
 801444c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d016      	beq.n	8014482 <RegionCommonChanMaskCopy+0x42>
 8014454:	68bb      	ldr	r3, [r7, #8]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d013      	beq.n	8014482 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801445a:	2300      	movs	r3, #0
 801445c:	75fb      	strb	r3, [r7, #23]
 801445e:	e00c      	b.n	801447a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8014460:	7dfb      	ldrb	r3, [r7, #23]
 8014462:	005b      	lsls	r3, r3, #1
 8014464:	68ba      	ldr	r2, [r7, #8]
 8014466:	441a      	add	r2, r3
 8014468:	7dfb      	ldrb	r3, [r7, #23]
 801446a:	005b      	lsls	r3, r3, #1
 801446c:	68f9      	ldr	r1, [r7, #12]
 801446e:	440b      	add	r3, r1
 8014470:	8812      	ldrh	r2, [r2, #0]
 8014472:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8014474:	7dfb      	ldrb	r3, [r7, #23]
 8014476:	3301      	adds	r3, #1
 8014478:	75fb      	strb	r3, [r7, #23]
 801447a:	7dfa      	ldrb	r2, [r7, #23]
 801447c:	79fb      	ldrb	r3, [r7, #7]
 801447e:	429a      	cmp	r2, r3
 8014480:	d3ee      	bcc.n	8014460 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8014482:	bf00      	nop
 8014484:	371c      	adds	r7, #28
 8014486:	46bd      	mov	sp, r7
 8014488:	bc80      	pop	{r7}
 801448a:	4770      	bx	lr

0801448c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801448c:	b082      	sub	sp, #8
 801448e:	b580      	push	{r7, lr}
 8014490:	b086      	sub	sp, #24
 8014492:	af00      	add	r7, sp, #0
 8014494:	60f8      	str	r0, [r7, #12]
 8014496:	60b9      	str	r1, [r7, #8]
 8014498:	627b      	str	r3, [r7, #36]	@ 0x24
 801449a:	4613      	mov	r3, r2
 801449c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801449e:	79f9      	ldrb	r1, [r7, #7]
 80144a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80144a4:	cb0c      	ldmia	r3, {r2, r3}
 80144a6:	68f8      	ldr	r0, [r7, #12]
 80144a8:	f7ff fd8b 	bl	8013fc2 <GetDutyCycle>
 80144ac:	4603      	mov	r3, r0
 80144ae:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	68da      	ldr	r2, [r3, #12]
 80144b4:	8afb      	ldrh	r3, [r7, #22]
 80144b6:	68b9      	ldr	r1, [r7, #8]
 80144b8:	fb01 f303 	mul.w	r3, r1, r3
 80144bc:	429a      	cmp	r2, r3
 80144be:	d909      	bls.n	80144d4 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	68da      	ldr	r2, [r3, #12]
 80144c4:	8afb      	ldrh	r3, [r7, #22]
 80144c6:	68b9      	ldr	r1, [r7, #8]
 80144c8:	fb01 f303 	mul.w	r3, r1, r3
 80144cc:	1ad2      	subs	r2, r2, r3
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80144d2:	e002      	b.n	80144da <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	2200      	movs	r2, #0
 80144d8:	60da      	str	r2, [r3, #12]
}
 80144da:	bf00      	nop
 80144dc:	3718      	adds	r7, #24
 80144de:	46bd      	mov	sp, r7
 80144e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80144e4:	b002      	add	sp, #8
 80144e6:	4770      	bx	lr

080144e8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 80144e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144ea:	b08f      	sub	sp, #60	@ 0x3c
 80144ec:	af04      	add	r7, sp, #16
 80144ee:	6039      	str	r1, [r7, #0]
 80144f0:	4611      	mov	r1, r2
 80144f2:	461a      	mov	r2, r3
 80144f4:	4603      	mov	r3, r0
 80144f6:	71fb      	strb	r3, [r7, #7]
 80144f8:	460b      	mov	r3, r1
 80144fa:	71bb      	strb	r3, [r7, #6]
 80144fc:	4613      	mov	r3, r2
 80144fe:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8014500:	f04f 33ff 	mov.w	r3, #4294967295
 8014504:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8014506:	f007 fab7 	bl	801ba78 <UTIL_TIMER_GetCurrentTime>
 801450a:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 801450c:	2300      	movs	r3, #0
 801450e:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8014510:	2301      	movs	r3, #1
 8014512:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8014514:	2300      	movs	r3, #0
 8014516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801451a:	2300      	movs	r3, #0
 801451c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014520:	e0ba      	b.n	8014698 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8014522:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014526:	4613      	mov	r3, r2
 8014528:	005b      	lsls	r3, r3, #1
 801452a:	4413      	add	r3, r2
 801452c:	00db      	lsls	r3, r3, #3
 801452e:	461a      	mov	r2, r3
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	189c      	adds	r4, r3, r2
 8014534:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8014538:	797a      	ldrb	r2, [r7, #5]
 801453a:	79fd      	ldrb	r5, [r7, #7]
 801453c:	69fb      	ldr	r3, [r7, #28]
 801453e:	9302      	str	r3, [sp, #8]
 8014540:	46ec      	mov	ip, sp
 8014542:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8014546:	e893 0003 	ldmia.w	r3, {r0, r1}
 801454a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801454e:	4633      	mov	r3, r6
 8014550:	4629      	mov	r1, r5
 8014552:	4620      	mov	r0, r4
 8014554:	f7ff fe22 	bl	801419c <UpdateTimeCredits>
 8014558:	4603      	mov	r3, r0
 801455a:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 801455c:	8afa      	ldrh	r2, [r7, #22]
 801455e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014560:	fb02 f303 	mul.w	r3, r2, r3
 8014564:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8014566:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801456a:	4613      	mov	r3, r2
 801456c:	005b      	lsls	r3, r3, #1
 801456e:	4413      	add	r3, r2
 8014570:	00db      	lsls	r3, r3, #3
 8014572:	461a      	mov	r2, r3
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	4413      	add	r3, r2
 8014578:	68db      	ldr	r3, [r3, #12]
 801457a:	69ba      	ldr	r2, [r7, #24]
 801457c:	429a      	cmp	r2, r3
 801457e:	d908      	bls.n	8014592 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014580:	797b      	ldrb	r3, [r7, #5]
 8014582:	f083 0301 	eor.w	r3, r3, #1
 8014586:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8014588:	2b00      	cmp	r3, #0
 801458a:	d013      	beq.n	80145b4 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801458c:	79fb      	ldrb	r3, [r7, #7]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d010      	beq.n	80145b4 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8014592:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014596:	4613      	mov	r3, r2
 8014598:	005b      	lsls	r3, r3, #1
 801459a:	4413      	add	r3, r2
 801459c:	00db      	lsls	r3, r3, #3
 801459e:	461a      	mov	r2, r3
 80145a0:	683b      	ldr	r3, [r7, #0]
 80145a2:	4413      	add	r3, r2
 80145a4:	2201      	movs	r2, #1
 80145a6:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80145a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80145ac:	3301      	adds	r3, #1
 80145ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80145b2:	e06c      	b.n	801468e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80145b4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80145b8:	4613      	mov	r3, r2
 80145ba:	005b      	lsls	r3, r3, #1
 80145bc:	4413      	add	r3, r2
 80145be:	00db      	lsls	r3, r3, #3
 80145c0:	461a      	mov	r2, r3
 80145c2:	683b      	ldr	r3, [r7, #0]
 80145c4:	4413      	add	r3, r2
 80145c6:	2200      	movs	r2, #0
 80145c8:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 80145ca:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80145ce:	4613      	mov	r3, r2
 80145d0:	005b      	lsls	r3, r3, #1
 80145d2:	4413      	add	r3, r2
 80145d4:	00db      	lsls	r3, r3, #3
 80145d6:	461a      	mov	r2, r3
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	4413      	add	r3, r2
 80145dc:	691b      	ldr	r3, [r3, #16]
 80145de:	69ba      	ldr	r2, [r7, #24]
 80145e0:	429a      	cmp	r2, r3
 80145e2:	d815      	bhi.n	8014610 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80145e4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80145e8:	4613      	mov	r3, r2
 80145ea:	005b      	lsls	r3, r3, #1
 80145ec:	4413      	add	r3, r2
 80145ee:	00db      	lsls	r3, r3, #3
 80145f0:	461a      	mov	r2, r3
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	4413      	add	r3, r2
 80145f6:	68db      	ldr	r3, [r3, #12]
 80145f8:	69ba      	ldr	r2, [r7, #24]
 80145fa:	1ad3      	subs	r3, r2, r3
 80145fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80145fe:	4293      	cmp	r3, r2
 8014600:	bf28      	it	cs
 8014602:	4613      	movcs	r3, r2
 8014604:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8014606:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801460a:	3301      	adds	r3, #1
 801460c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8014610:	79fb      	ldrb	r3, [r7, #7]
 8014612:	f083 0301 	eor.w	r3, r3, #1
 8014616:	b2db      	uxtb	r3, r3
 8014618:	2b00      	cmp	r3, #0
 801461a:	d038      	beq.n	801468e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 801461c:	2300      	movs	r3, #0
 801461e:	60fb      	str	r3, [r7, #12]
 8014620:	2300      	movs	r3, #0
 8014622:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014624:	8afb      	ldrh	r3, [r7, #22]
 8014626:	2b64      	cmp	r3, #100	@ 0x64
 8014628:	d103      	bne.n	8014632 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801462a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 801462e:	60fb      	str	r3, [r7, #12]
 8014630:	e009      	b.n	8014646 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014632:	8afb      	ldrh	r3, [r7, #22]
 8014634:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8014638:	d103      	bne.n	8014642 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801463a:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 801463e:	60fb      	str	r3, [r7, #12]
 8014640:	e001      	b.n	8014646 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014642:	4b1e      	ldr	r3, [pc, #120]	@ (80146bc <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014644:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014648:	4a1c      	ldr	r2, [pc, #112]	@ (80146bc <RegionCommonUpdateBandTimeOff+0x1d4>)
 801464a:	4293      	cmp	r3, r2
 801464c:	d90e      	bls.n	801466c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801464e:	68fa      	ldr	r2, [r7, #12]
 8014650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014652:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8014656:	3b30      	subs	r3, #48	@ 0x30
 8014658:	4919      	ldr	r1, [pc, #100]	@ (80146c0 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801465a:	fba1 1303 	umull	r1, r3, r1, r3
 801465e:	0c1b      	lsrs	r3, r3, #16
 8014660:	3301      	adds	r3, #1
 8014662:	4918      	ldr	r1, [pc, #96]	@ (80146c4 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8014664:	fb01 f303 	mul.w	r3, r1, r3
 8014668:	4413      	add	r3, r2
 801466a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801466c:	f107 000c 	add.w	r0, r7, #12
 8014670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014672:	9300      	str	r3, [sp, #0]
 8014674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014676:	f107 020c 	add.w	r2, r7, #12
 801467a:	ca06      	ldmia	r2, {r1, r2}
 801467c:	f006 fc1d 	bl	801aeba <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8014680:	f107 030c 	add.w	r3, r7, #12
 8014684:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014688:	f006 fcd6 	bl	801b038 <SysTimeToMs>
 801468c:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801468e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8014692:	3301      	adds	r3, #1
 8014694:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014698:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801469c:	79bb      	ldrb	r3, [r7, #6]
 801469e:	429a      	cmp	r2, r3
 80146a0:	f4ff af3f 	bcc.w	8014522 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80146a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d102      	bne.n	80146b2 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80146ac:	f04f 33ff 	mov.w	r3, #4294967295
 80146b0:	e000      	b.n	80146b4 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80146b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80146b4:	4618      	mov	r0, r3
 80146b6:	372c      	adds	r7, #44	@ 0x2c
 80146b8:	46bd      	mov	sp, r7
 80146ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146bc:	0001ec30 	.word	0x0001ec30
 80146c0:	c22e4507 	.word	0xc22e4507
 80146c4:	00015180 	.word	0x00015180

080146c8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80146c8:	b480      	push	{r7}
 80146ca:	b085      	sub	sp, #20
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
 80146d0:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80146d2:	2300      	movs	r3, #0
 80146d4:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	781b      	ldrb	r3, [r3, #0]
 80146da:	2b03      	cmp	r3, #3
 80146dc:	d13f      	bne.n	801475e <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	3301      	adds	r3, #1
 80146e2:	781b      	ldrb	r3, [r3, #0]
 80146e4:	b25a      	sxtb	r2, r3
 80146e6:	683b      	ldr	r3, [r7, #0]
 80146e8:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80146f0:	f003 030f 	and.w	r3, r3, #15
 80146f4:	b25a      	sxtb	r2, r3
 80146f6:	683b      	ldr	r3, [r7, #0]
 80146f8:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80146fa:	683b      	ldr	r3, [r7, #0]
 80146fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014700:	b2db      	uxtb	r3, r3
 8014702:	091b      	lsrs	r3, r3, #4
 8014704:	b2db      	uxtb	r3, r3
 8014706:	b25a      	sxtb	r2, r3
 8014708:	683b      	ldr	r3, [r7, #0]
 801470a:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	3302      	adds	r3, #2
 8014710:	781b      	ldrb	r3, [r3, #0]
 8014712:	461a      	mov	r2, r3
 8014714:	683b      	ldr	r3, [r7, #0]
 8014716:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8014718:	683b      	ldr	r3, [r7, #0]
 801471a:	889b      	ldrh	r3, [r3, #4]
 801471c:	b21a      	sxth	r2, r3
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	3303      	adds	r3, #3
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	021b      	lsls	r3, r3, #8
 8014726:	b21b      	sxth	r3, r3
 8014728:	4313      	orrs	r3, r2
 801472a:	b21b      	sxth	r3, r3
 801472c:	b29a      	uxth	r2, r3
 801472e:	683b      	ldr	r3, [r7, #0]
 8014730:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	791a      	ldrb	r2, [r3, #4]
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801473a:	683b      	ldr	r3, [r7, #0]
 801473c:	781b      	ldrb	r3, [r3, #0]
 801473e:	091b      	lsrs	r3, r3, #4
 8014740:	b2db      	uxtb	r3, r3
 8014742:	f003 0307 	and.w	r3, r3, #7
 8014746:	b2da      	uxtb	r2, r3
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801474c:	683b      	ldr	r3, [r7, #0]
 801474e:	781b      	ldrb	r3, [r3, #0]
 8014750:	f003 030f 	and.w	r3, r3, #15
 8014754:	b2da      	uxtb	r2, r3
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801475a:	2305      	movs	r3, #5
 801475c:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801475e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014760:	4618      	mov	r0, r3
 8014762:	3714      	adds	r7, #20
 8014764:	46bd      	mov	sp, r7
 8014766:	bc80      	pop	{r7}
 8014768:	4770      	bx	lr

0801476a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801476a:	b5b0      	push	{r4, r5, r7, lr}
 801476c:	b088      	sub	sp, #32
 801476e:	af02      	add	r7, sp, #8
 8014770:	60f8      	str	r0, [r7, #12]
 8014772:	60b9      	str	r1, [r7, #8]
 8014774:	607a      	str	r2, [r7, #4]
 8014776:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	791b      	ldrb	r3, [r3, #4]
 801477c:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	799b      	ldrb	r3, [r3, #6]
 8014782:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	79db      	ldrb	r3, [r3, #7]
 8014788:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	7a1b      	ldrb	r3, [r3, #8]
 801478e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	795b      	ldrb	r3, [r3, #5]
 8014794:	f083 0301 	eor.w	r3, r3, #1
 8014798:	b2db      	uxtb	r3, r3
 801479a:	2b00      	cmp	r3, #0
 801479c:	d008      	beq.n	80147b0 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	7adb      	ldrb	r3, [r3, #11]
 80147a2:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	7a5b      	ldrb	r3, [r3, #9]
 80147a8:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	7a9b      	ldrb	r3, [r3, #10]
 80147ae:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80147b0:	7dfb      	ldrb	r3, [r7, #23]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d04a      	beq.n	801484c <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80147b6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80147ba:	2b0f      	cmp	r3, #15
 80147bc:	d103      	bne.n	80147c6 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	7a5b      	ldrb	r3, [r3, #9]
 80147c2:	75bb      	strb	r3, [r7, #22]
 80147c4:	e01d      	b.n	8014802 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	7b18      	ldrb	r0, [r3, #12]
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	6919      	ldr	r1, [r3, #16]
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80147da:	68fa      	ldr	r2, [r7, #12]
 80147dc:	6992      	ldr	r2, [r2, #24]
 80147de:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80147e2:	9201      	str	r2, [sp, #4]
 80147e4:	9300      	str	r3, [sp, #0]
 80147e6:	462b      	mov	r3, r5
 80147e8:	4622      	mov	r2, r4
 80147ea:	f7ff fd3a 	bl	8014262 <RegionCommonChanVerifyDr>
 80147ee:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80147f0:	f083 0301 	eor.w	r3, r3, #1
 80147f4:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d003      	beq.n	8014802 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80147fa:	7dfb      	ldrb	r3, [r7, #23]
 80147fc:	f023 0302 	bic.w	r3, r3, #2
 8014800:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8014802:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8014806:	2b0f      	cmp	r3, #15
 8014808:	d103      	bne.n	8014812 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	7a9b      	ldrb	r3, [r3, #10]
 801480e:	757b      	strb	r3, [r7, #21]
 8014810:	e01c      	b.n	801484c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801481e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8014822:	4618      	mov	r0, r3
 8014824:	f7ff fd8f 	bl	8014346 <RegionCommonValueInRange>
 8014828:	4603      	mov	r3, r0
 801482a:	2b00      	cmp	r3, #0
 801482c:	d10e      	bne.n	801484c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8014834:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8014838:	429a      	cmp	r2, r3
 801483a:	da03      	bge.n	8014844 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	7f5b      	ldrb	r3, [r3, #29]
 8014840:	757b      	strb	r3, [r7, #21]
 8014842:	e003      	b.n	801484c <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8014844:	7dfb      	ldrb	r3, [r7, #23]
 8014846:	f023 0304 	bic.w	r3, r3, #4
 801484a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801484c:	7dfb      	ldrb	r3, [r7, #23]
 801484e:	2b07      	cmp	r3, #7
 8014850:	d105      	bne.n	801485e <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8014852:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d101      	bne.n	801485e <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801485a:	2301      	movs	r3, #1
 801485c:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801485e:	68bb      	ldr	r3, [r7, #8]
 8014860:	7dba      	ldrb	r2, [r7, #22]
 8014862:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	7d7a      	ldrb	r2, [r7, #21]
 8014868:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801486a:	7d3a      	ldrb	r2, [r7, #20]
 801486c:	683b      	ldr	r3, [r7, #0]
 801486e:	701a      	strb	r2, [r3, #0]

    return status;
 8014870:	7dfb      	ldrb	r3, [r7, #23]
}
 8014872:	4618      	mov	r0, r3
 8014874:	3718      	adds	r7, #24
 8014876:	46bd      	mov	sp, r7
 8014878:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801487c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 801487c:	b480      	push	{r7}
 801487e:	b083      	sub	sp, #12
 8014880:	af00      	add	r7, sp, #0
 8014882:	4603      	mov	r3, r0
 8014884:	6039      	str	r1, [r7, #0]
 8014886:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8014888:	79fb      	ldrb	r3, [r7, #7]
 801488a:	4a06      	ldr	r2, [pc, #24]	@ (80148a4 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 801488c:	fa02 f303 	lsl.w	r3, r2, r3
 8014890:	461a      	mov	r2, r3
 8014892:	683b      	ldr	r3, [r7, #0]
 8014894:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014898:	4618      	mov	r0, r3
 801489a:	370c      	adds	r7, #12
 801489c:	46bd      	mov	sp, r7
 801489e:	bc80      	pop	{r7}
 80148a0:	4770      	bx	lr
 80148a2:	bf00      	nop
 80148a4:	000f4240 	.word	0x000f4240

080148a8 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80148a8:	b480      	push	{r7}
 80148aa:	b083      	sub	sp, #12
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	4603      	mov	r3, r0
 80148b0:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80148b2:	79fb      	ldrb	r3, [r7, #7]
 80148b4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80148b8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80148bc:	4618      	mov	r0, r3
 80148be:	370c      	adds	r7, #12
 80148c0:	46bd      	mov	sp, r7
 80148c2:	bc80      	pop	{r7}
 80148c4:	4770      	bx	lr
	...

080148c8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80148c8:	b480      	push	{r7}
 80148ca:	b085      	sub	sp, #20
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	60f8      	str	r0, [r7, #12]
 80148d0:	607a      	str	r2, [r7, #4]
 80148d2:	603b      	str	r3, [r7, #0]
 80148d4:	460b      	mov	r3, r1
 80148d6:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80148d8:	7afa      	ldrb	r2, [r7, #11]
 80148da:	7afb      	ldrb	r3, [r7, #11]
 80148dc:	3b04      	subs	r3, #4
 80148de:	4619      	mov	r1, r3
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	fb03 f101 	mul.w	r1, r3, r1
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80148ec:	fb00 f303 	mul.w	r3, r0, r3
 80148f0:	440b      	add	r3, r1
 80148f2:	005b      	lsls	r3, r3, #1
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d013      	beq.n	8014920 <RegionCommonComputeRxWindowParameters+0x58>
 80148f8:	7afb      	ldrb	r3, [r7, #11]
 80148fa:	3b04      	subs	r3, #4
 80148fc:	4619      	mov	r1, r3
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	fb03 f101 	mul.w	r1, r3, r1
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801490a:	fb00 f303 	mul.w	r3, r0, r3
 801490e:	440b      	add	r3, r1
 8014910:	0059      	lsls	r1, r3, #1
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	440b      	add	r3, r1
 8014916:	1e59      	subs	r1, r3, #1
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	fbb1 f3f3 	udiv	r3, r1, r3
 801491e:	e00f      	b.n	8014940 <RegionCommonComputeRxWindowParameters+0x78>
 8014920:	7afb      	ldrb	r3, [r7, #11]
 8014922:	3b04      	subs	r3, #4
 8014924:	4619      	mov	r1, r3
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	fb03 f101 	mul.w	r1, r3, r1
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8014932:	fb00 f303 	mul.w	r3, r0, r3
 8014936:	440b      	add	r3, r1
 8014938:	0059      	lsls	r1, r3, #1
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	fbb1 f3f3 	udiv	r3, r1, r3
 8014940:	429a      	cmp	r2, r3
 8014942:	bf38      	it	cc
 8014944:	461a      	movcc	r2, r3
 8014946:	69bb      	ldr	r3, [r7, #24]
 8014948:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	009b      	lsls	r3, r3, #2
 801494e:	4619      	mov	r1, r3
 8014950:	69bb      	ldr	r3, [r7, #24]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	68fa      	ldr	r2, [r7, #12]
 8014956:	fb02 f303 	mul.w	r3, r2, r3
 801495a:	2b00      	cmp	r3, #0
 801495c:	d007      	beq.n	801496e <RegionCommonComputeRxWindowParameters+0xa6>
 801495e:	69bb      	ldr	r3, [r7, #24]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	68fa      	ldr	r2, [r7, #12]
 8014964:	fb02 f303 	mul.w	r3, r2, r3
 8014968:	3301      	adds	r3, #1
 801496a:	085b      	lsrs	r3, r3, #1
 801496c:	e005      	b.n	801497a <RegionCommonComputeRxWindowParameters+0xb2>
 801496e:	69bb      	ldr	r3, [r7, #24]
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	68fa      	ldr	r2, [r7, #12]
 8014974:	fb02 f303 	mul.w	r3, r2, r3
 8014978:	085b      	lsrs	r3, r3, #1
 801497a:	1acb      	subs	r3, r1, r3
 801497c:	683a      	ldr	r2, [r7, #0]
 801497e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014982:	fb01 f202 	mul.w	r2, r1, r2
 8014986:	1a9b      	subs	r3, r3, r2
 8014988:	2b00      	cmp	r3, #0
 801498a:	dd27      	ble.n	80149dc <RegionCommonComputeRxWindowParameters+0x114>
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	009b      	lsls	r3, r3, #2
 8014990:	4619      	mov	r1, r3
 8014992:	69bb      	ldr	r3, [r7, #24]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	68fa      	ldr	r2, [r7, #12]
 8014998:	fb02 f303 	mul.w	r3, r2, r3
 801499c:	2b00      	cmp	r3, #0
 801499e:	d007      	beq.n	80149b0 <RegionCommonComputeRxWindowParameters+0xe8>
 80149a0:	69bb      	ldr	r3, [r7, #24]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	68fa      	ldr	r2, [r7, #12]
 80149a6:	fb02 f303 	mul.w	r3, r2, r3
 80149aa:	3301      	adds	r3, #1
 80149ac:	085b      	lsrs	r3, r3, #1
 80149ae:	e005      	b.n	80149bc <RegionCommonComputeRxWindowParameters+0xf4>
 80149b0:	69bb      	ldr	r3, [r7, #24]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	68fa      	ldr	r2, [r7, #12]
 80149b6:	fb02 f303 	mul.w	r3, r2, r3
 80149ba:	085b      	lsrs	r3, r3, #1
 80149bc:	1acb      	subs	r3, r1, r3
 80149be:	683a      	ldr	r2, [r7, #0]
 80149c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80149c4:	fb01 f202 	mul.w	r2, r1, r2
 80149c8:	1a9b      	subs	r3, r3, r2
 80149ca:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 80149ce:	4a19      	ldr	r2, [pc, #100]	@ (8014a34 <RegionCommonComputeRxWindowParameters+0x16c>)
 80149d0:	fb82 1203 	smull	r1, r2, r2, r3
 80149d4:	1192      	asrs	r2, r2, #6
 80149d6:	17db      	asrs	r3, r3, #31
 80149d8:	1ad3      	subs	r3, r2, r3
 80149da:	e024      	b.n	8014a26 <RegionCommonComputeRxWindowParameters+0x15e>
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	009b      	lsls	r3, r3, #2
 80149e0:	4619      	mov	r1, r3
 80149e2:	69bb      	ldr	r3, [r7, #24]
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	68fa      	ldr	r2, [r7, #12]
 80149e8:	fb02 f303 	mul.w	r3, r2, r3
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d007      	beq.n	8014a00 <RegionCommonComputeRxWindowParameters+0x138>
 80149f0:	69bb      	ldr	r3, [r7, #24]
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	68fa      	ldr	r2, [r7, #12]
 80149f6:	fb02 f303 	mul.w	r3, r2, r3
 80149fa:	3301      	adds	r3, #1
 80149fc:	085b      	lsrs	r3, r3, #1
 80149fe:	e005      	b.n	8014a0c <RegionCommonComputeRxWindowParameters+0x144>
 8014a00:	69bb      	ldr	r3, [r7, #24]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	68fa      	ldr	r2, [r7, #12]
 8014a06:	fb02 f303 	mul.w	r3, r2, r3
 8014a0a:	085b      	lsrs	r3, r3, #1
 8014a0c:	1acb      	subs	r3, r1, r3
 8014a0e:	683a      	ldr	r2, [r7, #0]
 8014a10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014a14:	fb01 f202 	mul.w	r2, r1, r2
 8014a18:	1a9b      	subs	r3, r3, r2
 8014a1a:	4a06      	ldr	r2, [pc, #24]	@ (8014a34 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014a1c:	fb82 1203 	smull	r1, r2, r2, r3
 8014a20:	1192      	asrs	r2, r2, #6
 8014a22:	17db      	asrs	r3, r3, #31
 8014a24:	1ad3      	subs	r3, r2, r3
 8014a26:	69fa      	ldr	r2, [r7, #28]
 8014a28:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8014a2a:	bf00      	nop
 8014a2c:	3714      	adds	r7, #20
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	bc80      	pop	{r7}
 8014a32:	4770      	bx	lr
 8014a34:	10624dd3 	.word	0x10624dd3

08014a38 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b086      	sub	sp, #24
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	4603      	mov	r3, r0
 8014a40:	60b9      	str	r1, [r7, #8]
 8014a42:	607a      	str	r2, [r7, #4]
 8014a44:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014a46:	2300      	movs	r3, #0
 8014a48:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a4e:	005b      	lsls	r3, r3, #1
 8014a50:	4618      	mov	r0, r3
 8014a52:	f7ec f971 	bl	8000d38 <__aeabi_ui2f>
 8014a56:	4603      	mov	r3, r0
 8014a58:	4619      	mov	r1, r3
 8014a5a:	68b8      	ldr	r0, [r7, #8]
 8014a5c:	f7ec f8ba 	bl	8000bd4 <__aeabi_fsub>
 8014a60:	4603      	mov	r3, r0
 8014a62:	6879      	ldr	r1, [r7, #4]
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7ec f8b5 	bl	8000bd4 <__aeabi_fsub>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f7eb fd43 	bl	80004f8 <__aeabi_f2d>
 8014a72:	4602      	mov	r2, r0
 8014a74:	460b      	mov	r3, r1
 8014a76:	4610      	mov	r0, r2
 8014a78:	4619      	mov	r1, r3
 8014a7a:	f007 fb65 	bl	801c148 <floor>
 8014a7e:	4602      	mov	r2, r0
 8014a80:	460b      	mov	r3, r1
 8014a82:	4610      	mov	r0, r2
 8014a84:	4619      	mov	r1, r3
 8014a86:	f7ec f829 	bl	8000adc <__aeabi_d2iz>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8014a8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014a92:	4618      	mov	r0, r3
 8014a94:	3718      	adds	r7, #24
 8014a96:	46bd      	mov	sp, r7
 8014a98:	bd80      	pop	{r7, pc}

08014a9a <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8014a9a:	b590      	push	{r4, r7, lr}
 8014a9c:	b087      	sub	sp, #28
 8014a9e:	af00      	add	r7, sp, #0
 8014aa0:	60f8      	str	r0, [r7, #12]
 8014aa2:	60b9      	str	r1, [r7, #8]
 8014aa4:	607a      	str	r2, [r7, #4]
 8014aa6:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8014aac:	2300      	movs	r3, #0
 8014aae:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	757b      	strb	r3, [r7, #21]
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	753b      	strb	r3, [r7, #20]
 8014ab8:	e09c      	b.n	8014bf4 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014aba:	2300      	movs	r3, #0
 8014abc:	74fb      	strb	r3, [r7, #19]
 8014abe:	e08f      	b.n	8014be0 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	685a      	ldr	r2, [r3, #4]
 8014ac4:	7d3b      	ldrb	r3, [r7, #20]
 8014ac6:	005b      	lsls	r3, r3, #1
 8014ac8:	4413      	add	r3, r2
 8014aca:	881b      	ldrh	r3, [r3, #0]
 8014acc:	461a      	mov	r2, r3
 8014ace:	7cfb      	ldrb	r3, [r7, #19]
 8014ad0:	fa42 f303 	asr.w	r3, r2, r3
 8014ad4:	f003 0301 	and.w	r3, r3, #1
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d07e      	beq.n	8014bda <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	689a      	ldr	r2, [r3, #8]
 8014ae0:	7d79      	ldrb	r1, [r7, #21]
 8014ae2:	7cfb      	ldrb	r3, [r7, #19]
 8014ae4:	440b      	add	r3, r1
 8014ae6:	4619      	mov	r1, r3
 8014ae8:	460b      	mov	r3, r1
 8014aea:	005b      	lsls	r3, r3, #1
 8014aec:	440b      	add	r3, r1
 8014aee:	009b      	lsls	r3, r3, #2
 8014af0:	4413      	add	r3, r2
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d06b      	beq.n	8014bd0 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	781b      	ldrb	r3, [r3, #0]
 8014afc:	f083 0301 	eor.w	r3, r3, #1
 8014b00:	b2db      	uxtb	r3, r3
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d011      	beq.n	8014b2a <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d00d      	beq.n	8014b2a <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	695a      	ldr	r2, [r3, #20]
 8014b12:	7d3b      	ldrb	r3, [r7, #20]
 8014b14:	005b      	lsls	r3, r3, #1
 8014b16:	4413      	add	r3, r2
 8014b18:	881b      	ldrh	r3, [r3, #0]
 8014b1a:	461a      	mov	r2, r3
 8014b1c:	7cfb      	ldrb	r3, [r7, #19]
 8014b1e:	fa42 f303 	asr.w	r3, r2, r3
 8014b22:	f003 0301 	and.w	r3, r3, #1
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d054      	beq.n	8014bd4 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	785b      	ldrb	r3, [r3, #1]
 8014b2e:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	689a      	ldr	r2, [r3, #8]
 8014b34:	7d79      	ldrb	r1, [r7, #21]
 8014b36:	7cfb      	ldrb	r3, [r7, #19]
 8014b38:	440b      	add	r3, r1
 8014b3a:	4619      	mov	r1, r3
 8014b3c:	460b      	mov	r3, r1
 8014b3e:	005b      	lsls	r3, r3, #1
 8014b40:	440b      	add	r3, r1
 8014b42:	009b      	lsls	r3, r3, #2
 8014b44:	4413      	add	r3, r2
 8014b46:	7a1b      	ldrb	r3, [r3, #8]
 8014b48:	f343 0303 	sbfx	r3, r3, #0, #4
 8014b4c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014b4e:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	689a      	ldr	r2, [r3, #8]
 8014b54:	7d79      	ldrb	r1, [r7, #21]
 8014b56:	7cfb      	ldrb	r3, [r7, #19]
 8014b58:	440b      	add	r3, r1
 8014b5a:	4619      	mov	r1, r3
 8014b5c:	460b      	mov	r3, r1
 8014b5e:	005b      	lsls	r3, r3, #1
 8014b60:	440b      	add	r3, r1
 8014b62:	009b      	lsls	r3, r3, #2
 8014b64:	4413      	add	r3, r2
 8014b66:	7a1b      	ldrb	r3, [r3, #8]
 8014b68:	f343 1303 	sbfx	r3, r3, #4, #4
 8014b6c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014b6e:	461a      	mov	r2, r3
 8014b70:	4621      	mov	r1, r4
 8014b72:	f7ff fbe8 	bl	8014346 <RegionCommonValueInRange>
 8014b76:	4603      	mov	r3, r0
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d02d      	beq.n	8014bd8 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	68da      	ldr	r2, [r3, #12]
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	6899      	ldr	r1, [r3, #8]
 8014b84:	7d78      	ldrb	r0, [r7, #21]
 8014b86:	7cfb      	ldrb	r3, [r7, #19]
 8014b88:	4403      	add	r3, r0
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	005b      	lsls	r3, r3, #1
 8014b90:	4403      	add	r3, r0
 8014b92:	009b      	lsls	r3, r3, #2
 8014b94:	440b      	add	r3, r1
 8014b96:	7a5b      	ldrb	r3, [r3, #9]
 8014b98:	4619      	mov	r1, r3
 8014b9a:	460b      	mov	r3, r1
 8014b9c:	005b      	lsls	r3, r3, #1
 8014b9e:	440b      	add	r3, r1
 8014ba0:	00db      	lsls	r3, r3, #3
 8014ba2:	4413      	add	r3, r2
 8014ba4:	7d1b      	ldrb	r3, [r3, #20]
 8014ba6:	f083 0301 	eor.w	r3, r3, #1
 8014baa:	b2db      	uxtb	r3, r3
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d003      	beq.n	8014bb8 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8014bb0:	7dbb      	ldrb	r3, [r7, #22]
 8014bb2:	3301      	adds	r3, #1
 8014bb4:	75bb      	strb	r3, [r7, #22]
                    continue;
 8014bb6:	e010      	b.n	8014bda <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8014bb8:	7dfb      	ldrb	r3, [r7, #23]
 8014bba:	1c5a      	adds	r2, r3, #1
 8014bbc:	75fa      	strb	r2, [r7, #23]
 8014bbe:	461a      	mov	r2, r3
 8014bc0:	68bb      	ldr	r3, [r7, #8]
 8014bc2:	4413      	add	r3, r2
 8014bc4:	7d79      	ldrb	r1, [r7, #21]
 8014bc6:	7cfa      	ldrb	r2, [r7, #19]
 8014bc8:	440a      	add	r2, r1
 8014bca:	b2d2      	uxtb	r2, r2
 8014bcc:	701a      	strb	r2, [r3, #0]
 8014bce:	e004      	b.n	8014bda <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014bd0:	bf00      	nop
 8014bd2:	e002      	b.n	8014bda <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8014bd4:	bf00      	nop
 8014bd6:	e000      	b.n	8014bda <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014bd8:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8014bda:	7cfb      	ldrb	r3, [r7, #19]
 8014bdc:	3301      	adds	r3, #1
 8014bde:	74fb      	strb	r3, [r7, #19]
 8014be0:	7cfb      	ldrb	r3, [r7, #19]
 8014be2:	2b0f      	cmp	r3, #15
 8014be4:	f67f af6c 	bls.w	8014ac0 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014be8:	7d7b      	ldrb	r3, [r7, #21]
 8014bea:	3310      	adds	r3, #16
 8014bec:	757b      	strb	r3, [r7, #21]
 8014bee:	7d3b      	ldrb	r3, [r7, #20]
 8014bf0:	3301      	adds	r3, #1
 8014bf2:	753b      	strb	r3, [r7, #20]
 8014bf4:	7d7b      	ldrb	r3, [r7, #21]
 8014bf6:	b29a      	uxth	r2, r3
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	8a1b      	ldrh	r3, [r3, #16]
 8014bfc:	429a      	cmp	r2, r3
 8014bfe:	f4ff af5c 	bcc.w	8014aba <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	7dfa      	ldrb	r2, [r7, #23]
 8014c06:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	7dba      	ldrb	r2, [r7, #22]
 8014c0c:	701a      	strb	r2, [r3, #0]
}
 8014c0e:	bf00      	nop
 8014c10:	371c      	adds	r7, #28
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd90      	pop	{r4, r7, pc}

08014c16 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8014c16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c18:	b08b      	sub	sp, #44	@ 0x2c
 8014c1a:	af04      	add	r7, sp, #16
 8014c1c:	60f8      	str	r0, [r7, #12]
 8014c1e:	60b9      	str	r1, [r7, #8]
 8014c20:	607a      	str	r2, [r7, #4]
 8014c22:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	685b      	ldr	r3, [r3, #4]
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f006 ff37 	bl	801ba9c <UTIL_TIMER_GetElapsedTime>
 8014c2e:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	681a      	ldr	r2, [r3, #0]
 8014c34:	697b      	ldr	r3, [r7, #20]
 8014c36:	1ad2      	subs	r2, r2, r3
 8014c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c3a:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8014c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c3e:	2201      	movs	r2, #1
 8014c40:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8014c42:	683b      	ldr	r3, [r7, #0]
 8014c44:	2200      	movs	r2, #0
 8014c46:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	685b      	ldr	r3, [r3, #4]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d004      	beq.n	8014c5a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014c54:	697a      	ldr	r2, [r7, #20]
 8014c56:	429a      	cmp	r2, r3
 8014c58:	d32b      	bcc.n	8014cb2 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8014c5a:	68bb      	ldr	r3, [r7, #8]
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	69db      	ldr	r3, [r3, #28]
 8014c64:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014c6a:	68dd      	ldr	r5, [r3, #12]
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	7a5e      	ldrb	r6, [r3, #9]
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	f893 c008 	ldrb.w	ip, [r3, #8]
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	7d1b      	ldrb	r3, [r3, #20]
 8014c7a:	68fa      	ldr	r2, [r7, #12]
 8014c7c:	6992      	ldr	r2, [r2, #24]
 8014c7e:	9203      	str	r2, [sp, #12]
 8014c80:	68fa      	ldr	r2, [r7, #12]
 8014c82:	f10d 0e04 	add.w	lr, sp, #4
 8014c86:	320c      	adds	r2, #12
 8014c88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014c8c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014c90:	9300      	str	r3, [sp, #0]
 8014c92:	4663      	mov	r3, ip
 8014c94:	4632      	mov	r2, r6
 8014c96:	4629      	mov	r1, r5
 8014c98:	4620      	mov	r0, r4
 8014c9a:	f7ff fc25 	bl	80144e8 <RegionCommonUpdateBandTimeOff>
 8014c9e:	4602      	mov	r2, r0
 8014ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ca2:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	69d8      	ldr	r0, [r3, #28]
 8014ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014caa:	683a      	ldr	r2, [r7, #0]
 8014cac:	6879      	ldr	r1, [r7, #4]
 8014cae:	f7ff fef4 	bl	8014a9a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8014cb2:	683b      	ldr	r3, [r7, #0]
 8014cb4:	781b      	ldrb	r3, [r3, #0]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d004      	beq.n	8014cc4 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8014cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	e006      	b.n	8014cd2 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8014cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cc6:	781b      	ldrb	r3, [r3, #0]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d001      	beq.n	8014cd0 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8014ccc:	230b      	movs	r3, #11
 8014cce:	e000      	b.n	8014cd2 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8014cd0:	230c      	movs	r3, #12
    }
}
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	371c      	adds	r7, #28
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014cda <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8014cda:	b5b0      	push	{r4, r5, r7, lr}
 8014cdc:	b086      	sub	sp, #24
 8014cde:	af02      	add	r7, sp, #8
 8014ce0:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	781b      	ldrb	r3, [r3, #0]
 8014ce6:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f993 2000 	ldrsb.w	r2, [r3]
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	d103      	bne.n	8014d00 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014cfe:	e026      	b.n	8014d4e <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8014d00:	7bfb      	ldrb	r3, [r7, #15]
 8014d02:	3b01      	subs	r3, #1
 8014d04:	b2db      	uxtb	r3, r3
 8014d06:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014d0e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014d12:	429a      	cmp	r2, r3
 8014d14:	d019      	beq.n	8014d4a <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	78d8      	ldrb	r0, [r3, #3]
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	6859      	ldr	r1, [r3, #4]
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014d2a:	687a      	ldr	r2, [r7, #4]
 8014d2c:	6892      	ldr	r2, [r2, #8]
 8014d2e:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8014d32:	9201      	str	r2, [sp, #4]
 8014d34:	9300      	str	r3, [sp, #0]
 8014d36:	462b      	mov	r3, r5
 8014d38:	4622      	mov	r2, r4
 8014d3a:	f7ff fa92 	bl	8014262 <RegionCommonChanVerifyDr>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	f083 0301 	eor.w	r3, r3, #1
 8014d44:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d1da      	bne.n	8014d00 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8014d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8014d4e:	4618      	mov	r0, r3
 8014d50:	3710      	adds	r7, #16
 8014d52:	46bd      	mov	sp, r7
 8014d54:	bdb0      	pop	{r4, r5, r7, pc}

08014d56 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8014d56:	b480      	push	{r7}
 8014d58:	b083      	sub	sp, #12
 8014d5a:	af00      	add	r7, sp, #0
 8014d5c:	4603      	mov	r3, r0
 8014d5e:	460a      	mov	r2, r1
 8014d60:	71fb      	strb	r3, [r7, #7]
 8014d62:	4613      	mov	r3, r2
 8014d64:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8014d66:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014d6e:	4293      	cmp	r3, r2
 8014d70:	bfb8      	it	lt
 8014d72:	4613      	movlt	r3, r2
 8014d74:	b25b      	sxtb	r3, r3
}
 8014d76:	4618      	mov	r0, r3
 8014d78:	370c      	adds	r7, #12
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bc80      	pop	{r7}
 8014d7e:	4770      	bx	lr

08014d80 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8014d80:	b480      	push	{r7}
 8014d82:	b083      	sub	sp, #12
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
 8014d88:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	009b      	lsls	r3, r3, #2
 8014d8e:	683a      	ldr	r2, [r7, #0]
 8014d90:	4413      	add	r3, r2
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	4a07      	ldr	r2, [pc, #28]	@ (8014db4 <RegionCommonGetBandwidth+0x34>)
 8014d96:	4293      	cmp	r3, r2
 8014d98:	d004      	beq.n	8014da4 <RegionCommonGetBandwidth+0x24>
 8014d9a:	4a07      	ldr	r2, [pc, #28]	@ (8014db8 <RegionCommonGetBandwidth+0x38>)
 8014d9c:	4293      	cmp	r3, r2
 8014d9e:	d003      	beq.n	8014da8 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8014da0:	2300      	movs	r3, #0
 8014da2:	e002      	b.n	8014daa <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8014da4:	2301      	movs	r3, #1
 8014da6:	e000      	b.n	8014daa <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8014da8:	2302      	movs	r3, #2
    }
}
 8014daa:	4618      	mov	r0, r3
 8014dac:	370c      	adds	r7, #12
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bc80      	pop	{r7}
 8014db2:	4770      	bx	lr
 8014db4:	0003d090 	.word	0x0003d090
 8014db8:	0007a120 	.word	0x0007a120

08014dbc <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b086      	sub	sp, #24
 8014dc0:	af04      	add	r7, sp, #16
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	6039      	str	r1, [r7, #0]
 8014dc6:	71fb      	strb	r3, [r7, #7]
 8014dc8:	4613      	mov	r3, r2
 8014dca:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8014dcc:	79fb      	ldrb	r3, [r7, #7]
 8014dce:	2b05      	cmp	r3, #5
 8014dd0:	d810      	bhi.n	8014df4 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8014dd2:	79fb      	ldrb	r3, [r7, #7]
 8014dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8014e14 <RegionCommonRxConfigPrint+0x58>)
 8014dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014dda:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014dde:	9202      	str	r2, [sp, #8]
 8014de0:	683a      	ldr	r2, [r7, #0]
 8014de2:	9201      	str	r2, [sp, #4]
 8014de4:	9300      	str	r3, [sp, #0]
 8014de6:	4b0c      	ldr	r3, [pc, #48]	@ (8014e18 <RegionCommonRxConfigPrint+0x5c>)
 8014de8:	2201      	movs	r2, #1
 8014dea:	2100      	movs	r1, #0
 8014dec:	2002      	movs	r0, #2
 8014dee:	f006 ff33 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8014df2:	e00a      	b.n	8014e0a <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014df4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014df8:	9301      	str	r3, [sp, #4]
 8014dfa:	683b      	ldr	r3, [r7, #0]
 8014dfc:	9300      	str	r3, [sp, #0]
 8014dfe:	4b07      	ldr	r3, [pc, #28]	@ (8014e1c <RegionCommonRxConfigPrint+0x60>)
 8014e00:	2201      	movs	r2, #1
 8014e02:	2100      	movs	r1, #0
 8014e04:	2002      	movs	r0, #2
 8014e06:	f006 ff27 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
}
 8014e0a:	bf00      	nop
 8014e0c:	3708      	adds	r7, #8
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bd80      	pop	{r7, pc}
 8014e12:	bf00      	nop
 8014e14:	20000108 	.word	0x20000108
 8014e18:	0801d5d0 	.word	0x0801d5d0
 8014e1c:	0801d5f0 	.word	0x0801d5f0

08014e20 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b084      	sub	sp, #16
 8014e24:	af02      	add	r7, sp, #8
 8014e26:	6078      	str	r0, [r7, #4]
 8014e28:	460b      	mov	r3, r1
 8014e2a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014e30:	9301      	str	r3, [sp, #4]
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	9300      	str	r3, [sp, #0]
 8014e36:	4b05      	ldr	r3, [pc, #20]	@ (8014e4c <RegionCommonTxConfigPrint+0x2c>)
 8014e38:	2201      	movs	r2, #1
 8014e3a:	2100      	movs	r1, #0
 8014e3c:	2002      	movs	r0, #2
 8014e3e:	f006 ff0b 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
}
 8014e42:	bf00      	nop
 8014e44:	3708      	adds	r7, #8
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}
 8014e4a:	bf00      	nop
 8014e4c:	0801d60c 	.word	0x0801d60c

08014e50 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b082      	sub	sp, #8
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
 8014e58:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8014f10 <VerifyRfFreq+0xc0>)
 8014e5c:	6a1b      	ldr	r3, [r3, #32]
 8014e5e:	6878      	ldr	r0, [r7, #4]
 8014e60:	4798      	blx	r3
 8014e62:	4603      	mov	r3, r0
 8014e64:	f083 0301 	eor.w	r3, r3, #1
 8014e68:	b2db      	uxtb	r3, r3
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d001      	beq.n	8014e72 <VerifyRfFreq+0x22>
    {
        return false;
 8014e6e:	2300      	movs	r3, #0
 8014e70:	e04a      	b.n	8014f08 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	4a27      	ldr	r2, [pc, #156]	@ (8014f14 <VerifyRfFreq+0xc4>)
 8014e76:	4293      	cmp	r3, r2
 8014e78:	d307      	bcc.n	8014e8a <VerifyRfFreq+0x3a>
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	4a26      	ldr	r2, [pc, #152]	@ (8014f18 <VerifyRfFreq+0xc8>)
 8014e7e:	4293      	cmp	r3, r2
 8014e80:	d803      	bhi.n	8014e8a <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	2202      	movs	r2, #2
 8014e86:	701a      	strb	r2, [r3, #0]
 8014e88:	e03d      	b.n	8014f06 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	4a22      	ldr	r2, [pc, #136]	@ (8014f18 <VerifyRfFreq+0xc8>)
 8014e8e:	4293      	cmp	r3, r2
 8014e90:	d907      	bls.n	8014ea2 <VerifyRfFreq+0x52>
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	4a21      	ldr	r2, [pc, #132]	@ (8014f1c <VerifyRfFreq+0xcc>)
 8014e96:	4293      	cmp	r3, r2
 8014e98:	d803      	bhi.n	8014ea2 <VerifyRfFreq+0x52>
    {
        *band = 0;
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	701a      	strb	r2, [r3, #0]
 8014ea0:	e031      	b.n	8014f06 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8014f1c <VerifyRfFreq+0xcc>)
 8014ea6:	4293      	cmp	r3, r2
 8014ea8:	d907      	bls.n	8014eba <VerifyRfFreq+0x6a>
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	4a1c      	ldr	r2, [pc, #112]	@ (8014f20 <VerifyRfFreq+0xd0>)
 8014eae:	4293      	cmp	r3, r2
 8014eb0:	d803      	bhi.n	8014eba <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	2201      	movs	r2, #1
 8014eb6:	701a      	strb	r2, [r3, #0]
 8014eb8:	e025      	b.n	8014f06 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	4a19      	ldr	r2, [pc, #100]	@ (8014f24 <VerifyRfFreq+0xd4>)
 8014ebe:	4293      	cmp	r3, r2
 8014ec0:	d907      	bls.n	8014ed2 <VerifyRfFreq+0x82>
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	4a18      	ldr	r2, [pc, #96]	@ (8014f28 <VerifyRfFreq+0xd8>)
 8014ec6:	4293      	cmp	r3, r2
 8014ec8:	d803      	bhi.n	8014ed2 <VerifyRfFreq+0x82>
    {
        *band = 5;
 8014eca:	683b      	ldr	r3, [r7, #0]
 8014ecc:	2205      	movs	r2, #5
 8014ece:	701a      	strb	r2, [r3, #0]
 8014ed0:	e019      	b.n	8014f06 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	4a15      	ldr	r2, [pc, #84]	@ (8014f2c <VerifyRfFreq+0xdc>)
 8014ed6:	4293      	cmp	r3, r2
 8014ed8:	d907      	bls.n	8014eea <VerifyRfFreq+0x9a>
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	4a14      	ldr	r2, [pc, #80]	@ (8014f30 <VerifyRfFreq+0xe0>)
 8014ede:	4293      	cmp	r3, r2
 8014ee0:	d803      	bhi.n	8014eea <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	2203      	movs	r2, #3
 8014ee6:	701a      	strb	r2, [r3, #0]
 8014ee8:	e00d      	b.n	8014f06 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	4a11      	ldr	r2, [pc, #68]	@ (8014f34 <VerifyRfFreq+0xe4>)
 8014eee:	4293      	cmp	r3, r2
 8014ef0:	d307      	bcc.n	8014f02 <VerifyRfFreq+0xb2>
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	4a10      	ldr	r2, [pc, #64]	@ (8014f38 <VerifyRfFreq+0xe8>)
 8014ef6:	4293      	cmp	r3, r2
 8014ef8:	d803      	bhi.n	8014f02 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8014efa:	683b      	ldr	r3, [r7, #0]
 8014efc:	2204      	movs	r2, #4
 8014efe:	701a      	strb	r2, [r3, #0]
 8014f00:	e001      	b.n	8014f06 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8014f02:	2300      	movs	r3, #0
 8014f04:	e000      	b.n	8014f08 <VerifyRfFreq+0xb8>
    }
    return true;
 8014f06:	2301      	movs	r3, #1
}
 8014f08:	4618      	mov	r0, r3
 8014f0a:	3708      	adds	r7, #8
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}
 8014f10:	0801dc9c 	.word	0x0801dc9c
 8014f14:	337055c0 	.word	0x337055c0
 8014f18:	338eda3f 	.word	0x338eda3f
 8014f1c:	33bca100 	.word	0x33bca100
 8014f20:	33c5c8c0 	.word	0x33c5c8c0
 8014f24:	33c74f5f 	.word	0x33c74f5f
 8014f28:	33cef080 	.word	0x33cef080
 8014f2c:	33d1fdbf 	.word	0x33d1fdbf
 8014f30:	33d5ce50 	.word	0x33d5ce50
 8014f34:	33d691a0 	.word	0x33d691a0
 8014f38:	33db2580 	.word	0x33db2580

08014f3c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8014f3c:	b590      	push	{r4, r7, lr}
 8014f3e:	b08b      	sub	sp, #44	@ 0x2c
 8014f40:	af04      	add	r7, sp, #16
 8014f42:	4603      	mov	r3, r0
 8014f44:	460a      	mov	r2, r1
 8014f46:	71fb      	strb	r3, [r7, #7]
 8014f48:	4613      	mov	r3, r2
 8014f4a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8014f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f50:	4a1f      	ldr	r2, [pc, #124]	@ (8014fd0 <GetTimeOnAir+0x94>)
 8014f52:	5cd3      	ldrb	r3, [r2, r3]
 8014f54:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8014f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f5a:	491e      	ldr	r1, [pc, #120]	@ (8014fd4 <GetTimeOnAir+0x98>)
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	f7ff ff0f 	bl	8014d80 <RegionCommonGetBandwidth>
 8014f62:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8014f64:	2300      	movs	r3, #0
 8014f66:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8014f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f6c:	2b07      	cmp	r3, #7
 8014f6e:	d118      	bne.n	8014fa2 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8014f70:	4b19      	ldr	r3, [pc, #100]	@ (8014fd8 <GetTimeOnAir+0x9c>)
 8014f72:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014f74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014f78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014f7c:	fb02 f303 	mul.w	r3, r2, r3
 8014f80:	4619      	mov	r1, r3
 8014f82:	88bb      	ldrh	r3, [r7, #4]
 8014f84:	b2db      	uxtb	r3, r3
 8014f86:	2201      	movs	r2, #1
 8014f88:	9203      	str	r2, [sp, #12]
 8014f8a:	9302      	str	r3, [sp, #8]
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	9301      	str	r3, [sp, #4]
 8014f90:	2305      	movs	r3, #5
 8014f92:	9300      	str	r3, [sp, #0]
 8014f94:	2300      	movs	r3, #0
 8014f96:	460a      	mov	r2, r1
 8014f98:	68f9      	ldr	r1, [r7, #12]
 8014f9a:	2000      	movs	r0, #0
 8014f9c:	47a0      	blx	r4
 8014f9e:	6178      	str	r0, [r7, #20]
 8014fa0:	e011      	b.n	8014fc6 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8014fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8014fd8 <GetTimeOnAir+0x9c>)
 8014fa4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014fa6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014faa:	88bb      	ldrh	r3, [r7, #4]
 8014fac:	b2db      	uxtb	r3, r3
 8014fae:	2101      	movs	r1, #1
 8014fb0:	9103      	str	r1, [sp, #12]
 8014fb2:	9302      	str	r3, [sp, #8]
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	9301      	str	r3, [sp, #4]
 8014fb8:	2308      	movs	r3, #8
 8014fba:	9300      	str	r3, [sp, #0]
 8014fbc:	2301      	movs	r3, #1
 8014fbe:	68f9      	ldr	r1, [r7, #12]
 8014fc0:	2001      	movs	r0, #1
 8014fc2:	47a0      	blx	r4
 8014fc4:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8014fc6:	697b      	ldr	r3, [r7, #20]
}
 8014fc8:	4618      	mov	r0, r3
 8014fca:	371c      	adds	r7, #28
 8014fcc:	46bd      	mov	sp, r7
 8014fce:	bd90      	pop	{r4, r7, pc}
 8014fd0:	0801dbe0 	.word	0x0801dbe0
 8014fd4:	0801dbe8 	.word	0x0801dbe8
 8014fd8:	0801dc9c 	.word	0x0801dc9c

08014fdc <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b088      	sub	sp, #32
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	781b      	ldrb	r3, [r3, #0]
 8014fec:	3b01      	subs	r3, #1
 8014fee:	2b38      	cmp	r3, #56	@ 0x38
 8014ff0:	f200 8128 	bhi.w	8015244 <RegionEU868GetPhyParam+0x268>
 8014ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8014ffc <RegionEU868GetPhyParam+0x20>)
 8014ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ffa:	bf00      	nop
 8014ffc:	080150e1 	.word	0x080150e1
 8015000:	080150e7 	.word	0x080150e7
 8015004:	08015245 	.word	0x08015245
 8015008:	08015245 	.word	0x08015245
 801500c:	08015245 	.word	0x08015245
 8015010:	080150ed 	.word	0x080150ed
 8015014:	08015245 	.word	0x08015245
 8015018:	08015127 	.word	0x08015127
 801501c:	08015245 	.word	0x08015245
 8015020:	0801512d 	.word	0x0801512d
 8015024:	08015133 	.word	0x08015133
 8015028:	08015139 	.word	0x08015139
 801502c:	0801513f 	.word	0x0801513f
 8015030:	0801514f 	.word	0x0801514f
 8015034:	0801515f 	.word	0x0801515f
 8015038:	08015165 	.word	0x08015165
 801503c:	0801516d 	.word	0x0801516d
 8015040:	08015175 	.word	0x08015175
 8015044:	0801517d 	.word	0x0801517d
 8015048:	08015185 	.word	0x08015185
 801504c:	0801518d 	.word	0x0801518d
 8015050:	08015195 	.word	0x08015195
 8015054:	080151a9 	.word	0x080151a9
 8015058:	080151af 	.word	0x080151af
 801505c:	080151b5 	.word	0x080151b5
 8015060:	080151bb 	.word	0x080151bb
 8015064:	080151c7 	.word	0x080151c7
 8015068:	080151d3 	.word	0x080151d3
 801506c:	080151d9 	.word	0x080151d9
 8015070:	080151e1 	.word	0x080151e1
 8015074:	080151e7 	.word	0x080151e7
 8015078:	080151ed 	.word	0x080151ed
 801507c:	080151f5 	.word	0x080151f5
 8015080:	080150f3 	.word	0x080150f3
 8015084:	08015245 	.word	0x08015245
 8015088:	08015245 	.word	0x08015245
 801508c:	08015245 	.word	0x08015245
 8015090:	08015245 	.word	0x08015245
 8015094:	08015245 	.word	0x08015245
 8015098:	08015245 	.word	0x08015245
 801509c:	08015245 	.word	0x08015245
 80150a0:	08015245 	.word	0x08015245
 80150a4:	08015245 	.word	0x08015245
 80150a8:	08015245 	.word	0x08015245
 80150ac:	08015245 	.word	0x08015245
 80150b0:	08015245 	.word	0x08015245
 80150b4:	08015245 	.word	0x08015245
 80150b8:	080151fb 	.word	0x080151fb
 80150bc:	08015201 	.word	0x08015201
 80150c0:	0801520f 	.word	0x0801520f
 80150c4:	08015245 	.word	0x08015245
 80150c8:	08015245 	.word	0x08015245
 80150cc:	08015215 	.word	0x08015215
 80150d0:	0801521b 	.word	0x0801521b
 80150d4:	08015245 	.word	0x08015245
 80150d8:	08015221 	.word	0x08015221
 80150dc:	08015231 	.word	0x08015231
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80150e0:	2300      	movs	r3, #0
 80150e2:	61bb      	str	r3, [r7, #24]
            break;
 80150e4:	e0af      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80150e6:	2300      	movs	r3, #0
 80150e8:	61bb      	str	r3, [r7, #24]
            break;
 80150ea:	e0ac      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80150ec:	2300      	movs	r3, #0
 80150ee:	61bb      	str	r3, [r7, #24]
            break;
 80150f0:	e0a9      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80150f8:	733b      	strb	r3, [r7, #12]
 80150fa:	2307      	movs	r3, #7
 80150fc:	737b      	strb	r3, [r7, #13]
 80150fe:	2300      	movs	r3, #0
 8015100:	73bb      	strb	r3, [r7, #14]
 8015102:	2310      	movs	r3, #16
 8015104:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8015106:	4b53      	ldr	r3, [pc, #332]	@ (8015254 <RegionEU868GetPhyParam+0x278>)
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801510e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015110:	4b50      	ldr	r3, [pc, #320]	@ (8015254 <RegionEU868GetPhyParam+0x278>)
 8015112:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015114:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8015116:	f107 030c 	add.w	r3, r7, #12
 801511a:	4618      	mov	r0, r3
 801511c:	f7ff fddd 	bl	8014cda <RegionCommonGetNextLowerTxDr>
 8015120:	4603      	mov	r3, r0
 8015122:	61bb      	str	r3, [r7, #24]
            break;
 8015124:	e08f      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8015126:	2300      	movs	r3, #0
 8015128:	61bb      	str	r3, [r7, #24]
            break;
 801512a:	e08c      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 801512c:	2300      	movs	r3, #0
 801512e:	61bb      	str	r3, [r7, #24]
            break;
 8015130:	e089      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015132:	2340      	movs	r3, #64	@ 0x40
 8015134:	61bb      	str	r3, [r7, #24]
            break;
 8015136:	e086      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8015138:	2320      	movs	r3, #32
 801513a:	61bb      	str	r3, [r7, #24]
            break;
 801513c:	e083      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015144:	461a      	mov	r2, r3
 8015146:	4b44      	ldr	r3, [pc, #272]	@ (8015258 <RegionEU868GetPhyParam+0x27c>)
 8015148:	5c9b      	ldrb	r3, [r3, r2]
 801514a:	61bb      	str	r3, [r7, #24]
            break;
 801514c:	e07b      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015154:	461a      	mov	r2, r3
 8015156:	4b41      	ldr	r3, [pc, #260]	@ (801525c <RegionEU868GetPhyParam+0x280>)
 8015158:	5c9b      	ldrb	r3, [r3, r2]
 801515a:	61bb      	str	r3, [r7, #24]
            break;
 801515c:	e073      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801515e:	2301      	movs	r3, #1
 8015160:	61bb      	str	r3, [r7, #24]
            break;
 8015162:	e070      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8015164:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8015168:	61bb      	str	r3, [r7, #24]
            break;
 801516a:	e06c      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801516c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015170:	61bb      	str	r3, [r7, #24]
            break;
 8015172:	e068      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8015174:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015178:	61bb      	str	r3, [r7, #24]
            break;
 801517a:	e064      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801517c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8015180:	61bb      	str	r3, [r7, #24]
            break;
 8015182:	e060      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8015184:	f241 7370 	movw	r3, #6000	@ 0x1770
 8015188:	61bb      	str	r3, [r7, #24]
            break;
 801518a:	e05c      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801518c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8015190:	61bb      	str	r3, [r7, #24]
            break;
 8015192:	e058      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8015194:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015198:	4831      	ldr	r0, [pc, #196]	@ (8015260 <RegionEU868GetPhyParam+0x284>)
 801519a:	f002 fae3 	bl	8017764 <randr>
 801519e:	4603      	mov	r3, r0
 80151a0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80151a4:	61bb      	str	r3, [r7, #24]
            break;
 80151a6:	e04e      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80151a8:	2300      	movs	r3, #0
 80151aa:	61bb      	str	r3, [r7, #24]
            break;
 80151ac:	e04b      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80151ae:	4b2d      	ldr	r3, [pc, #180]	@ (8015264 <RegionEU868GetPhyParam+0x288>)
 80151b0:	61bb      	str	r3, [r7, #24]
            break;
 80151b2:	e048      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80151b4:	2300      	movs	r3, #0
 80151b6:	61bb      	str	r3, [r7, #24]
            break;
 80151b8:	e045      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80151ba:	4b26      	ldr	r3, [pc, #152]	@ (8015254 <RegionEU868GetPhyParam+0x278>)
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80151c2:	61bb      	str	r3, [r7, #24]
            break;
 80151c4:	e03f      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80151c6:	4b23      	ldr	r3, [pc, #140]	@ (8015254 <RegionEU868GetPhyParam+0x278>)
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 80151ce:	61bb      	str	r3, [r7, #24]
            break;
 80151d0:	e039      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80151d2:	2310      	movs	r3, #16
 80151d4:	61bb      	str	r3, [r7, #24]
            break;
 80151d6:	e036      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80151d8:	4b1e      	ldr	r3, [pc, #120]	@ (8015254 <RegionEU868GetPhyParam+0x278>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	61bb      	str	r3, [r7, #24]
            break;
 80151de:	e032      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 80151e0:	2300      	movs	r3, #0
 80151e2:	61bb      	str	r3, [r7, #24]
            break;
 80151e4:	e02f      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80151e6:	2300      	movs	r3, #0
 80151e8:	61bb      	str	r3, [r7, #24]
            break;
 80151ea:	e02c      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80151ec:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80151f0:	61bb      	str	r3, [r7, #24]
            break;
 80151f2:	e028      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80151f4:	4b1c      	ldr	r3, [pc, #112]	@ (8015268 <RegionEU868GetPhyParam+0x28c>)
 80151f6:	61bb      	str	r3, [r7, #24]
            break;
 80151f8:	e025      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80151fa:	4b1a      	ldr	r3, [pc, #104]	@ (8015264 <RegionEU868GetPhyParam+0x288>)
 80151fc:	61bb      	str	r3, [r7, #24]
            break;
 80151fe:	e022      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8015200:	2311      	movs	r3, #17
 8015202:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8015204:	2302      	movs	r3, #2
 8015206:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8015208:	2300      	movs	r3, #0
 801520a:	76bb      	strb	r3, [r7, #26]
            break;
 801520c:	e01b      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801520e:	2303      	movs	r3, #3
 8015210:	61bb      	str	r3, [r7, #24]
            break;
 8015212:	e018      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8015214:	4b13      	ldr	r3, [pc, #76]	@ (8015264 <RegionEU868GetPhyParam+0x288>)
 8015216:	61bb      	str	r3, [r7, #24]
            break;
 8015218:	e015      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801521a:	2303      	movs	r3, #3
 801521c:	61bb      	str	r3, [r7, #24]
            break;
 801521e:	e012      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015226:	461a      	mov	r2, r3
 8015228:	4b10      	ldr	r3, [pc, #64]	@ (801526c <RegionEU868GetPhyParam+0x290>)
 801522a:	5c9b      	ldrb	r3, [r3, r2]
 801522c:	61bb      	str	r3, [r7, #24]
            break;
 801522e:	e00a      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015236:	490e      	ldr	r1, [pc, #56]	@ (8015270 <RegionEU868GetPhyParam+0x294>)
 8015238:	4618      	mov	r0, r3
 801523a:	f7ff fda1 	bl	8014d80 <RegionCommonGetBandwidth>
 801523e:	4603      	mov	r3, r0
 8015240:	61bb      	str	r3, [r7, #24]
            break;
 8015242:	e000      	b.n	8015246 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8015244:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8015246:	69bb      	ldr	r3, [r7, #24]
 8015248:	61fb      	str	r3, [r7, #28]
 801524a:	69fb      	ldr	r3, [r7, #28]
}
 801524c:	4618      	mov	r0, r3
 801524e:	3720      	adds	r7, #32
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}
 8015254:	2000138c 	.word	0x2000138c
 8015258:	0801dc08 	.word	0x0801dc08
 801525c:	0801dc10 	.word	0x0801dc10
 8015260:	fffffc18 	.word	0xfffffc18
 8015264:	33d3e608 	.word	0x33d3e608
 8015268:	4009999a 	.word	0x4009999a
 801526c:	0801dbe0 	.word	0x0801dbe0
 8015270:	0801dbe8 	.word	0x0801dbe8

08015274 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015274:	b590      	push	{r4, r7, lr}
 8015276:	b085      	sub	sp, #20
 8015278:	af02      	add	r7, sp, #8
 801527a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801527c:	4b11      	ldr	r3, [pc, #68]	@ (80152c4 <RegionEU868SetBandTxDone+0x50>)
 801527e:	681a      	ldr	r2, [r3, #0]
 8015280:	4b11      	ldr	r3, [pc, #68]	@ (80152c8 <RegionEU868SetBandTxDone+0x54>)
 8015282:	6819      	ldr	r1, [r3, #0]
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	781b      	ldrb	r3, [r3, #0]
 8015288:	4618      	mov	r0, r3
 801528a:	4603      	mov	r3, r0
 801528c:	005b      	lsls	r3, r3, #1
 801528e:	4403      	add	r3, r0
 8015290:	009b      	lsls	r3, r3, #2
 8015292:	440b      	add	r3, r1
 8015294:	3309      	adds	r3, #9
 8015296:	781b      	ldrb	r3, [r3, #0]
 8015298:	4619      	mov	r1, r3
 801529a:	460b      	mov	r3, r1
 801529c:	005b      	lsls	r3, r3, #1
 801529e:	440b      	add	r3, r1
 80152a0:	00db      	lsls	r3, r3, #3
 80152a2:	18d0      	adds	r0, r2, r3
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	6899      	ldr	r1, [r3, #8]
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	785c      	ldrb	r4, [r3, #1]
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	691a      	ldr	r2, [r3, #16]
 80152b0:	9200      	str	r2, [sp, #0]
 80152b2:	68db      	ldr	r3, [r3, #12]
 80152b4:	4622      	mov	r2, r4
 80152b6:	f7ff f8e9 	bl	801448c <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 80152ba:	bf00      	nop
 80152bc:	370c      	adds	r7, #12
 80152be:	46bd      	mov	sp, r7
 80152c0:	bd90      	pop	{r4, r7, pc}
 80152c2:	bf00      	nop
 80152c4:	20001388 	.word	0x20001388
 80152c8:	2000138c 	.word	0x2000138c

080152cc <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b0b0      	sub	sp, #192	@ 0xc0
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80152d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80152d8:	2290      	movs	r2, #144	@ 0x90
 80152da:	2100      	movs	r1, #0
 80152dc:	4618      	mov	r0, r3
 80152de:	f007 f9c5 	bl	801c66c <memset>
 80152e2:	2364      	movs	r3, #100	@ 0x64
 80152e4:	863b      	strh	r3, [r7, #48]	@ 0x30
 80152e6:	2364      	movs	r3, #100	@ 0x64
 80152e8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80152ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80152f0:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80152f4:	230a      	movs	r3, #10
 80152f6:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 80152fa:	2364      	movs	r3, #100	@ 0x64
 80152fc:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8015300:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015304:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	7a1b      	ldrb	r3, [r3, #8]
 801530c:	2b02      	cmp	r3, #2
 801530e:	d05e      	beq.n	80153ce <RegionEU868InitDefaults+0x102>
 8015310:	2b02      	cmp	r3, #2
 8015312:	dc6b      	bgt.n	80153ec <RegionEU868InitDefaults+0x120>
 8015314:	2b00      	cmp	r3, #0
 8015316:	d002      	beq.n	801531e <RegionEU868InitDefaults+0x52>
 8015318:	2b01      	cmp	r3, #1
 801531a:	d03f      	beq.n	801539c <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 801531c:	e066      	b.n	80153ec <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d063      	beq.n	80153ee <RegionEU868InitDefaults+0x122>
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	685b      	ldr	r3, [r3, #4]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d05f      	beq.n	80153ee <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	4a30      	ldr	r2, [pc, #192]	@ (80153f4 <RegionEU868InitDefaults+0x128>)
 8015334:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	685b      	ldr	r3, [r3, #4]
 801533a:	4a2f      	ldr	r2, [pc, #188]	@ (80153f8 <RegionEU868InitDefaults+0x12c>)
 801533c:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801533e:	4b2d      	ldr	r3, [pc, #180]	@ (80153f4 <RegionEU868InitDefaults+0x128>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	4618      	mov	r0, r3
 8015344:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015348:	2290      	movs	r2, #144	@ 0x90
 801534a:	4619      	mov	r1, r3
 801534c:	f002 fa21 	bl	8017792 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8015350:	4b29      	ldr	r3, [pc, #164]	@ (80153f8 <RegionEU868InitDefaults+0x12c>)
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	4a29      	ldr	r2, [pc, #164]	@ (80153fc <RegionEU868InitDefaults+0x130>)
 8015356:	ca07      	ldmia	r2, {r0, r1, r2}
 8015358:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 801535c:	4b26      	ldr	r3, [pc, #152]	@ (80153f8 <RegionEU868InitDefaults+0x12c>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	4a27      	ldr	r2, [pc, #156]	@ (8015400 <RegionEU868InitDefaults+0x134>)
 8015362:	330c      	adds	r3, #12
 8015364:	ca07      	ldmia	r2, {r0, r1, r2}
 8015366:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 801536a:	4b23      	ldr	r3, [pc, #140]	@ (80153f8 <RegionEU868InitDefaults+0x12c>)
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	4a25      	ldr	r2, [pc, #148]	@ (8015404 <RegionEU868InitDefaults+0x138>)
 8015370:	3318      	adds	r3, #24
 8015372:	ca07      	ldmia	r2, {r0, r1, r2}
 8015374:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8015378:	4b1f      	ldr	r3, [pc, #124]	@ (80153f8 <RegionEU868InitDefaults+0x12c>)
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	2207      	movs	r2, #7
 801537e:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015382:	4b1d      	ldr	r3, [pc, #116]	@ (80153f8 <RegionEU868InitDefaults+0x12c>)
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 801538a:	4b1b      	ldr	r3, [pc, #108]	@ (80153f8 <RegionEU868InitDefaults+0x12c>)
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8015392:	2201      	movs	r2, #1
 8015394:	4619      	mov	r1, r3
 8015396:	f7ff f853 	bl	8014440 <RegionCommonChanMaskCopy>
 801539a:	e028      	b.n	80153ee <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801539c:	4b16      	ldr	r3, [pc, #88]	@ (80153f8 <RegionEU868InitDefaults+0x12c>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	2200      	movs	r2, #0
 80153a2:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80153a4:	4b14      	ldr	r3, [pc, #80]	@ (80153f8 <RegionEU868InitDefaults+0x12c>)
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	2200      	movs	r2, #0
 80153aa:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80153ac:	4b12      	ldr	r3, [pc, #72]	@ (80153f8 <RegionEU868InitDefaults+0x12c>)
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	2200      	movs	r2, #0
 80153b2:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80153b4:	4b10      	ldr	r3, [pc, #64]	@ (80153f8 <RegionEU868InitDefaults+0x12c>)
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 80153bc:	4b0e      	ldr	r3, [pc, #56]	@ (80153f8 <RegionEU868InitDefaults+0x12c>)
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 80153c4:	2201      	movs	r2, #1
 80153c6:	4619      	mov	r1, r3
 80153c8:	f7ff f83a 	bl	8014440 <RegionCommonChanMaskCopy>
            break;
 80153cc:	e00f      	b.n	80153ee <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80153ce:	4b0a      	ldr	r3, [pc, #40]	@ (80153f8 <RegionEU868InitDefaults+0x12c>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	@ 0x480
 80153d6:	4b08      	ldr	r3, [pc, #32]	@ (80153f8 <RegionEU868InitDefaults+0x12c>)
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	@ 0x48c
 80153de:	4b06      	ldr	r3, [pc, #24]	@ (80153f8 <RegionEU868InitDefaults+0x12c>)
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	430a      	orrs	r2, r1
 80153e4:	b292      	uxth	r2, r2
 80153e6:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
            break;
 80153ea:	e000      	b.n	80153ee <RegionEU868InitDefaults+0x122>
            break;
 80153ec:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80153ee:	37c0      	adds	r7, #192	@ 0xc0
 80153f0:	46bd      	mov	sp, r7
 80153f2:	bd80      	pop	{r7, pc}
 80153f4:	20001388 	.word	0x20001388
 80153f8:	2000138c 	.word	0x2000138c
 80153fc:	0801d628 	.word	0x0801d628
 8015400:	0801d634 	.word	0x0801d634
 8015404:	0801d640 	.word	0x0801d640

08015408 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015408:	b580      	push	{r7, lr}
 801540a:	b084      	sub	sp, #16
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
 8015410:	460b      	mov	r3, r1
 8015412:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8015414:	78fb      	ldrb	r3, [r7, #3]
 8015416:	2b0f      	cmp	r3, #15
 8015418:	d86c      	bhi.n	80154f4 <RegionEU868Verify+0xec>
 801541a:	a201      	add	r2, pc, #4	@ (adr r2, 8015420 <RegionEU868Verify+0x18>)
 801541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015420:	08015461 	.word	0x08015461
 8015424:	080154f5 	.word	0x080154f5
 8015428:	080154f5 	.word	0x080154f5
 801542c:	080154f5 	.word	0x080154f5
 8015430:	080154f5 	.word	0x080154f5
 8015434:	08015479 	.word	0x08015479
 8015438:	08015497 	.word	0x08015497
 801543c:	080154b5 	.word	0x080154b5
 8015440:	080154f5 	.word	0x080154f5
 8015444:	080154d3 	.word	0x080154d3
 8015448:	080154d3 	.word	0x080154d3
 801544c:	080154f5 	.word	0x080154f5
 8015450:	080154f5 	.word	0x080154f5
 8015454:	080154f5 	.word	0x080154f5
 8015458:	080154f5 	.word	0x080154f5
 801545c:	080154f1 	.word	0x080154f1
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8015460:	2300      	movs	r3, #0
 8015462:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	f107 020f 	add.w	r2, r7, #15
 801546c:	4611      	mov	r1, r2
 801546e:	4618      	mov	r0, r3
 8015470:	f7ff fcee 	bl	8014e50 <VerifyRfFreq>
 8015474:	4603      	mov	r3, r0
 8015476:	e03e      	b.n	80154f6 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	f993 3000 	ldrsb.w	r3, [r3]
 801547e:	2207      	movs	r2, #7
 8015480:	2100      	movs	r1, #0
 8015482:	4618      	mov	r0, r3
 8015484:	f7fe ff5f 	bl	8014346 <RegionCommonValueInRange>
 8015488:	4603      	mov	r3, r0
 801548a:	2b00      	cmp	r3, #0
 801548c:	bf14      	ite	ne
 801548e:	2301      	movne	r3, #1
 8015490:	2300      	moveq	r3, #0
 8015492:	b2db      	uxtb	r3, r3
 8015494:	e02f      	b.n	80154f6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	f993 3000 	ldrsb.w	r3, [r3]
 801549c:	2205      	movs	r2, #5
 801549e:	2100      	movs	r1, #0
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7fe ff50 	bl	8014346 <RegionCommonValueInRange>
 80154a6:	4603      	mov	r3, r0
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	bf14      	ite	ne
 80154ac:	2301      	movne	r3, #1
 80154ae:	2300      	moveq	r3, #0
 80154b0:	b2db      	uxtb	r3, r3
 80154b2:	e020      	b.n	80154f6 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	f993 3000 	ldrsb.w	r3, [r3]
 80154ba:	2207      	movs	r2, #7
 80154bc:	2100      	movs	r1, #0
 80154be:	4618      	mov	r0, r3
 80154c0:	f7fe ff41 	bl	8014346 <RegionCommonValueInRange>
 80154c4:	4603      	mov	r3, r0
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	bf14      	ite	ne
 80154ca:	2301      	movne	r3, #1
 80154cc:	2300      	moveq	r3, #0
 80154ce:	b2db      	uxtb	r3, r3
 80154d0:	e011      	b.n	80154f6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	f993 3000 	ldrsb.w	r3, [r3]
 80154d8:	2207      	movs	r2, #7
 80154da:	2100      	movs	r1, #0
 80154dc:	4618      	mov	r0, r3
 80154de:	f7fe ff32 	bl	8014346 <RegionCommonValueInRange>
 80154e2:	4603      	mov	r3, r0
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	bf14      	ite	ne
 80154e8:	2301      	movne	r3, #1
 80154ea:	2300      	moveq	r3, #0
 80154ec:	b2db      	uxtb	r3, r3
 80154ee:	e002      	b.n	80154f6 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 80154f0:	2301      	movs	r3, #1
 80154f2:	e000      	b.n	80154f6 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 80154f4:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 80154f6:	4618      	mov	r0, r3
 80154f8:	3710      	adds	r7, #16
 80154fa:	46bd      	mov	sp, r7
 80154fc:	bd80      	pop	{r7, pc}
 80154fe:	bf00      	nop

08015500 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b08a      	sub	sp, #40	@ 0x28
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015508:	2350      	movs	r3, #80	@ 0x50
 801550a:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	791b      	ldrb	r3, [r3, #4]
 8015512:	2b10      	cmp	r3, #16
 8015514:	d162      	bne.n	80155dc <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	330f      	adds	r3, #15
 801551c:	781b      	ldrb	r3, [r3, #0]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d15e      	bne.n	80155e0 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015522:	2300      	movs	r3, #0
 8015524:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015528:	2303      	movs	r3, #3
 801552a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801552e:	e050      	b.n	80155d2 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8015530:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015534:	2b07      	cmp	r3, #7
 8015536:	d824      	bhi.n	8015582 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681a      	ldr	r2, [r3, #0]
 801553c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015540:	4413      	add	r3, r2
 8015542:	781b      	ldrb	r3, [r3, #0]
 8015544:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8015546:	69ba      	ldr	r2, [r7, #24]
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	6819      	ldr	r1, [r3, #0]
 801554c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015550:	3301      	adds	r3, #1
 8015552:	440b      	add	r3, r1
 8015554:	781b      	ldrb	r3, [r3, #0]
 8015556:	021b      	lsls	r3, r3, #8
 8015558:	4313      	orrs	r3, r2
 801555a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801555c:	69ba      	ldr	r2, [r7, #24]
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	6819      	ldr	r1, [r3, #0]
 8015562:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015566:	3302      	adds	r3, #2
 8015568:	440b      	add	r3, r1
 801556a:	781b      	ldrb	r3, [r3, #0]
 801556c:	041b      	lsls	r3, r3, #16
 801556e:	4313      	orrs	r3, r2
 8015570:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8015572:	69bb      	ldr	r3, [r7, #24]
 8015574:	2264      	movs	r2, #100	@ 0x64
 8015576:	fb02 f303 	mul.w	r3, r2, r3
 801557a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801557c:	2300      	movs	r3, #0
 801557e:	61fb      	str	r3, [r7, #28]
 8015580:	e006      	b.n	8015590 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8015582:	2300      	movs	r3, #0
 8015584:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8015586:	2300      	movs	r3, #0
 8015588:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 801558c:	2300      	movs	r3, #0
 801558e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8015590:	69bb      	ldr	r3, [r7, #24]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d00b      	beq.n	80155ae <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8015596:	f107 0318 	add.w	r3, r7, #24
 801559a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 801559c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80155a0:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80155a2:	f107 0310 	add.w	r3, r7, #16
 80155a6:	4618      	mov	r0, r3
 80155a8:	f000 fd14 	bl	8015fd4 <RegionEU868ChannelAdd>
 80155ac:	e007      	b.n	80155be <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80155ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80155b2:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80155b4:	f107 030c 	add.w	r3, r7, #12
 80155b8:	4618      	mov	r0, r3
 80155ba:	f000 fdad 	bl	8016118 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80155be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155c2:	3303      	adds	r3, #3
 80155c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80155c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80155cc:	3301      	adds	r3, #1
 80155ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80155d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80155d6:	2b0f      	cmp	r3, #15
 80155d8:	d9aa      	bls.n	8015530 <RegionEU868ApplyCFList+0x30>
 80155da:	e002      	b.n	80155e2 <RegionEU868ApplyCFList+0xe2>
        return;
 80155dc:	bf00      	nop
 80155de:	e000      	b.n	80155e2 <RegionEU868ApplyCFList+0xe2>
        return;
 80155e0:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80155e2:	3728      	adds	r7, #40	@ 0x28
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd80      	pop	{r7, pc}

080155e8 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b082      	sub	sp, #8
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	791b      	ldrb	r3, [r3, #4]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d002      	beq.n	80155fe <RegionEU868ChanMaskSet+0x16>
 80155f8:	2b01      	cmp	r3, #1
 80155fa:	d00b      	beq.n	8015614 <RegionEU868ChanMaskSet+0x2c>
 80155fc:	e015      	b.n	801562a <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80155fe:	4b0e      	ldr	r3, [pc, #56]	@ (8015638 <RegionEU868ChanMaskSet+0x50>)
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	2201      	movs	r2, #1
 801560c:	4619      	mov	r1, r3
 801560e:	f7fe ff17 	bl	8014440 <RegionCommonChanMaskCopy>
            break;
 8015612:	e00c      	b.n	801562e <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015614:	4b08      	ldr	r3, [pc, #32]	@ (8015638 <RegionEU868ChanMaskSet+0x50>)
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	f203 408c 	addw	r0, r3, #1164	@ 0x48c
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	2201      	movs	r2, #1
 8015622:	4619      	mov	r1, r3
 8015624:	f7fe ff0c 	bl	8014440 <RegionCommonChanMaskCopy>
            break;
 8015628:	e001      	b.n	801562e <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801562a:	2300      	movs	r3, #0
 801562c:	e000      	b.n	8015630 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801562e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015630:	4618      	mov	r0, r3
 8015632:	3708      	adds	r7, #8
 8015634:	46bd      	mov	sp, r7
 8015636:	bd80      	pop	{r7, pc}
 8015638:	2000138c 	.word	0x2000138c

0801563c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b088      	sub	sp, #32
 8015640:	af02      	add	r7, sp, #8
 8015642:	60ba      	str	r2, [r7, #8]
 8015644:	607b      	str	r3, [r7, #4]
 8015646:	4603      	mov	r3, r0
 8015648:	73fb      	strb	r3, [r7, #15]
 801564a:	460b      	mov	r3, r1
 801564c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801564e:	2300      	movs	r3, #0
 8015650:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8015652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015656:	2b07      	cmp	r3, #7
 8015658:	bfa8      	it	ge
 801565a:	2307      	movge	r3, #7
 801565c:	b25a      	sxtb	r2, r3
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015668:	491e      	ldr	r1, [pc, #120]	@ (80156e4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801566a:	4618      	mov	r0, r3
 801566c:	f7ff fb88 	bl	8014d80 <RegionCommonGetBandwidth>
 8015670:	4603      	mov	r3, r0
 8015672:	b2da      	uxtb	r2, r3
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801567e:	2b07      	cmp	r3, #7
 8015680:	d10a      	bne.n	8015698 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015688:	461a      	mov	r2, r3
 801568a:	4b17      	ldr	r3, [pc, #92]	@ (80156e8 <RegionEU868ComputeRxWindowParameters+0xac>)
 801568c:	5c9b      	ldrb	r3, [r3, r2]
 801568e:	4618      	mov	r0, r3
 8015690:	f7ff f90a 	bl	80148a8 <RegionCommonComputeSymbolTimeFsk>
 8015694:	6178      	str	r0, [r7, #20]
 8015696:	e011      	b.n	80156bc <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801569e:	461a      	mov	r2, r3
 80156a0:	4b11      	ldr	r3, [pc, #68]	@ (80156e8 <RegionEU868ComputeRxWindowParameters+0xac>)
 80156a2:	5c9a      	ldrb	r2, [r3, r2]
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80156aa:	4619      	mov	r1, r3
 80156ac:	4b0d      	ldr	r3, [pc, #52]	@ (80156e4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80156ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80156b2:	4619      	mov	r1, r3
 80156b4:	4610      	mov	r0, r2
 80156b6:	f7ff f8e1 	bl	801487c <RegionCommonComputeSymbolTimeLoRa>
 80156ba:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80156bc:	4b0b      	ldr	r3, [pc, #44]	@ (80156ec <RegionEU868ComputeRxWindowParameters+0xb0>)
 80156be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80156c0:	4798      	blx	r3
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	3308      	adds	r3, #8
 80156c6:	687a      	ldr	r2, [r7, #4]
 80156c8:	320c      	adds	r2, #12
 80156ca:	7bb9      	ldrb	r1, [r7, #14]
 80156cc:	9201      	str	r2, [sp, #4]
 80156ce:	9300      	str	r3, [sp, #0]
 80156d0:	4603      	mov	r3, r0
 80156d2:	68ba      	ldr	r2, [r7, #8]
 80156d4:	6978      	ldr	r0, [r7, #20]
 80156d6:	f7ff f8f7 	bl	80148c8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80156da:	bf00      	nop
 80156dc:	3718      	adds	r7, #24
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}
 80156e2:	bf00      	nop
 80156e4:	0801dbe8 	.word	0x0801dbe8
 80156e8:	0801dbe0 	.word	0x0801dbe0
 80156ec:	0801dc9c 	.word	0x0801dc9c

080156f0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80156f0:	b5b0      	push	{r4, r5, r7, lr}
 80156f2:	b090      	sub	sp, #64	@ 0x40
 80156f4:	af0a      	add	r7, sp, #40	@ 0x28
 80156f6:	6078      	str	r0, [r7, #4]
 80156f8:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	785b      	ldrb	r3, [r3, #1]
 80156fe:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8015700:	2300      	movs	r3, #0
 8015702:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8015704:	2300      	movs	r3, #0
 8015706:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	685b      	ldr	r3, [r3, #4]
 801570c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801570e:	4b5a      	ldr	r3, [pc, #360]	@ (8015878 <RegionEU868RxConfig+0x188>)
 8015710:	685b      	ldr	r3, [r3, #4]
 8015712:	4798      	blx	r3
 8015714:	4603      	mov	r3, r0
 8015716:	2b00      	cmp	r3, #0
 8015718:	d001      	beq.n	801571e <RegionEU868RxConfig+0x2e>
    {
        return false;
 801571a:	2300      	movs	r3, #0
 801571c:	e0a8      	b.n	8015870 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	7cdb      	ldrb	r3, [r3, #19]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d126      	bne.n	8015774 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8015726:	4b55      	ldr	r3, [pc, #340]	@ (801587c <RegionEU868RxConfig+0x18c>)
 8015728:	681a      	ldr	r2, [r3, #0]
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	781b      	ldrb	r3, [r3, #0]
 801572e:	4619      	mov	r1, r3
 8015730:	460b      	mov	r3, r1
 8015732:	005b      	lsls	r3, r3, #1
 8015734:	440b      	add	r3, r1
 8015736:	009b      	lsls	r3, r3, #2
 8015738:	4413      	add	r3, r2
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801573e:	4b4f      	ldr	r3, [pc, #316]	@ (801587c <RegionEU868RxConfig+0x18c>)
 8015740:	681a      	ldr	r2, [r3, #0]
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	781b      	ldrb	r3, [r3, #0]
 8015746:	4619      	mov	r1, r3
 8015748:	460b      	mov	r3, r1
 801574a:	005b      	lsls	r3, r3, #1
 801574c:	440b      	add	r3, r1
 801574e:	009b      	lsls	r3, r3, #2
 8015750:	4413      	add	r3, r2
 8015752:	3304      	adds	r3, #4
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d00c      	beq.n	8015774 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801575a:	4b48      	ldr	r3, [pc, #288]	@ (801587c <RegionEU868RxConfig+0x18c>)
 801575c:	681a      	ldr	r2, [r3, #0]
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	781b      	ldrb	r3, [r3, #0]
 8015762:	4619      	mov	r1, r3
 8015764:	460b      	mov	r3, r1
 8015766:	005b      	lsls	r3, r3, #1
 8015768:	440b      	add	r3, r1
 801576a:	009b      	lsls	r3, r3, #2
 801576c:	4413      	add	r3, r2
 801576e:	3304      	adds	r3, #4
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8015774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015778:	4a41      	ldr	r2, [pc, #260]	@ (8015880 <RegionEU868RxConfig+0x190>)
 801577a:	5cd3      	ldrb	r3, [r2, r3]
 801577c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801577e:	4b3e      	ldr	r3, [pc, #248]	@ (8015878 <RegionEU868RxConfig+0x188>)
 8015780:	68db      	ldr	r3, [r3, #12]
 8015782:	6938      	ldr	r0, [r7, #16]
 8015784:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801578a:	2b07      	cmp	r3, #7
 801578c:	d128      	bne.n	80157e0 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801578e:	2300      	movs	r3, #0
 8015790:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015792:	4b39      	ldr	r3, [pc, #228]	@ (8015878 <RegionEU868RxConfig+0x188>)
 8015794:	699c      	ldr	r4, [r3, #24]
 8015796:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801579a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801579e:	fb02 f303 	mul.w	r3, r2, r3
 80157a2:	4619      	mov	r1, r3
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	689b      	ldr	r3, [r3, #8]
 80157a8:	b29b      	uxth	r3, r3
 80157aa:	687a      	ldr	r2, [r7, #4]
 80157ac:	7c92      	ldrb	r2, [r2, #18]
 80157ae:	7df8      	ldrb	r0, [r7, #23]
 80157b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80157b2:	2200      	movs	r2, #0
 80157b4:	9208      	str	r2, [sp, #32]
 80157b6:	2200      	movs	r2, #0
 80157b8:	9207      	str	r2, [sp, #28]
 80157ba:	2200      	movs	r2, #0
 80157bc:	9206      	str	r2, [sp, #24]
 80157be:	2201      	movs	r2, #1
 80157c0:	9205      	str	r2, [sp, #20]
 80157c2:	2200      	movs	r2, #0
 80157c4:	9204      	str	r2, [sp, #16]
 80157c6:	2200      	movs	r2, #0
 80157c8:	9203      	str	r2, [sp, #12]
 80157ca:	9302      	str	r3, [sp, #8]
 80157cc:	2305      	movs	r3, #5
 80157ce:	9301      	str	r3, [sp, #4]
 80157d0:	4b2c      	ldr	r3, [pc, #176]	@ (8015884 <RegionEU868RxConfig+0x194>)
 80157d2:	9300      	str	r3, [sp, #0]
 80157d4:	2300      	movs	r3, #0
 80157d6:	460a      	mov	r2, r1
 80157d8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80157dc:	47a0      	blx	r4
 80157de:	e024      	b.n	801582a <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80157e0:	2301      	movs	r3, #1
 80157e2:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80157e4:	4b24      	ldr	r3, [pc, #144]	@ (8015878 <RegionEU868RxConfig+0x188>)
 80157e6:	699c      	ldr	r4, [r3, #24]
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	789b      	ldrb	r3, [r3, #2]
 80157ec:	461d      	mov	r5, r3
 80157ee:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	689b      	ldr	r3, [r3, #8]
 80157f6:	b29b      	uxth	r3, r3
 80157f8:	687a      	ldr	r2, [r7, #4]
 80157fa:	7c92      	ldrb	r2, [r2, #18]
 80157fc:	7df8      	ldrb	r0, [r7, #23]
 80157fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8015800:	2201      	movs	r2, #1
 8015802:	9208      	str	r2, [sp, #32]
 8015804:	2200      	movs	r2, #0
 8015806:	9207      	str	r2, [sp, #28]
 8015808:	2200      	movs	r2, #0
 801580a:	9206      	str	r2, [sp, #24]
 801580c:	2200      	movs	r2, #0
 801580e:	9205      	str	r2, [sp, #20]
 8015810:	2200      	movs	r2, #0
 8015812:	9204      	str	r2, [sp, #16]
 8015814:	2200      	movs	r2, #0
 8015816:	9203      	str	r2, [sp, #12]
 8015818:	9302      	str	r3, [sp, #8]
 801581a:	2308      	movs	r3, #8
 801581c:	9301      	str	r3, [sp, #4]
 801581e:	2300      	movs	r3, #0
 8015820:	9300      	str	r3, [sp, #0]
 8015822:	2301      	movs	r3, #1
 8015824:	460a      	mov	r2, r1
 8015826:	4629      	mov	r1, r5
 8015828:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	7c5b      	ldrb	r3, [r3, #17]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d005      	beq.n	801583e <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8015832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015836:	4a14      	ldr	r2, [pc, #80]	@ (8015888 <RegionEU868RxConfig+0x198>)
 8015838:	5cd3      	ldrb	r3, [r2, r3]
 801583a:	75bb      	strb	r3, [r7, #22]
 801583c:	e004      	b.n	8015848 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801583e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015842:	4a12      	ldr	r2, [pc, #72]	@ (801588c <RegionEU868RxConfig+0x19c>)
 8015844:	5cd3      	ldrb	r3, [r2, r3]
 8015846:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015848:	4b0b      	ldr	r3, [pc, #44]	@ (8015878 <RegionEU868RxConfig+0x188>)
 801584a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801584c:	7dba      	ldrb	r2, [r7, #22]
 801584e:	320d      	adds	r2, #13
 8015850:	b2d1      	uxtb	r1, r2
 8015852:	7dfa      	ldrb	r2, [r7, #23]
 8015854:	4610      	mov	r0, r2
 8015856:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	7cdb      	ldrb	r3, [r3, #19]
 801585c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015860:	6939      	ldr	r1, [r7, #16]
 8015862:	4618      	mov	r0, r3
 8015864:	f7ff faaa 	bl	8014dbc <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8015868:	683b      	ldr	r3, [r7, #0]
 801586a:	7bfa      	ldrb	r2, [r7, #15]
 801586c:	701a      	strb	r2, [r3, #0]
    return true;
 801586e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015870:	4618      	mov	r0, r3
 8015872:	3718      	adds	r7, #24
 8015874:	46bd      	mov	sp, r7
 8015876:	bdb0      	pop	{r4, r5, r7, pc}
 8015878:	0801dc9c 	.word	0x0801dc9c
 801587c:	2000138c 	.word	0x2000138c
 8015880:	0801dbe0 	.word	0x0801dbe0
 8015884:	00014585 	.word	0x00014585
 8015888:	0801dc10 	.word	0x0801dc10
 801588c:	0801dc08 	.word	0x0801dc08

08015890 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015890:	b590      	push	{r4, r7, lr}
 8015892:	b093      	sub	sp, #76	@ 0x4c
 8015894:	af0a      	add	r7, sp, #40	@ 0x28
 8015896:	60f8      	str	r0, [r7, #12]
 8015898:	60b9      	str	r1, [r7, #8]
 801589a:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80158a2:	461a      	mov	r2, r3
 80158a4:	4b5d      	ldr	r3, [pc, #372]	@ (8015a1c <RegionEU868TxConfig+0x18c>)
 80158a6:	5c9b      	ldrb	r3, [r3, r2]
 80158a8:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80158b0:	4b5b      	ldr	r3, [pc, #364]	@ (8015a20 <RegionEU868TxConfig+0x190>)
 80158b2:	681a      	ldr	r2, [r3, #0]
 80158b4:	4b5b      	ldr	r3, [pc, #364]	@ (8015a24 <RegionEU868TxConfig+0x194>)
 80158b6:	6819      	ldr	r1, [r3, #0]
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	781b      	ldrb	r3, [r3, #0]
 80158bc:	461c      	mov	r4, r3
 80158be:	4623      	mov	r3, r4
 80158c0:	005b      	lsls	r3, r3, #1
 80158c2:	4423      	add	r3, r4
 80158c4:	009b      	lsls	r3, r3, #2
 80158c6:	440b      	add	r3, r1
 80158c8:	3309      	adds	r3, #9
 80158ca:	781b      	ldrb	r3, [r3, #0]
 80158cc:	4619      	mov	r1, r3
 80158ce:	460b      	mov	r3, r1
 80158d0:	005b      	lsls	r3, r3, #1
 80158d2:	440b      	add	r3, r1
 80158d4:	00db      	lsls	r3, r3, #3
 80158d6:	4413      	add	r3, r2
 80158d8:	3302      	adds	r3, #2
 80158da:	f993 3000 	ldrsb.w	r3, [r3]
 80158de:	4619      	mov	r1, r3
 80158e0:	f7ff fa39 	bl	8014d56 <RegionCommonLimitTxPower>
 80158e4:	4603      	mov	r3, r0
 80158e6:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80158ee:	494e      	ldr	r1, [pc, #312]	@ (8015a28 <RegionEU868TxConfig+0x198>)
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7ff fa45 	bl	8014d80 <RegionCommonGetBandwidth>
 80158f6:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80158f8:	2300      	movs	r3, #0
 80158fa:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	6859      	ldr	r1, [r3, #4]
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	689a      	ldr	r2, [r3, #8]
 8015904:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015908:	4618      	mov	r0, r3
 801590a:	f7ff f895 	bl	8014a38 <RegionCommonComputeTxPower>
 801590e:	4603      	mov	r3, r0
 8015910:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015912:	4b46      	ldr	r3, [pc, #280]	@ (8015a2c <RegionEU868TxConfig+0x19c>)
 8015914:	68da      	ldr	r2, [r3, #12]
 8015916:	4b43      	ldr	r3, [pc, #268]	@ (8015a24 <RegionEU868TxConfig+0x194>)
 8015918:	6819      	ldr	r1, [r3, #0]
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	781b      	ldrb	r3, [r3, #0]
 801591e:	4618      	mov	r0, r3
 8015920:	4603      	mov	r3, r0
 8015922:	005b      	lsls	r3, r3, #1
 8015924:	4403      	add	r3, r0
 8015926:	009b      	lsls	r3, r3, #2
 8015928:	440b      	add	r3, r1
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	4618      	mov	r0, r3
 801592e:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015936:	2b07      	cmp	r3, #7
 8015938:	d124      	bne.n	8015984 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801593a:	2300      	movs	r3, #0
 801593c:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801593e:	4b3b      	ldr	r3, [pc, #236]	@ (8015a2c <RegionEU868TxConfig+0x19c>)
 8015940:	69dc      	ldr	r4, [r3, #28]
 8015942:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015946:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801594a:	fb02 f303 	mul.w	r3, r2, r3
 801594e:	461a      	mov	r2, r3
 8015950:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015954:	7ff8      	ldrb	r0, [r7, #31]
 8015956:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 801595a:	9308      	str	r3, [sp, #32]
 801595c:	2300      	movs	r3, #0
 801595e:	9307      	str	r3, [sp, #28]
 8015960:	2300      	movs	r3, #0
 8015962:	9306      	str	r3, [sp, #24]
 8015964:	2300      	movs	r3, #0
 8015966:	9305      	str	r3, [sp, #20]
 8015968:	2301      	movs	r3, #1
 801596a:	9304      	str	r3, [sp, #16]
 801596c:	2300      	movs	r3, #0
 801596e:	9303      	str	r3, [sp, #12]
 8015970:	2305      	movs	r3, #5
 8015972:	9302      	str	r3, [sp, #8]
 8015974:	2300      	movs	r3, #0
 8015976:	9301      	str	r3, [sp, #4]
 8015978:	9200      	str	r2, [sp, #0]
 801597a:	69bb      	ldr	r3, [r7, #24]
 801597c:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8015980:	47a0      	blx	r4
 8015982:	e01d      	b.n	80159c0 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8015984:	2301      	movs	r3, #1
 8015986:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015988:	4b28      	ldr	r3, [pc, #160]	@ (8015a2c <RegionEU868TxConfig+0x19c>)
 801598a:	69dc      	ldr	r4, [r3, #28]
 801598c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015990:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015994:	7ff8      	ldrb	r0, [r7, #31]
 8015996:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 801599a:	9208      	str	r2, [sp, #32]
 801599c:	2200      	movs	r2, #0
 801599e:	9207      	str	r2, [sp, #28]
 80159a0:	2200      	movs	r2, #0
 80159a2:	9206      	str	r2, [sp, #24]
 80159a4:	2200      	movs	r2, #0
 80159a6:	9205      	str	r2, [sp, #20]
 80159a8:	2201      	movs	r2, #1
 80159aa:	9204      	str	r2, [sp, #16]
 80159ac:	2200      	movs	r2, #0
 80159ae:	9203      	str	r2, [sp, #12]
 80159b0:	2208      	movs	r2, #8
 80159b2:	9202      	str	r2, [sp, #8]
 80159b4:	2201      	movs	r2, #1
 80159b6:	9201      	str	r2, [sp, #4]
 80159b8:	9300      	str	r3, [sp, #0]
 80159ba:	69bb      	ldr	r3, [r7, #24]
 80159bc:	2200      	movs	r2, #0
 80159be:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80159c0:	4b18      	ldr	r3, [pc, #96]	@ (8015a24 <RegionEU868TxConfig+0x194>)
 80159c2:	681a      	ldr	r2, [r3, #0]
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	781b      	ldrb	r3, [r3, #0]
 80159c8:	4619      	mov	r1, r3
 80159ca:	460b      	mov	r3, r1
 80159cc:	005b      	lsls	r3, r3, #1
 80159ce:	440b      	add	r3, r1
 80159d0:	009b      	lsls	r3, r3, #2
 80159d2:	4413      	add	r3, r2
 80159d4:	681a      	ldr	r2, [r3, #0]
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80159dc:	4619      	mov	r1, r3
 80159de:	4610      	mov	r0, r2
 80159e0:	f7ff fa1e 	bl	8014e20 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	899b      	ldrh	r3, [r3, #12]
 80159ee:	4619      	mov	r1, r3
 80159f0:	4610      	mov	r0, r2
 80159f2:	f7ff faa3 	bl	8014f3c <GetTimeOnAir>
 80159f6:	4602      	mov	r2, r0
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80159fc:	4b0b      	ldr	r3, [pc, #44]	@ (8015a2c <RegionEU868TxConfig+0x19c>)
 80159fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015a00:	68fa      	ldr	r2, [r7, #12]
 8015a02:	8992      	ldrh	r2, [r2, #12]
 8015a04:	b2d1      	uxtb	r1, r2
 8015a06:	7ffa      	ldrb	r2, [r7, #31]
 8015a08:	4610      	mov	r0, r2
 8015a0a:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015a0c:	68bb      	ldr	r3, [r7, #8]
 8015a0e:	7f7a      	ldrb	r2, [r7, #29]
 8015a10:	701a      	strb	r2, [r3, #0]
    return true;
 8015a12:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015a14:	4618      	mov	r0, r3
 8015a16:	3724      	adds	r7, #36	@ 0x24
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd90      	pop	{r4, r7, pc}
 8015a1c:	0801dbe0 	.word	0x0801dbe0
 8015a20:	20001388 	.word	0x20001388
 8015a24:	2000138c 	.word	0x2000138c
 8015a28:	0801dbe8 	.word	0x0801dbe8
 8015a2c:	0801dc9c 	.word	0x0801dc9c

08015a30 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015a30:	b590      	push	{r4, r7, lr}
 8015a32:	b093      	sub	sp, #76	@ 0x4c
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	60f8      	str	r0, [r7, #12]
 8015a38:	60b9      	str	r1, [r7, #8]
 8015a3a:	607a      	str	r2, [r7, #4]
 8015a3c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015a3e:	2307      	movs	r3, #7
 8015a40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015a44:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015a48:	2200      	movs	r2, #0
 8015a4a:	601a      	str	r2, [r3, #0]
 8015a4c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015a4e:	2300      	movs	r3, #0
 8015a50:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8015a54:	2300      	movs	r3, #0
 8015a56:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015a5e:	e085      	b.n	8015b6c <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	685a      	ldr	r2, [r3, #4]
 8015a64:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8015a68:	4413      	add	r3, r2
 8015a6a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8015a6e:	4611      	mov	r1, r2
 8015a70:	4618      	mov	r0, r3
 8015a72:	f7fe fe29 	bl	80146c8 <RegionCommonParseLinkAdrReq>
 8015a76:	4603      	mov	r3, r0
 8015a78:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8015a7c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d07b      	beq.n	8015b7c <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015a84:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015a88:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015a8c:	4413      	add	r3, r2
 8015a8e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015a92:	2307      	movs	r3, #7
 8015a94:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015a98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015a9c:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015a9e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d109      	bne.n	8015aba <RegionEU868LinkAdrReq+0x8a>
 8015aa6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d106      	bne.n	8015aba <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015aac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015ab0:	f023 0301 	bic.w	r3, r3, #1
 8015ab4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015ab8:	e058      	b.n	8015b6c <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015aba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d003      	beq.n	8015aca <RegionEU868LinkAdrReq+0x9a>
 8015ac2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015ac6:	2b05      	cmp	r3, #5
 8015ac8:	d903      	bls.n	8015ad2 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015aca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015ace:	2b06      	cmp	r3, #6
 8015ad0:	d906      	bls.n	8015ae0 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015ad2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015ad6:	f023 0301 	bic.w	r3, r3, #1
 8015ada:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015ade:	e045      	b.n	8015b6c <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015ae6:	e03d      	b.n	8015b64 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015ae8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015aec:	2b06      	cmp	r3, #6
 8015aee:	d118      	bne.n	8015b22 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015af0:	4b5f      	ldr	r3, [pc, #380]	@ (8015c70 <RegionEU868LinkAdrReq+0x240>)
 8015af2:	6819      	ldr	r1, [r3, #0]
 8015af4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8015af8:	4613      	mov	r3, r2
 8015afa:	005b      	lsls	r3, r3, #1
 8015afc:	4413      	add	r3, r2
 8015afe:	009b      	lsls	r3, r3, #2
 8015b00:	440b      	add	r3, r1
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d028      	beq.n	8015b5a <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015b08:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015b0c:	2201      	movs	r2, #1
 8015b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8015b12:	b21a      	sxth	r2, r3
 8015b14:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b16:	b21b      	sxth	r3, r3
 8015b18:	4313      	orrs	r3, r2
 8015b1a:	b21b      	sxth	r3, r3
 8015b1c:	b29b      	uxth	r3, r3
 8015b1e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8015b20:	e01b      	b.n	8015b5a <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015b22:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b24:	461a      	mov	r2, r3
 8015b26:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015b2a:	fa42 f303 	asr.w	r3, r2, r3
 8015b2e:	f003 0301 	and.w	r3, r3, #1
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d011      	beq.n	8015b5a <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015b36:	4b4e      	ldr	r3, [pc, #312]	@ (8015c70 <RegionEU868LinkAdrReq+0x240>)
 8015b38:	6819      	ldr	r1, [r3, #0]
 8015b3a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8015b3e:	4613      	mov	r3, r2
 8015b40:	005b      	lsls	r3, r3, #1
 8015b42:	4413      	add	r3, r2
 8015b44:	009b      	lsls	r3, r3, #2
 8015b46:	440b      	add	r3, r1
 8015b48:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d105      	bne.n	8015b5a <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015b4e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015b52:	f023 0301 	bic.w	r3, r3, #1
 8015b56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015b5a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015b5e:	3301      	adds	r3, #1
 8015b60:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015b64:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015b68:	2b0f      	cmp	r3, #15
 8015b6a:	d9bd      	bls.n	8015ae8 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	7a1b      	ldrb	r3, [r3, #8]
 8015b70:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015b74:	429a      	cmp	r2, r3
 8015b76:	f4ff af73 	bcc.w	8015a60 <RegionEU868LinkAdrReq+0x30>
 8015b7a:	e000      	b.n	8015b7e <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015b7c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015b7e:	2302      	movs	r3, #2
 8015b80:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	7a5b      	ldrb	r3, [r3, #9]
 8015b88:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8015b8c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015b90:	4618      	mov	r0, r3
 8015b92:	f7ff fa23 	bl	8014fdc <RegionEU868GetPhyParam>
 8015b96:	4603      	mov	r3, r0
 8015b98:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8015b9a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015b9e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	7a9b      	ldrb	r3, [r3, #10]
 8015ba4:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015ba6:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8015baa:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015bac:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8015bb0:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015bb2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8015bb6:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015bbe:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015bc6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	7b5b      	ldrb	r3, [r3, #13]
 8015bcc:	b25b      	sxtb	r3, r3
 8015bce:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8015bd0:	2310      	movs	r3, #16
 8015bd2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015bd4:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8015bd8:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bdc:	b25b      	sxtb	r3, r3
 8015bde:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8015be2:	2307      	movs	r3, #7
 8015be4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015be8:	4b21      	ldr	r3, [pc, #132]	@ (8015c70 <RegionEU868LinkAdrReq+0x240>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8015bee:	2307      	movs	r3, #7
 8015bf0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015c00:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8015c04:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015c08:	1c9a      	adds	r2, r3, #2
 8015c0a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015c0e:	1c59      	adds	r1, r3, #1
 8015c10:	f107 0010 	add.w	r0, r7, #16
 8015c14:	4623      	mov	r3, r4
 8015c16:	f7fe fda8 	bl	801476a <RegionCommonLinkAdrReqVerifyParams>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015c20:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015c24:	2b07      	cmp	r3, #7
 8015c26:	d10d      	bne.n	8015c44 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015c28:	4b11      	ldr	r3, [pc, #68]	@ (8015c70 <RegionEU868LinkAdrReq+0x240>)
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8015c30:	220c      	movs	r2, #12
 8015c32:	2100      	movs	r1, #0
 8015c34:	4618      	mov	r0, r3
 8015c36:	f001 fde7 	bl	8017808 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8015c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8015c70 <RegionEU868LinkAdrReq+0x240>)
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015c40:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015c44:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8015c48:	68bb      	ldr	r3, [r7, #8]
 8015c4a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015c4c:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015c54:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8015c58:	683b      	ldr	r3, [r7, #0]
 8015c5a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015c5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015c5e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015c62:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8015c64:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	374c      	adds	r7, #76	@ 0x4c
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd90      	pop	{r4, r7, pc}
 8015c70:	2000138c 	.word	0x2000138c

08015c74 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b084      	sub	sp, #16
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015c7c:	2307      	movs	r3, #7
 8015c7e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015c80:	2300      	movs	r3, #0
 8015c82:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	685b      	ldr	r3, [r3, #4]
 8015c88:	f107 020e 	add.w	r2, r7, #14
 8015c8c:	4611      	mov	r1, r2
 8015c8e:	4618      	mov	r0, r3
 8015c90:	f7ff f8de 	bl	8014e50 <VerifyRfFreq>
 8015c94:	4603      	mov	r3, r0
 8015c96:	f083 0301 	eor.w	r3, r3, #1
 8015c9a:	b2db      	uxtb	r3, r3
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d003      	beq.n	8015ca8 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8015ca0:	7bfb      	ldrb	r3, [r7, #15]
 8015ca2:	f023 0301 	bic.w	r3, r3, #1
 8015ca6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f993 3000 	ldrsb.w	r3, [r3]
 8015cae:	2207      	movs	r2, #7
 8015cb0:	2100      	movs	r1, #0
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f7fe fb47 	bl	8014346 <RegionCommonValueInRange>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d103      	bne.n	8015cc6 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8015cbe:	7bfb      	ldrb	r3, [r7, #15]
 8015cc0:	f023 0302 	bic.w	r3, r3, #2
 8015cc4:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ccc:	2205      	movs	r2, #5
 8015cce:	2100      	movs	r1, #0
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	f7fe fb38 	bl	8014346 <RegionCommonValueInRange>
 8015cd6:	4603      	mov	r3, r0
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d103      	bne.n	8015ce4 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015cdc:	7bfb      	ldrb	r3, [r7, #15]
 8015cde:	f023 0304 	bic.w	r3, r3, #4
 8015ce2:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8015ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	3710      	adds	r7, #16
 8015cea:	46bd      	mov	sp, r7
 8015cec:	bd80      	pop	{r7, pc}
	...

08015cf0 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b086      	sub	sp, #24
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015cf8:	2303      	movs	r3, #3
 8015cfa:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d114      	bne.n	8015d30 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015d0c:	b2db      	uxtb	r3, r3
 8015d0e:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8015d10:	f107 0308 	add.w	r3, r7, #8
 8015d14:	4618      	mov	r0, r3
 8015d16:	f000 f9ff 	bl	8016118 <RegionEU868ChannelsRemove>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	f083 0301 	eor.w	r3, r3, #1
 8015d20:	b2db      	uxtb	r3, r3
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d03b      	beq.n	8015d9e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8015d26:	7dfb      	ldrb	r3, [r7, #23]
 8015d28:	f023 0303 	bic.w	r3, r3, #3
 8015d2c:	75fb      	strb	r3, [r7, #23]
 8015d2e:	e036      	b.n	8015d9e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015d3c:	b2db      	uxtb	r3, r3
 8015d3e:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8015d40:	f107 030c 	add.w	r3, r7, #12
 8015d44:	4618      	mov	r0, r3
 8015d46:	f000 f945 	bl	8015fd4 <RegionEU868ChannelAdd>
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	2b06      	cmp	r3, #6
 8015d4e:	d820      	bhi.n	8015d92 <RegionEU868NewChannelReq+0xa2>
 8015d50:	a201      	add	r2, pc, #4	@ (adr r2, 8015d58 <RegionEU868NewChannelReq+0x68>)
 8015d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d56:	bf00      	nop
 8015d58:	08015d9d 	.word	0x08015d9d
 8015d5c:	08015d93 	.word	0x08015d93
 8015d60:	08015d93 	.word	0x08015d93
 8015d64:	08015d93 	.word	0x08015d93
 8015d68:	08015d75 	.word	0x08015d75
 8015d6c:	08015d7f 	.word	0x08015d7f
 8015d70:	08015d89 	.word	0x08015d89
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015d74:	7dfb      	ldrb	r3, [r7, #23]
 8015d76:	f023 0301 	bic.w	r3, r3, #1
 8015d7a:	75fb      	strb	r3, [r7, #23]
                break;
 8015d7c:	e00f      	b.n	8015d9e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015d7e:	7dfb      	ldrb	r3, [r7, #23]
 8015d80:	f023 0302 	bic.w	r3, r3, #2
 8015d84:	75fb      	strb	r3, [r7, #23]
                break;
 8015d86:	e00a      	b.n	8015d9e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015d88:	7dfb      	ldrb	r3, [r7, #23]
 8015d8a:	f023 0303 	bic.w	r3, r3, #3
 8015d8e:	75fb      	strb	r3, [r7, #23]
                break;
 8015d90:	e005      	b.n	8015d9e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015d92:	7dfb      	ldrb	r3, [r7, #23]
 8015d94:	f023 0303 	bic.w	r3, r3, #3
 8015d98:	75fb      	strb	r3, [r7, #23]
                break;
 8015d9a:	e000      	b.n	8015d9e <RegionEU868NewChannelReq+0xae>
                break;
 8015d9c:	bf00      	nop
            }
        }
    }

    return status;
 8015d9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015da2:	4618      	mov	r0, r3
 8015da4:	3718      	adds	r7, #24
 8015da6:	46bd      	mov	sp, r7
 8015da8:	bd80      	pop	{r7, pc}
 8015daa:	bf00      	nop

08015dac <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015dac:	b480      	push	{r7}
 8015dae:	b083      	sub	sp, #12
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015db4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015db8:	4618      	mov	r0, r3
 8015dba:	370c      	adds	r7, #12
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bc80      	pop	{r7}
 8015dc0:	4770      	bx	lr
	...

08015dc4 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	b084      	sub	sp, #16
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015dcc:	2303      	movs	r3, #3
 8015dce:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	781b      	ldrb	r3, [r3, #0]
 8015dd8:	2b0f      	cmp	r3, #15
 8015dda:	d901      	bls.n	8015de0 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8015ddc:	2300      	movs	r3, #0
 8015dde:	e035      	b.n	8015e4c <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	685b      	ldr	r3, [r3, #4]
 8015de4:	f107 020e 	add.w	r2, r7, #14
 8015de8:	4611      	mov	r1, r2
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7ff f830 	bl	8014e50 <VerifyRfFreq>
 8015df0:	4603      	mov	r3, r0
 8015df2:	f083 0301 	eor.w	r3, r3, #1
 8015df6:	b2db      	uxtb	r3, r3
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d003      	beq.n	8015e04 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8015dfc:	7bfb      	ldrb	r3, [r7, #15]
 8015dfe:	f023 0301 	bic.w	r3, r3, #1
 8015e02:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015e04:	4b13      	ldr	r3, [pc, #76]	@ (8015e54 <RegionEU868DlChannelReq+0x90>)
 8015e06:	681a      	ldr	r2, [r3, #0]
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	781b      	ldrb	r3, [r3, #0]
 8015e0c:	4619      	mov	r1, r3
 8015e0e:	460b      	mov	r3, r1
 8015e10:	005b      	lsls	r3, r3, #1
 8015e12:	440b      	add	r3, r1
 8015e14:	009b      	lsls	r3, r3, #2
 8015e16:	4413      	add	r3, r2
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d103      	bne.n	8015e26 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8015e1e:	7bfb      	ldrb	r3, [r7, #15]
 8015e20:	f023 0302 	bic.w	r3, r3, #2
 8015e24:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8015e26:	7bfb      	ldrb	r3, [r7, #15]
 8015e28:	2b03      	cmp	r3, #3
 8015e2a:	d10d      	bne.n	8015e48 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015e2c:	4b09      	ldr	r3, [pc, #36]	@ (8015e54 <RegionEU868DlChannelReq+0x90>)
 8015e2e:	6819      	ldr	r1, [r3, #0]
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	781b      	ldrb	r3, [r3, #0]
 8015e34:	4618      	mov	r0, r3
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	685a      	ldr	r2, [r3, #4]
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	005b      	lsls	r3, r3, #1
 8015e3e:	4403      	add	r3, r0
 8015e40:	009b      	lsls	r3, r3, #2
 8015e42:	440b      	add	r3, r1
 8015e44:	3304      	adds	r3, #4
 8015e46:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8015e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	3710      	adds	r7, #16
 8015e50:	46bd      	mov	sp, r7
 8015e52:	bd80      	pop	{r7, pc}
 8015e54:	2000138c 	.word	0x2000138c

08015e58 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015e58:	b480      	push	{r7}
 8015e5a:	b083      	sub	sp, #12
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	4603      	mov	r3, r0
 8015e60:	460a      	mov	r2, r1
 8015e62:	71fb      	strb	r3, [r7, #7]
 8015e64:	4613      	mov	r3, r2
 8015e66:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8015e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	370c      	adds	r7, #12
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bc80      	pop	{r7}
 8015e74:	4770      	bx	lr
	...

08015e78 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b09a      	sub	sp, #104	@ 0x68
 8015e7c:	af02      	add	r7, sp, #8
 8015e7e:	60f8      	str	r0, [r7, #12]
 8015e80:	60b9      	str	r1, [r7, #8]
 8015e82:	607a      	str	r2, [r7, #4]
 8015e84:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8015e86:	2300      	movs	r3, #0
 8015e88:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8015e92:	2300      	movs	r3, #0
 8015e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015e96:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	601a      	str	r2, [r3, #0]
 8015e9e:	605a      	str	r2, [r3, #4]
 8015ea0:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015ea2:	230c      	movs	r3, #12
 8015ea4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8015ea8:	2307      	movs	r3, #7
 8015eaa:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015eac:	4b47      	ldr	r3, [pc, #284]	@ (8015fcc <RegionEU868NextChannel+0x154>)
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8015eb4:	2201      	movs	r2, #1
 8015eb6:	2100      	movs	r1, #0
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f7fe fa95 	bl	80143e8 <RegionCommonCountChannels>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d10a      	bne.n	8015eda <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015ec4:	4b41      	ldr	r3, [pc, #260]	@ (8015fcc <RegionEU868NextChannel+0x154>)
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 8015ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8015fcc <RegionEU868NextChannel+0x154>)
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	f042 0207 	orr.w	r2, r2, #7
 8015ed4:	b292      	uxth	r2, r2
 8015ed6:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	7a5b      	ldrb	r3, [r3, #9]
 8015ede:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015ee6:	b2db      	uxtb	r3, r3
 8015ee8:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015eea:	4b38      	ldr	r3, [pc, #224]	@ (8015fcc <RegionEU868NextChannel+0x154>)
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8015ef2:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8015ef4:	4b35      	ldr	r3, [pc, #212]	@ (8015fcc <RegionEU868NextChannel+0x154>)
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8015efa:	4b35      	ldr	r3, [pc, #212]	@ (8015fd0 <RegionEU868NextChannel+0x158>)
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8015f00:	2310      	movs	r3, #16
 8015f02:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8015f04:	f107 0312 	add.w	r3, r7, #18
 8015f08:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	685b      	ldr	r3, [r3, #4]
 8015f14:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	7a9b      	ldrb	r3, [r3, #10]
 8015f1a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8015f1e:	2306      	movs	r3, #6
 8015f20:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8015f24:	68fa      	ldr	r2, [r7, #12]
 8015f26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015f2a:	320c      	adds	r2, #12
 8015f2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015f30:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	7d1b      	ldrb	r3, [r3, #20]
 8015f38:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	8adb      	ldrh	r3, [r3, #22]
 8015f46:	4619      	mov	r1, r3
 8015f48:	4610      	mov	r0, r2
 8015f4a:	f7fe fff7 	bl	8014f3c <GetTimeOnAir>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8015f52:	f107 0314 	add.w	r3, r7, #20
 8015f56:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8015f58:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8015f5c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8015f60:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	9301      	str	r3, [sp, #4]
 8015f68:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8015f6c:	9300      	str	r3, [sp, #0]
 8015f6e:	460b      	mov	r3, r1
 8015f70:	6839      	ldr	r1, [r7, #0]
 8015f72:	f7fe fe50 	bl	8014c16 <RegionCommonIdentifyChannels>
 8015f76:	4603      	mov	r3, r0
 8015f78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8015f7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d10e      	bne.n	8015fa2 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015f84:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8015f88:	3b01      	subs	r3, #1
 8015f8a:	4619      	mov	r1, r3
 8015f8c:	2000      	movs	r0, #0
 8015f8e:	f001 fbe9 	bl	8017764 <randr>
 8015f92:	4603      	mov	r3, r0
 8015f94:	3360      	adds	r3, #96	@ 0x60
 8015f96:	443b      	add	r3, r7
 8015f98:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8015f9c:	68bb      	ldr	r3, [r7, #8]
 8015f9e:	701a      	strb	r2, [r3, #0]
 8015fa0:	e00e      	b.n	8015fc0 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8015fa2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015fa6:	2b0c      	cmp	r3, #12
 8015fa8:	d10a      	bne.n	8015fc0 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015faa:	4b08      	ldr	r3, [pc, #32]	@ (8015fcc <RegionEU868NextChannel+0x154>)
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 8015fb2:	4b06      	ldr	r3, [pc, #24]	@ (8015fcc <RegionEU868NextChannel+0x154>)
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	f042 0207 	orr.w	r2, r2, #7
 8015fba:	b292      	uxth	r2, r2
 8015fbc:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }
    return status;
 8015fc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	3760      	adds	r7, #96	@ 0x60
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bd80      	pop	{r7, pc}
 8015fcc:	2000138c 	.word	0x2000138c
 8015fd0:	20001388 	.word	0x20001388

08015fd4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	b084      	sub	sp, #16
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015fdc:	2300      	movs	r3, #0
 8015fde:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	791b      	ldrb	r3, [r3, #4]
 8015fec:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8015fee:	7b7b      	ldrb	r3, [r7, #13]
 8015ff0:	2b02      	cmp	r3, #2
 8015ff2:	d801      	bhi.n	8015ff8 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015ff4:	2306      	movs	r3, #6
 8015ff6:	e089      	b.n	801610c <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8015ff8:	7b7b      	ldrb	r3, [r7, #13]
 8015ffa:	2b0f      	cmp	r3, #15
 8015ffc:	d901      	bls.n	8016002 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015ffe:	2303      	movs	r3, #3
 8016000:	e084      	b.n	801610c <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	7a1b      	ldrb	r3, [r3, #8]
 8016008:	f343 0303 	sbfx	r3, r3, #0, #4
 801600c:	b25b      	sxtb	r3, r3
 801600e:	2207      	movs	r2, #7
 8016010:	2100      	movs	r1, #0
 8016012:	4618      	mov	r0, r3
 8016014:	f7fe f997 	bl	8014346 <RegionCommonValueInRange>
 8016018:	4603      	mov	r3, r0
 801601a:	2b00      	cmp	r3, #0
 801601c:	d101      	bne.n	8016022 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801601e:	2301      	movs	r3, #1
 8016020:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	7a1b      	ldrb	r3, [r3, #8]
 8016028:	f343 1303 	sbfx	r3, r3, #4, #4
 801602c:	b25b      	sxtb	r3, r3
 801602e:	2207      	movs	r2, #7
 8016030:	2100      	movs	r1, #0
 8016032:	4618      	mov	r0, r3
 8016034:	f7fe f987 	bl	8014346 <RegionCommonValueInRange>
 8016038:	4603      	mov	r3, r0
 801603a:	2b00      	cmp	r3, #0
 801603c:	d101      	bne.n	8016042 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801603e:	2301      	movs	r3, #1
 8016040:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	7a1b      	ldrb	r3, [r3, #8]
 8016048:	f343 0303 	sbfx	r3, r3, #0, #4
 801604c:	b25a      	sxtb	r2, r3
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	7a1b      	ldrb	r3, [r3, #8]
 8016054:	f343 1303 	sbfx	r3, r3, #4, #4
 8016058:	b25b      	sxtb	r3, r3
 801605a:	429a      	cmp	r2, r3
 801605c:	dd01      	ble.n	8016062 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801605e:	2301      	movs	r3, #1
 8016060:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8016062:	7bbb      	ldrb	r3, [r7, #14]
 8016064:	f083 0301 	eor.w	r3, r3, #1
 8016068:	b2db      	uxtb	r3, r3
 801606a:	2b00      	cmp	r3, #0
 801606c:	d010      	beq.n	8016090 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	f107 020c 	add.w	r2, r7, #12
 8016078:	4611      	mov	r1, r2
 801607a:	4618      	mov	r0, r3
 801607c:	f7fe fee8 	bl	8014e50 <VerifyRfFreq>
 8016080:	4603      	mov	r3, r0
 8016082:	f083 0301 	eor.w	r3, r3, #1
 8016086:	b2db      	uxtb	r3, r3
 8016088:	2b00      	cmp	r3, #0
 801608a:	d001      	beq.n	8016090 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801608c:	2301      	movs	r3, #1
 801608e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8016090:	7bfb      	ldrb	r3, [r7, #15]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d004      	beq.n	80160a0 <RegionEU868ChannelAdd+0xcc>
 8016096:	7bbb      	ldrb	r3, [r7, #14]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d001      	beq.n	80160a0 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801609c:	2306      	movs	r3, #6
 801609e:	e035      	b.n	801610c <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80160a0:	7bfb      	ldrb	r3, [r7, #15]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d001      	beq.n	80160aa <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80160a6:	2305      	movs	r3, #5
 80160a8:	e030      	b.n	801610c <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80160aa:	7bbb      	ldrb	r3, [r7, #14]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d001      	beq.n	80160b4 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80160b0:	2304      	movs	r3, #4
 80160b2:	e02b      	b.n	801610c <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80160b4:	4b17      	ldr	r3, [pc, #92]	@ (8016114 <RegionEU868ChannelAdd+0x140>)
 80160b6:	6819      	ldr	r1, [r3, #0]
 80160b8:	7b7a      	ldrb	r2, [r7, #13]
 80160ba:	4613      	mov	r3, r2
 80160bc:	005b      	lsls	r3, r3, #1
 80160be:	4413      	add	r3, r2
 80160c0:	009b      	lsls	r3, r3, #2
 80160c2:	18c8      	adds	r0, r1, r3
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	220c      	movs	r2, #12
 80160ca:	4619      	mov	r1, r3
 80160cc:	f001 fb61 	bl	8017792 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80160d0:	4b10      	ldr	r3, [pc, #64]	@ (8016114 <RegionEU868ChannelAdd+0x140>)
 80160d2:	6819      	ldr	r1, [r3, #0]
 80160d4:	7b7a      	ldrb	r2, [r7, #13]
 80160d6:	7b38      	ldrb	r0, [r7, #12]
 80160d8:	4613      	mov	r3, r2
 80160da:	005b      	lsls	r3, r3, #1
 80160dc:	4413      	add	r3, r2
 80160de:	009b      	lsls	r3, r3, #2
 80160e0:	440b      	add	r3, r1
 80160e2:	3309      	adds	r3, #9
 80160e4:	4602      	mov	r2, r0
 80160e6:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80160e8:	4b0a      	ldr	r3, [pc, #40]	@ (8016114 <RegionEU868ChannelAdd+0x140>)
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	@ 0x480
 80160f0:	b21a      	sxth	r2, r3
 80160f2:	7b7b      	ldrb	r3, [r7, #13]
 80160f4:	2101      	movs	r1, #1
 80160f6:	fa01 f303 	lsl.w	r3, r1, r3
 80160fa:	b21b      	sxth	r3, r3
 80160fc:	4313      	orrs	r3, r2
 80160fe:	b21a      	sxth	r2, r3
 8016100:	4b04      	ldr	r3, [pc, #16]	@ (8016114 <RegionEU868ChannelAdd+0x140>)
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	b292      	uxth	r2, r2
 8016106:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    return LORAMAC_STATUS_OK;
 801610a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801610c:	4618      	mov	r0, r3
 801610e:	3710      	adds	r7, #16
 8016110:	46bd      	mov	sp, r7
 8016112:	bd80      	pop	{r7, pc}
 8016114:	2000138c 	.word	0x2000138c

08016118 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b086      	sub	sp, #24
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	781b      	ldrb	r3, [r3, #0]
 8016124:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016126:	7dfb      	ldrb	r3, [r7, #23]
 8016128:	2b02      	cmp	r3, #2
 801612a:	d801      	bhi.n	8016130 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 801612c:	2300      	movs	r3, #0
 801612e:	e016      	b.n	801615e <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8016130:	4b0d      	ldr	r3, [pc, #52]	@ (8016168 <RegionEU868ChannelsRemove+0x50>)
 8016132:	6819      	ldr	r1, [r3, #0]
 8016134:	7dfa      	ldrb	r2, [r7, #23]
 8016136:	4613      	mov	r3, r2
 8016138:	005b      	lsls	r3, r3, #1
 801613a:	4413      	add	r3, r2
 801613c:	009b      	lsls	r3, r3, #2
 801613e:	440b      	add	r3, r1
 8016140:	461a      	mov	r2, r3
 8016142:	2300      	movs	r3, #0
 8016144:	6013      	str	r3, [r2, #0]
 8016146:	6053      	str	r3, [r2, #4]
 8016148:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801614a:	4b07      	ldr	r3, [pc, #28]	@ (8016168 <RegionEU868ChannelsRemove+0x50>)
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8016152:	7df9      	ldrb	r1, [r7, #23]
 8016154:	2210      	movs	r2, #16
 8016156:	4618      	mov	r0, r3
 8016158:	f7fe f912 	bl	8014380 <RegionCommonChanDisable>
 801615c:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801615e:	4618      	mov	r0, r3
 8016160:	3718      	adds	r7, #24
 8016162:	46bd      	mov	sp, r7
 8016164:	bd80      	pop	{r7, pc}
 8016166:	bf00      	nop
 8016168:	2000138c 	.word	0x2000138c

0801616c <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801616c:	b590      	push	{r4, r7, lr}
 801616e:	b085      	sub	sp, #20
 8016170:	af00      	add	r7, sp, #0
 8016172:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801617a:	4b20      	ldr	r3, [pc, #128]	@ (80161fc <RegionEU868SetContinuousWave+0x90>)
 801617c:	681a      	ldr	r2, [r3, #0]
 801617e:	4b20      	ldr	r3, [pc, #128]	@ (8016200 <RegionEU868SetContinuousWave+0x94>)
 8016180:	6819      	ldr	r1, [r3, #0]
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	781b      	ldrb	r3, [r3, #0]
 8016186:	461c      	mov	r4, r3
 8016188:	4623      	mov	r3, r4
 801618a:	005b      	lsls	r3, r3, #1
 801618c:	4423      	add	r3, r4
 801618e:	009b      	lsls	r3, r3, #2
 8016190:	440b      	add	r3, r1
 8016192:	3309      	adds	r3, #9
 8016194:	781b      	ldrb	r3, [r3, #0]
 8016196:	4619      	mov	r1, r3
 8016198:	460b      	mov	r3, r1
 801619a:	005b      	lsls	r3, r3, #1
 801619c:	440b      	add	r3, r1
 801619e:	00db      	lsls	r3, r3, #3
 80161a0:	4413      	add	r3, r2
 80161a2:	3302      	adds	r3, #2
 80161a4:	f993 3000 	ldrsb.w	r3, [r3]
 80161a8:	4619      	mov	r1, r3
 80161aa:	f7fe fdd4 	bl	8014d56 <RegionCommonLimitTxPower>
 80161ae:	4603      	mov	r3, r0
 80161b0:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80161b2:	2300      	movs	r3, #0
 80161b4:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80161b6:	4b12      	ldr	r3, [pc, #72]	@ (8016200 <RegionEU868SetContinuousWave+0x94>)
 80161b8:	681a      	ldr	r2, [r3, #0]
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	781b      	ldrb	r3, [r3, #0]
 80161be:	4619      	mov	r1, r3
 80161c0:	460b      	mov	r3, r1
 80161c2:	005b      	lsls	r3, r3, #1
 80161c4:	440b      	add	r3, r1
 80161c6:	009b      	lsls	r3, r3, #2
 80161c8:	4413      	add	r3, r2
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	6859      	ldr	r1, [r3, #4]
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	689a      	ldr	r2, [r3, #8]
 80161d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80161da:	4618      	mov	r0, r3
 80161dc:	f7fe fc2c 	bl	8014a38 <RegionCommonComputeTxPower>
 80161e0:	4603      	mov	r3, r0
 80161e2:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80161e4:	4b07      	ldr	r3, [pc, #28]	@ (8016204 <RegionEU868SetContinuousWave+0x98>)
 80161e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80161e8:	687a      	ldr	r2, [r7, #4]
 80161ea:	8992      	ldrh	r2, [r2, #12]
 80161ec:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80161f0:	68b8      	ldr	r0, [r7, #8]
 80161f2:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 80161f4:	bf00      	nop
 80161f6:	3714      	adds	r7, #20
 80161f8:	46bd      	mov	sp, r7
 80161fa:	bd90      	pop	{r4, r7, pc}
 80161fc:	20001388 	.word	0x20001388
 8016200:	2000138c 	.word	0x2000138c
 8016204:	0801dc9c 	.word	0x0801dc9c

08016208 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016208:	b480      	push	{r7}
 801620a:	b085      	sub	sp, #20
 801620c:	af00      	add	r7, sp, #0
 801620e:	4603      	mov	r3, r0
 8016210:	71fb      	strb	r3, [r7, #7]
 8016212:	460b      	mov	r3, r1
 8016214:	71bb      	strb	r3, [r7, #6]
 8016216:	4613      	mov	r3, r2
 8016218:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801621a:	79ba      	ldrb	r2, [r7, #6]
 801621c:	797b      	ldrb	r3, [r7, #5]
 801621e:	1ad3      	subs	r3, r2, r3
 8016220:	b2db      	uxtb	r3, r3
 8016222:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8016224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016228:	2b00      	cmp	r3, #0
 801622a:	da01      	bge.n	8016230 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 801622c:	2300      	movs	r3, #0
 801622e:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8016230:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8016232:	4618      	mov	r0, r3
 8016234:	3714      	adds	r7, #20
 8016236:	46bd      	mov	sp, r7
 8016238:	bc80      	pop	{r7}
 801623a:	4770      	bx	lr

0801623c <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b084      	sub	sp, #16
 8016240:	af00      	add	r7, sp, #0
 8016242:	603b      	str	r3, [r7, #0]
 8016244:	4603      	mov	r3, r0
 8016246:	71fb      	strb	r3, [r7, #7]
 8016248:	460b      	mov	r3, r1
 801624a:	71bb      	strb	r3, [r7, #6]
 801624c:	4613      	mov	r3, r2
 801624e:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8016250:	79fb      	ldrb	r3, [r7, #7]
 8016252:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8016254:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801625c:	4611      	mov	r1, r2
 801625e:	4618      	mov	r0, r3
 8016260:	f7fe fd79 	bl	8014d56 <RegionCommonLimitTxPower>
 8016264:	4603      	mov	r3, r0
 8016266:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8016268:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801626c:	2b04      	cmp	r3, #4
 801626e:	d106      	bne.n	801627e <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8016270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016274:	2b02      	cmp	r3, #2
 8016276:	bfb8      	it	lt
 8016278:	2302      	movlt	r3, #2
 801627a:	73fb      	strb	r3, [r7, #15]
 801627c:	e00d      	b.n	801629a <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801627e:	2204      	movs	r2, #4
 8016280:	2100      	movs	r1, #0
 8016282:	6838      	ldr	r0, [r7, #0]
 8016284:	f7fe f8b0 	bl	80143e8 <RegionCommonCountChannels>
 8016288:	4603      	mov	r3, r0
 801628a:	2b31      	cmp	r3, #49	@ 0x31
 801628c:	d805      	bhi.n	801629a <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801628e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016292:	2b05      	cmp	r3, #5
 8016294:	bfb8      	it	lt
 8016296:	2305      	movlt	r3, #5
 8016298:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 801629a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801629e:	4618      	mov	r0, r3
 80162a0:	3710      	adds	r7, #16
 80162a2:	46bd      	mov	sp, r7
 80162a4:	bd80      	pop	{r7, pc}
	...

080162a8 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b082      	sub	sp, #8
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80162b0:	4b18      	ldr	r3, [pc, #96]	@ (8016314 <VerifyRfFreq+0x6c>)
 80162b2:	6a1b      	ldr	r3, [r3, #32]
 80162b4:	6878      	ldr	r0, [r7, #4]
 80162b6:	4798      	blx	r3
 80162b8:	4603      	mov	r3, r0
 80162ba:	f083 0301 	eor.w	r3, r3, #1
 80162be:	b2db      	uxtb	r3, r3
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d001      	beq.n	80162c8 <VerifyRfFreq+0x20>
    {
        return false;
 80162c4:	2300      	movs	r3, #0
 80162c6:	e021      	b.n	801630c <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	4a13      	ldr	r2, [pc, #76]	@ (8016318 <VerifyRfFreq+0x70>)
 80162cc:	4293      	cmp	r3, r2
 80162ce:	d910      	bls.n	80162f2 <VerifyRfFreq+0x4a>
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	4a12      	ldr	r2, [pc, #72]	@ (801631c <VerifyRfFreq+0x74>)
 80162d4:	4293      	cmp	r3, r2
 80162d6:	d80c      	bhi.n	80162f2 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 80162d8:	687a      	ldr	r2, [r7, #4]
 80162da:	4b11      	ldr	r3, [pc, #68]	@ (8016320 <VerifyRfFreq+0x78>)
 80162dc:	4413      	add	r3, r2
 80162de:	4a11      	ldr	r2, [pc, #68]	@ (8016324 <VerifyRfFreq+0x7c>)
 80162e0:	fba2 1203 	umull	r1, r2, r2, r3
 80162e4:	0c92      	lsrs	r2, r2, #18
 80162e6:	4910      	ldr	r1, [pc, #64]	@ (8016328 <VerifyRfFreq+0x80>)
 80162e8:	fb01 f202 	mul.w	r2, r1, r2
 80162ec:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 80162ee:	2a00      	cmp	r2, #0
 80162f0:	d001      	beq.n	80162f6 <VerifyRfFreq+0x4e>
    {
        return false;
 80162f2:	2300      	movs	r3, #0
 80162f4:	e00a      	b.n	801630c <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	4a0c      	ldr	r2, [pc, #48]	@ (801632c <VerifyRfFreq+0x84>)
 80162fa:	4293      	cmp	r3, r2
 80162fc:	d903      	bls.n	8016306 <VerifyRfFreq+0x5e>
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	4a06      	ldr	r2, [pc, #24]	@ (801631c <VerifyRfFreq+0x74>)
 8016302:	4293      	cmp	r3, r2
 8016304:	d901      	bls.n	801630a <VerifyRfFreq+0x62>
    {
        return false;
 8016306:	2300      	movs	r3, #0
 8016308:	e000      	b.n	801630c <VerifyRfFreq+0x64>
    }
    return true;
 801630a:	2301      	movs	r3, #1
}
 801630c:	4618      	mov	r0, r3
 801630e:	3708      	adds	r7, #8
 8016310:	46bd      	mov	sp, r7
 8016312:	bd80      	pop	{r7, pc}
 8016314:	0801dc9c 	.word	0x0801dc9c
 8016318:	3708709f 	.word	0x3708709f
 801631c:	374886e0 	.word	0x374886e0
 8016320:	c8f78f60 	.word	0xc8f78f60
 8016324:	6fd91d85 	.word	0x6fd91d85
 8016328:	000927c0 	.word	0x000927c0
 801632c:	35c8015f 	.word	0x35c8015f

08016330 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8016330:	b590      	push	{r4, r7, lr}
 8016332:	b089      	sub	sp, #36	@ 0x24
 8016334:	af04      	add	r7, sp, #16
 8016336:	4603      	mov	r3, r0
 8016338:	460a      	mov	r2, r1
 801633a:	71fb      	strb	r3, [r7, #7]
 801633c:	4613      	mov	r3, r2
 801633e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8016340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016344:	4a0f      	ldr	r2, [pc, #60]	@ (8016384 <GetTimeOnAir+0x54>)
 8016346:	5cd3      	ldrb	r3, [r2, r3]
 8016348:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 801634a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801634e:	490e      	ldr	r1, [pc, #56]	@ (8016388 <GetTimeOnAir+0x58>)
 8016350:	4618      	mov	r0, r3
 8016352:	f7fe fd15 	bl	8014d80 <RegionCommonGetBandwidth>
 8016356:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8016358:	4b0c      	ldr	r3, [pc, #48]	@ (801638c <GetTimeOnAir+0x5c>)
 801635a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801635c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016360:	88bb      	ldrh	r3, [r7, #4]
 8016362:	b2db      	uxtb	r3, r3
 8016364:	2101      	movs	r1, #1
 8016366:	9103      	str	r1, [sp, #12]
 8016368:	9302      	str	r3, [sp, #8]
 801636a:	2300      	movs	r3, #0
 801636c:	9301      	str	r3, [sp, #4]
 801636e:	2308      	movs	r3, #8
 8016370:	9300      	str	r3, [sp, #0]
 8016372:	2301      	movs	r3, #1
 8016374:	68b9      	ldr	r1, [r7, #8]
 8016376:	2001      	movs	r0, #1
 8016378:	47a0      	blx	r4
 801637a:	4603      	mov	r3, r0
}
 801637c:	4618      	mov	r0, r3
 801637e:	3714      	adds	r7, #20
 8016380:	46bd      	mov	sp, r7
 8016382:	bd90      	pop	{r4, r7, pc}
 8016384:	0801dc18 	.word	0x0801dc18
 8016388:	0801dc28 	.word	0x0801dc28
 801638c:	0801dc9c 	.word	0x0801dc9c

08016390 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b088      	sub	sp, #32
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8016398:	2300      	movs	r3, #0
 801639a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	781b      	ldrb	r3, [r3, #0]
 80163a0:	3b01      	subs	r3, #1
 80163a2:	2b38      	cmp	r3, #56	@ 0x38
 80163a4:	f200 813c 	bhi.w	8016620 <RegionUS915GetPhyParam+0x290>
 80163a8:	a201      	add	r2, pc, #4	@ (adr r2, 80163b0 <RegionUS915GetPhyParam+0x20>)
 80163aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163ae:	bf00      	nop
 80163b0:	08016495 	.word	0x08016495
 80163b4:	0801649b 	.word	0x0801649b
 80163b8:	08016621 	.word	0x08016621
 80163bc:	08016621 	.word	0x08016621
 80163c0:	08016621 	.word	0x08016621
 80163c4:	080164a1 	.word	0x080164a1
 80163c8:	08016621 	.word	0x08016621
 80163cc:	080164db 	.word	0x080164db
 80163d0:	08016621 	.word	0x08016621
 80163d4:	080164e1 	.word	0x080164e1
 80163d8:	080164e7 	.word	0x080164e7
 80163dc:	080164ed 	.word	0x080164ed
 80163e0:	080164f3 	.word	0x080164f3
 80163e4:	08016503 	.word	0x08016503
 80163e8:	08016513 	.word	0x08016513
 80163ec:	08016519 	.word	0x08016519
 80163f0:	08016521 	.word	0x08016521
 80163f4:	08016529 	.word	0x08016529
 80163f8:	08016531 	.word	0x08016531
 80163fc:	08016539 	.word	0x08016539
 8016400:	08016541 	.word	0x08016541
 8016404:	08016549 	.word	0x08016549
 8016408:	0801655d 	.word	0x0801655d
 801640c:	08016563 	.word	0x08016563
 8016410:	08016569 	.word	0x08016569
 8016414:	0801656f 	.word	0x0801656f
 8016418:	0801657b 	.word	0x0801657b
 801641c:	08016587 	.word	0x08016587
 8016420:	0801658d 	.word	0x0801658d
 8016424:	08016595 	.word	0x08016595
 8016428:	0801659b 	.word	0x0801659b
 801642c:	080165a1 	.word	0x080165a1
 8016430:	080165a7 	.word	0x080165a7
 8016434:	080164a7 	.word	0x080164a7
 8016438:	08016621 	.word	0x08016621
 801643c:	08016621 	.word	0x08016621
 8016440:	08016621 	.word	0x08016621
 8016444:	08016621 	.word	0x08016621
 8016448:	08016621 	.word	0x08016621
 801644c:	08016621 	.word	0x08016621
 8016450:	08016621 	.word	0x08016621
 8016454:	08016621 	.word	0x08016621
 8016458:	08016621 	.word	0x08016621
 801645c:	08016621 	.word	0x08016621
 8016460:	08016621 	.word	0x08016621
 8016464:	08016621 	.word	0x08016621
 8016468:	08016621 	.word	0x08016621
 801646c:	080165af 	.word	0x080165af
 8016470:	080165c3 	.word	0x080165c3
 8016474:	080165d1 	.word	0x080165d1
 8016478:	080165d7 	.word	0x080165d7
 801647c:	08016621 	.word	0x08016621
 8016480:	080165dd 	.word	0x080165dd
 8016484:	080165f1 	.word	0x080165f1
 8016488:	080165f7 	.word	0x080165f7
 801648c:	080165fd 	.word	0x080165fd
 8016490:	0801660d 	.word	0x0801660d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8016494:	2308      	movs	r3, #8
 8016496:	61bb      	str	r3, [r7, #24]
            break;
 8016498:	e0c3      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 801649a:	2300      	movs	r3, #0
 801649c:	61bb      	str	r3, [r7, #24]
            break;
 801649e:	e0c0      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 80164a0:	2300      	movs	r3, #0
 80164a2:	61bb      	str	r3, [r7, #24]
            break;
 80164a4:	e0bd      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80164ac:	733b      	strb	r3, [r7, #12]
 80164ae:	2304      	movs	r3, #4
 80164b0:	737b      	strb	r3, [r7, #13]
 80164b2:	2300      	movs	r3, #0
 80164b4:	73bb      	strb	r3, [r7, #14]
 80164b6:	2348      	movs	r3, #72	@ 0x48
 80164b8:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80164ba:	4b5d      	ldr	r3, [pc, #372]	@ (8016630 <RegionUS915GetPhyParam+0x2a0>)
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80164c2:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80164c4:	4b5a      	ldr	r3, [pc, #360]	@ (8016630 <RegionUS915GetPhyParam+0x2a0>)
 80164c6:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80164c8:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80164ca:	f107 030c 	add.w	r3, r7, #12
 80164ce:	4618      	mov	r0, r3
 80164d0:	f7fe fc03 	bl	8014cda <RegionCommonGetNextLowerTxDr>
 80164d4:	4603      	mov	r3, r0
 80164d6:	61bb      	str	r3, [r7, #24]
            break;
 80164d8:	e0a3      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 80164da:	2300      	movs	r3, #0
 80164dc:	61bb      	str	r3, [r7, #24]
            break;
 80164de:	e0a0      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 80164e0:	2300      	movs	r3, #0
 80164e2:	61bb      	str	r3, [r7, #24]
            break;
 80164e4:	e09d      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80164e6:	2340      	movs	r3, #64	@ 0x40
 80164e8:	61bb      	str	r3, [r7, #24]
            break;
 80164ea:	e09a      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80164ec:	2320      	movs	r3, #32
 80164ee:	61bb      	str	r3, [r7, #24]
            break;
 80164f0:	e097      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80164f8:	461a      	mov	r2, r3
 80164fa:	4b4e      	ldr	r3, [pc, #312]	@ (8016634 <RegionUS915GetPhyParam+0x2a4>)
 80164fc:	5c9b      	ldrb	r3, [r3, r2]
 80164fe:	61bb      	str	r3, [r7, #24]
            break;
 8016500:	e08f      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016508:	461a      	mov	r2, r3
 801650a:	4b4b      	ldr	r3, [pc, #300]	@ (8016638 <RegionUS915GetPhyParam+0x2a8>)
 801650c:	5c9b      	ldrb	r3, [r3, r2]
 801650e:	61bb      	str	r3, [r7, #24]
            break;
 8016510:	e087      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8016512:	2300      	movs	r3, #0
 8016514:	61bb      	str	r3, [r7, #24]
            break;
 8016516:	e084      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8016518:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 801651c:	61bb      	str	r3, [r7, #24]
            break;
 801651e:	e080      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8016520:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016524:	61bb      	str	r3, [r7, #24]
            break;
 8016526:	e07c      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8016528:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801652c:	61bb      	str	r3, [r7, #24]
            break;
 801652e:	e078      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8016530:	f241 3388 	movw	r3, #5000	@ 0x1388
 8016534:	61bb      	str	r3, [r7, #24]
            break;
 8016536:	e074      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8016538:	f241 7370 	movw	r3, #6000	@ 0x1770
 801653c:	61bb      	str	r3, [r7, #24]
            break;
 801653e:	e070      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8016540:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8016544:	61bb      	str	r3, [r7, #24]
            break;
 8016546:	e06c      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8016548:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801654c:	483b      	ldr	r0, [pc, #236]	@ (801663c <RegionUS915GetPhyParam+0x2ac>)
 801654e:	f001 f909 	bl	8017764 <randr>
 8016552:	4603      	mov	r3, r0
 8016554:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8016558:	61bb      	str	r3, [r7, #24]
            break;
 801655a:	e062      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801655c:	2300      	movs	r3, #0
 801655e:	61bb      	str	r3, [r7, #24]
            break;
 8016560:	e05f      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8016562:	4b37      	ldr	r3, [pc, #220]	@ (8016640 <RegionUS915GetPhyParam+0x2b0>)
 8016564:	61bb      	str	r3, [r7, #24]
            break;
 8016566:	e05c      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8016568:	2308      	movs	r3, #8
 801656a:	61bb      	str	r3, [r7, #24]
            break;
 801656c:	e059      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801656e:	4b30      	ldr	r3, [pc, #192]	@ (8016630 <RegionUS915GetPhyParam+0x2a0>)
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8016576:	61bb      	str	r3, [r7, #24]
            break;
 8016578:	e053      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801657a:	4b2d      	ldr	r3, [pc, #180]	@ (8016630 <RegionUS915GetPhyParam+0x2a0>)
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8016582:	61bb      	str	r3, [r7, #24]
            break;
 8016584:	e04d      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8016586:	2348      	movs	r3, #72	@ 0x48
 8016588:	61bb      	str	r3, [r7, #24]
            break;
 801658a:	e04a      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801658c:	4b28      	ldr	r3, [pc, #160]	@ (8016630 <RegionUS915GetPhyParam+0x2a0>)
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	61bb      	str	r3, [r7, #24]
            break;
 8016592:	e046      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8016594:	2300      	movs	r3, #0
 8016596:	61bb      	str	r3, [r7, #24]
            break;
 8016598:	e043      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801659a:	2300      	movs	r3, #0
 801659c:	61bb      	str	r3, [r7, #24]
            break;
 801659e:	e040      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 80165a0:	4b28      	ldr	r3, [pc, #160]	@ (8016644 <RegionUS915GetPhyParam+0x2b4>)
 80165a2:	61bb      	str	r3, [r7, #24]
            break;
 80165a4:	e03d      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 80165a6:	f04f 0300 	mov.w	r3, #0
 80165aa:	61bb      	str	r3, [r7, #24]
            break;
 80165ac:	e039      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	791b      	ldrb	r3, [r3, #4]
 80165b2:	4a25      	ldr	r2, [pc, #148]	@ (8016648 <RegionUS915GetPhyParam+0x2b8>)
 80165b4:	4922      	ldr	r1, [pc, #136]	@ (8016640 <RegionUS915GetPhyParam+0x2b0>)
 80165b6:	4618      	mov	r0, r3
 80165b8:	f7fd fcf1 	bl	8013f9e <RegionBaseUSCalcDownlinkFrequency>
 80165bc:	4603      	mov	r3, r0
 80165be:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 80165c0:	e02f      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 80165c2:	2317      	movs	r3, #23
 80165c4:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 80165c6:	2305      	movs	r3, #5
 80165c8:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 80165ca:	2303      	movs	r3, #3
 80165cc:	76bb      	strb	r3, [r7, #26]
            break;
 80165ce:	e028      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 80165d0:	2308      	movs	r3, #8
 80165d2:	61bb      	str	r3, [r7, #24]
            break;
 80165d4:	e025      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80165d6:	2308      	movs	r3, #8
 80165d8:	61bb      	str	r3, [r7, #24]
            break;
 80165da:	e022      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	791b      	ldrb	r3, [r3, #4]
 80165e0:	4a19      	ldr	r2, [pc, #100]	@ (8016648 <RegionUS915GetPhyParam+0x2b8>)
 80165e2:	4917      	ldr	r1, [pc, #92]	@ (8016640 <RegionUS915GetPhyParam+0x2b0>)
 80165e4:	4618      	mov	r0, r3
 80165e6:	f7fd fcda 	bl	8013f9e <RegionBaseUSCalcDownlinkFrequency>
 80165ea:	4603      	mov	r3, r0
 80165ec:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 80165ee:	e018      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 80165f0:	2308      	movs	r3, #8
 80165f2:	61bb      	str	r3, [r7, #24]
            break;
 80165f4:	e015      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80165f6:	2308      	movs	r3, #8
 80165f8:	61bb      	str	r3, [r7, #24]
            break;
 80165fa:	e012      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016602:	461a      	mov	r2, r3
 8016604:	4b11      	ldr	r3, [pc, #68]	@ (801664c <RegionUS915GetPhyParam+0x2bc>)
 8016606:	5c9b      	ldrb	r3, [r3, r2]
 8016608:	61bb      	str	r3, [r7, #24]
            break;
 801660a:	e00a      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016612:	490f      	ldr	r1, [pc, #60]	@ (8016650 <RegionUS915GetPhyParam+0x2c0>)
 8016614:	4618      	mov	r0, r3
 8016616:	f7fe fbb3 	bl	8014d80 <RegionCommonGetBandwidth>
 801661a:	4603      	mov	r3, r0
 801661c:	61bb      	str	r3, [r7, #24]
            break;
 801661e:	e000      	b.n	8016622 <RegionUS915GetPhyParam+0x292>
        }
        default:
        {
            break;
 8016620:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8016622:	69bb      	ldr	r3, [r7, #24]
 8016624:	61fb      	str	r3, [r7, #28]
 8016626:	69fb      	ldr	r3, [r7, #28]
}
 8016628:	4618      	mov	r0, r3
 801662a:	3720      	adds	r7, #32
 801662c:	46bd      	mov	sp, r7
 801662e:	bd80      	pop	{r7, pc}
 8016630:	20001394 	.word	0x20001394
 8016634:	0801dc7c 	.word	0x0801dc7c
 8016638:	0801dc8c 	.word	0x0801dc8c
 801663c:	fffffc18 	.word	0xfffffc18
 8016640:	370870a0 	.word	0x370870a0
 8016644:	4200999a 	.word	0x4200999a
 8016648:	000927c0 	.word	0x000927c0
 801664c:	0801dc18 	.word	0x0801dc18
 8016650:	0801dc28 	.word	0x0801dc28

08016654 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8016654:	b590      	push	{r4, r7, lr}
 8016656:	b085      	sub	sp, #20
 8016658:	af02      	add	r7, sp, #8
 801665a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801665c:	4b11      	ldr	r3, [pc, #68]	@ (80166a4 <RegionUS915SetBandTxDone+0x50>)
 801665e:	681a      	ldr	r2, [r3, #0]
 8016660:	4b11      	ldr	r3, [pc, #68]	@ (80166a8 <RegionUS915SetBandTxDone+0x54>)
 8016662:	6819      	ldr	r1, [r3, #0]
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	781b      	ldrb	r3, [r3, #0]
 8016668:	4618      	mov	r0, r3
 801666a:	4603      	mov	r3, r0
 801666c:	005b      	lsls	r3, r3, #1
 801666e:	4403      	add	r3, r0
 8016670:	009b      	lsls	r3, r3, #2
 8016672:	440b      	add	r3, r1
 8016674:	3309      	adds	r3, #9
 8016676:	781b      	ldrb	r3, [r3, #0]
 8016678:	4619      	mov	r1, r3
 801667a:	460b      	mov	r3, r1
 801667c:	005b      	lsls	r3, r3, #1
 801667e:	440b      	add	r3, r1
 8016680:	00db      	lsls	r3, r3, #3
 8016682:	18d0      	adds	r0, r2, r3
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	6899      	ldr	r1, [r3, #8]
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	785c      	ldrb	r4, [r3, #1]
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	691a      	ldr	r2, [r3, #16]
 8016690:	9200      	str	r2, [sp, #0]
 8016692:	68db      	ldr	r3, [r3, #12]
 8016694:	4622      	mov	r2, r4
 8016696:	f7fd fef9 	bl	801448c <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 801669a:	bf00      	nop
 801669c:	370c      	adds	r7, #12
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd90      	pop	{r4, r7, pc}
 80166a2:	bf00      	nop
 80166a4:	20001390 	.word	0x20001390
 80166a8:	20001394 	.word	0x20001394

080166ac <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b08a      	sub	sp, #40	@ 0x28
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 80166b4:	2301      	movs	r3, #1
 80166b6:	81bb      	strh	r3, [r7, #12]
 80166b8:	2300      	movs	r3, #0
 80166ba:	73bb      	strb	r3, [r7, #14]
 80166bc:	2300      	movs	r3, #0
 80166be:	613b      	str	r3, [r7, #16]
 80166c0:	2300      	movs	r3, #0
 80166c2:	617b      	str	r3, [r7, #20]
 80166c4:	2300      	movs	r3, #0
 80166c6:	61bb      	str	r3, [r7, #24]
 80166c8:	2300      	movs	r3, #0
 80166ca:	61fb      	str	r3, [r7, #28]
 80166cc:	2300      	movs	r3, #0
 80166ce:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	7a1b      	ldrb	r3, [r3, #8]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d007      	beq.n	80166ea <RegionUS915InitDefaults+0x3e>
 80166da:	2b00      	cmp	r3, #0
 80166dc:	f2c0 8106 	blt.w	80168ec <RegionUS915InitDefaults+0x240>
 80166e0:	3b01      	subs	r3, #1
 80166e2:	2b01      	cmp	r3, #1
 80166e4:	f200 8102 	bhi.w	80168ec <RegionUS915InitDefaults+0x240>
 80166e8:	e0ce      	b.n	8016888 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	f000 80fe 	beq.w	80168f0 <RegionUS915InitDefaults+0x244>
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	685b      	ldr	r3, [r3, #4]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	f000 80f9 	beq.w	80168f0 <RegionUS915InitDefaults+0x244>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	4a7d      	ldr	r2, [pc, #500]	@ (80168f8 <RegionUS915InitDefaults+0x24c>)
 8016704:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	685b      	ldr	r3, [r3, #4]
 801670a:	4a7c      	ldr	r2, [pc, #496]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 801670c:	6013      	str	r3, [r2, #0]

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801670e:	4b7a      	ldr	r3, [pc, #488]	@ (80168f8 <RegionUS915InitDefaults+0x24c>)
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	2200      	movs	r2, #0
 8016714:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8016718:	4b77      	ldr	r3, [pc, #476]	@ (80168f8 <RegionUS915InitDefaults+0x24c>)
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	2200      	movs	r2, #0
 801671e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8016722:	4b75      	ldr	r3, [pc, #468]	@ (80168f8 <RegionUS915InitDefaults+0x24c>)
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	4618      	mov	r0, r3
 8016728:	f107 030c 	add.w	r3, r7, #12
 801672c:	2218      	movs	r2, #24
 801672e:	4619      	mov	r1, r3
 8016730:	f001 f82f 	bl	8017792 <memcpy1>
            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8016734:	2300      	movs	r3, #0
 8016736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801673a:	e02e      	b.n	801679a <RegionUS915InitDefaults+0xee>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801673c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016740:	4a6f      	ldr	r2, [pc, #444]	@ (8016900 <RegionUS915InitDefaults+0x254>)
 8016742:	fb03 f202 	mul.w	r2, r3, r2
 8016746:	4b6f      	ldr	r3, [pc, #444]	@ (8016904 <RegionUS915InitDefaults+0x258>)
 8016748:	4413      	add	r3, r2
 801674a:	4a6c      	ldr	r2, [pc, #432]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 801674c:	6811      	ldr	r1, [r2, #0]
 801674e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8016752:	4618      	mov	r0, r3
 8016754:	4613      	mov	r3, r2
 8016756:	005b      	lsls	r3, r3, #1
 8016758:	4413      	add	r3, r2
 801675a:	009b      	lsls	r3, r3, #2
 801675c:	440b      	add	r3, r1
 801675e:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8016760:	4b66      	ldr	r3, [pc, #408]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 8016762:	6819      	ldr	r1, [r3, #0]
 8016764:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8016768:	4613      	mov	r3, r2
 801676a:	005b      	lsls	r3, r3, #1
 801676c:	4413      	add	r3, r2
 801676e:	009b      	lsls	r3, r3, #2
 8016770:	440b      	add	r3, r1
 8016772:	3308      	adds	r3, #8
 8016774:	2230      	movs	r2, #48	@ 0x30
 8016776:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8016778:	4b60      	ldr	r3, [pc, #384]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 801677a:	6819      	ldr	r1, [r3, #0]
 801677c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8016780:	4613      	mov	r3, r2
 8016782:	005b      	lsls	r3, r3, #1
 8016784:	4413      	add	r3, r2
 8016786:	009b      	lsls	r3, r3, #2
 8016788:	440b      	add	r3, r1
 801678a:	3309      	adds	r3, #9
 801678c:	2200      	movs	r2, #0
 801678e:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8016790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016794:	3301      	adds	r3, #1
 8016796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801679a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801679e:	2b3f      	cmp	r3, #63	@ 0x3f
 80167a0:	d9cc      	bls.n	801673c <RegionUS915InitDefaults+0x90>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80167a2:	2340      	movs	r3, #64	@ 0x40
 80167a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80167a8:	e02f      	b.n	801680a <RegionUS915InitDefaults+0x15e>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 80167aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80167ae:	3b40      	subs	r3, #64	@ 0x40
 80167b0:	4a55      	ldr	r2, [pc, #340]	@ (8016908 <RegionUS915InitDefaults+0x25c>)
 80167b2:	fb03 f202 	mul.w	r2, r3, r2
 80167b6:	4b55      	ldr	r3, [pc, #340]	@ (801690c <RegionUS915InitDefaults+0x260>)
 80167b8:	4413      	add	r3, r2
 80167ba:	4a50      	ldr	r2, [pc, #320]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 80167bc:	6811      	ldr	r1, [r2, #0]
 80167be:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80167c2:	4618      	mov	r0, r3
 80167c4:	4613      	mov	r3, r2
 80167c6:	005b      	lsls	r3, r3, #1
 80167c8:	4413      	add	r3, r2
 80167ca:	009b      	lsls	r3, r3, #2
 80167cc:	440b      	add	r3, r1
 80167ce:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 80167d0:	4b4a      	ldr	r3, [pc, #296]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 80167d2:	6819      	ldr	r1, [r3, #0]
 80167d4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80167d8:	4613      	mov	r3, r2
 80167da:	005b      	lsls	r3, r3, #1
 80167dc:	4413      	add	r3, r2
 80167de:	009b      	lsls	r3, r3, #2
 80167e0:	440b      	add	r3, r1
 80167e2:	3308      	adds	r3, #8
 80167e4:	2244      	movs	r2, #68	@ 0x44
 80167e6:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80167e8:	4b44      	ldr	r3, [pc, #272]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 80167ea:	6819      	ldr	r1, [r3, #0]
 80167ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80167f0:	4613      	mov	r3, r2
 80167f2:	005b      	lsls	r3, r3, #1
 80167f4:	4413      	add	r3, r2
 80167f6:	009b      	lsls	r3, r3, #2
 80167f8:	440b      	add	r3, r1
 80167fa:	3309      	adds	r3, #9
 80167fc:	2200      	movs	r2, #0
 80167fe:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8016800:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016804:	3301      	adds	r3, #1
 8016806:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801680a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801680e:	2b47      	cmp	r3, #71	@ 0x47
 8016810:	d9cb      	bls.n	80167aa <RegionUS915InitDefaults+0xfe>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8016812:	4b3a      	ldr	r3, [pc, #232]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801681a:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801681e:	4b37      	ldr	r3, [pc, #220]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016826:	f8a3 248e 	strh.w	r2, [r3, #1166]	@ 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801682a:	4b34      	ldr	r3, [pc, #208]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016832:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8016836:	4b31      	ldr	r3, [pc, #196]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801683e:	f8a3 2492 	strh.w	r2, [r3, #1170]	@ 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8016842:	4b2e      	ldr	r3, [pc, #184]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	22ff      	movs	r2, #255	@ 0xff
 8016848:	f8a3 2494 	strh.w	r2, [r3, #1172]	@ 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801684c:	4b2b      	ldr	r3, [pc, #172]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	2200      	movs	r2, #0
 8016852:	f8a3 2496 	strh.w	r2, [r3, #1174]	@ 0x496
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016856:	4b29      	ldr	r3, [pc, #164]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 801685e:	4b27      	ldr	r3, [pc, #156]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8016866:	2206      	movs	r2, #6
 8016868:	4619      	mov	r1, r3
 801686a:	f7fd fde9 	bl	8014440 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801686e:	4b22      	ldr	r3, [pc, #136]	@ (80168f8 <RegionUS915InitDefaults+0x24c>)
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8016876:	4b21      	ldr	r3, [pc, #132]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801687e:	2206      	movs	r2, #6
 8016880:	4619      	mov	r1, r3
 8016882:	f7fd fddd 	bl	8014440 <RegionCommonChanMaskCopy>
            break;
 8016886:	e034      	b.n	80168f2 <RegionUS915InitDefaults+0x246>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016888:	4b1c      	ldr	r3, [pc, #112]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8016890:	4b1a      	ldr	r3, [pc, #104]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8016898:	2206      	movs	r2, #6
 801689a:	4619      	mov	r1, r3
 801689c:	f7fd fdd0 	bl	8014440 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80168a0:	2300      	movs	r3, #0
 80168a2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80168a6:	e01c      	b.n	80168e2 <RegionUS915InitDefaults+0x236>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80168a8:	4b13      	ldr	r3, [pc, #76]	@ (80168f8 <RegionUS915InitDefaults+0x24c>)
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80168b0:	3248      	adds	r2, #72	@ 0x48
 80168b2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80168b6:	4b11      	ldr	r3, [pc, #68]	@ (80168fc <RegionUS915InitDefaults+0x250>)
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80168be:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 80168c2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80168c6:	4b0c      	ldr	r3, [pc, #48]	@ (80168f8 <RegionUS915InitDefaults+0x24c>)
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80168ce:	4001      	ands	r1, r0
 80168d0:	b289      	uxth	r1, r1
 80168d2:	3248      	adds	r2, #72	@ 0x48
 80168d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80168d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80168dc:	3301      	adds	r3, #1
 80168de:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80168e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80168e6:	2b05      	cmp	r3, #5
 80168e8:	d9de      	bls.n	80168a8 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 80168ea:	e002      	b.n	80168f2 <RegionUS915InitDefaults+0x246>
        }
        default:
        {
            break;
 80168ec:	bf00      	nop
 80168ee:	e000      	b.n	80168f2 <RegionUS915InitDefaults+0x246>
                return;
 80168f0:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 80168f2:	3728      	adds	r7, #40	@ 0x28
 80168f4:	46bd      	mov	sp, r7
 80168f6:	bd80      	pop	{r7, pc}
 80168f8:	20001390 	.word	0x20001390
 80168fc:	20001394 	.word	0x20001394
 8016900:	00030d40 	.word	0x00030d40
 8016904:	35c80160 	.word	0x35c80160
 8016908:	00186a00 	.word	0x00186a00
 801690c:	35d2afc0 	.word	0x35d2afc0

08016910 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b082      	sub	sp, #8
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
 8016918:	460b      	mov	r3, r1
 801691a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 801691c:	78fb      	ldrb	r3, [r7, #3]
 801691e:	2b0f      	cmp	r3, #15
 8016920:	d858      	bhi.n	80169d4 <RegionUS915Verify+0xc4>
 8016922:	a201      	add	r2, pc, #4	@ (adr r2, 8016928 <RegionUS915Verify+0x18>)
 8016924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016928:	08016969 	.word	0x08016969
 801692c:	080169d5 	.word	0x080169d5
 8016930:	080169d5 	.word	0x080169d5
 8016934:	080169d5 	.word	0x080169d5
 8016938:	080169d5 	.word	0x080169d5
 801693c:	08016977 	.word	0x08016977
 8016940:	08016977 	.word	0x08016977
 8016944:	08016995 	.word	0x08016995
 8016948:	080169d5 	.word	0x080169d5
 801694c:	080169b3 	.word	0x080169b3
 8016950:	080169b3 	.word	0x080169b3
 8016954:	080169d5 	.word	0x080169d5
 8016958:	080169d5 	.word	0x080169d5
 801695c:	080169d5 	.word	0x080169d5
 8016960:	080169d5 	.word	0x080169d5
 8016964:	080169d1 	.word	0x080169d1
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	4618      	mov	r0, r3
 801696e:	f7ff fc9b 	bl	80162a8 <VerifyRfFreq>
 8016972:	4603      	mov	r3, r0
 8016974:	e02f      	b.n	80169d6 <RegionUS915Verify+0xc6>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	f993 3000 	ldrsb.w	r3, [r3]
 801697c:	2204      	movs	r2, #4
 801697e:	2100      	movs	r1, #0
 8016980:	4618      	mov	r0, r3
 8016982:	f7fd fce0 	bl	8014346 <RegionCommonValueInRange>
 8016986:	4603      	mov	r3, r0
 8016988:	2b00      	cmp	r3, #0
 801698a:	bf14      	ite	ne
 801698c:	2301      	movne	r3, #1
 801698e:	2300      	moveq	r3, #0
 8016990:	b2db      	uxtb	r3, r3
 8016992:	e020      	b.n	80169d6 <RegionUS915Verify+0xc6>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	f993 3000 	ldrsb.w	r3, [r3]
 801699a:	220d      	movs	r2, #13
 801699c:	2108      	movs	r1, #8
 801699e:	4618      	mov	r0, r3
 80169a0:	f7fd fcd1 	bl	8014346 <RegionCommonValueInRange>
 80169a4:	4603      	mov	r3, r0
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	bf14      	ite	ne
 80169aa:	2301      	movne	r3, #1
 80169ac:	2300      	moveq	r3, #0
 80169ae:	b2db      	uxtb	r3, r3
 80169b0:	e011      	b.n	80169d6 <RegionUS915Verify+0xc6>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	f993 3000 	ldrsb.w	r3, [r3]
 80169b8:	220e      	movs	r2, #14
 80169ba:	2100      	movs	r1, #0
 80169bc:	4618      	mov	r0, r3
 80169be:	f7fd fcc2 	bl	8014346 <RegionCommonValueInRange>
 80169c2:	4603      	mov	r3, r0
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	bf14      	ite	ne
 80169c8:	2301      	movne	r3, #1
 80169ca:	2300      	moveq	r3, #0
 80169cc:	b2db      	uxtb	r3, r3
 80169ce:	e002      	b.n	80169d6 <RegionUS915Verify+0xc6>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 80169d0:	2300      	movs	r3, #0
 80169d2:	e000      	b.n	80169d6 <RegionUS915Verify+0xc6>
        }
        default:
            return false;
 80169d4:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 80169d6:	4618      	mov	r0, r3
 80169d8:	3708      	adds	r7, #8
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}
 80169de:	bf00      	nop

080169e0 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80169e0:	b480      	push	{r7}
 80169e2:	b085      	sub	sp, #20
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	791b      	ldrb	r3, [r3, #4]
 80169ec:	2b10      	cmp	r3, #16
 80169ee:	d160      	bne.n	8016ab2 <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	330f      	adds	r3, #15
 80169f6:	781b      	ldrb	r3, [r3, #0]
 80169f8:	2b01      	cmp	r3, #1
 80169fa:	d15c      	bne.n	8016ab6 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80169fc:	2300      	movs	r3, #0
 80169fe:	73fb      	strb	r3, [r7, #15]
 8016a00:	2300      	movs	r3, #0
 8016a02:	73bb      	strb	r3, [r7, #14]
 8016a04:	e051      	b.n	8016aaa <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	681a      	ldr	r2, [r3, #0]
 8016a0a:	7bbb      	ldrb	r3, [r7, #14]
 8016a0c:	4413      	add	r3, r2
 8016a0e:	7819      	ldrb	r1, [r3, #0]
 8016a10:	4b2b      	ldr	r3, [pc, #172]	@ (8016ac0 <RegionUS915ApplyCFList+0xe0>)
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	7bfa      	ldrb	r2, [r7, #15]
 8016a16:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016a1a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8016a1e:	4b28      	ldr	r3, [pc, #160]	@ (8016ac0 <RegionUS915ApplyCFList+0xe0>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	7bfa      	ldrb	r2, [r7, #15]
 8016a24:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016a28:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	681a      	ldr	r2, [r3, #0]
 8016a30:	7bbb      	ldrb	r3, [r7, #14]
 8016a32:	3301      	adds	r3, #1
 8016a34:	4413      	add	r3, r2
 8016a36:	781b      	ldrb	r3, [r3, #0]
 8016a38:	021b      	lsls	r3, r3, #8
 8016a3a:	b299      	uxth	r1, r3
 8016a3c:	4b20      	ldr	r3, [pc, #128]	@ (8016ac0 <RegionUS915ApplyCFList+0xe0>)
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	7bfa      	ldrb	r2, [r7, #15]
 8016a42:	4301      	orrs	r1, r0
 8016a44:	b289      	uxth	r1, r1
 8016a46:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016a4a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 8016a4e:	7bfb      	ldrb	r3, [r7, #15]
 8016a50:	2b04      	cmp	r3, #4
 8016a52:	d10f      	bne.n	8016a74 <RegionUS915ApplyCFList+0x94>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8016a54:	4b1a      	ldr	r3, [pc, #104]	@ (8016ac0 <RegionUS915ApplyCFList+0xe0>)
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	7bfa      	ldrb	r2, [r7, #15]
 8016a5a:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016a5e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8016a62:	4b17      	ldr	r3, [pc, #92]	@ (8016ac0 <RegionUS915ApplyCFList+0xe0>)
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	7bfa      	ldrb	r2, [r7, #15]
 8016a68:	b2c9      	uxtb	r1, r1
 8016a6a:	b289      	uxth	r1, r1
 8016a6c:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016a70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8016a74:	4b13      	ldr	r3, [pc, #76]	@ (8016ac4 <RegionUS915ApplyCFList+0xe4>)
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	7bfa      	ldrb	r2, [r7, #15]
 8016a7a:	3248      	adds	r2, #72	@ 0x48
 8016a7c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8016a80:	4b0f      	ldr	r3, [pc, #60]	@ (8016ac0 <RegionUS915ApplyCFList+0xe0>)
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	7bfa      	ldrb	r2, [r7, #15]
 8016a86:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016a8a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8016a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8016ac4 <RegionUS915ApplyCFList+0xe4>)
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	7bfa      	ldrb	r2, [r7, #15]
 8016a94:	4001      	ands	r1, r0
 8016a96:	b289      	uxth	r1, r1
 8016a98:	3248      	adds	r2, #72	@ 0x48
 8016a9a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8016a9e:	7bfb      	ldrb	r3, [r7, #15]
 8016aa0:	3301      	adds	r3, #1
 8016aa2:	73fb      	strb	r3, [r7, #15]
 8016aa4:	7bbb      	ldrb	r3, [r7, #14]
 8016aa6:	3302      	adds	r3, #2
 8016aa8:	73bb      	strb	r3, [r7, #14]
 8016aaa:	7bfb      	ldrb	r3, [r7, #15]
 8016aac:	2b04      	cmp	r3, #4
 8016aae:	d9aa      	bls.n	8016a06 <RegionUS915ApplyCFList+0x26>
 8016ab0:	e002      	b.n	8016ab8 <RegionUS915ApplyCFList+0xd8>
        return;
 8016ab2:	bf00      	nop
 8016ab4:	e000      	b.n	8016ab8 <RegionUS915ApplyCFList+0xd8>
        return;
 8016ab6:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8016ab8:	3714      	adds	r7, #20
 8016aba:	46bd      	mov	sp, r7
 8016abc:	bc80      	pop	{r7}
 8016abe:	4770      	bx	lr
 8016ac0:	20001394 	.word	0x20001394
 8016ac4:	20001390 	.word	0x20001390

08016ac8 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b084      	sub	sp, #16
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	2204      	movs	r2, #4
 8016ad6:	2100      	movs	r1, #0
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f7fd fc85 	bl	80143e8 <RegionCommonCountChannels>
 8016ade:	4603      	mov	r3, r0
 8016ae0:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 8016ae2:	7bbb      	ldrb	r3, [r7, #14]
 8016ae4:	2b01      	cmp	r3, #1
 8016ae6:	d804      	bhi.n	8016af2 <RegionUS915ChanMaskSet+0x2a>
 8016ae8:	7bbb      	ldrb	r3, [r7, #14]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d001      	beq.n	8016af2 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 8016aee:	2300      	movs	r3, #0
 8016af0:	e04c      	b.n	8016b8c <RegionUS915ChanMaskSet+0xc4>
    }

    switch( chanMaskSet->ChannelsMaskType )
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	791b      	ldrb	r3, [r3, #4]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d002      	beq.n	8016b00 <RegionUS915ChanMaskSet+0x38>
 8016afa:	2b01      	cmp	r3, #1
 8016afc:	d038      	beq.n	8016b70 <RegionUS915ChanMaskSet+0xa8>
 8016afe:	e042      	b.n	8016b86 <RegionUS915ChanMaskSet+0xbe>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016b00:	4b24      	ldr	r3, [pc, #144]	@ (8016b94 <RegionUS915ChanMaskSet+0xcc>)
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	2206      	movs	r2, #6
 8016b0e:	4619      	mov	r1, r3
 8016b10:	f7fd fc96 	bl	8014440 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8016b14:	4b1f      	ldr	r3, [pc, #124]	@ (8016b94 <RegionUS915ChanMaskSet+0xcc>)
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	f8b3 2494 	ldrh.w	r2, [r3, #1172]	@ 0x494
 8016b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8016b94 <RegionUS915ChanMaskSet+0xcc>)
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	b2d2      	uxtb	r2, r2
 8016b22:	b292      	uxth	r2, r2
 8016b24:	f8a3 2494 	strh.w	r2, [r3, #1172]	@ 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8016b28:	4b1a      	ldr	r3, [pc, #104]	@ (8016b94 <RegionUS915ChanMaskSet+0xcc>)
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	2200      	movs	r2, #0
 8016b2e:	f8a3 2496 	strh.w	r2, [r3, #1174]	@ 0x496

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8016b32:	2300      	movs	r3, #0
 8016b34:	73fb      	strb	r3, [r7, #15]
 8016b36:	e017      	b.n	8016b68 <RegionUS915ChanMaskSet+0xa0>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8016b38:	4b17      	ldr	r3, [pc, #92]	@ (8016b98 <RegionUS915ChanMaskSet+0xd0>)
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	7bfa      	ldrb	r2, [r7, #15]
 8016b3e:	3248      	adds	r2, #72	@ 0x48
 8016b40:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8016b44:	4b13      	ldr	r3, [pc, #76]	@ (8016b94 <RegionUS915ChanMaskSet+0xcc>)
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	7bfa      	ldrb	r2, [r7, #15]
 8016b4a:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016b4e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8016b52:	4b11      	ldr	r3, [pc, #68]	@ (8016b98 <RegionUS915ChanMaskSet+0xd0>)
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	7bfa      	ldrb	r2, [r7, #15]
 8016b58:	4001      	ands	r1, r0
 8016b5a:	b289      	uxth	r1, r1
 8016b5c:	3248      	adds	r2, #72	@ 0x48
 8016b5e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8016b62:	7bfb      	ldrb	r3, [r7, #15]
 8016b64:	3301      	adds	r3, #1
 8016b66:	73fb      	strb	r3, [r7, #15]
 8016b68:	7bfb      	ldrb	r3, [r7, #15]
 8016b6a:	2b05      	cmp	r3, #5
 8016b6c:	d9e4      	bls.n	8016b38 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8016b6e:	e00c      	b.n	8016b8a <RegionUS915ChanMaskSet+0xc2>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016b70:	4b08      	ldr	r3, [pc, #32]	@ (8016b94 <RegionUS915ChanMaskSet+0xcc>)
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	f203 408c 	addw	r0, r3, #1164	@ 0x48c
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	2206      	movs	r2, #6
 8016b7e:	4619      	mov	r1, r3
 8016b80:	f7fd fc5e 	bl	8014440 <RegionCommonChanMaskCopy>
            break;
 8016b84:	e001      	b.n	8016b8a <RegionUS915ChanMaskSet+0xc2>
        }
        default:
            return false;
 8016b86:	2300      	movs	r3, #0
 8016b88:	e000      	b.n	8016b8c <RegionUS915ChanMaskSet+0xc4>
    }
    return true;
 8016b8a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	3710      	adds	r7, #16
 8016b90:	46bd      	mov	sp, r7
 8016b92:	bd80      	pop	{r7, pc}
 8016b94:	20001394 	.word	0x20001394
 8016b98:	20001390 	.word	0x20001390

08016b9c <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016b9c:	b580      	push	{r7, lr}
 8016b9e:	b088      	sub	sp, #32
 8016ba0:	af02      	add	r7, sp, #8
 8016ba2:	60ba      	str	r2, [r7, #8]
 8016ba4:	607b      	str	r3, [r7, #4]
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	73fb      	strb	r3, [r7, #15]
 8016baa:	460b      	mov	r3, r1
 8016bac:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 8016bae:	2300      	movs	r3, #0
 8016bb0:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8016bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016bb6:	2b0d      	cmp	r3, #13
 8016bb8:	bfa8      	it	ge
 8016bba:	230d      	movge	r3, #13
 8016bbc:	b25a      	sxtb	r2, r3
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016bc8:	4916      	ldr	r1, [pc, #88]	@ (8016c24 <RegionUS915ComputeRxWindowParameters+0x88>)
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f7fe f8d8 	bl	8014d80 <RegionCommonGetBandwidth>
 8016bd0:	4603      	mov	r3, r0
 8016bd2:	b2da      	uxtb	r2, r3
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016bde:	461a      	mov	r2, r3
 8016be0:	4b11      	ldr	r3, [pc, #68]	@ (8016c28 <RegionUS915ComputeRxWindowParameters+0x8c>)
 8016be2:	5c9a      	ldrb	r2, [r3, r2]
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016bea:	4619      	mov	r1, r3
 8016bec:	4b0d      	ldr	r3, [pc, #52]	@ (8016c24 <RegionUS915ComputeRxWindowParameters+0x88>)
 8016bee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016bf2:	4619      	mov	r1, r3
 8016bf4:	4610      	mov	r0, r2
 8016bf6:	f7fd fe41 	bl	801487c <RegionCommonComputeSymbolTimeLoRa>
 8016bfa:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8016c2c <RegionUS915ComputeRxWindowParameters+0x90>)
 8016bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016c00:	4798      	blx	r3
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	3308      	adds	r3, #8
 8016c06:	687a      	ldr	r2, [r7, #4]
 8016c08:	320c      	adds	r2, #12
 8016c0a:	7bb9      	ldrb	r1, [r7, #14]
 8016c0c:	9201      	str	r2, [sp, #4]
 8016c0e:	9300      	str	r3, [sp, #0]
 8016c10:	4603      	mov	r3, r0
 8016c12:	68ba      	ldr	r2, [r7, #8]
 8016c14:	6978      	ldr	r0, [r7, #20]
 8016c16:	f7fd fe57 	bl	80148c8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8016c1a:	bf00      	nop
 8016c1c:	3718      	adds	r7, #24
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	bd80      	pop	{r7, pc}
 8016c22:	bf00      	nop
 8016c24:	0801dc28 	.word	0x0801dc28
 8016c28:	0801dc18 	.word	0x0801dc18
 8016c2c:	0801dc9c 	.word	0x0801dc9c

08016c30 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016c30:	b590      	push	{r4, r7, lr}
 8016c32:	b091      	sub	sp, #68	@ 0x44
 8016c34:	af0a      	add	r7, sp, #40	@ 0x28
 8016c36:	6078      	str	r0, [r7, #4]
 8016c38:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	785b      	ldrb	r3, [r3, #1]
 8016c3e:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8016c40:	2300      	movs	r3, #0
 8016c42:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8016c44:	2300      	movs	r3, #0
 8016c46:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	685b      	ldr	r3, [r3, #4]
 8016c4c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8016c4e:	4b34      	ldr	r3, [pc, #208]	@ (8016d20 <RegionUS915RxConfig+0xf0>)
 8016c50:	685b      	ldr	r3, [r3, #4]
 8016c52:	4798      	blx	r3
 8016c54:	4603      	mov	r3, r0
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d001      	beq.n	8016c5e <RegionUS915RxConfig+0x2e>
    {
        return false;
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	e05c      	b.n	8016d18 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	7cdb      	ldrb	r3, [r3, #19]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d109      	bne.n	8016c7a <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	781b      	ldrb	r3, [r3, #0]
 8016c6a:	f003 0307 	and.w	r3, r3, #7
 8016c6e:	4a2d      	ldr	r2, [pc, #180]	@ (8016d24 <RegionUS915RxConfig+0xf4>)
 8016c70:	fb03 f202 	mul.w	r2, r3, r2
 8016c74:	4b2c      	ldr	r3, [pc, #176]	@ (8016d28 <RegionUS915RxConfig+0xf8>)
 8016c76:	4413      	add	r3, r2
 8016c78:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8016c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c7e:	4a2b      	ldr	r2, [pc, #172]	@ (8016d2c <RegionUS915RxConfig+0xfc>)
 8016c80:	5cd3      	ldrb	r3, [r2, r3]
 8016c82:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8016c84:	4b26      	ldr	r3, [pc, #152]	@ (8016d20 <RegionUS915RxConfig+0xf0>)
 8016c86:	68db      	ldr	r3, [r3, #12]
 8016c88:	6938      	ldr	r0, [r7, #16]
 8016c8a:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016c8c:	4b24      	ldr	r3, [pc, #144]	@ (8016d20 <RegionUS915RxConfig+0xf0>)
 8016c8e:	699c      	ldr	r4, [r3, #24]
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	789b      	ldrb	r3, [r3, #2]
 8016c94:	4618      	mov	r0, r3
 8016c96:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	689b      	ldr	r3, [r3, #8]
 8016c9e:	b29b      	uxth	r3, r3
 8016ca0:	687a      	ldr	r2, [r7, #4]
 8016ca2:	7c92      	ldrb	r2, [r2, #18]
 8016ca4:	9209      	str	r2, [sp, #36]	@ 0x24
 8016ca6:	2201      	movs	r2, #1
 8016ca8:	9208      	str	r2, [sp, #32]
 8016caa:	2200      	movs	r2, #0
 8016cac:	9207      	str	r2, [sp, #28]
 8016cae:	2200      	movs	r2, #0
 8016cb0:	9206      	str	r2, [sp, #24]
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	9205      	str	r2, [sp, #20]
 8016cb6:	2200      	movs	r2, #0
 8016cb8:	9204      	str	r2, [sp, #16]
 8016cba:	2200      	movs	r2, #0
 8016cbc:	9203      	str	r2, [sp, #12]
 8016cbe:	9302      	str	r3, [sp, #8]
 8016cc0:	2308      	movs	r3, #8
 8016cc2:	9301      	str	r3, [sp, #4]
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	9300      	str	r3, [sp, #0]
 8016cc8:	2301      	movs	r3, #1
 8016cca:	460a      	mov	r2, r1
 8016ccc:	4601      	mov	r1, r0
 8016cce:	2001      	movs	r0, #1
 8016cd0:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	7c5b      	ldrb	r3, [r3, #17]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d005      	beq.n	8016ce6 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8016cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016cde:	4a14      	ldr	r2, [pc, #80]	@ (8016d30 <RegionUS915RxConfig+0x100>)
 8016ce0:	5cd3      	ldrb	r3, [r2, r3]
 8016ce2:	75fb      	strb	r3, [r7, #23]
 8016ce4:	e004      	b.n	8016cf0 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8016ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016cea:	4a12      	ldr	r2, [pc, #72]	@ (8016d34 <RegionUS915RxConfig+0x104>)
 8016cec:	5cd3      	ldrb	r3, [r2, r3]
 8016cee:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8016cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8016d20 <RegionUS915RxConfig+0xf0>)
 8016cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016cf4:	7dfa      	ldrb	r2, [r7, #23]
 8016cf6:	320d      	adds	r2, #13
 8016cf8:	b2d2      	uxtb	r2, r2
 8016cfa:	4611      	mov	r1, r2
 8016cfc:	2001      	movs	r0, #1
 8016cfe:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	7cdb      	ldrb	r3, [r3, #19]
 8016d04:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016d08:	6939      	ldr	r1, [r7, #16]
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	f7fe f856 	bl	8014dbc <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8016d10:	683b      	ldr	r3, [r7, #0]
 8016d12:	7bfa      	ldrb	r2, [r7, #15]
 8016d14:	701a      	strb	r2, [r3, #0]
    return true;
 8016d16:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8016d18:	4618      	mov	r0, r3
 8016d1a:	371c      	adds	r7, #28
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	bd90      	pop	{r4, r7, pc}
 8016d20:	0801dc9c 	.word	0x0801dc9c
 8016d24:	000927c0 	.word	0x000927c0
 8016d28:	370870a0 	.word	0x370870a0
 8016d2c:	0801dc18 	.word	0x0801dc18
 8016d30:	0801dc8c 	.word	0x0801dc8c
 8016d34:	0801dc7c 	.word	0x0801dc7c

08016d38 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016d38:	b590      	push	{r4, r7, lr}
 8016d3a:	b093      	sub	sp, #76	@ 0x4c
 8016d3c:	af0a      	add	r7, sp, #40	@ 0x28
 8016d3e:	60f8      	str	r0, [r7, #12]
 8016d40:	60b9      	str	r1, [r7, #8]
 8016d42:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016d4a:	461a      	mov	r2, r3
 8016d4c:	4b4a      	ldr	r3, [pc, #296]	@ (8016e78 <RegionUS915TxConfig+0x140>)
 8016d4e:	5c9b      	ldrb	r3, [r3, r2]
 8016d50:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016d58:	4b48      	ldr	r3, [pc, #288]	@ (8016e7c <RegionUS915TxConfig+0x144>)
 8016d5a:	681a      	ldr	r2, [r3, #0]
 8016d5c:	4b48      	ldr	r3, [pc, #288]	@ (8016e80 <RegionUS915TxConfig+0x148>)
 8016d5e:	6819      	ldr	r1, [r3, #0]
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	781b      	ldrb	r3, [r3, #0]
 8016d64:	461c      	mov	r4, r3
 8016d66:	4623      	mov	r3, r4
 8016d68:	005b      	lsls	r3, r3, #1
 8016d6a:	4423      	add	r3, r4
 8016d6c:	009b      	lsls	r3, r3, #2
 8016d6e:	440b      	add	r3, r1
 8016d70:	3309      	adds	r3, #9
 8016d72:	781b      	ldrb	r3, [r3, #0]
 8016d74:	4619      	mov	r1, r3
 8016d76:	460b      	mov	r3, r1
 8016d78:	005b      	lsls	r3, r3, #1
 8016d7a:	440b      	add	r3, r1
 8016d7c:	00db      	lsls	r3, r3, #3
 8016d7e:	4413      	add	r3, r2
 8016d80:	3302      	adds	r3, #2
 8016d82:	f993 1000 	ldrsb.w	r1, [r3]
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8016d8c:	4b3c      	ldr	r3, [pc, #240]	@ (8016e80 <RegionUS915TxConfig+0x148>)
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8016d94:	f7ff fa52 	bl	801623c <LimitTxPower>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	77bb      	strb	r3, [r7, #30]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016da2:	4938      	ldr	r1, [pc, #224]	@ (8016e84 <RegionUS915TxConfig+0x14c>)
 8016da4:	4618      	mov	r0, r3
 8016da6:	f7fd ffeb 	bl	8014d80 <RegionCommonGetBandwidth>
 8016daa:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8016dac:	2300      	movs	r3, #0
 8016dae:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8016db0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016db4:	f04f 0200 	mov.w	r2, #0
 8016db8:	4933      	ldr	r1, [pc, #204]	@ (8016e88 <RegionUS915TxConfig+0x150>)
 8016dba:	4618      	mov	r0, r3
 8016dbc:	f7fd fe3c 	bl	8014a38 <RegionCommonComputeTxPower>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8016dc4:	4b31      	ldr	r3, [pc, #196]	@ (8016e8c <RegionUS915TxConfig+0x154>)
 8016dc6:	68da      	ldr	r2, [r3, #12]
 8016dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8016e80 <RegionUS915TxConfig+0x148>)
 8016dca:	6819      	ldr	r1, [r3, #0]
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	781b      	ldrb	r3, [r3, #0]
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	005b      	lsls	r3, r3, #1
 8016dd6:	4403      	add	r3, r0
 8016dd8:	009b      	lsls	r3, r3, #2
 8016dda:	440b      	add	r3, r1
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	4618      	mov	r0, r3
 8016de0:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8016de2:	4b2a      	ldr	r3, [pc, #168]	@ (8016e8c <RegionUS915TxConfig+0x154>)
 8016de4:	69dc      	ldr	r4, [r3, #28]
 8016de6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016dea:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016dee:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8016df2:	9208      	str	r2, [sp, #32]
 8016df4:	2200      	movs	r2, #0
 8016df6:	9207      	str	r2, [sp, #28]
 8016df8:	2200      	movs	r2, #0
 8016dfa:	9206      	str	r2, [sp, #24]
 8016dfc:	2200      	movs	r2, #0
 8016dfe:	9205      	str	r2, [sp, #20]
 8016e00:	2201      	movs	r2, #1
 8016e02:	9204      	str	r2, [sp, #16]
 8016e04:	2200      	movs	r2, #0
 8016e06:	9203      	str	r2, [sp, #12]
 8016e08:	2208      	movs	r2, #8
 8016e0a:	9202      	str	r2, [sp, #8]
 8016e0c:	2201      	movs	r2, #1
 8016e0e:	9201      	str	r2, [sp, #4]
 8016e10:	9300      	str	r3, [sp, #0]
 8016e12:	69bb      	ldr	r3, [r7, #24]
 8016e14:	2200      	movs	r2, #0
 8016e16:	2001      	movs	r0, #1
 8016e18:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8016e1a:	4b19      	ldr	r3, [pc, #100]	@ (8016e80 <RegionUS915TxConfig+0x148>)
 8016e1c:	681a      	ldr	r2, [r3, #0]
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	781b      	ldrb	r3, [r3, #0]
 8016e22:	4619      	mov	r1, r3
 8016e24:	460b      	mov	r3, r1
 8016e26:	005b      	lsls	r3, r3, #1
 8016e28:	440b      	add	r3, r1
 8016e2a:	009b      	lsls	r3, r3, #2
 8016e2c:	4413      	add	r3, r2
 8016e2e:	681a      	ldr	r2, [r3, #0]
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016e36:	4619      	mov	r1, r3
 8016e38:	4610      	mov	r0, r2
 8016e3a:	f7fd fff1 	bl	8014e20 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8016e3e:	4b13      	ldr	r3, [pc, #76]	@ (8016e8c <RegionUS915TxConfig+0x154>)
 8016e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016e42:	68fa      	ldr	r2, [r7, #12]
 8016e44:	8992      	ldrh	r2, [r2, #12]
 8016e46:	b2d2      	uxtb	r2, r2
 8016e48:	4611      	mov	r1, r2
 8016e4a:	2001      	movs	r0, #1
 8016e4c:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	899b      	ldrh	r3, [r3, #12]
 8016e58:	4619      	mov	r1, r3
 8016e5a:	4610      	mov	r0, r2
 8016e5c:	f7ff fa68 	bl	8016330 <GetTimeOnAir>
 8016e60:	4602      	mov	r2, r0
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8016e66:	68bb      	ldr	r3, [r7, #8]
 8016e68:	7fba      	ldrb	r2, [r7, #30]
 8016e6a:	701a      	strb	r2, [r3, #0]
    return true;
 8016e6c:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8016e6e:	4618      	mov	r0, r3
 8016e70:	3724      	adds	r7, #36	@ 0x24
 8016e72:	46bd      	mov	sp, r7
 8016e74:	bd90      	pop	{r4, r7, pc}
 8016e76:	bf00      	nop
 8016e78:	0801dc18 	.word	0x0801dc18
 8016e7c:	20001390 	.word	0x20001390
 8016e80:	20001394 	.word	0x20001394
 8016e84:	0801dc28 	.word	0x0801dc28
 8016e88:	41f00000 	.word	0x41f00000
 8016e8c:	0801dc9c 	.word	0x0801dc9c

08016e90 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016e90:	b590      	push	{r4, r7, lr}
 8016e92:	b097      	sub	sp, #92	@ 0x5c
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	60f8      	str	r0, [r7, #12]
 8016e98:	60b9      	str	r1, [r7, #8]
 8016e9a:	607a      	str	r2, [r7, #4]
 8016e9c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8016e9e:	2307      	movs	r3, #7
 8016ea0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8016ea4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8016ea8:	2200      	movs	r2, #0
 8016eaa:	601a      	str	r2, [r3, #0]
 8016eac:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8016eae:	2300      	movs	r3, #0
 8016eb0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    uint8_t bytesProcessed = 0;
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 8016eba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8016ebe:	2200      	movs	r2, #0
 8016ec0:	601a      	str	r2, [r3, #0]
 8016ec2:	605a      	str	r2, [r3, #4]
 8016ec4:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8016ec6:	4b97      	ldr	r3, [pc, #604]	@ (8017124 <RegionUS915LinkAdrReq+0x294>)
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	f503 6190 	add.w	r1, r3, #1152	@ 0x480
 8016ece:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8016ed2:	2206      	movs	r2, #6
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	f7fd fab3 	bl	8014440 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016eda:	e11b      	b.n	8017114 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	685a      	ldr	r2, [r3, #4]
 8016ee0:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8016ee4:	4413      	add	r3, r2
 8016ee6:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8016eea:	4611      	mov	r1, r2
 8016eec:	4618      	mov	r0, r3
 8016eee:	f7fd fbeb 	bl	80146c8 <RegionCommonParseLinkAdrReq>
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        if( nextIndex == 0 )
 8016ef8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	f000 8113 	beq.w	8017128 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016f02:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8016f06:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8016f0a:	4413      	add	r3, r2
 8016f0c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016f10:	2307      	movs	r3, #7
 8016f12:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 8016f16:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8016f1a:	2b06      	cmp	r3, #6
 8016f1c:	d116      	bne.n	8016f4c <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8016f1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016f22:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0xFFFF;
 8016f26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016f2a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0xFFFF;
 8016f2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016f32:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0xFFFF;
 8016f36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016f3a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8016f3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8016f42:	b2db      	uxtb	r3, r3
 8016f44:	b29b      	uxth	r3, r3
 8016f46:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8016f4a:	e0e3      	b.n	8017114 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8016f4c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8016f50:	2b07      	cmp	r3, #7
 8016f52:	d112      	bne.n	8016f7a <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8016f54:	2300      	movs	r3, #0
 8016f56:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0x0000;
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0x0000;
 8016f60:	2300      	movs	r3, #0
 8016f62:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0x0000;
 8016f66:	2300      	movs	r3, #0
 8016f68:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8016f6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8016f70:	b2db      	uxtb	r3, r3
 8016f72:	b29b      	uxth	r3, r3
 8016f74:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8016f78:	e0cc      	b.n	8017114 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8016f7a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8016f7e:	2b05      	cmp	r3, #5
 8016f80:	f040 80bf 	bne.w	8017102 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8016f84:	2301      	movs	r3, #1
 8016f86:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8016f90:	2300      	movs	r3, #0
 8016f92:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8016f96:	e0ae      	b.n	80170f6 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8016f98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8016f9c:	b2da      	uxtb	r2, r3
 8016f9e:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8016fa2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8016faa:	4013      	ands	r3, r2
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d04d      	beq.n	801704c <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8016fb0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016fb4:	f003 0301 	and.w	r3, r3, #1
 8016fb8:	b2db      	uxtb	r3, r3
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d120      	bne.n	8017000 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 8016fbe:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016fc2:	005b      	lsls	r3, r3, #1
 8016fc4:	3358      	adds	r3, #88	@ 0x58
 8016fc6:	443b      	add	r3, r7
 8016fc8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8016fcc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016fd0:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 8016fd4:	b292      	uxth	r2, r2
 8016fd6:	005b      	lsls	r3, r3, #1
 8016fd8:	3358      	adds	r3, #88	@ 0x58
 8016fda:	443b      	add	r3, r7
 8016fdc:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8016fe0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8016fe4:	b21a      	sxth	r2, r3
 8016fe6:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8016fea:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016fee:	fa01 f303 	lsl.w	r3, r1, r3
 8016ff2:	b21b      	sxth	r3, r3
 8016ff4:	4313      	orrs	r3, r2
 8016ff6:	b21b      	sxth	r3, r3
 8016ff8:	b29b      	uxth	r3, r3
 8016ffa:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8016ffe:	e075      	b.n	80170ec <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8017000:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8017004:	005b      	lsls	r3, r3, #1
 8017006:	3358      	adds	r3, #88	@ 0x58
 8017008:	443b      	add	r3, r7
 801700a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801700e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8017012:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 8017016:	b292      	uxth	r2, r2
 8017018:	005b      	lsls	r3, r3, #1
 801701a:	3358      	adds	r3, #88	@ 0x58
 801701c:	443b      	add	r3, r7
 801701e:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8017022:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8017026:	b21a      	sxth	r2, r3
 8017028:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 801702c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017030:	fa01 f303 	lsl.w	r3, r1, r3
 8017034:	b21b      	sxth	r3, r3
 8017036:	4313      	orrs	r3, r2
 8017038:	b21b      	sxth	r3, r3
 801703a:	b29b      	uxth	r3, r3
 801703c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8017040:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8017044:	3301      	adds	r3, #1
 8017046:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 801704a:	e04f      	b.n	80170ec <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801704c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017050:	f003 0301 	and.w	r3, r3, #1
 8017054:	b2db      	uxtb	r3, r3
 8017056:	2b00      	cmp	r3, #0
 8017058:	d122      	bne.n	80170a0 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801705a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801705e:	005b      	lsls	r3, r3, #1
 8017060:	3358      	adds	r3, #88	@ 0x58
 8017062:	443b      	add	r3, r7
 8017064:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017068:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801706c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8017070:	b292      	uxth	r2, r2
 8017072:	005b      	lsls	r3, r3, #1
 8017074:	3358      	adds	r3, #88	@ 0x58
 8017076:	443b      	add	r3, r7
 8017078:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801707c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8017080:	b21a      	sxth	r2, r3
 8017082:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8017086:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801708a:	fa01 f303 	lsl.w	r3, r1, r3
 801708e:	b21b      	sxth	r3, r3
 8017090:	43db      	mvns	r3, r3
 8017092:	b21b      	sxth	r3, r3
 8017094:	4013      	ands	r3, r2
 8017096:	b21b      	sxth	r3, r3
 8017098:	b29b      	uxth	r3, r3
 801709a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801709e:	e025      	b.n	80170ec <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 80170a0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80170a4:	005b      	lsls	r3, r3, #1
 80170a6:	3358      	adds	r3, #88	@ 0x58
 80170a8:	443b      	add	r3, r7
 80170aa:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80170ae:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80170b2:	b2d2      	uxtb	r2, r2
 80170b4:	b292      	uxth	r2, r2
 80170b6:	005b      	lsls	r3, r3, #1
 80170b8:	3358      	adds	r3, #88	@ 0x58
 80170ba:	443b      	add	r3, r7
 80170bc:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 80170c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80170c4:	b21a      	sxth	r2, r3
 80170c6:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 80170ca:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80170ce:	fa01 f303 	lsl.w	r3, r1, r3
 80170d2:	b21b      	sxth	r3, r3
 80170d4:	43db      	mvns	r3, r3
 80170d6:	b21b      	sxth	r3, r3
 80170d8:	4013      	ands	r3, r2
 80170da:	b21b      	sxth	r3, r3
 80170dc:	b29b      	uxth	r3, r3
 80170de:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 80170e2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80170e6:	3301      	adds	r3, #1
 80170e8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 80170ec:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80170f0:	3301      	adds	r3, #1
 80170f2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 80170f6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80170fa:	2b07      	cmp	r3, #7
 80170fc:	f67f af4c 	bls.w	8016f98 <RegionUS915LinkAdrReq+0x108>
 8017100:	e008      	b.n	8017114 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8017102:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8017106:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 801710a:	005b      	lsls	r3, r3, #1
 801710c:	3358      	adds	r3, #88	@ 0x58
 801710e:	443b      	add	r3, r7
 8017110:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	7a1b      	ldrb	r3, [r3, #8]
 8017118:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 801711c:	429a      	cmp	r2, r3
 801711e:	f4ff aedd 	bcc.w	8016edc <RegionUS915LinkAdrReq+0x4c>
 8017122:	e002      	b.n	801712a <RegionUS915LinkAdrReq+0x29a>
 8017124:	20001394 	.word	0x20001394
            break; // break loop, since no more request has been found
 8017128:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801712a:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 801712e:	2b03      	cmp	r3, #3
 8017130:	dc0f      	bgt.n	8017152 <RegionUS915LinkAdrReq+0x2c2>
 8017132:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8017136:	2204      	movs	r2, #4
 8017138:	2100      	movs	r1, #0
 801713a:	4618      	mov	r0, r3
 801713c:	f7fd f954 	bl	80143e8 <RegionCommonCountChannels>
 8017140:	4603      	mov	r3, r0
 8017142:	2b01      	cmp	r3, #1
 8017144:	d805      	bhi.n	8017152 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8017146:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801714a:	f023 0301 	bic.w	r3, r3, #1
 801714e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8017152:	2302      	movs	r3, #2
 8017154:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	7a5b      	ldrb	r3, [r3, #9]
 801715c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8017160:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8017164:	4618      	mov	r0, r3
 8017166:	f7ff f913 	bl	8016390 <RegionUS915GetPhyParam>
 801716a:	4603      	mov	r3, r0
 801716c:	637b      	str	r3, [r7, #52]	@ 0x34

    linkAdrVerifyParams.Status = status;
 801716e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8017172:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	7a9b      	ldrb	r3, [r3, #10]
 8017178:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801717a:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 801717e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8017180:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 8017184:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8017186:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 801718a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8017192:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801719a:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	7b5b      	ldrb	r3, [r3, #13]
 80171a0:	b25b      	sxtb	r3, r3
 80171a2:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 80171a4:	2348      	movs	r3, #72	@ 0x48
 80171a6:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 80171aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80171ae:	627b      	str	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80171b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171b2:	b25b      	sxtb	r3, r3
 80171b4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 80171b8:	2304      	movs	r3, #4
 80171ba:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80171be:	4b44      	ldr	r3, [pc, #272]	@ (80172d0 <RegionUS915LinkAdrReq+0x440>)
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 80171c4:	230e      	movs	r3, #14
 80171c6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 80171ca:	2300      	movs	r3, #0
 80171cc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80171d6:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80171da:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80171de:	1c9a      	adds	r2, r3, #2
 80171e0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80171e4:	1c59      	adds	r1, r3, #1
 80171e6:	f107 0014 	add.w	r0, r7, #20
 80171ea:	4623      	mov	r3, r4
 80171ec:	f7fd fabd 	bl	801476a <RegionCommonLinkAdrReqVerifyParams>
 80171f0:	4603      	mov	r3, r0
 80171f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80171f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80171fa:	2b07      	cmp	r3, #7
 80171fc:	d151      	bne.n	80172a2 <RegionUS915LinkAdrReq+0x412>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 80171fe:	4b34      	ldr	r3, [pc, #208]	@ (80172d0 <RegionUS915LinkAdrReq+0x440>)
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8017206:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801720a:	2206      	movs	r2, #6
 801720c:	4618      	mov	r0, r3
 801720e:	f7fd f917 	bl	8014440 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8017212:	4b30      	ldr	r3, [pc, #192]	@ (80172d4 <RegionUS915LinkAdrReq+0x444>)
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	f8b3 1090 	ldrh.w	r1, [r3, #144]	@ 0x90
 801721a:	4b2d      	ldr	r3, [pc, #180]	@ (80172d0 <RegionUS915LinkAdrReq+0x440>)
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 8017222:	4b2c      	ldr	r3, [pc, #176]	@ (80172d4 <RegionUS915LinkAdrReq+0x444>)
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	400a      	ands	r2, r1
 8017228:	b292      	uxth	r2, r2
 801722a:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801722e:	4b29      	ldr	r3, [pc, #164]	@ (80172d4 <RegionUS915LinkAdrReq+0x444>)
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	f8b3 1092 	ldrh.w	r1, [r3, #146]	@ 0x92
 8017236:	4b26      	ldr	r3, [pc, #152]	@ (80172d0 <RegionUS915LinkAdrReq+0x440>)
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	f8b3 2482 	ldrh.w	r2, [r3, #1154]	@ 0x482
 801723e:	4b25      	ldr	r3, [pc, #148]	@ (80172d4 <RegionUS915LinkAdrReq+0x444>)
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	400a      	ands	r2, r1
 8017244:	b292      	uxth	r2, r2
 8017246:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801724a:	4b22      	ldr	r3, [pc, #136]	@ (80172d4 <RegionUS915LinkAdrReq+0x444>)
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	f8b3 1094 	ldrh.w	r1, [r3, #148]	@ 0x94
 8017252:	4b1f      	ldr	r3, [pc, #124]	@ (80172d0 <RegionUS915LinkAdrReq+0x440>)
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	f8b3 2484 	ldrh.w	r2, [r3, #1156]	@ 0x484
 801725a:	4b1e      	ldr	r3, [pc, #120]	@ (80172d4 <RegionUS915LinkAdrReq+0x444>)
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	400a      	ands	r2, r1
 8017260:	b292      	uxth	r2, r2
 8017262:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8017266:	4b1b      	ldr	r3, [pc, #108]	@ (80172d4 <RegionUS915LinkAdrReq+0x444>)
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	f8b3 1096 	ldrh.w	r1, [r3, #150]	@ 0x96
 801726e:	4b18      	ldr	r3, [pc, #96]	@ (80172d0 <RegionUS915LinkAdrReq+0x440>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	f8b3 2486 	ldrh.w	r2, [r3, #1158]	@ 0x486
 8017276:	4b17      	ldr	r3, [pc, #92]	@ (80172d4 <RegionUS915LinkAdrReq+0x444>)
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	400a      	ands	r2, r1
 801727c:	b292      	uxth	r2, r2
 801727e:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8017282:	4b13      	ldr	r3, [pc, #76]	@ (80172d0 <RegionUS915LinkAdrReq+0x440>)
 8017284:	681a      	ldr	r2, [r3, #0]
 8017286:	4b13      	ldr	r3, [pc, #76]	@ (80172d4 <RegionUS915LinkAdrReq+0x444>)
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	@ 0x488
 801728e:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8017292:	4b0f      	ldr	r3, [pc, #60]	@ (80172d0 <RegionUS915LinkAdrReq+0x440>)
 8017294:	681a      	ldr	r2, [r3, #0]
 8017296:	4b0f      	ldr	r3, [pc, #60]	@ (80172d4 <RegionUS915LinkAdrReq+0x444>)
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	f8b2 248a 	ldrh.w	r2, [r2, #1162]	@ 0x48a
 801729e:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80172a2:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 80172a6:	68bb      	ldr	r3, [r7, #8]
 80172a8:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80172aa:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80172b2:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 80172b6:	683b      	ldr	r3, [r7, #0]
 80172b8:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80172ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80172bc:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 80172c0:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 80172c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 80172c6:	4618      	mov	r0, r3
 80172c8:	375c      	adds	r7, #92	@ 0x5c
 80172ca:	46bd      	mov	sp, r7
 80172cc:	bd90      	pop	{r4, r7, pc}
 80172ce:	bf00      	nop
 80172d0:	20001394 	.word	0x20001394
 80172d4:	20001390 	.word	0x20001390

080172d8 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80172d8:	b580      	push	{r7, lr}
 80172da:	b084      	sub	sp, #16
 80172dc:	af00      	add	r7, sp, #0
 80172de:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80172e0:	2307      	movs	r3, #7
 80172e2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	685b      	ldr	r3, [r3, #4]
 80172e8:	4618      	mov	r0, r3
 80172ea:	f7fe ffdd 	bl	80162a8 <VerifyRfFreq>
 80172ee:	4603      	mov	r3, r0
 80172f0:	f083 0301 	eor.w	r3, r3, #1
 80172f4:	b2db      	uxtb	r3, r3
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d003      	beq.n	8017302 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 80172fa:	7bfb      	ldrb	r3, [r7, #15]
 80172fc:	f023 0301 	bic.w	r3, r3, #1
 8017300:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	f993 3000 	ldrsb.w	r3, [r3]
 8017308:	220d      	movs	r2, #13
 801730a:	2108      	movs	r1, #8
 801730c:	4618      	mov	r0, r3
 801730e:	f7fd f81a 	bl	8014346 <RegionCommonValueInRange>
 8017312:	4603      	mov	r3, r0
 8017314:	2b00      	cmp	r3, #0
 8017316:	d103      	bne.n	8017320 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8017318:	7bfb      	ldrb	r3, [r7, #15]
 801731a:	f023 0302 	bic.w	r3, r3, #2
 801731e:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	f993 3000 	ldrsb.w	r3, [r3]
 8017326:	2207      	movs	r2, #7
 8017328:	2105      	movs	r1, #5
 801732a:	4618      	mov	r0, r3
 801732c:	f7fd f80b 	bl	8014346 <RegionCommonValueInRange>
 8017330:	4603      	mov	r3, r0
 8017332:	2b01      	cmp	r3, #1
 8017334:	d004      	beq.n	8017340 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801733c:	2b0d      	cmp	r3, #13
 801733e:	dd03      	ble.n	8017348 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8017340:	7bfb      	ldrb	r3, [r7, #15]
 8017342:	f023 0302 	bic.w	r3, r3, #2
 8017346:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801734e:	2203      	movs	r2, #3
 8017350:	2100      	movs	r1, #0
 8017352:	4618      	mov	r0, r3
 8017354:	f7fc fff7 	bl	8014346 <RegionCommonValueInRange>
 8017358:	4603      	mov	r3, r0
 801735a:	2b00      	cmp	r3, #0
 801735c:	d103      	bne.n	8017366 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801735e:	7bfb      	ldrb	r3, [r7, #15]
 8017360:	f023 0304 	bic.w	r3, r3, #4
 8017364:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8017366:	7bfb      	ldrb	r3, [r7, #15]
}
 8017368:	4618      	mov	r0, r3
 801736a:	3710      	adds	r7, #16
 801736c:	46bd      	mov	sp, r7
 801736e:	bd80      	pop	{r7, pc}

08017370 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8017370:	b480      	push	{r7}
 8017372:	b083      	sub	sp, #12
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017378:	f04f 33ff 	mov.w	r3, #4294967295
}
 801737c:	4618      	mov	r0, r3
 801737e:	370c      	adds	r7, #12
 8017380:	46bd      	mov	sp, r7
 8017382:	bc80      	pop	{r7}
 8017384:	4770      	bx	lr

08017386 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8017386:	b480      	push	{r7}
 8017388:	b083      	sub	sp, #12
 801738a:	af00      	add	r7, sp, #0
 801738c:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801738e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017392:	4618      	mov	r0, r3
 8017394:	370c      	adds	r7, #12
 8017396:	46bd      	mov	sp, r7
 8017398:	bc80      	pop	{r7}
 801739a:	4770      	bx	lr

0801739c <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801739c:	b480      	push	{r7}
 801739e:	b083      	sub	sp, #12
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80173a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80173a8:	4618      	mov	r0, r3
 80173aa:	370c      	adds	r7, #12
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bc80      	pop	{r7}
 80173b0:	4770      	bx	lr
	...

080173b4 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80173b4:	b480      	push	{r7}
 80173b6:	b083      	sub	sp, #12
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	4603      	mov	r3, r0
 80173bc:	460a      	mov	r2, r1
 80173be:	71fb      	strb	r3, [r7, #7]
 80173c0:	4613      	mov	r3, r2
 80173c2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 80173c4:	79bb      	ldrb	r3, [r7, #6]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d108      	bne.n	80173dc <RegionUS915AlternateDr+0x28>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 80173ca:	4b16      	ldr	r3, [pc, #88]	@ (8017424 <RegionUS915AlternateDr+0x70>)
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 80173d2:	3201      	adds	r2, #1
 80173d4:	b2d2      	uxtb	r2, r2
 80173d6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
 80173da:	e007      	b.n	80173ec <RegionUS915AlternateDr+0x38>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 80173dc:	4b11      	ldr	r3, [pc, #68]	@ (8017424 <RegionUS915AlternateDr+0x70>)
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 80173e4:	3a01      	subs	r2, #1
 80173e6:	b2d2      	uxtb	r2, r2
 80173e8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 80173ec:	4b0d      	ldr	r3, [pc, #52]	@ (8017424 <RegionUS915AlternateDr+0x70>)
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 80173f4:	4b0c      	ldr	r3, [pc, #48]	@ (8017428 <RegionUS915AlternateDr+0x74>)
 80173f6:	fba3 1302 	umull	r1, r3, r3, r2
 80173fa:	0859      	lsrs	r1, r3, #1
 80173fc:	460b      	mov	r3, r1
 80173fe:	00db      	lsls	r3, r3, #3
 8017400:	440b      	add	r3, r1
 8017402:	1ad3      	subs	r3, r2, r3
 8017404:	b2db      	uxtb	r3, r3
 8017406:	2b00      	cmp	r3, #0
 8017408:	d102      	bne.n	8017410 <RegionUS915AlternateDr+0x5c>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 801740a:	2304      	movs	r3, #4
 801740c:	71fb      	strb	r3, [r7, #7]
 801740e:	e001      	b.n	8017414 <RegionUS915AlternateDr+0x60>
    }
    else
    {
        currentDr = DR_0;
 8017410:	2300      	movs	r3, #0
 8017412:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8017414:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8017418:	4618      	mov	r0, r3
 801741a:	370c      	adds	r7, #12
 801741c:	46bd      	mov	sp, r7
 801741e:	bc80      	pop	{r7}
 8017420:	4770      	bx	lr
 8017422:	bf00      	nop
 8017424:	20001390 	.word	0x20001390
 8017428:	38e38e39 	.word	0x38e38e39

0801742c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801742c:	b580      	push	{r7, lr}
 801742e:	b0a8      	sub	sp, #160	@ 0xa0
 8017430:	af02      	add	r7, sp, #8
 8017432:	60f8      	str	r0, [r7, #12]
 8017434:	60b9      	str	r1, [r7, #8]
 8017436:	607a      	str	r2, [r7, #4]
 8017438:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801743a:	2300      	movs	r3, #0
 801743c:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
    uint8_t nbRestrictedChannels = 0;
 8017440:	2300      	movs	r3, #0
 8017442:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8017446:	2300      	movs	r3, #0
 8017448:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801744a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801744e:	2244      	movs	r2, #68	@ 0x44
 8017450:	2100      	movs	r1, #0
 8017452:	4618      	mov	r0, r3
 8017454:	f005 f90a 	bl	801c66c <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017458:	230c      	movs	r3, #12
 801745a:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801745e:	4b6b      	ldr	r3, [pc, #428]	@ (801760c <RegionUS915NextChannel+0x1e0>)
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	3390      	adds	r3, #144	@ 0x90
 8017464:	2204      	movs	r2, #4
 8017466:	2100      	movs	r1, #0
 8017468:	4618      	mov	r0, r3
 801746a:	f7fc ffbd 	bl	80143e8 <RegionCommonCountChannels>
 801746e:	4603      	mov	r3, r0
 8017470:	2b00      	cmp	r3, #0
 8017472:	d110      	bne.n	8017496 <RegionUS915NextChannel+0x6a>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8017474:	4b65      	ldr	r3, [pc, #404]	@ (801760c <RegionUS915NextChannel+0x1e0>)
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 801747c:	4b64      	ldr	r3, [pc, #400]	@ (8017610 <RegionUS915NextChannel+0x1e4>)
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8017484:	2204      	movs	r2, #4
 8017486:	4619      	mov	r1, r3
 8017488:	f7fc ffda 	bl	8014440 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801748c:	4b5f      	ldr	r3, [pc, #380]	@ (801760c <RegionUS915NextChannel+0x1e0>)
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	2200      	movs	r2, #0
 8017492:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801749c:	2b03      	cmp	r3, #3
 801749e:	dd0e      	ble.n	80174be <RegionUS915NextChannel+0x92>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 80174a0:	4b5a      	ldr	r3, [pc, #360]	@ (801760c <RegionUS915NextChannel+0x1e0>)
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 80174a8:	b2db      	uxtb	r3, r3
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d107      	bne.n	80174be <RegionUS915NextChannel+0x92>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 80174ae:	4b58      	ldr	r3, [pc, #352]	@ (8017610 <RegionUS915NextChannel+0x1e4>)
 80174b0:	681a      	ldr	r2, [r3, #0]
 80174b2:	4b56      	ldr	r3, [pc, #344]	@ (801760c <RegionUS915NextChannel+0x1e0>)
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	@ 0x488
 80174ba:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	7a5b      	ldrb	r3, [r3, #9]
 80174c2:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80174ca:	b2db      	uxtb	r3, r3
 80174cc:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 80174ce:	4b4f      	ldr	r3, [pc, #316]	@ (801760c <RegionUS915NextChannel+0x1e0>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	3390      	adds	r3, #144	@ 0x90
 80174d4:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80174d6:	4b4e      	ldr	r3, [pc, #312]	@ (8017610 <RegionUS915NextChannel+0x1e4>)
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80174dc:	4b4b      	ldr	r3, [pc, #300]	@ (801760c <RegionUS915NextChannel+0x1e0>)
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 80174e2:	2348      	movs	r3, #72	@ 0x48
 80174e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = NULL;
 80174e6:	2300      	movs	r3, #0
 80174e8:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	685b      	ldr	r3, [r3, #4]
 80174f4:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	7a9b      	ldrb	r3, [r3, #10]
 80174fa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 80174fe:	2301      	movs	r3, #1
 8017500:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8017504:	68fa      	ldr	r2, [r7, #12]
 8017506:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801750a:	320c      	adds	r2, #12
 801750c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017510:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	7d1b      	ldrb	r3, [r3, #20]
 8017518:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8017522:	68fb      	ldr	r3, [r7, #12]
 8017524:	8adb      	ldrh	r3, [r3, #22]
 8017526:	4619      	mov	r1, r3
 8017528:	4610      	mov	r0, r2
 801752a:	f7fe ff01 	bl	8016330 <GetTimeOnAir>
 801752e:	4603      	mov	r3, r0
 8017530:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8017532:	f107 0314 	add.w	r3, r7, #20
 8017536:	64bb      	str	r3, [r7, #72]	@ 0x48
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8017538:	f107 0195 	add.w	r1, r7, #149	@ 0x95
 801753c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8017540:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	9301      	str	r3, [sp, #4]
 8017548:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801754c:	9300      	str	r3, [sp, #0]
 801754e:	460b      	mov	r3, r1
 8017550:	6839      	ldr	r1, [r7, #0]
 8017552:	f7fd fb60 	bl	8014c16 <RegionCommonIdentifyChannels>
 8017556:	4603      	mov	r3, r0
 8017558:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801755c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8017560:	2b00      	cmp	r3, #0
 8017562:	d14d      	bne.n	8017600 <RegionUS915NextChannel+0x1d4>
    {
        if( nextChanParams->Joined == true )
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	7a5b      	ldrb	r3, [r3, #9]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d00e      	beq.n	801758a <RegionUS915NextChannel+0x15e>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801756c:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8017570:	3b01      	subs	r3, #1
 8017572:	4619      	mov	r1, r3
 8017574:	2000      	movs	r0, #0
 8017576:	f000 f8f5 	bl	8017764 <randr>
 801757a:	4603      	mov	r3, r0
 801757c:	3398      	adds	r3, #152	@ 0x98
 801757e:	443b      	add	r3, r7
 8017580:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8017584:	68bb      	ldr	r3, [r7, #8]
 8017586:	701a      	strb	r2, [r3, #0]
 8017588:	e030      	b.n	80175ec <RegionUS915NextChannel+0x1c0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d10f      	bne.n	80175b4 <RegionUS915NextChannel+0x188>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8017594:	4b1d      	ldr	r3, [pc, #116]	@ (801760c <RegionUS915NextChannel+0x1e0>)
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	f103 0090 	add.w	r0, r3, #144	@ 0x90
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801759c:	4b1b      	ldr	r3, [pc, #108]	@ (801760c <RegionUS915NextChannel+0x1e0>)
 801759e:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 80175a0:	339c      	adds	r3, #156	@ 0x9c
 80175a2:	68ba      	ldr	r2, [r7, #8]
 80175a4:	4619      	mov	r1, r3
 80175a6:	f7fc fc89 	bl	8013ebc <RegionBaseUSComputeNext125kHzJoinChannel>
 80175aa:	4603      	mov	r3, r0
 80175ac:	2b03      	cmp	r3, #3
 80175ae:	d11d      	bne.n	80175ec <RegionUS915NextChannel+0x1c0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 80175b0:	2303      	movs	r3, #3
 80175b2:	e027      	b.n	8017604 <RegionUS915NextChannel+0x1d8>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 80175b4:	2300      	movs	r3, #0
 80175b6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 80175ba:	e004      	b.n	80175c6 <RegionUS915NextChannel+0x19a>
                {
                    i++;
 80175bc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80175c0:	3301      	adds	r3, #1
 80175c2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 80175c6:	4b11      	ldr	r3, [pc, #68]	@ (801760c <RegionUS915NextChannel+0x1e0>)
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 80175ce:	b2da      	uxtb	r2, r3
 80175d0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80175d4:	fa42 f303 	asr.w	r3, r2, r3
 80175d8:	f003 0301 	and.w	r3, r3, #1
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d0ed      	beq.n	80175bc <RegionUS915NextChannel+0x190>
                }
                *channel = 64 + i;
 80175e0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80175e4:	3340      	adds	r3, #64	@ 0x40
 80175e6:	b2da      	uxtb	r2, r3
 80175e8:	68bb      	ldr	r3, [r7, #8]
 80175ea:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 80175ec:	4b07      	ldr	r3, [pc, #28]	@ (801760c <RegionUS915NextChannel+0x1e0>)
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80175f4:	68bb      	ldr	r3, [r7, #8]
 80175f6:	781b      	ldrb	r3, [r3, #0]
 80175f8:	2248      	movs	r2, #72	@ 0x48
 80175fa:	4619      	mov	r1, r3
 80175fc:	f7fc fec0 	bl	8014380 <RegionCommonChanDisable>
    }
    return status;
 8017600:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8017604:	4618      	mov	r0, r3
 8017606:	3798      	adds	r7, #152	@ 0x98
 8017608:	46bd      	mov	sp, r7
 801760a:	bd80      	pop	{r7, pc}
 801760c:	20001390 	.word	0x20001390
 8017610:	20001394 	.word	0x20001394

08017614 <RegionUS915SetContinuousWave>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8017614:	b590      	push	{r4, r7, lr}
 8017616:	b085      	sub	sp, #20
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8017622:	4b23      	ldr	r3, [pc, #140]	@ (80176b0 <RegionUS915SetContinuousWave+0x9c>)
 8017624:	681a      	ldr	r2, [r3, #0]
 8017626:	4b23      	ldr	r3, [pc, #140]	@ (80176b4 <RegionUS915SetContinuousWave+0xa0>)
 8017628:	6819      	ldr	r1, [r3, #0]
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	781b      	ldrb	r3, [r3, #0]
 801762e:	461c      	mov	r4, r3
 8017630:	4623      	mov	r3, r4
 8017632:	005b      	lsls	r3, r3, #1
 8017634:	4423      	add	r3, r4
 8017636:	009b      	lsls	r3, r3, #2
 8017638:	440b      	add	r3, r1
 801763a:	3309      	adds	r3, #9
 801763c:	781b      	ldrb	r3, [r3, #0]
 801763e:	4619      	mov	r1, r3
 8017640:	460b      	mov	r3, r1
 8017642:	005b      	lsls	r3, r3, #1
 8017644:	440b      	add	r3, r1
 8017646:	00db      	lsls	r3, r3, #3
 8017648:	4413      	add	r3, r2
 801764a:	3302      	adds	r3, #2
 801764c:	f993 1000 	ldrsb.w	r1, [r3]
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017656:	4b17      	ldr	r3, [pc, #92]	@ (80176b4 <RegionUS915SetContinuousWave+0xa0>)
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801765e:	f7fe fded 	bl	801623c <LimitTxPower>
 8017662:	4603      	mov	r3, r0
 8017664:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8017666:	2300      	movs	r3, #0
 8017668:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801766a:	4b12      	ldr	r3, [pc, #72]	@ (80176b4 <RegionUS915SetContinuousWave+0xa0>)
 801766c:	681a      	ldr	r2, [r3, #0]
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	781b      	ldrb	r3, [r3, #0]
 8017672:	4619      	mov	r1, r3
 8017674:	460b      	mov	r3, r1
 8017676:	005b      	lsls	r3, r3, #1
 8017678:	440b      	add	r3, r1
 801767a:	009b      	lsls	r3, r3, #2
 801767c:	4413      	add	r3, r2
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8017682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017686:	f04f 0200 	mov.w	r2, #0
 801768a:	490b      	ldr	r1, [pc, #44]	@ (80176b8 <RegionUS915SetContinuousWave+0xa4>)
 801768c:	4618      	mov	r0, r3
 801768e:	f7fd f9d3 	bl	8014a38 <RegionCommonComputeTxPower>
 8017692:	4603      	mov	r3, r0
 8017694:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8017696:	4b09      	ldr	r3, [pc, #36]	@ (80176bc <RegionUS915SetContinuousWave+0xa8>)
 8017698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801769a:	687a      	ldr	r2, [r7, #4]
 801769c:	8992      	ldrh	r2, [r2, #12]
 801769e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80176a2:	68b8      	ldr	r0, [r7, #8]
 80176a4:	4798      	blx	r3
#endif /* REGION_US915 */
}
 80176a6:	bf00      	nop
 80176a8:	3714      	adds	r7, #20
 80176aa:	46bd      	mov	sp, r7
 80176ac:	bd90      	pop	{r4, r7, pc}
 80176ae:	bf00      	nop
 80176b0:	20001390 	.word	0x20001390
 80176b4:	20001394 	.word	0x20001394
 80176b8:	41f00000 	.word	0x41f00000
 80176bc:	0801dc9c 	.word	0x0801dc9c

080176c0 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80176c0:	b480      	push	{r7}
 80176c2:	b085      	sub	sp, #20
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	4603      	mov	r3, r0
 80176c8:	71fb      	strb	r3, [r7, #7]
 80176ca:	460b      	mov	r3, r1
 80176cc:	71bb      	strb	r3, [r7, #6]
 80176ce:	4613      	mov	r3, r2
 80176d0:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 80176d2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80176d6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80176da:	4909      	ldr	r1, [pc, #36]	@ (8017700 <RegionUS915ApplyDrOffset+0x40>)
 80176dc:	0092      	lsls	r2, r2, #2
 80176de:	440a      	add	r2, r1
 80176e0:	4413      	add	r3, r2
 80176e2:	781b      	ldrb	r3, [r3, #0]
 80176e4:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80176e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	da01      	bge.n	80176f2 <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 80176ee:	2300      	movs	r3, #0
 80176f0:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80176f2:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 80176f4:	4618      	mov	r0, r3
 80176f6:	3714      	adds	r7, #20
 80176f8:	46bd      	mov	sp, r7
 80176fa:	bc80      	pop	{r7}
 80176fc:	4770      	bx	lr
 80176fe:	bf00      	nop
 8017700:	0801dc68 	.word	0x0801dc68

08017704 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8017704:	b480      	push	{r7}
 8017706:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8017708:	4b0d      	ldr	r3, [pc, #52]	@ (8017740 <rand1+0x3c>)
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	4a0d      	ldr	r2, [pc, #52]	@ (8017744 <rand1+0x40>)
 801770e:	fb02 f303 	mul.w	r3, r2, r3
 8017712:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017716:	3339      	adds	r3, #57	@ 0x39
 8017718:	4a09      	ldr	r2, [pc, #36]	@ (8017740 <rand1+0x3c>)
 801771a:	6013      	str	r3, [r2, #0]
 801771c:	4b08      	ldr	r3, [pc, #32]	@ (8017740 <rand1+0x3c>)
 801771e:	681a      	ldr	r2, [r3, #0]
 8017720:	2303      	movs	r3, #3
 8017722:	fba3 1302 	umull	r1, r3, r3, r2
 8017726:	1ad1      	subs	r1, r2, r3
 8017728:	0849      	lsrs	r1, r1, #1
 801772a:	440b      	add	r3, r1
 801772c:	0f99      	lsrs	r1, r3, #30
 801772e:	460b      	mov	r3, r1
 8017730:	07db      	lsls	r3, r3, #31
 8017732:	1a5b      	subs	r3, r3, r1
 8017734:	1ad1      	subs	r1, r2, r3
 8017736:	460b      	mov	r3, r1
}
 8017738:	4618      	mov	r0, r3
 801773a:	46bd      	mov	sp, r7
 801773c:	bc80      	pop	{r7}
 801773e:	4770      	bx	lr
 8017740:	20000120 	.word	0x20000120
 8017744:	41c64e6d 	.word	0x41c64e6d

08017748 <srand1>:

void srand1( uint32_t seed )
{
 8017748:	b480      	push	{r7}
 801774a:	b083      	sub	sp, #12
 801774c:	af00      	add	r7, sp, #0
 801774e:	6078      	str	r0, [r7, #4]
    next = seed;
 8017750:	4a03      	ldr	r2, [pc, #12]	@ (8017760 <srand1+0x18>)
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	6013      	str	r3, [r2, #0]
}
 8017756:	bf00      	nop
 8017758:	370c      	adds	r7, #12
 801775a:	46bd      	mov	sp, r7
 801775c:	bc80      	pop	{r7}
 801775e:	4770      	bx	lr
 8017760:	20000120 	.word	0x20000120

08017764 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b082      	sub	sp, #8
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
 801776c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801776e:	f7ff ffc9 	bl	8017704 <rand1>
 8017772:	4602      	mov	r2, r0
 8017774:	6839      	ldr	r1, [r7, #0]
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	1acb      	subs	r3, r1, r3
 801777a:	3301      	adds	r3, #1
 801777c:	fb92 f1f3 	sdiv	r1, r2, r3
 8017780:	fb01 f303 	mul.w	r3, r1, r3
 8017784:	1ad2      	subs	r2, r2, r3
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	4413      	add	r3, r2
}
 801778a:	4618      	mov	r0, r3
 801778c:	3708      	adds	r7, #8
 801778e:	46bd      	mov	sp, r7
 8017790:	bd80      	pop	{r7, pc}

08017792 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8017792:	b480      	push	{r7}
 8017794:	b085      	sub	sp, #20
 8017796:	af00      	add	r7, sp, #0
 8017798:	60f8      	str	r0, [r7, #12]
 801779a:	60b9      	str	r1, [r7, #8]
 801779c:	4613      	mov	r3, r2
 801779e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80177a0:	e007      	b.n	80177b2 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80177a2:	68ba      	ldr	r2, [r7, #8]
 80177a4:	1c53      	adds	r3, r2, #1
 80177a6:	60bb      	str	r3, [r7, #8]
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	1c59      	adds	r1, r3, #1
 80177ac:	60f9      	str	r1, [r7, #12]
 80177ae:	7812      	ldrb	r2, [r2, #0]
 80177b0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80177b2:	88fb      	ldrh	r3, [r7, #6]
 80177b4:	1e5a      	subs	r2, r3, #1
 80177b6:	80fa      	strh	r2, [r7, #6]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d1f2      	bne.n	80177a2 <memcpy1+0x10>
    }
}
 80177bc:	bf00      	nop
 80177be:	bf00      	nop
 80177c0:	3714      	adds	r7, #20
 80177c2:	46bd      	mov	sp, r7
 80177c4:	bc80      	pop	{r7}
 80177c6:	4770      	bx	lr

080177c8 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80177c8:	b480      	push	{r7}
 80177ca:	b085      	sub	sp, #20
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	60f8      	str	r0, [r7, #12]
 80177d0:	60b9      	str	r1, [r7, #8]
 80177d2:	4613      	mov	r3, r2
 80177d4:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80177d6:	88fb      	ldrh	r3, [r7, #6]
 80177d8:	3b01      	subs	r3, #1
 80177da:	68fa      	ldr	r2, [r7, #12]
 80177dc:	4413      	add	r3, r2
 80177de:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80177e0:	e007      	b.n	80177f2 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80177e2:	68ba      	ldr	r2, [r7, #8]
 80177e4:	1c53      	adds	r3, r2, #1
 80177e6:	60bb      	str	r3, [r7, #8]
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	1e59      	subs	r1, r3, #1
 80177ec:	60f9      	str	r1, [r7, #12]
 80177ee:	7812      	ldrb	r2, [r2, #0]
 80177f0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80177f2:	88fb      	ldrh	r3, [r7, #6]
 80177f4:	1e5a      	subs	r2, r3, #1
 80177f6:	80fa      	strh	r2, [r7, #6]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d1f2      	bne.n	80177e2 <memcpyr+0x1a>
    }
}
 80177fc:	bf00      	nop
 80177fe:	bf00      	nop
 8017800:	3714      	adds	r7, #20
 8017802:	46bd      	mov	sp, r7
 8017804:	bc80      	pop	{r7}
 8017806:	4770      	bx	lr

08017808 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8017808:	b480      	push	{r7}
 801780a:	b083      	sub	sp, #12
 801780c:	af00      	add	r7, sp, #0
 801780e:	6078      	str	r0, [r7, #4]
 8017810:	460b      	mov	r3, r1
 8017812:	70fb      	strb	r3, [r7, #3]
 8017814:	4613      	mov	r3, r2
 8017816:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8017818:	e004      	b.n	8017824 <memset1+0x1c>
    {
        *dst++ = value;
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	1c5a      	adds	r2, r3, #1
 801781e:	607a      	str	r2, [r7, #4]
 8017820:	78fa      	ldrb	r2, [r7, #3]
 8017822:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017824:	883b      	ldrh	r3, [r7, #0]
 8017826:	1e5a      	subs	r2, r3, #1
 8017828:	803a      	strh	r2, [r7, #0]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d1f5      	bne.n	801781a <memset1+0x12>
    }
}
 801782e:	bf00      	nop
 8017830:	bf00      	nop
 8017832:	370c      	adds	r7, #12
 8017834:	46bd      	mov	sp, r7
 8017836:	bc80      	pop	{r7}
 8017838:	4770      	bx	lr
	...

0801783c <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801783c:	b480      	push	{r7}
 801783e:	b085      	sub	sp, #20
 8017840:	af00      	add	r7, sp, #0
 8017842:	6078      	str	r0, [r7, #4]
 8017844:	460b      	mov	r3, r1
 8017846:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8017848:	f04f 33ff 	mov.w	r3, #4294967295
 801784c:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	2b00      	cmp	r3, #0
 8017852:	d101      	bne.n	8017858 <Crc32+0x1c>
    {
        return 0;
 8017854:	2300      	movs	r3, #0
 8017856:	e026      	b.n	80178a6 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8017858:	2300      	movs	r3, #0
 801785a:	817b      	strh	r3, [r7, #10]
 801785c:	e01d      	b.n	801789a <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801785e:	897b      	ldrh	r3, [r7, #10]
 8017860:	687a      	ldr	r2, [r7, #4]
 8017862:	4413      	add	r3, r2
 8017864:	781b      	ldrb	r3, [r3, #0]
 8017866:	461a      	mov	r2, r3
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	4053      	eors	r3, r2
 801786c:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801786e:	2300      	movs	r3, #0
 8017870:	813b      	strh	r3, [r7, #8]
 8017872:	e00c      	b.n	801788e <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	085a      	lsrs	r2, r3, #1
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	f003 0301 	and.w	r3, r3, #1
 801787e:	425b      	negs	r3, r3
 8017880:	490b      	ldr	r1, [pc, #44]	@ (80178b0 <Crc32+0x74>)
 8017882:	400b      	ands	r3, r1
 8017884:	4053      	eors	r3, r2
 8017886:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017888:	893b      	ldrh	r3, [r7, #8]
 801788a:	3301      	adds	r3, #1
 801788c:	813b      	strh	r3, [r7, #8]
 801788e:	893b      	ldrh	r3, [r7, #8]
 8017890:	2b07      	cmp	r3, #7
 8017892:	d9ef      	bls.n	8017874 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8017894:	897b      	ldrh	r3, [r7, #10]
 8017896:	3301      	adds	r3, #1
 8017898:	817b      	strh	r3, [r7, #10]
 801789a:	897a      	ldrh	r2, [r7, #10]
 801789c:	887b      	ldrh	r3, [r7, #2]
 801789e:	429a      	cmp	r2, r3
 80178a0:	d3dd      	bcc.n	801785e <Crc32+0x22>
        }
    }

    return ~crc;
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	43db      	mvns	r3, r3
}
 80178a6:	4618      	mov	r0, r3
 80178a8:	3714      	adds	r7, #20
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bc80      	pop	{r7}
 80178ae:	4770      	bx	lr
 80178b0:	edb88320 	.word	0xedb88320

080178b4 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b084      	sub	sp, #16
 80178b8:	af02      	add	r7, sp, #8
 80178ba:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80178bc:	4a24      	ldr	r2, [pc, #144]	@ (8017950 <RadioInit+0x9c>)
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80178c2:	4b24      	ldr	r3, [pc, #144]	@ (8017954 <RadioInit+0xa0>)
 80178c4:	2200      	movs	r2, #0
 80178c6:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80178c8:	4b22      	ldr	r3, [pc, #136]	@ (8017954 <RadioInit+0xa0>)
 80178ca:	2200      	movs	r2, #0
 80178cc:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80178ce:	4b21      	ldr	r3, [pc, #132]	@ (8017954 <RadioInit+0xa0>)
 80178d0:	2200      	movs	r2, #0
 80178d2:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80178d4:	4b1f      	ldr	r3, [pc, #124]	@ (8017954 <RadioInit+0xa0>)
 80178d6:	2200      	movs	r2, #0
 80178d8:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80178da:	481f      	ldr	r0, [pc, #124]	@ (8017958 <RadioInit+0xa4>)
 80178dc:	f001 ffc0 	bl	8019860 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80178e0:	4b1c      	ldr	r3, [pc, #112]	@ (8017954 <RadioInit+0xa0>)
 80178e2:	2200      	movs	r2, #0
 80178e4:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80178e6:	4b1b      	ldr	r3, [pc, #108]	@ (8017954 <RadioInit+0xa0>)
 80178e8:	2200      	movs	r2, #0
 80178ea:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80178ec:	f002 fa54 	bl	8019d98 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80178f0:	2100      	movs	r1, #0
 80178f2:	2000      	movs	r0, #0
 80178f4:	f002 fe20 	bl	801a538 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80178f8:	2204      	movs	r2, #4
 80178fa:	2100      	movs	r1, #0
 80178fc:	2001      	movs	r0, #1
 80178fe:	f002 fbdd 	bl	801a0bc <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017902:	2300      	movs	r3, #0
 8017904:	2200      	movs	r2, #0
 8017906:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801790a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801790e:	f002 fb0d 	bl	8019f2c <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8017912:	f000 fe99 	bl	8018648 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8017916:	2300      	movs	r3, #0
 8017918:	9300      	str	r3, [sp, #0]
 801791a:	4b10      	ldr	r3, [pc, #64]	@ (801795c <RadioInit+0xa8>)
 801791c:	2200      	movs	r2, #0
 801791e:	f04f 31ff 	mov.w	r1, #4294967295
 8017922:	480f      	ldr	r0, [pc, #60]	@ (8017960 <RadioInit+0xac>)
 8017924:	f003 feea 	bl	801b6fc <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8017928:	2300      	movs	r3, #0
 801792a:	9300      	str	r3, [sp, #0]
 801792c:	4b0d      	ldr	r3, [pc, #52]	@ (8017964 <RadioInit+0xb0>)
 801792e:	2200      	movs	r2, #0
 8017930:	f04f 31ff 	mov.w	r1, #4294967295
 8017934:	480c      	ldr	r0, [pc, #48]	@ (8017968 <RadioInit+0xb4>)
 8017936:	f003 fee1 	bl	801b6fc <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801793a:	4809      	ldr	r0, [pc, #36]	@ (8017960 <RadioInit+0xac>)
 801793c:	f003 ff82 	bl	801b844 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8017940:	4809      	ldr	r0, [pc, #36]	@ (8017968 <RadioInit+0xb4>)
 8017942:	f003 ff7f 	bl	801b844 <UTIL_TIMER_Stop>
}
 8017946:	bf00      	nop
 8017948:	3708      	adds	r7, #8
 801794a:	46bd      	mov	sp, r7
 801794c:	bd80      	pop	{r7, pc}
 801794e:	bf00      	nop
 8017950:	20001498 	.word	0x20001498
 8017954:	2000149c 	.word	0x2000149c
 8017958:	08018a3d 	.word	0x08018a3d
 801795c:	080189c5 	.word	0x080189c5
 8017960:	200014f8 	.word	0x200014f8
 8017964:	080189d9 	.word	0x080189d9
 8017968:	20001510 	.word	0x20001510

0801796c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801796c:	b580      	push	{r7, lr}
 801796e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8017970:	f001 ffbe 	bl	80198f0 <SUBGRF_GetOperatingMode>
 8017974:	4603      	mov	r3, r0
 8017976:	2b07      	cmp	r3, #7
 8017978:	d00a      	beq.n	8017990 <RadioGetStatus+0x24>
 801797a:	2b07      	cmp	r3, #7
 801797c:	dc0a      	bgt.n	8017994 <RadioGetStatus+0x28>
 801797e:	2b04      	cmp	r3, #4
 8017980:	d002      	beq.n	8017988 <RadioGetStatus+0x1c>
 8017982:	2b05      	cmp	r3, #5
 8017984:	d002      	beq.n	801798c <RadioGetStatus+0x20>
 8017986:	e005      	b.n	8017994 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8017988:	2302      	movs	r3, #2
 801798a:	e004      	b.n	8017996 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801798c:	2301      	movs	r3, #1
 801798e:	e002      	b.n	8017996 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8017990:	2303      	movs	r3, #3
 8017992:	e000      	b.n	8017996 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8017994:	2300      	movs	r3, #0
    }
}
 8017996:	4618      	mov	r0, r3
 8017998:	bd80      	pop	{r7, pc}
	...

0801799c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b082      	sub	sp, #8
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	4603      	mov	r3, r0
 80179a4:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80179a6:	4a2a      	ldr	r2, [pc, #168]	@ (8017a50 <RadioSetModem+0xb4>)
 80179a8:	79fb      	ldrb	r3, [r7, #7]
 80179aa:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80179ac:	79fb      	ldrb	r3, [r7, #7]
 80179ae:	4618      	mov	r0, r3
 80179b0:	f003 f995 	bl	801acde <RFW_SetRadioModem>
    switch( modem )
 80179b4:	79fb      	ldrb	r3, [r7, #7]
 80179b6:	2b05      	cmp	r3, #5
 80179b8:	d80e      	bhi.n	80179d8 <RadioSetModem+0x3c>
 80179ba:	a201      	add	r2, pc, #4	@ (adr r2, 80179c0 <RadioSetModem+0x24>)
 80179bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80179c0:	080179e7 	.word	0x080179e7
 80179c4:	080179f5 	.word	0x080179f5
 80179c8:	080179d9 	.word	0x080179d9
 80179cc:	08017a1b 	.word	0x08017a1b
 80179d0:	08017a29 	.word	0x08017a29
 80179d4:	08017a37 	.word	0x08017a37
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80179d8:	2003      	movs	r0, #3
 80179da:	f002 fb49 	bl	801a070 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80179de:	4b1c      	ldr	r3, [pc, #112]	@ (8017a50 <RadioSetModem+0xb4>)
 80179e0:	2200      	movs	r2, #0
 80179e2:	735a      	strb	r2, [r3, #13]
        break;
 80179e4:	e02f      	b.n	8017a46 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80179e6:	2000      	movs	r0, #0
 80179e8:	f002 fb42 	bl	801a070 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80179ec:	4b18      	ldr	r3, [pc, #96]	@ (8017a50 <RadioSetModem+0xb4>)
 80179ee:	2200      	movs	r2, #0
 80179f0:	735a      	strb	r2, [r3, #13]
        break;
 80179f2:	e028      	b.n	8017a46 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80179f4:	2001      	movs	r0, #1
 80179f6:	f002 fb3b 	bl	801a070 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80179fa:	4b15      	ldr	r3, [pc, #84]	@ (8017a50 <RadioSetModem+0xb4>)
 80179fc:	7b5a      	ldrb	r2, [r3, #13]
 80179fe:	4b14      	ldr	r3, [pc, #80]	@ (8017a50 <RadioSetModem+0xb4>)
 8017a00:	7b1b      	ldrb	r3, [r3, #12]
 8017a02:	429a      	cmp	r2, r3
 8017a04:	d01e      	beq.n	8017a44 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8017a06:	4b12      	ldr	r3, [pc, #72]	@ (8017a50 <RadioSetModem+0xb4>)
 8017a08:	7b1a      	ldrb	r2, [r3, #12]
 8017a0a:	4b11      	ldr	r3, [pc, #68]	@ (8017a50 <RadioSetModem+0xb4>)
 8017a0c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8017a0e:	4b10      	ldr	r3, [pc, #64]	@ (8017a50 <RadioSetModem+0xb4>)
 8017a10:	7b5b      	ldrb	r3, [r3, #13]
 8017a12:	4618      	mov	r0, r3
 8017a14:	f000 ffa0 	bl	8018958 <RadioSetPublicNetwork>
        }
        break;
 8017a18:	e014      	b.n	8017a44 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017a1a:	2002      	movs	r0, #2
 8017a1c:	f002 fb28 	bl	801a070 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017a20:	4b0b      	ldr	r3, [pc, #44]	@ (8017a50 <RadioSetModem+0xb4>)
 8017a22:	2200      	movs	r2, #0
 8017a24:	735a      	strb	r2, [r3, #13]
        break;
 8017a26:	e00e      	b.n	8017a46 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017a28:	2002      	movs	r0, #2
 8017a2a:	f002 fb21 	bl	801a070 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017a2e:	4b08      	ldr	r3, [pc, #32]	@ (8017a50 <RadioSetModem+0xb4>)
 8017a30:	2200      	movs	r2, #0
 8017a32:	735a      	strb	r2, [r3, #13]
        break;
 8017a34:	e007      	b.n	8017a46 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017a36:	2000      	movs	r0, #0
 8017a38:	f002 fb1a 	bl	801a070 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017a3c:	4b04      	ldr	r3, [pc, #16]	@ (8017a50 <RadioSetModem+0xb4>)
 8017a3e:	2200      	movs	r2, #0
 8017a40:	735a      	strb	r2, [r3, #13]
        break;
 8017a42:	e000      	b.n	8017a46 <RadioSetModem+0xaa>
        break;
 8017a44:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8017a46:	bf00      	nop
 8017a48:	3708      	adds	r7, #8
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	bd80      	pop	{r7, pc}
 8017a4e:	bf00      	nop
 8017a50:	2000149c 	.word	0x2000149c

08017a54 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b082      	sub	sp, #8
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8017a5c:	6878      	ldr	r0, [r7, #4]
 8017a5e:	f002 fac1 	bl	8019fe4 <SUBGRF_SetRfFrequency>
}
 8017a62:	bf00      	nop
 8017a64:	3708      	adds	r7, #8
 8017a66:	46bd      	mov	sp, r7
 8017a68:	bd80      	pop	{r7, pc}

08017a6a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8017a6a:	b580      	push	{r7, lr}
 8017a6c:	b090      	sub	sp, #64	@ 0x40
 8017a6e:	af0a      	add	r7, sp, #40	@ 0x28
 8017a70:	60f8      	str	r0, [r7, #12]
 8017a72:	60b9      	str	r1, [r7, #8]
 8017a74:	603b      	str	r3, [r7, #0]
 8017a76:	4613      	mov	r3, r2
 8017a78:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8017a7a:	2301      	movs	r3, #1
 8017a7c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8017a7e:	2300      	movs	r3, #0
 8017a80:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8017a82:	2300      	movs	r3, #0
 8017a84:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8017a86:	f000 fdf2 	bl	801866e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8017a8a:	2000      	movs	r0, #0
 8017a8c:	f7ff ff86 	bl	801799c <RadioSetModem>

    RadioSetChannel( freq );
 8017a90:	68f8      	ldr	r0, [r7, #12]
 8017a92:	f7ff ffdf 	bl	8017a54 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8017a96:	2301      	movs	r3, #1
 8017a98:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	9308      	str	r3, [sp, #32]
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	9307      	str	r3, [sp, #28]
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	9306      	str	r3, [sp, #24]
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	9305      	str	r3, [sp, #20]
 8017aaa:	2300      	movs	r3, #0
 8017aac:	9304      	str	r3, [sp, #16]
 8017aae:	2300      	movs	r3, #0
 8017ab0:	9303      	str	r3, [sp, #12]
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	9302      	str	r3, [sp, #8]
 8017ab6:	2303      	movs	r3, #3
 8017ab8:	9301      	str	r3, [sp, #4]
 8017aba:	68bb      	ldr	r3, [r7, #8]
 8017abc:	9300      	str	r3, [sp, #0]
 8017abe:	2300      	movs	r3, #0
 8017ac0:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8017ac4:	68b9      	ldr	r1, [r7, #8]
 8017ac6:	2000      	movs	r0, #0
 8017ac8:	f000 f83c 	bl	8017b44 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8017acc:	2000      	movs	r0, #0
 8017ace:	f000 fdd5 	bl	801867c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8017ad2:	f000 ff6f 	bl	80189b4 <RadioGetWakeupTime>
 8017ad6:	4603      	mov	r3, r0
 8017ad8:	4618      	mov	r0, r3
 8017ada:	f7ea fe19 	bl	8002710 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8017ade:	f003 ffcb 	bl	801ba78 <UTIL_TIMER_GetCurrentTime>
 8017ae2:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017ae4:	e00d      	b.n	8017b02 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8017ae6:	2000      	movs	r0, #0
 8017ae8:	f000 feb6 	bl	8018858 <RadioRssi>
 8017aec:	4603      	mov	r3, r0
 8017aee:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8017af0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017af4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017af8:	429a      	cmp	r2, r3
 8017afa:	dd02      	ble.n	8017b02 <RadioIsChannelFree+0x98>
        {
            status = false;
 8017afc:	2300      	movs	r3, #0
 8017afe:	75fb      	strb	r3, [r7, #23]
            break;
 8017b00:	e006      	b.n	8017b10 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017b02:	6938      	ldr	r0, [r7, #16]
 8017b04:	f003 ffca 	bl	801ba9c <UTIL_TIMER_GetElapsedTime>
 8017b08:	4602      	mov	r2, r0
 8017b0a:	683b      	ldr	r3, [r7, #0]
 8017b0c:	4293      	cmp	r3, r2
 8017b0e:	d8ea      	bhi.n	8017ae6 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8017b10:	f000 fdad 	bl	801866e <RadioStandby>

    return status;
 8017b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8017b16:	4618      	mov	r0, r3
 8017b18:	3718      	adds	r7, #24
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	bd80      	pop	{r7, pc}

08017b1e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8017b1e:	b580      	push	{r7, lr}
 8017b20:	b082      	sub	sp, #8
 8017b22:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8017b24:	2300      	movs	r3, #0
 8017b26:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017b28:	2300      	movs	r3, #0
 8017b2a:	2200      	movs	r2, #0
 8017b2c:	2100      	movs	r1, #0
 8017b2e:	2000      	movs	r0, #0
 8017b30:	f002 f9fc 	bl	8019f2c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8017b34:	f001 ffad 	bl	8019a92 <SUBGRF_GetRandom>
 8017b38:	6078      	str	r0, [r7, #4]

    return rnd;
 8017b3a:	687b      	ldr	r3, [r7, #4]
}
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	3708      	adds	r7, #8
 8017b40:	46bd      	mov	sp, r7
 8017b42:	bd80      	pop	{r7, pc}

08017b44 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8017b44:	b580      	push	{r7, lr}
 8017b46:	b08a      	sub	sp, #40	@ 0x28
 8017b48:	af00      	add	r7, sp, #0
 8017b4a:	60b9      	str	r1, [r7, #8]
 8017b4c:	607a      	str	r2, [r7, #4]
 8017b4e:	461a      	mov	r2, r3
 8017b50:	4603      	mov	r3, r0
 8017b52:	73fb      	strb	r3, [r7, #15]
 8017b54:	4613      	mov	r3, r2
 8017b56:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8017b58:	4ab9      	ldr	r2, [pc, #740]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017b5a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017b5e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8017b60:	f003 f87b 	bl	801ac5a <RFW_DeInit>
    if( rxContinuous == true )
 8017b64:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d001      	beq.n	8017b70 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8017b70:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d004      	beq.n	8017b82 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8017b78:	4ab2      	ldr	r2, [pc, #712]	@ (8017e44 <RadioSetRxConfig+0x300>)
 8017b7a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8017b7e:	7013      	strb	r3, [r2, #0]
 8017b80:	e002      	b.n	8017b88 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8017b82:	4bb0      	ldr	r3, [pc, #704]	@ (8017e44 <RadioSetRxConfig+0x300>)
 8017b84:	22ff      	movs	r2, #255	@ 0xff
 8017b86:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8017b88:	7bfb      	ldrb	r3, [r7, #15]
 8017b8a:	2b05      	cmp	r3, #5
 8017b8c:	d009      	beq.n	8017ba2 <RadioSetRxConfig+0x5e>
 8017b8e:	2b05      	cmp	r3, #5
 8017b90:	f300 81d7 	bgt.w	8017f42 <RadioSetRxConfig+0x3fe>
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	f000 80bf 	beq.w	8017d18 <RadioSetRxConfig+0x1d4>
 8017b9a:	2b01      	cmp	r3, #1
 8017b9c:	f000 8124 	beq.w	8017de8 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8017ba0:	e1cf      	b.n	8017f42 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8017ba2:	2001      	movs	r0, #1
 8017ba4:	f002 f8ba 	bl	8019d1c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017ba8:	4ba5      	ldr	r3, [pc, #660]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017baa:	2200      	movs	r2, #0
 8017bac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017bb0:	4aa3      	ldr	r2, [pc, #652]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8017bb6:	4ba2      	ldr	r3, [pc, #648]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017bb8:	2209      	movs	r2, #9
 8017bba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8017bbe:	4ba0      	ldr	r3, [pc, #640]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017bc0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8017bc4:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017bc6:	68b8      	ldr	r0, [r7, #8]
 8017bc8:	f002 ff7a 	bl	801aac0 <SUBGRF_GetFskBandwidthRegValue>
 8017bcc:	4603      	mov	r3, r0
 8017bce:	461a      	mov	r2, r3
 8017bd0:	4b9b      	ldr	r3, [pc, #620]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017bd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017bd6:	4b9a      	ldr	r3, [pc, #616]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017bd8:	2200      	movs	r2, #0
 8017bda:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017bdc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017bde:	00db      	lsls	r3, r3, #3
 8017be0:	b29a      	uxth	r2, r3
 8017be2:	4b97      	ldr	r3, [pc, #604]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017be4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8017be6:	4b96      	ldr	r3, [pc, #600]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017be8:	2200      	movs	r2, #0
 8017bea:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8017bec:	4b94      	ldr	r3, [pc, #592]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017bee:	2210      	movs	r2, #16
 8017bf0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017bf2:	4b93      	ldr	r3, [pc, #588]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017bf4:	2200      	movs	r2, #0
 8017bf6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8017bf8:	4b91      	ldr	r3, [pc, #580]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017bfe:	4b91      	ldr	r3, [pc, #580]	@ (8017e44 <RadioSetRxConfig+0x300>)
 8017c00:	781a      	ldrb	r2, [r3, #0]
 8017c02:	4b8f      	ldr	r3, [pc, #572]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017c04:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017c06:	4b8e      	ldr	r3, [pc, #568]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017c08:	2201      	movs	r2, #1
 8017c0a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8017c0c:	4b8c      	ldr	r3, [pc, #560]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017c0e:	2200      	movs	r2, #0
 8017c10:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8017c12:	2005      	movs	r0, #5
 8017c14:	f7ff fec2 	bl	801799c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017c18:	488b      	ldr	r0, [pc, #556]	@ (8017e48 <RadioSetRxConfig+0x304>)
 8017c1a:	f002 fb1d 	bl	801a258 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017c1e:	488b      	ldr	r0, [pc, #556]	@ (8017e4c <RadioSetRxConfig+0x308>)
 8017c20:	f002 fbec 	bl	801a3fc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017c24:	4a8a      	ldr	r2, [pc, #552]	@ (8017e50 <RadioSetRxConfig+0x30c>)
 8017c26:	f107 031c 	add.w	r3, r7, #28
 8017c2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017c2e:	e883 0003 	stmia.w	r3, {r0, r1}
 8017c32:	f107 031c 	add.w	r3, r7, #28
 8017c36:	4618      	mov	r0, r3
 8017c38:	f001 fea9 	bl	801998e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017c3c:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017c40:	f001 fef4 	bl	8019a2c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8017c44:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8017c48:	f000 fe24 	bl	8018894 <RadioRead>
 8017c4c:	4603      	mov	r3, r0
 8017c4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8017c52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017c56:	f023 0310 	bic.w	r3, r3, #16
 8017c5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8017c5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017c62:	4619      	mov	r1, r3
 8017c64:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8017c68:	f000 fe02 	bl	8018870 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8017c6c:	2104      	movs	r1, #4
 8017c6e:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8017c72:	f000 fdfd 	bl	8018870 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8017c76:	f640 009b 	movw	r0, #2203	@ 0x89b
 8017c7a:	f000 fe0b 	bl	8018894 <RadioRead>
 8017c7e:	4603      	mov	r3, r0
 8017c80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017c84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017c88:	f023 031c 	bic.w	r3, r3, #28
 8017c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8017c90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017c94:	f043 0308 	orr.w	r3, r3, #8
 8017c98:	b2db      	uxtb	r3, r3
 8017c9a:	4619      	mov	r1, r3
 8017c9c:	f640 009b 	movw	r0, #2203	@ 0x89b
 8017ca0:	f000 fde6 	bl	8018870 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8017ca4:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8017ca8:	f000 fdf4 	bl	8018894 <RadioRead>
 8017cac:	4603      	mov	r3, r0
 8017cae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017cb6:	f023 0318 	bic.w	r3, r3, #24
 8017cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8017cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017cc2:	f043 0318 	orr.w	r3, r3, #24
 8017cc6:	b2db      	uxtb	r3, r3
 8017cc8:	4619      	mov	r1, r3
 8017cca:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8017cce:	f000 fdcf 	bl	8018870 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8017cd2:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8017cd6:	f000 fddd 	bl	8018894 <RadioRead>
 8017cda:	4603      	mov	r3, r0
 8017cdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8017ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017ce8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8017cec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017cf0:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8017cf4:	b2db      	uxtb	r3, r3
 8017cf6:	4619      	mov	r1, r3
 8017cf8:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8017cfc:	f000 fdb8 	bl	8018870 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017d00:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017d02:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017d06:	fb02 f303 	mul.w	r3, r2, r3
 8017d0a:	461a      	mov	r2, r3
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017d12:	4a4b      	ldr	r2, [pc, #300]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017d14:	6093      	str	r3, [r2, #8]
            break;
 8017d16:	e115      	b.n	8017f44 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017d18:	2000      	movs	r0, #0
 8017d1a:	f001 ffff 	bl	8019d1c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017d1e:	4b48      	ldr	r3, [pc, #288]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017d20:	2200      	movs	r2, #0
 8017d22:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017d26:	4a46      	ldr	r2, [pc, #280]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017d2c:	4b44      	ldr	r3, [pc, #272]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017d2e:	220b      	movs	r2, #11
 8017d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017d34:	68b8      	ldr	r0, [r7, #8]
 8017d36:	f002 fec3 	bl	801aac0 <SUBGRF_GetFskBandwidthRegValue>
 8017d3a:	4603      	mov	r3, r0
 8017d3c:	461a      	mov	r2, r3
 8017d3e:	4b40      	ldr	r3, [pc, #256]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017d44:	4b3e      	ldr	r3, [pc, #248]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017d46:	2200      	movs	r2, #0
 8017d48:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017d4a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017d4c:	00db      	lsls	r3, r3, #3
 8017d4e:	b29a      	uxth	r2, r3
 8017d50:	4b3b      	ldr	r3, [pc, #236]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017d52:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017d54:	4b3a      	ldr	r3, [pc, #232]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017d56:	2204      	movs	r2, #4
 8017d58:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8017d5a:	4b39      	ldr	r3, [pc, #228]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017d5c:	2218      	movs	r2, #24
 8017d5e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017d60:	4b37      	ldr	r3, [pc, #220]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017d62:	2200      	movs	r2, #0
 8017d64:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017d66:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017d6a:	f083 0301 	eor.w	r3, r3, #1
 8017d6e:	b2db      	uxtb	r3, r3
 8017d70:	461a      	mov	r2, r3
 8017d72:	4b33      	ldr	r3, [pc, #204]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017d74:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017d76:	4b33      	ldr	r3, [pc, #204]	@ (8017e44 <RadioSetRxConfig+0x300>)
 8017d78:	781a      	ldrb	r2, [r3, #0]
 8017d7a:	4b31      	ldr	r3, [pc, #196]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017d7c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8017d7e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d003      	beq.n	8017d8e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017d86:	4b2e      	ldr	r3, [pc, #184]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017d88:	22f2      	movs	r2, #242	@ 0xf2
 8017d8a:	75da      	strb	r2, [r3, #23]
 8017d8c:	e002      	b.n	8017d94 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017d90:	2201      	movs	r2, #1
 8017d92:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017d94:	4b2a      	ldr	r3, [pc, #168]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017d96:	2201      	movs	r2, #1
 8017d98:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017d9a:	f000 fc68 	bl	801866e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8017d9e:	2000      	movs	r0, #0
 8017da0:	f7ff fdfc 	bl	801799c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017da4:	4828      	ldr	r0, [pc, #160]	@ (8017e48 <RadioSetRxConfig+0x304>)
 8017da6:	f002 fa57 	bl	801a258 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017daa:	4828      	ldr	r0, [pc, #160]	@ (8017e4c <RadioSetRxConfig+0x308>)
 8017dac:	f002 fb26 	bl	801a3fc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017db0:	4a28      	ldr	r2, [pc, #160]	@ (8017e54 <RadioSetRxConfig+0x310>)
 8017db2:	f107 0314 	add.w	r3, r7, #20
 8017db6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017dba:	e883 0003 	stmia.w	r3, {r0, r1}
 8017dbe:	f107 0314 	add.w	r3, r7, #20
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	f001 fde3 	bl	801998e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017dc8:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017dcc:	f001 fe2e 	bl	8019a2c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017dd0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017dd2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017dd6:	fb02 f303 	mul.w	r3, r2, r3
 8017dda:	461a      	mov	r2, r3
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8017de2:	4a17      	ldr	r2, [pc, #92]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017de4:	6093      	str	r3, [r2, #8]
            break;
 8017de6:	e0ad      	b.n	8017f44 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017de8:	2000      	movs	r0, #0
 8017dea:	f001 ff97 	bl	8019d1c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017dee:	4b14      	ldr	r3, [pc, #80]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017df0:	2201      	movs	r2, #1
 8017df2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	b2da      	uxtb	r2, r3
 8017dfa:	4b11      	ldr	r3, [pc, #68]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017dfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8017e00:	4a15      	ldr	r2, [pc, #84]	@ (8017e58 <RadioSetRxConfig+0x314>)
 8017e02:	68bb      	ldr	r3, [r7, #8]
 8017e04:	4413      	add	r3, r2
 8017e06:	781a      	ldrb	r2, [r3, #0]
 8017e08:	4b0d      	ldr	r3, [pc, #52]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017e0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8017e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017e10:	7bbb      	ldrb	r3, [r7, #14]
 8017e12:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017e16:	68bb      	ldr	r3, [r7, #8]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d105      	bne.n	8017e28 <RadioSetRxConfig+0x2e4>
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	2b0b      	cmp	r3, #11
 8017e20:	d008      	beq.n	8017e34 <RadioSetRxConfig+0x2f0>
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	2b0c      	cmp	r3, #12
 8017e26:	d005      	beq.n	8017e34 <RadioSetRxConfig+0x2f0>
 8017e28:	68bb      	ldr	r3, [r7, #8]
 8017e2a:	2b01      	cmp	r3, #1
 8017e2c:	d116      	bne.n	8017e5c <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	2b0c      	cmp	r3, #12
 8017e32:	d113      	bne.n	8017e5c <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017e34:	4b02      	ldr	r3, [pc, #8]	@ (8017e40 <RadioSetRxConfig+0x2fc>)
 8017e36:	2201      	movs	r2, #1
 8017e38:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017e3c:	e012      	b.n	8017e64 <RadioSetRxConfig+0x320>
 8017e3e:	bf00      	nop
 8017e40:	2000149c 	.word	0x2000149c
 8017e44:	20000124 	.word	0x20000124
 8017e48:	200014d4 	.word	0x200014d4
 8017e4c:	200014aa 	.word	0x200014aa
 8017e50:	0801d64c 	.word	0x0801d64c
 8017e54:	0801d654 	.word	0x0801d654
 8017e58:	0801dd28 	.word	0x0801dd28
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8017f4c <RadioSetRxConfig+0x408>)
 8017e5e:	2200      	movs	r2, #0
 8017e60:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017e64:	4b39      	ldr	r3, [pc, #228]	@ (8017f4c <RadioSetRxConfig+0x408>)
 8017e66:	2201      	movs	r2, #1
 8017e68:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017e6a:	4b38      	ldr	r3, [pc, #224]	@ (8017f4c <RadioSetRxConfig+0x408>)
 8017e6c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017e70:	2b05      	cmp	r3, #5
 8017e72:	d004      	beq.n	8017e7e <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017e74:	4b35      	ldr	r3, [pc, #212]	@ (8017f4c <RadioSetRxConfig+0x408>)
 8017e76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017e7a:	2b06      	cmp	r3, #6
 8017e7c:	d10a      	bne.n	8017e94 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8017e7e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017e80:	2b0b      	cmp	r3, #11
 8017e82:	d803      	bhi.n	8017e8c <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017e84:	4b31      	ldr	r3, [pc, #196]	@ (8017f4c <RadioSetRxConfig+0x408>)
 8017e86:	220c      	movs	r2, #12
 8017e88:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017e8a:	e006      	b.n	8017e9a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017e8c:	4a2f      	ldr	r2, [pc, #188]	@ (8017f4c <RadioSetRxConfig+0x408>)
 8017e8e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017e90:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017e92:	e002      	b.n	8017e9a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017e94:	4a2d      	ldr	r2, [pc, #180]	@ (8017f4c <RadioSetRxConfig+0x408>)
 8017e96:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017e98:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017e9a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8017e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8017f4c <RadioSetRxConfig+0x408>)
 8017ea0:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8017f50 <RadioSetRxConfig+0x40c>)
 8017ea4:	781a      	ldrb	r2, [r3, #0]
 8017ea6:	4b29      	ldr	r3, [pc, #164]	@ (8017f4c <RadioSetRxConfig+0x408>)
 8017ea8:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017eaa:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8017eae:	4b27      	ldr	r3, [pc, #156]	@ (8017f4c <RadioSetRxConfig+0x408>)
 8017eb0:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017eb4:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8017eb8:	4b24      	ldr	r3, [pc, #144]	@ (8017f4c <RadioSetRxConfig+0x408>)
 8017eba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8017ebe:	f000 fbd6 	bl	801866e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017ec2:	2001      	movs	r0, #1
 8017ec4:	f7ff fd6a 	bl	801799c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017ec8:	4822      	ldr	r0, [pc, #136]	@ (8017f54 <RadioSetRxConfig+0x410>)
 8017eca:	f002 f9c5 	bl	801a258 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017ece:	4822      	ldr	r0, [pc, #136]	@ (8017f58 <RadioSetRxConfig+0x414>)
 8017ed0:	f002 fa94 	bl	801a3fc <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017ed4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017ed6:	b2db      	uxtb	r3, r3
 8017ed8:	4618      	mov	r0, r3
 8017eda:	f001 ff2e 	bl	8019d3a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8017ede:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8017ee2:	f002 fbe7 	bl	801a6b4 <SUBGRF_ReadRegister>
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	f003 0301 	and.w	r3, r3, #1
 8017eec:	b2db      	uxtb	r3, r3
 8017eee:	4619      	mov	r1, r3
 8017ef0:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8017ef4:	f002 fbca 	bl	801a68c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8017ef8:	4b14      	ldr	r3, [pc, #80]	@ (8017f4c <RadioSetRxConfig+0x408>)
 8017efa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8017efe:	2b01      	cmp	r3, #1
 8017f00:	d10d      	bne.n	8017f1e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8017f02:	f240 7036 	movw	r0, #1846	@ 0x736
 8017f06:	f002 fbd5 	bl	801a6b4 <SUBGRF_ReadRegister>
 8017f0a:	4603      	mov	r3, r0
 8017f0c:	f023 0304 	bic.w	r3, r3, #4
 8017f10:	b2db      	uxtb	r3, r3
 8017f12:	4619      	mov	r1, r3
 8017f14:	f240 7036 	movw	r0, #1846	@ 0x736
 8017f18:	f002 fbb8 	bl	801a68c <SUBGRF_WriteRegister>
 8017f1c:	e00c      	b.n	8017f38 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8017f1e:	f240 7036 	movw	r0, #1846	@ 0x736
 8017f22:	f002 fbc7 	bl	801a6b4 <SUBGRF_ReadRegister>
 8017f26:	4603      	mov	r3, r0
 8017f28:	f043 0304 	orr.w	r3, r3, #4
 8017f2c:	b2db      	uxtb	r3, r3
 8017f2e:	4619      	mov	r1, r3
 8017f30:	f240 7036 	movw	r0, #1846	@ 0x736
 8017f34:	f002 fbaa 	bl	801a68c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8017f38:	4b04      	ldr	r3, [pc, #16]	@ (8017f4c <RadioSetRxConfig+0x408>)
 8017f3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017f3e:	609a      	str	r2, [r3, #8]
            break;
 8017f40:	e000      	b.n	8017f44 <RadioSetRxConfig+0x400>
            break;
 8017f42:	bf00      	nop
    }
}
 8017f44:	bf00      	nop
 8017f46:	3728      	adds	r7, #40	@ 0x28
 8017f48:	46bd      	mov	sp, r7
 8017f4a:	bd80      	pop	{r7, pc}
 8017f4c:	2000149c 	.word	0x2000149c
 8017f50:	20000124 	.word	0x20000124
 8017f54:	200014d4 	.word	0x200014d4
 8017f58:	200014aa 	.word	0x200014aa

08017f5c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8017f5c:	b580      	push	{r7, lr}
 8017f5e:	b086      	sub	sp, #24
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	60ba      	str	r2, [r7, #8]
 8017f64:	607b      	str	r3, [r7, #4]
 8017f66:	4603      	mov	r3, r0
 8017f68:	73fb      	strb	r3, [r7, #15]
 8017f6a:	460b      	mov	r3, r1
 8017f6c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8017f6e:	f002 fe74 	bl	801ac5a <RFW_DeInit>
    switch( modem )
 8017f72:	7bfb      	ldrb	r3, [r7, #15]
 8017f74:	2b04      	cmp	r3, #4
 8017f76:	f000 80c7 	beq.w	8018108 <RadioSetTxConfig+0x1ac>
 8017f7a:	2b04      	cmp	r3, #4
 8017f7c:	f300 80d6 	bgt.w	801812c <RadioSetTxConfig+0x1d0>
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d002      	beq.n	8017f8a <RadioSetTxConfig+0x2e>
 8017f84:	2b01      	cmp	r3, #1
 8017f86:	d059      	beq.n	801803c <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017f88:	e0d0      	b.n	801812c <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017f8a:	4b77      	ldr	r3, [pc, #476]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017f92:	4a75      	ldr	r2, [pc, #468]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8017f94:	6a3b      	ldr	r3, [r7, #32]
 8017f96:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017f98:	4b73      	ldr	r3, [pc, #460]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8017f9a:	220b      	movs	r2, #11
 8017f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017fa0:	6878      	ldr	r0, [r7, #4]
 8017fa2:	f002 fd8d 	bl	801aac0 <SUBGRF_GetFskBandwidthRegValue>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	461a      	mov	r2, r3
 8017faa:	4b6f      	ldr	r3, [pc, #444]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8017fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8017fb0:	4a6d      	ldr	r2, [pc, #436]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8017fb2:	68bb      	ldr	r3, [r7, #8]
 8017fb4:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017fb6:	4b6c      	ldr	r3, [pc, #432]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8017fb8:	2200      	movs	r2, #0
 8017fba:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017fbc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017fbe:	00db      	lsls	r3, r3, #3
 8017fc0:	b29a      	uxth	r2, r3
 8017fc2:	4b69      	ldr	r3, [pc, #420]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8017fc4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017fc6:	4b68      	ldr	r3, [pc, #416]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8017fc8:	2204      	movs	r2, #4
 8017fca:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8017fcc:	4b66      	ldr	r3, [pc, #408]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8017fce:	2218      	movs	r2, #24
 8017fd0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017fd2:	4b65      	ldr	r3, [pc, #404]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8017fd4:	2200      	movs	r2, #0
 8017fd6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017fd8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017fdc:	f083 0301 	eor.w	r3, r3, #1
 8017fe0:	b2db      	uxtb	r3, r3
 8017fe2:	461a      	mov	r2, r3
 8017fe4:	4b60      	ldr	r3, [pc, #384]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8017fe6:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8017fe8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d003      	beq.n	8017ff8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017ff0:	4b5d      	ldr	r3, [pc, #372]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8017ff2:	22f2      	movs	r2, #242	@ 0xf2
 8017ff4:	75da      	strb	r2, [r3, #23]
 8017ff6:	e002      	b.n	8017ffe <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017ff8:	4b5b      	ldr	r3, [pc, #364]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8017ffa:	2201      	movs	r2, #1
 8017ffc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017ffe:	4b5a      	ldr	r3, [pc, #360]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8018000:	2201      	movs	r2, #1
 8018002:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018004:	f000 fb33 	bl	801866e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8018008:	2000      	movs	r0, #0
 801800a:	f7ff fcc7 	bl	801799c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801800e:	4857      	ldr	r0, [pc, #348]	@ (801816c <RadioSetTxConfig+0x210>)
 8018010:	f002 f922 	bl	801a258 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018014:	4856      	ldr	r0, [pc, #344]	@ (8018170 <RadioSetTxConfig+0x214>)
 8018016:	f002 f9f1 	bl	801a3fc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801801a:	4a56      	ldr	r2, [pc, #344]	@ (8018174 <RadioSetTxConfig+0x218>)
 801801c:	f107 0310 	add.w	r3, r7, #16
 8018020:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018024:	e883 0003 	stmia.w	r3, {r0, r1}
 8018028:	f107 0310 	add.w	r3, r7, #16
 801802c:	4618      	mov	r0, r3
 801802e:	f001 fcae 	bl	801998e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018032:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8018036:	f001 fcf9 	bl	8019a2c <SUBGRF_SetWhiteningSeed>
            break;
 801803a:	e078      	b.n	801812e <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801803c:	4b4a      	ldr	r3, [pc, #296]	@ (8018168 <RadioSetTxConfig+0x20c>)
 801803e:	2201      	movs	r2, #1
 8018040:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8018044:	6a3b      	ldr	r3, [r7, #32]
 8018046:	b2da      	uxtb	r2, r3
 8018048:	4b47      	ldr	r3, [pc, #284]	@ (8018168 <RadioSetTxConfig+0x20c>)
 801804a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801804e:	4a4a      	ldr	r2, [pc, #296]	@ (8018178 <RadioSetTxConfig+0x21c>)
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	4413      	add	r3, r2
 8018054:	781a      	ldrb	r2, [r3, #0]
 8018056:	4b44      	ldr	r3, [pc, #272]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8018058:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801805c:	4a42      	ldr	r2, [pc, #264]	@ (8018168 <RadioSetTxConfig+0x20c>)
 801805e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018062:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d105      	bne.n	8018078 <RadioSetTxConfig+0x11c>
 801806c:	6a3b      	ldr	r3, [r7, #32]
 801806e:	2b0b      	cmp	r3, #11
 8018070:	d008      	beq.n	8018084 <RadioSetTxConfig+0x128>
 8018072:	6a3b      	ldr	r3, [r7, #32]
 8018074:	2b0c      	cmp	r3, #12
 8018076:	d005      	beq.n	8018084 <RadioSetTxConfig+0x128>
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	2b01      	cmp	r3, #1
 801807c:	d107      	bne.n	801808e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801807e:	6a3b      	ldr	r3, [r7, #32]
 8018080:	2b0c      	cmp	r3, #12
 8018082:	d104      	bne.n	801808e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018084:	4b38      	ldr	r3, [pc, #224]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8018086:	2201      	movs	r2, #1
 8018088:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 801808c:	e003      	b.n	8018096 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801808e:	4b36      	ldr	r3, [pc, #216]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8018090:	2200      	movs	r2, #0
 8018092:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018096:	4b34      	ldr	r3, [pc, #208]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8018098:	2201      	movs	r2, #1
 801809a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801809c:	4b32      	ldr	r3, [pc, #200]	@ (8018168 <RadioSetTxConfig+0x20c>)
 801809e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80180a2:	2b05      	cmp	r3, #5
 80180a4:	d004      	beq.n	80180b0 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80180a6:	4b30      	ldr	r3, [pc, #192]	@ (8018168 <RadioSetTxConfig+0x20c>)
 80180a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80180ac:	2b06      	cmp	r3, #6
 80180ae:	d10a      	bne.n	80180c6 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80180b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80180b2:	2b0b      	cmp	r3, #11
 80180b4:	d803      	bhi.n	80180be <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80180b6:	4b2c      	ldr	r3, [pc, #176]	@ (8018168 <RadioSetTxConfig+0x20c>)
 80180b8:	220c      	movs	r2, #12
 80180ba:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80180bc:	e006      	b.n	80180cc <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80180be:	4a2a      	ldr	r2, [pc, #168]	@ (8018168 <RadioSetTxConfig+0x20c>)
 80180c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80180c2:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80180c4:	e002      	b.n	80180cc <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80180c6:	4a28      	ldr	r2, [pc, #160]	@ (8018168 <RadioSetTxConfig+0x20c>)
 80180c8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80180ca:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80180cc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80180d0:	4b25      	ldr	r3, [pc, #148]	@ (8018168 <RadioSetTxConfig+0x20c>)
 80180d2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80180d4:	4b29      	ldr	r3, [pc, #164]	@ (801817c <RadioSetTxConfig+0x220>)
 80180d6:	781a      	ldrb	r2, [r3, #0]
 80180d8:	4b23      	ldr	r3, [pc, #140]	@ (8018168 <RadioSetTxConfig+0x20c>)
 80180da:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80180dc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80180e0:	4b21      	ldr	r3, [pc, #132]	@ (8018168 <RadioSetTxConfig+0x20c>)
 80180e2:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80180e6:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80180ea:	4b1f      	ldr	r3, [pc, #124]	@ (8018168 <RadioSetTxConfig+0x20c>)
 80180ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80180f0:	f000 fabd 	bl	801866e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80180f4:	2001      	movs	r0, #1
 80180f6:	f7ff fc51 	bl	801799c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80180fa:	481c      	ldr	r0, [pc, #112]	@ (801816c <RadioSetTxConfig+0x210>)
 80180fc:	f002 f8ac 	bl	801a258 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018100:	481b      	ldr	r0, [pc, #108]	@ (8018170 <RadioSetTxConfig+0x214>)
 8018102:	f002 f97b 	bl	801a3fc <SUBGRF_SetPacketParams>
            break;
 8018106:	e012      	b.n	801812e <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8018108:	2004      	movs	r0, #4
 801810a:	f7ff fc47 	bl	801799c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801810e:	4b16      	ldr	r3, [pc, #88]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8018110:	2202      	movs	r2, #2
 8018112:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8018116:	4a14      	ldr	r2, [pc, #80]	@ (8018168 <RadioSetTxConfig+0x20c>)
 8018118:	6a3b      	ldr	r3, [r7, #32]
 801811a:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801811c:	4b12      	ldr	r3, [pc, #72]	@ (8018168 <RadioSetTxConfig+0x20c>)
 801811e:	2216      	movs	r2, #22
 8018120:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018124:	4811      	ldr	r0, [pc, #68]	@ (801816c <RadioSetTxConfig+0x210>)
 8018126:	f002 f897 	bl	801a258 <SUBGRF_SetModulationParams>
            break;
 801812a:	e000      	b.n	801812e <RadioSetTxConfig+0x1d2>
            break;
 801812c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801812e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018132:	4618      	mov	r0, r3
 8018134:	f002 fbc6 	bl	801a8c4 <SUBGRF_SetRfTxPower>
 8018138:	4603      	mov	r3, r0
 801813a:	461a      	mov	r2, r3
 801813c:	4b0a      	ldr	r3, [pc, #40]	@ (8018168 <RadioSetTxConfig+0x20c>)
 801813e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018142:	210e      	movs	r1, #14
 8018144:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018148:	f002 faa0 	bl	801a68c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801814c:	4b06      	ldr	r3, [pc, #24]	@ (8018168 <RadioSetTxConfig+0x20c>)
 801814e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018152:	4618      	mov	r0, r3
 8018154:	f002 fd95 	bl	801ac82 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018158:	4a03      	ldr	r2, [pc, #12]	@ (8018168 <RadioSetTxConfig+0x20c>)
 801815a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801815c:	6053      	str	r3, [r2, #4]
}
 801815e:	bf00      	nop
 8018160:	3718      	adds	r7, #24
 8018162:	46bd      	mov	sp, r7
 8018164:	bd80      	pop	{r7, pc}
 8018166:	bf00      	nop
 8018168:	2000149c 	.word	0x2000149c
 801816c:	200014d4 	.word	0x200014d4
 8018170:	200014aa 	.word	0x200014aa
 8018174:	0801d654 	.word	0x0801d654
 8018178:	0801dd28 	.word	0x0801dd28
 801817c:	20000124 	.word	0x20000124

08018180 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8018180:	b480      	push	{r7}
 8018182:	b083      	sub	sp, #12
 8018184:	af00      	add	r7, sp, #0
 8018186:	6078      	str	r0, [r7, #4]
    return true;
 8018188:	2301      	movs	r3, #1
}
 801818a:	4618      	mov	r0, r3
 801818c:	370c      	adds	r7, #12
 801818e:	46bd      	mov	sp, r7
 8018190:	bc80      	pop	{r7}
 8018192:	4770      	bx	lr

08018194 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8018194:	b480      	push	{r7}
 8018196:	b085      	sub	sp, #20
 8018198:	af00      	add	r7, sp, #0
 801819a:	4603      	mov	r3, r0
 801819c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801819e:	2300      	movs	r3, #0
 80181a0:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80181a2:	79fb      	ldrb	r3, [r7, #7]
 80181a4:	2b0a      	cmp	r3, #10
 80181a6:	d83e      	bhi.n	8018226 <RadioGetLoRaBandwidthInHz+0x92>
 80181a8:	a201      	add	r2, pc, #4	@ (adr r2, 80181b0 <RadioGetLoRaBandwidthInHz+0x1c>)
 80181aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181ae:	bf00      	nop
 80181b0:	080181dd 	.word	0x080181dd
 80181b4:	080181ed 	.word	0x080181ed
 80181b8:	080181fd 	.word	0x080181fd
 80181bc:	0801820d 	.word	0x0801820d
 80181c0:	08018215 	.word	0x08018215
 80181c4:	0801821b 	.word	0x0801821b
 80181c8:	08018221 	.word	0x08018221
 80181cc:	08018227 	.word	0x08018227
 80181d0:	080181e5 	.word	0x080181e5
 80181d4:	080181f5 	.word	0x080181f5
 80181d8:	08018205 	.word	0x08018205
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80181dc:	f641 6384 	movw	r3, #7812	@ 0x1e84
 80181e0:	60fb      	str	r3, [r7, #12]
        break;
 80181e2:	e020      	b.n	8018226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80181e4:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 80181e8:	60fb      	str	r3, [r7, #12]
        break;
 80181ea:	e01c      	b.n	8018226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80181ec:	f643 5309 	movw	r3, #15625	@ 0x3d09
 80181f0:	60fb      	str	r3, [r7, #12]
        break;
 80181f2:	e018      	b.n	8018226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80181f4:	f245 1361 	movw	r3, #20833	@ 0x5161
 80181f8:	60fb      	str	r3, [r7, #12]
        break;
 80181fa:	e014      	b.n	8018226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80181fc:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8018200:	60fb      	str	r3, [r7, #12]
        break;
 8018202:	e010      	b.n	8018226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8018204:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8018208:	60fb      	str	r3, [r7, #12]
        break;
 801820a:	e00c      	b.n	8018226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801820c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8018210:	60fb      	str	r3, [r7, #12]
        break;
 8018212:	e008      	b.n	8018226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8018214:	4b07      	ldr	r3, [pc, #28]	@ (8018234 <RadioGetLoRaBandwidthInHz+0xa0>)
 8018216:	60fb      	str	r3, [r7, #12]
        break;
 8018218:	e005      	b.n	8018226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801821a:	4b07      	ldr	r3, [pc, #28]	@ (8018238 <RadioGetLoRaBandwidthInHz+0xa4>)
 801821c:	60fb      	str	r3, [r7, #12]
        break;
 801821e:	e002      	b.n	8018226 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8018220:	4b06      	ldr	r3, [pc, #24]	@ (801823c <RadioGetLoRaBandwidthInHz+0xa8>)
 8018222:	60fb      	str	r3, [r7, #12]
        break;
 8018224:	bf00      	nop
    }

    return bandwidthInHz;
 8018226:	68fb      	ldr	r3, [r7, #12]
}
 8018228:	4618      	mov	r0, r3
 801822a:	3714      	adds	r7, #20
 801822c:	46bd      	mov	sp, r7
 801822e:	bc80      	pop	{r7}
 8018230:	4770      	bx	lr
 8018232:	bf00      	nop
 8018234:	0001e848 	.word	0x0001e848
 8018238:	0003d090 	.word	0x0003d090
 801823c:	0007a120 	.word	0x0007a120

08018240 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018240:	b480      	push	{r7}
 8018242:	b083      	sub	sp, #12
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]
 8018248:	4608      	mov	r0, r1
 801824a:	4611      	mov	r1, r2
 801824c:	461a      	mov	r2, r3
 801824e:	4603      	mov	r3, r0
 8018250:	70fb      	strb	r3, [r7, #3]
 8018252:	460b      	mov	r3, r1
 8018254:	803b      	strh	r3, [r7, #0]
 8018256:	4613      	mov	r3, r2
 8018258:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801825a:	883b      	ldrh	r3, [r7, #0]
 801825c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801825e:	78ba      	ldrb	r2, [r7, #2]
 8018260:	f082 0201 	eor.w	r2, r2, #1
 8018264:	b2d2      	uxtb	r2, r2
 8018266:	2a00      	cmp	r2, #0
 8018268:	d001      	beq.n	801826e <RadioGetGfskTimeOnAirNumerator+0x2e>
 801826a:	2208      	movs	r2, #8
 801826c:	e000      	b.n	8018270 <RadioGetGfskTimeOnAirNumerator+0x30>
 801826e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8018270:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018272:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8018276:	7c3b      	ldrb	r3, [r7, #16]
 8018278:	7d39      	ldrb	r1, [r7, #20]
 801827a:	2900      	cmp	r1, #0
 801827c:	d001      	beq.n	8018282 <RadioGetGfskTimeOnAirNumerator+0x42>
 801827e:	2102      	movs	r1, #2
 8018280:	e000      	b.n	8018284 <RadioGetGfskTimeOnAirNumerator+0x44>
 8018282:	2100      	movs	r1, #0
 8018284:	440b      	add	r3, r1
 8018286:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018288:	4413      	add	r3, r2
}
 801828a:	4618      	mov	r0, r3
 801828c:	370c      	adds	r7, #12
 801828e:	46bd      	mov	sp, r7
 8018290:	bc80      	pop	{r7}
 8018292:	4770      	bx	lr

08018294 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018294:	b480      	push	{r7}
 8018296:	b08b      	sub	sp, #44	@ 0x2c
 8018298:	af00      	add	r7, sp, #0
 801829a:	60f8      	str	r0, [r7, #12]
 801829c:	60b9      	str	r1, [r7, #8]
 801829e:	4611      	mov	r1, r2
 80182a0:	461a      	mov	r2, r3
 80182a2:	460b      	mov	r3, r1
 80182a4:	71fb      	strb	r3, [r7, #7]
 80182a6:	4613      	mov	r3, r2
 80182a8:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80182aa:	79fb      	ldrb	r3, [r7, #7]
 80182ac:	3304      	adds	r3, #4
 80182ae:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80182b0:	2300      	movs	r3, #0
 80182b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80182b6:	68bb      	ldr	r3, [r7, #8]
 80182b8:	2b05      	cmp	r3, #5
 80182ba:	d002      	beq.n	80182c2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80182bc:	68bb      	ldr	r3, [r7, #8]
 80182be:	2b06      	cmp	r3, #6
 80182c0:	d104      	bne.n	80182cc <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80182c2:	88bb      	ldrh	r3, [r7, #4]
 80182c4:	2b0b      	cmp	r3, #11
 80182c6:	d801      	bhi.n	80182cc <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80182c8:	230c      	movs	r3, #12
 80182ca:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d105      	bne.n	80182de <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80182d2:	68bb      	ldr	r3, [r7, #8]
 80182d4:	2b0b      	cmp	r3, #11
 80182d6:	d008      	beq.n	80182ea <RadioGetLoRaTimeOnAirNumerator+0x56>
 80182d8:	68bb      	ldr	r3, [r7, #8]
 80182da:	2b0c      	cmp	r3, #12
 80182dc:	d005      	beq.n	80182ea <RadioGetLoRaTimeOnAirNumerator+0x56>
 80182de:	68fb      	ldr	r3, [r7, #12]
 80182e0:	2b01      	cmp	r3, #1
 80182e2:	d105      	bne.n	80182f0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80182e4:	68bb      	ldr	r3, [r7, #8]
 80182e6:	2b0c      	cmp	r3, #12
 80182e8:	d102      	bne.n	80182f0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80182ea:	2301      	movs	r3, #1
 80182ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80182f0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80182f4:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80182f6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80182fa:	2a00      	cmp	r2, #0
 80182fc:	d001      	beq.n	8018302 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80182fe:	2210      	movs	r2, #16
 8018300:	e000      	b.n	8018304 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8018302:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018304:	4413      	add	r3, r2
 8018306:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8018308:	68bb      	ldr	r3, [r7, #8]
 801830a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801830c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801830e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8018312:	2a00      	cmp	r2, #0
 8018314:	d001      	beq.n	801831a <RadioGetLoRaTimeOnAirNumerator+0x86>
 8018316:	2200      	movs	r2, #0
 8018318:	e000      	b.n	801831c <RadioGetLoRaTimeOnAirNumerator+0x88>
 801831a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801831c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801831e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8018320:	68bb      	ldr	r3, [r7, #8]
 8018322:	2b06      	cmp	r3, #6
 8018324:	d803      	bhi.n	801832e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8018326:	68bb      	ldr	r3, [r7, #8]
 8018328:	009b      	lsls	r3, r3, #2
 801832a:	623b      	str	r3, [r7, #32]
 801832c:	e00e      	b.n	801834c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801832e:	69fb      	ldr	r3, [r7, #28]
 8018330:	3308      	adds	r3, #8
 8018332:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8018334:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018338:	2b00      	cmp	r3, #0
 801833a:	d004      	beq.n	8018346 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801833c:	68bb      	ldr	r3, [r7, #8]
 801833e:	3b02      	subs	r3, #2
 8018340:	009b      	lsls	r3, r3, #2
 8018342:	623b      	str	r3, [r7, #32]
 8018344:	e002      	b.n	801834c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8018346:	68bb      	ldr	r3, [r7, #8]
 8018348:	009b      	lsls	r3, r3, #2
 801834a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801834c:	69fb      	ldr	r3, [r7, #28]
 801834e:	2b00      	cmp	r3, #0
 8018350:	da01      	bge.n	8018356 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8018352:	2300      	movs	r3, #0
 8018354:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8018356:	69fa      	ldr	r2, [r7, #28]
 8018358:	6a3b      	ldr	r3, [r7, #32]
 801835a:	4413      	add	r3, r2
 801835c:	1e5a      	subs	r2, r3, #1
 801835e:	6a3b      	ldr	r3, [r7, #32]
 8018360:	fb92 f3f3 	sdiv	r3, r2, r3
 8018364:	697a      	ldr	r2, [r7, #20]
 8018366:	fb03 f202 	mul.w	r2, r3, r2
 801836a:	88bb      	ldrh	r3, [r7, #4]
 801836c:	4413      	add	r3, r2
    int32_t intermediate =
 801836e:	330c      	adds	r3, #12
 8018370:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8018372:	68bb      	ldr	r3, [r7, #8]
 8018374:	2b06      	cmp	r3, #6
 8018376:	d802      	bhi.n	801837e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8018378:	69bb      	ldr	r3, [r7, #24]
 801837a:	3302      	adds	r3, #2
 801837c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801837e:	69bb      	ldr	r3, [r7, #24]
 8018380:	009b      	lsls	r3, r3, #2
 8018382:	1c5a      	adds	r2, r3, #1
 8018384:	68bb      	ldr	r3, [r7, #8]
 8018386:	3b02      	subs	r3, #2
 8018388:	fa02 f303 	lsl.w	r3, r2, r3
}
 801838c:	4618      	mov	r0, r3
 801838e:	372c      	adds	r7, #44	@ 0x2c
 8018390:	46bd      	mov	sp, r7
 8018392:	bc80      	pop	{r7}
 8018394:	4770      	bx	lr
	...

08018398 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8018398:	b580      	push	{r7, lr}
 801839a:	b08a      	sub	sp, #40	@ 0x28
 801839c:	af04      	add	r7, sp, #16
 801839e:	60b9      	str	r1, [r7, #8]
 80183a0:	607a      	str	r2, [r7, #4]
 80183a2:	461a      	mov	r2, r3
 80183a4:	4603      	mov	r3, r0
 80183a6:	73fb      	strb	r3, [r7, #15]
 80183a8:	4613      	mov	r3, r2
 80183aa:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80183ac:	2300      	movs	r3, #0
 80183ae:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80183b0:	2301      	movs	r3, #1
 80183b2:	613b      	str	r3, [r7, #16]

    switch( modem )
 80183b4:	7bfb      	ldrb	r3, [r7, #15]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d002      	beq.n	80183c0 <RadioTimeOnAir+0x28>
 80183ba:	2b01      	cmp	r3, #1
 80183bc:	d017      	beq.n	80183ee <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80183be:	e035      	b.n	801842c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80183c0:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 80183c4:	8c3a      	ldrh	r2, [r7, #32]
 80183c6:	7bb9      	ldrb	r1, [r7, #14]
 80183c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80183cc:	9301      	str	r3, [sp, #4]
 80183ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80183d2:	9300      	str	r3, [sp, #0]
 80183d4:	4603      	mov	r3, r0
 80183d6:	6878      	ldr	r0, [r7, #4]
 80183d8:	f7ff ff32 	bl	8018240 <RadioGetGfskTimeOnAirNumerator>
 80183dc:	4603      	mov	r3, r0
 80183de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80183e2:	fb02 f303 	mul.w	r3, r2, r3
 80183e6:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	613b      	str	r3, [r7, #16]
        break;
 80183ec:	e01e      	b.n	801842c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80183ee:	8c39      	ldrh	r1, [r7, #32]
 80183f0:	7bba      	ldrb	r2, [r7, #14]
 80183f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80183f6:	9302      	str	r3, [sp, #8]
 80183f8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80183fc:	9301      	str	r3, [sp, #4]
 80183fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018402:	9300      	str	r3, [sp, #0]
 8018404:	460b      	mov	r3, r1
 8018406:	6879      	ldr	r1, [r7, #4]
 8018408:	68b8      	ldr	r0, [r7, #8]
 801840a:	f7ff ff43 	bl	8018294 <RadioGetLoRaTimeOnAirNumerator>
 801840e:	4603      	mov	r3, r0
 8018410:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018414:	fb02 f303 	mul.w	r3, r2, r3
 8018418:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801841a:	4a0a      	ldr	r2, [pc, #40]	@ (8018444 <RadioTimeOnAir+0xac>)
 801841c:	68bb      	ldr	r3, [r7, #8]
 801841e:	4413      	add	r3, r2
 8018420:	781b      	ldrb	r3, [r3, #0]
 8018422:	4618      	mov	r0, r3
 8018424:	f7ff feb6 	bl	8018194 <RadioGetLoRaBandwidthInHz>
 8018428:	6138      	str	r0, [r7, #16]
        break;
 801842a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801842c:	697a      	ldr	r2, [r7, #20]
 801842e:	693b      	ldr	r3, [r7, #16]
 8018430:	4413      	add	r3, r2
 8018432:	1e5a      	subs	r2, r3, #1
 8018434:	693b      	ldr	r3, [r7, #16]
 8018436:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801843a:	4618      	mov	r0, r3
 801843c:	3718      	adds	r7, #24
 801843e:	46bd      	mov	sp, r7
 8018440:	bd80      	pop	{r7, pc}
 8018442:	bf00      	nop
 8018444:	0801dd28 	.word	0x0801dd28

08018448 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8018448:	b580      	push	{r7, lr}
 801844a:	b084      	sub	sp, #16
 801844c:	af00      	add	r7, sp, #0
 801844e:	6078      	str	r0, [r7, #4]
 8018450:	460b      	mov	r3, r1
 8018452:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8018454:	2300      	movs	r3, #0
 8018456:	2200      	movs	r2, #0
 8018458:	f240 2101 	movw	r1, #513	@ 0x201
 801845c:	f240 2001 	movw	r0, #513	@ 0x201
 8018460:	f001 fd64 	bl	8019f2c <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018464:	4b73      	ldr	r3, [pc, #460]	@ (8018634 <RadioSend+0x1ec>)
 8018466:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801846a:	2101      	movs	r1, #1
 801846c:	4618      	mov	r0, r3
 801846e:	f002 fa01 	bl	801a874 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8018472:	4b70      	ldr	r3, [pc, #448]	@ (8018634 <RadioSend+0x1ec>)
 8018474:	781b      	ldrb	r3, [r3, #0]
 8018476:	2b01      	cmp	r3, #1
 8018478:	d112      	bne.n	80184a0 <RadioSend+0x58>
 801847a:	4b6e      	ldr	r3, [pc, #440]	@ (8018634 <RadioSend+0x1ec>)
 801847c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8018480:	2b06      	cmp	r3, #6
 8018482:	d10d      	bne.n	80184a0 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018484:	f640 0089 	movw	r0, #2185	@ 0x889
 8018488:	f002 f914 	bl	801a6b4 <SUBGRF_ReadRegister>
 801848c:	4603      	mov	r3, r0
 801848e:	f023 0304 	bic.w	r3, r3, #4
 8018492:	b2db      	uxtb	r3, r3
 8018494:	4619      	mov	r1, r3
 8018496:	f640 0089 	movw	r0, #2185	@ 0x889
 801849a:	f002 f8f7 	bl	801a68c <SUBGRF_WriteRegister>
 801849e:	e00c      	b.n	80184ba <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80184a0:	f640 0089 	movw	r0, #2185	@ 0x889
 80184a4:	f002 f906 	bl	801a6b4 <SUBGRF_ReadRegister>
 80184a8:	4603      	mov	r3, r0
 80184aa:	f043 0304 	orr.w	r3, r3, #4
 80184ae:	b2db      	uxtb	r3, r3
 80184b0:	4619      	mov	r1, r3
 80184b2:	f640 0089 	movw	r0, #2185	@ 0x889
 80184b6:	f002 f8e9 	bl	801a68c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 80184ba:	4b5e      	ldr	r3, [pc, #376]	@ (8018634 <RadioSend+0x1ec>)
 80184bc:	781b      	ldrb	r3, [r3, #0]
 80184be:	2b04      	cmp	r3, #4
 80184c0:	f200 80a8 	bhi.w	8018614 <RadioSend+0x1cc>
 80184c4:	a201      	add	r2, pc, #4	@ (adr r2, 80184cc <RadioSend+0x84>)
 80184c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184ca:	bf00      	nop
 80184cc:	080184fb 	.word	0x080184fb
 80184d0:	080184e1 	.word	0x080184e1
 80184d4:	080184fb 	.word	0x080184fb
 80184d8:	0801855d 	.word	0x0801855d
 80184dc:	0801857d 	.word	0x0801857d
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80184e0:	4a54      	ldr	r2, [pc, #336]	@ (8018634 <RadioSend+0x1ec>)
 80184e2:	78fb      	ldrb	r3, [r7, #3]
 80184e4:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80184e6:	4854      	ldr	r0, [pc, #336]	@ (8018638 <RadioSend+0x1f0>)
 80184e8:	f001 ff88 	bl	801a3fc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80184ec:	78fb      	ldrb	r3, [r7, #3]
 80184ee:	2200      	movs	r2, #0
 80184f0:	4619      	mov	r1, r3
 80184f2:	6878      	ldr	r0, [r7, #4]
 80184f4:	f001 fa38 	bl	8019968 <SUBGRF_SendPayload>
            break;
 80184f8:	e08d      	b.n	8018616 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80184fa:	f002 fbb4 	bl	801ac66 <RFW_Is_Init>
 80184fe:	4603      	mov	r3, r0
 8018500:	2b01      	cmp	r3, #1
 8018502:	d11e      	bne.n	8018542 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8018504:	f107 020d 	add.w	r2, r7, #13
 8018508:	78fb      	ldrb	r3, [r7, #3]
 801850a:	4619      	mov	r1, r3
 801850c:	6878      	ldr	r0, [r7, #4]
 801850e:	f002 fbc2 	bl	801ac96 <RFW_TransmitInit>
 8018512:	4603      	mov	r3, r0
 8018514:	2b00      	cmp	r3, #0
 8018516:	d10c      	bne.n	8018532 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8018518:	7b7a      	ldrb	r2, [r7, #13]
 801851a:	4b46      	ldr	r3, [pc, #280]	@ (8018634 <RadioSend+0x1ec>)
 801851c:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801851e:	4846      	ldr	r0, [pc, #280]	@ (8018638 <RadioSend+0x1f0>)
 8018520:	f001 ff6c 	bl	801a3fc <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8018524:	7b7b      	ldrb	r3, [r7, #13]
 8018526:	2200      	movs	r2, #0
 8018528:	4619      	mov	r1, r3
 801852a:	6878      	ldr	r0, [r7, #4]
 801852c:	f001 fa1c 	bl	8019968 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8018530:	e071      	b.n	8018616 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8018532:	4b42      	ldr	r3, [pc, #264]	@ (801863c <RadioSend+0x1f4>)
 8018534:	2201      	movs	r2, #1
 8018536:	2100      	movs	r1, #0
 8018538:	2002      	movs	r0, #2
 801853a:	f003 fb8d 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801853e:	2303      	movs	r3, #3
 8018540:	e073      	b.n	801862a <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8018542:	4a3c      	ldr	r2, [pc, #240]	@ (8018634 <RadioSend+0x1ec>)
 8018544:	78fb      	ldrb	r3, [r7, #3]
 8018546:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018548:	483b      	ldr	r0, [pc, #236]	@ (8018638 <RadioSend+0x1f0>)
 801854a:	f001 ff57 	bl	801a3fc <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801854e:	78fb      	ldrb	r3, [r7, #3]
 8018550:	2200      	movs	r2, #0
 8018552:	4619      	mov	r1, r3
 8018554:	6878      	ldr	r0, [r7, #4]
 8018556:	f001 fa07 	bl	8019968 <SUBGRF_SendPayload>
            break;
 801855a:	e05c      	b.n	8018616 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801855c:	4b35      	ldr	r3, [pc, #212]	@ (8018634 <RadioSend+0x1ec>)
 801855e:	2202      	movs	r2, #2
 8018560:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8018562:	4a34      	ldr	r2, [pc, #208]	@ (8018634 <RadioSend+0x1ec>)
 8018564:	78fb      	ldrb	r3, [r7, #3]
 8018566:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018568:	4833      	ldr	r0, [pc, #204]	@ (8018638 <RadioSend+0x1f0>)
 801856a:	f001 ff47 	bl	801a3fc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801856e:	78fb      	ldrb	r3, [r7, #3]
 8018570:	2200      	movs	r2, #0
 8018572:	4619      	mov	r1, r3
 8018574:	6878      	ldr	r0, [r7, #4]
 8018576:	f001 f9f7 	bl	8019968 <SUBGRF_SendPayload>
            break;
 801857a:	e04c      	b.n	8018616 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801857c:	78fb      	ldrb	r3, [r7, #3]
 801857e:	461a      	mov	r2, r3
 8018580:	6879      	ldr	r1, [r7, #4]
 8018582:	482f      	ldr	r0, [pc, #188]	@ (8018640 <RadioSend+0x1f8>)
 8018584:	f000 fcca 	bl	8018f1c <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8018588:	4b2a      	ldr	r3, [pc, #168]	@ (8018634 <RadioSend+0x1ec>)
 801858a:	2202      	movs	r2, #2
 801858c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801858e:	78fb      	ldrb	r3, [r7, #3]
 8018590:	3301      	adds	r3, #1
 8018592:	b2da      	uxtb	r2, r3
 8018594:	4b27      	ldr	r3, [pc, #156]	@ (8018634 <RadioSend+0x1ec>)
 8018596:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018598:	4827      	ldr	r0, [pc, #156]	@ (8018638 <RadioSend+0x1f0>)
 801859a:	f001 ff2f 	bl	801a3fc <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801859e:	2100      	movs	r1, #0
 80185a0:	20f1      	movs	r0, #241	@ 0xf1
 80185a2:	f000 f965 	bl	8018870 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 80185a6:	2100      	movs	r1, #0
 80185a8:	20f0      	movs	r0, #240	@ 0xf0
 80185aa:	f000 f961 	bl	8018870 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80185ae:	4b21      	ldr	r3, [pc, #132]	@ (8018634 <RadioSend+0x1ec>)
 80185b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80185b2:	2b64      	cmp	r3, #100	@ 0x64
 80185b4:	d108      	bne.n	80185c8 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80185b6:	2170      	movs	r1, #112	@ 0x70
 80185b8:	20f3      	movs	r0, #243	@ 0xf3
 80185ba:	f000 f959 	bl	8018870 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80185be:	211d      	movs	r1, #29
 80185c0:	20f2      	movs	r0, #242	@ 0xf2
 80185c2:	f000 f955 	bl	8018870 <RadioWrite>
 80185c6:	e007      	b.n	80185d8 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80185c8:	21e1      	movs	r1, #225	@ 0xe1
 80185ca:	20f3      	movs	r0, #243	@ 0xf3
 80185cc:	f000 f950 	bl	8018870 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80185d0:	2104      	movs	r1, #4
 80185d2:	20f2      	movs	r0, #242	@ 0xf2
 80185d4:	f000 f94c 	bl	8018870 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80185d8:	78fb      	ldrb	r3, [r7, #3]
 80185da:	b29b      	uxth	r3, r3
 80185dc:	00db      	lsls	r3, r3, #3
 80185de:	b29b      	uxth	r3, r3
 80185e0:	3302      	adds	r3, #2
 80185e2:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80185e4:	89fb      	ldrh	r3, [r7, #14]
 80185e6:	0a1b      	lsrs	r3, r3, #8
 80185e8:	b29b      	uxth	r3, r3
 80185ea:	b2db      	uxtb	r3, r3
 80185ec:	4619      	mov	r1, r3
 80185ee:	20f4      	movs	r0, #244	@ 0xf4
 80185f0:	f000 f93e 	bl	8018870 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80185f4:	89fb      	ldrh	r3, [r7, #14]
 80185f6:	b2db      	uxtb	r3, r3
 80185f8:	4619      	mov	r1, r3
 80185fa:	20f5      	movs	r0, #245	@ 0xf5
 80185fc:	f000 f938 	bl	8018870 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8018600:	78fb      	ldrb	r3, [r7, #3]
 8018602:	3301      	adds	r3, #1
 8018604:	b2db      	uxtb	r3, r3
 8018606:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 801860a:	4619      	mov	r1, r3
 801860c:	480c      	ldr	r0, [pc, #48]	@ (8018640 <RadioSend+0x1f8>)
 801860e:	f001 f9ab 	bl	8019968 <SUBGRF_SendPayload>
            break;
 8018612:	e000      	b.n	8018616 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018614:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8018616:	4b07      	ldr	r3, [pc, #28]	@ (8018634 <RadioSend+0x1ec>)
 8018618:	685b      	ldr	r3, [r3, #4]
 801861a:	4619      	mov	r1, r3
 801861c:	4809      	ldr	r0, [pc, #36]	@ (8018644 <RadioSend+0x1fc>)
 801861e:	f003 f981 	bl	801b924 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8018622:	4808      	ldr	r0, [pc, #32]	@ (8018644 <RadioSend+0x1fc>)
 8018624:	f003 f8a0 	bl	801b768 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8018628:	2300      	movs	r3, #0
}
 801862a:	4618      	mov	r0, r3
 801862c:	3710      	adds	r7, #16
 801862e:	46bd      	mov	sp, r7
 8018630:	bd80      	pop	{r7, pc}
 8018632:	bf00      	nop
 8018634:	2000149c 	.word	0x2000149c
 8018638:	200014aa 	.word	0x200014aa
 801863c:	0801d65c 	.word	0x0801d65c
 8018640:	20001398 	.word	0x20001398
 8018644:	200014f8 	.word	0x200014f8

08018648 <RadioSleep>:

static void RadioSleep( void )
{
 8018648:	b580      	push	{r7, lr}
 801864a:	b082      	sub	sp, #8
 801864c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801864e:	2300      	movs	r3, #0
 8018650:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8018652:	793b      	ldrb	r3, [r7, #4]
 8018654:	f043 0304 	orr.w	r3, r3, #4
 8018658:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801865a:	7938      	ldrb	r0, [r7, #4]
 801865c:	f001 fa60 	bl	8019b20 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8018660:	2002      	movs	r0, #2
 8018662:	f7ea f855 	bl	8002710 <HAL_Delay>
}
 8018666:	bf00      	nop
 8018668:	3708      	adds	r7, #8
 801866a:	46bd      	mov	sp, r7
 801866c:	bd80      	pop	{r7, pc}

0801866e <RadioStandby>:

static void RadioStandby( void )
{
 801866e:	b580      	push	{r7, lr}
 8018670:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8018672:	2000      	movs	r0, #0
 8018674:	f001 fa86 	bl	8019b84 <SUBGRF_SetStandby>
}
 8018678:	bf00      	nop
 801867a:	bd80      	pop	{r7, pc}

0801867c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801867c:	b580      	push	{r7, lr}
 801867e:	b082      	sub	sp, #8
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8018684:	f002 faef 	bl	801ac66 <RFW_Is_Init>
 8018688:	4603      	mov	r3, r0
 801868a:	2b01      	cmp	r3, #1
 801868c:	d102      	bne.n	8018694 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801868e:	f002 fb12 	bl	801acb6 <RFW_ReceiveInit>
 8018692:	e007      	b.n	80186a4 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018694:	2300      	movs	r3, #0
 8018696:	2200      	movs	r2, #0
 8018698:	f240 2162 	movw	r1, #610	@ 0x262
 801869c:	f240 2062 	movw	r0, #610	@ 0x262
 80186a0:	f001 fc44 	bl	8019f2c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d006      	beq.n	80186b8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80186aa:	6879      	ldr	r1, [r7, #4]
 80186ac:	4811      	ldr	r0, [pc, #68]	@ (80186f4 <RadioRx+0x78>)
 80186ae:	f003 f939 	bl	801b924 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80186b2:	4810      	ldr	r0, [pc, #64]	@ (80186f4 <RadioRx+0x78>)
 80186b4:	f003 f858 	bl	801b768 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80186b8:	4b0f      	ldr	r3, [pc, #60]	@ (80186f8 <RadioRx+0x7c>)
 80186ba:	2200      	movs	r2, #0
 80186bc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80186be:	4b0e      	ldr	r3, [pc, #56]	@ (80186f8 <RadioRx+0x7c>)
 80186c0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80186c4:	2100      	movs	r1, #0
 80186c6:	4618      	mov	r0, r3
 80186c8:	f002 f8d4 	bl	801a874 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80186cc:	4b0a      	ldr	r3, [pc, #40]	@ (80186f8 <RadioRx+0x7c>)
 80186ce:	785b      	ldrb	r3, [r3, #1]
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d004      	beq.n	80186de <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80186d4:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80186d8:	f001 fa90 	bl	8019bfc <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80186dc:	e005      	b.n	80186ea <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80186de:	4b06      	ldr	r3, [pc, #24]	@ (80186f8 <RadioRx+0x7c>)
 80186e0:	689b      	ldr	r3, [r3, #8]
 80186e2:	019b      	lsls	r3, r3, #6
 80186e4:	4618      	mov	r0, r3
 80186e6:	f001 fa89 	bl	8019bfc <SUBGRF_SetRx>
}
 80186ea:	bf00      	nop
 80186ec:	3708      	adds	r7, #8
 80186ee:	46bd      	mov	sp, r7
 80186f0:	bd80      	pop	{r7, pc}
 80186f2:	bf00      	nop
 80186f4:	20001510 	.word	0x20001510
 80186f8:	2000149c 	.word	0x2000149c

080186fc <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b082      	sub	sp, #8
 8018700:	af00      	add	r7, sp, #0
 8018702:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8018704:	f002 faaf 	bl	801ac66 <RFW_Is_Init>
 8018708:	4603      	mov	r3, r0
 801870a:	2b01      	cmp	r3, #1
 801870c:	d102      	bne.n	8018714 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801870e:	f002 fad2 	bl	801acb6 <RFW_ReceiveInit>
 8018712:	e007      	b.n	8018724 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018714:	2300      	movs	r3, #0
 8018716:	2200      	movs	r2, #0
 8018718:	f240 2162 	movw	r1, #610	@ 0x262
 801871c:	f240 2062 	movw	r0, #610	@ 0x262
 8018720:	f001 fc04 	bl	8019f2c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	2b00      	cmp	r3, #0
 8018728:	d006      	beq.n	8018738 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801872a:	6879      	ldr	r1, [r7, #4]
 801872c:	4811      	ldr	r0, [pc, #68]	@ (8018774 <RadioRxBoosted+0x78>)
 801872e:	f003 f8f9 	bl	801b924 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8018732:	4810      	ldr	r0, [pc, #64]	@ (8018774 <RadioRxBoosted+0x78>)
 8018734:	f003 f818 	bl	801b768 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018738:	4b0f      	ldr	r3, [pc, #60]	@ (8018778 <RadioRxBoosted+0x7c>)
 801873a:	2200      	movs	r2, #0
 801873c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801873e:	4b0e      	ldr	r3, [pc, #56]	@ (8018778 <RadioRxBoosted+0x7c>)
 8018740:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018744:	2100      	movs	r1, #0
 8018746:	4618      	mov	r0, r3
 8018748:	f002 f894 	bl	801a874 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801874c:	4b0a      	ldr	r3, [pc, #40]	@ (8018778 <RadioRxBoosted+0x7c>)
 801874e:	785b      	ldrb	r3, [r3, #1]
 8018750:	2b00      	cmp	r3, #0
 8018752:	d004      	beq.n	801875e <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8018754:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018758:	f001 fa70 	bl	8019c3c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801875c:	e005      	b.n	801876a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801875e:	4b06      	ldr	r3, [pc, #24]	@ (8018778 <RadioRxBoosted+0x7c>)
 8018760:	689b      	ldr	r3, [r3, #8]
 8018762:	019b      	lsls	r3, r3, #6
 8018764:	4618      	mov	r0, r3
 8018766:	f001 fa69 	bl	8019c3c <SUBGRF_SetRxBoosted>
}
 801876a:	bf00      	nop
 801876c:	3708      	adds	r7, #8
 801876e:	46bd      	mov	sp, r7
 8018770:	bd80      	pop	{r7, pc}
 8018772:	bf00      	nop
 8018774:	20001510 	.word	0x20001510
 8018778:	2000149c 	.word	0x2000149c

0801877c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801877c:	b580      	push	{r7, lr}
 801877e:	b082      	sub	sp, #8
 8018780:	af00      	add	r7, sp, #0
 8018782:	6078      	str	r0, [r7, #4]
 8018784:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	005a      	lsls	r2, r3, #1
 801878a:	683b      	ldr	r3, [r7, #0]
 801878c:	4413      	add	r3, r2
 801878e:	4a0c      	ldr	r2, [pc, #48]	@ (80187c0 <RadioSetRxDutyCycle+0x44>)
 8018790:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018792:	2300      	movs	r3, #0
 8018794:	2200      	movs	r2, #0
 8018796:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801879a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801879e:	f001 fbc5 	bl	8019f2c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80187a2:	4b07      	ldr	r3, [pc, #28]	@ (80187c0 <RadioSetRxDutyCycle+0x44>)
 80187a4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80187a8:	2100      	movs	r1, #0
 80187aa:	4618      	mov	r0, r3
 80187ac:	f002 f862 	bl	801a874 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80187b0:	6839      	ldr	r1, [r7, #0]
 80187b2:	6878      	ldr	r0, [r7, #4]
 80187b4:	f001 fa66 	bl	8019c84 <SUBGRF_SetRxDutyCycle>
}
 80187b8:	bf00      	nop
 80187ba:	3708      	adds	r7, #8
 80187bc:	46bd      	mov	sp, r7
 80187be:	bd80      	pop	{r7, pc}
 80187c0:	2000149c 	.word	0x2000149c

080187c4 <RadioStartCad>:

static void RadioStartCad( void )
{
 80187c4:	b580      	push	{r7, lr}
 80187c6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80187c8:	4b09      	ldr	r3, [pc, #36]	@ (80187f0 <RadioStartCad+0x2c>)
 80187ca:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80187ce:	2100      	movs	r1, #0
 80187d0:	4618      	mov	r0, r3
 80187d2:	f002 f84f 	bl	801a874 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80187d6:	2300      	movs	r3, #0
 80187d8:	2200      	movs	r2, #0
 80187da:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80187de:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80187e2:	f001 fba3 	bl	8019f2c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80187e6:	f001 fa79 	bl	8019cdc <SUBGRF_SetCad>
}
 80187ea:	bf00      	nop
 80187ec:	bd80      	pop	{r7, pc}
 80187ee:	bf00      	nop
 80187f0:	2000149c 	.word	0x2000149c

080187f4 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b084      	sub	sp, #16
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
 80187fc:	460b      	mov	r3, r1
 80187fe:	70fb      	strb	r3, [r7, #3]
 8018800:	4613      	mov	r3, r2
 8018802:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8018804:	883b      	ldrh	r3, [r7, #0]
 8018806:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801880a:	fb02 f303 	mul.w	r3, r2, r3
 801880e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8018810:	6878      	ldr	r0, [r7, #4]
 8018812:	f001 fbe7 	bl	8019fe4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8018816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801881a:	4618      	mov	r0, r3
 801881c:	f002 f852 	bl	801a8c4 <SUBGRF_SetRfTxPower>
 8018820:	4603      	mov	r3, r0
 8018822:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018824:	210e      	movs	r1, #14
 8018826:	f640 101f 	movw	r0, #2335	@ 0x91f
 801882a:	f001 ff2f 	bl	801a68c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801882e:	7afb      	ldrb	r3, [r7, #11]
 8018830:	2101      	movs	r1, #1
 8018832:	4618      	mov	r0, r3
 8018834:	f002 f81e 	bl	801a874 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8018838:	f001 fa5e 	bl	8019cf8 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801883c:	68f9      	ldr	r1, [r7, #12]
 801883e:	4805      	ldr	r0, [pc, #20]	@ (8018854 <RadioSetTxContinuousWave+0x60>)
 8018840:	f003 f870 	bl	801b924 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8018844:	4803      	ldr	r0, [pc, #12]	@ (8018854 <RadioSetTxContinuousWave+0x60>)
 8018846:	f002 ff8f 	bl	801b768 <UTIL_TIMER_Start>
}
 801884a:	bf00      	nop
 801884c:	3710      	adds	r7, #16
 801884e:	46bd      	mov	sp, r7
 8018850:	bd80      	pop	{r7, pc}
 8018852:	bf00      	nop
 8018854:	200014f8 	.word	0x200014f8

08018858 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b082      	sub	sp, #8
 801885c:	af00      	add	r7, sp, #0
 801885e:	4603      	mov	r3, r0
 8018860:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8018862:	f001 fe80 	bl	801a566 <SUBGRF_GetRssiInst>
 8018866:	4603      	mov	r3, r0
}
 8018868:	4618      	mov	r0, r3
 801886a:	3708      	adds	r7, #8
 801886c:	46bd      	mov	sp, r7
 801886e:	bd80      	pop	{r7, pc}

08018870 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8018870:	b580      	push	{r7, lr}
 8018872:	b082      	sub	sp, #8
 8018874:	af00      	add	r7, sp, #0
 8018876:	4603      	mov	r3, r0
 8018878:	460a      	mov	r2, r1
 801887a:	80fb      	strh	r3, [r7, #6]
 801887c:	4613      	mov	r3, r2
 801887e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8018880:	797a      	ldrb	r2, [r7, #5]
 8018882:	88fb      	ldrh	r3, [r7, #6]
 8018884:	4611      	mov	r1, r2
 8018886:	4618      	mov	r0, r3
 8018888:	f001 ff00 	bl	801a68c <SUBGRF_WriteRegister>
}
 801888c:	bf00      	nop
 801888e:	3708      	adds	r7, #8
 8018890:	46bd      	mov	sp, r7
 8018892:	bd80      	pop	{r7, pc}

08018894 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8018894:	b580      	push	{r7, lr}
 8018896:	b082      	sub	sp, #8
 8018898:	af00      	add	r7, sp, #0
 801889a:	4603      	mov	r3, r0
 801889c:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801889e:	88fb      	ldrh	r3, [r7, #6]
 80188a0:	4618      	mov	r0, r3
 80188a2:	f001 ff07 	bl	801a6b4 <SUBGRF_ReadRegister>
 80188a6:	4603      	mov	r3, r0
}
 80188a8:	4618      	mov	r0, r3
 80188aa:	3708      	adds	r7, #8
 80188ac:	46bd      	mov	sp, r7
 80188ae:	bd80      	pop	{r7, pc}

080188b0 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b082      	sub	sp, #8
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	4603      	mov	r3, r0
 80188b8:	6039      	str	r1, [r7, #0]
 80188ba:	80fb      	strh	r3, [r7, #6]
 80188bc:	4613      	mov	r3, r2
 80188be:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80188c0:	797b      	ldrb	r3, [r7, #5]
 80188c2:	b29a      	uxth	r2, r3
 80188c4:	88fb      	ldrh	r3, [r7, #6]
 80188c6:	6839      	ldr	r1, [r7, #0]
 80188c8:	4618      	mov	r0, r3
 80188ca:	f001 ff07 	bl	801a6dc <SUBGRF_WriteRegisters>
}
 80188ce:	bf00      	nop
 80188d0:	3708      	adds	r7, #8
 80188d2:	46bd      	mov	sp, r7
 80188d4:	bd80      	pop	{r7, pc}

080188d6 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80188d6:	b580      	push	{r7, lr}
 80188d8:	b082      	sub	sp, #8
 80188da:	af00      	add	r7, sp, #0
 80188dc:	4603      	mov	r3, r0
 80188de:	6039      	str	r1, [r7, #0]
 80188e0:	80fb      	strh	r3, [r7, #6]
 80188e2:	4613      	mov	r3, r2
 80188e4:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80188e6:	797b      	ldrb	r3, [r7, #5]
 80188e8:	b29a      	uxth	r2, r3
 80188ea:	88fb      	ldrh	r3, [r7, #6]
 80188ec:	6839      	ldr	r1, [r7, #0]
 80188ee:	4618      	mov	r0, r3
 80188f0:	f001 ff16 	bl	801a720 <SUBGRF_ReadRegisters>
}
 80188f4:	bf00      	nop
 80188f6:	3708      	adds	r7, #8
 80188f8:	46bd      	mov	sp, r7
 80188fa:	bd80      	pop	{r7, pc}

080188fc <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b082      	sub	sp, #8
 8018900:	af00      	add	r7, sp, #0
 8018902:	4603      	mov	r3, r0
 8018904:	460a      	mov	r2, r1
 8018906:	71fb      	strb	r3, [r7, #7]
 8018908:	4613      	mov	r3, r2
 801890a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801890c:	79fb      	ldrb	r3, [r7, #7]
 801890e:	2b01      	cmp	r3, #1
 8018910:	d10a      	bne.n	8018928 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8018912:	4a0e      	ldr	r2, [pc, #56]	@ (801894c <RadioSetMaxPayloadLength+0x50>)
 8018914:	79bb      	ldrb	r3, [r7, #6]
 8018916:	7013      	strb	r3, [r2, #0]
 8018918:	4b0c      	ldr	r3, [pc, #48]	@ (801894c <RadioSetMaxPayloadLength+0x50>)
 801891a:	781a      	ldrb	r2, [r3, #0]
 801891c:	4b0c      	ldr	r3, [pc, #48]	@ (8018950 <RadioSetMaxPayloadLength+0x54>)
 801891e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018920:	480c      	ldr	r0, [pc, #48]	@ (8018954 <RadioSetMaxPayloadLength+0x58>)
 8018922:	f001 fd6b 	bl	801a3fc <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8018926:	e00d      	b.n	8018944 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8018928:	4b09      	ldr	r3, [pc, #36]	@ (8018950 <RadioSetMaxPayloadLength+0x54>)
 801892a:	7d5b      	ldrb	r3, [r3, #21]
 801892c:	2b01      	cmp	r3, #1
 801892e:	d109      	bne.n	8018944 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8018930:	4a06      	ldr	r2, [pc, #24]	@ (801894c <RadioSetMaxPayloadLength+0x50>)
 8018932:	79bb      	ldrb	r3, [r7, #6]
 8018934:	7013      	strb	r3, [r2, #0]
 8018936:	4b05      	ldr	r3, [pc, #20]	@ (801894c <RadioSetMaxPayloadLength+0x50>)
 8018938:	781a      	ldrb	r2, [r3, #0]
 801893a:	4b05      	ldr	r3, [pc, #20]	@ (8018950 <RadioSetMaxPayloadLength+0x54>)
 801893c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801893e:	4805      	ldr	r0, [pc, #20]	@ (8018954 <RadioSetMaxPayloadLength+0x58>)
 8018940:	f001 fd5c 	bl	801a3fc <SUBGRF_SetPacketParams>
}
 8018944:	bf00      	nop
 8018946:	3708      	adds	r7, #8
 8018948:	46bd      	mov	sp, r7
 801894a:	bd80      	pop	{r7, pc}
 801894c:	20000124 	.word	0x20000124
 8018950:	2000149c 	.word	0x2000149c
 8018954:	200014aa 	.word	0x200014aa

08018958 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b082      	sub	sp, #8
 801895c:	af00      	add	r7, sp, #0
 801895e:	4603      	mov	r3, r0
 8018960:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8018962:	4a13      	ldr	r2, [pc, #76]	@ (80189b0 <RadioSetPublicNetwork+0x58>)
 8018964:	79fb      	ldrb	r3, [r7, #7]
 8018966:	7313      	strb	r3, [r2, #12]
 8018968:	4b11      	ldr	r3, [pc, #68]	@ (80189b0 <RadioSetPublicNetwork+0x58>)
 801896a:	7b1a      	ldrb	r2, [r3, #12]
 801896c:	4b10      	ldr	r3, [pc, #64]	@ (80189b0 <RadioSetPublicNetwork+0x58>)
 801896e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8018970:	2001      	movs	r0, #1
 8018972:	f7ff f813 	bl	801799c <RadioSetModem>
    if( enable == true )
 8018976:	79fb      	ldrb	r3, [r7, #7]
 8018978:	2b00      	cmp	r3, #0
 801897a:	d00a      	beq.n	8018992 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801897c:	2134      	movs	r1, #52	@ 0x34
 801897e:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8018982:	f001 fe83 	bl	801a68c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8018986:	2144      	movs	r1, #68	@ 0x44
 8018988:	f240 7041 	movw	r0, #1857	@ 0x741
 801898c:	f001 fe7e 	bl	801a68c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8018990:	e009      	b.n	80189a6 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8018992:	2114      	movs	r1, #20
 8018994:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8018998:	f001 fe78 	bl	801a68c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801899c:	2124      	movs	r1, #36	@ 0x24
 801899e:	f240 7041 	movw	r0, #1857	@ 0x741
 80189a2:	f001 fe73 	bl	801a68c <SUBGRF_WriteRegister>
}
 80189a6:	bf00      	nop
 80189a8:	3708      	adds	r7, #8
 80189aa:	46bd      	mov	sp, r7
 80189ac:	bd80      	pop	{r7, pc}
 80189ae:	bf00      	nop
 80189b0:	2000149c 	.word	0x2000149c

080189b4 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80189b4:	b580      	push	{r7, lr}
 80189b6:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80189b8:	f001 ffb8 	bl	801a92c <SUBGRF_GetRadioWakeUpTime>
 80189bc:	4603      	mov	r3, r0
 80189be:	3303      	adds	r3, #3
}
 80189c0:	4618      	mov	r0, r3
 80189c2:	bd80      	pop	{r7, pc}

080189c4 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	b082      	sub	sp, #8
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80189cc:	f000 f80e 	bl	80189ec <RadioOnTxTimeoutProcess>
}
 80189d0:	bf00      	nop
 80189d2:	3708      	adds	r7, #8
 80189d4:	46bd      	mov	sp, r7
 80189d6:	bd80      	pop	{r7, pc}

080189d8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80189d8:	b580      	push	{r7, lr}
 80189da:	b082      	sub	sp, #8
 80189dc:	af00      	add	r7, sp, #0
 80189de:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80189e0:	f000 f818 	bl	8018a14 <RadioOnRxTimeoutProcess>
}
 80189e4:	bf00      	nop
 80189e6:	3708      	adds	r7, #8
 80189e8:	46bd      	mov	sp, r7
 80189ea:	bd80      	pop	{r7, pc}

080189ec <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80189f0:	4b07      	ldr	r3, [pc, #28]	@ (8018a10 <RadioOnTxTimeoutProcess+0x24>)
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d008      	beq.n	8018a0a <RadioOnTxTimeoutProcess+0x1e>
 80189f8:	4b05      	ldr	r3, [pc, #20]	@ (8018a10 <RadioOnTxTimeoutProcess+0x24>)
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	685b      	ldr	r3, [r3, #4]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d003      	beq.n	8018a0a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8018a02:	4b03      	ldr	r3, [pc, #12]	@ (8018a10 <RadioOnTxTimeoutProcess+0x24>)
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	685b      	ldr	r3, [r3, #4]
 8018a08:	4798      	blx	r3
    }
}
 8018a0a:	bf00      	nop
 8018a0c:	bd80      	pop	{r7, pc}
 8018a0e:	bf00      	nop
 8018a10:	20001498 	.word	0x20001498

08018a14 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8018a14:	b580      	push	{r7, lr}
 8018a16:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018a18:	4b07      	ldr	r3, [pc, #28]	@ (8018a38 <RadioOnRxTimeoutProcess+0x24>)
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d008      	beq.n	8018a32 <RadioOnRxTimeoutProcess+0x1e>
 8018a20:	4b05      	ldr	r3, [pc, #20]	@ (8018a38 <RadioOnRxTimeoutProcess+0x24>)
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	68db      	ldr	r3, [r3, #12]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d003      	beq.n	8018a32 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8018a2a:	4b03      	ldr	r3, [pc, #12]	@ (8018a38 <RadioOnRxTimeoutProcess+0x24>)
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	68db      	ldr	r3, [r3, #12]
 8018a30:	4798      	blx	r3
    }
}
 8018a32:	bf00      	nop
 8018a34:	bd80      	pop	{r7, pc}
 8018a36:	bf00      	nop
 8018a38:	20001498 	.word	0x20001498

08018a3c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b082      	sub	sp, #8
 8018a40:	af00      	add	r7, sp, #0
 8018a42:	4603      	mov	r3, r0
 8018a44:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8018a46:	4a05      	ldr	r2, [pc, #20]	@ (8018a5c <RadioOnDioIrq+0x20>)
 8018a48:	88fb      	ldrh	r3, [r7, #6]
 8018a4a:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8018a4e:	f000 f807 	bl	8018a60 <RadioIrqProcess>
}
 8018a52:	bf00      	nop
 8018a54:	3708      	adds	r7, #8
 8018a56:	46bd      	mov	sp, r7
 8018a58:	bd80      	pop	{r7, pc}
 8018a5a:	bf00      	nop
 8018a5c:	2000149c 	.word	0x2000149c

08018a60 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8018a60:	b5b0      	push	{r4, r5, r7, lr}
 8018a62:	b082      	sub	sp, #8
 8018a64:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8018a66:	2300      	movs	r3, #0
 8018a68:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8018a6a:	2300      	movs	r3, #0
 8018a6c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8018a6e:	4ba8      	ldr	r3, [pc, #672]	@ (8018d10 <RadioIrqProcess+0x2b0>)
 8018a70:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8018a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018a78:	f000 810d 	beq.w	8018c96 <RadioIrqProcess+0x236>
 8018a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018a80:	f300 81e8 	bgt.w	8018e54 <RadioIrqProcess+0x3f4>
 8018a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018a88:	f000 80f1 	beq.w	8018c6e <RadioIrqProcess+0x20e>
 8018a8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018a90:	f300 81e0 	bgt.w	8018e54 <RadioIrqProcess+0x3f4>
 8018a94:	2b80      	cmp	r3, #128	@ 0x80
 8018a96:	f000 80d6 	beq.w	8018c46 <RadioIrqProcess+0x1e6>
 8018a9a:	2b80      	cmp	r3, #128	@ 0x80
 8018a9c:	f300 81da 	bgt.w	8018e54 <RadioIrqProcess+0x3f4>
 8018aa0:	2b20      	cmp	r3, #32
 8018aa2:	dc49      	bgt.n	8018b38 <RadioIrqProcess+0xd8>
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	f340 81d5 	ble.w	8018e54 <RadioIrqProcess+0x3f4>
 8018aaa:	3b01      	subs	r3, #1
 8018aac:	2b1f      	cmp	r3, #31
 8018aae:	f200 81d1 	bhi.w	8018e54 <RadioIrqProcess+0x3f4>
 8018ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8018ab8 <RadioIrqProcess+0x58>)
 8018ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ab8:	08018b41 	.word	0x08018b41
 8018abc:	08018b7b 	.word	0x08018b7b
 8018ac0:	08018e55 	.word	0x08018e55
 8018ac4:	08018d31 	.word	0x08018d31
 8018ac8:	08018e55 	.word	0x08018e55
 8018acc:	08018e55 	.word	0x08018e55
 8018ad0:	08018e55 	.word	0x08018e55
 8018ad4:	08018dad 	.word	0x08018dad
 8018ad8:	08018e55 	.word	0x08018e55
 8018adc:	08018e55 	.word	0x08018e55
 8018ae0:	08018e55 	.word	0x08018e55
 8018ae4:	08018e55 	.word	0x08018e55
 8018ae8:	08018e55 	.word	0x08018e55
 8018aec:	08018e55 	.word	0x08018e55
 8018af0:	08018e55 	.word	0x08018e55
 8018af4:	08018dc9 	.word	0x08018dc9
 8018af8:	08018e55 	.word	0x08018e55
 8018afc:	08018e55 	.word	0x08018e55
 8018b00:	08018e55 	.word	0x08018e55
 8018b04:	08018e55 	.word	0x08018e55
 8018b08:	08018e55 	.word	0x08018e55
 8018b0c:	08018e55 	.word	0x08018e55
 8018b10:	08018e55 	.word	0x08018e55
 8018b14:	08018e55 	.word	0x08018e55
 8018b18:	08018e55 	.word	0x08018e55
 8018b1c:	08018e55 	.word	0x08018e55
 8018b20:	08018e55 	.word	0x08018e55
 8018b24:	08018e55 	.word	0x08018e55
 8018b28:	08018e55 	.word	0x08018e55
 8018b2c:	08018e55 	.word	0x08018e55
 8018b30:	08018e55 	.word	0x08018e55
 8018b34:	08018dd7 	.word	0x08018dd7
 8018b38:	2b40      	cmp	r3, #64	@ 0x40
 8018b3a:	f000 816d 	beq.w	8018e18 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8018b3e:	e189      	b.n	8018e54 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8018b40:	4874      	ldr	r0, [pc, #464]	@ (8018d14 <RadioIrqProcess+0x2b4>)
 8018b42:	f002 fe7f 	bl	801b844 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8018b46:	2000      	movs	r0, #0
 8018b48:	f001 f81c 	bl	8019b84 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8018b4c:	f002 f892 	bl	801ac74 <RFW_Is_LongPacketModeEnabled>
 8018b50:	4603      	mov	r3, r0
 8018b52:	2b01      	cmp	r3, #1
 8018b54:	d101      	bne.n	8018b5a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8018b56:	f002 f8b6 	bl	801acc6 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8018b5a:	4b6f      	ldr	r3, [pc, #444]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	f000 817a 	beq.w	8018e58 <RadioIrqProcess+0x3f8>
 8018b64:	4b6c      	ldr	r3, [pc, #432]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	f000 8174 	beq.w	8018e58 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8018b70:	4b69      	ldr	r3, [pc, #420]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	4798      	blx	r3
        break;
 8018b78:	e16e      	b.n	8018e58 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8018b7a:	4868      	ldr	r0, [pc, #416]	@ (8018d1c <RadioIrqProcess+0x2bc>)
 8018b7c:	f002 fe62 	bl	801b844 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018b80:	4b63      	ldr	r3, [pc, #396]	@ (8018d10 <RadioIrqProcess+0x2b0>)
 8018b82:	785b      	ldrb	r3, [r3, #1]
 8018b84:	f083 0301 	eor.w	r3, r3, #1
 8018b88:	b2db      	uxtb	r3, r3
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d014      	beq.n	8018bb8 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8018b8e:	2000      	movs	r0, #0
 8018b90:	f000 fff8 	bl	8019b84 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8018b94:	2100      	movs	r1, #0
 8018b96:	f640 1002 	movw	r0, #2306	@ 0x902
 8018b9a:	f001 fd77 	bl	801a68c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8018b9e:	f640 1044 	movw	r0, #2372	@ 0x944
 8018ba2:	f001 fd87 	bl	801a6b4 <SUBGRF_ReadRegister>
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	f043 0302 	orr.w	r3, r3, #2
 8018bac:	b2db      	uxtb	r3, r3
 8018bae:	4619      	mov	r1, r3
 8018bb0:	f640 1044 	movw	r0, #2372	@ 0x944
 8018bb4:	f001 fd6a 	bl	801a68c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8018bb8:	1dfb      	adds	r3, r7, #7
 8018bba:	22ff      	movs	r2, #255	@ 0xff
 8018bbc:	4619      	mov	r1, r3
 8018bbe:	4858      	ldr	r0, [pc, #352]	@ (8018d20 <RadioIrqProcess+0x2c0>)
 8018bc0:	f000 feb0 	bl	8019924 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8018bc4:	4857      	ldr	r0, [pc, #348]	@ (8018d24 <RadioIrqProcess+0x2c4>)
 8018bc6:	f001 fd0f 	bl	801a5e8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8018bca:	4b53      	ldr	r3, [pc, #332]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	f000 8144 	beq.w	8018e5c <RadioIrqProcess+0x3fc>
 8018bd4:	4b50      	ldr	r3, [pc, #320]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	689b      	ldr	r3, [r3, #8]
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	f000 813e 	beq.w	8018e5c <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8018be0:	4b4b      	ldr	r3, [pc, #300]	@ (8018d10 <RadioIrqProcess+0x2b0>)
 8018be2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8018be6:	2b01      	cmp	r3, #1
 8018be8:	d10e      	bne.n	8018c08 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8018bea:	4b4b      	ldr	r3, [pc, #300]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	689c      	ldr	r4, [r3, #8]
 8018bf0:	79fb      	ldrb	r3, [r7, #7]
 8018bf2:	4619      	mov	r1, r3
 8018bf4:	4b46      	ldr	r3, [pc, #280]	@ (8018d10 <RadioIrqProcess+0x2b0>)
 8018bf6:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8018bfa:	461a      	mov	r2, r3
 8018bfc:	4b44      	ldr	r3, [pc, #272]	@ (8018d10 <RadioIrqProcess+0x2b0>)
 8018bfe:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8018c02:	4847      	ldr	r0, [pc, #284]	@ (8018d20 <RadioIrqProcess+0x2c0>)
 8018c04:	47a0      	blx	r4
                break;
 8018c06:	e01d      	b.n	8018c44 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8018c08:	4b41      	ldr	r3, [pc, #260]	@ (8018d10 <RadioIrqProcess+0x2b0>)
 8018c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018c0c:	463a      	mov	r2, r7
 8018c0e:	4611      	mov	r1, r2
 8018c10:	4618      	mov	r0, r3
 8018c12:	f001 ff7d 	bl	801ab10 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8018c16:	4b40      	ldr	r3, [pc, #256]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	689c      	ldr	r4, [r3, #8]
 8018c1c:	79fb      	ldrb	r3, [r7, #7]
 8018c1e:	4619      	mov	r1, r3
 8018c20:	4b3b      	ldr	r3, [pc, #236]	@ (8018d10 <RadioIrqProcess+0x2b0>)
 8018c22:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8018c26:	4618      	mov	r0, r3
 8018c28:	683b      	ldr	r3, [r7, #0]
 8018c2a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8018c2e:	4a3e      	ldr	r2, [pc, #248]	@ (8018d28 <RadioIrqProcess+0x2c8>)
 8018c30:	fb82 5203 	smull	r5, r2, r2, r3
 8018c34:	1192      	asrs	r2, r2, #6
 8018c36:	17db      	asrs	r3, r3, #31
 8018c38:	1ad3      	subs	r3, r2, r3
 8018c3a:	b25b      	sxtb	r3, r3
 8018c3c:	4602      	mov	r2, r0
 8018c3e:	4838      	ldr	r0, [pc, #224]	@ (8018d20 <RadioIrqProcess+0x2c0>)
 8018c40:	47a0      	blx	r4
                break;
 8018c42:	bf00      	nop
        break;
 8018c44:	e10a      	b.n	8018e5c <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8018c46:	2000      	movs	r0, #0
 8018c48:	f000 ff9c 	bl	8019b84 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018c4c:	4b32      	ldr	r3, [pc, #200]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	f000 8105 	beq.w	8018e60 <RadioIrqProcess+0x400>
 8018c56:	4b30      	ldr	r3, [pc, #192]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	699b      	ldr	r3, [r3, #24]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	f000 80ff 	beq.w	8018e60 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8018c62:	4b2d      	ldr	r3, [pc, #180]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	699b      	ldr	r3, [r3, #24]
 8018c68:	2000      	movs	r0, #0
 8018c6a:	4798      	blx	r3
        break;
 8018c6c:	e0f8      	b.n	8018e60 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8018c6e:	2000      	movs	r0, #0
 8018c70:	f000 ff88 	bl	8019b84 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018c74:	4b28      	ldr	r3, [pc, #160]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	f000 80f3 	beq.w	8018e64 <RadioIrqProcess+0x404>
 8018c7e:	4b26      	ldr	r3, [pc, #152]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	699b      	ldr	r3, [r3, #24]
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	f000 80ed 	beq.w	8018e64 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8018c8a:	4b23      	ldr	r3, [pc, #140]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	699b      	ldr	r3, [r3, #24]
 8018c90:	2001      	movs	r0, #1
 8018c92:	4798      	blx	r3
        break;
 8018c94:	e0e6      	b.n	8018e64 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8018c96:	4b25      	ldr	r3, [pc, #148]	@ (8018d2c <RadioIrqProcess+0x2cc>)
 8018c98:	2201      	movs	r2, #1
 8018c9a:	2100      	movs	r1, #0
 8018c9c:	2002      	movs	r0, #2
 8018c9e:	f002 ffdb 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8018ca2:	f000 fe25 	bl	80198f0 <SUBGRF_GetOperatingMode>
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	2b04      	cmp	r3, #4
 8018caa:	d115      	bne.n	8018cd8 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8018cac:	4819      	ldr	r0, [pc, #100]	@ (8018d14 <RadioIrqProcess+0x2b4>)
 8018cae:	f002 fdc9 	bl	801b844 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018cb2:	2000      	movs	r0, #0
 8018cb4:	f000 ff66 	bl	8019b84 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018cb8:	4b17      	ldr	r3, [pc, #92]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	f000 80d3 	beq.w	8018e68 <RadioIrqProcess+0x408>
 8018cc2:	4b15      	ldr	r3, [pc, #84]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	685b      	ldr	r3, [r3, #4]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	f000 80cd 	beq.w	8018e68 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8018cce:	4b12      	ldr	r3, [pc, #72]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	685b      	ldr	r3, [r3, #4]
 8018cd4:	4798      	blx	r3
        break;
 8018cd6:	e0c7      	b.n	8018e68 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8018cd8:	f000 fe0a 	bl	80198f0 <SUBGRF_GetOperatingMode>
 8018cdc:	4603      	mov	r3, r0
 8018cde:	2b05      	cmp	r3, #5
 8018ce0:	f040 80c2 	bne.w	8018e68 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8018ce4:	480d      	ldr	r0, [pc, #52]	@ (8018d1c <RadioIrqProcess+0x2bc>)
 8018ce6:	f002 fdad 	bl	801b844 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018cea:	2000      	movs	r0, #0
 8018cec:	f000 ff4a 	bl	8019b84 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018cf0:	4b09      	ldr	r3, [pc, #36]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	f000 80b7 	beq.w	8018e68 <RadioIrqProcess+0x408>
 8018cfa:	4b07      	ldr	r3, [pc, #28]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	68db      	ldr	r3, [r3, #12]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	f000 80b1 	beq.w	8018e68 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8018d06:	4b04      	ldr	r3, [pc, #16]	@ (8018d18 <RadioIrqProcess+0x2b8>)
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	68db      	ldr	r3, [r3, #12]
 8018d0c:	4798      	blx	r3
        break;
 8018d0e:	e0ab      	b.n	8018e68 <RadioIrqProcess+0x408>
 8018d10:	2000149c 	.word	0x2000149c
 8018d14:	200014f8 	.word	0x200014f8
 8018d18:	20001498 	.word	0x20001498
 8018d1c:	20001510 	.word	0x20001510
 8018d20:	20001398 	.word	0x20001398
 8018d24:	200014c0 	.word	0x200014c0
 8018d28:	10624dd3 	.word	0x10624dd3
 8018d2c:	0801d674 	.word	0x0801d674
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8018d30:	4b54      	ldr	r3, [pc, #336]	@ (8018e84 <RadioIrqProcess+0x424>)
 8018d32:	2201      	movs	r2, #1
 8018d34:	2100      	movs	r1, #0
 8018d36:	2002      	movs	r0, #2
 8018d38:	f002 ff8e 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8018d3c:	4b52      	ldr	r3, [pc, #328]	@ (8018e88 <RadioIrqProcess+0x428>)
 8018d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	f000 8093 	beq.w	8018e6c <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8018d46:	4a51      	ldr	r2, [pc, #324]	@ (8018e8c <RadioIrqProcess+0x42c>)
 8018d48:	4b4f      	ldr	r3, [pc, #316]	@ (8018e88 <RadioIrqProcess+0x428>)
 8018d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018d4c:	0c1b      	lsrs	r3, r3, #16
 8018d4e:	b2db      	uxtb	r3, r3
 8018d50:	4619      	mov	r1, r3
 8018d52:	f640 1003 	movw	r0, #2307	@ 0x903
 8018d56:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8018d58:	4a4c      	ldr	r2, [pc, #304]	@ (8018e8c <RadioIrqProcess+0x42c>)
 8018d5a:	4b4b      	ldr	r3, [pc, #300]	@ (8018e88 <RadioIrqProcess+0x428>)
 8018d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018d5e:	0a1b      	lsrs	r3, r3, #8
 8018d60:	b2db      	uxtb	r3, r3
 8018d62:	4619      	mov	r1, r3
 8018d64:	f640 1004 	movw	r0, #2308	@ 0x904
 8018d68:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8018d6a:	4a48      	ldr	r2, [pc, #288]	@ (8018e8c <RadioIrqProcess+0x42c>)
 8018d6c:	4b46      	ldr	r3, [pc, #280]	@ (8018e88 <RadioIrqProcess+0x428>)
 8018d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018d70:	b2db      	uxtb	r3, r3
 8018d72:	4619      	mov	r1, r3
 8018d74:	f640 1005 	movw	r0, #2309	@ 0x905
 8018d78:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8018d7a:	4c44      	ldr	r4, [pc, #272]	@ (8018e8c <RadioIrqProcess+0x42c>)
 8018d7c:	4b44      	ldr	r3, [pc, #272]	@ (8018e90 <RadioIrqProcess+0x430>)
 8018d7e:	f640 1002 	movw	r0, #2306	@ 0x902
 8018d82:	4798      	blx	r3
 8018d84:	4603      	mov	r3, r0
 8018d86:	f043 0301 	orr.w	r3, r3, #1
 8018d8a:	b2db      	uxtb	r3, r3
 8018d8c:	4619      	mov	r1, r3
 8018d8e:	f640 1002 	movw	r0, #2306	@ 0x902
 8018d92:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8018d94:	4b3c      	ldr	r3, [pc, #240]	@ (8018e88 <RadioIrqProcess+0x428>)
 8018d96:	2200      	movs	r2, #0
 8018d98:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018d9a:	2300      	movs	r3, #0
 8018d9c:	2200      	movs	r2, #0
 8018d9e:	f240 2162 	movw	r1, #610	@ 0x262
 8018da2:	f240 2062 	movw	r0, #610	@ 0x262
 8018da6:	f001 f8c1 	bl	8019f2c <SUBGRF_SetDioIrqParams>
        break;
 8018daa:	e05f      	b.n	8018e6c <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8018dac:	4b39      	ldr	r3, [pc, #228]	@ (8018e94 <RadioIrqProcess+0x434>)
 8018dae:	2201      	movs	r2, #1
 8018db0:	2100      	movs	r1, #0
 8018db2:	2002      	movs	r0, #2
 8018db4:	f002 ff50 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8018db8:	f001 ff55 	bl	801ac66 <RFW_Is_Init>
 8018dbc:	4603      	mov	r3, r0
 8018dbe:	2b01      	cmp	r3, #1
 8018dc0:	d156      	bne.n	8018e70 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8018dc2:	f001 ff86 	bl	801acd2 <RFW_ReceivePayload>
        break;
 8018dc6:	e053      	b.n	8018e70 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8018dc8:	4b33      	ldr	r3, [pc, #204]	@ (8018e98 <RadioIrqProcess+0x438>)
 8018dca:	2201      	movs	r2, #1
 8018dcc:	2100      	movs	r1, #0
 8018dce:	2002      	movs	r0, #2
 8018dd0:	f002 ff42 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018dd4:	e051      	b.n	8018e7a <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8018dd6:	4831      	ldr	r0, [pc, #196]	@ (8018e9c <RadioIrqProcess+0x43c>)
 8018dd8:	f002 fd34 	bl	801b844 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8018e88 <RadioIrqProcess+0x428>)
 8018dde:	785b      	ldrb	r3, [r3, #1]
 8018de0:	f083 0301 	eor.w	r3, r3, #1
 8018de4:	b2db      	uxtb	r3, r3
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d002      	beq.n	8018df0 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8018dea:	2000      	movs	r0, #0
 8018dec:	f000 feca 	bl	8019b84 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018df0:	4b2b      	ldr	r3, [pc, #172]	@ (8018ea0 <RadioIrqProcess+0x440>)
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d03d      	beq.n	8018e74 <RadioIrqProcess+0x414>
 8018df8:	4b29      	ldr	r3, [pc, #164]	@ (8018ea0 <RadioIrqProcess+0x440>)
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	68db      	ldr	r3, [r3, #12]
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d038      	beq.n	8018e74 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8018e02:	4b27      	ldr	r3, [pc, #156]	@ (8018ea0 <RadioIrqProcess+0x440>)
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	68db      	ldr	r3, [r3, #12]
 8018e08:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8018e0a:	4b26      	ldr	r3, [pc, #152]	@ (8018ea4 <RadioIrqProcess+0x444>)
 8018e0c:	2201      	movs	r2, #1
 8018e0e:	2100      	movs	r1, #0
 8018e10:	2002      	movs	r0, #2
 8018e12:	f002 ff21 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018e16:	e02d      	b.n	8018e74 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8018e18:	4b23      	ldr	r3, [pc, #140]	@ (8018ea8 <RadioIrqProcess+0x448>)
 8018e1a:	2201      	movs	r2, #1
 8018e1c:	2100      	movs	r1, #0
 8018e1e:	2002      	movs	r0, #2
 8018e20:	f002 ff1a 	bl	801bc58 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8018e24:	4b18      	ldr	r3, [pc, #96]	@ (8018e88 <RadioIrqProcess+0x428>)
 8018e26:	785b      	ldrb	r3, [r3, #1]
 8018e28:	f083 0301 	eor.w	r3, r3, #1
 8018e2c:	b2db      	uxtb	r3, r3
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d002      	beq.n	8018e38 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8018e32:	2000      	movs	r0, #0
 8018e34:	f000 fea6 	bl	8019b84 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8018e38:	4b19      	ldr	r3, [pc, #100]	@ (8018ea0 <RadioIrqProcess+0x440>)
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d01b      	beq.n	8018e78 <RadioIrqProcess+0x418>
 8018e40:	4b17      	ldr	r3, [pc, #92]	@ (8018ea0 <RadioIrqProcess+0x440>)
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	691b      	ldr	r3, [r3, #16]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d016      	beq.n	8018e78 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 8018e4a:	4b15      	ldr	r3, [pc, #84]	@ (8018ea0 <RadioIrqProcess+0x440>)
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	691b      	ldr	r3, [r3, #16]
 8018e50:	4798      	blx	r3
        break;
 8018e52:	e011      	b.n	8018e78 <RadioIrqProcess+0x418>
        break;
 8018e54:	bf00      	nop
 8018e56:	e010      	b.n	8018e7a <RadioIrqProcess+0x41a>
        break;
 8018e58:	bf00      	nop
 8018e5a:	e00e      	b.n	8018e7a <RadioIrqProcess+0x41a>
        break;
 8018e5c:	bf00      	nop
 8018e5e:	e00c      	b.n	8018e7a <RadioIrqProcess+0x41a>
        break;
 8018e60:	bf00      	nop
 8018e62:	e00a      	b.n	8018e7a <RadioIrqProcess+0x41a>
        break;
 8018e64:	bf00      	nop
 8018e66:	e008      	b.n	8018e7a <RadioIrqProcess+0x41a>
        break;
 8018e68:	bf00      	nop
 8018e6a:	e006      	b.n	8018e7a <RadioIrqProcess+0x41a>
        break;
 8018e6c:	bf00      	nop
 8018e6e:	e004      	b.n	8018e7a <RadioIrqProcess+0x41a>
        break;
 8018e70:	bf00      	nop
 8018e72:	e002      	b.n	8018e7a <RadioIrqProcess+0x41a>
        break;
 8018e74:	bf00      	nop
 8018e76:	e000      	b.n	8018e7a <RadioIrqProcess+0x41a>
        break;
 8018e78:	bf00      	nop
    }
}
 8018e7a:	bf00      	nop
 8018e7c:	3708      	adds	r7, #8
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	bdb0      	pop	{r4, r5, r7, pc}
 8018e82:	bf00      	nop
 8018e84:	0801d688 	.word	0x0801d688
 8018e88:	2000149c 	.word	0x2000149c
 8018e8c:	08018871 	.word	0x08018871
 8018e90:	08018895 	.word	0x08018895
 8018e94:	0801d694 	.word	0x0801d694
 8018e98:	0801d6a0 	.word	0x0801d6a0
 8018e9c:	20001510 	.word	0x20001510
 8018ea0:	20001498 	.word	0x20001498
 8018ea4:	0801d6ac 	.word	0x0801d6ac
 8018ea8:	0801d6b8 	.word	0x0801d6b8

08018eac <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8018eac:	b580      	push	{r7, lr}
 8018eae:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018eb0:	4b09      	ldr	r3, [pc, #36]	@ (8018ed8 <RadioTxPrbs+0x2c>)
 8018eb2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018eb6:	2101      	movs	r1, #1
 8018eb8:	4618      	mov	r0, r3
 8018eba:	f001 fcdb 	bl	801a874 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8018ebe:	4b07      	ldr	r3, [pc, #28]	@ (8018edc <RadioTxPrbs+0x30>)
 8018ec0:	212d      	movs	r1, #45	@ 0x2d
 8018ec2:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018ec6:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8018ec8:	f000 ff1f 	bl	8019d0a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8018ecc:	4804      	ldr	r0, [pc, #16]	@ (8018ee0 <RadioTxPrbs+0x34>)
 8018ece:	f000 fe75 	bl	8019bbc <SUBGRF_SetTx>
}
 8018ed2:	bf00      	nop
 8018ed4:	bd80      	pop	{r7, pc}
 8018ed6:	bf00      	nop
 8018ed8:	2000149c 	.word	0x2000149c
 8018edc:	08018871 	.word	0x08018871
 8018ee0:	000fffff 	.word	0x000fffff

08018ee4 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b084      	sub	sp, #16
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	4603      	mov	r3, r0
 8018eec:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8018eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	f001 fce6 	bl	801a8c4 <SUBGRF_SetRfTxPower>
 8018ef8:	4603      	mov	r3, r0
 8018efa:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018efc:	210e      	movs	r1, #14
 8018efe:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018f02:	f001 fbc3 	bl	801a68c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8018f06:	7bfb      	ldrb	r3, [r7, #15]
 8018f08:	2101      	movs	r1, #1
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	f001 fcb2 	bl	801a874 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8018f10:	f000 fef2 	bl	8019cf8 <SUBGRF_SetTxContinuousWave>
}
 8018f14:	bf00      	nop
 8018f16:	3710      	adds	r7, #16
 8018f18:	46bd      	mov	sp, r7
 8018f1a:	bd80      	pop	{r7, pc}

08018f1c <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8018f1c:	b480      	push	{r7}
 8018f1e:	b089      	sub	sp, #36	@ 0x24
 8018f20:	af00      	add	r7, sp, #0
 8018f22:	60f8      	str	r0, [r7, #12]
 8018f24:	60b9      	str	r1, [r7, #8]
 8018f26:	4613      	mov	r3, r2
 8018f28:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8018f2e:	2300      	movs	r3, #0
 8018f30:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8018f32:	2300      	movs	r3, #0
 8018f34:	61bb      	str	r3, [r7, #24]
 8018f36:	e011      	b.n	8018f5c <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8018f38:	69bb      	ldr	r3, [r7, #24]
 8018f3a:	68ba      	ldr	r2, [r7, #8]
 8018f3c:	4413      	add	r3, r2
 8018f3e:	781a      	ldrb	r2, [r3, #0]
 8018f40:	69bb      	ldr	r3, [r7, #24]
 8018f42:	68b9      	ldr	r1, [r7, #8]
 8018f44:	440b      	add	r3, r1
 8018f46:	43d2      	mvns	r2, r2
 8018f48:	b2d2      	uxtb	r2, r2
 8018f4a:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8018f4c:	69bb      	ldr	r3, [r7, #24]
 8018f4e:	68fa      	ldr	r2, [r7, #12]
 8018f50:	4413      	add	r3, r2
 8018f52:	2200      	movs	r2, #0
 8018f54:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8018f56:	69bb      	ldr	r3, [r7, #24]
 8018f58:	3301      	adds	r3, #1
 8018f5a:	61bb      	str	r3, [r7, #24]
 8018f5c:	79fb      	ldrb	r3, [r7, #7]
 8018f5e:	69ba      	ldr	r2, [r7, #24]
 8018f60:	429a      	cmp	r2, r3
 8018f62:	dbe9      	blt.n	8018f38 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8018f64:	2300      	movs	r3, #0
 8018f66:	61bb      	str	r3, [r7, #24]
 8018f68:	e049      	b.n	8018ffe <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8018f6a:	69bb      	ldr	r3, [r7, #24]
 8018f6c:	425a      	negs	r2, r3
 8018f6e:	f003 0307 	and.w	r3, r3, #7
 8018f72:	f002 0207 	and.w	r2, r2, #7
 8018f76:	bf58      	it	pl
 8018f78:	4253      	negpl	r3, r2
 8018f7a:	b2db      	uxtb	r3, r3
 8018f7c:	f1c3 0307 	rsb	r3, r3, #7
 8018f80:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8018f82:	69bb      	ldr	r3, [r7, #24]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	da00      	bge.n	8018f8a <payload_integration+0x6e>
 8018f88:	3307      	adds	r3, #7
 8018f8a:	10db      	asrs	r3, r3, #3
 8018f8c:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8018f8e:	69bb      	ldr	r3, [r7, #24]
 8018f90:	3301      	adds	r3, #1
 8018f92:	425a      	negs	r2, r3
 8018f94:	f003 0307 	and.w	r3, r3, #7
 8018f98:	f002 0207 	and.w	r2, r2, #7
 8018f9c:	bf58      	it	pl
 8018f9e:	4253      	negpl	r3, r2
 8018fa0:	b2db      	uxtb	r3, r3
 8018fa2:	f1c3 0307 	rsb	r3, r3, #7
 8018fa6:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8018fa8:	69bb      	ldr	r3, [r7, #24]
 8018faa:	3301      	adds	r3, #1
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	da00      	bge.n	8018fb2 <payload_integration+0x96>
 8018fb0:	3307      	adds	r3, #7
 8018fb2:	10db      	asrs	r3, r3, #3
 8018fb4:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8018fb6:	7dbb      	ldrb	r3, [r7, #22]
 8018fb8:	68ba      	ldr	r2, [r7, #8]
 8018fba:	4413      	add	r3, r2
 8018fbc:	781b      	ldrb	r3, [r3, #0]
 8018fbe:	461a      	mov	r2, r3
 8018fc0:	7dfb      	ldrb	r3, [r7, #23]
 8018fc2:	fa42 f303 	asr.w	r3, r2, r3
 8018fc6:	b2db      	uxtb	r3, r3
 8018fc8:	f003 0301 	and.w	r3, r3, #1
 8018fcc:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8018fce:	7ffa      	ldrb	r2, [r7, #31]
 8018fd0:	7cfb      	ldrb	r3, [r7, #19]
 8018fd2:	4053      	eors	r3, r2
 8018fd4:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8018fd6:	7d3b      	ldrb	r3, [r7, #20]
 8018fd8:	68fa      	ldr	r2, [r7, #12]
 8018fda:	4413      	add	r3, r2
 8018fdc:	781b      	ldrb	r3, [r3, #0]
 8018fde:	b25a      	sxtb	r2, r3
 8018fe0:	7ff9      	ldrb	r1, [r7, #31]
 8018fe2:	7d7b      	ldrb	r3, [r7, #21]
 8018fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8018fe8:	b25b      	sxtb	r3, r3
 8018fea:	4313      	orrs	r3, r2
 8018fec:	b259      	sxtb	r1, r3
 8018fee:	7d3b      	ldrb	r3, [r7, #20]
 8018ff0:	68fa      	ldr	r2, [r7, #12]
 8018ff2:	4413      	add	r3, r2
 8018ff4:	b2ca      	uxtb	r2, r1
 8018ff6:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8018ff8:	69bb      	ldr	r3, [r7, #24]
 8018ffa:	3301      	adds	r3, #1
 8018ffc:	61bb      	str	r3, [r7, #24]
 8018ffe:	79fb      	ldrb	r3, [r7, #7]
 8019000:	00db      	lsls	r3, r3, #3
 8019002:	69ba      	ldr	r2, [r7, #24]
 8019004:	429a      	cmp	r2, r3
 8019006:	dbb0      	blt.n	8018f6a <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8019008:	7ffb      	ldrb	r3, [r7, #31]
 801900a:	01db      	lsls	r3, r3, #7
 801900c:	b25a      	sxtb	r2, r3
 801900e:	7ffb      	ldrb	r3, [r7, #31]
 8019010:	019b      	lsls	r3, r3, #6
 8019012:	b25b      	sxtb	r3, r3
 8019014:	4313      	orrs	r3, r2
 8019016:	b25b      	sxtb	r3, r3
 8019018:	7ffa      	ldrb	r2, [r7, #31]
 801901a:	2a00      	cmp	r2, #0
 801901c:	d101      	bne.n	8019022 <payload_integration+0x106>
 801901e:	2220      	movs	r2, #32
 8019020:	e000      	b.n	8019024 <payload_integration+0x108>
 8019022:	2200      	movs	r2, #0
 8019024:	4313      	orrs	r3, r2
 8019026:	b259      	sxtb	r1, r3
 8019028:	79fb      	ldrb	r3, [r7, #7]
 801902a:	68fa      	ldr	r2, [r7, #12]
 801902c:	4413      	add	r3, r2
 801902e:	b2ca      	uxtb	r2, r1
 8019030:	701a      	strb	r2, [r3, #0]
}
 8019032:	bf00      	nop
 8019034:	3724      	adds	r7, #36	@ 0x24
 8019036:	46bd      	mov	sp, r7
 8019038:	bc80      	pop	{r7}
 801903a:	4770      	bx	lr

0801903c <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801903c:	b580      	push	{r7, lr}
 801903e:	b08c      	sub	sp, #48	@ 0x30
 8019040:	af00      	add	r7, sp, #0
 8019042:	60b9      	str	r1, [r7, #8]
 8019044:	607a      	str	r2, [r7, #4]
 8019046:	603b      	str	r3, [r7, #0]
 8019048:	4603      	mov	r3, r0
 801904a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801904c:	2300      	movs	r3, #0
 801904e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8019050:	2300      	movs	r3, #0
 8019052:	623b      	str	r3, [r7, #32]
 8019054:	2300      	movs	r3, #0
 8019056:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019058:	f001 fdff 	bl	801ac5a <RFW_DeInit>

    if( rxContinuous != 0 )
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	2b00      	cmp	r3, #0
 8019060:	d001      	beq.n	8019066 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8019062:	2300      	movs	r3, #0
 8019064:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	2b00      	cmp	r3, #0
 801906a:	bf14      	ite	ne
 801906c:	2301      	movne	r3, #1
 801906e:	2300      	moveq	r3, #0
 8019070:	b2da      	uxtb	r2, r3
 8019072:	4ba3      	ldr	r3, [pc, #652]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 8019074:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8019076:	7bfb      	ldrb	r3, [r7, #15]
 8019078:	2b00      	cmp	r3, #0
 801907a:	d003      	beq.n	8019084 <RadioSetRxGenericConfig+0x48>
 801907c:	2b01      	cmp	r3, #1
 801907e:	f000 80dc 	beq.w	801923a <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8019082:	e194      	b.n	80193ae <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8019084:	68bb      	ldr	r3, [r7, #8]
 8019086:	689b      	ldr	r3, [r3, #8]
 8019088:	2b00      	cmp	r3, #0
 801908a:	d003      	beq.n	8019094 <RadioSetRxGenericConfig+0x58>
 801908c:	68bb      	ldr	r3, [r7, #8]
 801908e:	68db      	ldr	r3, [r3, #12]
 8019090:	2b00      	cmp	r3, #0
 8019092:	d102      	bne.n	801909a <RadioSetRxGenericConfig+0x5e>
            return -1;
 8019094:	f04f 33ff 	mov.w	r3, #4294967295
 8019098:	e18a      	b.n	80193b0 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801909a:	68bb      	ldr	r3, [r7, #8]
 801909c:	7f9b      	ldrb	r3, [r3, #30]
 801909e:	2b08      	cmp	r3, #8
 80190a0:	d902      	bls.n	80190a8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 80190a2:	f04f 33ff 	mov.w	r3, #4294967295
 80190a6:	e183      	b.n	80193b0 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80190a8:	68bb      	ldr	r3, [r7, #8]
 80190aa:	6919      	ldr	r1, [r3, #16]
 80190ac:	68bb      	ldr	r3, [r7, #8]
 80190ae:	7f9b      	ldrb	r3, [r3, #30]
 80190b0:	461a      	mov	r2, r3
 80190b2:	f107 0320 	add.w	r3, r7, #32
 80190b6:	4618      	mov	r0, r3
 80190b8:	f001 fe8c 	bl	801add4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80190bc:	68bb      	ldr	r3, [r7, #8]
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	bf14      	ite	ne
 80190c4:	2301      	movne	r3, #1
 80190c6:	2300      	moveq	r3, #0
 80190c8:	b2db      	uxtb	r3, r3
 80190ca:	4618      	mov	r0, r3
 80190cc:	f000 fe26 	bl	8019d1c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80190d0:	4b8b      	ldr	r3, [pc, #556]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 80190d2:	2200      	movs	r2, #0
 80190d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80190d8:	68bb      	ldr	r3, [r7, #8]
 80190da:	689b      	ldr	r3, [r3, #8]
 80190dc:	4a88      	ldr	r2, [pc, #544]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 80190de:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80190e0:	68bb      	ldr	r3, [r7, #8]
 80190e2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80190e6:	4b86      	ldr	r3, [pc, #536]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 80190e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80190ec:	68bb      	ldr	r3, [r7, #8]
 80190ee:	685b      	ldr	r3, [r3, #4]
 80190f0:	4618      	mov	r0, r3
 80190f2:	f001 fce5 	bl	801aac0 <SUBGRF_GetFskBandwidthRegValue>
 80190f6:	4603      	mov	r3, r0
 80190f8:	461a      	mov	r2, r3
 80190fa:	4b81      	ldr	r3, [pc, #516]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 80190fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019100:	4b7f      	ldr	r3, [pc, #508]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 8019102:	2200      	movs	r2, #0
 8019104:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8019106:	68bb      	ldr	r3, [r7, #8]
 8019108:	68db      	ldr	r3, [r3, #12]
 801910a:	b29b      	uxth	r3, r3
 801910c:	00db      	lsls	r3, r3, #3
 801910e:	b29a      	uxth	r2, r3
 8019110:	4b7b      	ldr	r3, [pc, #492]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 8019112:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8019114:	68bb      	ldr	r3, [r7, #8]
 8019116:	7fda      	ldrb	r2, [r3, #31]
 8019118:	4b79      	ldr	r3, [pc, #484]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 801911a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801911c:	68bb      	ldr	r3, [r7, #8]
 801911e:	7f9b      	ldrb	r3, [r3, #30]
 8019120:	00db      	lsls	r3, r3, #3
 8019122:	b2da      	uxtb	r2, r3
 8019124:	4b76      	ldr	r3, [pc, #472]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 8019126:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8019128:	68bb      	ldr	r3, [r7, #8]
 801912a:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 801912e:	4b74      	ldr	r3, [pc, #464]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 8019130:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8019132:	68bb      	ldr	r3, [r7, #8]
 8019134:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8019138:	2b00      	cmp	r3, #0
 801913a:	d105      	bne.n	8019148 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801913c:	68bb      	ldr	r3, [r7, #8]
 801913e:	695b      	ldr	r3, [r3, #20]
 8019140:	b2da      	uxtb	r2, r3
 8019142:	4b6f      	ldr	r3, [pc, #444]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 8019144:	759a      	strb	r2, [r3, #22]
 8019146:	e00b      	b.n	8019160 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8019148:	68bb      	ldr	r3, [r7, #8]
 801914a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801914e:	2b02      	cmp	r3, #2
 8019150:	d103      	bne.n	801915a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019152:	4b6b      	ldr	r3, [pc, #428]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 8019154:	22ff      	movs	r2, #255	@ 0xff
 8019156:	759a      	strb	r2, [r3, #22]
 8019158:	e002      	b.n	8019160 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801915a:	4b69      	ldr	r3, [pc, #420]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 801915c:	22ff      	movs	r2, #255	@ 0xff
 801915e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8019160:	68bb      	ldr	r3, [r7, #8]
 8019162:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8019166:	2b02      	cmp	r3, #2
 8019168:	d004      	beq.n	8019174 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801916a:	68bb      	ldr	r3, [r7, #8]
 801916c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8019170:	2b02      	cmp	r3, #2
 8019172:	d12d      	bne.n	80191d0 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8019174:	68bb      	ldr	r3, [r7, #8]
 8019176:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801917a:	2bf1      	cmp	r3, #241	@ 0xf1
 801917c:	d00c      	beq.n	8019198 <RadioSetRxGenericConfig+0x15c>
 801917e:	68bb      	ldr	r3, [r7, #8]
 8019180:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019184:	2bf2      	cmp	r3, #242	@ 0xf2
 8019186:	d007      	beq.n	8019198 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019188:	68bb      	ldr	r3, [r7, #8]
 801918a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801918e:	2b01      	cmp	r3, #1
 8019190:	d002      	beq.n	8019198 <RadioSetRxGenericConfig+0x15c>
                return -1;
 8019192:	f04f 33ff 	mov.w	r3, #4294967295
 8019196:	e10b      	b.n	80193b0 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8019198:	2300      	movs	r3, #0
 801919a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801919c:	68bb      	ldr	r3, [r7, #8]
 801919e:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80191a0:	4b58      	ldr	r3, [pc, #352]	@ (8019304 <RadioSetRxGenericConfig+0x2c8>)
 80191a2:	6819      	ldr	r1, [r3, #0]
 80191a4:	f107 0314 	add.w	r3, r7, #20
 80191a8:	4a57      	ldr	r2, [pc, #348]	@ (8019308 <RadioSetRxGenericConfig+0x2cc>)
 80191aa:	4618      	mov	r0, r3
 80191ac:	f001 fd48 	bl	801ac40 <RFW_Init>
 80191b0:	4603      	mov	r3, r0
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d002      	beq.n	80191bc <RadioSetRxGenericConfig+0x180>
                return -1;
 80191b6:	f04f 33ff 	mov.w	r3, #4294967295
 80191ba:	e0f9      	b.n	80193b0 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80191bc:	4b50      	ldr	r3, [pc, #320]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 80191be:	2200      	movs	r2, #0
 80191c0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80191c2:	4b4f      	ldr	r3, [pc, #316]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 80191c4:	2201      	movs	r2, #1
 80191c6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80191c8:	4b4d      	ldr	r3, [pc, #308]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 80191ca:	2200      	movs	r2, #0
 80191cc:	755a      	strb	r2, [r3, #21]
        {
 80191ce:	e00e      	b.n	80191ee <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80191d0:	68bb      	ldr	r3, [r7, #8]
 80191d2:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80191d6:	4b4a      	ldr	r3, [pc, #296]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 80191d8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80191da:	68bb      	ldr	r3, [r7, #8]
 80191dc:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80191e0:	4b47      	ldr	r3, [pc, #284]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 80191e2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80191e4:	68bb      	ldr	r3, [r7, #8]
 80191e6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80191ea:	4b45      	ldr	r3, [pc, #276]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 80191ec:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80191ee:	f7ff fa3e 	bl	801866e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80191f2:	2000      	movs	r0, #0
 80191f4:	f7fe fbd2 	bl	801799c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80191f8:	4844      	ldr	r0, [pc, #272]	@ (801930c <RadioSetRxGenericConfig+0x2d0>)
 80191fa:	f001 f82d 	bl	801a258 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80191fe:	4844      	ldr	r0, [pc, #272]	@ (8019310 <RadioSetRxGenericConfig+0x2d4>)
 8019200:	f001 f8fc 	bl	801a3fc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019204:	f107 0320 	add.w	r3, r7, #32
 8019208:	4618      	mov	r0, r3
 801920a:	f000 fbc0 	bl	801998e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801920e:	68bb      	ldr	r3, [r7, #8]
 8019210:	8b9b      	ldrh	r3, [r3, #28]
 8019212:	4618      	mov	r0, r3
 8019214:	f000 fc0a 	bl	8019a2c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8019218:	68bb      	ldr	r3, [r7, #8]
 801921a:	8b1b      	ldrh	r3, [r3, #24]
 801921c:	4618      	mov	r0, r3
 801921e:	f000 fbe5 	bl	80199ec <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8019222:	683b      	ldr	r3, [r7, #0]
 8019224:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8019228:	fb03 f202 	mul.w	r2, r3, r2
 801922c:	68bb      	ldr	r3, [r7, #8]
 801922e:	689b      	ldr	r3, [r3, #8]
 8019230:	fbb2 f3f3 	udiv	r3, r2, r3
 8019234:	4a32      	ldr	r2, [pc, #200]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 8019236:	6093      	str	r3, [r2, #8]
        break;
 8019238:	e0b9      	b.n	80193ae <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801923a:	68bb      	ldr	r3, [r7, #8]
 801923c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801923e:	2b00      	cmp	r3, #0
 8019240:	d102      	bne.n	8019248 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8019242:	f04f 33ff 	mov.w	r3, #4294967295
 8019246:	e0b3      	b.n	80193b0 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8019248:	68bb      	ldr	r3, [r7, #8]
 801924a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801924e:	2b01      	cmp	r3, #1
 8019250:	d104      	bne.n	801925c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8019252:	68bb      	ldr	r3, [r7, #8]
 8019254:	695b      	ldr	r3, [r3, #20]
 8019256:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801925a:	e002      	b.n	8019262 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801925c:	23ff      	movs	r3, #255	@ 0xff
 801925e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019262:	68bb      	ldr	r3, [r7, #8]
 8019264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019266:	2b00      	cmp	r3, #0
 8019268:	bf14      	ite	ne
 801926a:	2301      	movne	r3, #1
 801926c:	2300      	moveq	r3, #0
 801926e:	b2db      	uxtb	r3, r3
 8019270:	4618      	mov	r0, r3
 8019272:	f000 fd53 	bl	8019d1c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019276:	683b      	ldr	r3, [r7, #0]
 8019278:	b2db      	uxtb	r3, r3
 801927a:	4618      	mov	r0, r3
 801927c:	f000 fd5d 	bl	8019d3a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019280:	4b1f      	ldr	r3, [pc, #124]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 8019282:	2201      	movs	r2, #1
 8019284:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019288:	68bb      	ldr	r3, [r7, #8]
 801928a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 801928e:	4b1c      	ldr	r3, [pc, #112]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 8019290:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8019294:	68bb      	ldr	r3, [r7, #8]
 8019296:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801929a:	4b19      	ldr	r3, [pc, #100]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 801929c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80192a0:	68bb      	ldr	r3, [r7, #8]
 80192a2:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80192a6:	4b16      	ldr	r3, [pc, #88]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 80192a8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 80192ac:	68bb      	ldr	r3, [r7, #8]
 80192ae:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80192b2:	2b02      	cmp	r3, #2
 80192b4:	d010      	beq.n	80192d8 <RadioSetRxGenericConfig+0x29c>
 80192b6:	2b02      	cmp	r3, #2
 80192b8:	dc2c      	bgt.n	8019314 <RadioSetRxGenericConfig+0x2d8>
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	d002      	beq.n	80192c4 <RadioSetRxGenericConfig+0x288>
 80192be:	2b01      	cmp	r3, #1
 80192c0:	d005      	beq.n	80192ce <RadioSetRxGenericConfig+0x292>
            break;
 80192c2:	e027      	b.n	8019314 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80192c4:	4b0e      	ldr	r3, [pc, #56]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 80192c6:	2200      	movs	r2, #0
 80192c8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80192cc:	e023      	b.n	8019316 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80192ce:	4b0c      	ldr	r3, [pc, #48]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 80192d0:	2201      	movs	r2, #1
 80192d2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80192d6:	e01e      	b.n	8019316 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80192d8:	68bb      	ldr	r3, [r7, #8]
 80192da:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80192de:	2b0b      	cmp	r3, #11
 80192e0:	d004      	beq.n	80192ec <RadioSetRxGenericConfig+0x2b0>
 80192e2:	68bb      	ldr	r3, [r7, #8]
 80192e4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80192e8:	2b0c      	cmp	r3, #12
 80192ea:	d104      	bne.n	80192f6 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80192ec:	4b04      	ldr	r3, [pc, #16]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 80192ee:	2201      	movs	r2, #1
 80192f0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80192f4:	e00f      	b.n	8019316 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80192f6:	4b02      	ldr	r3, [pc, #8]	@ (8019300 <RadioSetRxGenericConfig+0x2c4>)
 80192f8:	2200      	movs	r2, #0
 80192fa:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80192fe:	e00a      	b.n	8019316 <RadioSetRxGenericConfig+0x2da>
 8019300:	2000149c 	.word	0x2000149c
 8019304:	20001498 	.word	0x20001498
 8019308:	20001510 	.word	0x20001510
 801930c:	200014d4 	.word	0x200014d4
 8019310:	200014aa 	.word	0x200014aa
            break;
 8019314:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019316:	4b28      	ldr	r3, [pc, #160]	@ (80193b8 <RadioSetRxGenericConfig+0x37c>)
 8019318:	2201      	movs	r2, #1
 801931a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801931c:	68bb      	ldr	r3, [r7, #8]
 801931e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8019320:	4b25      	ldr	r3, [pc, #148]	@ (80193b8 <RadioSetRxGenericConfig+0x37c>)
 8019322:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8019324:	68bb      	ldr	r3, [r7, #8]
 8019326:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 801932a:	4b23      	ldr	r3, [pc, #140]	@ (80193b8 <RadioSetRxGenericConfig+0x37c>)
 801932c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801932e:	4a22      	ldr	r2, [pc, #136]	@ (80193b8 <RadioSetRxGenericConfig+0x37c>)
 8019330:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019334:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019336:	68bb      	ldr	r3, [r7, #8]
 8019338:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 801933c:	4b1e      	ldr	r3, [pc, #120]	@ (80193b8 <RadioSetRxGenericConfig+0x37c>)
 801933e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8019342:	68bb      	ldr	r3, [r7, #8]
 8019344:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8019348:	4b1b      	ldr	r3, [pc, #108]	@ (80193b8 <RadioSetRxGenericConfig+0x37c>)
 801934a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 801934e:	f7ff f98e 	bl	801866e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8019352:	2001      	movs	r0, #1
 8019354:	f7fe fb22 	bl	801799c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019358:	4818      	ldr	r0, [pc, #96]	@ (80193bc <RadioSetRxGenericConfig+0x380>)
 801935a:	f000 ff7d 	bl	801a258 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801935e:	4818      	ldr	r0, [pc, #96]	@ (80193c0 <RadioSetRxGenericConfig+0x384>)
 8019360:	f001 f84c 	bl	801a3fc <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019364:	4b14      	ldr	r3, [pc, #80]	@ (80193b8 <RadioSetRxGenericConfig+0x37c>)
 8019366:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801936a:	2b01      	cmp	r3, #1
 801936c:	d10d      	bne.n	801938a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801936e:	f240 7036 	movw	r0, #1846	@ 0x736
 8019372:	f001 f99f 	bl	801a6b4 <SUBGRF_ReadRegister>
 8019376:	4603      	mov	r3, r0
 8019378:	f023 0304 	bic.w	r3, r3, #4
 801937c:	b2db      	uxtb	r3, r3
 801937e:	4619      	mov	r1, r3
 8019380:	f240 7036 	movw	r0, #1846	@ 0x736
 8019384:	f001 f982 	bl	801a68c <SUBGRF_WriteRegister>
 8019388:	e00c      	b.n	80193a4 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801938a:	f240 7036 	movw	r0, #1846	@ 0x736
 801938e:	f001 f991 	bl	801a6b4 <SUBGRF_ReadRegister>
 8019392:	4603      	mov	r3, r0
 8019394:	f043 0304 	orr.w	r3, r3, #4
 8019398:	b2db      	uxtb	r3, r3
 801939a:	4619      	mov	r1, r3
 801939c:	f240 7036 	movw	r0, #1846	@ 0x736
 80193a0:	f001 f974 	bl	801a68c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80193a4:	4b04      	ldr	r3, [pc, #16]	@ (80193b8 <RadioSetRxGenericConfig+0x37c>)
 80193a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80193aa:	609a      	str	r2, [r3, #8]
        break;
 80193ac:	bf00      	nop
    }
    return status;
 80193ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80193b0:	4618      	mov	r0, r3
 80193b2:	3730      	adds	r7, #48	@ 0x30
 80193b4:	46bd      	mov	sp, r7
 80193b6:	bd80      	pop	{r7, pc}
 80193b8:	2000149c 	.word	0x2000149c
 80193bc:	200014d4 	.word	0x200014d4
 80193c0:	200014aa 	.word	0x200014aa

080193c4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b08e      	sub	sp, #56	@ 0x38
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	60b9      	str	r1, [r7, #8]
 80193cc:	607b      	str	r3, [r7, #4]
 80193ce:	4603      	mov	r3, r0
 80193d0:	73fb      	strb	r3, [r7, #15]
 80193d2:	4613      	mov	r3, r2
 80193d4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 80193d6:	2300      	movs	r3, #0
 80193d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80193da:	2300      	movs	r3, #0
 80193dc:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80193de:	f001 fc3c 	bl	801ac5a <RFW_DeInit>
    switch( modem )
 80193e2:	7bfb      	ldrb	r3, [r7, #15]
 80193e4:	2b03      	cmp	r3, #3
 80193e6:	f200 8204 	bhi.w	80197f2 <RadioSetTxGenericConfig+0x42e>
 80193ea:	a201      	add	r2, pc, #4	@ (adr r2, 80193f0 <RadioSetTxGenericConfig+0x2c>)
 80193ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193f0:	08019575 	.word	0x08019575
 80193f4:	080196bd 	.word	0x080196bd
 80193f8:	080197b5 	.word	0x080197b5
 80193fc:	08019401 	.word	0x08019401
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8019400:	68bb      	ldr	r3, [r7, #8]
 8019402:	7c9b      	ldrb	r3, [r3, #18]
 8019404:	2b08      	cmp	r3, #8
 8019406:	d902      	bls.n	801940e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8019408:	f04f 33ff 	mov.w	r3, #4294967295
 801940c:	e206      	b.n	801981c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801940e:	68bb      	ldr	r3, [r7, #8]
 8019410:	6899      	ldr	r1, [r3, #8]
 8019412:	68bb      	ldr	r3, [r7, #8]
 8019414:	7c9b      	ldrb	r3, [r3, #18]
 8019416:	461a      	mov	r2, r3
 8019418:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801941c:	4618      	mov	r0, r3
 801941e:	f001 fcd9 	bl	801add4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8019422:	68bb      	ldr	r3, [r7, #8]
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	2b00      	cmp	r3, #0
 8019428:	d102      	bne.n	8019430 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801942a:	f04f 33ff 	mov.w	r3, #4294967295
 801942e:	e1f5      	b.n	801981c <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8019430:	68bb      	ldr	r3, [r7, #8]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	f242 7210 	movw	r2, #10000	@ 0x2710
 8019438:	4293      	cmp	r3, r2
 801943a:	d813      	bhi.n	8019464 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801943c:	2302      	movs	r3, #2
 801943e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8019442:	4b99      	ldr	r3, [pc, #612]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 8019444:	2203      	movs	r2, #3
 8019446:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8019448:	4b97      	ldr	r3, [pc, #604]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 801944a:	2203      	movs	r2, #3
 801944c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019450:	68bb      	ldr	r3, [r7, #8]
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	4a94      	ldr	r2, [pc, #592]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 8019456:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019458:	68bb      	ldr	r3, [r7, #8]
 801945a:	7cda      	ldrb	r2, [r3, #19]
 801945c:	4b92      	ldr	r3, [pc, #584]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 801945e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8019462:	e017      	b.n	8019494 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8019464:	2300      	movs	r3, #0
 8019466:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801946a:	4b8f      	ldr	r3, [pc, #572]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 801946c:	2200      	movs	r2, #0
 801946e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019470:	4b8d      	ldr	r3, [pc, #564]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 8019472:	2200      	movs	r2, #0
 8019474:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019478:	68bb      	ldr	r3, [r7, #8]
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	4a8a      	ldr	r2, [pc, #552]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 801947e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019480:	68bb      	ldr	r3, [r7, #8]
 8019482:	7cda      	ldrb	r2, [r3, #19]
 8019484:	4b88      	ldr	r3, [pc, #544]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 8019486:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801948a:	68bb      	ldr	r3, [r7, #8]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	089b      	lsrs	r3, r3, #2
 8019490:	4a85      	ldr	r2, [pc, #532]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 8019492:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8019494:	68bb      	ldr	r3, [r7, #8]
 8019496:	685b      	ldr	r3, [r3, #4]
 8019498:	b29b      	uxth	r3, r3
 801949a:	00db      	lsls	r3, r3, #3
 801949c:	b29a      	uxth	r2, r3
 801949e:	4b82      	ldr	r3, [pc, #520]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 80194a0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80194a2:	4b81      	ldr	r3, [pc, #516]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 80194a4:	2204      	movs	r2, #4
 80194a6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 80194a8:	68bb      	ldr	r3, [r7, #8]
 80194aa:	7c9b      	ldrb	r3, [r3, #18]
 80194ac:	00db      	lsls	r3, r3, #3
 80194ae:	b2da      	uxtb	r2, r3
 80194b0:	4b7d      	ldr	r3, [pc, #500]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 80194b2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80194b4:	4b7c      	ldr	r3, [pc, #496]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 80194b6:	2200      	movs	r2, #0
 80194b8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80194ba:	68bb      	ldr	r3, [r7, #8]
 80194bc:	7d9b      	ldrb	r3, [r3, #22]
 80194be:	2b02      	cmp	r3, #2
 80194c0:	d003      	beq.n	80194ca <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80194c2:	68bb      	ldr	r3, [r7, #8]
 80194c4:	7d1b      	ldrb	r3, [r3, #20]
 80194c6:	2b02      	cmp	r3, #2
 80194c8:	d12b      	bne.n	8019522 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80194ca:	68bb      	ldr	r3, [r7, #8]
 80194cc:	7d5b      	ldrb	r3, [r3, #21]
 80194ce:	2bf1      	cmp	r3, #241	@ 0xf1
 80194d0:	d00a      	beq.n	80194e8 <RadioSetTxGenericConfig+0x124>
 80194d2:	68bb      	ldr	r3, [r7, #8]
 80194d4:	7d5b      	ldrb	r3, [r3, #21]
 80194d6:	2bf2      	cmp	r3, #242	@ 0xf2
 80194d8:	d006      	beq.n	80194e8 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80194da:	68bb      	ldr	r3, [r7, #8]
 80194dc:	7d5b      	ldrb	r3, [r3, #21]
 80194de:	2b01      	cmp	r3, #1
 80194e0:	d002      	beq.n	80194e8 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 80194e2:	f04f 33ff 	mov.w	r3, #4294967295
 80194e6:	e199      	b.n	801981c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 80194e8:	68bb      	ldr	r3, [r7, #8]
 80194ea:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 80194ec:	2301      	movs	r3, #1
 80194ee:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80194f2:	4b6e      	ldr	r3, [pc, #440]	@ (80196ac <RadioSetTxGenericConfig+0x2e8>)
 80194f4:	6819      	ldr	r1, [r3, #0]
 80194f6:	f107 0320 	add.w	r3, r7, #32
 80194fa:	4a6d      	ldr	r2, [pc, #436]	@ (80196b0 <RadioSetTxGenericConfig+0x2ec>)
 80194fc:	4618      	mov	r0, r3
 80194fe:	f001 fb9f 	bl	801ac40 <RFW_Init>
 8019502:	4603      	mov	r3, r0
 8019504:	2b00      	cmp	r3, #0
 8019506:	d002      	beq.n	801950e <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8019508:	f04f 33ff 	mov.w	r3, #4294967295
 801950c:	e186      	b.n	801981c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801950e:	4b66      	ldr	r3, [pc, #408]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 8019510:	2200      	movs	r2, #0
 8019512:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8019514:	4b64      	ldr	r3, [pc, #400]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 8019516:	2201      	movs	r2, #1
 8019518:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801951a:	4b63      	ldr	r3, [pc, #396]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 801951c:	2200      	movs	r2, #0
 801951e:	755a      	strb	r2, [r3, #21]
        {
 8019520:	e00b      	b.n	801953a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8019522:	68bb      	ldr	r3, [r7, #8]
 8019524:	7d5a      	ldrb	r2, [r3, #21]
 8019526:	4b60      	ldr	r3, [pc, #384]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 8019528:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801952a:	68bb      	ldr	r3, [r7, #8]
 801952c:	7d9a      	ldrb	r2, [r3, #22]
 801952e:	4b5e      	ldr	r3, [pc, #376]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 8019530:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8019532:	68bb      	ldr	r3, [r7, #8]
 8019534:	7d1a      	ldrb	r2, [r3, #20]
 8019536:	4b5c      	ldr	r3, [pc, #368]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 8019538:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801953a:	f7ff f898 	bl	801866e <RadioStandby>
        RadioSetModem( radio_modem );
 801953e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019542:	4618      	mov	r0, r3
 8019544:	f7fe fa2a 	bl	801799c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019548:	485a      	ldr	r0, [pc, #360]	@ (80196b4 <RadioSetTxGenericConfig+0x2f0>)
 801954a:	f000 fe85 	bl	801a258 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801954e:	485a      	ldr	r0, [pc, #360]	@ (80196b8 <RadioSetTxGenericConfig+0x2f4>)
 8019550:	f000 ff54 	bl	801a3fc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019554:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019558:	4618      	mov	r0, r3
 801955a:	f000 fa18 	bl	801998e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801955e:	68bb      	ldr	r3, [r7, #8]
 8019560:	8a1b      	ldrh	r3, [r3, #16]
 8019562:	4618      	mov	r0, r3
 8019564:	f000 fa62 	bl	8019a2c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8019568:	68bb      	ldr	r3, [r7, #8]
 801956a:	899b      	ldrh	r3, [r3, #12]
 801956c:	4618      	mov	r0, r3
 801956e:	f000 fa3d 	bl	80199ec <SUBGRF_SetCrcPolynomial>
        break;
 8019572:	e13f      	b.n	80197f4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8019574:	68bb      	ldr	r3, [r7, #8]
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	2b00      	cmp	r3, #0
 801957a:	d102      	bne.n	8019582 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801957c:	f04f 33ff 	mov.w	r3, #4294967295
 8019580:	e14c      	b.n	801981c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8019582:	68bb      	ldr	r3, [r7, #8]
 8019584:	7c9b      	ldrb	r3, [r3, #18]
 8019586:	2b08      	cmp	r3, #8
 8019588:	d902      	bls.n	8019590 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801958a:	f04f 33ff 	mov.w	r3, #4294967295
 801958e:	e145      	b.n	801981c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8019590:	68bb      	ldr	r3, [r7, #8]
 8019592:	6899      	ldr	r1, [r3, #8]
 8019594:	68bb      	ldr	r3, [r7, #8]
 8019596:	7c9b      	ldrb	r3, [r3, #18]
 8019598:	461a      	mov	r2, r3
 801959a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801959e:	4618      	mov	r0, r3
 80195a0:	f001 fc18 	bl	801add4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80195a4:	4b40      	ldr	r3, [pc, #256]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 80195a6:	2200      	movs	r2, #0
 80195a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80195ac:	68bb      	ldr	r3, [r7, #8]
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	4a3d      	ldr	r2, [pc, #244]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 80195b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80195b4:	68bb      	ldr	r3, [r7, #8]
 80195b6:	7cda      	ldrb	r2, [r3, #19]
 80195b8:	4b3b      	ldr	r3, [pc, #236]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 80195ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80195be:	68bb      	ldr	r3, [r7, #8]
 80195c0:	699b      	ldr	r3, [r3, #24]
 80195c2:	4a39      	ldr	r2, [pc, #228]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 80195c4:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80195c6:	4b38      	ldr	r3, [pc, #224]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 80195c8:	2200      	movs	r2, #0
 80195ca:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80195cc:	68bb      	ldr	r3, [r7, #8]
 80195ce:	685b      	ldr	r3, [r3, #4]
 80195d0:	b29b      	uxth	r3, r3
 80195d2:	00db      	lsls	r3, r3, #3
 80195d4:	b29a      	uxth	r2, r3
 80195d6:	4b34      	ldr	r3, [pc, #208]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 80195d8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80195da:	4b33      	ldr	r3, [pc, #204]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 80195dc:	2204      	movs	r2, #4
 80195de:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80195e0:	68bb      	ldr	r3, [r7, #8]
 80195e2:	7c9b      	ldrb	r3, [r3, #18]
 80195e4:	00db      	lsls	r3, r3, #3
 80195e6:	b2da      	uxtb	r2, r3
 80195e8:	4b2f      	ldr	r3, [pc, #188]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 80195ea:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80195ec:	4b2e      	ldr	r3, [pc, #184]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 80195ee:	2200      	movs	r2, #0
 80195f0:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80195f2:	68bb      	ldr	r3, [r7, #8]
 80195f4:	7d9b      	ldrb	r3, [r3, #22]
 80195f6:	2b02      	cmp	r3, #2
 80195f8:	d003      	beq.n	8019602 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80195fa:	68bb      	ldr	r3, [r7, #8]
 80195fc:	7d1b      	ldrb	r3, [r3, #20]
 80195fe:	2b02      	cmp	r3, #2
 8019600:	d12a      	bne.n	8019658 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8019602:	68bb      	ldr	r3, [r7, #8]
 8019604:	7d5b      	ldrb	r3, [r3, #21]
 8019606:	2bf1      	cmp	r3, #241	@ 0xf1
 8019608:	d00a      	beq.n	8019620 <RadioSetTxGenericConfig+0x25c>
 801960a:	68bb      	ldr	r3, [r7, #8]
 801960c:	7d5b      	ldrb	r3, [r3, #21]
 801960e:	2bf2      	cmp	r3, #242	@ 0xf2
 8019610:	d006      	beq.n	8019620 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019612:	68bb      	ldr	r3, [r7, #8]
 8019614:	7d5b      	ldrb	r3, [r3, #21]
 8019616:	2b01      	cmp	r3, #1
 8019618:	d002      	beq.n	8019620 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801961a:	f04f 33ff 	mov.w	r3, #4294967295
 801961e:	e0fd      	b.n	801981c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8019620:	2301      	movs	r3, #1
 8019622:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8019624:	68bb      	ldr	r3, [r7, #8]
 8019626:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8019628:	4b20      	ldr	r3, [pc, #128]	@ (80196ac <RadioSetTxGenericConfig+0x2e8>)
 801962a:	6819      	ldr	r1, [r3, #0]
 801962c:	f107 0314 	add.w	r3, r7, #20
 8019630:	4a1f      	ldr	r2, [pc, #124]	@ (80196b0 <RadioSetTxGenericConfig+0x2ec>)
 8019632:	4618      	mov	r0, r3
 8019634:	f001 fb04 	bl	801ac40 <RFW_Init>
 8019638:	4603      	mov	r3, r0
 801963a:	2b00      	cmp	r3, #0
 801963c:	d002      	beq.n	8019644 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801963e:	f04f 33ff 	mov.w	r3, #4294967295
 8019642:	e0eb      	b.n	801981c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019644:	4b18      	ldr	r3, [pc, #96]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 8019646:	2200      	movs	r2, #0
 8019648:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801964a:	4b17      	ldr	r3, [pc, #92]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 801964c:	2201      	movs	r2, #1
 801964e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019650:	4b15      	ldr	r3, [pc, #84]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 8019652:	2200      	movs	r2, #0
 8019654:	755a      	strb	r2, [r3, #21]
        {
 8019656:	e00b      	b.n	8019670 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019658:	68bb      	ldr	r3, [r7, #8]
 801965a:	7d5a      	ldrb	r2, [r3, #21]
 801965c:	4b12      	ldr	r3, [pc, #72]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 801965e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019660:	68bb      	ldr	r3, [r7, #8]
 8019662:	7d9a      	ldrb	r2, [r3, #22]
 8019664:	4b10      	ldr	r3, [pc, #64]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 8019666:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8019668:	68bb      	ldr	r3, [r7, #8]
 801966a:	7d1a      	ldrb	r2, [r3, #20]
 801966c:	4b0e      	ldr	r3, [pc, #56]	@ (80196a8 <RadioSetTxGenericConfig+0x2e4>)
 801966e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8019670:	f7fe fffd 	bl	801866e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019674:	2000      	movs	r0, #0
 8019676:	f7fe f991 	bl	801799c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801967a:	480e      	ldr	r0, [pc, #56]	@ (80196b4 <RadioSetTxGenericConfig+0x2f0>)
 801967c:	f000 fdec 	bl	801a258 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019680:	480d      	ldr	r0, [pc, #52]	@ (80196b8 <RadioSetTxGenericConfig+0x2f4>)
 8019682:	f000 febb 	bl	801a3fc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019686:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801968a:	4618      	mov	r0, r3
 801968c:	f000 f97f 	bl	801998e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019690:	68bb      	ldr	r3, [r7, #8]
 8019692:	8a1b      	ldrh	r3, [r3, #16]
 8019694:	4618      	mov	r0, r3
 8019696:	f000 f9c9 	bl	8019a2c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801969a:	68bb      	ldr	r3, [r7, #8]
 801969c:	899b      	ldrh	r3, [r3, #12]
 801969e:	4618      	mov	r0, r3
 80196a0:	f000 f9a4 	bl	80199ec <SUBGRF_SetCrcPolynomial>
        break;
 80196a4:	e0a6      	b.n	80197f4 <RadioSetTxGenericConfig+0x430>
 80196a6:	bf00      	nop
 80196a8:	2000149c 	.word	0x2000149c
 80196ac:	20001498 	.word	0x20001498
 80196b0:	200014f8 	.word	0x200014f8
 80196b4:	200014d4 	.word	0x200014d4
 80196b8:	200014aa 	.word	0x200014aa
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80196bc:	4b59      	ldr	r3, [pc, #356]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 80196be:	2201      	movs	r2, #1
 80196c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80196c4:	68bb      	ldr	r3, [r7, #8]
 80196c6:	781a      	ldrb	r2, [r3, #0]
 80196c8:	4b56      	ldr	r3, [pc, #344]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 80196ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80196ce:	68bb      	ldr	r3, [r7, #8]
 80196d0:	785a      	ldrb	r2, [r3, #1]
 80196d2:	4b54      	ldr	r3, [pc, #336]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 80196d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80196d8:	68bb      	ldr	r3, [r7, #8]
 80196da:	789a      	ldrb	r2, [r3, #2]
 80196dc:	4b51      	ldr	r3, [pc, #324]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 80196de:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 80196e2:	68bb      	ldr	r3, [r7, #8]
 80196e4:	78db      	ldrb	r3, [r3, #3]
 80196e6:	2b02      	cmp	r3, #2
 80196e8:	d010      	beq.n	801970c <RadioSetTxGenericConfig+0x348>
 80196ea:	2b02      	cmp	r3, #2
 80196ec:	dc20      	bgt.n	8019730 <RadioSetTxGenericConfig+0x36c>
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d002      	beq.n	80196f8 <RadioSetTxGenericConfig+0x334>
 80196f2:	2b01      	cmp	r3, #1
 80196f4:	d005      	beq.n	8019702 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 80196f6:	e01b      	b.n	8019730 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80196f8:	4b4a      	ldr	r3, [pc, #296]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 80196fa:	2200      	movs	r2, #0
 80196fc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019700:	e017      	b.n	8019732 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019702:	4b48      	ldr	r3, [pc, #288]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 8019704:	2201      	movs	r2, #1
 8019706:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801970a:	e012      	b.n	8019732 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801970c:	68bb      	ldr	r3, [r7, #8]
 801970e:	781b      	ldrb	r3, [r3, #0]
 8019710:	2b0b      	cmp	r3, #11
 8019712:	d003      	beq.n	801971c <RadioSetTxGenericConfig+0x358>
 8019714:	68bb      	ldr	r3, [r7, #8]
 8019716:	781b      	ldrb	r3, [r3, #0]
 8019718:	2b0c      	cmp	r3, #12
 801971a:	d104      	bne.n	8019726 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801971c:	4b41      	ldr	r3, [pc, #260]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 801971e:	2201      	movs	r2, #1
 8019720:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019724:	e005      	b.n	8019732 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019726:	4b3f      	ldr	r3, [pc, #252]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 8019728:	2200      	movs	r2, #0
 801972a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801972e:	e000      	b.n	8019732 <RadioSetTxGenericConfig+0x36e>
            break;
 8019730:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019732:	4b3c      	ldr	r3, [pc, #240]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 8019734:	2201      	movs	r2, #1
 8019736:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019738:	68bb      	ldr	r3, [r7, #8]
 801973a:	889a      	ldrh	r2, [r3, #4]
 801973c:	4b39      	ldr	r3, [pc, #228]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 801973e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8019740:	68bb      	ldr	r3, [r7, #8]
 8019742:	799a      	ldrb	r2, [r3, #6]
 8019744:	4b37      	ldr	r3, [pc, #220]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 8019746:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019748:	68bb      	ldr	r3, [r7, #8]
 801974a:	79da      	ldrb	r2, [r3, #7]
 801974c:	4b35      	ldr	r3, [pc, #212]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 801974e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8019752:	68bb      	ldr	r3, [r7, #8]
 8019754:	7a1a      	ldrb	r2, [r3, #8]
 8019756:	4b33      	ldr	r3, [pc, #204]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 8019758:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 801975c:	f7fe ff87 	bl	801866e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8019760:	2001      	movs	r0, #1
 8019762:	f7fe f91b 	bl	801799c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019766:	4830      	ldr	r0, [pc, #192]	@ (8019828 <RadioSetTxGenericConfig+0x464>)
 8019768:	f000 fd76 	bl	801a258 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801976c:	482f      	ldr	r0, [pc, #188]	@ (801982c <RadioSetTxGenericConfig+0x468>)
 801976e:	f000 fe45 	bl	801a3fc <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8019772:	4b2c      	ldr	r3, [pc, #176]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 8019774:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8019778:	2b06      	cmp	r3, #6
 801977a:	d10d      	bne.n	8019798 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801977c:	f640 0089 	movw	r0, #2185	@ 0x889
 8019780:	f000 ff98 	bl	801a6b4 <SUBGRF_ReadRegister>
 8019784:	4603      	mov	r3, r0
 8019786:	f023 0304 	bic.w	r3, r3, #4
 801978a:	b2db      	uxtb	r3, r3
 801978c:	4619      	mov	r1, r3
 801978e:	f640 0089 	movw	r0, #2185	@ 0x889
 8019792:	f000 ff7b 	bl	801a68c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8019796:	e02d      	b.n	80197f4 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019798:	f640 0089 	movw	r0, #2185	@ 0x889
 801979c:	f000 ff8a 	bl	801a6b4 <SUBGRF_ReadRegister>
 80197a0:	4603      	mov	r3, r0
 80197a2:	f043 0304 	orr.w	r3, r3, #4
 80197a6:	b2db      	uxtb	r3, r3
 80197a8:	4619      	mov	r1, r3
 80197aa:	f640 0089 	movw	r0, #2185	@ 0x889
 80197ae:	f000 ff6d 	bl	801a68c <SUBGRF_WriteRegister>
        break;
 80197b2:	e01f      	b.n	80197f4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80197b4:	68bb      	ldr	r3, [r7, #8]
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d004      	beq.n	80197c6 <RadioSetTxGenericConfig+0x402>
 80197bc:	68bb      	ldr	r3, [r7, #8]
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80197c4:	d902      	bls.n	80197cc <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 80197c6:	f04f 33ff 	mov.w	r3, #4294967295
 80197ca:	e027      	b.n	801981c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 80197cc:	2003      	movs	r0, #3
 80197ce:	f7fe f8e5 	bl	801799c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80197d2:	4b14      	ldr	r3, [pc, #80]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 80197d4:	2202      	movs	r2, #2
 80197d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80197da:	68bb      	ldr	r3, [r7, #8]
 80197dc:	681b      	ldr	r3, [r3, #0]
 80197de:	4a11      	ldr	r2, [pc, #68]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 80197e0:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80197e2:	4b10      	ldr	r3, [pc, #64]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 80197e4:	2216      	movs	r2, #22
 80197e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80197ea:	480f      	ldr	r0, [pc, #60]	@ (8019828 <RadioSetTxGenericConfig+0x464>)
 80197ec:	f000 fd34 	bl	801a258 <SUBGRF_SetModulationParams>
        break;
 80197f0:	e000      	b.n	80197f4 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 80197f2:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80197f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80197f8:	4618      	mov	r0, r3
 80197fa:	f001 f863 	bl	801a8c4 <SUBGRF_SetRfTxPower>
 80197fe:	4603      	mov	r3, r0
 8019800:	461a      	mov	r2, r3
 8019802:	4b08      	ldr	r3, [pc, #32]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 8019804:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8019808:	4b06      	ldr	r3, [pc, #24]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 801980a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801980e:	4618      	mov	r0, r3
 8019810:	f001 fa37 	bl	801ac82 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8019814:	4a03      	ldr	r2, [pc, #12]	@ (8019824 <RadioSetTxGenericConfig+0x460>)
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	6053      	str	r3, [r2, #4]
    return 0;
 801981a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801981c:	4618      	mov	r0, r3
 801981e:	3738      	adds	r7, #56	@ 0x38
 8019820:	46bd      	mov	sp, r7
 8019822:	bd80      	pop	{r7, pc}
 8019824:	2000149c 	.word	0x2000149c
 8019828:	200014d4 	.word	0x200014d4
 801982c:	200014aa 	.word	0x200014aa

08019830 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8019830:	b480      	push	{r7}
 8019832:	b085      	sub	sp, #20
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8019838:	2301      	movs	r3, #1
 801983a:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801983c:	7bfb      	ldrb	r3, [r7, #15]
}
 801983e:	4618      	mov	r0, r3
 8019840:	3714      	adds	r7, #20
 8019842:	46bd      	mov	sp, r7
 8019844:	bc80      	pop	{r7}
 8019846:	4770      	bx	lr

08019848 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8019848:	b480      	push	{r7}
 801984a:	b083      	sub	sp, #12
 801984c:	af00      	add	r7, sp, #0
 801984e:	6078      	str	r0, [r7, #4]
 8019850:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8019852:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8019854:	4618      	mov	r0, r3
 8019856:	370c      	adds	r7, #12
 8019858:	46bd      	mov	sp, r7
 801985a:	bc80      	pop	{r7}
 801985c:	4770      	bx	lr
	...

08019860 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8019860:	b580      	push	{r7, lr}
 8019862:	b084      	sub	sp, #16
 8019864:	af00      	add	r7, sp, #0
 8019866:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	2b00      	cmp	r3, #0
 801986c:	d002      	beq.n	8019874 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801986e:	4a1d      	ldr	r2, [pc, #116]	@ (80198e4 <SUBGRF_Init+0x84>)
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8019874:	f7e8 fd8e 	bl	8002394 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019878:	2002      	movs	r0, #2
 801987a:	f001 f8ff 	bl	801aa7c <Radio_SMPS_Set>

    ImageCalibrated = false;
 801987e:	4b1a      	ldr	r3, [pc, #104]	@ (80198e8 <SUBGRF_Init+0x88>)
 8019880:	2200      	movs	r2, #0
 8019882:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8019884:	2000      	movs	r0, #0
 8019886:	f000 f97d 	bl	8019b84 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801988a:	f7f0 fb7a 	bl	8009f82 <RBI_IsTCXO>
 801988e:	4603      	mov	r3, r0
 8019890:	2b01      	cmp	r3, #1
 8019892:	d10e      	bne.n	80198b2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8019894:	2140      	movs	r1, #64	@ 0x40
 8019896:	2001      	movs	r0, #1
 8019898:	f000 fb82 	bl	8019fa0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801989c:	2100      	movs	r1, #0
 801989e:	f640 1011 	movw	r0, #2321	@ 0x911
 80198a2:	f000 fef3 	bl	801a68c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80198a6:	237f      	movs	r3, #127	@ 0x7f
 80198a8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80198aa:	7b38      	ldrb	r0, [r7, #12]
 80198ac:	f000 fa8b 	bl	8019dc6 <SUBGRF_Calibrate>
 80198b0:	e009      	b.n	80198c6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80198b2:	2120      	movs	r1, #32
 80198b4:	f640 1011 	movw	r0, #2321	@ 0x911
 80198b8:	f000 fee8 	bl	801a68c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80198bc:	2120      	movs	r1, #32
 80198be:	f640 1012 	movw	r0, #2322	@ 0x912
 80198c2:	f000 fee3 	bl	801a68c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80198c6:	210e      	movs	r1, #14
 80198c8:	f640 101f 	movw	r0, #2335	@ 0x91f
 80198cc:	f000 fede 	bl	801a68c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80198d0:	f7f0 fb34 	bl	8009f3c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80198d4:	4b05      	ldr	r3, [pc, #20]	@ (80198ec <SUBGRF_Init+0x8c>)
 80198d6:	2201      	movs	r2, #1
 80198d8:	701a      	strb	r2, [r3, #0]
}
 80198da:	bf00      	nop
 80198dc:	3710      	adds	r7, #16
 80198de:	46bd      	mov	sp, r7
 80198e0:	bd80      	pop	{r7, pc}
 80198e2:	bf00      	nop
 80198e4:	20001534 	.word	0x20001534
 80198e8:	20001530 	.word	0x20001530
 80198ec:	20001528 	.word	0x20001528

080198f0 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80198f0:	b480      	push	{r7}
 80198f2:	af00      	add	r7, sp, #0
    return OperatingMode;
 80198f4:	4b02      	ldr	r3, [pc, #8]	@ (8019900 <SUBGRF_GetOperatingMode+0x10>)
 80198f6:	781b      	ldrb	r3, [r3, #0]
}
 80198f8:	4618      	mov	r0, r3
 80198fa:	46bd      	mov	sp, r7
 80198fc:	bc80      	pop	{r7}
 80198fe:	4770      	bx	lr
 8019900:	20001528 	.word	0x20001528

08019904 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8019904:	b580      	push	{r7, lr}
 8019906:	b082      	sub	sp, #8
 8019908:	af00      	add	r7, sp, #0
 801990a:	6078      	str	r0, [r7, #4]
 801990c:	460b      	mov	r3, r1
 801990e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8019910:	78fb      	ldrb	r3, [r7, #3]
 8019912:	461a      	mov	r2, r3
 8019914:	6879      	ldr	r1, [r7, #4]
 8019916:	2000      	movs	r0, #0
 8019918:	f000 ff24 	bl	801a764 <SUBGRF_WriteBuffer>
}
 801991c:	bf00      	nop
 801991e:	3708      	adds	r7, #8
 8019920:	46bd      	mov	sp, r7
 8019922:	bd80      	pop	{r7, pc}

08019924 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8019924:	b580      	push	{r7, lr}
 8019926:	b086      	sub	sp, #24
 8019928:	af00      	add	r7, sp, #0
 801992a:	60f8      	str	r0, [r7, #12]
 801992c:	60b9      	str	r1, [r7, #8]
 801992e:	4613      	mov	r3, r2
 8019930:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8019932:	2300      	movs	r3, #0
 8019934:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8019936:	f107 0317 	add.w	r3, r7, #23
 801993a:	4619      	mov	r1, r3
 801993c:	68b8      	ldr	r0, [r7, #8]
 801993e:	f000 fe27 	bl	801a590 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8019942:	68bb      	ldr	r3, [r7, #8]
 8019944:	781b      	ldrb	r3, [r3, #0]
 8019946:	79fa      	ldrb	r2, [r7, #7]
 8019948:	429a      	cmp	r2, r3
 801994a:	d201      	bcs.n	8019950 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801994c:	2301      	movs	r3, #1
 801994e:	e007      	b.n	8019960 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8019950:	7df8      	ldrb	r0, [r7, #23]
 8019952:	68bb      	ldr	r3, [r7, #8]
 8019954:	781b      	ldrb	r3, [r3, #0]
 8019956:	461a      	mov	r2, r3
 8019958:	68f9      	ldr	r1, [r7, #12]
 801995a:	f000 ff25 	bl	801a7a8 <SUBGRF_ReadBuffer>

    return 0;
 801995e:	2300      	movs	r3, #0
}
 8019960:	4618      	mov	r0, r3
 8019962:	3718      	adds	r7, #24
 8019964:	46bd      	mov	sp, r7
 8019966:	bd80      	pop	{r7, pc}

08019968 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8019968:	b580      	push	{r7, lr}
 801996a:	b084      	sub	sp, #16
 801996c:	af00      	add	r7, sp, #0
 801996e:	60f8      	str	r0, [r7, #12]
 8019970:	460b      	mov	r3, r1
 8019972:	607a      	str	r2, [r7, #4]
 8019974:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8019976:	7afb      	ldrb	r3, [r7, #11]
 8019978:	4619      	mov	r1, r3
 801997a:	68f8      	ldr	r0, [r7, #12]
 801997c:	f7ff ffc2 	bl	8019904 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8019980:	6878      	ldr	r0, [r7, #4]
 8019982:	f000 f91b 	bl	8019bbc <SUBGRF_SetTx>
}
 8019986:	bf00      	nop
 8019988:	3710      	adds	r7, #16
 801998a:	46bd      	mov	sp, r7
 801998c:	bd80      	pop	{r7, pc}

0801998e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801998e:	b580      	push	{r7, lr}
 8019990:	b082      	sub	sp, #8
 8019992:	af00      	add	r7, sp, #0
 8019994:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8019996:	2208      	movs	r2, #8
 8019998:	6879      	ldr	r1, [r7, #4]
 801999a:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801999e:	f000 fe9d 	bl	801a6dc <SUBGRF_WriteRegisters>
    return 0;
 80199a2:	2300      	movs	r3, #0
}
 80199a4:	4618      	mov	r0, r3
 80199a6:	3708      	adds	r7, #8
 80199a8:	46bd      	mov	sp, r7
 80199aa:	bd80      	pop	{r7, pc}

080199ac <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80199ac:	b580      	push	{r7, lr}
 80199ae:	b084      	sub	sp, #16
 80199b0:	af00      	add	r7, sp, #0
 80199b2:	4603      	mov	r3, r0
 80199b4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80199b6:	88fb      	ldrh	r3, [r7, #6]
 80199b8:	0a1b      	lsrs	r3, r3, #8
 80199ba:	b29b      	uxth	r3, r3
 80199bc:	b2db      	uxtb	r3, r3
 80199be:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80199c0:	88fb      	ldrh	r3, [r7, #6]
 80199c2:	b2db      	uxtb	r3, r3
 80199c4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80199c6:	f000 fb6f 	bl	801a0a8 <SUBGRF_GetPacketType>
 80199ca:	4603      	mov	r3, r0
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d108      	bne.n	80199e2 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80199d0:	f107 030c 	add.w	r3, r7, #12
 80199d4:	2202      	movs	r2, #2
 80199d6:	4619      	mov	r1, r3
 80199d8:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 80199dc:	f000 fe7e 	bl	801a6dc <SUBGRF_WriteRegisters>
            break;
 80199e0:	e000      	b.n	80199e4 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80199e2:	bf00      	nop
    }
}
 80199e4:	bf00      	nop
 80199e6:	3710      	adds	r7, #16
 80199e8:	46bd      	mov	sp, r7
 80199ea:	bd80      	pop	{r7, pc}

080199ec <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80199ec:	b580      	push	{r7, lr}
 80199ee:	b084      	sub	sp, #16
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	4603      	mov	r3, r0
 80199f4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80199f6:	88fb      	ldrh	r3, [r7, #6]
 80199f8:	0a1b      	lsrs	r3, r3, #8
 80199fa:	b29b      	uxth	r3, r3
 80199fc:	b2db      	uxtb	r3, r3
 80199fe:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8019a00:	88fb      	ldrh	r3, [r7, #6]
 8019a02:	b2db      	uxtb	r3, r3
 8019a04:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019a06:	f000 fb4f 	bl	801a0a8 <SUBGRF_GetPacketType>
 8019a0a:	4603      	mov	r3, r0
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d108      	bne.n	8019a22 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8019a10:	f107 030c 	add.w	r3, r7, #12
 8019a14:	2202      	movs	r2, #2
 8019a16:	4619      	mov	r1, r3
 8019a18:	f240 60be 	movw	r0, #1726	@ 0x6be
 8019a1c:	f000 fe5e 	bl	801a6dc <SUBGRF_WriteRegisters>
            break;
 8019a20:	e000      	b.n	8019a24 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8019a22:	bf00      	nop
    }
}
 8019a24:	bf00      	nop
 8019a26:	3710      	adds	r7, #16
 8019a28:	46bd      	mov	sp, r7
 8019a2a:	bd80      	pop	{r7, pc}

08019a2c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8019a2c:	b580      	push	{r7, lr}
 8019a2e:	b084      	sub	sp, #16
 8019a30:	af00      	add	r7, sp, #0
 8019a32:	4603      	mov	r3, r0
 8019a34:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8019a36:	2300      	movs	r3, #0
 8019a38:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8019a3a:	f000 fb35 	bl	801a0a8 <SUBGRF_GetPacketType>
 8019a3e:	4603      	mov	r3, r0
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d121      	bne.n	8019a88 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8019a44:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019a48:	f000 fe34 	bl	801a6b4 <SUBGRF_ReadRegister>
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	f023 0301 	bic.w	r3, r3, #1
 8019a52:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8019a54:	88fb      	ldrh	r3, [r7, #6]
 8019a56:	0a1b      	lsrs	r3, r3, #8
 8019a58:	b29b      	uxth	r3, r3
 8019a5a:	b25b      	sxtb	r3, r3
 8019a5c:	f003 0301 	and.w	r3, r3, #1
 8019a60:	b25a      	sxtb	r2, r3
 8019a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019a66:	4313      	orrs	r3, r2
 8019a68:	b25b      	sxtb	r3, r3
 8019a6a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8019a6c:	7bfb      	ldrb	r3, [r7, #15]
 8019a6e:	4619      	mov	r1, r3
 8019a70:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019a74:	f000 fe0a 	bl	801a68c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8019a78:	88fb      	ldrh	r3, [r7, #6]
 8019a7a:	b2db      	uxtb	r3, r3
 8019a7c:	4619      	mov	r1, r3
 8019a7e:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8019a82:	f000 fe03 	bl	801a68c <SUBGRF_WriteRegister>
            break;
 8019a86:	e000      	b.n	8019a8a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8019a88:	bf00      	nop
    }
}
 8019a8a:	bf00      	nop
 8019a8c:	3710      	adds	r7, #16
 8019a8e:	46bd      	mov	sp, r7
 8019a90:	bd80      	pop	{r7, pc}

08019a92 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8019a92:	b580      	push	{r7, lr}
 8019a94:	b082      	sub	sp, #8
 8019a96:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8019a98:	2300      	movs	r3, #0
 8019a9a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8019aa0:	2300      	movs	r3, #0
 8019aa2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8019aa4:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019aa8:	f000 fe04 	bl	801a6b4 <SUBGRF_ReadRegister>
 8019aac:	4603      	mov	r3, r0
 8019aae:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8019ab0:	79fb      	ldrb	r3, [r7, #7]
 8019ab2:	f023 0301 	bic.w	r3, r3, #1
 8019ab6:	b2db      	uxtb	r3, r3
 8019ab8:	4619      	mov	r1, r3
 8019aba:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019abe:	f000 fde5 	bl	801a68c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8019ac2:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019ac6:	f000 fdf5 	bl	801a6b4 <SUBGRF_ReadRegister>
 8019aca:	4603      	mov	r3, r0
 8019acc:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8019ace:	79bb      	ldrb	r3, [r7, #6]
 8019ad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019ad4:	b2db      	uxtb	r3, r3
 8019ad6:	4619      	mov	r1, r3
 8019ad8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019adc:	f000 fdd6 	bl	801a68c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019ae0:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019ae4:	f000 f88a 	bl	8019bfc <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8019ae8:	463b      	mov	r3, r7
 8019aea:	2204      	movs	r2, #4
 8019aec:	4619      	mov	r1, r3
 8019aee:	f640 0019 	movw	r0, #2073	@ 0x819
 8019af2:	f000 fe15 	bl	801a720 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8019af6:	2000      	movs	r0, #0
 8019af8:	f000 f844 	bl	8019b84 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8019afc:	79fb      	ldrb	r3, [r7, #7]
 8019afe:	4619      	mov	r1, r3
 8019b00:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019b04:	f000 fdc2 	bl	801a68c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8019b08:	79bb      	ldrb	r3, [r7, #6]
 8019b0a:	4619      	mov	r1, r3
 8019b0c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019b10:	f000 fdbc 	bl	801a68c <SUBGRF_WriteRegister>

    return number;
 8019b14:	683b      	ldr	r3, [r7, #0]
}
 8019b16:	4618      	mov	r0, r3
 8019b18:	3708      	adds	r7, #8
 8019b1a:	46bd      	mov	sp, r7
 8019b1c:	bd80      	pop	{r7, pc}
	...

08019b20 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8019b20:	b580      	push	{r7, lr}
 8019b22:	b084      	sub	sp, #16
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8019b28:	2000      	movs	r0, #0
 8019b2a:	f7f0 fa12 	bl	8009f52 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019b2e:	2002      	movs	r0, #2
 8019b30:	f000 ffa4 	bl	801aa7c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019b34:	793b      	ldrb	r3, [r7, #4]
 8019b36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019b3a:	b2db      	uxtb	r3, r3
 8019b3c:	009b      	lsls	r3, r3, #2
 8019b3e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019b40:	793b      	ldrb	r3, [r7, #4]
 8019b42:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019b46:	b2db      	uxtb	r3, r3
 8019b48:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019b4a:	b25b      	sxtb	r3, r3
 8019b4c:	4313      	orrs	r3, r2
 8019b4e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8019b50:	793b      	ldrb	r3, [r7, #4]
 8019b52:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019b56:	b2db      	uxtb	r3, r3
 8019b58:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019b5a:	4313      	orrs	r3, r2
 8019b5c:	b25b      	sxtb	r3, r3
 8019b5e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019b60:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8019b62:	f107 030f 	add.w	r3, r7, #15
 8019b66:	2201      	movs	r2, #1
 8019b68:	4619      	mov	r1, r3
 8019b6a:	2084      	movs	r0, #132	@ 0x84
 8019b6c:	f000 fe3e 	bl	801a7ec <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8019b70:	4b03      	ldr	r3, [pc, #12]	@ (8019b80 <SUBGRF_SetSleep+0x60>)
 8019b72:	2200      	movs	r2, #0
 8019b74:	701a      	strb	r2, [r3, #0]
}
 8019b76:	bf00      	nop
 8019b78:	3710      	adds	r7, #16
 8019b7a:	46bd      	mov	sp, r7
 8019b7c:	bd80      	pop	{r7, pc}
 8019b7e:	bf00      	nop
 8019b80:	20001528 	.word	0x20001528

08019b84 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	b082      	sub	sp, #8
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	4603      	mov	r3, r0
 8019b8c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8019b8e:	1dfb      	adds	r3, r7, #7
 8019b90:	2201      	movs	r2, #1
 8019b92:	4619      	mov	r1, r3
 8019b94:	2080      	movs	r0, #128	@ 0x80
 8019b96:	f000 fe29 	bl	801a7ec <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8019b9a:	79fb      	ldrb	r3, [r7, #7]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d103      	bne.n	8019ba8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8019ba0:	4b05      	ldr	r3, [pc, #20]	@ (8019bb8 <SUBGRF_SetStandby+0x34>)
 8019ba2:	2201      	movs	r2, #1
 8019ba4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8019ba6:	e002      	b.n	8019bae <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8019ba8:	4b03      	ldr	r3, [pc, #12]	@ (8019bb8 <SUBGRF_SetStandby+0x34>)
 8019baa:	2202      	movs	r2, #2
 8019bac:	701a      	strb	r2, [r3, #0]
}
 8019bae:	bf00      	nop
 8019bb0:	3708      	adds	r7, #8
 8019bb2:	46bd      	mov	sp, r7
 8019bb4:	bd80      	pop	{r7, pc}
 8019bb6:	bf00      	nop
 8019bb8:	20001528 	.word	0x20001528

08019bbc <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8019bbc:	b580      	push	{r7, lr}
 8019bbe:	b084      	sub	sp, #16
 8019bc0:	af00      	add	r7, sp, #0
 8019bc2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8019bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8019bf8 <SUBGRF_SetTx+0x3c>)
 8019bc6:	2204      	movs	r2, #4
 8019bc8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	0c1b      	lsrs	r3, r3, #16
 8019bce:	b2db      	uxtb	r3, r3
 8019bd0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	0a1b      	lsrs	r3, r3, #8
 8019bd6:	b2db      	uxtb	r3, r3
 8019bd8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	b2db      	uxtb	r3, r3
 8019bde:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8019be0:	f107 030c 	add.w	r3, r7, #12
 8019be4:	2203      	movs	r2, #3
 8019be6:	4619      	mov	r1, r3
 8019be8:	2083      	movs	r0, #131	@ 0x83
 8019bea:	f000 fdff 	bl	801a7ec <SUBGRF_WriteCommand>
}
 8019bee:	bf00      	nop
 8019bf0:	3710      	adds	r7, #16
 8019bf2:	46bd      	mov	sp, r7
 8019bf4:	bd80      	pop	{r7, pc}
 8019bf6:	bf00      	nop
 8019bf8:	20001528 	.word	0x20001528

08019bfc <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8019bfc:	b580      	push	{r7, lr}
 8019bfe:	b084      	sub	sp, #16
 8019c00:	af00      	add	r7, sp, #0
 8019c02:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019c04:	4b0c      	ldr	r3, [pc, #48]	@ (8019c38 <SUBGRF_SetRx+0x3c>)
 8019c06:	2205      	movs	r2, #5
 8019c08:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	0c1b      	lsrs	r3, r3, #16
 8019c0e:	b2db      	uxtb	r3, r3
 8019c10:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	0a1b      	lsrs	r3, r3, #8
 8019c16:	b2db      	uxtb	r3, r3
 8019c18:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	b2db      	uxtb	r3, r3
 8019c1e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019c20:	f107 030c 	add.w	r3, r7, #12
 8019c24:	2203      	movs	r2, #3
 8019c26:	4619      	mov	r1, r3
 8019c28:	2082      	movs	r0, #130	@ 0x82
 8019c2a:	f000 fddf 	bl	801a7ec <SUBGRF_WriteCommand>
}
 8019c2e:	bf00      	nop
 8019c30:	3710      	adds	r7, #16
 8019c32:	46bd      	mov	sp, r7
 8019c34:	bd80      	pop	{r7, pc}
 8019c36:	bf00      	nop
 8019c38:	20001528 	.word	0x20001528

08019c3c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8019c3c:	b580      	push	{r7, lr}
 8019c3e:	b084      	sub	sp, #16
 8019c40:	af00      	add	r7, sp, #0
 8019c42:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019c44:	4b0e      	ldr	r3, [pc, #56]	@ (8019c80 <SUBGRF_SetRxBoosted+0x44>)
 8019c46:	2205      	movs	r2, #5
 8019c48:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8019c4a:	2197      	movs	r1, #151	@ 0x97
 8019c4c:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8019c50:	f000 fd1c 	bl	801a68c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	0c1b      	lsrs	r3, r3, #16
 8019c58:	b2db      	uxtb	r3, r3
 8019c5a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	0a1b      	lsrs	r3, r3, #8
 8019c60:	b2db      	uxtb	r3, r3
 8019c62:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	b2db      	uxtb	r3, r3
 8019c68:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019c6a:	f107 030c 	add.w	r3, r7, #12
 8019c6e:	2203      	movs	r2, #3
 8019c70:	4619      	mov	r1, r3
 8019c72:	2082      	movs	r0, #130	@ 0x82
 8019c74:	f000 fdba 	bl	801a7ec <SUBGRF_WriteCommand>
}
 8019c78:	bf00      	nop
 8019c7a:	3710      	adds	r7, #16
 8019c7c:	46bd      	mov	sp, r7
 8019c7e:	bd80      	pop	{r7, pc}
 8019c80:	20001528 	.word	0x20001528

08019c84 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019c84:	b580      	push	{r7, lr}
 8019c86:	b084      	sub	sp, #16
 8019c88:	af00      	add	r7, sp, #0
 8019c8a:	6078      	str	r0, [r7, #4]
 8019c8c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	0c1b      	lsrs	r3, r3, #16
 8019c92:	b2db      	uxtb	r3, r3
 8019c94:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	0a1b      	lsrs	r3, r3, #8
 8019c9a:	b2db      	uxtb	r3, r3
 8019c9c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	b2db      	uxtb	r3, r3
 8019ca2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8019ca4:	683b      	ldr	r3, [r7, #0]
 8019ca6:	0c1b      	lsrs	r3, r3, #16
 8019ca8:	b2db      	uxtb	r3, r3
 8019caa:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8019cac:	683b      	ldr	r3, [r7, #0]
 8019cae:	0a1b      	lsrs	r3, r3, #8
 8019cb0:	b2db      	uxtb	r3, r3
 8019cb2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8019cb4:	683b      	ldr	r3, [r7, #0]
 8019cb6:	b2db      	uxtb	r3, r3
 8019cb8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8019cba:	f107 0308 	add.w	r3, r7, #8
 8019cbe:	2206      	movs	r2, #6
 8019cc0:	4619      	mov	r1, r3
 8019cc2:	2094      	movs	r0, #148	@ 0x94
 8019cc4:	f000 fd92 	bl	801a7ec <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8019cc8:	4b03      	ldr	r3, [pc, #12]	@ (8019cd8 <SUBGRF_SetRxDutyCycle+0x54>)
 8019cca:	2206      	movs	r2, #6
 8019ccc:	701a      	strb	r2, [r3, #0]
}
 8019cce:	bf00      	nop
 8019cd0:	3710      	adds	r7, #16
 8019cd2:	46bd      	mov	sp, r7
 8019cd4:	bd80      	pop	{r7, pc}
 8019cd6:	bf00      	nop
 8019cd8:	20001528 	.word	0x20001528

08019cdc <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8019cdc:	b580      	push	{r7, lr}
 8019cde:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8019ce0:	2200      	movs	r2, #0
 8019ce2:	2100      	movs	r1, #0
 8019ce4:	20c5      	movs	r0, #197	@ 0xc5
 8019ce6:	f000 fd81 	bl	801a7ec <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8019cea:	4b02      	ldr	r3, [pc, #8]	@ (8019cf4 <SUBGRF_SetCad+0x18>)
 8019cec:	2207      	movs	r2, #7
 8019cee:	701a      	strb	r2, [r3, #0]
}
 8019cf0:	bf00      	nop
 8019cf2:	bd80      	pop	{r7, pc}
 8019cf4:	20001528 	.word	0x20001528

08019cf8 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8019cfc:	2200      	movs	r2, #0
 8019cfe:	2100      	movs	r1, #0
 8019d00:	20d1      	movs	r0, #209	@ 0xd1
 8019d02:	f000 fd73 	bl	801a7ec <SUBGRF_WriteCommand>
}
 8019d06:	bf00      	nop
 8019d08:	bd80      	pop	{r7, pc}

08019d0a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8019d0a:	b580      	push	{r7, lr}
 8019d0c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8019d0e:	2200      	movs	r2, #0
 8019d10:	2100      	movs	r1, #0
 8019d12:	20d2      	movs	r0, #210	@ 0xd2
 8019d14:	f000 fd6a 	bl	801a7ec <SUBGRF_WriteCommand>
}
 8019d18:	bf00      	nop
 8019d1a:	bd80      	pop	{r7, pc}

08019d1c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	b082      	sub	sp, #8
 8019d20:	af00      	add	r7, sp, #0
 8019d22:	4603      	mov	r3, r0
 8019d24:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8019d26:	1dfb      	adds	r3, r7, #7
 8019d28:	2201      	movs	r2, #1
 8019d2a:	4619      	mov	r1, r3
 8019d2c:	209f      	movs	r0, #159	@ 0x9f
 8019d2e:	f000 fd5d 	bl	801a7ec <SUBGRF_WriteCommand>
}
 8019d32:	bf00      	nop
 8019d34:	3708      	adds	r7, #8
 8019d36:	46bd      	mov	sp, r7
 8019d38:	bd80      	pop	{r7, pc}

08019d3a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8019d3a:	b580      	push	{r7, lr}
 8019d3c:	b084      	sub	sp, #16
 8019d3e:	af00      	add	r7, sp, #0
 8019d40:	4603      	mov	r3, r0
 8019d42:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8019d44:	1dfb      	adds	r3, r7, #7
 8019d46:	2201      	movs	r2, #1
 8019d48:	4619      	mov	r1, r3
 8019d4a:	20a0      	movs	r0, #160	@ 0xa0
 8019d4c:	f000 fd4e 	bl	801a7ec <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8019d50:	79fb      	ldrb	r3, [r7, #7]
 8019d52:	2b3f      	cmp	r3, #63	@ 0x3f
 8019d54:	d91c      	bls.n	8019d90 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8019d56:	79fb      	ldrb	r3, [r7, #7]
 8019d58:	085b      	lsrs	r3, r3, #1
 8019d5a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8019d5c:	2300      	movs	r3, #0
 8019d5e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8019d60:	2300      	movs	r3, #0
 8019d62:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8019d64:	e005      	b.n	8019d72 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8019d66:	7bfb      	ldrb	r3, [r7, #15]
 8019d68:	089b      	lsrs	r3, r3, #2
 8019d6a:	73fb      	strb	r3, [r7, #15]
            exp++;
 8019d6c:	7bbb      	ldrb	r3, [r7, #14]
 8019d6e:	3301      	adds	r3, #1
 8019d70:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8019d72:	7bfb      	ldrb	r3, [r7, #15]
 8019d74:	2b1f      	cmp	r3, #31
 8019d76:	d8f6      	bhi.n	8019d66 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8019d78:	7bfb      	ldrb	r3, [r7, #15]
 8019d7a:	00db      	lsls	r3, r3, #3
 8019d7c:	b2da      	uxtb	r2, r3
 8019d7e:	7bbb      	ldrb	r3, [r7, #14]
 8019d80:	4413      	add	r3, r2
 8019d82:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8019d84:	7b7b      	ldrb	r3, [r7, #13]
 8019d86:	4619      	mov	r1, r3
 8019d88:	f240 7006 	movw	r0, #1798	@ 0x706
 8019d8c:	f000 fc7e 	bl	801a68c <SUBGRF_WriteRegister>
    }
}
 8019d90:	bf00      	nop
 8019d92:	3710      	adds	r7, #16
 8019d94:	46bd      	mov	sp, r7
 8019d96:	bd80      	pop	{r7, pc}

08019d98 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	b082      	sub	sp, #8
 8019d9c:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8019d9e:	f7f0 f8fb 	bl	8009f98 <RBI_IsDCDC>
 8019da2:	4603      	mov	r3, r0
 8019da4:	2b01      	cmp	r3, #1
 8019da6:	d102      	bne.n	8019dae <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8019da8:	2301      	movs	r3, #1
 8019daa:	71fb      	strb	r3, [r7, #7]
 8019dac:	e001      	b.n	8019db2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8019dae:	2300      	movs	r3, #0
 8019db0:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8019db2:	1dfb      	adds	r3, r7, #7
 8019db4:	2201      	movs	r2, #1
 8019db6:	4619      	mov	r1, r3
 8019db8:	2096      	movs	r0, #150	@ 0x96
 8019dba:	f000 fd17 	bl	801a7ec <SUBGRF_WriteCommand>
}
 8019dbe:	bf00      	nop
 8019dc0:	3708      	adds	r7, #8
 8019dc2:	46bd      	mov	sp, r7
 8019dc4:	bd80      	pop	{r7, pc}

08019dc6 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8019dc6:	b580      	push	{r7, lr}
 8019dc8:	b084      	sub	sp, #16
 8019dca:	af00      	add	r7, sp, #0
 8019dcc:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019dce:	793b      	ldrb	r3, [r7, #4]
 8019dd0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8019dd4:	b2db      	uxtb	r3, r3
 8019dd6:	019b      	lsls	r3, r3, #6
 8019dd8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019dda:	793b      	ldrb	r3, [r7, #4]
 8019ddc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8019de0:	b2db      	uxtb	r3, r3
 8019de2:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019de4:	b25b      	sxtb	r3, r3
 8019de6:	4313      	orrs	r3, r2
 8019de8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019dea:	793b      	ldrb	r3, [r7, #4]
 8019dec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8019df0:	b2db      	uxtb	r3, r3
 8019df2:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019df4:	b25b      	sxtb	r3, r3
 8019df6:	4313      	orrs	r3, r2
 8019df8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019dfa:	793b      	ldrb	r3, [r7, #4]
 8019dfc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019e00:	b2db      	uxtb	r3, r3
 8019e02:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019e04:	b25b      	sxtb	r3, r3
 8019e06:	4313      	orrs	r3, r2
 8019e08:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019e0a:	793b      	ldrb	r3, [r7, #4]
 8019e0c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019e10:	b2db      	uxtb	r3, r3
 8019e12:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019e14:	b25b      	sxtb	r3, r3
 8019e16:	4313      	orrs	r3, r2
 8019e18:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019e1a:	793b      	ldrb	r3, [r7, #4]
 8019e1c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019e20:	b2db      	uxtb	r3, r3
 8019e22:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019e24:	b25b      	sxtb	r3, r3
 8019e26:	4313      	orrs	r3, r2
 8019e28:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8019e2a:	793b      	ldrb	r3, [r7, #4]
 8019e2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019e30:	b2db      	uxtb	r3, r3
 8019e32:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019e34:	4313      	orrs	r3, r2
 8019e36:	b25b      	sxtb	r3, r3
 8019e38:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019e3a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8019e3c:	f107 030f 	add.w	r3, r7, #15
 8019e40:	2201      	movs	r2, #1
 8019e42:	4619      	mov	r1, r3
 8019e44:	2089      	movs	r0, #137	@ 0x89
 8019e46:	f000 fcd1 	bl	801a7ec <SUBGRF_WriteCommand>
}
 8019e4a:	bf00      	nop
 8019e4c:	3710      	adds	r7, #16
 8019e4e:	46bd      	mov	sp, r7
 8019e50:	bd80      	pop	{r7, pc}
	...

08019e54 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8019e54:	b580      	push	{r7, lr}
 8019e56:	b084      	sub	sp, #16
 8019e58:	af00      	add	r7, sp, #0
 8019e5a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8019ed4 <SUBGRF_CalibrateImage+0x80>)
 8019e60:	4293      	cmp	r3, r2
 8019e62:	d904      	bls.n	8019e6e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8019e64:	23e1      	movs	r3, #225	@ 0xe1
 8019e66:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8019e68:	23e9      	movs	r3, #233	@ 0xe9
 8019e6a:	737b      	strb	r3, [r7, #13]
 8019e6c:	e027      	b.n	8019ebe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	4a19      	ldr	r2, [pc, #100]	@ (8019ed8 <SUBGRF_CalibrateImage+0x84>)
 8019e72:	4293      	cmp	r3, r2
 8019e74:	d904      	bls.n	8019e80 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8019e76:	23d7      	movs	r3, #215	@ 0xd7
 8019e78:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8019e7a:	23db      	movs	r3, #219	@ 0xdb
 8019e7c:	737b      	strb	r3, [r7, #13]
 8019e7e:	e01e      	b.n	8019ebe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	4a16      	ldr	r2, [pc, #88]	@ (8019edc <SUBGRF_CalibrateImage+0x88>)
 8019e84:	4293      	cmp	r3, r2
 8019e86:	d904      	bls.n	8019e92 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8019e88:	23c1      	movs	r3, #193	@ 0xc1
 8019e8a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8019e8c:	23c5      	movs	r3, #197	@ 0xc5
 8019e8e:	737b      	strb	r3, [r7, #13]
 8019e90:	e015      	b.n	8019ebe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	4a12      	ldr	r2, [pc, #72]	@ (8019ee0 <SUBGRF_CalibrateImage+0x8c>)
 8019e96:	4293      	cmp	r3, r2
 8019e98:	d904      	bls.n	8019ea4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8019e9a:	2375      	movs	r3, #117	@ 0x75
 8019e9c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8019e9e:	2381      	movs	r3, #129	@ 0x81
 8019ea0:	737b      	strb	r3, [r7, #13]
 8019ea2:	e00c      	b.n	8019ebe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8019ee4 <SUBGRF_CalibrateImage+0x90>)
 8019ea8:	4293      	cmp	r3, r2
 8019eaa:	d904      	bls.n	8019eb6 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8019eac:	236b      	movs	r3, #107	@ 0x6b
 8019eae:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8019eb0:	236f      	movs	r3, #111	@ 0x6f
 8019eb2:	737b      	strb	r3, [r7, #13]
 8019eb4:	e003      	b.n	8019ebe <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8019eb6:	2329      	movs	r3, #41	@ 0x29
 8019eb8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8019eba:	232b      	movs	r3, #43	@ 0x2b
 8019ebc:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8019ebe:	f107 030c 	add.w	r3, r7, #12
 8019ec2:	2202      	movs	r2, #2
 8019ec4:	4619      	mov	r1, r3
 8019ec6:	2098      	movs	r0, #152	@ 0x98
 8019ec8:	f000 fc90 	bl	801a7ec <SUBGRF_WriteCommand>
}
 8019ecc:	bf00      	nop
 8019ece:	3710      	adds	r7, #16
 8019ed0:	46bd      	mov	sp, r7
 8019ed2:	bd80      	pop	{r7, pc}
 8019ed4:	35a4e900 	.word	0x35a4e900
 8019ed8:	32a9f880 	.word	0x32a9f880
 8019edc:	2de54480 	.word	0x2de54480
 8019ee0:	1b6b0b00 	.word	0x1b6b0b00
 8019ee4:	1954fc40 	.word	0x1954fc40

08019ee8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8019ee8:	b590      	push	{r4, r7, lr}
 8019eea:	b085      	sub	sp, #20
 8019eec:	af00      	add	r7, sp, #0
 8019eee:	4604      	mov	r4, r0
 8019ef0:	4608      	mov	r0, r1
 8019ef2:	4611      	mov	r1, r2
 8019ef4:	461a      	mov	r2, r3
 8019ef6:	4623      	mov	r3, r4
 8019ef8:	71fb      	strb	r3, [r7, #7]
 8019efa:	4603      	mov	r3, r0
 8019efc:	71bb      	strb	r3, [r7, #6]
 8019efe:	460b      	mov	r3, r1
 8019f00:	717b      	strb	r3, [r7, #5]
 8019f02:	4613      	mov	r3, r2
 8019f04:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8019f06:	79fb      	ldrb	r3, [r7, #7]
 8019f08:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8019f0a:	79bb      	ldrb	r3, [r7, #6]
 8019f0c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8019f0e:	797b      	ldrb	r3, [r7, #5]
 8019f10:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8019f12:	793b      	ldrb	r3, [r7, #4]
 8019f14:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8019f16:	f107 030c 	add.w	r3, r7, #12
 8019f1a:	2204      	movs	r2, #4
 8019f1c:	4619      	mov	r1, r3
 8019f1e:	2095      	movs	r0, #149	@ 0x95
 8019f20:	f000 fc64 	bl	801a7ec <SUBGRF_WriteCommand>
}
 8019f24:	bf00      	nop
 8019f26:	3714      	adds	r7, #20
 8019f28:	46bd      	mov	sp, r7
 8019f2a:	bd90      	pop	{r4, r7, pc}

08019f2c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8019f2c:	b590      	push	{r4, r7, lr}
 8019f2e:	b085      	sub	sp, #20
 8019f30:	af00      	add	r7, sp, #0
 8019f32:	4604      	mov	r4, r0
 8019f34:	4608      	mov	r0, r1
 8019f36:	4611      	mov	r1, r2
 8019f38:	461a      	mov	r2, r3
 8019f3a:	4623      	mov	r3, r4
 8019f3c:	80fb      	strh	r3, [r7, #6]
 8019f3e:	4603      	mov	r3, r0
 8019f40:	80bb      	strh	r3, [r7, #4]
 8019f42:	460b      	mov	r3, r1
 8019f44:	807b      	strh	r3, [r7, #2]
 8019f46:	4613      	mov	r3, r2
 8019f48:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8019f4a:	88fb      	ldrh	r3, [r7, #6]
 8019f4c:	0a1b      	lsrs	r3, r3, #8
 8019f4e:	b29b      	uxth	r3, r3
 8019f50:	b2db      	uxtb	r3, r3
 8019f52:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8019f54:	88fb      	ldrh	r3, [r7, #6]
 8019f56:	b2db      	uxtb	r3, r3
 8019f58:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8019f5a:	88bb      	ldrh	r3, [r7, #4]
 8019f5c:	0a1b      	lsrs	r3, r3, #8
 8019f5e:	b29b      	uxth	r3, r3
 8019f60:	b2db      	uxtb	r3, r3
 8019f62:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8019f64:	88bb      	ldrh	r3, [r7, #4]
 8019f66:	b2db      	uxtb	r3, r3
 8019f68:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8019f6a:	887b      	ldrh	r3, [r7, #2]
 8019f6c:	0a1b      	lsrs	r3, r3, #8
 8019f6e:	b29b      	uxth	r3, r3
 8019f70:	b2db      	uxtb	r3, r3
 8019f72:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8019f74:	887b      	ldrh	r3, [r7, #2]
 8019f76:	b2db      	uxtb	r3, r3
 8019f78:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8019f7a:	883b      	ldrh	r3, [r7, #0]
 8019f7c:	0a1b      	lsrs	r3, r3, #8
 8019f7e:	b29b      	uxth	r3, r3
 8019f80:	b2db      	uxtb	r3, r3
 8019f82:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8019f84:	883b      	ldrh	r3, [r7, #0]
 8019f86:	b2db      	uxtb	r3, r3
 8019f88:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8019f8a:	f107 0308 	add.w	r3, r7, #8
 8019f8e:	2208      	movs	r2, #8
 8019f90:	4619      	mov	r1, r3
 8019f92:	2008      	movs	r0, #8
 8019f94:	f000 fc2a 	bl	801a7ec <SUBGRF_WriteCommand>
}
 8019f98:	bf00      	nop
 8019f9a:	3714      	adds	r7, #20
 8019f9c:	46bd      	mov	sp, r7
 8019f9e:	bd90      	pop	{r4, r7, pc}

08019fa0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8019fa0:	b580      	push	{r7, lr}
 8019fa2:	b084      	sub	sp, #16
 8019fa4:	af00      	add	r7, sp, #0
 8019fa6:	4603      	mov	r3, r0
 8019fa8:	6039      	str	r1, [r7, #0]
 8019faa:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8019fac:	79fb      	ldrb	r3, [r7, #7]
 8019fae:	f003 0307 	and.w	r3, r3, #7
 8019fb2:	b2db      	uxtb	r3, r3
 8019fb4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019fb6:	683b      	ldr	r3, [r7, #0]
 8019fb8:	0c1b      	lsrs	r3, r3, #16
 8019fba:	b2db      	uxtb	r3, r3
 8019fbc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019fbe:	683b      	ldr	r3, [r7, #0]
 8019fc0:	0a1b      	lsrs	r3, r3, #8
 8019fc2:	b2db      	uxtb	r3, r3
 8019fc4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8019fc6:	683b      	ldr	r3, [r7, #0]
 8019fc8:	b2db      	uxtb	r3, r3
 8019fca:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8019fcc:	f107 030c 	add.w	r3, r7, #12
 8019fd0:	2204      	movs	r2, #4
 8019fd2:	4619      	mov	r1, r3
 8019fd4:	2097      	movs	r0, #151	@ 0x97
 8019fd6:	f000 fc09 	bl	801a7ec <SUBGRF_WriteCommand>
}
 8019fda:	bf00      	nop
 8019fdc:	3710      	adds	r7, #16
 8019fde:	46bd      	mov	sp, r7
 8019fe0:	bd80      	pop	{r7, pc}
	...

08019fe4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8019fe4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019fe8:	b084      	sub	sp, #16
 8019fea:	af00      	add	r7, sp, #0
 8019fec:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8019fee:	2300      	movs	r3, #0
 8019ff0:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8019ff2:	4b1d      	ldr	r3, [pc, #116]	@ (801a068 <SUBGRF_SetRfFrequency+0x84>)
 8019ff4:	781b      	ldrb	r3, [r3, #0]
 8019ff6:	f083 0301 	eor.w	r3, r3, #1
 8019ffa:	b2db      	uxtb	r3, r3
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d005      	beq.n	801a00c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801a000:	6878      	ldr	r0, [r7, #4]
 801a002:	f7ff ff27 	bl	8019e54 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801a006:	4b18      	ldr	r3, [pc, #96]	@ (801a068 <SUBGRF_SetRfFrequency+0x84>)
 801a008:	2201      	movs	r2, #1
 801a00a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	2200      	movs	r2, #0
 801a010:	461c      	mov	r4, r3
 801a012:	4615      	mov	r5, r2
 801a014:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a018:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a01c:	4a13      	ldr	r2, [pc, #76]	@ (801a06c <SUBGRF_SetRfFrequency+0x88>)
 801a01e:	f04f 0300 	mov.w	r3, #0
 801a022:	4640      	mov	r0, r8
 801a024:	4649      	mov	r1, r9
 801a026:	f7e7 f855 	bl	80010d4 <__aeabi_uldivmod>
 801a02a:	4602      	mov	r2, r0
 801a02c:	460b      	mov	r3, r1
 801a02e:	4613      	mov	r3, r2
 801a030:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801a032:	68fb      	ldr	r3, [r7, #12]
 801a034:	0e1b      	lsrs	r3, r3, #24
 801a036:	b2db      	uxtb	r3, r3
 801a038:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	0c1b      	lsrs	r3, r3, #16
 801a03e:	b2db      	uxtb	r3, r3
 801a040:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	0a1b      	lsrs	r3, r3, #8
 801a046:	b2db      	uxtb	r3, r3
 801a048:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801a04a:	68fb      	ldr	r3, [r7, #12]
 801a04c:	b2db      	uxtb	r3, r3
 801a04e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801a050:	f107 0308 	add.w	r3, r7, #8
 801a054:	2204      	movs	r2, #4
 801a056:	4619      	mov	r1, r3
 801a058:	2086      	movs	r0, #134	@ 0x86
 801a05a:	f000 fbc7 	bl	801a7ec <SUBGRF_WriteCommand>
}
 801a05e:	bf00      	nop
 801a060:	3710      	adds	r7, #16
 801a062:	46bd      	mov	sp, r7
 801a064:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a068:	20001530 	.word	0x20001530
 801a06c:	01e84800 	.word	0x01e84800

0801a070 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801a070:	b580      	push	{r7, lr}
 801a072:	b082      	sub	sp, #8
 801a074:	af00      	add	r7, sp, #0
 801a076:	4603      	mov	r3, r0
 801a078:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801a07a:	79fa      	ldrb	r2, [r7, #7]
 801a07c:	4b09      	ldr	r3, [pc, #36]	@ (801a0a4 <SUBGRF_SetPacketType+0x34>)
 801a07e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801a080:	79fb      	ldrb	r3, [r7, #7]
 801a082:	2b00      	cmp	r3, #0
 801a084:	d104      	bne.n	801a090 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801a086:	2100      	movs	r1, #0
 801a088:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801a08c:	f000 fafe 	bl	801a68c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801a090:	1dfb      	adds	r3, r7, #7
 801a092:	2201      	movs	r2, #1
 801a094:	4619      	mov	r1, r3
 801a096:	208a      	movs	r0, #138	@ 0x8a
 801a098:	f000 fba8 	bl	801a7ec <SUBGRF_WriteCommand>
}
 801a09c:	bf00      	nop
 801a09e:	3708      	adds	r7, #8
 801a0a0:	46bd      	mov	sp, r7
 801a0a2:	bd80      	pop	{r7, pc}
 801a0a4:	20001529 	.word	0x20001529

0801a0a8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801a0a8:	b480      	push	{r7}
 801a0aa:	af00      	add	r7, sp, #0
    return PacketType;
 801a0ac:	4b02      	ldr	r3, [pc, #8]	@ (801a0b8 <SUBGRF_GetPacketType+0x10>)
 801a0ae:	781b      	ldrb	r3, [r3, #0]
}
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	46bd      	mov	sp, r7
 801a0b4:	bc80      	pop	{r7}
 801a0b6:	4770      	bx	lr
 801a0b8:	20001529 	.word	0x20001529

0801a0bc <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801a0bc:	b580      	push	{r7, lr}
 801a0be:	b084      	sub	sp, #16
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	4603      	mov	r3, r0
 801a0c4:	71fb      	strb	r3, [r7, #7]
 801a0c6:	460b      	mov	r3, r1
 801a0c8:	71bb      	strb	r3, [r7, #6]
 801a0ca:	4613      	mov	r3, r2
 801a0cc:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801a0ce:	79fb      	ldrb	r3, [r7, #7]
 801a0d0:	2b01      	cmp	r3, #1
 801a0d2:	d149      	bne.n	801a168 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801a0d4:	2000      	movs	r0, #0
 801a0d6:	f7ef ff6a 	bl	8009fae <RBI_GetRFOMaxPowerConfig>
 801a0da:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801a0dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a0e0:	68fa      	ldr	r2, [r7, #12]
 801a0e2:	429a      	cmp	r2, r3
 801a0e4:	da01      	bge.n	801a0ea <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801a0e6:	68fb      	ldr	r3, [r7, #12]
 801a0e8:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801a0ea:	68fb      	ldr	r3, [r7, #12]
 801a0ec:	2b0e      	cmp	r3, #14
 801a0ee:	d10e      	bne.n	801a10e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801a0f0:	2301      	movs	r3, #1
 801a0f2:	2201      	movs	r2, #1
 801a0f4:	2100      	movs	r1, #0
 801a0f6:	2004      	movs	r0, #4
 801a0f8:	f7ff fef6 	bl	8019ee8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a0fc:	79ba      	ldrb	r2, [r7, #6]
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	b2db      	uxtb	r3, r3
 801a102:	1ad3      	subs	r3, r2, r3
 801a104:	b2db      	uxtb	r3, r3
 801a106:	330e      	adds	r3, #14
 801a108:	b2db      	uxtb	r3, r3
 801a10a:	71bb      	strb	r3, [r7, #6]
 801a10c:	e01f      	b.n	801a14e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	2b0a      	cmp	r3, #10
 801a112:	d10e      	bne.n	801a132 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801a114:	2301      	movs	r3, #1
 801a116:	2201      	movs	r2, #1
 801a118:	2100      	movs	r1, #0
 801a11a:	2001      	movs	r0, #1
 801a11c:	f7ff fee4 	bl	8019ee8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801a120:	79ba      	ldrb	r2, [r7, #6]
 801a122:	68fb      	ldr	r3, [r7, #12]
 801a124:	b2db      	uxtb	r3, r3
 801a126:	1ad3      	subs	r3, r2, r3
 801a128:	b2db      	uxtb	r3, r3
 801a12a:	330d      	adds	r3, #13
 801a12c:	b2db      	uxtb	r3, r3
 801a12e:	71bb      	strb	r3, [r7, #6]
 801a130:	e00d      	b.n	801a14e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801a132:	2301      	movs	r3, #1
 801a134:	2201      	movs	r2, #1
 801a136:	2100      	movs	r1, #0
 801a138:	2007      	movs	r0, #7
 801a13a:	f7ff fed5 	bl	8019ee8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a13e:	79ba      	ldrb	r2, [r7, #6]
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	b2db      	uxtb	r3, r3
 801a144:	1ad3      	subs	r3, r2, r3
 801a146:	b2db      	uxtb	r3, r3
 801a148:	330e      	adds	r3, #14
 801a14a:	b2db      	uxtb	r3, r3
 801a14c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801a14e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a152:	f113 0f11 	cmn.w	r3, #17
 801a156:	da01      	bge.n	801a15c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801a158:	23ef      	movs	r3, #239	@ 0xef
 801a15a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801a15c:	2118      	movs	r1, #24
 801a15e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801a162:	f000 fa93 	bl	801a68c <SUBGRF_WriteRegister>
 801a166:	e067      	b.n	801a238 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801a168:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801a16c:	f000 faa2 	bl	801a6b4 <SUBGRF_ReadRegister>
 801a170:	4603      	mov	r3, r0
 801a172:	f043 031e 	orr.w	r3, r3, #30
 801a176:	b2db      	uxtb	r3, r3
 801a178:	4619      	mov	r1, r3
 801a17a:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801a17e:	f000 fa85 	bl	801a68c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801a182:	2001      	movs	r0, #1
 801a184:	f7ef ff13 	bl	8009fae <RBI_GetRFOMaxPowerConfig>
 801a188:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801a18a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a18e:	68fa      	ldr	r2, [r7, #12]
 801a190:	429a      	cmp	r2, r3
 801a192:	da01      	bge.n	801a198 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	2b14      	cmp	r3, #20
 801a19c:	d10e      	bne.n	801a1bc <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801a19e:	2301      	movs	r3, #1
 801a1a0:	2200      	movs	r2, #0
 801a1a2:	2105      	movs	r1, #5
 801a1a4:	2003      	movs	r0, #3
 801a1a6:	f7ff fe9f 	bl	8019ee8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a1aa:	79ba      	ldrb	r2, [r7, #6]
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	b2db      	uxtb	r3, r3
 801a1b0:	1ad3      	subs	r3, r2, r3
 801a1b2:	b2db      	uxtb	r3, r3
 801a1b4:	3316      	adds	r3, #22
 801a1b6:	b2db      	uxtb	r3, r3
 801a1b8:	71bb      	strb	r3, [r7, #6]
 801a1ba:	e031      	b.n	801a220 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801a1bc:	68fb      	ldr	r3, [r7, #12]
 801a1be:	2b11      	cmp	r3, #17
 801a1c0:	d10e      	bne.n	801a1e0 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801a1c2:	2301      	movs	r3, #1
 801a1c4:	2200      	movs	r2, #0
 801a1c6:	2103      	movs	r1, #3
 801a1c8:	2002      	movs	r0, #2
 801a1ca:	f7ff fe8d 	bl	8019ee8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a1ce:	79ba      	ldrb	r2, [r7, #6]
 801a1d0:	68fb      	ldr	r3, [r7, #12]
 801a1d2:	b2db      	uxtb	r3, r3
 801a1d4:	1ad3      	subs	r3, r2, r3
 801a1d6:	b2db      	uxtb	r3, r3
 801a1d8:	3316      	adds	r3, #22
 801a1da:	b2db      	uxtb	r3, r3
 801a1dc:	71bb      	strb	r3, [r7, #6]
 801a1de:	e01f      	b.n	801a220 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801a1e0:	68fb      	ldr	r3, [r7, #12]
 801a1e2:	2b0e      	cmp	r3, #14
 801a1e4:	d10e      	bne.n	801a204 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801a1e6:	2301      	movs	r3, #1
 801a1e8:	2200      	movs	r2, #0
 801a1ea:	2102      	movs	r1, #2
 801a1ec:	2002      	movs	r0, #2
 801a1ee:	f7ff fe7b 	bl	8019ee8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a1f2:	79ba      	ldrb	r2, [r7, #6]
 801a1f4:	68fb      	ldr	r3, [r7, #12]
 801a1f6:	b2db      	uxtb	r3, r3
 801a1f8:	1ad3      	subs	r3, r2, r3
 801a1fa:	b2db      	uxtb	r3, r3
 801a1fc:	330e      	adds	r3, #14
 801a1fe:	b2db      	uxtb	r3, r3
 801a200:	71bb      	strb	r3, [r7, #6]
 801a202:	e00d      	b.n	801a220 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801a204:	2301      	movs	r3, #1
 801a206:	2200      	movs	r2, #0
 801a208:	2107      	movs	r1, #7
 801a20a:	2004      	movs	r0, #4
 801a20c:	f7ff fe6c 	bl	8019ee8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a210:	79ba      	ldrb	r2, [r7, #6]
 801a212:	68fb      	ldr	r3, [r7, #12]
 801a214:	b2db      	uxtb	r3, r3
 801a216:	1ad3      	subs	r3, r2, r3
 801a218:	b2db      	uxtb	r3, r3
 801a21a:	3316      	adds	r3, #22
 801a21c:	b2db      	uxtb	r3, r3
 801a21e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801a220:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a224:	f113 0f09 	cmn.w	r3, #9
 801a228:	da01      	bge.n	801a22e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801a22a:	23f7      	movs	r3, #247	@ 0xf7
 801a22c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801a22e:	2138      	movs	r1, #56	@ 0x38
 801a230:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801a234:	f000 fa2a 	bl	801a68c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801a238:	79bb      	ldrb	r3, [r7, #6]
 801a23a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801a23c:	797b      	ldrb	r3, [r7, #5]
 801a23e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801a240:	f107 0308 	add.w	r3, r7, #8
 801a244:	2202      	movs	r2, #2
 801a246:	4619      	mov	r1, r3
 801a248:	208e      	movs	r0, #142	@ 0x8e
 801a24a:	f000 facf 	bl	801a7ec <SUBGRF_WriteCommand>
}
 801a24e:	bf00      	nop
 801a250:	3710      	adds	r7, #16
 801a252:	46bd      	mov	sp, r7
 801a254:	bd80      	pop	{r7, pc}
	...

0801a258 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801a258:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a25c:	b086      	sub	sp, #24
 801a25e:	af00      	add	r7, sp, #0
 801a260:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801a262:	2300      	movs	r3, #0
 801a264:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801a266:	4a61      	ldr	r2, [pc, #388]	@ (801a3ec <SUBGRF_SetModulationParams+0x194>)
 801a268:	f107 0308 	add.w	r3, r7, #8
 801a26c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a270:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	781a      	ldrb	r2, [r3, #0]
 801a278:	4b5d      	ldr	r3, [pc, #372]	@ (801a3f0 <SUBGRF_SetModulationParams+0x198>)
 801a27a:	781b      	ldrb	r3, [r3, #0]
 801a27c:	429a      	cmp	r2, r3
 801a27e:	d004      	beq.n	801a28a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	781b      	ldrb	r3, [r3, #0]
 801a284:	4618      	mov	r0, r3
 801a286:	f7ff fef3 	bl	801a070 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	781b      	ldrb	r3, [r3, #0]
 801a28e:	2b03      	cmp	r3, #3
 801a290:	f200 80a5 	bhi.w	801a3de <SUBGRF_SetModulationParams+0x186>
 801a294:	a201      	add	r2, pc, #4	@ (adr r2, 801a29c <SUBGRF_SetModulationParams+0x44>)
 801a296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a29a:	bf00      	nop
 801a29c:	0801a2ad 	.word	0x0801a2ad
 801a2a0:	0801a36d 	.word	0x0801a36d
 801a2a4:	0801a32f 	.word	0x0801a32f
 801a2a8:	0801a39b 	.word	0x0801a39b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801a2ac:	2308      	movs	r3, #8
 801a2ae:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	685b      	ldr	r3, [r3, #4]
 801a2b4:	4a4f      	ldr	r2, [pc, #316]	@ (801a3f4 <SUBGRF_SetModulationParams+0x19c>)
 801a2b6:	fbb2 f3f3 	udiv	r3, r2, r3
 801a2ba:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a2bc:	697b      	ldr	r3, [r7, #20]
 801a2be:	0c1b      	lsrs	r3, r3, #16
 801a2c0:	b2db      	uxtb	r3, r3
 801a2c2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a2c4:	697b      	ldr	r3, [r7, #20]
 801a2c6:	0a1b      	lsrs	r3, r3, #8
 801a2c8:	b2db      	uxtb	r3, r3
 801a2ca:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a2cc:	697b      	ldr	r3, [r7, #20]
 801a2ce:	b2db      	uxtb	r3, r3
 801a2d0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	7b1b      	ldrb	r3, [r3, #12]
 801a2d6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	7b5b      	ldrb	r3, [r3, #13]
 801a2dc:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	689b      	ldr	r3, [r3, #8]
 801a2e2:	2200      	movs	r2, #0
 801a2e4:	461c      	mov	r4, r3
 801a2e6:	4615      	mov	r5, r2
 801a2e8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a2ec:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a2f0:	4a41      	ldr	r2, [pc, #260]	@ (801a3f8 <SUBGRF_SetModulationParams+0x1a0>)
 801a2f2:	f04f 0300 	mov.w	r3, #0
 801a2f6:	4640      	mov	r0, r8
 801a2f8:	4649      	mov	r1, r9
 801a2fa:	f7e6 feeb 	bl	80010d4 <__aeabi_uldivmod>
 801a2fe:	4602      	mov	r2, r0
 801a300:	460b      	mov	r3, r1
 801a302:	4613      	mov	r3, r2
 801a304:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801a306:	697b      	ldr	r3, [r7, #20]
 801a308:	0c1b      	lsrs	r3, r3, #16
 801a30a:	b2db      	uxtb	r3, r3
 801a30c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801a30e:	697b      	ldr	r3, [r7, #20]
 801a310:	0a1b      	lsrs	r3, r3, #8
 801a312:	b2db      	uxtb	r3, r3
 801a314:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801a316:	697b      	ldr	r3, [r7, #20]
 801a318:	b2db      	uxtb	r3, r3
 801a31a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a31c:	7cfb      	ldrb	r3, [r7, #19]
 801a31e:	b29a      	uxth	r2, r3
 801a320:	f107 0308 	add.w	r3, r7, #8
 801a324:	4619      	mov	r1, r3
 801a326:	208b      	movs	r0, #139	@ 0x8b
 801a328:	f000 fa60 	bl	801a7ec <SUBGRF_WriteCommand>
        break;
 801a32c:	e058      	b.n	801a3e0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801a32e:	2304      	movs	r3, #4
 801a330:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	691b      	ldr	r3, [r3, #16]
 801a336:	4a2f      	ldr	r2, [pc, #188]	@ (801a3f4 <SUBGRF_SetModulationParams+0x19c>)
 801a338:	fbb2 f3f3 	udiv	r3, r2, r3
 801a33c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a33e:	697b      	ldr	r3, [r7, #20]
 801a340:	0c1b      	lsrs	r3, r3, #16
 801a342:	b2db      	uxtb	r3, r3
 801a344:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a346:	697b      	ldr	r3, [r7, #20]
 801a348:	0a1b      	lsrs	r3, r3, #8
 801a34a:	b2db      	uxtb	r3, r3
 801a34c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a34e:	697b      	ldr	r3, [r7, #20]
 801a350:	b2db      	uxtb	r3, r3
 801a352:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	7d1b      	ldrb	r3, [r3, #20]
 801a358:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a35a:	7cfb      	ldrb	r3, [r7, #19]
 801a35c:	b29a      	uxth	r2, r3
 801a35e:	f107 0308 	add.w	r3, r7, #8
 801a362:	4619      	mov	r1, r3
 801a364:	208b      	movs	r0, #139	@ 0x8b
 801a366:	f000 fa41 	bl	801a7ec <SUBGRF_WriteCommand>
        break;
 801a36a:	e039      	b.n	801a3e0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801a36c:	2304      	movs	r3, #4
 801a36e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	7e1b      	ldrb	r3, [r3, #24]
 801a374:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	7e5b      	ldrb	r3, [r3, #25]
 801a37a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	7e9b      	ldrb	r3, [r3, #26]
 801a380:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	7edb      	ldrb	r3, [r3, #27]
 801a386:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a388:	7cfb      	ldrb	r3, [r7, #19]
 801a38a:	b29a      	uxth	r2, r3
 801a38c:	f107 0308 	add.w	r3, r7, #8
 801a390:	4619      	mov	r1, r3
 801a392:	208b      	movs	r0, #139	@ 0x8b
 801a394:	f000 fa2a 	bl	801a7ec <SUBGRF_WriteCommand>

        break;
 801a398:	e022      	b.n	801a3e0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801a39a:	2305      	movs	r3, #5
 801a39c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	685b      	ldr	r3, [r3, #4]
 801a3a2:	4a14      	ldr	r2, [pc, #80]	@ (801a3f4 <SUBGRF_SetModulationParams+0x19c>)
 801a3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 801a3a8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a3aa:	697b      	ldr	r3, [r7, #20]
 801a3ac:	0c1b      	lsrs	r3, r3, #16
 801a3ae:	b2db      	uxtb	r3, r3
 801a3b0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a3b2:	697b      	ldr	r3, [r7, #20]
 801a3b4:	0a1b      	lsrs	r3, r3, #8
 801a3b6:	b2db      	uxtb	r3, r3
 801a3b8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a3ba:	697b      	ldr	r3, [r7, #20]
 801a3bc:	b2db      	uxtb	r3, r3
 801a3be:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	7b1b      	ldrb	r3, [r3, #12]
 801a3c4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	7b5b      	ldrb	r3, [r3, #13]
 801a3ca:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a3cc:	7cfb      	ldrb	r3, [r7, #19]
 801a3ce:	b29a      	uxth	r2, r3
 801a3d0:	f107 0308 	add.w	r3, r7, #8
 801a3d4:	4619      	mov	r1, r3
 801a3d6:	208b      	movs	r0, #139	@ 0x8b
 801a3d8:	f000 fa08 	bl	801a7ec <SUBGRF_WriteCommand>
        break;
 801a3dc:	e000      	b.n	801a3e0 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801a3de:	bf00      	nop
    }
}
 801a3e0:	bf00      	nop
 801a3e2:	3718      	adds	r7, #24
 801a3e4:	46bd      	mov	sp, r7
 801a3e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a3ea:	bf00      	nop
 801a3ec:	0801d6c8 	.word	0x0801d6c8
 801a3f0:	20001529 	.word	0x20001529
 801a3f4:	3d090000 	.word	0x3d090000
 801a3f8:	01e84800 	.word	0x01e84800

0801a3fc <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801a3fc:	b580      	push	{r7, lr}
 801a3fe:	b086      	sub	sp, #24
 801a400:	af00      	add	r7, sp, #0
 801a402:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801a404:	2300      	movs	r3, #0
 801a406:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801a408:	4a48      	ldr	r2, [pc, #288]	@ (801a52c <SUBGRF_SetPacketParams+0x130>)
 801a40a:	f107 030c 	add.w	r3, r7, #12
 801a40e:	ca07      	ldmia	r2, {r0, r1, r2}
 801a410:	c303      	stmia	r3!, {r0, r1}
 801a412:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	781a      	ldrb	r2, [r3, #0]
 801a418:	4b45      	ldr	r3, [pc, #276]	@ (801a530 <SUBGRF_SetPacketParams+0x134>)
 801a41a:	781b      	ldrb	r3, [r3, #0]
 801a41c:	429a      	cmp	r2, r3
 801a41e:	d004      	beq.n	801a42a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	781b      	ldrb	r3, [r3, #0]
 801a424:	4618      	mov	r0, r3
 801a426:	f7ff fe23 	bl	801a070 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	781b      	ldrb	r3, [r3, #0]
 801a42e:	2b03      	cmp	r3, #3
 801a430:	d878      	bhi.n	801a524 <SUBGRF_SetPacketParams+0x128>
 801a432:	a201      	add	r2, pc, #4	@ (adr r2, 801a438 <SUBGRF_SetPacketParams+0x3c>)
 801a434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a438:	0801a449 	.word	0x0801a449
 801a43c:	0801a4d9 	.word	0x0801a4d9
 801a440:	0801a4cd 	.word	0x0801a4cd
 801a444:	0801a449 	.word	0x0801a449
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	7a5b      	ldrb	r3, [r3, #9]
 801a44c:	2bf1      	cmp	r3, #241	@ 0xf1
 801a44e:	d10a      	bne.n	801a466 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801a450:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801a454:	f7ff faaa 	bl	80199ac <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801a458:	f248 0005 	movw	r0, #32773	@ 0x8005
 801a45c:	f7ff fac6 	bl	80199ec <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801a460:	2302      	movs	r3, #2
 801a462:	75bb      	strb	r3, [r7, #22]
 801a464:	e011      	b.n	801a48a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	7a5b      	ldrb	r3, [r3, #9]
 801a46a:	2bf2      	cmp	r3, #242	@ 0xf2
 801a46c:	d10a      	bne.n	801a484 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801a46e:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801a472:	f7ff fa9b 	bl	80199ac <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801a476:	f241 0021 	movw	r0, #4129	@ 0x1021
 801a47a:	f7ff fab7 	bl	80199ec <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801a47e:	2306      	movs	r3, #6
 801a480:	75bb      	strb	r3, [r7, #22]
 801a482:	e002      	b.n	801a48a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	7a5b      	ldrb	r3, [r3, #9]
 801a488:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801a48a:	2309      	movs	r3, #9
 801a48c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	885b      	ldrh	r3, [r3, #2]
 801a492:	0a1b      	lsrs	r3, r3, #8
 801a494:	b29b      	uxth	r3, r3
 801a496:	b2db      	uxtb	r3, r3
 801a498:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	885b      	ldrh	r3, [r3, #2]
 801a49e:	b2db      	uxtb	r3, r3
 801a4a0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	791b      	ldrb	r3, [r3, #4]
 801a4a6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	795b      	ldrb	r3, [r3, #5]
 801a4ac:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	799b      	ldrb	r3, [r3, #6]
 801a4b2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	79db      	ldrb	r3, [r3, #7]
 801a4b8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	7a1b      	ldrb	r3, [r3, #8]
 801a4be:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801a4c0:	7dbb      	ldrb	r3, [r7, #22]
 801a4c2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	7a9b      	ldrb	r3, [r3, #10]
 801a4c8:	753b      	strb	r3, [r7, #20]
        break;
 801a4ca:	e022      	b.n	801a512 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801a4cc:	2301      	movs	r3, #1
 801a4ce:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	7b1b      	ldrb	r3, [r3, #12]
 801a4d4:	733b      	strb	r3, [r7, #12]
        break;
 801a4d6:	e01c      	b.n	801a512 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801a4d8:	2306      	movs	r3, #6
 801a4da:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	89db      	ldrh	r3, [r3, #14]
 801a4e0:	0a1b      	lsrs	r3, r3, #8
 801a4e2:	b29b      	uxth	r3, r3
 801a4e4:	b2db      	uxtb	r3, r3
 801a4e6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	89db      	ldrh	r3, [r3, #14]
 801a4ec:	b2db      	uxtb	r3, r3
 801a4ee:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	7c1a      	ldrb	r2, [r3, #16]
 801a4f4:	4b0f      	ldr	r3, [pc, #60]	@ (801a534 <SUBGRF_SetPacketParams+0x138>)
 801a4f6:	4611      	mov	r1, r2
 801a4f8:	7019      	strb	r1, [r3, #0]
 801a4fa:	4613      	mov	r3, r2
 801a4fc:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	7c5b      	ldrb	r3, [r3, #17]
 801a502:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	7c9b      	ldrb	r3, [r3, #18]
 801a508:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	7cdb      	ldrb	r3, [r3, #19]
 801a50e:	747b      	strb	r3, [r7, #17]
        break;
 801a510:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801a512:	7dfb      	ldrb	r3, [r7, #23]
 801a514:	b29a      	uxth	r2, r3
 801a516:	f107 030c 	add.w	r3, r7, #12
 801a51a:	4619      	mov	r1, r3
 801a51c:	208c      	movs	r0, #140	@ 0x8c
 801a51e:	f000 f965 	bl	801a7ec <SUBGRF_WriteCommand>
 801a522:	e000      	b.n	801a526 <SUBGRF_SetPacketParams+0x12a>
        return;
 801a524:	bf00      	nop
}
 801a526:	3718      	adds	r7, #24
 801a528:	46bd      	mov	sp, r7
 801a52a:	bd80      	pop	{r7, pc}
 801a52c:	0801d6d0 	.word	0x0801d6d0
 801a530:	20001529 	.word	0x20001529
 801a534:	2000152a 	.word	0x2000152a

0801a538 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801a538:	b580      	push	{r7, lr}
 801a53a:	b084      	sub	sp, #16
 801a53c:	af00      	add	r7, sp, #0
 801a53e:	4603      	mov	r3, r0
 801a540:	460a      	mov	r2, r1
 801a542:	71fb      	strb	r3, [r7, #7]
 801a544:	4613      	mov	r3, r2
 801a546:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801a548:	79fb      	ldrb	r3, [r7, #7]
 801a54a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801a54c:	79bb      	ldrb	r3, [r7, #6]
 801a54e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801a550:	f107 030c 	add.w	r3, r7, #12
 801a554:	2202      	movs	r2, #2
 801a556:	4619      	mov	r1, r3
 801a558:	208f      	movs	r0, #143	@ 0x8f
 801a55a:	f000 f947 	bl	801a7ec <SUBGRF_WriteCommand>
}
 801a55e:	bf00      	nop
 801a560:	3710      	adds	r7, #16
 801a562:	46bd      	mov	sp, r7
 801a564:	bd80      	pop	{r7, pc}

0801a566 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801a566:	b580      	push	{r7, lr}
 801a568:	b082      	sub	sp, #8
 801a56a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801a56c:	2300      	movs	r3, #0
 801a56e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801a570:	1d3b      	adds	r3, r7, #4
 801a572:	2201      	movs	r2, #1
 801a574:	4619      	mov	r1, r3
 801a576:	2015      	movs	r0, #21
 801a578:	f000 f95a 	bl	801a830 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801a57c:	793b      	ldrb	r3, [r7, #4]
 801a57e:	425b      	negs	r3, r3
 801a580:	105b      	asrs	r3, r3, #1
 801a582:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801a584:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a588:	4618      	mov	r0, r3
 801a58a:	3708      	adds	r7, #8
 801a58c:	46bd      	mov	sp, r7
 801a58e:	bd80      	pop	{r7, pc}

0801a590 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801a590:	b580      	push	{r7, lr}
 801a592:	b084      	sub	sp, #16
 801a594:	af00      	add	r7, sp, #0
 801a596:	6078      	str	r0, [r7, #4]
 801a598:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801a59a:	f107 030c 	add.w	r3, r7, #12
 801a59e:	2202      	movs	r2, #2
 801a5a0:	4619      	mov	r1, r3
 801a5a2:	2013      	movs	r0, #19
 801a5a4:	f000 f944 	bl	801a830 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801a5a8:	f7ff fd7e 	bl	801a0a8 <SUBGRF_GetPacketType>
 801a5ac:	4603      	mov	r3, r0
 801a5ae:	2b01      	cmp	r3, #1
 801a5b0:	d10d      	bne.n	801a5ce <SUBGRF_GetRxBufferStatus+0x3e>
 801a5b2:	4b0c      	ldr	r3, [pc, #48]	@ (801a5e4 <SUBGRF_GetRxBufferStatus+0x54>)
 801a5b4:	781b      	ldrb	r3, [r3, #0]
 801a5b6:	b2db      	uxtb	r3, r3
 801a5b8:	2b01      	cmp	r3, #1
 801a5ba:	d108      	bne.n	801a5ce <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801a5bc:	f240 7002 	movw	r0, #1794	@ 0x702
 801a5c0:	f000 f878 	bl	801a6b4 <SUBGRF_ReadRegister>
 801a5c4:	4603      	mov	r3, r0
 801a5c6:	461a      	mov	r2, r3
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	701a      	strb	r2, [r3, #0]
 801a5cc:	e002      	b.n	801a5d4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801a5ce:	7b3a      	ldrb	r2, [r7, #12]
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801a5d4:	7b7a      	ldrb	r2, [r7, #13]
 801a5d6:	683b      	ldr	r3, [r7, #0]
 801a5d8:	701a      	strb	r2, [r3, #0]
}
 801a5da:	bf00      	nop
 801a5dc:	3710      	adds	r7, #16
 801a5de:	46bd      	mov	sp, r7
 801a5e0:	bd80      	pop	{r7, pc}
 801a5e2:	bf00      	nop
 801a5e4:	2000152a 	.word	0x2000152a

0801a5e8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801a5e8:	b580      	push	{r7, lr}
 801a5ea:	b084      	sub	sp, #16
 801a5ec:	af00      	add	r7, sp, #0
 801a5ee:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801a5f0:	f107 030c 	add.w	r3, r7, #12
 801a5f4:	2203      	movs	r2, #3
 801a5f6:	4619      	mov	r1, r3
 801a5f8:	2014      	movs	r0, #20
 801a5fa:	f000 f919 	bl	801a830 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801a5fe:	f7ff fd53 	bl	801a0a8 <SUBGRF_GetPacketType>
 801a602:	4603      	mov	r3, r0
 801a604:	461a      	mov	r2, r3
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	781b      	ldrb	r3, [r3, #0]
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d002      	beq.n	801a618 <SUBGRF_GetPacketStatus+0x30>
 801a612:	2b01      	cmp	r3, #1
 801a614:	d013      	beq.n	801a63e <SUBGRF_GetPacketStatus+0x56>
 801a616:	e02a      	b.n	801a66e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801a618:	7b3a      	ldrb	r2, [r7, #12]
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801a61e:	7b7b      	ldrb	r3, [r7, #13]
 801a620:	425b      	negs	r3, r3
 801a622:	105b      	asrs	r3, r3, #1
 801a624:	b25a      	sxtb	r2, r3
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801a62a:	7bbb      	ldrb	r3, [r7, #14]
 801a62c:	425b      	negs	r3, r3
 801a62e:	105b      	asrs	r3, r3, #1
 801a630:	b25a      	sxtb	r2, r3
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	2200      	movs	r2, #0
 801a63a:	609a      	str	r2, [r3, #8]
            break;
 801a63c:	e020      	b.n	801a680 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801a63e:	7b3b      	ldrb	r3, [r7, #12]
 801a640:	425b      	negs	r3, r3
 801a642:	105b      	asrs	r3, r3, #1
 801a644:	b25a      	sxtb	r2, r3
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801a64a:	7b7b      	ldrb	r3, [r7, #13]
 801a64c:	b25b      	sxtb	r3, r3
 801a64e:	3302      	adds	r3, #2
 801a650:	109b      	asrs	r3, r3, #2
 801a652:	b25a      	sxtb	r2, r3
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801a658:	7bbb      	ldrb	r3, [r7, #14]
 801a65a:	425b      	negs	r3, r3
 801a65c:	105b      	asrs	r3, r3, #1
 801a65e:	b25a      	sxtb	r2, r3
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801a664:	4b08      	ldr	r3, [pc, #32]	@ (801a688 <SUBGRF_GetPacketStatus+0xa0>)
 801a666:	681a      	ldr	r2, [r3, #0]
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	611a      	str	r2, [r3, #16]
            break;
 801a66c:	e008      	b.n	801a680 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801a66e:	2214      	movs	r2, #20
 801a670:	2100      	movs	r1, #0
 801a672:	6878      	ldr	r0, [r7, #4]
 801a674:	f000 fbcd 	bl	801ae12 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	220f      	movs	r2, #15
 801a67c:	701a      	strb	r2, [r3, #0]
            break;
 801a67e:	bf00      	nop
    }
}
 801a680:	bf00      	nop
 801a682:	3710      	adds	r7, #16
 801a684:	46bd      	mov	sp, r7
 801a686:	bd80      	pop	{r7, pc}
 801a688:	2000152c 	.word	0x2000152c

0801a68c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801a68c:	b580      	push	{r7, lr}
 801a68e:	b082      	sub	sp, #8
 801a690:	af00      	add	r7, sp, #0
 801a692:	4603      	mov	r3, r0
 801a694:	460a      	mov	r2, r1
 801a696:	80fb      	strh	r3, [r7, #6]
 801a698:	4613      	mov	r3, r2
 801a69a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801a69c:	1d7a      	adds	r2, r7, #5
 801a69e:	88f9      	ldrh	r1, [r7, #6]
 801a6a0:	2301      	movs	r3, #1
 801a6a2:	4803      	ldr	r0, [pc, #12]	@ (801a6b0 <SUBGRF_WriteRegister+0x24>)
 801a6a4:	f7ec f96c 	bl	8006980 <HAL_SUBGHZ_WriteRegisters>
}
 801a6a8:	bf00      	nop
 801a6aa:	3708      	adds	r7, #8
 801a6ac:	46bd      	mov	sp, r7
 801a6ae:	bd80      	pop	{r7, pc}
 801a6b0:	20000268 	.word	0x20000268

0801a6b4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801a6b4:	b580      	push	{r7, lr}
 801a6b6:	b084      	sub	sp, #16
 801a6b8:	af00      	add	r7, sp, #0
 801a6ba:	4603      	mov	r3, r0
 801a6bc:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801a6be:	f107 020f 	add.w	r2, r7, #15
 801a6c2:	88f9      	ldrh	r1, [r7, #6]
 801a6c4:	2301      	movs	r3, #1
 801a6c6:	4804      	ldr	r0, [pc, #16]	@ (801a6d8 <SUBGRF_ReadRegister+0x24>)
 801a6c8:	f7ec f9b9 	bl	8006a3e <HAL_SUBGHZ_ReadRegisters>
    return data;
 801a6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 801a6ce:	4618      	mov	r0, r3
 801a6d0:	3710      	adds	r7, #16
 801a6d2:	46bd      	mov	sp, r7
 801a6d4:	bd80      	pop	{r7, pc}
 801a6d6:	bf00      	nop
 801a6d8:	20000268 	.word	0x20000268

0801a6dc <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a6dc:	b580      	push	{r7, lr}
 801a6de:	b086      	sub	sp, #24
 801a6e0:	af00      	add	r7, sp, #0
 801a6e2:	4603      	mov	r3, r0
 801a6e4:	6039      	str	r1, [r7, #0]
 801a6e6:	80fb      	strh	r3, [r7, #6]
 801a6e8:	4613      	mov	r3, r2
 801a6ea:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a6ec:	f3ef 8310 	mrs	r3, PRIMASK
 801a6f0:	60fb      	str	r3, [r7, #12]
  return(result);
 801a6f2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a6f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a6f6:	b672      	cpsid	i
}
 801a6f8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801a6fa:	88bb      	ldrh	r3, [r7, #4]
 801a6fc:	88f9      	ldrh	r1, [r7, #6]
 801a6fe:	683a      	ldr	r2, [r7, #0]
 801a700:	4806      	ldr	r0, [pc, #24]	@ (801a71c <SUBGRF_WriteRegisters+0x40>)
 801a702:	f7ec f93d 	bl	8006980 <HAL_SUBGHZ_WriteRegisters>
 801a706:	697b      	ldr	r3, [r7, #20]
 801a708:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a70a:	693b      	ldr	r3, [r7, #16]
 801a70c:	f383 8810 	msr	PRIMASK, r3
}
 801a710:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a712:	bf00      	nop
 801a714:	3718      	adds	r7, #24
 801a716:	46bd      	mov	sp, r7
 801a718:	bd80      	pop	{r7, pc}
 801a71a:	bf00      	nop
 801a71c:	20000268 	.word	0x20000268

0801a720 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a720:	b580      	push	{r7, lr}
 801a722:	b086      	sub	sp, #24
 801a724:	af00      	add	r7, sp, #0
 801a726:	4603      	mov	r3, r0
 801a728:	6039      	str	r1, [r7, #0]
 801a72a:	80fb      	strh	r3, [r7, #6]
 801a72c:	4613      	mov	r3, r2
 801a72e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a730:	f3ef 8310 	mrs	r3, PRIMASK
 801a734:	60fb      	str	r3, [r7, #12]
  return(result);
 801a736:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a738:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a73a:	b672      	cpsid	i
}
 801a73c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801a73e:	88bb      	ldrh	r3, [r7, #4]
 801a740:	88f9      	ldrh	r1, [r7, #6]
 801a742:	683a      	ldr	r2, [r7, #0]
 801a744:	4806      	ldr	r0, [pc, #24]	@ (801a760 <SUBGRF_ReadRegisters+0x40>)
 801a746:	f7ec f97a 	bl	8006a3e <HAL_SUBGHZ_ReadRegisters>
 801a74a:	697b      	ldr	r3, [r7, #20]
 801a74c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a74e:	693b      	ldr	r3, [r7, #16]
 801a750:	f383 8810 	msr	PRIMASK, r3
}
 801a754:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a756:	bf00      	nop
 801a758:	3718      	adds	r7, #24
 801a75a:	46bd      	mov	sp, r7
 801a75c:	bd80      	pop	{r7, pc}
 801a75e:	bf00      	nop
 801a760:	20000268 	.word	0x20000268

0801a764 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b086      	sub	sp, #24
 801a768:	af00      	add	r7, sp, #0
 801a76a:	4603      	mov	r3, r0
 801a76c:	6039      	str	r1, [r7, #0]
 801a76e:	71fb      	strb	r3, [r7, #7]
 801a770:	4613      	mov	r3, r2
 801a772:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a774:	f3ef 8310 	mrs	r3, PRIMASK
 801a778:	60fb      	str	r3, [r7, #12]
  return(result);
 801a77a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a77c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a77e:	b672      	cpsid	i
}
 801a780:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801a782:	79bb      	ldrb	r3, [r7, #6]
 801a784:	b29b      	uxth	r3, r3
 801a786:	79f9      	ldrb	r1, [r7, #7]
 801a788:	683a      	ldr	r2, [r7, #0]
 801a78a:	4806      	ldr	r0, [pc, #24]	@ (801a7a4 <SUBGRF_WriteBuffer+0x40>)
 801a78c:	f7ec fa6b 	bl	8006c66 <HAL_SUBGHZ_WriteBuffer>
 801a790:	697b      	ldr	r3, [r7, #20]
 801a792:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a794:	693b      	ldr	r3, [r7, #16]
 801a796:	f383 8810 	msr	PRIMASK, r3
}
 801a79a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a79c:	bf00      	nop
 801a79e:	3718      	adds	r7, #24
 801a7a0:	46bd      	mov	sp, r7
 801a7a2:	bd80      	pop	{r7, pc}
 801a7a4:	20000268 	.word	0x20000268

0801a7a8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a7a8:	b580      	push	{r7, lr}
 801a7aa:	b086      	sub	sp, #24
 801a7ac:	af00      	add	r7, sp, #0
 801a7ae:	4603      	mov	r3, r0
 801a7b0:	6039      	str	r1, [r7, #0]
 801a7b2:	71fb      	strb	r3, [r7, #7]
 801a7b4:	4613      	mov	r3, r2
 801a7b6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7b8:	f3ef 8310 	mrs	r3, PRIMASK
 801a7bc:	60fb      	str	r3, [r7, #12]
  return(result);
 801a7be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a7c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a7c2:	b672      	cpsid	i
}
 801a7c4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801a7c6:	79bb      	ldrb	r3, [r7, #6]
 801a7c8:	b29b      	uxth	r3, r3
 801a7ca:	79f9      	ldrb	r1, [r7, #7]
 801a7cc:	683a      	ldr	r2, [r7, #0]
 801a7ce:	4806      	ldr	r0, [pc, #24]	@ (801a7e8 <SUBGRF_ReadBuffer+0x40>)
 801a7d0:	f7ec fa9c 	bl	8006d0c <HAL_SUBGHZ_ReadBuffer>
 801a7d4:	697b      	ldr	r3, [r7, #20]
 801a7d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a7d8:	693b      	ldr	r3, [r7, #16]
 801a7da:	f383 8810 	msr	PRIMASK, r3
}
 801a7de:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a7e0:	bf00      	nop
 801a7e2:	3718      	adds	r7, #24
 801a7e4:	46bd      	mov	sp, r7
 801a7e6:	bd80      	pop	{r7, pc}
 801a7e8:	20000268 	.word	0x20000268

0801a7ec <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b086      	sub	sp, #24
 801a7f0:	af00      	add	r7, sp, #0
 801a7f2:	4603      	mov	r3, r0
 801a7f4:	6039      	str	r1, [r7, #0]
 801a7f6:	71fb      	strb	r3, [r7, #7]
 801a7f8:	4613      	mov	r3, r2
 801a7fa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7fc:	f3ef 8310 	mrs	r3, PRIMASK
 801a800:	60fb      	str	r3, [r7, #12]
  return(result);
 801a802:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a804:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a806:	b672      	cpsid	i
}
 801a808:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801a80a:	88bb      	ldrh	r3, [r7, #4]
 801a80c:	79f9      	ldrb	r1, [r7, #7]
 801a80e:	683a      	ldr	r2, [r7, #0]
 801a810:	4806      	ldr	r0, [pc, #24]	@ (801a82c <SUBGRF_WriteCommand+0x40>)
 801a812:	f7ec f975 	bl	8006b00 <HAL_SUBGHZ_ExecSetCmd>
 801a816:	697b      	ldr	r3, [r7, #20]
 801a818:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a81a:	693b      	ldr	r3, [r7, #16]
 801a81c:	f383 8810 	msr	PRIMASK, r3
}
 801a820:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a822:	bf00      	nop
 801a824:	3718      	adds	r7, #24
 801a826:	46bd      	mov	sp, r7
 801a828:	bd80      	pop	{r7, pc}
 801a82a:	bf00      	nop
 801a82c:	20000268 	.word	0x20000268

0801a830 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a830:	b580      	push	{r7, lr}
 801a832:	b086      	sub	sp, #24
 801a834:	af00      	add	r7, sp, #0
 801a836:	4603      	mov	r3, r0
 801a838:	6039      	str	r1, [r7, #0]
 801a83a:	71fb      	strb	r3, [r7, #7]
 801a83c:	4613      	mov	r3, r2
 801a83e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a840:	f3ef 8310 	mrs	r3, PRIMASK
 801a844:	60fb      	str	r3, [r7, #12]
  return(result);
 801a846:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a848:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a84a:	b672      	cpsid	i
}
 801a84c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801a84e:	88bb      	ldrh	r3, [r7, #4]
 801a850:	79f9      	ldrb	r1, [r7, #7]
 801a852:	683a      	ldr	r2, [r7, #0]
 801a854:	4806      	ldr	r0, [pc, #24]	@ (801a870 <SUBGRF_ReadCommand+0x40>)
 801a856:	f7ec f9b2 	bl	8006bbe <HAL_SUBGHZ_ExecGetCmd>
 801a85a:	697b      	ldr	r3, [r7, #20]
 801a85c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a85e:	693b      	ldr	r3, [r7, #16]
 801a860:	f383 8810 	msr	PRIMASK, r3
}
 801a864:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a866:	bf00      	nop
 801a868:	3718      	adds	r7, #24
 801a86a:	46bd      	mov	sp, r7
 801a86c:	bd80      	pop	{r7, pc}
 801a86e:	bf00      	nop
 801a870:	20000268 	.word	0x20000268

0801a874 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801a874:	b580      	push	{r7, lr}
 801a876:	b084      	sub	sp, #16
 801a878:	af00      	add	r7, sp, #0
 801a87a:	4603      	mov	r3, r0
 801a87c:	460a      	mov	r2, r1
 801a87e:	71fb      	strb	r3, [r7, #7]
 801a880:	4613      	mov	r3, r2
 801a882:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801a884:	2301      	movs	r3, #1
 801a886:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801a888:	79bb      	ldrb	r3, [r7, #6]
 801a88a:	2b01      	cmp	r3, #1
 801a88c:	d10d      	bne.n	801a8aa <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801a88e:	79fb      	ldrb	r3, [r7, #7]
 801a890:	2b01      	cmp	r3, #1
 801a892:	d104      	bne.n	801a89e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801a894:	2302      	movs	r3, #2
 801a896:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801a898:	2004      	movs	r0, #4
 801a89a:	f000 f8ef 	bl	801aa7c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801a89e:	79fb      	ldrb	r3, [r7, #7]
 801a8a0:	2b02      	cmp	r3, #2
 801a8a2:	d107      	bne.n	801a8b4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801a8a4:	2303      	movs	r3, #3
 801a8a6:	73fb      	strb	r3, [r7, #15]
 801a8a8:	e004      	b.n	801a8b4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801a8aa:	79bb      	ldrb	r3, [r7, #6]
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d101      	bne.n	801a8b4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801a8b0:	2301      	movs	r3, #1
 801a8b2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801a8b4:	7bfb      	ldrb	r3, [r7, #15]
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	f7ef fb4b 	bl	8009f52 <RBI_ConfigRFSwitch>
}
 801a8bc:	bf00      	nop
 801a8be:	3710      	adds	r7, #16
 801a8c0:	46bd      	mov	sp, r7
 801a8c2:	bd80      	pop	{r7, pc}

0801a8c4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801a8c4:	b580      	push	{r7, lr}
 801a8c6:	b084      	sub	sp, #16
 801a8c8:	af00      	add	r7, sp, #0
 801a8ca:	4603      	mov	r3, r0
 801a8cc:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801a8ce:	2301      	movs	r3, #1
 801a8d0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801a8d2:	f7ef fb4b 	bl	8009f6c <RBI_GetTxConfig>
 801a8d6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801a8d8:	68bb      	ldr	r3, [r7, #8]
 801a8da:	2b02      	cmp	r3, #2
 801a8dc:	d016      	beq.n	801a90c <SUBGRF_SetRfTxPower+0x48>
 801a8de:	68bb      	ldr	r3, [r7, #8]
 801a8e0:	2b02      	cmp	r3, #2
 801a8e2:	dc16      	bgt.n	801a912 <SUBGRF_SetRfTxPower+0x4e>
 801a8e4:	68bb      	ldr	r3, [r7, #8]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d003      	beq.n	801a8f2 <SUBGRF_SetRfTxPower+0x2e>
 801a8ea:	68bb      	ldr	r3, [r7, #8]
 801a8ec:	2b01      	cmp	r3, #1
 801a8ee:	d00a      	beq.n	801a906 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801a8f0:	e00f      	b.n	801a912 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801a8f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a8f6:	2b0f      	cmp	r3, #15
 801a8f8:	dd02      	ble.n	801a900 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801a8fa:	2302      	movs	r3, #2
 801a8fc:	73fb      	strb	r3, [r7, #15]
            break;
 801a8fe:	e009      	b.n	801a914 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801a900:	2301      	movs	r3, #1
 801a902:	73fb      	strb	r3, [r7, #15]
            break;
 801a904:	e006      	b.n	801a914 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801a906:	2301      	movs	r3, #1
 801a908:	73fb      	strb	r3, [r7, #15]
            break;
 801a90a:	e003      	b.n	801a914 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801a90c:	2302      	movs	r3, #2
 801a90e:	73fb      	strb	r3, [r7, #15]
            break;
 801a910:	e000      	b.n	801a914 <SUBGRF_SetRfTxPower+0x50>
            break;
 801a912:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801a914:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801a918:	7bfb      	ldrb	r3, [r7, #15]
 801a91a:	2202      	movs	r2, #2
 801a91c:	4618      	mov	r0, r3
 801a91e:	f7ff fbcd 	bl	801a0bc <SUBGRF_SetTxParams>

    return paSelect;
 801a922:	7bfb      	ldrb	r3, [r7, #15]
}
 801a924:	4618      	mov	r0, r3
 801a926:	3710      	adds	r7, #16
 801a928:	46bd      	mov	sp, r7
 801a92a:	bd80      	pop	{r7, pc}

0801a92c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801a92c:	b480      	push	{r7}
 801a92e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801a930:	2301      	movs	r3, #1
}
 801a932:	4618      	mov	r0, r3
 801a934:	46bd      	mov	sp, r7
 801a936:	bc80      	pop	{r7}
 801a938:	4770      	bx	lr
	...

0801a93c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a93c:	b580      	push	{r7, lr}
 801a93e:	b082      	sub	sp, #8
 801a940:	af00      	add	r7, sp, #0
 801a942:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801a944:	4b03      	ldr	r3, [pc, #12]	@ (801a954 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	2001      	movs	r0, #1
 801a94a:	4798      	blx	r3
}
 801a94c:	bf00      	nop
 801a94e:	3708      	adds	r7, #8
 801a950:	46bd      	mov	sp, r7
 801a952:	bd80      	pop	{r7, pc}
 801a954:	20001534 	.word	0x20001534

0801a958 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a958:	b580      	push	{r7, lr}
 801a95a:	b082      	sub	sp, #8
 801a95c:	af00      	add	r7, sp, #0
 801a95e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801a960:	4b03      	ldr	r3, [pc, #12]	@ (801a970 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	2002      	movs	r0, #2
 801a966:	4798      	blx	r3
}
 801a968:	bf00      	nop
 801a96a:	3708      	adds	r7, #8
 801a96c:	46bd      	mov	sp, r7
 801a96e:	bd80      	pop	{r7, pc}
 801a970:	20001534 	.word	0x20001534

0801a974 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801a974:	b580      	push	{r7, lr}
 801a976:	b082      	sub	sp, #8
 801a978:	af00      	add	r7, sp, #0
 801a97a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801a97c:	4b03      	ldr	r3, [pc, #12]	@ (801a98c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	2040      	movs	r0, #64	@ 0x40
 801a982:	4798      	blx	r3
}
 801a984:	bf00      	nop
 801a986:	3708      	adds	r7, #8
 801a988:	46bd      	mov	sp, r7
 801a98a:	bd80      	pop	{r7, pc}
 801a98c:	20001534 	.word	0x20001534

0801a990 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801a990:	b580      	push	{r7, lr}
 801a992:	b082      	sub	sp, #8
 801a994:	af00      	add	r7, sp, #0
 801a996:	6078      	str	r0, [r7, #4]
 801a998:	460b      	mov	r3, r1
 801a99a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801a99c:	78fb      	ldrb	r3, [r7, #3]
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	d002      	beq.n	801a9a8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801a9a2:	2b01      	cmp	r3, #1
 801a9a4:	d005      	beq.n	801a9b2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801a9a6:	e00a      	b.n	801a9be <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801a9a8:	4b07      	ldr	r3, [pc, #28]	@ (801a9c8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	2080      	movs	r0, #128	@ 0x80
 801a9ae:	4798      	blx	r3
            break;
 801a9b0:	e005      	b.n	801a9be <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801a9b2:	4b05      	ldr	r3, [pc, #20]	@ (801a9c8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801a9ba:	4798      	blx	r3
            break;
 801a9bc:	bf00      	nop
    }
}
 801a9be:	bf00      	nop
 801a9c0:	3708      	adds	r7, #8
 801a9c2:	46bd      	mov	sp, r7
 801a9c4:	bd80      	pop	{r7, pc}
 801a9c6:	bf00      	nop
 801a9c8:	20001534 	.word	0x20001534

0801a9cc <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a9cc:	b580      	push	{r7, lr}
 801a9ce:	b082      	sub	sp, #8
 801a9d0:	af00      	add	r7, sp, #0
 801a9d2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801a9d4:	4b04      	ldr	r3, [pc, #16]	@ (801a9e8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801a9dc:	4798      	blx	r3
}
 801a9de:	bf00      	nop
 801a9e0:	3708      	adds	r7, #8
 801a9e2:	46bd      	mov	sp, r7
 801a9e4:	bd80      	pop	{r7, pc}
 801a9e6:	bf00      	nop
 801a9e8:	20001534 	.word	0x20001534

0801a9ec <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a9ec:	b580      	push	{r7, lr}
 801a9ee:	b082      	sub	sp, #8
 801a9f0:	af00      	add	r7, sp, #0
 801a9f2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801a9f4:	4b03      	ldr	r3, [pc, #12]	@ (801aa04 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	2020      	movs	r0, #32
 801a9fa:	4798      	blx	r3
}
 801a9fc:	bf00      	nop
 801a9fe:	3708      	adds	r7, #8
 801aa00:	46bd      	mov	sp, r7
 801aa02:	bd80      	pop	{r7, pc}
 801aa04:	20001534 	.word	0x20001534

0801aa08 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801aa08:	b580      	push	{r7, lr}
 801aa0a:	b082      	sub	sp, #8
 801aa0c:	af00      	add	r7, sp, #0
 801aa0e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801aa10:	4b03      	ldr	r3, [pc, #12]	@ (801aa20 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801aa12:	681b      	ldr	r3, [r3, #0]
 801aa14:	2004      	movs	r0, #4
 801aa16:	4798      	blx	r3
}
 801aa18:	bf00      	nop
 801aa1a:	3708      	adds	r7, #8
 801aa1c:	46bd      	mov	sp, r7
 801aa1e:	bd80      	pop	{r7, pc}
 801aa20:	20001534 	.word	0x20001534

0801aa24 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b082      	sub	sp, #8
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801aa2c:	4b03      	ldr	r3, [pc, #12]	@ (801aa3c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	2008      	movs	r0, #8
 801aa32:	4798      	blx	r3
}
 801aa34:	bf00      	nop
 801aa36:	3708      	adds	r7, #8
 801aa38:	46bd      	mov	sp, r7
 801aa3a:	bd80      	pop	{r7, pc}
 801aa3c:	20001534 	.word	0x20001534

0801aa40 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801aa40:	b580      	push	{r7, lr}
 801aa42:	b082      	sub	sp, #8
 801aa44:	af00      	add	r7, sp, #0
 801aa46:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801aa48:	4b03      	ldr	r3, [pc, #12]	@ (801aa58 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801aa4a:	681b      	ldr	r3, [r3, #0]
 801aa4c:	2010      	movs	r0, #16
 801aa4e:	4798      	blx	r3
}
 801aa50:	bf00      	nop
 801aa52:	3708      	adds	r7, #8
 801aa54:	46bd      	mov	sp, r7
 801aa56:	bd80      	pop	{r7, pc}
 801aa58:	20001534 	.word	0x20001534

0801aa5c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801aa5c:	b580      	push	{r7, lr}
 801aa5e:	b082      	sub	sp, #8
 801aa60:	af00      	add	r7, sp, #0
 801aa62:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801aa64:	4b04      	ldr	r3, [pc, #16]	@ (801aa78 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801aa6c:	4798      	blx	r3
}
 801aa6e:	bf00      	nop
 801aa70:	3708      	adds	r7, #8
 801aa72:	46bd      	mov	sp, r7
 801aa74:	bd80      	pop	{r7, pc}
 801aa76:	bf00      	nop
 801aa78:	20001534 	.word	0x20001534

0801aa7c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801aa7c:	b580      	push	{r7, lr}
 801aa7e:	b084      	sub	sp, #16
 801aa80:	af00      	add	r7, sp, #0
 801aa82:	4603      	mov	r3, r0
 801aa84:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801aa86:	f7ef fa87 	bl	8009f98 <RBI_IsDCDC>
 801aa8a:	4603      	mov	r3, r0
 801aa8c:	2b01      	cmp	r3, #1
 801aa8e:	d112      	bne.n	801aab6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801aa90:	f640 1023 	movw	r0, #2339	@ 0x923
 801aa94:	f7ff fe0e 	bl	801a6b4 <SUBGRF_ReadRegister>
 801aa98:	4603      	mov	r3, r0
 801aa9a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801aa9c:	7bfb      	ldrb	r3, [r7, #15]
 801aa9e:	f023 0306 	bic.w	r3, r3, #6
 801aaa2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801aaa4:	7bfa      	ldrb	r2, [r7, #15]
 801aaa6:	79fb      	ldrb	r3, [r7, #7]
 801aaa8:	4313      	orrs	r3, r2
 801aaaa:	b2db      	uxtb	r3, r3
 801aaac:	4619      	mov	r1, r3
 801aaae:	f640 1023 	movw	r0, #2339	@ 0x923
 801aab2:	f7ff fdeb 	bl	801a68c <SUBGRF_WriteRegister>
  }
}
 801aab6:	bf00      	nop
 801aab8:	3710      	adds	r7, #16
 801aaba:	46bd      	mov	sp, r7
 801aabc:	bd80      	pop	{r7, pc}
	...

0801aac0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801aac0:	b480      	push	{r7}
 801aac2:	b085      	sub	sp, #20
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d101      	bne.n	801aad2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801aace:	231f      	movs	r3, #31
 801aad0:	e017      	b.n	801ab02 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801aad2:	2300      	movs	r3, #0
 801aad4:	73fb      	strb	r3, [r7, #15]
 801aad6:	e00f      	b.n	801aaf8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801aad8:	7bfb      	ldrb	r3, [r7, #15]
 801aada:	4a0c      	ldr	r2, [pc, #48]	@ (801ab0c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801aadc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801aae0:	687a      	ldr	r2, [r7, #4]
 801aae2:	429a      	cmp	r2, r3
 801aae4:	d205      	bcs.n	801aaf2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801aae6:	7bfb      	ldrb	r3, [r7, #15]
 801aae8:	4a08      	ldr	r2, [pc, #32]	@ (801ab0c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801aaea:	00db      	lsls	r3, r3, #3
 801aaec:	4413      	add	r3, r2
 801aaee:	791b      	ldrb	r3, [r3, #4]
 801aaf0:	e007      	b.n	801ab02 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801aaf2:	7bfb      	ldrb	r3, [r7, #15]
 801aaf4:	3301      	adds	r3, #1
 801aaf6:	73fb      	strb	r3, [r7, #15]
 801aaf8:	7bfb      	ldrb	r3, [r7, #15]
 801aafa:	2b15      	cmp	r3, #21
 801aafc:	d9ec      	bls.n	801aad8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801aafe:	bf00      	nop
 801ab00:	e7fd      	b.n	801aafe <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801ab02:	4618      	mov	r0, r3
 801ab04:	3714      	adds	r7, #20
 801ab06:	46bd      	mov	sp, r7
 801ab08:	bc80      	pop	{r7}
 801ab0a:	4770      	bx	lr
 801ab0c:	0801dd2c 	.word	0x0801dd2c

0801ab10 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801ab10:	b580      	push	{r7, lr}
 801ab12:	b08a      	sub	sp, #40	@ 0x28
 801ab14:	af00      	add	r7, sp, #0
 801ab16:	6078      	str	r0, [r7, #4]
 801ab18:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801ab1a:	4b35      	ldr	r3, [pc, #212]	@ (801abf0 <SUBGRF_GetCFO+0xe0>)
 801ab1c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801ab1e:	f640 0007 	movw	r0, #2055	@ 0x807
 801ab22:	f7ff fdc7 	bl	801a6b4 <SUBGRF_ReadRegister>
 801ab26:	4603      	mov	r3, r0
 801ab28:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801ab2a:	7ffb      	ldrb	r3, [r7, #31]
 801ab2c:	08db      	lsrs	r3, r3, #3
 801ab2e:	b2db      	uxtb	r3, r3
 801ab30:	f003 0303 	and.w	r3, r3, #3
 801ab34:	3328      	adds	r3, #40	@ 0x28
 801ab36:	443b      	add	r3, r7
 801ab38:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801ab3c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801ab3e:	7ffb      	ldrb	r3, [r7, #31]
 801ab40:	f003 0307 	and.w	r3, r3, #7
 801ab44:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801ab46:	7fba      	ldrb	r2, [r7, #30]
 801ab48:	7f7b      	ldrb	r3, [r7, #29]
 801ab4a:	3301      	adds	r3, #1
 801ab4c:	fa02 f303 	lsl.w	r3, r2, r3
 801ab50:	461a      	mov	r2, r3
 801ab52:	4b28      	ldr	r3, [pc, #160]	@ (801abf4 <SUBGRF_GetCFO+0xe4>)
 801ab54:	fbb3 f3f2 	udiv	r3, r3, r2
 801ab58:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801ab5a:	69ba      	ldr	r2, [r7, #24]
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	fbb2 f3f3 	udiv	r3, r2, r3
 801ab62:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801ab64:	2301      	movs	r3, #1
 801ab66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801ab6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ab6e:	697a      	ldr	r2, [r7, #20]
 801ab70:	fb02 f303 	mul.w	r3, r2, r3
 801ab74:	2b07      	cmp	r3, #7
 801ab76:	d802      	bhi.n	801ab7e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801ab78:	2302      	movs	r3, #2
 801ab7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801ab7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ab82:	697a      	ldr	r2, [r7, #20]
 801ab84:	fb02 f303 	mul.w	r3, r2, r3
 801ab88:	2b03      	cmp	r3, #3
 801ab8a:	d802      	bhi.n	801ab92 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801ab8c:	2304      	movs	r3, #4
 801ab8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801ab92:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801ab96:	69bb      	ldr	r3, [r7, #24]
 801ab98:	fb02 f303 	mul.w	r3, r2, r3
 801ab9c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801ab9e:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801aba2:	f7ff fd87 	bl	801a6b4 <SUBGRF_ReadRegister>
 801aba6:	4603      	mov	r3, r0
 801aba8:	021b      	lsls	r3, r3, #8
 801abaa:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801abae:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801abb0:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801abb4:	f7ff fd7e 	bl	801a6b4 <SUBGRF_ReadRegister>
 801abb8:	4603      	mov	r3, r0
 801abba:	461a      	mov	r2, r3
 801abbc:	6a3b      	ldr	r3, [r7, #32]
 801abbe:	4313      	orrs	r3, r2
 801abc0:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801abc2:	6a3b      	ldr	r3, [r7, #32]
 801abc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d005      	beq.n	801abd8 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801abcc:	6a3b      	ldr	r3, [r7, #32]
 801abce:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801abd2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801abd6:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801abd8:	693b      	ldr	r3, [r7, #16]
 801abda:	095b      	lsrs	r3, r3, #5
 801abdc:	6a3a      	ldr	r2, [r7, #32]
 801abde:	fb02 f303 	mul.w	r3, r2, r3
 801abe2:	11da      	asrs	r2, r3, #7
 801abe4:	683b      	ldr	r3, [r7, #0]
 801abe6:	601a      	str	r2, [r3, #0]
}
 801abe8:	bf00      	nop
 801abea:	3728      	adds	r7, #40	@ 0x28
 801abec:	46bd      	mov	sp, r7
 801abee:	bd80      	pop	{r7, pc}
 801abf0:	0c0a0804 	.word	0x0c0a0804
 801abf4:	01e84800 	.word	0x01e84800

0801abf8 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801abf8:	b480      	push	{r7}
 801abfa:	b087      	sub	sp, #28
 801abfc:	af00      	add	r7, sp, #0
 801abfe:	4603      	mov	r3, r0
 801ac00:	60b9      	str	r1, [r7, #8]
 801ac02:	607a      	str	r2, [r7, #4]
 801ac04:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801ac06:	2300      	movs	r3, #0
 801ac08:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801ac0a:	f04f 33ff 	mov.w	r3, #4294967295
 801ac0e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801ac10:	697b      	ldr	r3, [r7, #20]
}
 801ac12:	4618      	mov	r0, r3
 801ac14:	371c      	adds	r7, #28
 801ac16:	46bd      	mov	sp, r7
 801ac18:	bc80      	pop	{r7}
 801ac1a:	4770      	bx	lr

0801ac1c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801ac1c:	b480      	push	{r7}
 801ac1e:	b087      	sub	sp, #28
 801ac20:	af00      	add	r7, sp, #0
 801ac22:	4603      	mov	r3, r0
 801ac24:	60b9      	str	r1, [r7, #8]
 801ac26:	607a      	str	r2, [r7, #4]
 801ac28:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801ac2e:	f04f 33ff 	mov.w	r3, #4294967295
 801ac32:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801ac34:	697b      	ldr	r3, [r7, #20]
}
 801ac36:	4618      	mov	r0, r3
 801ac38:	371c      	adds	r7, #28
 801ac3a:	46bd      	mov	sp, r7
 801ac3c:	bc80      	pop	{r7}
 801ac3e:	4770      	bx	lr

0801ac40 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801ac40:	b480      	push	{r7}
 801ac42:	b085      	sub	sp, #20
 801ac44:	af00      	add	r7, sp, #0
 801ac46:	60f8      	str	r0, [r7, #12]
 801ac48:	60b9      	str	r1, [r7, #8]
 801ac4a:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801ac4c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801ac50:	4618      	mov	r0, r3
 801ac52:	3714      	adds	r7, #20
 801ac54:	46bd      	mov	sp, r7
 801ac56:	bc80      	pop	{r7}
 801ac58:	4770      	bx	lr

0801ac5a <RFW_DeInit>:

void RFW_DeInit( void )
{
 801ac5a:	b480      	push	{r7}
 801ac5c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801ac5e:	bf00      	nop
 801ac60:	46bd      	mov	sp, r7
 801ac62:	bc80      	pop	{r7}
 801ac64:	4770      	bx	lr

0801ac66 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801ac66:	b480      	push	{r7}
 801ac68:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801ac6a:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801ac6c:	4618      	mov	r0, r3
 801ac6e:	46bd      	mov	sp, r7
 801ac70:	bc80      	pop	{r7}
 801ac72:	4770      	bx	lr

0801ac74 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801ac74:	b480      	push	{r7}
 801ac76:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801ac78:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	46bd      	mov	sp, r7
 801ac7e:	bc80      	pop	{r7}
 801ac80:	4770      	bx	lr

0801ac82 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801ac82:	b480      	push	{r7}
 801ac84:	b083      	sub	sp, #12
 801ac86:	af00      	add	r7, sp, #0
 801ac88:	4603      	mov	r3, r0
 801ac8a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801ac8c:	bf00      	nop
 801ac8e:	370c      	adds	r7, #12
 801ac90:	46bd      	mov	sp, r7
 801ac92:	bc80      	pop	{r7}
 801ac94:	4770      	bx	lr

0801ac96 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801ac96:	b480      	push	{r7}
 801ac98:	b087      	sub	sp, #28
 801ac9a:	af00      	add	r7, sp, #0
 801ac9c:	60f8      	str	r0, [r7, #12]
 801ac9e:	460b      	mov	r3, r1
 801aca0:	607a      	str	r2, [r7, #4]
 801aca2:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801aca4:	f04f 33ff 	mov.w	r3, #4294967295
 801aca8:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801acaa:	697b      	ldr	r3, [r7, #20]
}
 801acac:	4618      	mov	r0, r3
 801acae:	371c      	adds	r7, #28
 801acb0:	46bd      	mov	sp, r7
 801acb2:	bc80      	pop	{r7}
 801acb4:	4770      	bx	lr

0801acb6 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801acb6:	b480      	push	{r7}
 801acb8:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801acba:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801acbe:	4618      	mov	r0, r3
 801acc0:	46bd      	mov	sp, r7
 801acc2:	bc80      	pop	{r7}
 801acc4:	4770      	bx	lr

0801acc6 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801acc6:	b480      	push	{r7}
 801acc8:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801acca:	bf00      	nop
 801accc:	46bd      	mov	sp, r7
 801acce:	bc80      	pop	{r7}
 801acd0:	4770      	bx	lr

0801acd2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801acd2:	b480      	push	{r7}
 801acd4:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801acd6:	bf00      	nop
 801acd8:	46bd      	mov	sp, r7
 801acda:	bc80      	pop	{r7}
 801acdc:	4770      	bx	lr

0801acde <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801acde:	b480      	push	{r7}
 801ace0:	b083      	sub	sp, #12
 801ace2:	af00      	add	r7, sp, #0
 801ace4:	4603      	mov	r3, r0
 801ace6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801ace8:	bf00      	nop
 801acea:	370c      	adds	r7, #12
 801acec:	46bd      	mov	sp, r7
 801acee:	bc80      	pop	{r7}
 801acf0:	4770      	bx	lr
	...

0801acf4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801acf4:	b480      	push	{r7}
 801acf6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801acf8:	4b04      	ldr	r3, [pc, #16]	@ (801ad0c <UTIL_LPM_Init+0x18>)
 801acfa:	2200      	movs	r2, #0
 801acfc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801acfe:	4b04      	ldr	r3, [pc, #16]	@ (801ad10 <UTIL_LPM_Init+0x1c>)
 801ad00:	2200      	movs	r2, #0
 801ad02:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801ad04:	bf00      	nop
 801ad06:	46bd      	mov	sp, r7
 801ad08:	bc80      	pop	{r7}
 801ad0a:	4770      	bx	lr
 801ad0c:	20001538 	.word	0x20001538
 801ad10:	2000153c 	.word	0x2000153c

0801ad14 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ad14:	b480      	push	{r7}
 801ad16:	b087      	sub	sp, #28
 801ad18:	af00      	add	r7, sp, #0
 801ad1a:	6078      	str	r0, [r7, #4]
 801ad1c:	460b      	mov	r3, r1
 801ad1e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad20:	f3ef 8310 	mrs	r3, PRIMASK
 801ad24:	613b      	str	r3, [r7, #16]
  return(result);
 801ad26:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ad28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ad2a:	b672      	cpsid	i
}
 801ad2c:	bf00      	nop
  
  switch( state )
 801ad2e:	78fb      	ldrb	r3, [r7, #3]
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d008      	beq.n	801ad46 <UTIL_LPM_SetStopMode+0x32>
 801ad34:	2b01      	cmp	r3, #1
 801ad36:	d10e      	bne.n	801ad56 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801ad38:	4b0d      	ldr	r3, [pc, #52]	@ (801ad70 <UTIL_LPM_SetStopMode+0x5c>)
 801ad3a:	681a      	ldr	r2, [r3, #0]
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	4313      	orrs	r3, r2
 801ad40:	4a0b      	ldr	r2, [pc, #44]	@ (801ad70 <UTIL_LPM_SetStopMode+0x5c>)
 801ad42:	6013      	str	r3, [r2, #0]
      break;
 801ad44:	e008      	b.n	801ad58 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	43da      	mvns	r2, r3
 801ad4a:	4b09      	ldr	r3, [pc, #36]	@ (801ad70 <UTIL_LPM_SetStopMode+0x5c>)
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	4013      	ands	r3, r2
 801ad50:	4a07      	ldr	r2, [pc, #28]	@ (801ad70 <UTIL_LPM_SetStopMode+0x5c>)
 801ad52:	6013      	str	r3, [r2, #0]
      break;
 801ad54:	e000      	b.n	801ad58 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801ad56:	bf00      	nop
 801ad58:	697b      	ldr	r3, [r7, #20]
 801ad5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad5c:	68fb      	ldr	r3, [r7, #12]
 801ad5e:	f383 8810 	msr	PRIMASK, r3
}
 801ad62:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ad64:	bf00      	nop
 801ad66:	371c      	adds	r7, #28
 801ad68:	46bd      	mov	sp, r7
 801ad6a:	bc80      	pop	{r7}
 801ad6c:	4770      	bx	lr
 801ad6e:	bf00      	nop
 801ad70:	20001538 	.word	0x20001538

0801ad74 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ad74:	b480      	push	{r7}
 801ad76:	b087      	sub	sp, #28
 801ad78:	af00      	add	r7, sp, #0
 801ad7a:	6078      	str	r0, [r7, #4]
 801ad7c:	460b      	mov	r3, r1
 801ad7e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad80:	f3ef 8310 	mrs	r3, PRIMASK
 801ad84:	613b      	str	r3, [r7, #16]
  return(result);
 801ad86:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ad88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ad8a:	b672      	cpsid	i
}
 801ad8c:	bf00      	nop
  
  switch(state)
 801ad8e:	78fb      	ldrb	r3, [r7, #3]
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	d008      	beq.n	801ada6 <UTIL_LPM_SetOffMode+0x32>
 801ad94:	2b01      	cmp	r3, #1
 801ad96:	d10e      	bne.n	801adb6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801ad98:	4b0d      	ldr	r3, [pc, #52]	@ (801add0 <UTIL_LPM_SetOffMode+0x5c>)
 801ad9a:	681a      	ldr	r2, [r3, #0]
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	4313      	orrs	r3, r2
 801ada0:	4a0b      	ldr	r2, [pc, #44]	@ (801add0 <UTIL_LPM_SetOffMode+0x5c>)
 801ada2:	6013      	str	r3, [r2, #0]
      break;
 801ada4:	e008      	b.n	801adb8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	43da      	mvns	r2, r3
 801adaa:	4b09      	ldr	r3, [pc, #36]	@ (801add0 <UTIL_LPM_SetOffMode+0x5c>)
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	4013      	ands	r3, r2
 801adb0:	4a07      	ldr	r2, [pc, #28]	@ (801add0 <UTIL_LPM_SetOffMode+0x5c>)
 801adb2:	6013      	str	r3, [r2, #0]
      break;
 801adb4:	e000      	b.n	801adb8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801adb6:	bf00      	nop
 801adb8:	697b      	ldr	r3, [r7, #20]
 801adba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801adbc:	68fb      	ldr	r3, [r7, #12]
 801adbe:	f383 8810 	msr	PRIMASK, r3
}
 801adc2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801adc4:	bf00      	nop
 801adc6:	371c      	adds	r7, #28
 801adc8:	46bd      	mov	sp, r7
 801adca:	bc80      	pop	{r7}
 801adcc:	4770      	bx	lr
 801adce:	bf00      	nop
 801add0:	2000153c 	.word	0x2000153c

0801add4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801add4:	b480      	push	{r7}
 801add6:	b087      	sub	sp, #28
 801add8:	af00      	add	r7, sp, #0
 801adda:	60f8      	str	r0, [r7, #12]
 801addc:	60b9      	str	r1, [r7, #8]
 801adde:	4613      	mov	r3, r2
 801ade0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801ade2:	68fb      	ldr	r3, [r7, #12]
 801ade4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801ade6:	68bb      	ldr	r3, [r7, #8]
 801ade8:	613b      	str	r3, [r7, #16]

  while( size-- )
 801adea:	e007      	b.n	801adfc <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801adec:	693a      	ldr	r2, [r7, #16]
 801adee:	1c53      	adds	r3, r2, #1
 801adf0:	613b      	str	r3, [r7, #16]
 801adf2:	697b      	ldr	r3, [r7, #20]
 801adf4:	1c59      	adds	r1, r3, #1
 801adf6:	6179      	str	r1, [r7, #20]
 801adf8:	7812      	ldrb	r2, [r2, #0]
 801adfa:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801adfc:	88fb      	ldrh	r3, [r7, #6]
 801adfe:	1e5a      	subs	r2, r3, #1
 801ae00:	80fa      	strh	r2, [r7, #6]
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	d1f2      	bne.n	801adec <UTIL_MEM_cpy_8+0x18>
    }
}
 801ae06:	bf00      	nop
 801ae08:	bf00      	nop
 801ae0a:	371c      	adds	r7, #28
 801ae0c:	46bd      	mov	sp, r7
 801ae0e:	bc80      	pop	{r7}
 801ae10:	4770      	bx	lr

0801ae12 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801ae12:	b480      	push	{r7}
 801ae14:	b085      	sub	sp, #20
 801ae16:	af00      	add	r7, sp, #0
 801ae18:	6078      	str	r0, [r7, #4]
 801ae1a:	460b      	mov	r3, r1
 801ae1c:	70fb      	strb	r3, [r7, #3]
 801ae1e:	4613      	mov	r3, r2
 801ae20:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801ae26:	e004      	b.n	801ae32 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801ae28:	68fb      	ldr	r3, [r7, #12]
 801ae2a:	1c5a      	adds	r2, r3, #1
 801ae2c:	60fa      	str	r2, [r7, #12]
 801ae2e:	78fa      	ldrb	r2, [r7, #3]
 801ae30:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801ae32:	883b      	ldrh	r3, [r7, #0]
 801ae34:	1e5a      	subs	r2, r3, #1
 801ae36:	803a      	strh	r2, [r7, #0]
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d1f5      	bne.n	801ae28 <UTIL_MEM_set_8+0x16>
  }
}
 801ae3c:	bf00      	nop
 801ae3e:	bf00      	nop
 801ae40:	3714      	adds	r7, #20
 801ae42:	46bd      	mov	sp, r7
 801ae44:	bc80      	pop	{r7}
 801ae46:	4770      	bx	lr

0801ae48 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801ae48:	b082      	sub	sp, #8
 801ae4a:	b480      	push	{r7}
 801ae4c:	b087      	sub	sp, #28
 801ae4e:	af00      	add	r7, sp, #0
 801ae50:	60f8      	str	r0, [r7, #12]
 801ae52:	1d38      	adds	r0, r7, #4
 801ae54:	e880 0006 	stmia.w	r0, {r1, r2}
 801ae58:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801ae5a:	2300      	movs	r3, #0
 801ae5c:	613b      	str	r3, [r7, #16]
 801ae5e:	2300      	movs	r3, #0
 801ae60:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801ae62:	687a      	ldr	r2, [r7, #4]
 801ae64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae66:	4413      	add	r3, r2
 801ae68:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801ae6a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ae6e:	b29a      	uxth	r2, r3
 801ae70:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801ae74:	b29b      	uxth	r3, r3
 801ae76:	4413      	add	r3, r2
 801ae78:	b29b      	uxth	r3, r3
 801ae7a:	b21b      	sxth	r3, r3
 801ae7c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801ae7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ae82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801ae86:	db0a      	blt.n	801ae9e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801ae88:	693b      	ldr	r3, [r7, #16]
 801ae8a:	3301      	adds	r3, #1
 801ae8c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801ae8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ae92:	b29b      	uxth	r3, r3
 801ae94:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801ae98:	b29b      	uxth	r3, r3
 801ae9a:	b21b      	sxth	r3, r3
 801ae9c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	461a      	mov	r2, r3
 801aea2:	f107 0310 	add.w	r3, r7, #16
 801aea6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aeaa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801aeae:	68f8      	ldr	r0, [r7, #12]
 801aeb0:	371c      	adds	r7, #28
 801aeb2:	46bd      	mov	sp, r7
 801aeb4:	bc80      	pop	{r7}
 801aeb6:	b002      	add	sp, #8
 801aeb8:	4770      	bx	lr

0801aeba <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801aeba:	b082      	sub	sp, #8
 801aebc:	b480      	push	{r7}
 801aebe:	b087      	sub	sp, #28
 801aec0:	af00      	add	r7, sp, #0
 801aec2:	60f8      	str	r0, [r7, #12]
 801aec4:	1d38      	adds	r0, r7, #4
 801aec6:	e880 0006 	stmia.w	r0, {r1, r2}
 801aeca:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801aecc:	2300      	movs	r3, #0
 801aece:	613b      	str	r3, [r7, #16]
 801aed0:	2300      	movs	r3, #0
 801aed2:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801aed4:	687a      	ldr	r2, [r7, #4]
 801aed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aed8:	1ad3      	subs	r3, r2, r3
 801aeda:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801aedc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801aee0:	b29a      	uxth	r2, r3
 801aee2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801aee6:	b29b      	uxth	r3, r3
 801aee8:	1ad3      	subs	r3, r2, r3
 801aeea:	b29b      	uxth	r3, r3
 801aeec:	b21b      	sxth	r3, r3
 801aeee:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801aef0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	da0a      	bge.n	801af0e <SysTimeSub+0x54>
  {
    c.Seconds--;
 801aef8:	693b      	ldr	r3, [r7, #16]
 801aefa:	3b01      	subs	r3, #1
 801aefc:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801aefe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801af02:	b29b      	uxth	r3, r3
 801af04:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801af08:	b29b      	uxth	r3, r3
 801af0a:	b21b      	sxth	r3, r3
 801af0c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	461a      	mov	r2, r3
 801af12:	f107 0310 	add.w	r3, r7, #16
 801af16:	e893 0003 	ldmia.w	r3, {r0, r1}
 801af1a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801af1e:	68f8      	ldr	r0, [r7, #12]
 801af20:	371c      	adds	r7, #28
 801af22:	46bd      	mov	sp, r7
 801af24:	bc80      	pop	{r7}
 801af26:	b002      	add	sp, #8
 801af28:	4770      	bx	lr
	...

0801af2c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801af2c:	b580      	push	{r7, lr}
 801af2e:	b088      	sub	sp, #32
 801af30:	af02      	add	r7, sp, #8
 801af32:	463b      	mov	r3, r7
 801af34:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801af38:	2300      	movs	r3, #0
 801af3a:	60bb      	str	r3, [r7, #8]
 801af3c:	2300      	movs	r3, #0
 801af3e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801af40:	4b10      	ldr	r3, [pc, #64]	@ (801af84 <SysTimeSet+0x58>)
 801af42:	691b      	ldr	r3, [r3, #16]
 801af44:	f107 0208 	add.w	r2, r7, #8
 801af48:	3204      	adds	r2, #4
 801af4a:	4610      	mov	r0, r2
 801af4c:	4798      	blx	r3
 801af4e:	4603      	mov	r3, r0
 801af50:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801af52:	f107 0010 	add.w	r0, r7, #16
 801af56:	68fb      	ldr	r3, [r7, #12]
 801af58:	9300      	str	r3, [sp, #0]
 801af5a:	68bb      	ldr	r3, [r7, #8]
 801af5c:	463a      	mov	r2, r7
 801af5e:	ca06      	ldmia	r2, {r1, r2}
 801af60:	f7ff ffab 	bl	801aeba <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801af64:	4b07      	ldr	r3, [pc, #28]	@ (801af84 <SysTimeSet+0x58>)
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	693a      	ldr	r2, [r7, #16]
 801af6a:	4610      	mov	r0, r2
 801af6c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801af6e:	4b05      	ldr	r3, [pc, #20]	@ (801af84 <SysTimeSet+0x58>)
 801af70:	689b      	ldr	r3, [r3, #8]
 801af72:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801af76:	4610      	mov	r0, r2
 801af78:	4798      	blx	r3
}
 801af7a:	bf00      	nop
 801af7c:	3718      	adds	r7, #24
 801af7e:	46bd      	mov	sp, r7
 801af80:	bd80      	pop	{r7, pc}
 801af82:	bf00      	nop
 801af84:	0801d800 	.word	0x0801d800

0801af88 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801af88:	b580      	push	{r7, lr}
 801af8a:	b08a      	sub	sp, #40	@ 0x28
 801af8c:	af02      	add	r7, sp, #8
 801af8e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801af90:	2300      	movs	r3, #0
 801af92:	61bb      	str	r3, [r7, #24]
 801af94:	2300      	movs	r3, #0
 801af96:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801af98:	2300      	movs	r3, #0
 801af9a:	613b      	str	r3, [r7, #16]
 801af9c:	2300      	movs	r3, #0
 801af9e:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801afa0:	4b14      	ldr	r3, [pc, #80]	@ (801aff4 <SysTimeGet+0x6c>)
 801afa2:	691b      	ldr	r3, [r3, #16]
 801afa4:	f107 0218 	add.w	r2, r7, #24
 801afa8:	3204      	adds	r2, #4
 801afaa:	4610      	mov	r0, r2
 801afac:	4798      	blx	r3
 801afae:	4603      	mov	r3, r0
 801afb0:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801afb2:	4b10      	ldr	r3, [pc, #64]	@ (801aff4 <SysTimeGet+0x6c>)
 801afb4:	68db      	ldr	r3, [r3, #12]
 801afb6:	4798      	blx	r3
 801afb8:	4603      	mov	r3, r0
 801afba:	b21b      	sxth	r3, r3
 801afbc:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801afbe:	4b0d      	ldr	r3, [pc, #52]	@ (801aff4 <SysTimeGet+0x6c>)
 801afc0:	685b      	ldr	r3, [r3, #4]
 801afc2:	4798      	blx	r3
 801afc4:	4603      	mov	r3, r0
 801afc6:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801afc8:	f107 0010 	add.w	r0, r7, #16
 801afcc:	69fb      	ldr	r3, [r7, #28]
 801afce:	9300      	str	r3, [sp, #0]
 801afd0:	69bb      	ldr	r3, [r7, #24]
 801afd2:	f107 0208 	add.w	r2, r7, #8
 801afd6:	ca06      	ldmia	r2, {r1, r2}
 801afd8:	f7ff ff36 	bl	801ae48 <SysTimeAdd>

  return sysTime;
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	461a      	mov	r2, r3
 801afe0:	f107 0310 	add.w	r3, r7, #16
 801afe4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801afe8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801afec:	6878      	ldr	r0, [r7, #4]
 801afee:	3720      	adds	r7, #32
 801aff0:	46bd      	mov	sp, r7
 801aff2:	bd80      	pop	{r7, pc}
 801aff4:	0801d800 	.word	0x0801d800

0801aff8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801aff8:	b580      	push	{r7, lr}
 801affa:	b084      	sub	sp, #16
 801affc:	af00      	add	r7, sp, #0
 801affe:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b000:	2300      	movs	r3, #0
 801b002:	60bb      	str	r3, [r7, #8]
 801b004:	2300      	movs	r3, #0
 801b006:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b008:	4b0a      	ldr	r3, [pc, #40]	@ (801b034 <SysTimeGetMcuTime+0x3c>)
 801b00a:	691b      	ldr	r3, [r3, #16]
 801b00c:	f107 0208 	add.w	r2, r7, #8
 801b010:	3204      	adds	r2, #4
 801b012:	4610      	mov	r0, r2
 801b014:	4798      	blx	r3
 801b016:	4603      	mov	r3, r0
 801b018:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	461a      	mov	r2, r3
 801b01e:	f107 0308 	add.w	r3, r7, #8
 801b022:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b026:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b02a:	6878      	ldr	r0, [r7, #4]
 801b02c:	3710      	adds	r7, #16
 801b02e:	46bd      	mov	sp, r7
 801b030:	bd80      	pop	{r7, pc}
 801b032:	bf00      	nop
 801b034:	0801d800 	.word	0x0801d800

0801b038 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801b038:	b580      	push	{r7, lr}
 801b03a:	b088      	sub	sp, #32
 801b03c:	af02      	add	r7, sp, #8
 801b03e:	463b      	mov	r3, r7
 801b040:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b044:	4b0f      	ldr	r3, [pc, #60]	@ (801b084 <SysTimeToMs+0x4c>)
 801b046:	68db      	ldr	r3, [r3, #12]
 801b048:	4798      	blx	r3
 801b04a:	4603      	mov	r3, r0
 801b04c:	b21b      	sxth	r3, r3
 801b04e:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b050:	4b0c      	ldr	r3, [pc, #48]	@ (801b084 <SysTimeToMs+0x4c>)
 801b052:	685b      	ldr	r3, [r3, #4]
 801b054:	4798      	blx	r3
 801b056:	4603      	mov	r3, r0
 801b058:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801b05a:	f107 0008 	add.w	r0, r7, #8
 801b05e:	697b      	ldr	r3, [r7, #20]
 801b060:	9300      	str	r3, [sp, #0]
 801b062:	693b      	ldr	r3, [r7, #16]
 801b064:	463a      	mov	r2, r7
 801b066:	ca06      	ldmia	r2, {r1, r2}
 801b068:	f7ff ff27 	bl	801aeba <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801b06c:	68bb      	ldr	r3, [r7, #8]
 801b06e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801b072:	fb02 f303 	mul.w	r3, r2, r3
 801b076:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801b07a:	4413      	add	r3, r2
}
 801b07c:	4618      	mov	r0, r3
 801b07e:	3718      	adds	r7, #24
 801b080:	46bd      	mov	sp, r7
 801b082:	bd80      	pop	{r7, pc}
 801b084:	0801d800 	.word	0x0801d800

0801b088 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801b088:	b580      	push	{r7, lr}
 801b08a:	b08a      	sub	sp, #40	@ 0x28
 801b08c:	af02      	add	r7, sp, #8
 801b08e:	6078      	str	r0, [r7, #4]
 801b090:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801b092:	683b      	ldr	r3, [r7, #0]
 801b094:	4a19      	ldr	r2, [pc, #100]	@ (801b0fc <SysTimeFromMs+0x74>)
 801b096:	fba2 2303 	umull	r2, r3, r2, r3
 801b09a:	099b      	lsrs	r3, r3, #6
 801b09c:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801b09e:	69fb      	ldr	r3, [r7, #28]
 801b0a0:	617b      	str	r3, [r7, #20]
 801b0a2:	683b      	ldr	r3, [r7, #0]
 801b0a4:	b29a      	uxth	r2, r3
 801b0a6:	69fb      	ldr	r3, [r7, #28]
 801b0a8:	b29b      	uxth	r3, r3
 801b0aa:	4619      	mov	r1, r3
 801b0ac:	0149      	lsls	r1, r1, #5
 801b0ae:	1ac9      	subs	r1, r1, r3
 801b0b0:	0089      	lsls	r1, r1, #2
 801b0b2:	440b      	add	r3, r1
 801b0b4:	00db      	lsls	r3, r3, #3
 801b0b6:	b29b      	uxth	r3, r3
 801b0b8:	1ad3      	subs	r3, r2, r3
 801b0ba:	b29b      	uxth	r3, r3
 801b0bc:	b21b      	sxth	r3, r3
 801b0be:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801b0c0:	f107 030c 	add.w	r3, r7, #12
 801b0c4:	2200      	movs	r2, #0
 801b0c6:	601a      	str	r2, [r3, #0]
 801b0c8:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b0ca:	4b0d      	ldr	r3, [pc, #52]	@ (801b100 <SysTimeFromMs+0x78>)
 801b0cc:	68db      	ldr	r3, [r3, #12]
 801b0ce:	4798      	blx	r3
 801b0d0:	4603      	mov	r3, r0
 801b0d2:	b21b      	sxth	r3, r3
 801b0d4:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b0d6:	4b0a      	ldr	r3, [pc, #40]	@ (801b100 <SysTimeFromMs+0x78>)
 801b0d8:	685b      	ldr	r3, [r3, #4]
 801b0da:	4798      	blx	r3
 801b0dc:	4603      	mov	r3, r0
 801b0de:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801b0e0:	6878      	ldr	r0, [r7, #4]
 801b0e2:	693b      	ldr	r3, [r7, #16]
 801b0e4:	9300      	str	r3, [sp, #0]
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	f107 0214 	add.w	r2, r7, #20
 801b0ec:	ca06      	ldmia	r2, {r1, r2}
 801b0ee:	f7ff feab 	bl	801ae48 <SysTimeAdd>
}
 801b0f2:	6878      	ldr	r0, [r7, #4]
 801b0f4:	3720      	adds	r7, #32
 801b0f6:	46bd      	mov	sp, r7
 801b0f8:	bd80      	pop	{r7, pc}
 801b0fa:	bf00      	nop
 801b0fc:	10624dd3 	.word	0x10624dd3
 801b100:	0801d800 	.word	0x0801d800

0801b104 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801b104:	b480      	push	{r7}
 801b106:	b085      	sub	sp, #20
 801b108:	af00      	add	r7, sp, #0
 801b10a:	6078      	str	r0, [r7, #4]
  int i = 0;
 801b10c:	2300      	movs	r3, #0
 801b10e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801b110:	e00e      	b.n	801b130 <ee_skip_atoi+0x2c>
 801b112:	68fa      	ldr	r2, [r7, #12]
 801b114:	4613      	mov	r3, r2
 801b116:	009b      	lsls	r3, r3, #2
 801b118:	4413      	add	r3, r2
 801b11a:	005b      	lsls	r3, r3, #1
 801b11c:	4618      	mov	r0, r3
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	681b      	ldr	r3, [r3, #0]
 801b122:	1c59      	adds	r1, r3, #1
 801b124:	687a      	ldr	r2, [r7, #4]
 801b126:	6011      	str	r1, [r2, #0]
 801b128:	781b      	ldrb	r3, [r3, #0]
 801b12a:	4403      	add	r3, r0
 801b12c:	3b30      	subs	r3, #48	@ 0x30
 801b12e:	60fb      	str	r3, [r7, #12]
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	681b      	ldr	r3, [r3, #0]
 801b134:	781b      	ldrb	r3, [r3, #0]
 801b136:	2b2f      	cmp	r3, #47	@ 0x2f
 801b138:	d904      	bls.n	801b144 <ee_skip_atoi+0x40>
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	781b      	ldrb	r3, [r3, #0]
 801b140:	2b39      	cmp	r3, #57	@ 0x39
 801b142:	d9e6      	bls.n	801b112 <ee_skip_atoi+0xe>
  return i;
 801b144:	68fb      	ldr	r3, [r7, #12]
}
 801b146:	4618      	mov	r0, r3
 801b148:	3714      	adds	r7, #20
 801b14a:	46bd      	mov	sp, r7
 801b14c:	bc80      	pop	{r7}
 801b14e:	4770      	bx	lr

0801b150 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801b150:	b480      	push	{r7}
 801b152:	b099      	sub	sp, #100	@ 0x64
 801b154:	af00      	add	r7, sp, #0
 801b156:	60f8      	str	r0, [r7, #12]
 801b158:	60b9      	str	r1, [r7, #8]
 801b15a:	607a      	str	r2, [r7, #4]
 801b15c:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801b15e:	4b71      	ldr	r3, [pc, #452]	@ (801b324 <ee_number+0x1d4>)
 801b160:	681b      	ldr	r3, [r3, #0]
 801b162:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801b164:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d002      	beq.n	801b174 <ee_number+0x24>
 801b16e:	4b6e      	ldr	r3, [pc, #440]	@ (801b328 <ee_number+0x1d8>)
 801b170:	681b      	ldr	r3, [r3, #0]
 801b172:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801b174:	683b      	ldr	r3, [r7, #0]
 801b176:	2b01      	cmp	r3, #1
 801b178:	dd02      	ble.n	801b180 <ee_number+0x30>
 801b17a:	683b      	ldr	r3, [r7, #0]
 801b17c:	2b24      	cmp	r3, #36	@ 0x24
 801b17e:	dd01      	ble.n	801b184 <ee_number+0x34>
 801b180:	2300      	movs	r3, #0
 801b182:	e0ca      	b.n	801b31a <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801b184:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b186:	f003 0301 	and.w	r3, r3, #1
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d001      	beq.n	801b192 <ee_number+0x42>
 801b18e:	2330      	movs	r3, #48	@ 0x30
 801b190:	e000      	b.n	801b194 <ee_number+0x44>
 801b192:	2320      	movs	r3, #32
 801b194:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801b198:	2300      	movs	r3, #0
 801b19a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801b19e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b1a0:	f003 0302 	and.w	r3, r3, #2
 801b1a4:	2b00      	cmp	r3, #0
 801b1a6:	d00b      	beq.n	801b1c0 <ee_number+0x70>
  {
    if (num < 0)
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	da08      	bge.n	801b1c0 <ee_number+0x70>
    {
      sign = '-';
 801b1ae:	232d      	movs	r3, #45	@ 0x2d
 801b1b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	425b      	negs	r3, r3
 801b1b8:	607b      	str	r3, [r7, #4]
      size--;
 801b1ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b1bc:	3b01      	subs	r3, #1
 801b1be:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801b1c0:	2300      	movs	r3, #0
 801b1c2:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d11e      	bne.n	801b208 <ee_number+0xb8>
    tmp[i++] = '0';
 801b1ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b1cc:	1c5a      	adds	r2, r3, #1
 801b1ce:	657a      	str	r2, [r7, #84]	@ 0x54
 801b1d0:	3360      	adds	r3, #96	@ 0x60
 801b1d2:	443b      	add	r3, r7
 801b1d4:	2230      	movs	r2, #48	@ 0x30
 801b1d6:	f803 2c50 	strb.w	r2, [r3, #-80]
 801b1da:	e018      	b.n	801b20e <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	683a      	ldr	r2, [r7, #0]
 801b1e0:	fbb3 f1f2 	udiv	r1, r3, r2
 801b1e4:	fb01 f202 	mul.w	r2, r1, r2
 801b1e8:	1a9b      	subs	r3, r3, r2
 801b1ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b1ec:	441a      	add	r2, r3
 801b1ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b1f0:	1c59      	adds	r1, r3, #1
 801b1f2:	6579      	str	r1, [r7, #84]	@ 0x54
 801b1f4:	7812      	ldrb	r2, [r2, #0]
 801b1f6:	3360      	adds	r3, #96	@ 0x60
 801b1f8:	443b      	add	r3, r7
 801b1fa:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801b1fe:	687a      	ldr	r2, [r7, #4]
 801b200:	683b      	ldr	r3, [r7, #0]
 801b202:	fbb2 f3f3 	udiv	r3, r2, r3
 801b206:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d1e6      	bne.n	801b1dc <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801b20e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b212:	429a      	cmp	r2, r3
 801b214:	dd01      	ble.n	801b21a <ee_number+0xca>
 801b216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b218:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801b21a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801b21c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b21e:	1ad3      	subs	r3, r2, r3
 801b220:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801b222:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b224:	f003 0301 	and.w	r3, r3, #1
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d112      	bne.n	801b252 <ee_number+0x102>
 801b22c:	e00c      	b.n	801b248 <ee_number+0xf8>
 801b22e:	68fb      	ldr	r3, [r7, #12]
 801b230:	1c5a      	adds	r2, r3, #1
 801b232:	60fa      	str	r2, [r7, #12]
 801b234:	2220      	movs	r2, #32
 801b236:	701a      	strb	r2, [r3, #0]
 801b238:	68bb      	ldr	r3, [r7, #8]
 801b23a:	3b01      	subs	r3, #1
 801b23c:	60bb      	str	r3, [r7, #8]
 801b23e:	68bb      	ldr	r3, [r7, #8]
 801b240:	2b00      	cmp	r3, #0
 801b242:	d101      	bne.n	801b248 <ee_number+0xf8>
 801b244:	68fb      	ldr	r3, [r7, #12]
 801b246:	e068      	b.n	801b31a <ee_number+0x1ca>
 801b248:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b24a:	1e5a      	subs	r2, r3, #1
 801b24c:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b24e:	2b00      	cmp	r3, #0
 801b250:	dced      	bgt.n	801b22e <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801b252:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801b256:	2b00      	cmp	r3, #0
 801b258:	d01b      	beq.n	801b292 <ee_number+0x142>
 801b25a:	68fb      	ldr	r3, [r7, #12]
 801b25c:	1c5a      	adds	r2, r3, #1
 801b25e:	60fa      	str	r2, [r7, #12]
 801b260:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801b264:	701a      	strb	r2, [r3, #0]
 801b266:	68bb      	ldr	r3, [r7, #8]
 801b268:	3b01      	subs	r3, #1
 801b26a:	60bb      	str	r3, [r7, #8]
 801b26c:	68bb      	ldr	r3, [r7, #8]
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d10f      	bne.n	801b292 <ee_number+0x142>
 801b272:	68fb      	ldr	r3, [r7, #12]
 801b274:	e051      	b.n	801b31a <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801b276:	68fb      	ldr	r3, [r7, #12]
 801b278:	1c5a      	adds	r2, r3, #1
 801b27a:	60fa      	str	r2, [r7, #12]
 801b27c:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801b280:	701a      	strb	r2, [r3, #0]
 801b282:	68bb      	ldr	r3, [r7, #8]
 801b284:	3b01      	subs	r3, #1
 801b286:	60bb      	str	r3, [r7, #8]
 801b288:	68bb      	ldr	r3, [r7, #8]
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d101      	bne.n	801b292 <ee_number+0x142>
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	e043      	b.n	801b31a <ee_number+0x1ca>
 801b292:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b294:	1e5a      	subs	r2, r3, #1
 801b296:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b298:	2b00      	cmp	r3, #0
 801b29a:	dcec      	bgt.n	801b276 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801b29c:	e00c      	b.n	801b2b8 <ee_number+0x168>
 801b29e:	68fb      	ldr	r3, [r7, #12]
 801b2a0:	1c5a      	adds	r2, r3, #1
 801b2a2:	60fa      	str	r2, [r7, #12]
 801b2a4:	2230      	movs	r2, #48	@ 0x30
 801b2a6:	701a      	strb	r2, [r3, #0]
 801b2a8:	68bb      	ldr	r3, [r7, #8]
 801b2aa:	3b01      	subs	r3, #1
 801b2ac:	60bb      	str	r3, [r7, #8]
 801b2ae:	68bb      	ldr	r3, [r7, #8]
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d101      	bne.n	801b2b8 <ee_number+0x168>
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	e030      	b.n	801b31a <ee_number+0x1ca>
 801b2b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b2ba:	1e5a      	subs	r2, r3, #1
 801b2bc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801b2be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b2c0:	429a      	cmp	r2, r3
 801b2c2:	dbec      	blt.n	801b29e <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801b2c4:	e010      	b.n	801b2e8 <ee_number+0x198>
 801b2c6:	68fb      	ldr	r3, [r7, #12]
 801b2c8:	1c5a      	adds	r2, r3, #1
 801b2ca:	60fa      	str	r2, [r7, #12]
 801b2cc:	f107 0110 	add.w	r1, r7, #16
 801b2d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b2d2:	440a      	add	r2, r1
 801b2d4:	7812      	ldrb	r2, [r2, #0]
 801b2d6:	701a      	strb	r2, [r3, #0]
 801b2d8:	68bb      	ldr	r3, [r7, #8]
 801b2da:	3b01      	subs	r3, #1
 801b2dc:	60bb      	str	r3, [r7, #8]
 801b2de:	68bb      	ldr	r3, [r7, #8]
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d101      	bne.n	801b2e8 <ee_number+0x198>
 801b2e4:	68fb      	ldr	r3, [r7, #12]
 801b2e6:	e018      	b.n	801b31a <ee_number+0x1ca>
 801b2e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b2ea:	1e5a      	subs	r2, r3, #1
 801b2ec:	657a      	str	r2, [r7, #84]	@ 0x54
 801b2ee:	2b00      	cmp	r3, #0
 801b2f0:	dce9      	bgt.n	801b2c6 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801b2f2:	e00c      	b.n	801b30e <ee_number+0x1be>
 801b2f4:	68fb      	ldr	r3, [r7, #12]
 801b2f6:	1c5a      	adds	r2, r3, #1
 801b2f8:	60fa      	str	r2, [r7, #12]
 801b2fa:	2220      	movs	r2, #32
 801b2fc:	701a      	strb	r2, [r3, #0]
 801b2fe:	68bb      	ldr	r3, [r7, #8]
 801b300:	3b01      	subs	r3, #1
 801b302:	60bb      	str	r3, [r7, #8]
 801b304:	68bb      	ldr	r3, [r7, #8]
 801b306:	2b00      	cmp	r3, #0
 801b308:	d101      	bne.n	801b30e <ee_number+0x1be>
 801b30a:	68fb      	ldr	r3, [r7, #12]
 801b30c:	e005      	b.n	801b31a <ee_number+0x1ca>
 801b30e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b310:	1e5a      	subs	r2, r3, #1
 801b312:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b314:	2b00      	cmp	r3, #0
 801b316:	dced      	bgt.n	801b2f4 <ee_number+0x1a4>

  return str;
 801b318:	68fb      	ldr	r3, [r7, #12]
}
 801b31a:	4618      	mov	r0, r3
 801b31c:	3764      	adds	r7, #100	@ 0x64
 801b31e:	46bd      	mov	sp, r7
 801b320:	bc80      	pop	{r7}
 801b322:	4770      	bx	lr
 801b324:	20000128 	.word	0x20000128
 801b328:	2000012c 	.word	0x2000012c

0801b32c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801b32c:	b580      	push	{r7, lr}
 801b32e:	b092      	sub	sp, #72	@ 0x48
 801b330:	af04      	add	r7, sp, #16
 801b332:	60f8      	str	r0, [r7, #12]
 801b334:	60b9      	str	r1, [r7, #8]
 801b336:	607a      	str	r2, [r7, #4]
 801b338:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801b33a:	68bb      	ldr	r3, [r7, #8]
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	dc01      	bgt.n	801b344 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801b340:	2300      	movs	r3, #0
 801b342:	e13e      	b.n	801b5c2 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b344:	68fb      	ldr	r3, [r7, #12]
 801b346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b348:	e128      	b.n	801b59c <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801b34a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b34c:	68fb      	ldr	r3, [r7, #12]
 801b34e:	1ad2      	subs	r2, r2, r3
 801b350:	68bb      	ldr	r3, [r7, #8]
 801b352:	3b01      	subs	r3, #1
 801b354:	429a      	cmp	r2, r3
 801b356:	f280 812e 	bge.w	801b5b6 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	781b      	ldrb	r3, [r3, #0]
 801b35e:	2b25      	cmp	r3, #37	@ 0x25
 801b360:	d006      	beq.n	801b370 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801b362:	687a      	ldr	r2, [r7, #4]
 801b364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b366:	1c59      	adds	r1, r3, #1
 801b368:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b36a:	7812      	ldrb	r2, [r2, #0]
 801b36c:	701a      	strb	r2, [r3, #0]
      continue;
 801b36e:	e112      	b.n	801b596 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801b370:	2300      	movs	r3, #0
 801b372:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	3301      	adds	r3, #1
 801b378:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	781b      	ldrb	r3, [r3, #0]
 801b37e:	2b30      	cmp	r3, #48	@ 0x30
 801b380:	d103      	bne.n	801b38a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801b382:	6a3b      	ldr	r3, [r7, #32]
 801b384:	f043 0301 	orr.w	r3, r3, #1
 801b388:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801b38a:	f04f 33ff 	mov.w	r3, #4294967295
 801b38e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	781b      	ldrb	r3, [r3, #0]
 801b394:	2b2f      	cmp	r3, #47	@ 0x2f
 801b396:	d908      	bls.n	801b3aa <tiny_vsnprintf_like+0x7e>
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	781b      	ldrb	r3, [r3, #0]
 801b39c:	2b39      	cmp	r3, #57	@ 0x39
 801b39e:	d804      	bhi.n	801b3aa <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801b3a0:	1d3b      	adds	r3, r7, #4
 801b3a2:	4618      	mov	r0, r3
 801b3a4:	f7ff feae 	bl	801b104 <ee_skip_atoi>
 801b3a8:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801b3aa:	f04f 33ff 	mov.w	r3, #4294967295
 801b3ae:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801b3b0:	f04f 33ff 	mov.w	r3, #4294967295
 801b3b4:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801b3b6:	230a      	movs	r3, #10
 801b3b8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	781b      	ldrb	r3, [r3, #0]
 801b3be:	3b58      	subs	r3, #88	@ 0x58
 801b3c0:	2b20      	cmp	r3, #32
 801b3c2:	f200 8094 	bhi.w	801b4ee <tiny_vsnprintf_like+0x1c2>
 801b3c6:	a201      	add	r2, pc, #4	@ (adr r2, 801b3cc <tiny_vsnprintf_like+0xa0>)
 801b3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3cc:	0801b4d7 	.word	0x0801b4d7
 801b3d0:	0801b4ef 	.word	0x0801b4ef
 801b3d4:	0801b4ef 	.word	0x0801b4ef
 801b3d8:	0801b4ef 	.word	0x0801b4ef
 801b3dc:	0801b4ef 	.word	0x0801b4ef
 801b3e0:	0801b4ef 	.word	0x0801b4ef
 801b3e4:	0801b4ef 	.word	0x0801b4ef
 801b3e8:	0801b4ef 	.word	0x0801b4ef
 801b3ec:	0801b4ef 	.word	0x0801b4ef
 801b3f0:	0801b4ef 	.word	0x0801b4ef
 801b3f4:	0801b4ef 	.word	0x0801b4ef
 801b3f8:	0801b45b 	.word	0x0801b45b
 801b3fc:	0801b4e5 	.word	0x0801b4e5
 801b400:	0801b4ef 	.word	0x0801b4ef
 801b404:	0801b4ef 	.word	0x0801b4ef
 801b408:	0801b4ef 	.word	0x0801b4ef
 801b40c:	0801b4ef 	.word	0x0801b4ef
 801b410:	0801b4e5 	.word	0x0801b4e5
 801b414:	0801b4ef 	.word	0x0801b4ef
 801b418:	0801b4ef 	.word	0x0801b4ef
 801b41c:	0801b4ef 	.word	0x0801b4ef
 801b420:	0801b4ef 	.word	0x0801b4ef
 801b424:	0801b4ef 	.word	0x0801b4ef
 801b428:	0801b4ef 	.word	0x0801b4ef
 801b42c:	0801b4ef 	.word	0x0801b4ef
 801b430:	0801b4ef 	.word	0x0801b4ef
 801b434:	0801b4ef 	.word	0x0801b4ef
 801b438:	0801b47b 	.word	0x0801b47b
 801b43c:	0801b4ef 	.word	0x0801b4ef
 801b440:	0801b53b 	.word	0x0801b53b
 801b444:	0801b4ef 	.word	0x0801b4ef
 801b448:	0801b4ef 	.word	0x0801b4ef
 801b44c:	0801b4df 	.word	0x0801b4df
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801b450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b452:	1c5a      	adds	r2, r3, #1
 801b454:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b456:	2220      	movs	r2, #32
 801b458:	701a      	strb	r2, [r3, #0]
 801b45a:	69fb      	ldr	r3, [r7, #28]
 801b45c:	3b01      	subs	r3, #1
 801b45e:	61fb      	str	r3, [r7, #28]
 801b460:	69fb      	ldr	r3, [r7, #28]
 801b462:	2b00      	cmp	r3, #0
 801b464:	dcf4      	bgt.n	801b450 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801b466:	683b      	ldr	r3, [r7, #0]
 801b468:	1d1a      	adds	r2, r3, #4
 801b46a:	603a      	str	r2, [r7, #0]
 801b46c:	6819      	ldr	r1, [r3, #0]
 801b46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b470:	1c5a      	adds	r2, r3, #1
 801b472:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b474:	b2ca      	uxtb	r2, r1
 801b476:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801b478:	e08d      	b.n	801b596 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801b47a:	683b      	ldr	r3, [r7, #0]
 801b47c:	1d1a      	adds	r2, r3, #4
 801b47e:	603a      	str	r2, [r7, #0]
 801b480:	681b      	ldr	r3, [r3, #0]
 801b482:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801b484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b486:	2b00      	cmp	r3, #0
 801b488:	d101      	bne.n	801b48e <tiny_vsnprintf_like+0x162>
 801b48a:	4b50      	ldr	r3, [pc, #320]	@ (801b5cc <tiny_vsnprintf_like+0x2a0>)
 801b48c:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801b48e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b490:	f7e4 fe76 	bl	8000180 <strlen>
 801b494:	4603      	mov	r3, r0
 801b496:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801b498:	e004      	b.n	801b4a4 <tiny_vsnprintf_like+0x178>
 801b49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b49c:	1c5a      	adds	r2, r3, #1
 801b49e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b4a0:	2220      	movs	r2, #32
 801b4a2:	701a      	strb	r2, [r3, #0]
 801b4a4:	69fb      	ldr	r3, [r7, #28]
 801b4a6:	1e5a      	subs	r2, r3, #1
 801b4a8:	61fa      	str	r2, [r7, #28]
 801b4aa:	693a      	ldr	r2, [r7, #16]
 801b4ac:	429a      	cmp	r2, r3
 801b4ae:	dbf4      	blt.n	801b49a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801b4b0:	2300      	movs	r3, #0
 801b4b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b4b4:	e00a      	b.n	801b4cc <tiny_vsnprintf_like+0x1a0>
 801b4b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b4b8:	1c53      	adds	r3, r2, #1
 801b4ba:	627b      	str	r3, [r7, #36]	@ 0x24
 801b4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4be:	1c59      	adds	r1, r3, #1
 801b4c0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b4c2:	7812      	ldrb	r2, [r2, #0]
 801b4c4:	701a      	strb	r2, [r3, #0]
 801b4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b4c8:	3301      	adds	r3, #1
 801b4ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b4cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b4ce:	693b      	ldr	r3, [r7, #16]
 801b4d0:	429a      	cmp	r2, r3
 801b4d2:	dbf0      	blt.n	801b4b6 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801b4d4:	e05f      	b.n	801b596 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801b4d6:	6a3b      	ldr	r3, [r7, #32]
 801b4d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b4dc:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801b4de:	2310      	movs	r3, #16
 801b4e0:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801b4e2:	e02b      	b.n	801b53c <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801b4e4:	6a3b      	ldr	r3, [r7, #32]
 801b4e6:	f043 0302 	orr.w	r3, r3, #2
 801b4ea:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801b4ec:	e025      	b.n	801b53a <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	781b      	ldrb	r3, [r3, #0]
 801b4f2:	2b25      	cmp	r3, #37	@ 0x25
 801b4f4:	d004      	beq.n	801b500 <tiny_vsnprintf_like+0x1d4>
 801b4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4f8:	1c5a      	adds	r2, r3, #1
 801b4fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b4fc:	2225      	movs	r2, #37	@ 0x25
 801b4fe:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801b500:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b502:	68fb      	ldr	r3, [r7, #12]
 801b504:	1ad2      	subs	r2, r2, r3
 801b506:	68bb      	ldr	r3, [r7, #8]
 801b508:	3b01      	subs	r3, #1
 801b50a:	429a      	cmp	r2, r3
 801b50c:	da16      	bge.n	801b53c <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	781b      	ldrb	r3, [r3, #0]
 801b512:	2b00      	cmp	r3, #0
 801b514:	d006      	beq.n	801b524 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801b516:	687a      	ldr	r2, [r7, #4]
 801b518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b51a:	1c59      	adds	r1, r3, #1
 801b51c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b51e:	7812      	ldrb	r2, [r2, #0]
 801b520:	701a      	strb	r2, [r3, #0]
 801b522:	e002      	b.n	801b52a <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	3b01      	subs	r3, #1
 801b528:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801b52a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b52c:	68fb      	ldr	r3, [r7, #12]
 801b52e:	1ad2      	subs	r2, r2, r3
 801b530:	68bb      	ldr	r3, [r7, #8]
 801b532:	3b01      	subs	r3, #1
 801b534:	429a      	cmp	r2, r3
 801b536:	db2d      	blt.n	801b594 <tiny_vsnprintf_like+0x268>
 801b538:	e000      	b.n	801b53c <tiny_vsnprintf_like+0x210>
        break;
 801b53a:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801b53c:	697b      	ldr	r3, [r7, #20]
 801b53e:	2b6c      	cmp	r3, #108	@ 0x6c
 801b540:	d105      	bne.n	801b54e <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801b542:	683b      	ldr	r3, [r7, #0]
 801b544:	1d1a      	adds	r2, r3, #4
 801b546:	603a      	str	r2, [r7, #0]
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	637b      	str	r3, [r7, #52]	@ 0x34
 801b54c:	e00f      	b.n	801b56e <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801b54e:	6a3b      	ldr	r3, [r7, #32]
 801b550:	f003 0302 	and.w	r3, r3, #2
 801b554:	2b00      	cmp	r3, #0
 801b556:	d005      	beq.n	801b564 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801b558:	683b      	ldr	r3, [r7, #0]
 801b55a:	1d1a      	adds	r2, r3, #4
 801b55c:	603a      	str	r2, [r7, #0]
 801b55e:	681b      	ldr	r3, [r3, #0]
 801b560:	637b      	str	r3, [r7, #52]	@ 0x34
 801b562:	e004      	b.n	801b56e <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801b564:	683b      	ldr	r3, [r7, #0]
 801b566:	1d1a      	adds	r2, r3, #4
 801b568:	603a      	str	r2, [r7, #0]
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801b56e:	68bb      	ldr	r3, [r7, #8]
 801b570:	1e5a      	subs	r2, r3, #1
 801b572:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b574:	68fb      	ldr	r3, [r7, #12]
 801b576:	1acb      	subs	r3, r1, r3
 801b578:	1ad1      	subs	r1, r2, r3
 801b57a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b57c:	6a3b      	ldr	r3, [r7, #32]
 801b57e:	9302      	str	r3, [sp, #8]
 801b580:	69bb      	ldr	r3, [r7, #24]
 801b582:	9301      	str	r3, [sp, #4]
 801b584:	69fb      	ldr	r3, [r7, #28]
 801b586:	9300      	str	r3, [sp, #0]
 801b588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b58a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b58c:	f7ff fde0 	bl	801b150 <ee_number>
 801b590:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801b592:	e000      	b.n	801b596 <tiny_vsnprintf_like+0x26a>
        continue;
 801b594:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	3301      	adds	r3, #1
 801b59a:	607b      	str	r3, [r7, #4]
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	781b      	ldrb	r3, [r3, #0]
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	f47f aed2 	bne.w	801b34a <tiny_vsnprintf_like+0x1e>
 801b5a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b5a8:	68fb      	ldr	r3, [r7, #12]
 801b5aa:	1ad2      	subs	r2, r2, r3
 801b5ac:	68bb      	ldr	r3, [r7, #8]
 801b5ae:	3b01      	subs	r3, #1
 801b5b0:	429a      	cmp	r2, r3
 801b5b2:	f6bf aeca 	bge.w	801b34a <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801b5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5b8:	2200      	movs	r2, #0
 801b5ba:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801b5bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b5be:	68fb      	ldr	r3, [r7, #12]
 801b5c0:	1ad3      	subs	r3, r2, r3
}
 801b5c2:	4618      	mov	r0, r3
 801b5c4:	3738      	adds	r7, #56	@ 0x38
 801b5c6:	46bd      	mov	sp, r7
 801b5c8:	bd80      	pop	{r7, pc}
 801b5ca:	bf00      	nop
 801b5cc:	0801d72c 	.word	0x0801d72c

0801b5d0 <UTIL_SEQ_RegTask>:

  return;
}

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801b5d0:	b580      	push	{r7, lr}
 801b5d2:	b088      	sub	sp, #32
 801b5d4:	af00      	add	r7, sp, #0
 801b5d6:	60f8      	str	r0, [r7, #12]
 801b5d8:	60b9      	str	r1, [r7, #8]
 801b5da:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b5dc:	f3ef 8310 	mrs	r3, PRIMASK
 801b5e0:	617b      	str	r3, [r7, #20]
  return(result);
 801b5e2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801b5e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b5e6:	b672      	cpsid	i
}
 801b5e8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801b5ea:	68f8      	ldr	r0, [r7, #12]
 801b5ec:	f000 f83e 	bl	801b66c <SEQ_BitPosition>
 801b5f0:	4603      	mov	r3, r0
 801b5f2:	4619      	mov	r1, r3
 801b5f4:	4a06      	ldr	r2, [pc, #24]	@ (801b610 <UTIL_SEQ_RegTask+0x40>)
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801b5fc:	69fb      	ldr	r3, [r7, #28]
 801b5fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b600:	69bb      	ldr	r3, [r7, #24]
 801b602:	f383 8810 	msr	PRIMASK, r3
}
 801b606:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801b608:	bf00      	nop
}
 801b60a:	3720      	adds	r7, #32
 801b60c:	46bd      	mov	sp, r7
 801b60e:	bd80      	pop	{r7, pc}
 801b610:	20001544 	.word	0x20001544

0801b614 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801b614:	b480      	push	{r7}
 801b616:	b087      	sub	sp, #28
 801b618:	af00      	add	r7, sp, #0
 801b61a:	6078      	str	r0, [r7, #4]
 801b61c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b61e:	f3ef 8310 	mrs	r3, PRIMASK
 801b622:	60fb      	str	r3, [r7, #12]
  return(result);
 801b624:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b626:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b628:	b672      	cpsid	i
}
 801b62a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801b62c:	4b0d      	ldr	r3, [pc, #52]	@ (801b664 <UTIL_SEQ_SetTask+0x50>)
 801b62e:	681a      	ldr	r2, [r3, #0]
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	4313      	orrs	r3, r2
 801b634:	4a0b      	ldr	r2, [pc, #44]	@ (801b664 <UTIL_SEQ_SetTask+0x50>)
 801b636:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801b638:	4a0b      	ldr	r2, [pc, #44]	@ (801b668 <UTIL_SEQ_SetTask+0x54>)
 801b63a:	683b      	ldr	r3, [r7, #0]
 801b63c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	431a      	orrs	r2, r3
 801b644:	4908      	ldr	r1, [pc, #32]	@ (801b668 <UTIL_SEQ_SetTask+0x54>)
 801b646:	683b      	ldr	r3, [r7, #0]
 801b648:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801b64c:	697b      	ldr	r3, [r7, #20]
 801b64e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b650:	693b      	ldr	r3, [r7, #16]
 801b652:	f383 8810 	msr	PRIMASK, r3
}
 801b656:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801b658:	bf00      	nop
}
 801b65a:	371c      	adds	r7, #28
 801b65c:	46bd      	mov	sp, r7
 801b65e:	bc80      	pop	{r7}
 801b660:	4770      	bx	lr
 801b662:	bf00      	nop
 801b664:	20001540 	.word	0x20001540
 801b668:	20001554 	.word	0x20001554

0801b66c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801b66c:	b480      	push	{r7}
 801b66e:	b085      	sub	sp, #20
 801b670:	af00      	add	r7, sp, #0
 801b672:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801b674:	2300      	movs	r3, #0
 801b676:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801b67c:	68bb      	ldr	r3, [r7, #8]
 801b67e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b682:	d204      	bcs.n	801b68e <SEQ_BitPosition+0x22>
 801b684:	2310      	movs	r3, #16
 801b686:	73fb      	strb	r3, [r7, #15]
 801b688:	68bb      	ldr	r3, [r7, #8]
 801b68a:	041b      	lsls	r3, r3, #16
 801b68c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801b68e:	68bb      	ldr	r3, [r7, #8]
 801b690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b694:	d205      	bcs.n	801b6a2 <SEQ_BitPosition+0x36>
 801b696:	7bfb      	ldrb	r3, [r7, #15]
 801b698:	3308      	adds	r3, #8
 801b69a:	73fb      	strb	r3, [r7, #15]
 801b69c:	68bb      	ldr	r3, [r7, #8]
 801b69e:	021b      	lsls	r3, r3, #8
 801b6a0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801b6a2:	68bb      	ldr	r3, [r7, #8]
 801b6a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b6a8:	d205      	bcs.n	801b6b6 <SEQ_BitPosition+0x4a>
 801b6aa:	7bfb      	ldrb	r3, [r7, #15]
 801b6ac:	3304      	adds	r3, #4
 801b6ae:	73fb      	strb	r3, [r7, #15]
 801b6b0:	68bb      	ldr	r3, [r7, #8]
 801b6b2:	011b      	lsls	r3, r3, #4
 801b6b4:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801b6b6:	68bb      	ldr	r3, [r7, #8]
 801b6b8:	0f1b      	lsrs	r3, r3, #28
 801b6ba:	4a07      	ldr	r2, [pc, #28]	@ (801b6d8 <SEQ_BitPosition+0x6c>)
 801b6bc:	5cd2      	ldrb	r2, [r2, r3]
 801b6be:	7bfb      	ldrb	r3, [r7, #15]
 801b6c0:	4413      	add	r3, r2
 801b6c2:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801b6c4:	7bfb      	ldrb	r3, [r7, #15]
 801b6c6:	f1c3 031f 	rsb	r3, r3, #31
 801b6ca:	b2db      	uxtb	r3, r3
}
 801b6cc:	4618      	mov	r0, r3
 801b6ce:	3714      	adds	r7, #20
 801b6d0:	46bd      	mov	sp, r7
 801b6d2:	bc80      	pop	{r7}
 801b6d4:	4770      	bx	lr
 801b6d6:	bf00      	nop
 801b6d8:	0801dddc 	.word	0x0801dddc

0801b6dc <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801b6dc:	b580      	push	{r7, lr}
 801b6de:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801b6e0:	4b04      	ldr	r3, [pc, #16]	@ (801b6f4 <UTIL_TIMER_Init+0x18>)
 801b6e2:	2200      	movs	r2, #0
 801b6e4:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801b6e6:	4b04      	ldr	r3, [pc, #16]	@ (801b6f8 <UTIL_TIMER_Init+0x1c>)
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	4798      	blx	r3
 801b6ec:	4603      	mov	r3, r0
}
 801b6ee:	4618      	mov	r0, r3
 801b6f0:	bd80      	pop	{r7, pc}
 801b6f2:	bf00      	nop
 801b6f4:	2000155c 	.word	0x2000155c
 801b6f8:	0801d7d4 	.word	0x0801d7d4

0801b6fc <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801b6fc:	b580      	push	{r7, lr}
 801b6fe:	b084      	sub	sp, #16
 801b700:	af00      	add	r7, sp, #0
 801b702:	60f8      	str	r0, [r7, #12]
 801b704:	60b9      	str	r1, [r7, #8]
 801b706:	603b      	str	r3, [r7, #0]
 801b708:	4613      	mov	r3, r2
 801b70a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	2b00      	cmp	r3, #0
 801b710:	d023      	beq.n	801b75a <UTIL_TIMER_Create+0x5e>
 801b712:	683b      	ldr	r3, [r7, #0]
 801b714:	2b00      	cmp	r3, #0
 801b716:	d020      	beq.n	801b75a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801b718:	68fb      	ldr	r3, [r7, #12]
 801b71a:	2200      	movs	r2, #0
 801b71c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801b71e:	4b11      	ldr	r3, [pc, #68]	@ (801b764 <UTIL_TIMER_Create+0x68>)
 801b720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b722:	68b8      	ldr	r0, [r7, #8]
 801b724:	4798      	blx	r3
 801b726:	4602      	mov	r2, r0
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801b72c:	68fb      	ldr	r3, [r7, #12]
 801b72e:	2200      	movs	r2, #0
 801b730:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801b732:	68fb      	ldr	r3, [r7, #12]
 801b734:	2200      	movs	r2, #0
 801b736:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	2200      	movs	r2, #0
 801b73c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801b73e:	68fb      	ldr	r3, [r7, #12]
 801b740:	683a      	ldr	r2, [r7, #0]
 801b742:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801b744:	68fb      	ldr	r3, [r7, #12]
 801b746:	69ba      	ldr	r2, [r7, #24]
 801b748:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801b74a:	68fb      	ldr	r3, [r7, #12]
 801b74c:	79fa      	ldrb	r2, [r7, #7]
 801b74e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801b750:	68fb      	ldr	r3, [r7, #12]
 801b752:	2200      	movs	r2, #0
 801b754:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801b756:	2300      	movs	r3, #0
 801b758:	e000      	b.n	801b75c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801b75a:	2301      	movs	r3, #1
  }
}
 801b75c:	4618      	mov	r0, r3
 801b75e:	3710      	adds	r7, #16
 801b760:	46bd      	mov	sp, r7
 801b762:	bd80      	pop	{r7, pc}
 801b764:	0801d7d4 	.word	0x0801d7d4

0801b768 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801b768:	b580      	push	{r7, lr}
 801b76a:	b08a      	sub	sp, #40	@ 0x28
 801b76c:	af00      	add	r7, sp, #0
 801b76e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b770:	2300      	movs	r3, #0
 801b772:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d056      	beq.n	801b82a <UTIL_TIMER_Start+0xc2>
 801b77c:	6878      	ldr	r0, [r7, #4]
 801b77e:	f000 f9a9 	bl	801bad4 <TimerExists>
 801b782:	4603      	mov	r3, r0
 801b784:	f083 0301 	eor.w	r3, r3, #1
 801b788:	b2db      	uxtb	r3, r3
 801b78a:	2b00      	cmp	r3, #0
 801b78c:	d04d      	beq.n	801b82a <UTIL_TIMER_Start+0xc2>
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	7a5b      	ldrb	r3, [r3, #9]
 801b792:	2b00      	cmp	r3, #0
 801b794:	d149      	bne.n	801b82a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b796:	f3ef 8310 	mrs	r3, PRIMASK
 801b79a:	613b      	str	r3, [r7, #16]
  return(result);
 801b79c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b79e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b7a0:	b672      	cpsid	i
}
 801b7a2:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	685b      	ldr	r3, [r3, #4]
 801b7a8:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801b7aa:	4b24      	ldr	r3, [pc, #144]	@ (801b83c <UTIL_TIMER_Start+0xd4>)
 801b7ac:	6a1b      	ldr	r3, [r3, #32]
 801b7ae:	4798      	blx	r3
 801b7b0:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801b7b2:	6a3a      	ldr	r2, [r7, #32]
 801b7b4:	69bb      	ldr	r3, [r7, #24]
 801b7b6:	429a      	cmp	r2, r3
 801b7b8:	d201      	bcs.n	801b7be <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801b7ba:	69bb      	ldr	r3, [r7, #24]
 801b7bc:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	6a3a      	ldr	r2, [r7, #32]
 801b7c2:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	2200      	movs	r2, #0
 801b7c8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	2201      	movs	r2, #1
 801b7ce:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	2200      	movs	r2, #0
 801b7d4:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801b7d6:	4b1a      	ldr	r3, [pc, #104]	@ (801b840 <UTIL_TIMER_Start+0xd8>)
 801b7d8:	681b      	ldr	r3, [r3, #0]
 801b7da:	2b00      	cmp	r3, #0
 801b7dc:	d106      	bne.n	801b7ec <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801b7de:	4b17      	ldr	r3, [pc, #92]	@ (801b83c <UTIL_TIMER_Start+0xd4>)
 801b7e0:	691b      	ldr	r3, [r3, #16]
 801b7e2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801b7e4:	6878      	ldr	r0, [r7, #4]
 801b7e6:	f000 f9eb 	bl	801bbc0 <TimerInsertNewHeadTimer>
 801b7ea:	e017      	b.n	801b81c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801b7ec:	4b13      	ldr	r3, [pc, #76]	@ (801b83c <UTIL_TIMER_Start+0xd4>)
 801b7ee:	699b      	ldr	r3, [r3, #24]
 801b7f0:	4798      	blx	r3
 801b7f2:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	681a      	ldr	r2, [r3, #0]
 801b7f8:	697b      	ldr	r3, [r7, #20]
 801b7fa:	441a      	add	r2, r3
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801b800:	687b      	ldr	r3, [r7, #4]
 801b802:	681a      	ldr	r2, [r3, #0]
 801b804:	4b0e      	ldr	r3, [pc, #56]	@ (801b840 <UTIL_TIMER_Start+0xd8>)
 801b806:	681b      	ldr	r3, [r3, #0]
 801b808:	681b      	ldr	r3, [r3, #0]
 801b80a:	429a      	cmp	r2, r3
 801b80c:	d203      	bcs.n	801b816 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801b80e:	6878      	ldr	r0, [r7, #4]
 801b810:	f000 f9d6 	bl	801bbc0 <TimerInsertNewHeadTimer>
 801b814:	e002      	b.n	801b81c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801b816:	6878      	ldr	r0, [r7, #4]
 801b818:	f000 f9a2 	bl	801bb60 <TimerInsertTimer>
 801b81c:	69fb      	ldr	r3, [r7, #28]
 801b81e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b820:	68fb      	ldr	r3, [r7, #12]
 801b822:	f383 8810 	msr	PRIMASK, r3
}
 801b826:	bf00      	nop
  {
 801b828:	e002      	b.n	801b830 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801b82a:	2301      	movs	r3, #1
 801b82c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801b830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801b834:	4618      	mov	r0, r3
 801b836:	3728      	adds	r7, #40	@ 0x28
 801b838:	46bd      	mov	sp, r7
 801b83a:	bd80      	pop	{r7, pc}
 801b83c:	0801d7d4 	.word	0x0801d7d4
 801b840:	2000155c 	.word	0x2000155c

0801b844 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801b844:	b580      	push	{r7, lr}
 801b846:	b088      	sub	sp, #32
 801b848:	af00      	add	r7, sp, #0
 801b84a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b84c:	2300      	movs	r3, #0
 801b84e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	2b00      	cmp	r3, #0
 801b854:	d05b      	beq.n	801b90e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b856:	f3ef 8310 	mrs	r3, PRIMASK
 801b85a:	60fb      	str	r3, [r7, #12]
  return(result);
 801b85c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b85e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b860:	b672      	cpsid	i
}
 801b862:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801b864:	4b2d      	ldr	r3, [pc, #180]	@ (801b91c <UTIL_TIMER_Stop+0xd8>)
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801b86a:	4b2c      	ldr	r3, [pc, #176]	@ (801b91c <UTIL_TIMER_Stop+0xd8>)
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	2201      	movs	r2, #1
 801b874:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801b876:	4b29      	ldr	r3, [pc, #164]	@ (801b91c <UTIL_TIMER_Stop+0xd8>)
 801b878:	681b      	ldr	r3, [r3, #0]
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	d041      	beq.n	801b902 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	2200      	movs	r2, #0
 801b882:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801b884:	4b25      	ldr	r3, [pc, #148]	@ (801b91c <UTIL_TIMER_Stop+0xd8>)
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	687a      	ldr	r2, [r7, #4]
 801b88a:	429a      	cmp	r2, r3
 801b88c:	d134      	bne.n	801b8f8 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801b88e:	4b23      	ldr	r3, [pc, #140]	@ (801b91c <UTIL_TIMER_Stop+0xd8>)
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	2200      	movs	r2, #0
 801b894:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801b896:	4b21      	ldr	r3, [pc, #132]	@ (801b91c <UTIL_TIMER_Stop+0xd8>)
 801b898:	681b      	ldr	r3, [r3, #0]
 801b89a:	695b      	ldr	r3, [r3, #20]
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d00a      	beq.n	801b8b6 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801b8a0:	4b1e      	ldr	r3, [pc, #120]	@ (801b91c <UTIL_TIMER_Stop+0xd8>)
 801b8a2:	681b      	ldr	r3, [r3, #0]
 801b8a4:	695b      	ldr	r3, [r3, #20]
 801b8a6:	4a1d      	ldr	r2, [pc, #116]	@ (801b91c <UTIL_TIMER_Stop+0xd8>)
 801b8a8:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801b8aa:	4b1c      	ldr	r3, [pc, #112]	@ (801b91c <UTIL_TIMER_Stop+0xd8>)
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	4618      	mov	r0, r3
 801b8b0:	f000 f92c 	bl	801bb0c <TimerSetTimeout>
 801b8b4:	e023      	b.n	801b8fe <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801b8b6:	4b1a      	ldr	r3, [pc, #104]	@ (801b920 <UTIL_TIMER_Stop+0xdc>)
 801b8b8:	68db      	ldr	r3, [r3, #12]
 801b8ba:	4798      	blx	r3
            TimerListHead = NULL;
 801b8bc:	4b17      	ldr	r3, [pc, #92]	@ (801b91c <UTIL_TIMER_Stop+0xd8>)
 801b8be:	2200      	movs	r2, #0
 801b8c0:	601a      	str	r2, [r3, #0]
 801b8c2:	e01c      	b.n	801b8fe <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801b8c4:	697a      	ldr	r2, [r7, #20]
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	429a      	cmp	r2, r3
 801b8ca:	d110      	bne.n	801b8ee <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801b8cc:	697b      	ldr	r3, [r7, #20]
 801b8ce:	695b      	ldr	r3, [r3, #20]
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d006      	beq.n	801b8e2 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801b8d4:	697b      	ldr	r3, [r7, #20]
 801b8d6:	695b      	ldr	r3, [r3, #20]
 801b8d8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b8da:	69bb      	ldr	r3, [r7, #24]
 801b8dc:	697a      	ldr	r2, [r7, #20]
 801b8de:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801b8e0:	e00d      	b.n	801b8fe <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801b8e2:	2300      	movs	r3, #0
 801b8e4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b8e6:	69bb      	ldr	r3, [r7, #24]
 801b8e8:	697a      	ldr	r2, [r7, #20]
 801b8ea:	615a      	str	r2, [r3, #20]
            break;
 801b8ec:	e007      	b.n	801b8fe <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801b8ee:	697b      	ldr	r3, [r7, #20]
 801b8f0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801b8f2:	697b      	ldr	r3, [r7, #20]
 801b8f4:	695b      	ldr	r3, [r3, #20]
 801b8f6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801b8f8:	697b      	ldr	r3, [r7, #20]
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d1e2      	bne.n	801b8c4 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801b8fe:	2300      	movs	r3, #0
 801b900:	77fb      	strb	r3, [r7, #31]
 801b902:	693b      	ldr	r3, [r7, #16]
 801b904:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b906:	68bb      	ldr	r3, [r7, #8]
 801b908:	f383 8810 	msr	PRIMASK, r3
}
 801b90c:	e001      	b.n	801b912 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801b90e:	2301      	movs	r3, #1
 801b910:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801b912:	7ffb      	ldrb	r3, [r7, #31]
}
 801b914:	4618      	mov	r0, r3
 801b916:	3720      	adds	r7, #32
 801b918:	46bd      	mov	sp, r7
 801b91a:	bd80      	pop	{r7, pc}
 801b91c:	2000155c 	.word	0x2000155c
 801b920:	0801d7d4 	.word	0x0801d7d4

0801b924 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801b924:	b580      	push	{r7, lr}
 801b926:	b084      	sub	sp, #16
 801b928:	af00      	add	r7, sp, #0
 801b92a:	6078      	str	r0, [r7, #4]
 801b92c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b92e:	2300      	movs	r3, #0
 801b930:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	2b00      	cmp	r3, #0
 801b936:	d102      	bne.n	801b93e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801b938:	2301      	movs	r3, #1
 801b93a:	73fb      	strb	r3, [r7, #15]
 801b93c:	e014      	b.n	801b968 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801b93e:	4b0d      	ldr	r3, [pc, #52]	@ (801b974 <UTIL_TIMER_SetPeriod+0x50>)
 801b940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b942:	6838      	ldr	r0, [r7, #0]
 801b944:	4798      	blx	r3
 801b946:	4602      	mov	r2, r0
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801b94c:	6878      	ldr	r0, [r7, #4]
 801b94e:	f000 f8c1 	bl	801bad4 <TimerExists>
 801b952:	4603      	mov	r3, r0
 801b954:	2b00      	cmp	r3, #0
 801b956:	d007      	beq.n	801b968 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801b958:	6878      	ldr	r0, [r7, #4]
 801b95a:	f7ff ff73 	bl	801b844 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801b95e:	6878      	ldr	r0, [r7, #4]
 801b960:	f7ff ff02 	bl	801b768 <UTIL_TIMER_Start>
 801b964:	4603      	mov	r3, r0
 801b966:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801b968:	7bfb      	ldrb	r3, [r7, #15]
}
 801b96a:	4618      	mov	r0, r3
 801b96c:	3710      	adds	r7, #16
 801b96e:	46bd      	mov	sp, r7
 801b970:	bd80      	pop	{r7, pc}
 801b972:	bf00      	nop
 801b974:	0801d7d4 	.word	0x0801d7d4

0801b978 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801b978:	b590      	push	{r4, r7, lr}
 801b97a:	b089      	sub	sp, #36	@ 0x24
 801b97c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b97e:	f3ef 8310 	mrs	r3, PRIMASK
 801b982:	60bb      	str	r3, [r7, #8]
  return(result);
 801b984:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b986:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b988:	b672      	cpsid	i
}
 801b98a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801b98c:	4b38      	ldr	r3, [pc, #224]	@ (801ba70 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b98e:	695b      	ldr	r3, [r3, #20]
 801b990:	4798      	blx	r3
 801b992:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801b994:	4b36      	ldr	r3, [pc, #216]	@ (801ba70 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b996:	691b      	ldr	r3, [r3, #16]
 801b998:	4798      	blx	r3
 801b99a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801b99c:	693a      	ldr	r2, [r7, #16]
 801b99e:	697b      	ldr	r3, [r7, #20]
 801b9a0:	1ad3      	subs	r3, r2, r3
 801b9a2:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801b9a4:	4b33      	ldr	r3, [pc, #204]	@ (801ba74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b9a6:	681b      	ldr	r3, [r3, #0]
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	d037      	beq.n	801ba1c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801b9ac:	4b31      	ldr	r3, [pc, #196]	@ (801ba74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801b9b2:	69fb      	ldr	r3, [r7, #28]
 801b9b4:	681b      	ldr	r3, [r3, #0]
 801b9b6:	68fa      	ldr	r2, [r7, #12]
 801b9b8:	429a      	cmp	r2, r3
 801b9ba:	d206      	bcs.n	801b9ca <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801b9bc:	69fb      	ldr	r3, [r7, #28]
 801b9be:	681a      	ldr	r2, [r3, #0]
 801b9c0:	68fb      	ldr	r3, [r7, #12]
 801b9c2:	1ad2      	subs	r2, r2, r3
 801b9c4:	69fb      	ldr	r3, [r7, #28]
 801b9c6:	601a      	str	r2, [r3, #0]
 801b9c8:	e002      	b.n	801b9d0 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801b9ca:	69fb      	ldr	r3, [r7, #28]
 801b9cc:	2200      	movs	r2, #0
 801b9ce:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801b9d0:	69fb      	ldr	r3, [r7, #28]
 801b9d2:	695b      	ldr	r3, [r3, #20]
 801b9d4:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801b9d6:	69fb      	ldr	r3, [r7, #28]
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d1ea      	bne.n	801b9b2 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801b9dc:	e01e      	b.n	801ba1c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801b9de:	4b25      	ldr	r3, [pc, #148]	@ (801ba74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b9e0:	681b      	ldr	r3, [r3, #0]
 801b9e2:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801b9e4:	4b23      	ldr	r3, [pc, #140]	@ (801ba74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	695b      	ldr	r3, [r3, #20]
 801b9ea:	4a22      	ldr	r2, [pc, #136]	@ (801ba74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b9ec:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801b9ee:	69fb      	ldr	r3, [r7, #28]
 801b9f0:	2200      	movs	r2, #0
 801b9f2:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801b9f4:	69fb      	ldr	r3, [r7, #28]
 801b9f6:	2200      	movs	r2, #0
 801b9f8:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801b9fa:	69fb      	ldr	r3, [r7, #28]
 801b9fc:	68db      	ldr	r3, [r3, #12]
 801b9fe:	69fa      	ldr	r2, [r7, #28]
 801ba00:	6912      	ldr	r2, [r2, #16]
 801ba02:	4610      	mov	r0, r2
 801ba04:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801ba06:	69fb      	ldr	r3, [r7, #28]
 801ba08:	7adb      	ldrb	r3, [r3, #11]
 801ba0a:	2b01      	cmp	r3, #1
 801ba0c:	d106      	bne.n	801ba1c <UTIL_TIMER_IRQ_Handler+0xa4>
 801ba0e:	69fb      	ldr	r3, [r7, #28]
 801ba10:	7a9b      	ldrb	r3, [r3, #10]
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d102      	bne.n	801ba1c <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801ba16:	69f8      	ldr	r0, [r7, #28]
 801ba18:	f7ff fea6 	bl	801b768 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801ba1c:	4b15      	ldr	r3, [pc, #84]	@ (801ba74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	d00d      	beq.n	801ba40 <UTIL_TIMER_IRQ_Handler+0xc8>
 801ba24:	4b13      	ldr	r3, [pc, #76]	@ (801ba74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ba26:	681b      	ldr	r3, [r3, #0]
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d0d7      	beq.n	801b9de <UTIL_TIMER_IRQ_Handler+0x66>
 801ba2e:	4b11      	ldr	r3, [pc, #68]	@ (801ba74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ba30:	681b      	ldr	r3, [r3, #0]
 801ba32:	681c      	ldr	r4, [r3, #0]
 801ba34:	4b0e      	ldr	r3, [pc, #56]	@ (801ba70 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ba36:	699b      	ldr	r3, [r3, #24]
 801ba38:	4798      	blx	r3
 801ba3a:	4603      	mov	r3, r0
 801ba3c:	429c      	cmp	r4, r3
 801ba3e:	d3ce      	bcc.n	801b9de <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801ba40:	4b0c      	ldr	r3, [pc, #48]	@ (801ba74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	d009      	beq.n	801ba5c <UTIL_TIMER_IRQ_Handler+0xe4>
 801ba48:	4b0a      	ldr	r3, [pc, #40]	@ (801ba74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ba4a:	681b      	ldr	r3, [r3, #0]
 801ba4c:	7a1b      	ldrb	r3, [r3, #8]
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	d104      	bne.n	801ba5c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801ba52:	4b08      	ldr	r3, [pc, #32]	@ (801ba74 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ba54:	681b      	ldr	r3, [r3, #0]
 801ba56:	4618      	mov	r0, r3
 801ba58:	f000 f858 	bl	801bb0c <TimerSetTimeout>
 801ba5c:	69bb      	ldr	r3, [r7, #24]
 801ba5e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	f383 8810 	msr	PRIMASK, r3
}
 801ba66:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801ba68:	bf00      	nop
 801ba6a:	3724      	adds	r7, #36	@ 0x24
 801ba6c:	46bd      	mov	sp, r7
 801ba6e:	bd90      	pop	{r4, r7, pc}
 801ba70:	0801d7d4 	.word	0x0801d7d4
 801ba74:	2000155c 	.word	0x2000155c

0801ba78 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801ba78:	b580      	push	{r7, lr}
 801ba7a:	b082      	sub	sp, #8
 801ba7c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801ba7e:	4b06      	ldr	r3, [pc, #24]	@ (801ba98 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ba80:	69db      	ldr	r3, [r3, #28]
 801ba82:	4798      	blx	r3
 801ba84:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801ba86:	4b04      	ldr	r3, [pc, #16]	@ (801ba98 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ba88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba8a:	6878      	ldr	r0, [r7, #4]
 801ba8c:	4798      	blx	r3
 801ba8e:	4603      	mov	r3, r0
}
 801ba90:	4618      	mov	r0, r3
 801ba92:	3708      	adds	r7, #8
 801ba94:	46bd      	mov	sp, r7
 801ba96:	bd80      	pop	{r7, pc}
 801ba98:	0801d7d4 	.word	0x0801d7d4

0801ba9c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801ba9c:	b580      	push	{r7, lr}
 801ba9e:	b084      	sub	sp, #16
 801baa0:	af00      	add	r7, sp, #0
 801baa2:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801baa4:	4b0a      	ldr	r3, [pc, #40]	@ (801bad0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801baa6:	69db      	ldr	r3, [r3, #28]
 801baa8:	4798      	blx	r3
 801baaa:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801baac:	4b08      	ldr	r3, [pc, #32]	@ (801bad0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801baae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bab0:	6878      	ldr	r0, [r7, #4]
 801bab2:	4798      	blx	r3
 801bab4:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801bab6:	4b06      	ldr	r3, [pc, #24]	@ (801bad0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801bab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801baba:	68f9      	ldr	r1, [r7, #12]
 801babc:	68ba      	ldr	r2, [r7, #8]
 801babe:	1a8a      	subs	r2, r1, r2
 801bac0:	4610      	mov	r0, r2
 801bac2:	4798      	blx	r3
 801bac4:	4603      	mov	r3, r0
}
 801bac6:	4618      	mov	r0, r3
 801bac8:	3710      	adds	r7, #16
 801baca:	46bd      	mov	sp, r7
 801bacc:	bd80      	pop	{r7, pc}
 801bace:	bf00      	nop
 801bad0:	0801d7d4 	.word	0x0801d7d4

0801bad4 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801bad4:	b480      	push	{r7}
 801bad6:	b085      	sub	sp, #20
 801bad8:	af00      	add	r7, sp, #0
 801bada:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801badc:	4b0a      	ldr	r3, [pc, #40]	@ (801bb08 <TimerExists+0x34>)
 801bade:	681b      	ldr	r3, [r3, #0]
 801bae0:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801bae2:	e008      	b.n	801baf6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801bae4:	68fa      	ldr	r2, [r7, #12]
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	429a      	cmp	r2, r3
 801baea:	d101      	bne.n	801baf0 <TimerExists+0x1c>
    {
      return true;
 801baec:	2301      	movs	r3, #1
 801baee:	e006      	b.n	801bafe <TimerExists+0x2a>
    }
    cur = cur->Next;
 801baf0:	68fb      	ldr	r3, [r7, #12]
 801baf2:	695b      	ldr	r3, [r3, #20]
 801baf4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	d1f3      	bne.n	801bae4 <TimerExists+0x10>
  }
  return false;
 801bafc:	2300      	movs	r3, #0
}
 801bafe:	4618      	mov	r0, r3
 801bb00:	3714      	adds	r7, #20
 801bb02:	46bd      	mov	sp, r7
 801bb04:	bc80      	pop	{r7}
 801bb06:	4770      	bx	lr
 801bb08:	2000155c 	.word	0x2000155c

0801bb0c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801bb0c:	b590      	push	{r4, r7, lr}
 801bb0e:	b085      	sub	sp, #20
 801bb10:	af00      	add	r7, sp, #0
 801bb12:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801bb14:	4b11      	ldr	r3, [pc, #68]	@ (801bb5c <TimerSetTimeout+0x50>)
 801bb16:	6a1b      	ldr	r3, [r3, #32]
 801bb18:	4798      	blx	r3
 801bb1a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	2201      	movs	r2, #1
 801bb20:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	681c      	ldr	r4, [r3, #0]
 801bb26:	4b0d      	ldr	r3, [pc, #52]	@ (801bb5c <TimerSetTimeout+0x50>)
 801bb28:	699b      	ldr	r3, [r3, #24]
 801bb2a:	4798      	blx	r3
 801bb2c:	4602      	mov	r2, r0
 801bb2e:	68fb      	ldr	r3, [r7, #12]
 801bb30:	4413      	add	r3, r2
 801bb32:	429c      	cmp	r4, r3
 801bb34:	d207      	bcs.n	801bb46 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801bb36:	4b09      	ldr	r3, [pc, #36]	@ (801bb5c <TimerSetTimeout+0x50>)
 801bb38:	699b      	ldr	r3, [r3, #24]
 801bb3a:	4798      	blx	r3
 801bb3c:	4602      	mov	r2, r0
 801bb3e:	68fb      	ldr	r3, [r7, #12]
 801bb40:	441a      	add	r2, r3
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801bb46:	4b05      	ldr	r3, [pc, #20]	@ (801bb5c <TimerSetTimeout+0x50>)
 801bb48:	689b      	ldr	r3, [r3, #8]
 801bb4a:	687a      	ldr	r2, [r7, #4]
 801bb4c:	6812      	ldr	r2, [r2, #0]
 801bb4e:	4610      	mov	r0, r2
 801bb50:	4798      	blx	r3
}
 801bb52:	bf00      	nop
 801bb54:	3714      	adds	r7, #20
 801bb56:	46bd      	mov	sp, r7
 801bb58:	bd90      	pop	{r4, r7, pc}
 801bb5a:	bf00      	nop
 801bb5c:	0801d7d4 	.word	0x0801d7d4

0801bb60 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801bb60:	b480      	push	{r7}
 801bb62:	b085      	sub	sp, #20
 801bb64:	af00      	add	r7, sp, #0
 801bb66:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801bb68:	4b14      	ldr	r3, [pc, #80]	@ (801bbbc <TimerInsertTimer+0x5c>)
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801bb6e:	4b13      	ldr	r3, [pc, #76]	@ (801bbbc <TimerInsertTimer+0x5c>)
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	695b      	ldr	r3, [r3, #20]
 801bb74:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801bb76:	e012      	b.n	801bb9e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	681a      	ldr	r2, [r3, #0]
 801bb7c:	68bb      	ldr	r3, [r7, #8]
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	429a      	cmp	r2, r3
 801bb82:	d905      	bls.n	801bb90 <TimerInsertTimer+0x30>
    {
        cur = next;
 801bb84:	68bb      	ldr	r3, [r7, #8]
 801bb86:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801bb88:	68bb      	ldr	r3, [r7, #8]
 801bb8a:	695b      	ldr	r3, [r3, #20]
 801bb8c:	60bb      	str	r3, [r7, #8]
 801bb8e:	e006      	b.n	801bb9e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801bb90:	68fb      	ldr	r3, [r7, #12]
 801bb92:	687a      	ldr	r2, [r7, #4]
 801bb94:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	68ba      	ldr	r2, [r7, #8]
 801bb9a:	615a      	str	r2, [r3, #20]
        return;
 801bb9c:	e009      	b.n	801bbb2 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801bb9e:	68fb      	ldr	r3, [r7, #12]
 801bba0:	695b      	ldr	r3, [r3, #20]
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d1e8      	bne.n	801bb78 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801bba6:	68fb      	ldr	r3, [r7, #12]
 801bba8:	687a      	ldr	r2, [r7, #4]
 801bbaa:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	2200      	movs	r2, #0
 801bbb0:	615a      	str	r2, [r3, #20]
}
 801bbb2:	3714      	adds	r7, #20
 801bbb4:	46bd      	mov	sp, r7
 801bbb6:	bc80      	pop	{r7}
 801bbb8:	4770      	bx	lr
 801bbba:	bf00      	nop
 801bbbc:	2000155c 	.word	0x2000155c

0801bbc0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801bbc0:	b580      	push	{r7, lr}
 801bbc2:	b084      	sub	sp, #16
 801bbc4:	af00      	add	r7, sp, #0
 801bbc6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801bbc8:	4b0b      	ldr	r3, [pc, #44]	@ (801bbf8 <TimerInsertNewHeadTimer+0x38>)
 801bbca:	681b      	ldr	r3, [r3, #0]
 801bbcc:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801bbce:	68fb      	ldr	r3, [r7, #12]
 801bbd0:	2b00      	cmp	r3, #0
 801bbd2:	d002      	beq.n	801bbda <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	2200      	movs	r2, #0
 801bbd8:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	68fa      	ldr	r2, [r7, #12]
 801bbde:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801bbe0:	4a05      	ldr	r2, [pc, #20]	@ (801bbf8 <TimerInsertNewHeadTimer+0x38>)
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801bbe6:	4b04      	ldr	r3, [pc, #16]	@ (801bbf8 <TimerInsertNewHeadTimer+0x38>)
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	4618      	mov	r0, r3
 801bbec:	f7ff ff8e 	bl	801bb0c <TimerSetTimeout>
}
 801bbf0:	bf00      	nop
 801bbf2:	3710      	adds	r7, #16
 801bbf4:	46bd      	mov	sp, r7
 801bbf6:	bd80      	pop	{r7, pc}
 801bbf8:	2000155c 	.word	0x2000155c

0801bbfc <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801bbfc:	b580      	push	{r7, lr}
 801bbfe:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801bc00:	2218      	movs	r2, #24
 801bc02:	2100      	movs	r1, #0
 801bc04:	4807      	ldr	r0, [pc, #28]	@ (801bc24 <UTIL_ADV_TRACE_Init+0x28>)
 801bc06:	f7ff f904 	bl	801ae12 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801bc0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801bc0e:	2100      	movs	r1, #0
 801bc10:	4805      	ldr	r0, [pc, #20]	@ (801bc28 <UTIL_ADV_TRACE_Init+0x2c>)
 801bc12:	f7ff f8fe 	bl	801ae12 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801bc16:	4b05      	ldr	r3, [pc, #20]	@ (801bc2c <UTIL_ADV_TRACE_Init+0x30>)
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	4805      	ldr	r0, [pc, #20]	@ (801bc30 <UTIL_ADV_TRACE_Init+0x34>)
 801bc1c:	4798      	blx	r3
 801bc1e:	4603      	mov	r3, r0
}
 801bc20:	4618      	mov	r0, r3
 801bc22:	bd80      	pop	{r7, pc}
 801bc24:	20001560 	.word	0x20001560
 801bc28:	20001578 	.word	0x20001578
 801bc2c:	0801d814 	.word	0x0801d814
 801bc30:	0801be9d 	.word	0x0801be9d

0801bc34 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801bc34:	b480      	push	{r7}
 801bc36:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801bc38:	4b06      	ldr	r3, [pc, #24]	@ (801bc54 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801bc3a:	8a5a      	ldrh	r2, [r3, #18]
 801bc3c:	4b05      	ldr	r3, [pc, #20]	@ (801bc54 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801bc3e:	8a1b      	ldrh	r3, [r3, #16]
 801bc40:	429a      	cmp	r2, r3
 801bc42:	d101      	bne.n	801bc48 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801bc44:	2301      	movs	r3, #1
 801bc46:	e000      	b.n	801bc4a <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801bc48:	2300      	movs	r3, #0
}
 801bc4a:	4618      	mov	r0, r3
 801bc4c:	46bd      	mov	sp, r7
 801bc4e:	bc80      	pop	{r7}
 801bc50:	4770      	bx	lr
 801bc52:	bf00      	nop
 801bc54:	20001560 	.word	0x20001560

0801bc58 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801bc58:	b408      	push	{r3}
 801bc5a:	b580      	push	{r7, lr}
 801bc5c:	b08d      	sub	sp, #52	@ 0x34
 801bc5e:	af00      	add	r7, sp, #0
 801bc60:	60f8      	str	r0, [r7, #12]
 801bc62:	60b9      	str	r1, [r7, #8]
 801bc64:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801bc66:	2300      	movs	r3, #0
 801bc68:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801bc6a:	2300      	movs	r3, #0
 801bc6c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801bc6e:	4b37      	ldr	r3, [pc, #220]	@ (801bd4c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801bc70:	7a1b      	ldrb	r3, [r3, #8]
 801bc72:	461a      	mov	r2, r3
 801bc74:	68fb      	ldr	r3, [r7, #12]
 801bc76:	4293      	cmp	r3, r2
 801bc78:	d902      	bls.n	801bc80 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801bc7a:	f06f 0304 	mvn.w	r3, #4
 801bc7e:	e05e      	b.n	801bd3e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801bc80:	4b32      	ldr	r3, [pc, #200]	@ (801bd4c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801bc82:	68da      	ldr	r2, [r3, #12]
 801bc84:	68bb      	ldr	r3, [r7, #8]
 801bc86:	4013      	ands	r3, r2
 801bc88:	68ba      	ldr	r2, [r7, #8]
 801bc8a:	429a      	cmp	r2, r3
 801bc8c:	d002      	beq.n	801bc94 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801bc8e:	f06f 0305 	mvn.w	r3, #5
 801bc92:	e054      	b.n	801bd3e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801bc94:	4b2d      	ldr	r3, [pc, #180]	@ (801bd4c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801bc96:	685b      	ldr	r3, [r3, #4]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d00a      	beq.n	801bcb2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d007      	beq.n	801bcb2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801bca2:	4b2a      	ldr	r3, [pc, #168]	@ (801bd4c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801bca4:	685b      	ldr	r3, [r3, #4]
 801bca6:	f107 0116 	add.w	r1, r7, #22
 801bcaa:	f107 0218 	add.w	r2, r7, #24
 801bcae:	4610      	mov	r0, r2
 801bcb0:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801bcb2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801bcb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801bcb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bcba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801bcbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801bcc0:	4823      	ldr	r0, [pc, #140]	@ (801bd50 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801bcc2:	f7ff fb33 	bl	801b32c <tiny_vsnprintf_like>
 801bcc6:	4603      	mov	r3, r0
 801bcc8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801bcca:	f000 f9f1 	bl	801c0b0 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801bcce:	8afa      	ldrh	r2, [r7, #22]
 801bcd0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801bcd2:	4413      	add	r3, r2
 801bcd4:	b29b      	uxth	r3, r3
 801bcd6:	f107 0214 	add.w	r2, r7, #20
 801bcda:	4611      	mov	r1, r2
 801bcdc:	4618      	mov	r0, r3
 801bcde:	f000 f969 	bl	801bfb4 <TRACE_AllocateBufer>
 801bce2:	4603      	mov	r3, r0
 801bce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bce8:	d025      	beq.n	801bd36 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801bcea:	2300      	movs	r3, #0
 801bcec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801bcee:	e00e      	b.n	801bd0e <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801bcf0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801bcf2:	8aba      	ldrh	r2, [r7, #20]
 801bcf4:	3330      	adds	r3, #48	@ 0x30
 801bcf6:	443b      	add	r3, r7
 801bcf8:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801bcfc:	4b15      	ldr	r3, [pc, #84]	@ (801bd54 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801bcfe:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801bd00:	8abb      	ldrh	r3, [r7, #20]
 801bd02:	3301      	adds	r3, #1
 801bd04:	b29b      	uxth	r3, r3
 801bd06:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801bd08:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801bd0a:	3301      	adds	r3, #1
 801bd0c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801bd0e:	8afb      	ldrh	r3, [r7, #22]
 801bd10:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801bd12:	429a      	cmp	r2, r3
 801bd14:	d3ec      	bcc.n	801bcf0 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801bd16:	8abb      	ldrh	r3, [r7, #20]
 801bd18:	461a      	mov	r2, r3
 801bd1a:	4b0e      	ldr	r3, [pc, #56]	@ (801bd54 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801bd1c:	18d0      	adds	r0, r2, r3
 801bd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801bd22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801bd26:	f7ff fb01 	bl	801b32c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801bd2a:	f000 f9df 	bl	801c0ec <TRACE_UnLock>

    return TRACE_Send();
 801bd2e:	f000 f831 	bl	801bd94 <TRACE_Send>
 801bd32:	4603      	mov	r3, r0
 801bd34:	e003      	b.n	801bd3e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801bd36:	f000 f9d9 	bl	801c0ec <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801bd3a:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801bd3e:	4618      	mov	r0, r3
 801bd40:	3734      	adds	r7, #52	@ 0x34
 801bd42:	46bd      	mov	sp, r7
 801bd44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801bd48:	b001      	add	sp, #4
 801bd4a:	4770      	bx	lr
 801bd4c:	20001560 	.word	0x20001560
 801bd50:	20001978 	.word	0x20001978
 801bd54:	20001578 	.word	0x20001578

0801bd58 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801bd58:	b480      	push	{r7}
 801bd5a:	b083      	sub	sp, #12
 801bd5c:	af00      	add	r7, sp, #0
 801bd5e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801bd60:	4a03      	ldr	r2, [pc, #12]	@ (801bd70 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	6053      	str	r3, [r2, #4]
}
 801bd66:	bf00      	nop
 801bd68:	370c      	adds	r7, #12
 801bd6a:	46bd      	mov	sp, r7
 801bd6c:	bc80      	pop	{r7}
 801bd6e:	4770      	bx	lr
 801bd70:	20001560 	.word	0x20001560

0801bd74 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801bd74:	b480      	push	{r7}
 801bd76:	b083      	sub	sp, #12
 801bd78:	af00      	add	r7, sp, #0
 801bd7a:	4603      	mov	r3, r0
 801bd7c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801bd7e:	4a04      	ldr	r2, [pc, #16]	@ (801bd90 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801bd80:	79fb      	ldrb	r3, [r7, #7]
 801bd82:	7213      	strb	r3, [r2, #8]
}
 801bd84:	bf00      	nop
 801bd86:	370c      	adds	r7, #12
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	bc80      	pop	{r7}
 801bd8c:	4770      	bx	lr
 801bd8e:	bf00      	nop
 801bd90:	20001560 	.word	0x20001560

0801bd94 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801bd94:	b580      	push	{r7, lr}
 801bd96:	b088      	sub	sp, #32
 801bd98:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801bd9a:	2300      	movs	r3, #0
 801bd9c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801bd9e:	2300      	movs	r3, #0
 801bda0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bda2:	f3ef 8310 	mrs	r3, PRIMASK
 801bda6:	613b      	str	r3, [r7, #16]
  return(result);
 801bda8:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bdaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bdac:	b672      	cpsid	i
}
 801bdae:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801bdb0:	f000 f9ba 	bl	801c128 <TRACE_IsLocked>
 801bdb4:	4603      	mov	r3, r0
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d15d      	bne.n	801be76 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801bdba:	f000 f979 	bl	801c0b0 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801bdbe:	4b34      	ldr	r3, [pc, #208]	@ (801be90 <TRACE_Send+0xfc>)
 801bdc0:	8a1a      	ldrh	r2, [r3, #16]
 801bdc2:	4b33      	ldr	r3, [pc, #204]	@ (801be90 <TRACE_Send+0xfc>)
 801bdc4:	8a5b      	ldrh	r3, [r3, #18]
 801bdc6:	429a      	cmp	r2, r3
 801bdc8:	d04d      	beq.n	801be66 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801bdca:	4b31      	ldr	r3, [pc, #196]	@ (801be90 <TRACE_Send+0xfc>)
 801bdcc:	789b      	ldrb	r3, [r3, #2]
 801bdce:	2b01      	cmp	r3, #1
 801bdd0:	d117      	bne.n	801be02 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801bdd2:	4b2f      	ldr	r3, [pc, #188]	@ (801be90 <TRACE_Send+0xfc>)
 801bdd4:	881a      	ldrh	r2, [r3, #0]
 801bdd6:	4b2e      	ldr	r3, [pc, #184]	@ (801be90 <TRACE_Send+0xfc>)
 801bdd8:	8a1b      	ldrh	r3, [r3, #16]
 801bdda:	1ad3      	subs	r3, r2, r3
 801bddc:	b29a      	uxth	r2, r3
 801bdde:	4b2c      	ldr	r3, [pc, #176]	@ (801be90 <TRACE_Send+0xfc>)
 801bde0:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801bde2:	4b2b      	ldr	r3, [pc, #172]	@ (801be90 <TRACE_Send+0xfc>)
 801bde4:	2202      	movs	r2, #2
 801bde6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801bde8:	4b29      	ldr	r3, [pc, #164]	@ (801be90 <TRACE_Send+0xfc>)
 801bdea:	2200      	movs	r2, #0
 801bdec:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801bdee:	4b28      	ldr	r3, [pc, #160]	@ (801be90 <TRACE_Send+0xfc>)
 801bdf0:	8a9b      	ldrh	r3, [r3, #20]
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d105      	bne.n	801be02 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bdf6:	4b26      	ldr	r3, [pc, #152]	@ (801be90 <TRACE_Send+0xfc>)
 801bdf8:	2200      	movs	r2, #0
 801bdfa:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bdfc:	4b24      	ldr	r3, [pc, #144]	@ (801be90 <TRACE_Send+0xfc>)
 801bdfe:	2200      	movs	r2, #0
 801be00:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801be02:	4b23      	ldr	r3, [pc, #140]	@ (801be90 <TRACE_Send+0xfc>)
 801be04:	789b      	ldrb	r3, [r3, #2]
 801be06:	2b00      	cmp	r3, #0
 801be08:	d115      	bne.n	801be36 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801be0a:	4b21      	ldr	r3, [pc, #132]	@ (801be90 <TRACE_Send+0xfc>)
 801be0c:	8a5a      	ldrh	r2, [r3, #18]
 801be0e:	4b20      	ldr	r3, [pc, #128]	@ (801be90 <TRACE_Send+0xfc>)
 801be10:	8a1b      	ldrh	r3, [r3, #16]
 801be12:	429a      	cmp	r2, r3
 801be14:	d908      	bls.n	801be28 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801be16:	4b1e      	ldr	r3, [pc, #120]	@ (801be90 <TRACE_Send+0xfc>)
 801be18:	8a5a      	ldrh	r2, [r3, #18]
 801be1a:	4b1d      	ldr	r3, [pc, #116]	@ (801be90 <TRACE_Send+0xfc>)
 801be1c:	8a1b      	ldrh	r3, [r3, #16]
 801be1e:	1ad3      	subs	r3, r2, r3
 801be20:	b29a      	uxth	r2, r3
 801be22:	4b1b      	ldr	r3, [pc, #108]	@ (801be90 <TRACE_Send+0xfc>)
 801be24:	829a      	strh	r2, [r3, #20]
 801be26:	e006      	b.n	801be36 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801be28:	4b19      	ldr	r3, [pc, #100]	@ (801be90 <TRACE_Send+0xfc>)
 801be2a:	8a1b      	ldrh	r3, [r3, #16]
 801be2c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801be30:	b29a      	uxth	r2, r3
 801be32:	4b17      	ldr	r3, [pc, #92]	@ (801be90 <TRACE_Send+0xfc>)
 801be34:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801be36:	4b16      	ldr	r3, [pc, #88]	@ (801be90 <TRACE_Send+0xfc>)
 801be38:	8a1b      	ldrh	r3, [r3, #16]
 801be3a:	461a      	mov	r2, r3
 801be3c:	4b15      	ldr	r3, [pc, #84]	@ (801be94 <TRACE_Send+0x100>)
 801be3e:	4413      	add	r3, r2
 801be40:	61bb      	str	r3, [r7, #24]
 801be42:	697b      	ldr	r3, [r7, #20]
 801be44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be46:	68fb      	ldr	r3, [r7, #12]
 801be48:	f383 8810 	msr	PRIMASK, r3
}
 801be4c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801be4e:	f7e6 fc25 	bl	800269c <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801be52:	4b11      	ldr	r3, [pc, #68]	@ (801be98 <TRACE_Send+0x104>)
 801be54:	68db      	ldr	r3, [r3, #12]
 801be56:	4a0e      	ldr	r2, [pc, #56]	@ (801be90 <TRACE_Send+0xfc>)
 801be58:	8a92      	ldrh	r2, [r2, #20]
 801be5a:	4611      	mov	r1, r2
 801be5c:	69b8      	ldr	r0, [r7, #24]
 801be5e:	4798      	blx	r3
 801be60:	4603      	mov	r3, r0
 801be62:	77fb      	strb	r3, [r7, #31]
 801be64:	e00d      	b.n	801be82 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801be66:	f000 f941 	bl	801c0ec <TRACE_UnLock>
 801be6a:	697b      	ldr	r3, [r7, #20]
 801be6c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be6e:	68bb      	ldr	r3, [r7, #8]
 801be70:	f383 8810 	msr	PRIMASK, r3
}
 801be74:	e005      	b.n	801be82 <TRACE_Send+0xee>
 801be76:	697b      	ldr	r3, [r7, #20]
 801be78:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	f383 8810 	msr	PRIMASK, r3
}
 801be80:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801be82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801be86:	4618      	mov	r0, r3
 801be88:	3720      	adds	r7, #32
 801be8a:	46bd      	mov	sp, r7
 801be8c:	bd80      	pop	{r7, pc}
 801be8e:	bf00      	nop
 801be90:	20001560 	.word	0x20001560
 801be94:	20001578 	.word	0x20001578
 801be98:	0801d814 	.word	0x0801d814

0801be9c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801be9c:	b580      	push	{r7, lr}
 801be9e:	b088      	sub	sp, #32
 801bea0:	af00      	add	r7, sp, #0
 801bea2:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801bea4:	2300      	movs	r3, #0
 801bea6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bea8:	f3ef 8310 	mrs	r3, PRIMASK
 801beac:	617b      	str	r3, [r7, #20]
  return(result);
 801beae:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801beb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801beb2:	b672      	cpsid	i
}
 801beb4:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801beb6:	4b3c      	ldr	r3, [pc, #240]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801beb8:	789b      	ldrb	r3, [r3, #2]
 801beba:	2b02      	cmp	r3, #2
 801bebc:	d106      	bne.n	801becc <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bebe:	4b3a      	ldr	r3, [pc, #232]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bec0:	2200      	movs	r2, #0
 801bec2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bec4:	4b38      	ldr	r3, [pc, #224]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bec6:	2200      	movs	r2, #0
 801bec8:	821a      	strh	r2, [r3, #16]
 801beca:	e00a      	b.n	801bee2 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801becc:	4b36      	ldr	r3, [pc, #216]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bece:	8a1a      	ldrh	r2, [r3, #16]
 801bed0:	4b35      	ldr	r3, [pc, #212]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bed2:	8a9b      	ldrh	r3, [r3, #20]
 801bed4:	4413      	add	r3, r2
 801bed6:	b29b      	uxth	r3, r3
 801bed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801bedc:	b29a      	uxth	r2, r3
 801bede:	4b32      	ldr	r3, [pc, #200]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bee0:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801bee2:	4b31      	ldr	r3, [pc, #196]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bee4:	8a1a      	ldrh	r2, [r3, #16]
 801bee6:	4b30      	ldr	r3, [pc, #192]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bee8:	8a5b      	ldrh	r3, [r3, #18]
 801beea:	429a      	cmp	r2, r3
 801beec:	d04d      	beq.n	801bf8a <TRACE_TxCpltCallback+0xee>
 801beee:	4b2e      	ldr	r3, [pc, #184]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bef0:	8adb      	ldrh	r3, [r3, #22]
 801bef2:	2b01      	cmp	r3, #1
 801bef4:	d149      	bne.n	801bf8a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801bef6:	4b2c      	ldr	r3, [pc, #176]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bef8:	789b      	ldrb	r3, [r3, #2]
 801befa:	2b01      	cmp	r3, #1
 801befc:	d117      	bne.n	801bf2e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801befe:	4b2a      	ldr	r3, [pc, #168]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf00:	881a      	ldrh	r2, [r3, #0]
 801bf02:	4b29      	ldr	r3, [pc, #164]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf04:	8a1b      	ldrh	r3, [r3, #16]
 801bf06:	1ad3      	subs	r3, r2, r3
 801bf08:	b29a      	uxth	r2, r3
 801bf0a:	4b27      	ldr	r3, [pc, #156]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf0c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801bf0e:	4b26      	ldr	r3, [pc, #152]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf10:	2202      	movs	r2, #2
 801bf12:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801bf14:	4b24      	ldr	r3, [pc, #144]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf16:	2200      	movs	r2, #0
 801bf18:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801bf1a:	4b23      	ldr	r3, [pc, #140]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf1c:	8a9b      	ldrh	r3, [r3, #20]
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	d105      	bne.n	801bf2e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bf22:	4b21      	ldr	r3, [pc, #132]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf24:	2200      	movs	r2, #0
 801bf26:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bf28:	4b1f      	ldr	r3, [pc, #124]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf2a:	2200      	movs	r2, #0
 801bf2c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801bf2e:	4b1e      	ldr	r3, [pc, #120]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf30:	789b      	ldrb	r3, [r3, #2]
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d115      	bne.n	801bf62 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bf36:	4b1c      	ldr	r3, [pc, #112]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf38:	8a5a      	ldrh	r2, [r3, #18]
 801bf3a:	4b1b      	ldr	r3, [pc, #108]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf3c:	8a1b      	ldrh	r3, [r3, #16]
 801bf3e:	429a      	cmp	r2, r3
 801bf40:	d908      	bls.n	801bf54 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801bf42:	4b19      	ldr	r3, [pc, #100]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf44:	8a5a      	ldrh	r2, [r3, #18]
 801bf46:	4b18      	ldr	r3, [pc, #96]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf48:	8a1b      	ldrh	r3, [r3, #16]
 801bf4a:	1ad3      	subs	r3, r2, r3
 801bf4c:	b29a      	uxth	r2, r3
 801bf4e:	4b16      	ldr	r3, [pc, #88]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf50:	829a      	strh	r2, [r3, #20]
 801bf52:	e006      	b.n	801bf62 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801bf54:	4b14      	ldr	r3, [pc, #80]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf56:	8a1b      	ldrh	r3, [r3, #16]
 801bf58:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bf5c:	b29a      	uxth	r2, r3
 801bf5e:	4b12      	ldr	r3, [pc, #72]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf60:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801bf62:	4b11      	ldr	r3, [pc, #68]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf64:	8a1b      	ldrh	r3, [r3, #16]
 801bf66:	461a      	mov	r2, r3
 801bf68:	4b10      	ldr	r3, [pc, #64]	@ (801bfac <TRACE_TxCpltCallback+0x110>)
 801bf6a:	4413      	add	r3, r2
 801bf6c:	61fb      	str	r3, [r7, #28]
 801bf6e:	69bb      	ldr	r3, [r7, #24]
 801bf70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf72:	693b      	ldr	r3, [r7, #16]
 801bf74:	f383 8810 	msr	PRIMASK, r3
}
 801bf78:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801bf7a:	4b0d      	ldr	r3, [pc, #52]	@ (801bfb0 <TRACE_TxCpltCallback+0x114>)
 801bf7c:	68db      	ldr	r3, [r3, #12]
 801bf7e:	4a0a      	ldr	r2, [pc, #40]	@ (801bfa8 <TRACE_TxCpltCallback+0x10c>)
 801bf80:	8a92      	ldrh	r2, [r2, #20]
 801bf82:	4611      	mov	r1, r2
 801bf84:	69f8      	ldr	r0, [r7, #28]
 801bf86:	4798      	blx	r3
 801bf88:	e00a      	b.n	801bfa0 <TRACE_TxCpltCallback+0x104>
 801bf8a:	69bb      	ldr	r3, [r7, #24]
 801bf8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf8e:	68fb      	ldr	r3, [r7, #12]
 801bf90:	f383 8810 	msr	PRIMASK, r3
}
 801bf94:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801bf96:	f7e6 fb89 	bl	80026ac <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801bf9a:	f000 f8a7 	bl	801c0ec <TRACE_UnLock>
  }
}
 801bf9e:	bf00      	nop
 801bfa0:	bf00      	nop
 801bfa2:	3720      	adds	r7, #32
 801bfa4:	46bd      	mov	sp, r7
 801bfa6:	bd80      	pop	{r7, pc}
 801bfa8:	20001560 	.word	0x20001560
 801bfac:	20001578 	.word	0x20001578
 801bfb0:	0801d814 	.word	0x0801d814

0801bfb4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801bfb4:	b480      	push	{r7}
 801bfb6:	b087      	sub	sp, #28
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	4603      	mov	r3, r0
 801bfbc:	6039      	str	r1, [r7, #0]
 801bfbe:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801bfc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bfc4:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bfc6:	f3ef 8310 	mrs	r3, PRIMASK
 801bfca:	60fb      	str	r3, [r7, #12]
  return(result);
 801bfcc:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bfce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bfd0:	b672      	cpsid	i
}
 801bfd2:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801bfd4:	4b35      	ldr	r3, [pc, #212]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801bfd6:	8a5a      	ldrh	r2, [r3, #18]
 801bfd8:	4b34      	ldr	r3, [pc, #208]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801bfda:	8a1b      	ldrh	r3, [r3, #16]
 801bfdc:	429a      	cmp	r2, r3
 801bfde:	d11b      	bne.n	801c018 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bfe0:	4b32      	ldr	r3, [pc, #200]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801bfe2:	8a5b      	ldrh	r3, [r3, #18]
 801bfe4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bfe8:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801bfea:	88fa      	ldrh	r2, [r7, #6]
 801bfec:	8afb      	ldrh	r3, [r7, #22]
 801bfee:	429a      	cmp	r2, r3
 801bff0:	d33a      	bcc.n	801c068 <TRACE_AllocateBufer+0xb4>
 801bff2:	4b2e      	ldr	r3, [pc, #184]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801bff4:	8a1b      	ldrh	r3, [r3, #16]
 801bff6:	88fa      	ldrh	r2, [r7, #6]
 801bff8:	429a      	cmp	r2, r3
 801bffa:	d235      	bcs.n	801c068 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bffc:	4b2b      	ldr	r3, [pc, #172]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801bffe:	2201      	movs	r2, #1
 801c000:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c002:	4b2a      	ldr	r3, [pc, #168]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c004:	8a5a      	ldrh	r2, [r3, #18]
 801c006:	4b29      	ldr	r3, [pc, #164]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c008:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c00a:	4b28      	ldr	r3, [pc, #160]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c00c:	8a1b      	ldrh	r3, [r3, #16]
 801c00e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c010:	4b26      	ldr	r3, [pc, #152]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c012:	2200      	movs	r2, #0
 801c014:	825a      	strh	r2, [r3, #18]
 801c016:	e027      	b.n	801c068 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c018:	4b24      	ldr	r3, [pc, #144]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c01a:	8a5a      	ldrh	r2, [r3, #18]
 801c01c:	4b23      	ldr	r3, [pc, #140]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c01e:	8a1b      	ldrh	r3, [r3, #16]
 801c020:	429a      	cmp	r2, r3
 801c022:	d91b      	bls.n	801c05c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c024:	4b21      	ldr	r3, [pc, #132]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c026:	8a5b      	ldrh	r3, [r3, #18]
 801c028:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c02c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c02e:	88fa      	ldrh	r2, [r7, #6]
 801c030:	8afb      	ldrh	r3, [r7, #22]
 801c032:	429a      	cmp	r2, r3
 801c034:	d318      	bcc.n	801c068 <TRACE_AllocateBufer+0xb4>
 801c036:	4b1d      	ldr	r3, [pc, #116]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c038:	8a1b      	ldrh	r3, [r3, #16]
 801c03a:	88fa      	ldrh	r2, [r7, #6]
 801c03c:	429a      	cmp	r2, r3
 801c03e:	d213      	bcs.n	801c068 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c040:	4b1a      	ldr	r3, [pc, #104]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c042:	2201      	movs	r2, #1
 801c044:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c046:	4b19      	ldr	r3, [pc, #100]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c048:	8a5a      	ldrh	r2, [r3, #18]
 801c04a:	4b18      	ldr	r3, [pc, #96]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c04c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c04e:	4b17      	ldr	r3, [pc, #92]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c050:	8a1b      	ldrh	r3, [r3, #16]
 801c052:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c054:	4b15      	ldr	r3, [pc, #84]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c056:	2200      	movs	r2, #0
 801c058:	825a      	strh	r2, [r3, #18]
 801c05a:	e005      	b.n	801c068 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801c05c:	4b13      	ldr	r3, [pc, #76]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c05e:	8a1a      	ldrh	r2, [r3, #16]
 801c060:	4b12      	ldr	r3, [pc, #72]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c062:	8a5b      	ldrh	r3, [r3, #18]
 801c064:	1ad3      	subs	r3, r2, r3
 801c066:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801c068:	8afa      	ldrh	r2, [r7, #22]
 801c06a:	88fb      	ldrh	r3, [r7, #6]
 801c06c:	429a      	cmp	r2, r3
 801c06e:	d90f      	bls.n	801c090 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801c070:	4b0e      	ldr	r3, [pc, #56]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c072:	8a5a      	ldrh	r2, [r3, #18]
 801c074:	683b      	ldr	r3, [r7, #0]
 801c076:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c078:	4b0c      	ldr	r3, [pc, #48]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c07a:	8a5a      	ldrh	r2, [r3, #18]
 801c07c:	88fb      	ldrh	r3, [r7, #6]
 801c07e:	4413      	add	r3, r2
 801c080:	b29b      	uxth	r3, r3
 801c082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c086:	b29a      	uxth	r2, r3
 801c088:	4b08      	ldr	r3, [pc, #32]	@ (801c0ac <TRACE_AllocateBufer+0xf8>)
 801c08a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801c08c:	2300      	movs	r3, #0
 801c08e:	82bb      	strh	r3, [r7, #20]
 801c090:	693b      	ldr	r3, [r7, #16]
 801c092:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c094:	68bb      	ldr	r3, [r7, #8]
 801c096:	f383 8810 	msr	PRIMASK, r3
}
 801c09a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801c09c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801c0a0:	4618      	mov	r0, r3
 801c0a2:	371c      	adds	r7, #28
 801c0a4:	46bd      	mov	sp, r7
 801c0a6:	bc80      	pop	{r7}
 801c0a8:	4770      	bx	lr
 801c0aa:	bf00      	nop
 801c0ac:	20001560 	.word	0x20001560

0801c0b0 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801c0b0:	b480      	push	{r7}
 801c0b2:	b085      	sub	sp, #20
 801c0b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0b6:	f3ef 8310 	mrs	r3, PRIMASK
 801c0ba:	607b      	str	r3, [r7, #4]
  return(result);
 801c0bc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c0be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c0c0:	b672      	cpsid	i
}
 801c0c2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801c0c4:	4b08      	ldr	r3, [pc, #32]	@ (801c0e8 <TRACE_Lock+0x38>)
 801c0c6:	8adb      	ldrh	r3, [r3, #22]
 801c0c8:	3301      	adds	r3, #1
 801c0ca:	b29a      	uxth	r2, r3
 801c0cc:	4b06      	ldr	r3, [pc, #24]	@ (801c0e8 <TRACE_Lock+0x38>)
 801c0ce:	82da      	strh	r2, [r3, #22]
 801c0d0:	68fb      	ldr	r3, [r7, #12]
 801c0d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0d4:	68bb      	ldr	r3, [r7, #8]
 801c0d6:	f383 8810 	msr	PRIMASK, r3
}
 801c0da:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c0dc:	bf00      	nop
 801c0de:	3714      	adds	r7, #20
 801c0e0:	46bd      	mov	sp, r7
 801c0e2:	bc80      	pop	{r7}
 801c0e4:	4770      	bx	lr
 801c0e6:	bf00      	nop
 801c0e8:	20001560 	.word	0x20001560

0801c0ec <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801c0ec:	b480      	push	{r7}
 801c0ee:	b085      	sub	sp, #20
 801c0f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0f2:	f3ef 8310 	mrs	r3, PRIMASK
 801c0f6:	607b      	str	r3, [r7, #4]
  return(result);
 801c0f8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c0fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c0fc:	b672      	cpsid	i
}
 801c0fe:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801c100:	4b08      	ldr	r3, [pc, #32]	@ (801c124 <TRACE_UnLock+0x38>)
 801c102:	8adb      	ldrh	r3, [r3, #22]
 801c104:	3b01      	subs	r3, #1
 801c106:	b29a      	uxth	r2, r3
 801c108:	4b06      	ldr	r3, [pc, #24]	@ (801c124 <TRACE_UnLock+0x38>)
 801c10a:	82da      	strh	r2, [r3, #22]
 801c10c:	68fb      	ldr	r3, [r7, #12]
 801c10e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c110:	68bb      	ldr	r3, [r7, #8]
 801c112:	f383 8810 	msr	PRIMASK, r3
}
 801c116:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c118:	bf00      	nop
 801c11a:	3714      	adds	r7, #20
 801c11c:	46bd      	mov	sp, r7
 801c11e:	bc80      	pop	{r7}
 801c120:	4770      	bx	lr
 801c122:	bf00      	nop
 801c124:	20001560 	.word	0x20001560

0801c128 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801c128:	b480      	push	{r7}
 801c12a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c12c:	4b05      	ldr	r3, [pc, #20]	@ (801c144 <TRACE_IsLocked+0x1c>)
 801c12e:	8adb      	ldrh	r3, [r3, #22]
 801c130:	2b00      	cmp	r3, #0
 801c132:	bf14      	ite	ne
 801c134:	2301      	movne	r3, #1
 801c136:	2300      	moveq	r3, #0
 801c138:	b2db      	uxtb	r3, r3
}
 801c13a:	4618      	mov	r0, r3
 801c13c:	46bd      	mov	sp, r7
 801c13e:	bc80      	pop	{r7}
 801c140:	4770      	bx	lr
 801c142:	bf00      	nop
 801c144:	20001560 	.word	0x20001560

0801c148 <floor>:
 801c148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c14c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801c150:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801c154:	2e13      	cmp	r6, #19
 801c156:	4602      	mov	r2, r0
 801c158:	460b      	mov	r3, r1
 801c15a:	460c      	mov	r4, r1
 801c15c:	4605      	mov	r5, r0
 801c15e:	4680      	mov	r8, r0
 801c160:	dc35      	bgt.n	801c1ce <floor+0x86>
 801c162:	2e00      	cmp	r6, #0
 801c164:	da17      	bge.n	801c196 <floor+0x4e>
 801c166:	a334      	add	r3, pc, #208	@ (adr r3, 801c238 <floor+0xf0>)
 801c168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c16c:	f7e4 f866 	bl	800023c <__adddf3>
 801c170:	2200      	movs	r2, #0
 801c172:	2300      	movs	r3, #0
 801c174:	f7e4 fca8 	bl	8000ac8 <__aeabi_dcmpgt>
 801c178:	b150      	cbz	r0, 801c190 <floor+0x48>
 801c17a:	2c00      	cmp	r4, #0
 801c17c:	da57      	bge.n	801c22e <floor+0xe6>
 801c17e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801c182:	432c      	orrs	r4, r5
 801c184:	2500      	movs	r5, #0
 801c186:	42ac      	cmp	r4, r5
 801c188:	4c2d      	ldr	r4, [pc, #180]	@ (801c240 <floor+0xf8>)
 801c18a:	bf08      	it	eq
 801c18c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801c190:	4623      	mov	r3, r4
 801c192:	462a      	mov	r2, r5
 801c194:	e024      	b.n	801c1e0 <floor+0x98>
 801c196:	4f2b      	ldr	r7, [pc, #172]	@ (801c244 <floor+0xfc>)
 801c198:	4137      	asrs	r7, r6
 801c19a:	ea01 0c07 	and.w	ip, r1, r7
 801c19e:	ea5c 0c00 	orrs.w	ip, ip, r0
 801c1a2:	d01d      	beq.n	801c1e0 <floor+0x98>
 801c1a4:	a324      	add	r3, pc, #144	@ (adr r3, 801c238 <floor+0xf0>)
 801c1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1aa:	f7e4 f847 	bl	800023c <__adddf3>
 801c1ae:	2200      	movs	r2, #0
 801c1b0:	2300      	movs	r3, #0
 801c1b2:	f7e4 fc89 	bl	8000ac8 <__aeabi_dcmpgt>
 801c1b6:	2800      	cmp	r0, #0
 801c1b8:	d0ea      	beq.n	801c190 <floor+0x48>
 801c1ba:	2c00      	cmp	r4, #0
 801c1bc:	bfbe      	ittt	lt
 801c1be:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801c1c2:	4133      	asrlt	r3, r6
 801c1c4:	18e4      	addlt	r4, r4, r3
 801c1c6:	ea24 0407 	bic.w	r4, r4, r7
 801c1ca:	2500      	movs	r5, #0
 801c1cc:	e7e0      	b.n	801c190 <floor+0x48>
 801c1ce:	2e33      	cmp	r6, #51	@ 0x33
 801c1d0:	dd0a      	ble.n	801c1e8 <floor+0xa0>
 801c1d2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801c1d6:	d103      	bne.n	801c1e0 <floor+0x98>
 801c1d8:	f7e4 f830 	bl	800023c <__adddf3>
 801c1dc:	4602      	mov	r2, r0
 801c1de:	460b      	mov	r3, r1
 801c1e0:	4610      	mov	r0, r2
 801c1e2:	4619      	mov	r1, r3
 801c1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1e8:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801c1ec:	f04f 3cff 	mov.w	ip, #4294967295
 801c1f0:	fa2c f707 	lsr.w	r7, ip, r7
 801c1f4:	4207      	tst	r7, r0
 801c1f6:	d0f3      	beq.n	801c1e0 <floor+0x98>
 801c1f8:	a30f      	add	r3, pc, #60	@ (adr r3, 801c238 <floor+0xf0>)
 801c1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1fe:	f7e4 f81d 	bl	800023c <__adddf3>
 801c202:	2200      	movs	r2, #0
 801c204:	2300      	movs	r3, #0
 801c206:	f7e4 fc5f 	bl	8000ac8 <__aeabi_dcmpgt>
 801c20a:	2800      	cmp	r0, #0
 801c20c:	d0c0      	beq.n	801c190 <floor+0x48>
 801c20e:	2c00      	cmp	r4, #0
 801c210:	da0a      	bge.n	801c228 <floor+0xe0>
 801c212:	2e14      	cmp	r6, #20
 801c214:	d101      	bne.n	801c21a <floor+0xd2>
 801c216:	3401      	adds	r4, #1
 801c218:	e006      	b.n	801c228 <floor+0xe0>
 801c21a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801c21e:	2301      	movs	r3, #1
 801c220:	40b3      	lsls	r3, r6
 801c222:	441d      	add	r5, r3
 801c224:	4545      	cmp	r5, r8
 801c226:	d3f6      	bcc.n	801c216 <floor+0xce>
 801c228:	ea25 0507 	bic.w	r5, r5, r7
 801c22c:	e7b0      	b.n	801c190 <floor+0x48>
 801c22e:	2500      	movs	r5, #0
 801c230:	462c      	mov	r4, r5
 801c232:	e7ad      	b.n	801c190 <floor+0x48>
 801c234:	f3af 8000 	nop.w
 801c238:	8800759c 	.word	0x8800759c
 801c23c:	7e37e43c 	.word	0x7e37e43c
 801c240:	bff00000 	.word	0xbff00000
 801c244:	000fffff 	.word	0x000fffff

0801c248 <std>:
 801c248:	2300      	movs	r3, #0
 801c24a:	b510      	push	{r4, lr}
 801c24c:	4604      	mov	r4, r0
 801c24e:	e9c0 3300 	strd	r3, r3, [r0]
 801c252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c256:	6083      	str	r3, [r0, #8]
 801c258:	8181      	strh	r1, [r0, #12]
 801c25a:	6643      	str	r3, [r0, #100]	@ 0x64
 801c25c:	81c2      	strh	r2, [r0, #14]
 801c25e:	6183      	str	r3, [r0, #24]
 801c260:	4619      	mov	r1, r3
 801c262:	2208      	movs	r2, #8
 801c264:	305c      	adds	r0, #92	@ 0x5c
 801c266:	f000 fa01 	bl	801c66c <memset>
 801c26a:	4b0d      	ldr	r3, [pc, #52]	@ (801c2a0 <std+0x58>)
 801c26c:	6263      	str	r3, [r4, #36]	@ 0x24
 801c26e:	4b0d      	ldr	r3, [pc, #52]	@ (801c2a4 <std+0x5c>)
 801c270:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c272:	4b0d      	ldr	r3, [pc, #52]	@ (801c2a8 <std+0x60>)
 801c274:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c276:	4b0d      	ldr	r3, [pc, #52]	@ (801c2ac <std+0x64>)
 801c278:	6323      	str	r3, [r4, #48]	@ 0x30
 801c27a:	4b0d      	ldr	r3, [pc, #52]	@ (801c2b0 <std+0x68>)
 801c27c:	6224      	str	r4, [r4, #32]
 801c27e:	429c      	cmp	r4, r3
 801c280:	d006      	beq.n	801c290 <std+0x48>
 801c282:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c286:	4294      	cmp	r4, r2
 801c288:	d002      	beq.n	801c290 <std+0x48>
 801c28a:	33d0      	adds	r3, #208	@ 0xd0
 801c28c:	429c      	cmp	r4, r3
 801c28e:	d105      	bne.n	801c29c <std+0x54>
 801c290:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c298:	f000 ba60 	b.w	801c75c <__retarget_lock_init_recursive>
 801c29c:	bd10      	pop	{r4, pc}
 801c29e:	bf00      	nop
 801c2a0:	0801c4bd 	.word	0x0801c4bd
 801c2a4:	0801c4df 	.word	0x0801c4df
 801c2a8:	0801c517 	.word	0x0801c517
 801c2ac:	0801c53b 	.word	0x0801c53b
 801c2b0:	20001b78 	.word	0x20001b78

0801c2b4 <stdio_exit_handler>:
 801c2b4:	4a02      	ldr	r2, [pc, #8]	@ (801c2c0 <stdio_exit_handler+0xc>)
 801c2b6:	4903      	ldr	r1, [pc, #12]	@ (801c2c4 <stdio_exit_handler+0x10>)
 801c2b8:	4803      	ldr	r0, [pc, #12]	@ (801c2c8 <stdio_exit_handler+0x14>)
 801c2ba:	f000 b869 	b.w	801c390 <_fwalk_sglue>
 801c2be:	bf00      	nop
 801c2c0:	20000130 	.word	0x20000130
 801c2c4:	0801cff1 	.word	0x0801cff1
 801c2c8:	20000140 	.word	0x20000140

0801c2cc <cleanup_stdio>:
 801c2cc:	6841      	ldr	r1, [r0, #4]
 801c2ce:	4b0c      	ldr	r3, [pc, #48]	@ (801c300 <cleanup_stdio+0x34>)
 801c2d0:	4299      	cmp	r1, r3
 801c2d2:	b510      	push	{r4, lr}
 801c2d4:	4604      	mov	r4, r0
 801c2d6:	d001      	beq.n	801c2dc <cleanup_stdio+0x10>
 801c2d8:	f000 fe8a 	bl	801cff0 <_fflush_r>
 801c2dc:	68a1      	ldr	r1, [r4, #8]
 801c2de:	4b09      	ldr	r3, [pc, #36]	@ (801c304 <cleanup_stdio+0x38>)
 801c2e0:	4299      	cmp	r1, r3
 801c2e2:	d002      	beq.n	801c2ea <cleanup_stdio+0x1e>
 801c2e4:	4620      	mov	r0, r4
 801c2e6:	f000 fe83 	bl	801cff0 <_fflush_r>
 801c2ea:	68e1      	ldr	r1, [r4, #12]
 801c2ec:	4b06      	ldr	r3, [pc, #24]	@ (801c308 <cleanup_stdio+0x3c>)
 801c2ee:	4299      	cmp	r1, r3
 801c2f0:	d004      	beq.n	801c2fc <cleanup_stdio+0x30>
 801c2f2:	4620      	mov	r0, r4
 801c2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c2f8:	f000 be7a 	b.w	801cff0 <_fflush_r>
 801c2fc:	bd10      	pop	{r4, pc}
 801c2fe:	bf00      	nop
 801c300:	20001b78 	.word	0x20001b78
 801c304:	20001be0 	.word	0x20001be0
 801c308:	20001c48 	.word	0x20001c48

0801c30c <global_stdio_init.part.0>:
 801c30c:	b510      	push	{r4, lr}
 801c30e:	4b0b      	ldr	r3, [pc, #44]	@ (801c33c <global_stdio_init.part.0+0x30>)
 801c310:	4c0b      	ldr	r4, [pc, #44]	@ (801c340 <global_stdio_init.part.0+0x34>)
 801c312:	4a0c      	ldr	r2, [pc, #48]	@ (801c344 <global_stdio_init.part.0+0x38>)
 801c314:	601a      	str	r2, [r3, #0]
 801c316:	4620      	mov	r0, r4
 801c318:	2200      	movs	r2, #0
 801c31a:	2104      	movs	r1, #4
 801c31c:	f7ff ff94 	bl	801c248 <std>
 801c320:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c324:	2201      	movs	r2, #1
 801c326:	2109      	movs	r1, #9
 801c328:	f7ff ff8e 	bl	801c248 <std>
 801c32c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c330:	2202      	movs	r2, #2
 801c332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c336:	2112      	movs	r1, #18
 801c338:	f7ff bf86 	b.w	801c248 <std>
 801c33c:	20001cb0 	.word	0x20001cb0
 801c340:	20001b78 	.word	0x20001b78
 801c344:	0801c2b5 	.word	0x0801c2b5

0801c348 <__sfp_lock_acquire>:
 801c348:	4801      	ldr	r0, [pc, #4]	@ (801c350 <__sfp_lock_acquire+0x8>)
 801c34a:	f000 ba08 	b.w	801c75e <__retarget_lock_acquire_recursive>
 801c34e:	bf00      	nop
 801c350:	20001cb9 	.word	0x20001cb9

0801c354 <__sfp_lock_release>:
 801c354:	4801      	ldr	r0, [pc, #4]	@ (801c35c <__sfp_lock_release+0x8>)
 801c356:	f000 ba03 	b.w	801c760 <__retarget_lock_release_recursive>
 801c35a:	bf00      	nop
 801c35c:	20001cb9 	.word	0x20001cb9

0801c360 <__sinit>:
 801c360:	b510      	push	{r4, lr}
 801c362:	4604      	mov	r4, r0
 801c364:	f7ff fff0 	bl	801c348 <__sfp_lock_acquire>
 801c368:	6a23      	ldr	r3, [r4, #32]
 801c36a:	b11b      	cbz	r3, 801c374 <__sinit+0x14>
 801c36c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c370:	f7ff bff0 	b.w	801c354 <__sfp_lock_release>
 801c374:	4b04      	ldr	r3, [pc, #16]	@ (801c388 <__sinit+0x28>)
 801c376:	6223      	str	r3, [r4, #32]
 801c378:	4b04      	ldr	r3, [pc, #16]	@ (801c38c <__sinit+0x2c>)
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	d1f5      	bne.n	801c36c <__sinit+0xc>
 801c380:	f7ff ffc4 	bl	801c30c <global_stdio_init.part.0>
 801c384:	e7f2      	b.n	801c36c <__sinit+0xc>
 801c386:	bf00      	nop
 801c388:	0801c2cd 	.word	0x0801c2cd
 801c38c:	20001cb0 	.word	0x20001cb0

0801c390 <_fwalk_sglue>:
 801c390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c394:	4607      	mov	r7, r0
 801c396:	4688      	mov	r8, r1
 801c398:	4614      	mov	r4, r2
 801c39a:	2600      	movs	r6, #0
 801c39c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c3a0:	f1b9 0901 	subs.w	r9, r9, #1
 801c3a4:	d505      	bpl.n	801c3b2 <_fwalk_sglue+0x22>
 801c3a6:	6824      	ldr	r4, [r4, #0]
 801c3a8:	2c00      	cmp	r4, #0
 801c3aa:	d1f7      	bne.n	801c39c <_fwalk_sglue+0xc>
 801c3ac:	4630      	mov	r0, r6
 801c3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c3b2:	89ab      	ldrh	r3, [r5, #12]
 801c3b4:	2b01      	cmp	r3, #1
 801c3b6:	d907      	bls.n	801c3c8 <_fwalk_sglue+0x38>
 801c3b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c3bc:	3301      	adds	r3, #1
 801c3be:	d003      	beq.n	801c3c8 <_fwalk_sglue+0x38>
 801c3c0:	4629      	mov	r1, r5
 801c3c2:	4638      	mov	r0, r7
 801c3c4:	47c0      	blx	r8
 801c3c6:	4306      	orrs	r6, r0
 801c3c8:	3568      	adds	r5, #104	@ 0x68
 801c3ca:	e7e9      	b.n	801c3a0 <_fwalk_sglue+0x10>

0801c3cc <iprintf>:
 801c3cc:	b40f      	push	{r0, r1, r2, r3}
 801c3ce:	b507      	push	{r0, r1, r2, lr}
 801c3d0:	4906      	ldr	r1, [pc, #24]	@ (801c3ec <iprintf+0x20>)
 801c3d2:	ab04      	add	r3, sp, #16
 801c3d4:	6808      	ldr	r0, [r1, #0]
 801c3d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801c3da:	6881      	ldr	r1, [r0, #8]
 801c3dc:	9301      	str	r3, [sp, #4]
 801c3de:	f000 fae1 	bl	801c9a4 <_vfiprintf_r>
 801c3e2:	b003      	add	sp, #12
 801c3e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801c3e8:	b004      	add	sp, #16
 801c3ea:	4770      	bx	lr
 801c3ec:	2000013c 	.word	0x2000013c

0801c3f0 <putchar>:
 801c3f0:	4b02      	ldr	r3, [pc, #8]	@ (801c3fc <putchar+0xc>)
 801c3f2:	4601      	mov	r1, r0
 801c3f4:	6818      	ldr	r0, [r3, #0]
 801c3f6:	6882      	ldr	r2, [r0, #8]
 801c3f8:	f000 be84 	b.w	801d104 <_putc_r>
 801c3fc:	2000013c 	.word	0x2000013c

0801c400 <_puts_r>:
 801c400:	6a03      	ldr	r3, [r0, #32]
 801c402:	b570      	push	{r4, r5, r6, lr}
 801c404:	6884      	ldr	r4, [r0, #8]
 801c406:	4605      	mov	r5, r0
 801c408:	460e      	mov	r6, r1
 801c40a:	b90b      	cbnz	r3, 801c410 <_puts_r+0x10>
 801c40c:	f7ff ffa8 	bl	801c360 <__sinit>
 801c410:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c412:	07db      	lsls	r3, r3, #31
 801c414:	d405      	bmi.n	801c422 <_puts_r+0x22>
 801c416:	89a3      	ldrh	r3, [r4, #12]
 801c418:	0598      	lsls	r0, r3, #22
 801c41a:	d402      	bmi.n	801c422 <_puts_r+0x22>
 801c41c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c41e:	f000 f99e 	bl	801c75e <__retarget_lock_acquire_recursive>
 801c422:	89a3      	ldrh	r3, [r4, #12]
 801c424:	0719      	lsls	r1, r3, #28
 801c426:	d502      	bpl.n	801c42e <_puts_r+0x2e>
 801c428:	6923      	ldr	r3, [r4, #16]
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d135      	bne.n	801c49a <_puts_r+0x9a>
 801c42e:	4621      	mov	r1, r4
 801c430:	4628      	mov	r0, r5
 801c432:	f000 f8c5 	bl	801c5c0 <__swsetup_r>
 801c436:	b380      	cbz	r0, 801c49a <_puts_r+0x9a>
 801c438:	f04f 35ff 	mov.w	r5, #4294967295
 801c43c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c43e:	07da      	lsls	r2, r3, #31
 801c440:	d405      	bmi.n	801c44e <_puts_r+0x4e>
 801c442:	89a3      	ldrh	r3, [r4, #12]
 801c444:	059b      	lsls	r3, r3, #22
 801c446:	d402      	bmi.n	801c44e <_puts_r+0x4e>
 801c448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c44a:	f000 f989 	bl	801c760 <__retarget_lock_release_recursive>
 801c44e:	4628      	mov	r0, r5
 801c450:	bd70      	pop	{r4, r5, r6, pc}
 801c452:	2b00      	cmp	r3, #0
 801c454:	da04      	bge.n	801c460 <_puts_r+0x60>
 801c456:	69a2      	ldr	r2, [r4, #24]
 801c458:	429a      	cmp	r2, r3
 801c45a:	dc17      	bgt.n	801c48c <_puts_r+0x8c>
 801c45c:	290a      	cmp	r1, #10
 801c45e:	d015      	beq.n	801c48c <_puts_r+0x8c>
 801c460:	6823      	ldr	r3, [r4, #0]
 801c462:	1c5a      	adds	r2, r3, #1
 801c464:	6022      	str	r2, [r4, #0]
 801c466:	7019      	strb	r1, [r3, #0]
 801c468:	68a3      	ldr	r3, [r4, #8]
 801c46a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c46e:	3b01      	subs	r3, #1
 801c470:	60a3      	str	r3, [r4, #8]
 801c472:	2900      	cmp	r1, #0
 801c474:	d1ed      	bne.n	801c452 <_puts_r+0x52>
 801c476:	2b00      	cmp	r3, #0
 801c478:	da11      	bge.n	801c49e <_puts_r+0x9e>
 801c47a:	4622      	mov	r2, r4
 801c47c:	210a      	movs	r1, #10
 801c47e:	4628      	mov	r0, r5
 801c480:	f000 f85f 	bl	801c542 <__swbuf_r>
 801c484:	3001      	adds	r0, #1
 801c486:	d0d7      	beq.n	801c438 <_puts_r+0x38>
 801c488:	250a      	movs	r5, #10
 801c48a:	e7d7      	b.n	801c43c <_puts_r+0x3c>
 801c48c:	4622      	mov	r2, r4
 801c48e:	4628      	mov	r0, r5
 801c490:	f000 f857 	bl	801c542 <__swbuf_r>
 801c494:	3001      	adds	r0, #1
 801c496:	d1e7      	bne.n	801c468 <_puts_r+0x68>
 801c498:	e7ce      	b.n	801c438 <_puts_r+0x38>
 801c49a:	3e01      	subs	r6, #1
 801c49c:	e7e4      	b.n	801c468 <_puts_r+0x68>
 801c49e:	6823      	ldr	r3, [r4, #0]
 801c4a0:	1c5a      	adds	r2, r3, #1
 801c4a2:	6022      	str	r2, [r4, #0]
 801c4a4:	220a      	movs	r2, #10
 801c4a6:	701a      	strb	r2, [r3, #0]
 801c4a8:	e7ee      	b.n	801c488 <_puts_r+0x88>
	...

0801c4ac <puts>:
 801c4ac:	4b02      	ldr	r3, [pc, #8]	@ (801c4b8 <puts+0xc>)
 801c4ae:	4601      	mov	r1, r0
 801c4b0:	6818      	ldr	r0, [r3, #0]
 801c4b2:	f7ff bfa5 	b.w	801c400 <_puts_r>
 801c4b6:	bf00      	nop
 801c4b8:	2000013c 	.word	0x2000013c

0801c4bc <__sread>:
 801c4bc:	b510      	push	{r4, lr}
 801c4be:	460c      	mov	r4, r1
 801c4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4c4:	f000 f8fc 	bl	801c6c0 <_read_r>
 801c4c8:	2800      	cmp	r0, #0
 801c4ca:	bfab      	itete	ge
 801c4cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c4ce:	89a3      	ldrhlt	r3, [r4, #12]
 801c4d0:	181b      	addge	r3, r3, r0
 801c4d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c4d6:	bfac      	ite	ge
 801c4d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c4da:	81a3      	strhlt	r3, [r4, #12]
 801c4dc:	bd10      	pop	{r4, pc}

0801c4de <__swrite>:
 801c4de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4e2:	461f      	mov	r7, r3
 801c4e4:	898b      	ldrh	r3, [r1, #12]
 801c4e6:	05db      	lsls	r3, r3, #23
 801c4e8:	4605      	mov	r5, r0
 801c4ea:	460c      	mov	r4, r1
 801c4ec:	4616      	mov	r6, r2
 801c4ee:	d505      	bpl.n	801c4fc <__swrite+0x1e>
 801c4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4f4:	2302      	movs	r3, #2
 801c4f6:	2200      	movs	r2, #0
 801c4f8:	f000 f8d0 	bl	801c69c <_lseek_r>
 801c4fc:	89a3      	ldrh	r3, [r4, #12]
 801c4fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c502:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c506:	81a3      	strh	r3, [r4, #12]
 801c508:	4632      	mov	r2, r6
 801c50a:	463b      	mov	r3, r7
 801c50c:	4628      	mov	r0, r5
 801c50e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c512:	f000 b8e7 	b.w	801c6e4 <_write_r>

0801c516 <__sseek>:
 801c516:	b510      	push	{r4, lr}
 801c518:	460c      	mov	r4, r1
 801c51a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c51e:	f000 f8bd 	bl	801c69c <_lseek_r>
 801c522:	1c43      	adds	r3, r0, #1
 801c524:	89a3      	ldrh	r3, [r4, #12]
 801c526:	bf15      	itete	ne
 801c528:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c52a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c52e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c532:	81a3      	strheq	r3, [r4, #12]
 801c534:	bf18      	it	ne
 801c536:	81a3      	strhne	r3, [r4, #12]
 801c538:	bd10      	pop	{r4, pc}

0801c53a <__sclose>:
 801c53a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c53e:	f000 b89d 	b.w	801c67c <_close_r>

0801c542 <__swbuf_r>:
 801c542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c544:	460e      	mov	r6, r1
 801c546:	4614      	mov	r4, r2
 801c548:	4605      	mov	r5, r0
 801c54a:	b118      	cbz	r0, 801c554 <__swbuf_r+0x12>
 801c54c:	6a03      	ldr	r3, [r0, #32]
 801c54e:	b90b      	cbnz	r3, 801c554 <__swbuf_r+0x12>
 801c550:	f7ff ff06 	bl	801c360 <__sinit>
 801c554:	69a3      	ldr	r3, [r4, #24]
 801c556:	60a3      	str	r3, [r4, #8]
 801c558:	89a3      	ldrh	r3, [r4, #12]
 801c55a:	071a      	lsls	r2, r3, #28
 801c55c:	d501      	bpl.n	801c562 <__swbuf_r+0x20>
 801c55e:	6923      	ldr	r3, [r4, #16]
 801c560:	b943      	cbnz	r3, 801c574 <__swbuf_r+0x32>
 801c562:	4621      	mov	r1, r4
 801c564:	4628      	mov	r0, r5
 801c566:	f000 f82b 	bl	801c5c0 <__swsetup_r>
 801c56a:	b118      	cbz	r0, 801c574 <__swbuf_r+0x32>
 801c56c:	f04f 37ff 	mov.w	r7, #4294967295
 801c570:	4638      	mov	r0, r7
 801c572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c574:	6823      	ldr	r3, [r4, #0]
 801c576:	6922      	ldr	r2, [r4, #16]
 801c578:	1a98      	subs	r0, r3, r2
 801c57a:	6963      	ldr	r3, [r4, #20]
 801c57c:	b2f6      	uxtb	r6, r6
 801c57e:	4283      	cmp	r3, r0
 801c580:	4637      	mov	r7, r6
 801c582:	dc05      	bgt.n	801c590 <__swbuf_r+0x4e>
 801c584:	4621      	mov	r1, r4
 801c586:	4628      	mov	r0, r5
 801c588:	f000 fd32 	bl	801cff0 <_fflush_r>
 801c58c:	2800      	cmp	r0, #0
 801c58e:	d1ed      	bne.n	801c56c <__swbuf_r+0x2a>
 801c590:	68a3      	ldr	r3, [r4, #8]
 801c592:	3b01      	subs	r3, #1
 801c594:	60a3      	str	r3, [r4, #8]
 801c596:	6823      	ldr	r3, [r4, #0]
 801c598:	1c5a      	adds	r2, r3, #1
 801c59a:	6022      	str	r2, [r4, #0]
 801c59c:	701e      	strb	r6, [r3, #0]
 801c59e:	6962      	ldr	r2, [r4, #20]
 801c5a0:	1c43      	adds	r3, r0, #1
 801c5a2:	429a      	cmp	r2, r3
 801c5a4:	d004      	beq.n	801c5b0 <__swbuf_r+0x6e>
 801c5a6:	89a3      	ldrh	r3, [r4, #12]
 801c5a8:	07db      	lsls	r3, r3, #31
 801c5aa:	d5e1      	bpl.n	801c570 <__swbuf_r+0x2e>
 801c5ac:	2e0a      	cmp	r6, #10
 801c5ae:	d1df      	bne.n	801c570 <__swbuf_r+0x2e>
 801c5b0:	4621      	mov	r1, r4
 801c5b2:	4628      	mov	r0, r5
 801c5b4:	f000 fd1c 	bl	801cff0 <_fflush_r>
 801c5b8:	2800      	cmp	r0, #0
 801c5ba:	d0d9      	beq.n	801c570 <__swbuf_r+0x2e>
 801c5bc:	e7d6      	b.n	801c56c <__swbuf_r+0x2a>
	...

0801c5c0 <__swsetup_r>:
 801c5c0:	b538      	push	{r3, r4, r5, lr}
 801c5c2:	4b29      	ldr	r3, [pc, #164]	@ (801c668 <__swsetup_r+0xa8>)
 801c5c4:	4605      	mov	r5, r0
 801c5c6:	6818      	ldr	r0, [r3, #0]
 801c5c8:	460c      	mov	r4, r1
 801c5ca:	b118      	cbz	r0, 801c5d4 <__swsetup_r+0x14>
 801c5cc:	6a03      	ldr	r3, [r0, #32]
 801c5ce:	b90b      	cbnz	r3, 801c5d4 <__swsetup_r+0x14>
 801c5d0:	f7ff fec6 	bl	801c360 <__sinit>
 801c5d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c5d8:	0719      	lsls	r1, r3, #28
 801c5da:	d422      	bmi.n	801c622 <__swsetup_r+0x62>
 801c5dc:	06da      	lsls	r2, r3, #27
 801c5de:	d407      	bmi.n	801c5f0 <__swsetup_r+0x30>
 801c5e0:	2209      	movs	r2, #9
 801c5e2:	602a      	str	r2, [r5, #0]
 801c5e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c5e8:	81a3      	strh	r3, [r4, #12]
 801c5ea:	f04f 30ff 	mov.w	r0, #4294967295
 801c5ee:	e033      	b.n	801c658 <__swsetup_r+0x98>
 801c5f0:	0758      	lsls	r0, r3, #29
 801c5f2:	d512      	bpl.n	801c61a <__swsetup_r+0x5a>
 801c5f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c5f6:	b141      	cbz	r1, 801c60a <__swsetup_r+0x4a>
 801c5f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c5fc:	4299      	cmp	r1, r3
 801c5fe:	d002      	beq.n	801c606 <__swsetup_r+0x46>
 801c600:	4628      	mov	r0, r5
 801c602:	f000 f8af 	bl	801c764 <_free_r>
 801c606:	2300      	movs	r3, #0
 801c608:	6363      	str	r3, [r4, #52]	@ 0x34
 801c60a:	89a3      	ldrh	r3, [r4, #12]
 801c60c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c610:	81a3      	strh	r3, [r4, #12]
 801c612:	2300      	movs	r3, #0
 801c614:	6063      	str	r3, [r4, #4]
 801c616:	6923      	ldr	r3, [r4, #16]
 801c618:	6023      	str	r3, [r4, #0]
 801c61a:	89a3      	ldrh	r3, [r4, #12]
 801c61c:	f043 0308 	orr.w	r3, r3, #8
 801c620:	81a3      	strh	r3, [r4, #12]
 801c622:	6923      	ldr	r3, [r4, #16]
 801c624:	b94b      	cbnz	r3, 801c63a <__swsetup_r+0x7a>
 801c626:	89a3      	ldrh	r3, [r4, #12]
 801c628:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c62c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c630:	d003      	beq.n	801c63a <__swsetup_r+0x7a>
 801c632:	4621      	mov	r1, r4
 801c634:	4628      	mov	r0, r5
 801c636:	f000 fd29 	bl	801d08c <__smakebuf_r>
 801c63a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c63e:	f013 0201 	ands.w	r2, r3, #1
 801c642:	d00a      	beq.n	801c65a <__swsetup_r+0x9a>
 801c644:	2200      	movs	r2, #0
 801c646:	60a2      	str	r2, [r4, #8]
 801c648:	6962      	ldr	r2, [r4, #20]
 801c64a:	4252      	negs	r2, r2
 801c64c:	61a2      	str	r2, [r4, #24]
 801c64e:	6922      	ldr	r2, [r4, #16]
 801c650:	b942      	cbnz	r2, 801c664 <__swsetup_r+0xa4>
 801c652:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c656:	d1c5      	bne.n	801c5e4 <__swsetup_r+0x24>
 801c658:	bd38      	pop	{r3, r4, r5, pc}
 801c65a:	0799      	lsls	r1, r3, #30
 801c65c:	bf58      	it	pl
 801c65e:	6962      	ldrpl	r2, [r4, #20]
 801c660:	60a2      	str	r2, [r4, #8]
 801c662:	e7f4      	b.n	801c64e <__swsetup_r+0x8e>
 801c664:	2000      	movs	r0, #0
 801c666:	e7f7      	b.n	801c658 <__swsetup_r+0x98>
 801c668:	2000013c 	.word	0x2000013c

0801c66c <memset>:
 801c66c:	4402      	add	r2, r0
 801c66e:	4603      	mov	r3, r0
 801c670:	4293      	cmp	r3, r2
 801c672:	d100      	bne.n	801c676 <memset+0xa>
 801c674:	4770      	bx	lr
 801c676:	f803 1b01 	strb.w	r1, [r3], #1
 801c67a:	e7f9      	b.n	801c670 <memset+0x4>

0801c67c <_close_r>:
 801c67c:	b538      	push	{r3, r4, r5, lr}
 801c67e:	4d06      	ldr	r5, [pc, #24]	@ (801c698 <_close_r+0x1c>)
 801c680:	2300      	movs	r3, #0
 801c682:	4604      	mov	r4, r0
 801c684:	4608      	mov	r0, r1
 801c686:	602b      	str	r3, [r5, #0]
 801c688:	f7e6 f8ce 	bl	8002828 <_close>
 801c68c:	1c43      	adds	r3, r0, #1
 801c68e:	d102      	bne.n	801c696 <_close_r+0x1a>
 801c690:	682b      	ldr	r3, [r5, #0]
 801c692:	b103      	cbz	r3, 801c696 <_close_r+0x1a>
 801c694:	6023      	str	r3, [r4, #0]
 801c696:	bd38      	pop	{r3, r4, r5, pc}
 801c698:	20001cb4 	.word	0x20001cb4

0801c69c <_lseek_r>:
 801c69c:	b538      	push	{r3, r4, r5, lr}
 801c69e:	4d07      	ldr	r5, [pc, #28]	@ (801c6bc <_lseek_r+0x20>)
 801c6a0:	4604      	mov	r4, r0
 801c6a2:	4608      	mov	r0, r1
 801c6a4:	4611      	mov	r1, r2
 801c6a6:	2200      	movs	r2, #0
 801c6a8:	602a      	str	r2, [r5, #0]
 801c6aa:	461a      	mov	r2, r3
 801c6ac:	f7e6 f8e0 	bl	8002870 <_lseek>
 801c6b0:	1c43      	adds	r3, r0, #1
 801c6b2:	d102      	bne.n	801c6ba <_lseek_r+0x1e>
 801c6b4:	682b      	ldr	r3, [r5, #0]
 801c6b6:	b103      	cbz	r3, 801c6ba <_lseek_r+0x1e>
 801c6b8:	6023      	str	r3, [r4, #0]
 801c6ba:	bd38      	pop	{r3, r4, r5, pc}
 801c6bc:	20001cb4 	.word	0x20001cb4

0801c6c0 <_read_r>:
 801c6c0:	b538      	push	{r3, r4, r5, lr}
 801c6c2:	4d07      	ldr	r5, [pc, #28]	@ (801c6e0 <_read_r+0x20>)
 801c6c4:	4604      	mov	r4, r0
 801c6c6:	4608      	mov	r0, r1
 801c6c8:	4611      	mov	r1, r2
 801c6ca:	2200      	movs	r2, #0
 801c6cc:	602a      	str	r2, [r5, #0]
 801c6ce:	461a      	mov	r2, r3
 801c6d0:	f7e6 f871 	bl	80027b6 <_read>
 801c6d4:	1c43      	adds	r3, r0, #1
 801c6d6:	d102      	bne.n	801c6de <_read_r+0x1e>
 801c6d8:	682b      	ldr	r3, [r5, #0]
 801c6da:	b103      	cbz	r3, 801c6de <_read_r+0x1e>
 801c6dc:	6023      	str	r3, [r4, #0]
 801c6de:	bd38      	pop	{r3, r4, r5, pc}
 801c6e0:	20001cb4 	.word	0x20001cb4

0801c6e4 <_write_r>:
 801c6e4:	b538      	push	{r3, r4, r5, lr}
 801c6e6:	4d07      	ldr	r5, [pc, #28]	@ (801c704 <_write_r+0x20>)
 801c6e8:	4604      	mov	r4, r0
 801c6ea:	4608      	mov	r0, r1
 801c6ec:	4611      	mov	r1, r2
 801c6ee:	2200      	movs	r2, #0
 801c6f0:	602a      	str	r2, [r5, #0]
 801c6f2:	461a      	mov	r2, r3
 801c6f4:	f7e6 f87c 	bl	80027f0 <_write>
 801c6f8:	1c43      	adds	r3, r0, #1
 801c6fa:	d102      	bne.n	801c702 <_write_r+0x1e>
 801c6fc:	682b      	ldr	r3, [r5, #0]
 801c6fe:	b103      	cbz	r3, 801c702 <_write_r+0x1e>
 801c700:	6023      	str	r3, [r4, #0]
 801c702:	bd38      	pop	{r3, r4, r5, pc}
 801c704:	20001cb4 	.word	0x20001cb4

0801c708 <__errno>:
 801c708:	4b01      	ldr	r3, [pc, #4]	@ (801c710 <__errno+0x8>)
 801c70a:	6818      	ldr	r0, [r3, #0]
 801c70c:	4770      	bx	lr
 801c70e:	bf00      	nop
 801c710:	2000013c 	.word	0x2000013c

0801c714 <__libc_init_array>:
 801c714:	b570      	push	{r4, r5, r6, lr}
 801c716:	4d0d      	ldr	r5, [pc, #52]	@ (801c74c <__libc_init_array+0x38>)
 801c718:	4c0d      	ldr	r4, [pc, #52]	@ (801c750 <__libc_init_array+0x3c>)
 801c71a:	1b64      	subs	r4, r4, r5
 801c71c:	10a4      	asrs	r4, r4, #2
 801c71e:	2600      	movs	r6, #0
 801c720:	42a6      	cmp	r6, r4
 801c722:	d109      	bne.n	801c738 <__libc_init_array+0x24>
 801c724:	4d0b      	ldr	r5, [pc, #44]	@ (801c754 <__libc_init_array+0x40>)
 801c726:	4c0c      	ldr	r4, [pc, #48]	@ (801c758 <__libc_init_array+0x44>)
 801c728:	f000 fd52 	bl	801d1d0 <_init>
 801c72c:	1b64      	subs	r4, r4, r5
 801c72e:	10a4      	asrs	r4, r4, #2
 801c730:	2600      	movs	r6, #0
 801c732:	42a6      	cmp	r6, r4
 801c734:	d105      	bne.n	801c742 <__libc_init_array+0x2e>
 801c736:	bd70      	pop	{r4, r5, r6, pc}
 801c738:	f855 3b04 	ldr.w	r3, [r5], #4
 801c73c:	4798      	blx	r3
 801c73e:	3601      	adds	r6, #1
 801c740:	e7ee      	b.n	801c720 <__libc_init_array+0xc>
 801c742:	f855 3b04 	ldr.w	r3, [r5], #4
 801c746:	4798      	blx	r3
 801c748:	3601      	adds	r6, #1
 801c74a:	e7f2      	b.n	801c732 <__libc_init_array+0x1e>
 801c74c:	0801df00 	.word	0x0801df00
 801c750:	0801df00 	.word	0x0801df00
 801c754:	0801df00 	.word	0x0801df00
 801c758:	0801df04 	.word	0x0801df04

0801c75c <__retarget_lock_init_recursive>:
 801c75c:	4770      	bx	lr

0801c75e <__retarget_lock_acquire_recursive>:
 801c75e:	4770      	bx	lr

0801c760 <__retarget_lock_release_recursive>:
 801c760:	4770      	bx	lr
	...

0801c764 <_free_r>:
 801c764:	b538      	push	{r3, r4, r5, lr}
 801c766:	4605      	mov	r5, r0
 801c768:	2900      	cmp	r1, #0
 801c76a:	d041      	beq.n	801c7f0 <_free_r+0x8c>
 801c76c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c770:	1f0c      	subs	r4, r1, #4
 801c772:	2b00      	cmp	r3, #0
 801c774:	bfb8      	it	lt
 801c776:	18e4      	addlt	r4, r4, r3
 801c778:	f000 f8e0 	bl	801c93c <__malloc_lock>
 801c77c:	4a1d      	ldr	r2, [pc, #116]	@ (801c7f4 <_free_r+0x90>)
 801c77e:	6813      	ldr	r3, [r2, #0]
 801c780:	b933      	cbnz	r3, 801c790 <_free_r+0x2c>
 801c782:	6063      	str	r3, [r4, #4]
 801c784:	6014      	str	r4, [r2, #0]
 801c786:	4628      	mov	r0, r5
 801c788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c78c:	f000 b8dc 	b.w	801c948 <__malloc_unlock>
 801c790:	42a3      	cmp	r3, r4
 801c792:	d908      	bls.n	801c7a6 <_free_r+0x42>
 801c794:	6820      	ldr	r0, [r4, #0]
 801c796:	1821      	adds	r1, r4, r0
 801c798:	428b      	cmp	r3, r1
 801c79a:	bf01      	itttt	eq
 801c79c:	6819      	ldreq	r1, [r3, #0]
 801c79e:	685b      	ldreq	r3, [r3, #4]
 801c7a0:	1809      	addeq	r1, r1, r0
 801c7a2:	6021      	streq	r1, [r4, #0]
 801c7a4:	e7ed      	b.n	801c782 <_free_r+0x1e>
 801c7a6:	461a      	mov	r2, r3
 801c7a8:	685b      	ldr	r3, [r3, #4]
 801c7aa:	b10b      	cbz	r3, 801c7b0 <_free_r+0x4c>
 801c7ac:	42a3      	cmp	r3, r4
 801c7ae:	d9fa      	bls.n	801c7a6 <_free_r+0x42>
 801c7b0:	6811      	ldr	r1, [r2, #0]
 801c7b2:	1850      	adds	r0, r2, r1
 801c7b4:	42a0      	cmp	r0, r4
 801c7b6:	d10b      	bne.n	801c7d0 <_free_r+0x6c>
 801c7b8:	6820      	ldr	r0, [r4, #0]
 801c7ba:	4401      	add	r1, r0
 801c7bc:	1850      	adds	r0, r2, r1
 801c7be:	4283      	cmp	r3, r0
 801c7c0:	6011      	str	r1, [r2, #0]
 801c7c2:	d1e0      	bne.n	801c786 <_free_r+0x22>
 801c7c4:	6818      	ldr	r0, [r3, #0]
 801c7c6:	685b      	ldr	r3, [r3, #4]
 801c7c8:	6053      	str	r3, [r2, #4]
 801c7ca:	4408      	add	r0, r1
 801c7cc:	6010      	str	r0, [r2, #0]
 801c7ce:	e7da      	b.n	801c786 <_free_r+0x22>
 801c7d0:	d902      	bls.n	801c7d8 <_free_r+0x74>
 801c7d2:	230c      	movs	r3, #12
 801c7d4:	602b      	str	r3, [r5, #0]
 801c7d6:	e7d6      	b.n	801c786 <_free_r+0x22>
 801c7d8:	6820      	ldr	r0, [r4, #0]
 801c7da:	1821      	adds	r1, r4, r0
 801c7dc:	428b      	cmp	r3, r1
 801c7de:	bf04      	itt	eq
 801c7e0:	6819      	ldreq	r1, [r3, #0]
 801c7e2:	685b      	ldreq	r3, [r3, #4]
 801c7e4:	6063      	str	r3, [r4, #4]
 801c7e6:	bf04      	itt	eq
 801c7e8:	1809      	addeq	r1, r1, r0
 801c7ea:	6021      	streq	r1, [r4, #0]
 801c7ec:	6054      	str	r4, [r2, #4]
 801c7ee:	e7ca      	b.n	801c786 <_free_r+0x22>
 801c7f0:	bd38      	pop	{r3, r4, r5, pc}
 801c7f2:	bf00      	nop
 801c7f4:	20001cc0 	.word	0x20001cc0

0801c7f8 <sbrk_aligned>:
 801c7f8:	b570      	push	{r4, r5, r6, lr}
 801c7fa:	4e0f      	ldr	r6, [pc, #60]	@ (801c838 <sbrk_aligned+0x40>)
 801c7fc:	460c      	mov	r4, r1
 801c7fe:	6831      	ldr	r1, [r6, #0]
 801c800:	4605      	mov	r5, r0
 801c802:	b911      	cbnz	r1, 801c80a <sbrk_aligned+0x12>
 801c804:	f000 fcd4 	bl	801d1b0 <_sbrk_r>
 801c808:	6030      	str	r0, [r6, #0]
 801c80a:	4621      	mov	r1, r4
 801c80c:	4628      	mov	r0, r5
 801c80e:	f000 fccf 	bl	801d1b0 <_sbrk_r>
 801c812:	1c43      	adds	r3, r0, #1
 801c814:	d103      	bne.n	801c81e <sbrk_aligned+0x26>
 801c816:	f04f 34ff 	mov.w	r4, #4294967295
 801c81a:	4620      	mov	r0, r4
 801c81c:	bd70      	pop	{r4, r5, r6, pc}
 801c81e:	1cc4      	adds	r4, r0, #3
 801c820:	f024 0403 	bic.w	r4, r4, #3
 801c824:	42a0      	cmp	r0, r4
 801c826:	d0f8      	beq.n	801c81a <sbrk_aligned+0x22>
 801c828:	1a21      	subs	r1, r4, r0
 801c82a:	4628      	mov	r0, r5
 801c82c:	f000 fcc0 	bl	801d1b0 <_sbrk_r>
 801c830:	3001      	adds	r0, #1
 801c832:	d1f2      	bne.n	801c81a <sbrk_aligned+0x22>
 801c834:	e7ef      	b.n	801c816 <sbrk_aligned+0x1e>
 801c836:	bf00      	nop
 801c838:	20001cbc 	.word	0x20001cbc

0801c83c <_malloc_r>:
 801c83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c840:	1ccd      	adds	r5, r1, #3
 801c842:	f025 0503 	bic.w	r5, r5, #3
 801c846:	3508      	adds	r5, #8
 801c848:	2d0c      	cmp	r5, #12
 801c84a:	bf38      	it	cc
 801c84c:	250c      	movcc	r5, #12
 801c84e:	2d00      	cmp	r5, #0
 801c850:	4606      	mov	r6, r0
 801c852:	db01      	blt.n	801c858 <_malloc_r+0x1c>
 801c854:	42a9      	cmp	r1, r5
 801c856:	d904      	bls.n	801c862 <_malloc_r+0x26>
 801c858:	230c      	movs	r3, #12
 801c85a:	6033      	str	r3, [r6, #0]
 801c85c:	2000      	movs	r0, #0
 801c85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c862:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c938 <_malloc_r+0xfc>
 801c866:	f000 f869 	bl	801c93c <__malloc_lock>
 801c86a:	f8d8 3000 	ldr.w	r3, [r8]
 801c86e:	461c      	mov	r4, r3
 801c870:	bb44      	cbnz	r4, 801c8c4 <_malloc_r+0x88>
 801c872:	4629      	mov	r1, r5
 801c874:	4630      	mov	r0, r6
 801c876:	f7ff ffbf 	bl	801c7f8 <sbrk_aligned>
 801c87a:	1c43      	adds	r3, r0, #1
 801c87c:	4604      	mov	r4, r0
 801c87e:	d158      	bne.n	801c932 <_malloc_r+0xf6>
 801c880:	f8d8 4000 	ldr.w	r4, [r8]
 801c884:	4627      	mov	r7, r4
 801c886:	2f00      	cmp	r7, #0
 801c888:	d143      	bne.n	801c912 <_malloc_r+0xd6>
 801c88a:	2c00      	cmp	r4, #0
 801c88c:	d04b      	beq.n	801c926 <_malloc_r+0xea>
 801c88e:	6823      	ldr	r3, [r4, #0]
 801c890:	4639      	mov	r1, r7
 801c892:	4630      	mov	r0, r6
 801c894:	eb04 0903 	add.w	r9, r4, r3
 801c898:	f000 fc8a 	bl	801d1b0 <_sbrk_r>
 801c89c:	4581      	cmp	r9, r0
 801c89e:	d142      	bne.n	801c926 <_malloc_r+0xea>
 801c8a0:	6821      	ldr	r1, [r4, #0]
 801c8a2:	1a6d      	subs	r5, r5, r1
 801c8a4:	4629      	mov	r1, r5
 801c8a6:	4630      	mov	r0, r6
 801c8a8:	f7ff ffa6 	bl	801c7f8 <sbrk_aligned>
 801c8ac:	3001      	adds	r0, #1
 801c8ae:	d03a      	beq.n	801c926 <_malloc_r+0xea>
 801c8b0:	6823      	ldr	r3, [r4, #0]
 801c8b2:	442b      	add	r3, r5
 801c8b4:	6023      	str	r3, [r4, #0]
 801c8b6:	f8d8 3000 	ldr.w	r3, [r8]
 801c8ba:	685a      	ldr	r2, [r3, #4]
 801c8bc:	bb62      	cbnz	r2, 801c918 <_malloc_r+0xdc>
 801c8be:	f8c8 7000 	str.w	r7, [r8]
 801c8c2:	e00f      	b.n	801c8e4 <_malloc_r+0xa8>
 801c8c4:	6822      	ldr	r2, [r4, #0]
 801c8c6:	1b52      	subs	r2, r2, r5
 801c8c8:	d420      	bmi.n	801c90c <_malloc_r+0xd0>
 801c8ca:	2a0b      	cmp	r2, #11
 801c8cc:	d917      	bls.n	801c8fe <_malloc_r+0xc2>
 801c8ce:	1961      	adds	r1, r4, r5
 801c8d0:	42a3      	cmp	r3, r4
 801c8d2:	6025      	str	r5, [r4, #0]
 801c8d4:	bf18      	it	ne
 801c8d6:	6059      	strne	r1, [r3, #4]
 801c8d8:	6863      	ldr	r3, [r4, #4]
 801c8da:	bf08      	it	eq
 801c8dc:	f8c8 1000 	streq.w	r1, [r8]
 801c8e0:	5162      	str	r2, [r4, r5]
 801c8e2:	604b      	str	r3, [r1, #4]
 801c8e4:	4630      	mov	r0, r6
 801c8e6:	f000 f82f 	bl	801c948 <__malloc_unlock>
 801c8ea:	f104 000b 	add.w	r0, r4, #11
 801c8ee:	1d23      	adds	r3, r4, #4
 801c8f0:	f020 0007 	bic.w	r0, r0, #7
 801c8f4:	1ac2      	subs	r2, r0, r3
 801c8f6:	bf1c      	itt	ne
 801c8f8:	1a1b      	subne	r3, r3, r0
 801c8fa:	50a3      	strne	r3, [r4, r2]
 801c8fc:	e7af      	b.n	801c85e <_malloc_r+0x22>
 801c8fe:	6862      	ldr	r2, [r4, #4]
 801c900:	42a3      	cmp	r3, r4
 801c902:	bf0c      	ite	eq
 801c904:	f8c8 2000 	streq.w	r2, [r8]
 801c908:	605a      	strne	r2, [r3, #4]
 801c90a:	e7eb      	b.n	801c8e4 <_malloc_r+0xa8>
 801c90c:	4623      	mov	r3, r4
 801c90e:	6864      	ldr	r4, [r4, #4]
 801c910:	e7ae      	b.n	801c870 <_malloc_r+0x34>
 801c912:	463c      	mov	r4, r7
 801c914:	687f      	ldr	r7, [r7, #4]
 801c916:	e7b6      	b.n	801c886 <_malloc_r+0x4a>
 801c918:	461a      	mov	r2, r3
 801c91a:	685b      	ldr	r3, [r3, #4]
 801c91c:	42a3      	cmp	r3, r4
 801c91e:	d1fb      	bne.n	801c918 <_malloc_r+0xdc>
 801c920:	2300      	movs	r3, #0
 801c922:	6053      	str	r3, [r2, #4]
 801c924:	e7de      	b.n	801c8e4 <_malloc_r+0xa8>
 801c926:	230c      	movs	r3, #12
 801c928:	6033      	str	r3, [r6, #0]
 801c92a:	4630      	mov	r0, r6
 801c92c:	f000 f80c 	bl	801c948 <__malloc_unlock>
 801c930:	e794      	b.n	801c85c <_malloc_r+0x20>
 801c932:	6005      	str	r5, [r0, #0]
 801c934:	e7d6      	b.n	801c8e4 <_malloc_r+0xa8>
 801c936:	bf00      	nop
 801c938:	20001cc0 	.word	0x20001cc0

0801c93c <__malloc_lock>:
 801c93c:	4801      	ldr	r0, [pc, #4]	@ (801c944 <__malloc_lock+0x8>)
 801c93e:	f7ff bf0e 	b.w	801c75e <__retarget_lock_acquire_recursive>
 801c942:	bf00      	nop
 801c944:	20001cb8 	.word	0x20001cb8

0801c948 <__malloc_unlock>:
 801c948:	4801      	ldr	r0, [pc, #4]	@ (801c950 <__malloc_unlock+0x8>)
 801c94a:	f7ff bf09 	b.w	801c760 <__retarget_lock_release_recursive>
 801c94e:	bf00      	nop
 801c950:	20001cb8 	.word	0x20001cb8

0801c954 <__sfputc_r>:
 801c954:	6893      	ldr	r3, [r2, #8]
 801c956:	3b01      	subs	r3, #1
 801c958:	2b00      	cmp	r3, #0
 801c95a:	b410      	push	{r4}
 801c95c:	6093      	str	r3, [r2, #8]
 801c95e:	da07      	bge.n	801c970 <__sfputc_r+0x1c>
 801c960:	6994      	ldr	r4, [r2, #24]
 801c962:	42a3      	cmp	r3, r4
 801c964:	db01      	blt.n	801c96a <__sfputc_r+0x16>
 801c966:	290a      	cmp	r1, #10
 801c968:	d102      	bne.n	801c970 <__sfputc_r+0x1c>
 801c96a:	bc10      	pop	{r4}
 801c96c:	f7ff bde9 	b.w	801c542 <__swbuf_r>
 801c970:	6813      	ldr	r3, [r2, #0]
 801c972:	1c58      	adds	r0, r3, #1
 801c974:	6010      	str	r0, [r2, #0]
 801c976:	7019      	strb	r1, [r3, #0]
 801c978:	4608      	mov	r0, r1
 801c97a:	bc10      	pop	{r4}
 801c97c:	4770      	bx	lr

0801c97e <__sfputs_r>:
 801c97e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c980:	4606      	mov	r6, r0
 801c982:	460f      	mov	r7, r1
 801c984:	4614      	mov	r4, r2
 801c986:	18d5      	adds	r5, r2, r3
 801c988:	42ac      	cmp	r4, r5
 801c98a:	d101      	bne.n	801c990 <__sfputs_r+0x12>
 801c98c:	2000      	movs	r0, #0
 801c98e:	e007      	b.n	801c9a0 <__sfputs_r+0x22>
 801c990:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c994:	463a      	mov	r2, r7
 801c996:	4630      	mov	r0, r6
 801c998:	f7ff ffdc 	bl	801c954 <__sfputc_r>
 801c99c:	1c43      	adds	r3, r0, #1
 801c99e:	d1f3      	bne.n	801c988 <__sfputs_r+0xa>
 801c9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c9a4 <_vfiprintf_r>:
 801c9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9a8:	460d      	mov	r5, r1
 801c9aa:	b09d      	sub	sp, #116	@ 0x74
 801c9ac:	4614      	mov	r4, r2
 801c9ae:	4698      	mov	r8, r3
 801c9b0:	4606      	mov	r6, r0
 801c9b2:	b118      	cbz	r0, 801c9bc <_vfiprintf_r+0x18>
 801c9b4:	6a03      	ldr	r3, [r0, #32]
 801c9b6:	b90b      	cbnz	r3, 801c9bc <_vfiprintf_r+0x18>
 801c9b8:	f7ff fcd2 	bl	801c360 <__sinit>
 801c9bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c9be:	07d9      	lsls	r1, r3, #31
 801c9c0:	d405      	bmi.n	801c9ce <_vfiprintf_r+0x2a>
 801c9c2:	89ab      	ldrh	r3, [r5, #12]
 801c9c4:	059a      	lsls	r2, r3, #22
 801c9c6:	d402      	bmi.n	801c9ce <_vfiprintf_r+0x2a>
 801c9c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c9ca:	f7ff fec8 	bl	801c75e <__retarget_lock_acquire_recursive>
 801c9ce:	89ab      	ldrh	r3, [r5, #12]
 801c9d0:	071b      	lsls	r3, r3, #28
 801c9d2:	d501      	bpl.n	801c9d8 <_vfiprintf_r+0x34>
 801c9d4:	692b      	ldr	r3, [r5, #16]
 801c9d6:	b99b      	cbnz	r3, 801ca00 <_vfiprintf_r+0x5c>
 801c9d8:	4629      	mov	r1, r5
 801c9da:	4630      	mov	r0, r6
 801c9dc:	f7ff fdf0 	bl	801c5c0 <__swsetup_r>
 801c9e0:	b170      	cbz	r0, 801ca00 <_vfiprintf_r+0x5c>
 801c9e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c9e4:	07dc      	lsls	r4, r3, #31
 801c9e6:	d504      	bpl.n	801c9f2 <_vfiprintf_r+0x4e>
 801c9e8:	f04f 30ff 	mov.w	r0, #4294967295
 801c9ec:	b01d      	add	sp, #116	@ 0x74
 801c9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9f2:	89ab      	ldrh	r3, [r5, #12]
 801c9f4:	0598      	lsls	r0, r3, #22
 801c9f6:	d4f7      	bmi.n	801c9e8 <_vfiprintf_r+0x44>
 801c9f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c9fa:	f7ff feb1 	bl	801c760 <__retarget_lock_release_recursive>
 801c9fe:	e7f3      	b.n	801c9e8 <_vfiprintf_r+0x44>
 801ca00:	2300      	movs	r3, #0
 801ca02:	9309      	str	r3, [sp, #36]	@ 0x24
 801ca04:	2320      	movs	r3, #32
 801ca06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ca0a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ca0e:	2330      	movs	r3, #48	@ 0x30
 801ca10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801cbc0 <_vfiprintf_r+0x21c>
 801ca14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ca18:	f04f 0901 	mov.w	r9, #1
 801ca1c:	4623      	mov	r3, r4
 801ca1e:	469a      	mov	sl, r3
 801ca20:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ca24:	b10a      	cbz	r2, 801ca2a <_vfiprintf_r+0x86>
 801ca26:	2a25      	cmp	r2, #37	@ 0x25
 801ca28:	d1f9      	bne.n	801ca1e <_vfiprintf_r+0x7a>
 801ca2a:	ebba 0b04 	subs.w	fp, sl, r4
 801ca2e:	d00b      	beq.n	801ca48 <_vfiprintf_r+0xa4>
 801ca30:	465b      	mov	r3, fp
 801ca32:	4622      	mov	r2, r4
 801ca34:	4629      	mov	r1, r5
 801ca36:	4630      	mov	r0, r6
 801ca38:	f7ff ffa1 	bl	801c97e <__sfputs_r>
 801ca3c:	3001      	adds	r0, #1
 801ca3e:	f000 80a7 	beq.w	801cb90 <_vfiprintf_r+0x1ec>
 801ca42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ca44:	445a      	add	r2, fp
 801ca46:	9209      	str	r2, [sp, #36]	@ 0x24
 801ca48:	f89a 3000 	ldrb.w	r3, [sl]
 801ca4c:	2b00      	cmp	r3, #0
 801ca4e:	f000 809f 	beq.w	801cb90 <_vfiprintf_r+0x1ec>
 801ca52:	2300      	movs	r3, #0
 801ca54:	f04f 32ff 	mov.w	r2, #4294967295
 801ca58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ca5c:	f10a 0a01 	add.w	sl, sl, #1
 801ca60:	9304      	str	r3, [sp, #16]
 801ca62:	9307      	str	r3, [sp, #28]
 801ca64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ca68:	931a      	str	r3, [sp, #104]	@ 0x68
 801ca6a:	4654      	mov	r4, sl
 801ca6c:	2205      	movs	r2, #5
 801ca6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca72:	4853      	ldr	r0, [pc, #332]	@ (801cbc0 <_vfiprintf_r+0x21c>)
 801ca74:	f7e3 fb8c 	bl	8000190 <memchr>
 801ca78:	9a04      	ldr	r2, [sp, #16]
 801ca7a:	b9d8      	cbnz	r0, 801cab4 <_vfiprintf_r+0x110>
 801ca7c:	06d1      	lsls	r1, r2, #27
 801ca7e:	bf44      	itt	mi
 801ca80:	2320      	movmi	r3, #32
 801ca82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ca86:	0713      	lsls	r3, r2, #28
 801ca88:	bf44      	itt	mi
 801ca8a:	232b      	movmi	r3, #43	@ 0x2b
 801ca8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ca90:	f89a 3000 	ldrb.w	r3, [sl]
 801ca94:	2b2a      	cmp	r3, #42	@ 0x2a
 801ca96:	d015      	beq.n	801cac4 <_vfiprintf_r+0x120>
 801ca98:	9a07      	ldr	r2, [sp, #28]
 801ca9a:	4654      	mov	r4, sl
 801ca9c:	2000      	movs	r0, #0
 801ca9e:	f04f 0c0a 	mov.w	ip, #10
 801caa2:	4621      	mov	r1, r4
 801caa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801caa8:	3b30      	subs	r3, #48	@ 0x30
 801caaa:	2b09      	cmp	r3, #9
 801caac:	d94b      	bls.n	801cb46 <_vfiprintf_r+0x1a2>
 801caae:	b1b0      	cbz	r0, 801cade <_vfiprintf_r+0x13a>
 801cab0:	9207      	str	r2, [sp, #28]
 801cab2:	e014      	b.n	801cade <_vfiprintf_r+0x13a>
 801cab4:	eba0 0308 	sub.w	r3, r0, r8
 801cab8:	fa09 f303 	lsl.w	r3, r9, r3
 801cabc:	4313      	orrs	r3, r2
 801cabe:	9304      	str	r3, [sp, #16]
 801cac0:	46a2      	mov	sl, r4
 801cac2:	e7d2      	b.n	801ca6a <_vfiprintf_r+0xc6>
 801cac4:	9b03      	ldr	r3, [sp, #12]
 801cac6:	1d19      	adds	r1, r3, #4
 801cac8:	681b      	ldr	r3, [r3, #0]
 801caca:	9103      	str	r1, [sp, #12]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	bfbb      	ittet	lt
 801cad0:	425b      	neglt	r3, r3
 801cad2:	f042 0202 	orrlt.w	r2, r2, #2
 801cad6:	9307      	strge	r3, [sp, #28]
 801cad8:	9307      	strlt	r3, [sp, #28]
 801cada:	bfb8      	it	lt
 801cadc:	9204      	strlt	r2, [sp, #16]
 801cade:	7823      	ldrb	r3, [r4, #0]
 801cae0:	2b2e      	cmp	r3, #46	@ 0x2e
 801cae2:	d10a      	bne.n	801cafa <_vfiprintf_r+0x156>
 801cae4:	7863      	ldrb	r3, [r4, #1]
 801cae6:	2b2a      	cmp	r3, #42	@ 0x2a
 801cae8:	d132      	bne.n	801cb50 <_vfiprintf_r+0x1ac>
 801caea:	9b03      	ldr	r3, [sp, #12]
 801caec:	1d1a      	adds	r2, r3, #4
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	9203      	str	r2, [sp, #12]
 801caf2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801caf6:	3402      	adds	r4, #2
 801caf8:	9305      	str	r3, [sp, #20]
 801cafa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801cbc4 <_vfiprintf_r+0x220>
 801cafe:	7821      	ldrb	r1, [r4, #0]
 801cb00:	2203      	movs	r2, #3
 801cb02:	4650      	mov	r0, sl
 801cb04:	f7e3 fb44 	bl	8000190 <memchr>
 801cb08:	b138      	cbz	r0, 801cb1a <_vfiprintf_r+0x176>
 801cb0a:	9b04      	ldr	r3, [sp, #16]
 801cb0c:	eba0 000a 	sub.w	r0, r0, sl
 801cb10:	2240      	movs	r2, #64	@ 0x40
 801cb12:	4082      	lsls	r2, r0
 801cb14:	4313      	orrs	r3, r2
 801cb16:	3401      	adds	r4, #1
 801cb18:	9304      	str	r3, [sp, #16]
 801cb1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cb1e:	482a      	ldr	r0, [pc, #168]	@ (801cbc8 <_vfiprintf_r+0x224>)
 801cb20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801cb24:	2206      	movs	r2, #6
 801cb26:	f7e3 fb33 	bl	8000190 <memchr>
 801cb2a:	2800      	cmp	r0, #0
 801cb2c:	d03f      	beq.n	801cbae <_vfiprintf_r+0x20a>
 801cb2e:	4b27      	ldr	r3, [pc, #156]	@ (801cbcc <_vfiprintf_r+0x228>)
 801cb30:	bb1b      	cbnz	r3, 801cb7a <_vfiprintf_r+0x1d6>
 801cb32:	9b03      	ldr	r3, [sp, #12]
 801cb34:	3307      	adds	r3, #7
 801cb36:	f023 0307 	bic.w	r3, r3, #7
 801cb3a:	3308      	adds	r3, #8
 801cb3c:	9303      	str	r3, [sp, #12]
 801cb3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb40:	443b      	add	r3, r7
 801cb42:	9309      	str	r3, [sp, #36]	@ 0x24
 801cb44:	e76a      	b.n	801ca1c <_vfiprintf_r+0x78>
 801cb46:	fb0c 3202 	mla	r2, ip, r2, r3
 801cb4a:	460c      	mov	r4, r1
 801cb4c:	2001      	movs	r0, #1
 801cb4e:	e7a8      	b.n	801caa2 <_vfiprintf_r+0xfe>
 801cb50:	2300      	movs	r3, #0
 801cb52:	3401      	adds	r4, #1
 801cb54:	9305      	str	r3, [sp, #20]
 801cb56:	4619      	mov	r1, r3
 801cb58:	f04f 0c0a 	mov.w	ip, #10
 801cb5c:	4620      	mov	r0, r4
 801cb5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cb62:	3a30      	subs	r2, #48	@ 0x30
 801cb64:	2a09      	cmp	r2, #9
 801cb66:	d903      	bls.n	801cb70 <_vfiprintf_r+0x1cc>
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	d0c6      	beq.n	801cafa <_vfiprintf_r+0x156>
 801cb6c:	9105      	str	r1, [sp, #20]
 801cb6e:	e7c4      	b.n	801cafa <_vfiprintf_r+0x156>
 801cb70:	fb0c 2101 	mla	r1, ip, r1, r2
 801cb74:	4604      	mov	r4, r0
 801cb76:	2301      	movs	r3, #1
 801cb78:	e7f0      	b.n	801cb5c <_vfiprintf_r+0x1b8>
 801cb7a:	ab03      	add	r3, sp, #12
 801cb7c:	9300      	str	r3, [sp, #0]
 801cb7e:	462a      	mov	r2, r5
 801cb80:	4b13      	ldr	r3, [pc, #76]	@ (801cbd0 <_vfiprintf_r+0x22c>)
 801cb82:	a904      	add	r1, sp, #16
 801cb84:	4630      	mov	r0, r6
 801cb86:	f3af 8000 	nop.w
 801cb8a:	4607      	mov	r7, r0
 801cb8c:	1c78      	adds	r0, r7, #1
 801cb8e:	d1d6      	bne.n	801cb3e <_vfiprintf_r+0x19a>
 801cb90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cb92:	07d9      	lsls	r1, r3, #31
 801cb94:	d405      	bmi.n	801cba2 <_vfiprintf_r+0x1fe>
 801cb96:	89ab      	ldrh	r3, [r5, #12]
 801cb98:	059a      	lsls	r2, r3, #22
 801cb9a:	d402      	bmi.n	801cba2 <_vfiprintf_r+0x1fe>
 801cb9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cb9e:	f7ff fddf 	bl	801c760 <__retarget_lock_release_recursive>
 801cba2:	89ab      	ldrh	r3, [r5, #12]
 801cba4:	065b      	lsls	r3, r3, #25
 801cba6:	f53f af1f 	bmi.w	801c9e8 <_vfiprintf_r+0x44>
 801cbaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cbac:	e71e      	b.n	801c9ec <_vfiprintf_r+0x48>
 801cbae:	ab03      	add	r3, sp, #12
 801cbb0:	9300      	str	r3, [sp, #0]
 801cbb2:	462a      	mov	r2, r5
 801cbb4:	4b06      	ldr	r3, [pc, #24]	@ (801cbd0 <_vfiprintf_r+0x22c>)
 801cbb6:	a904      	add	r1, sp, #16
 801cbb8:	4630      	mov	r0, r6
 801cbba:	f000 f879 	bl	801ccb0 <_printf_i>
 801cbbe:	e7e4      	b.n	801cb8a <_vfiprintf_r+0x1e6>
 801cbc0:	0801ddec 	.word	0x0801ddec
 801cbc4:	0801ddf2 	.word	0x0801ddf2
 801cbc8:	0801ddf6 	.word	0x0801ddf6
 801cbcc:	00000000 	.word	0x00000000
 801cbd0:	0801c97f 	.word	0x0801c97f

0801cbd4 <_printf_common>:
 801cbd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cbd8:	4616      	mov	r6, r2
 801cbda:	4698      	mov	r8, r3
 801cbdc:	688a      	ldr	r2, [r1, #8]
 801cbde:	690b      	ldr	r3, [r1, #16]
 801cbe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801cbe4:	4293      	cmp	r3, r2
 801cbe6:	bfb8      	it	lt
 801cbe8:	4613      	movlt	r3, r2
 801cbea:	6033      	str	r3, [r6, #0]
 801cbec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801cbf0:	4607      	mov	r7, r0
 801cbf2:	460c      	mov	r4, r1
 801cbf4:	b10a      	cbz	r2, 801cbfa <_printf_common+0x26>
 801cbf6:	3301      	adds	r3, #1
 801cbf8:	6033      	str	r3, [r6, #0]
 801cbfa:	6823      	ldr	r3, [r4, #0]
 801cbfc:	0699      	lsls	r1, r3, #26
 801cbfe:	bf42      	ittt	mi
 801cc00:	6833      	ldrmi	r3, [r6, #0]
 801cc02:	3302      	addmi	r3, #2
 801cc04:	6033      	strmi	r3, [r6, #0]
 801cc06:	6825      	ldr	r5, [r4, #0]
 801cc08:	f015 0506 	ands.w	r5, r5, #6
 801cc0c:	d106      	bne.n	801cc1c <_printf_common+0x48>
 801cc0e:	f104 0a19 	add.w	sl, r4, #25
 801cc12:	68e3      	ldr	r3, [r4, #12]
 801cc14:	6832      	ldr	r2, [r6, #0]
 801cc16:	1a9b      	subs	r3, r3, r2
 801cc18:	42ab      	cmp	r3, r5
 801cc1a:	dc26      	bgt.n	801cc6a <_printf_common+0x96>
 801cc1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801cc20:	6822      	ldr	r2, [r4, #0]
 801cc22:	3b00      	subs	r3, #0
 801cc24:	bf18      	it	ne
 801cc26:	2301      	movne	r3, #1
 801cc28:	0692      	lsls	r2, r2, #26
 801cc2a:	d42b      	bmi.n	801cc84 <_printf_common+0xb0>
 801cc2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801cc30:	4641      	mov	r1, r8
 801cc32:	4638      	mov	r0, r7
 801cc34:	47c8      	blx	r9
 801cc36:	3001      	adds	r0, #1
 801cc38:	d01e      	beq.n	801cc78 <_printf_common+0xa4>
 801cc3a:	6823      	ldr	r3, [r4, #0]
 801cc3c:	6922      	ldr	r2, [r4, #16]
 801cc3e:	f003 0306 	and.w	r3, r3, #6
 801cc42:	2b04      	cmp	r3, #4
 801cc44:	bf02      	ittt	eq
 801cc46:	68e5      	ldreq	r5, [r4, #12]
 801cc48:	6833      	ldreq	r3, [r6, #0]
 801cc4a:	1aed      	subeq	r5, r5, r3
 801cc4c:	68a3      	ldr	r3, [r4, #8]
 801cc4e:	bf0c      	ite	eq
 801cc50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cc54:	2500      	movne	r5, #0
 801cc56:	4293      	cmp	r3, r2
 801cc58:	bfc4      	itt	gt
 801cc5a:	1a9b      	subgt	r3, r3, r2
 801cc5c:	18ed      	addgt	r5, r5, r3
 801cc5e:	2600      	movs	r6, #0
 801cc60:	341a      	adds	r4, #26
 801cc62:	42b5      	cmp	r5, r6
 801cc64:	d11a      	bne.n	801cc9c <_printf_common+0xc8>
 801cc66:	2000      	movs	r0, #0
 801cc68:	e008      	b.n	801cc7c <_printf_common+0xa8>
 801cc6a:	2301      	movs	r3, #1
 801cc6c:	4652      	mov	r2, sl
 801cc6e:	4641      	mov	r1, r8
 801cc70:	4638      	mov	r0, r7
 801cc72:	47c8      	blx	r9
 801cc74:	3001      	adds	r0, #1
 801cc76:	d103      	bne.n	801cc80 <_printf_common+0xac>
 801cc78:	f04f 30ff 	mov.w	r0, #4294967295
 801cc7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc80:	3501      	adds	r5, #1
 801cc82:	e7c6      	b.n	801cc12 <_printf_common+0x3e>
 801cc84:	18e1      	adds	r1, r4, r3
 801cc86:	1c5a      	adds	r2, r3, #1
 801cc88:	2030      	movs	r0, #48	@ 0x30
 801cc8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801cc8e:	4422      	add	r2, r4
 801cc90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801cc94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801cc98:	3302      	adds	r3, #2
 801cc9a:	e7c7      	b.n	801cc2c <_printf_common+0x58>
 801cc9c:	2301      	movs	r3, #1
 801cc9e:	4622      	mov	r2, r4
 801cca0:	4641      	mov	r1, r8
 801cca2:	4638      	mov	r0, r7
 801cca4:	47c8      	blx	r9
 801cca6:	3001      	adds	r0, #1
 801cca8:	d0e6      	beq.n	801cc78 <_printf_common+0xa4>
 801ccaa:	3601      	adds	r6, #1
 801ccac:	e7d9      	b.n	801cc62 <_printf_common+0x8e>
	...

0801ccb0 <_printf_i>:
 801ccb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ccb4:	7e0f      	ldrb	r7, [r1, #24]
 801ccb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ccb8:	2f78      	cmp	r7, #120	@ 0x78
 801ccba:	4691      	mov	r9, r2
 801ccbc:	4680      	mov	r8, r0
 801ccbe:	460c      	mov	r4, r1
 801ccc0:	469a      	mov	sl, r3
 801ccc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ccc6:	d807      	bhi.n	801ccd8 <_printf_i+0x28>
 801ccc8:	2f62      	cmp	r7, #98	@ 0x62
 801ccca:	d80a      	bhi.n	801cce2 <_printf_i+0x32>
 801cccc:	2f00      	cmp	r7, #0
 801ccce:	f000 80d2 	beq.w	801ce76 <_printf_i+0x1c6>
 801ccd2:	2f58      	cmp	r7, #88	@ 0x58
 801ccd4:	f000 80b9 	beq.w	801ce4a <_printf_i+0x19a>
 801ccd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ccdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801cce0:	e03a      	b.n	801cd58 <_printf_i+0xa8>
 801cce2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801cce6:	2b15      	cmp	r3, #21
 801cce8:	d8f6      	bhi.n	801ccd8 <_printf_i+0x28>
 801ccea:	a101      	add	r1, pc, #4	@ (adr r1, 801ccf0 <_printf_i+0x40>)
 801ccec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ccf0:	0801cd49 	.word	0x0801cd49
 801ccf4:	0801cd5d 	.word	0x0801cd5d
 801ccf8:	0801ccd9 	.word	0x0801ccd9
 801ccfc:	0801ccd9 	.word	0x0801ccd9
 801cd00:	0801ccd9 	.word	0x0801ccd9
 801cd04:	0801ccd9 	.word	0x0801ccd9
 801cd08:	0801cd5d 	.word	0x0801cd5d
 801cd0c:	0801ccd9 	.word	0x0801ccd9
 801cd10:	0801ccd9 	.word	0x0801ccd9
 801cd14:	0801ccd9 	.word	0x0801ccd9
 801cd18:	0801ccd9 	.word	0x0801ccd9
 801cd1c:	0801ce5d 	.word	0x0801ce5d
 801cd20:	0801cd87 	.word	0x0801cd87
 801cd24:	0801ce17 	.word	0x0801ce17
 801cd28:	0801ccd9 	.word	0x0801ccd9
 801cd2c:	0801ccd9 	.word	0x0801ccd9
 801cd30:	0801ce7f 	.word	0x0801ce7f
 801cd34:	0801ccd9 	.word	0x0801ccd9
 801cd38:	0801cd87 	.word	0x0801cd87
 801cd3c:	0801ccd9 	.word	0x0801ccd9
 801cd40:	0801ccd9 	.word	0x0801ccd9
 801cd44:	0801ce1f 	.word	0x0801ce1f
 801cd48:	6833      	ldr	r3, [r6, #0]
 801cd4a:	1d1a      	adds	r2, r3, #4
 801cd4c:	681b      	ldr	r3, [r3, #0]
 801cd4e:	6032      	str	r2, [r6, #0]
 801cd50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cd54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801cd58:	2301      	movs	r3, #1
 801cd5a:	e09d      	b.n	801ce98 <_printf_i+0x1e8>
 801cd5c:	6833      	ldr	r3, [r6, #0]
 801cd5e:	6820      	ldr	r0, [r4, #0]
 801cd60:	1d19      	adds	r1, r3, #4
 801cd62:	6031      	str	r1, [r6, #0]
 801cd64:	0606      	lsls	r6, r0, #24
 801cd66:	d501      	bpl.n	801cd6c <_printf_i+0xbc>
 801cd68:	681d      	ldr	r5, [r3, #0]
 801cd6a:	e003      	b.n	801cd74 <_printf_i+0xc4>
 801cd6c:	0645      	lsls	r5, r0, #25
 801cd6e:	d5fb      	bpl.n	801cd68 <_printf_i+0xb8>
 801cd70:	f9b3 5000 	ldrsh.w	r5, [r3]
 801cd74:	2d00      	cmp	r5, #0
 801cd76:	da03      	bge.n	801cd80 <_printf_i+0xd0>
 801cd78:	232d      	movs	r3, #45	@ 0x2d
 801cd7a:	426d      	negs	r5, r5
 801cd7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cd80:	4859      	ldr	r0, [pc, #356]	@ (801cee8 <_printf_i+0x238>)
 801cd82:	230a      	movs	r3, #10
 801cd84:	e011      	b.n	801cdaa <_printf_i+0xfa>
 801cd86:	6821      	ldr	r1, [r4, #0]
 801cd88:	6833      	ldr	r3, [r6, #0]
 801cd8a:	0608      	lsls	r0, r1, #24
 801cd8c:	f853 5b04 	ldr.w	r5, [r3], #4
 801cd90:	d402      	bmi.n	801cd98 <_printf_i+0xe8>
 801cd92:	0649      	lsls	r1, r1, #25
 801cd94:	bf48      	it	mi
 801cd96:	b2ad      	uxthmi	r5, r5
 801cd98:	2f6f      	cmp	r7, #111	@ 0x6f
 801cd9a:	4853      	ldr	r0, [pc, #332]	@ (801cee8 <_printf_i+0x238>)
 801cd9c:	6033      	str	r3, [r6, #0]
 801cd9e:	bf14      	ite	ne
 801cda0:	230a      	movne	r3, #10
 801cda2:	2308      	moveq	r3, #8
 801cda4:	2100      	movs	r1, #0
 801cda6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801cdaa:	6866      	ldr	r6, [r4, #4]
 801cdac:	60a6      	str	r6, [r4, #8]
 801cdae:	2e00      	cmp	r6, #0
 801cdb0:	bfa2      	ittt	ge
 801cdb2:	6821      	ldrge	r1, [r4, #0]
 801cdb4:	f021 0104 	bicge.w	r1, r1, #4
 801cdb8:	6021      	strge	r1, [r4, #0]
 801cdba:	b90d      	cbnz	r5, 801cdc0 <_printf_i+0x110>
 801cdbc:	2e00      	cmp	r6, #0
 801cdbe:	d04b      	beq.n	801ce58 <_printf_i+0x1a8>
 801cdc0:	4616      	mov	r6, r2
 801cdc2:	fbb5 f1f3 	udiv	r1, r5, r3
 801cdc6:	fb03 5711 	mls	r7, r3, r1, r5
 801cdca:	5dc7      	ldrb	r7, [r0, r7]
 801cdcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801cdd0:	462f      	mov	r7, r5
 801cdd2:	42bb      	cmp	r3, r7
 801cdd4:	460d      	mov	r5, r1
 801cdd6:	d9f4      	bls.n	801cdc2 <_printf_i+0x112>
 801cdd8:	2b08      	cmp	r3, #8
 801cdda:	d10b      	bne.n	801cdf4 <_printf_i+0x144>
 801cddc:	6823      	ldr	r3, [r4, #0]
 801cdde:	07df      	lsls	r7, r3, #31
 801cde0:	d508      	bpl.n	801cdf4 <_printf_i+0x144>
 801cde2:	6923      	ldr	r3, [r4, #16]
 801cde4:	6861      	ldr	r1, [r4, #4]
 801cde6:	4299      	cmp	r1, r3
 801cde8:	bfde      	ittt	le
 801cdea:	2330      	movle	r3, #48	@ 0x30
 801cdec:	f806 3c01 	strble.w	r3, [r6, #-1]
 801cdf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801cdf4:	1b92      	subs	r2, r2, r6
 801cdf6:	6122      	str	r2, [r4, #16]
 801cdf8:	f8cd a000 	str.w	sl, [sp]
 801cdfc:	464b      	mov	r3, r9
 801cdfe:	aa03      	add	r2, sp, #12
 801ce00:	4621      	mov	r1, r4
 801ce02:	4640      	mov	r0, r8
 801ce04:	f7ff fee6 	bl	801cbd4 <_printf_common>
 801ce08:	3001      	adds	r0, #1
 801ce0a:	d14a      	bne.n	801cea2 <_printf_i+0x1f2>
 801ce0c:	f04f 30ff 	mov.w	r0, #4294967295
 801ce10:	b004      	add	sp, #16
 801ce12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce16:	6823      	ldr	r3, [r4, #0]
 801ce18:	f043 0320 	orr.w	r3, r3, #32
 801ce1c:	6023      	str	r3, [r4, #0]
 801ce1e:	4833      	ldr	r0, [pc, #204]	@ (801ceec <_printf_i+0x23c>)
 801ce20:	2778      	movs	r7, #120	@ 0x78
 801ce22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ce26:	6823      	ldr	r3, [r4, #0]
 801ce28:	6831      	ldr	r1, [r6, #0]
 801ce2a:	061f      	lsls	r7, r3, #24
 801ce2c:	f851 5b04 	ldr.w	r5, [r1], #4
 801ce30:	d402      	bmi.n	801ce38 <_printf_i+0x188>
 801ce32:	065f      	lsls	r7, r3, #25
 801ce34:	bf48      	it	mi
 801ce36:	b2ad      	uxthmi	r5, r5
 801ce38:	6031      	str	r1, [r6, #0]
 801ce3a:	07d9      	lsls	r1, r3, #31
 801ce3c:	bf44      	itt	mi
 801ce3e:	f043 0320 	orrmi.w	r3, r3, #32
 801ce42:	6023      	strmi	r3, [r4, #0]
 801ce44:	b11d      	cbz	r5, 801ce4e <_printf_i+0x19e>
 801ce46:	2310      	movs	r3, #16
 801ce48:	e7ac      	b.n	801cda4 <_printf_i+0xf4>
 801ce4a:	4827      	ldr	r0, [pc, #156]	@ (801cee8 <_printf_i+0x238>)
 801ce4c:	e7e9      	b.n	801ce22 <_printf_i+0x172>
 801ce4e:	6823      	ldr	r3, [r4, #0]
 801ce50:	f023 0320 	bic.w	r3, r3, #32
 801ce54:	6023      	str	r3, [r4, #0]
 801ce56:	e7f6      	b.n	801ce46 <_printf_i+0x196>
 801ce58:	4616      	mov	r6, r2
 801ce5a:	e7bd      	b.n	801cdd8 <_printf_i+0x128>
 801ce5c:	6833      	ldr	r3, [r6, #0]
 801ce5e:	6825      	ldr	r5, [r4, #0]
 801ce60:	6961      	ldr	r1, [r4, #20]
 801ce62:	1d18      	adds	r0, r3, #4
 801ce64:	6030      	str	r0, [r6, #0]
 801ce66:	062e      	lsls	r6, r5, #24
 801ce68:	681b      	ldr	r3, [r3, #0]
 801ce6a:	d501      	bpl.n	801ce70 <_printf_i+0x1c0>
 801ce6c:	6019      	str	r1, [r3, #0]
 801ce6e:	e002      	b.n	801ce76 <_printf_i+0x1c6>
 801ce70:	0668      	lsls	r0, r5, #25
 801ce72:	d5fb      	bpl.n	801ce6c <_printf_i+0x1bc>
 801ce74:	8019      	strh	r1, [r3, #0]
 801ce76:	2300      	movs	r3, #0
 801ce78:	6123      	str	r3, [r4, #16]
 801ce7a:	4616      	mov	r6, r2
 801ce7c:	e7bc      	b.n	801cdf8 <_printf_i+0x148>
 801ce7e:	6833      	ldr	r3, [r6, #0]
 801ce80:	1d1a      	adds	r2, r3, #4
 801ce82:	6032      	str	r2, [r6, #0]
 801ce84:	681e      	ldr	r6, [r3, #0]
 801ce86:	6862      	ldr	r2, [r4, #4]
 801ce88:	2100      	movs	r1, #0
 801ce8a:	4630      	mov	r0, r6
 801ce8c:	f7e3 f980 	bl	8000190 <memchr>
 801ce90:	b108      	cbz	r0, 801ce96 <_printf_i+0x1e6>
 801ce92:	1b80      	subs	r0, r0, r6
 801ce94:	6060      	str	r0, [r4, #4]
 801ce96:	6863      	ldr	r3, [r4, #4]
 801ce98:	6123      	str	r3, [r4, #16]
 801ce9a:	2300      	movs	r3, #0
 801ce9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cea0:	e7aa      	b.n	801cdf8 <_printf_i+0x148>
 801cea2:	6923      	ldr	r3, [r4, #16]
 801cea4:	4632      	mov	r2, r6
 801cea6:	4649      	mov	r1, r9
 801cea8:	4640      	mov	r0, r8
 801ceaa:	47d0      	blx	sl
 801ceac:	3001      	adds	r0, #1
 801ceae:	d0ad      	beq.n	801ce0c <_printf_i+0x15c>
 801ceb0:	6823      	ldr	r3, [r4, #0]
 801ceb2:	079b      	lsls	r3, r3, #30
 801ceb4:	d413      	bmi.n	801cede <_printf_i+0x22e>
 801ceb6:	68e0      	ldr	r0, [r4, #12]
 801ceb8:	9b03      	ldr	r3, [sp, #12]
 801ceba:	4298      	cmp	r0, r3
 801cebc:	bfb8      	it	lt
 801cebe:	4618      	movlt	r0, r3
 801cec0:	e7a6      	b.n	801ce10 <_printf_i+0x160>
 801cec2:	2301      	movs	r3, #1
 801cec4:	4632      	mov	r2, r6
 801cec6:	4649      	mov	r1, r9
 801cec8:	4640      	mov	r0, r8
 801ceca:	47d0      	blx	sl
 801cecc:	3001      	adds	r0, #1
 801cece:	d09d      	beq.n	801ce0c <_printf_i+0x15c>
 801ced0:	3501      	adds	r5, #1
 801ced2:	68e3      	ldr	r3, [r4, #12]
 801ced4:	9903      	ldr	r1, [sp, #12]
 801ced6:	1a5b      	subs	r3, r3, r1
 801ced8:	42ab      	cmp	r3, r5
 801ceda:	dcf2      	bgt.n	801cec2 <_printf_i+0x212>
 801cedc:	e7eb      	b.n	801ceb6 <_printf_i+0x206>
 801cede:	2500      	movs	r5, #0
 801cee0:	f104 0619 	add.w	r6, r4, #25
 801cee4:	e7f5      	b.n	801ced2 <_printf_i+0x222>
 801cee6:	bf00      	nop
 801cee8:	0801ddfd 	.word	0x0801ddfd
 801ceec:	0801de0e 	.word	0x0801de0e

0801cef0 <__sflush_r>:
 801cef0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cef6:	0716      	lsls	r6, r2, #28
 801cef8:	4605      	mov	r5, r0
 801cefa:	460c      	mov	r4, r1
 801cefc:	d454      	bmi.n	801cfa8 <__sflush_r+0xb8>
 801cefe:	684b      	ldr	r3, [r1, #4]
 801cf00:	2b00      	cmp	r3, #0
 801cf02:	dc02      	bgt.n	801cf0a <__sflush_r+0x1a>
 801cf04:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801cf06:	2b00      	cmp	r3, #0
 801cf08:	dd48      	ble.n	801cf9c <__sflush_r+0xac>
 801cf0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cf0c:	2e00      	cmp	r6, #0
 801cf0e:	d045      	beq.n	801cf9c <__sflush_r+0xac>
 801cf10:	2300      	movs	r3, #0
 801cf12:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801cf16:	682f      	ldr	r7, [r5, #0]
 801cf18:	6a21      	ldr	r1, [r4, #32]
 801cf1a:	602b      	str	r3, [r5, #0]
 801cf1c:	d030      	beq.n	801cf80 <__sflush_r+0x90>
 801cf1e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801cf20:	89a3      	ldrh	r3, [r4, #12]
 801cf22:	0759      	lsls	r1, r3, #29
 801cf24:	d505      	bpl.n	801cf32 <__sflush_r+0x42>
 801cf26:	6863      	ldr	r3, [r4, #4]
 801cf28:	1ad2      	subs	r2, r2, r3
 801cf2a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cf2c:	b10b      	cbz	r3, 801cf32 <__sflush_r+0x42>
 801cf2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cf30:	1ad2      	subs	r2, r2, r3
 801cf32:	2300      	movs	r3, #0
 801cf34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cf36:	6a21      	ldr	r1, [r4, #32]
 801cf38:	4628      	mov	r0, r5
 801cf3a:	47b0      	blx	r6
 801cf3c:	1c43      	adds	r3, r0, #1
 801cf3e:	89a3      	ldrh	r3, [r4, #12]
 801cf40:	d106      	bne.n	801cf50 <__sflush_r+0x60>
 801cf42:	6829      	ldr	r1, [r5, #0]
 801cf44:	291d      	cmp	r1, #29
 801cf46:	d82b      	bhi.n	801cfa0 <__sflush_r+0xb0>
 801cf48:	4a28      	ldr	r2, [pc, #160]	@ (801cfec <__sflush_r+0xfc>)
 801cf4a:	410a      	asrs	r2, r1
 801cf4c:	07d6      	lsls	r6, r2, #31
 801cf4e:	d427      	bmi.n	801cfa0 <__sflush_r+0xb0>
 801cf50:	2200      	movs	r2, #0
 801cf52:	6062      	str	r2, [r4, #4]
 801cf54:	04d9      	lsls	r1, r3, #19
 801cf56:	6922      	ldr	r2, [r4, #16]
 801cf58:	6022      	str	r2, [r4, #0]
 801cf5a:	d504      	bpl.n	801cf66 <__sflush_r+0x76>
 801cf5c:	1c42      	adds	r2, r0, #1
 801cf5e:	d101      	bne.n	801cf64 <__sflush_r+0x74>
 801cf60:	682b      	ldr	r3, [r5, #0]
 801cf62:	b903      	cbnz	r3, 801cf66 <__sflush_r+0x76>
 801cf64:	6560      	str	r0, [r4, #84]	@ 0x54
 801cf66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cf68:	602f      	str	r7, [r5, #0]
 801cf6a:	b1b9      	cbz	r1, 801cf9c <__sflush_r+0xac>
 801cf6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cf70:	4299      	cmp	r1, r3
 801cf72:	d002      	beq.n	801cf7a <__sflush_r+0x8a>
 801cf74:	4628      	mov	r0, r5
 801cf76:	f7ff fbf5 	bl	801c764 <_free_r>
 801cf7a:	2300      	movs	r3, #0
 801cf7c:	6363      	str	r3, [r4, #52]	@ 0x34
 801cf7e:	e00d      	b.n	801cf9c <__sflush_r+0xac>
 801cf80:	2301      	movs	r3, #1
 801cf82:	4628      	mov	r0, r5
 801cf84:	47b0      	blx	r6
 801cf86:	4602      	mov	r2, r0
 801cf88:	1c50      	adds	r0, r2, #1
 801cf8a:	d1c9      	bne.n	801cf20 <__sflush_r+0x30>
 801cf8c:	682b      	ldr	r3, [r5, #0]
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d0c6      	beq.n	801cf20 <__sflush_r+0x30>
 801cf92:	2b1d      	cmp	r3, #29
 801cf94:	d001      	beq.n	801cf9a <__sflush_r+0xaa>
 801cf96:	2b16      	cmp	r3, #22
 801cf98:	d11d      	bne.n	801cfd6 <__sflush_r+0xe6>
 801cf9a:	602f      	str	r7, [r5, #0]
 801cf9c:	2000      	movs	r0, #0
 801cf9e:	e021      	b.n	801cfe4 <__sflush_r+0xf4>
 801cfa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cfa4:	b21b      	sxth	r3, r3
 801cfa6:	e01a      	b.n	801cfde <__sflush_r+0xee>
 801cfa8:	690f      	ldr	r7, [r1, #16]
 801cfaa:	2f00      	cmp	r7, #0
 801cfac:	d0f6      	beq.n	801cf9c <__sflush_r+0xac>
 801cfae:	0793      	lsls	r3, r2, #30
 801cfb0:	680e      	ldr	r6, [r1, #0]
 801cfb2:	bf08      	it	eq
 801cfb4:	694b      	ldreq	r3, [r1, #20]
 801cfb6:	600f      	str	r7, [r1, #0]
 801cfb8:	bf18      	it	ne
 801cfba:	2300      	movne	r3, #0
 801cfbc:	1bf6      	subs	r6, r6, r7
 801cfbe:	608b      	str	r3, [r1, #8]
 801cfc0:	2e00      	cmp	r6, #0
 801cfc2:	ddeb      	ble.n	801cf9c <__sflush_r+0xac>
 801cfc4:	6a21      	ldr	r1, [r4, #32]
 801cfc6:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801cfca:	4633      	mov	r3, r6
 801cfcc:	463a      	mov	r2, r7
 801cfce:	4628      	mov	r0, r5
 801cfd0:	47e0      	blx	ip
 801cfd2:	2800      	cmp	r0, #0
 801cfd4:	dc07      	bgt.n	801cfe6 <__sflush_r+0xf6>
 801cfd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cfda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cfde:	81a3      	strh	r3, [r4, #12]
 801cfe0:	f04f 30ff 	mov.w	r0, #4294967295
 801cfe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cfe6:	4407      	add	r7, r0
 801cfe8:	1a36      	subs	r6, r6, r0
 801cfea:	e7e9      	b.n	801cfc0 <__sflush_r+0xd0>
 801cfec:	dfbffffe 	.word	0xdfbffffe

0801cff0 <_fflush_r>:
 801cff0:	b538      	push	{r3, r4, r5, lr}
 801cff2:	690b      	ldr	r3, [r1, #16]
 801cff4:	4605      	mov	r5, r0
 801cff6:	460c      	mov	r4, r1
 801cff8:	b913      	cbnz	r3, 801d000 <_fflush_r+0x10>
 801cffa:	2500      	movs	r5, #0
 801cffc:	4628      	mov	r0, r5
 801cffe:	bd38      	pop	{r3, r4, r5, pc}
 801d000:	b118      	cbz	r0, 801d00a <_fflush_r+0x1a>
 801d002:	6a03      	ldr	r3, [r0, #32]
 801d004:	b90b      	cbnz	r3, 801d00a <_fflush_r+0x1a>
 801d006:	f7ff f9ab 	bl	801c360 <__sinit>
 801d00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d0f3      	beq.n	801cffa <_fflush_r+0xa>
 801d012:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d014:	07d0      	lsls	r0, r2, #31
 801d016:	d404      	bmi.n	801d022 <_fflush_r+0x32>
 801d018:	0599      	lsls	r1, r3, #22
 801d01a:	d402      	bmi.n	801d022 <_fflush_r+0x32>
 801d01c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d01e:	f7ff fb9e 	bl	801c75e <__retarget_lock_acquire_recursive>
 801d022:	4628      	mov	r0, r5
 801d024:	4621      	mov	r1, r4
 801d026:	f7ff ff63 	bl	801cef0 <__sflush_r>
 801d02a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d02c:	07da      	lsls	r2, r3, #31
 801d02e:	4605      	mov	r5, r0
 801d030:	d4e4      	bmi.n	801cffc <_fflush_r+0xc>
 801d032:	89a3      	ldrh	r3, [r4, #12]
 801d034:	059b      	lsls	r3, r3, #22
 801d036:	d4e1      	bmi.n	801cffc <_fflush_r+0xc>
 801d038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d03a:	f7ff fb91 	bl	801c760 <__retarget_lock_release_recursive>
 801d03e:	e7dd      	b.n	801cffc <_fflush_r+0xc>

0801d040 <__swhatbuf_r>:
 801d040:	b570      	push	{r4, r5, r6, lr}
 801d042:	460c      	mov	r4, r1
 801d044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d048:	2900      	cmp	r1, #0
 801d04a:	b096      	sub	sp, #88	@ 0x58
 801d04c:	4615      	mov	r5, r2
 801d04e:	461e      	mov	r6, r3
 801d050:	da0d      	bge.n	801d06e <__swhatbuf_r+0x2e>
 801d052:	89a3      	ldrh	r3, [r4, #12]
 801d054:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d058:	f04f 0100 	mov.w	r1, #0
 801d05c:	bf14      	ite	ne
 801d05e:	2340      	movne	r3, #64	@ 0x40
 801d060:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d064:	2000      	movs	r0, #0
 801d066:	6031      	str	r1, [r6, #0]
 801d068:	602b      	str	r3, [r5, #0]
 801d06a:	b016      	add	sp, #88	@ 0x58
 801d06c:	bd70      	pop	{r4, r5, r6, pc}
 801d06e:	466a      	mov	r2, sp
 801d070:	f000 f87c 	bl	801d16c <_fstat_r>
 801d074:	2800      	cmp	r0, #0
 801d076:	dbec      	blt.n	801d052 <__swhatbuf_r+0x12>
 801d078:	9901      	ldr	r1, [sp, #4]
 801d07a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d07e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d082:	4259      	negs	r1, r3
 801d084:	4159      	adcs	r1, r3
 801d086:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d08a:	e7eb      	b.n	801d064 <__swhatbuf_r+0x24>

0801d08c <__smakebuf_r>:
 801d08c:	898b      	ldrh	r3, [r1, #12]
 801d08e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d090:	079d      	lsls	r5, r3, #30
 801d092:	4606      	mov	r6, r0
 801d094:	460c      	mov	r4, r1
 801d096:	d507      	bpl.n	801d0a8 <__smakebuf_r+0x1c>
 801d098:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d09c:	6023      	str	r3, [r4, #0]
 801d09e:	6123      	str	r3, [r4, #16]
 801d0a0:	2301      	movs	r3, #1
 801d0a2:	6163      	str	r3, [r4, #20]
 801d0a4:	b003      	add	sp, #12
 801d0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d0a8:	ab01      	add	r3, sp, #4
 801d0aa:	466a      	mov	r2, sp
 801d0ac:	f7ff ffc8 	bl	801d040 <__swhatbuf_r>
 801d0b0:	9f00      	ldr	r7, [sp, #0]
 801d0b2:	4605      	mov	r5, r0
 801d0b4:	4639      	mov	r1, r7
 801d0b6:	4630      	mov	r0, r6
 801d0b8:	f7ff fbc0 	bl	801c83c <_malloc_r>
 801d0bc:	b948      	cbnz	r0, 801d0d2 <__smakebuf_r+0x46>
 801d0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d0c2:	059a      	lsls	r2, r3, #22
 801d0c4:	d4ee      	bmi.n	801d0a4 <__smakebuf_r+0x18>
 801d0c6:	f023 0303 	bic.w	r3, r3, #3
 801d0ca:	f043 0302 	orr.w	r3, r3, #2
 801d0ce:	81a3      	strh	r3, [r4, #12]
 801d0d0:	e7e2      	b.n	801d098 <__smakebuf_r+0xc>
 801d0d2:	89a3      	ldrh	r3, [r4, #12]
 801d0d4:	6020      	str	r0, [r4, #0]
 801d0d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d0da:	81a3      	strh	r3, [r4, #12]
 801d0dc:	9b01      	ldr	r3, [sp, #4]
 801d0de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d0e2:	b15b      	cbz	r3, 801d0fc <__smakebuf_r+0x70>
 801d0e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d0e8:	4630      	mov	r0, r6
 801d0ea:	f000 f851 	bl	801d190 <_isatty_r>
 801d0ee:	b128      	cbz	r0, 801d0fc <__smakebuf_r+0x70>
 801d0f0:	89a3      	ldrh	r3, [r4, #12]
 801d0f2:	f023 0303 	bic.w	r3, r3, #3
 801d0f6:	f043 0301 	orr.w	r3, r3, #1
 801d0fa:	81a3      	strh	r3, [r4, #12]
 801d0fc:	89a3      	ldrh	r3, [r4, #12]
 801d0fe:	431d      	orrs	r5, r3
 801d100:	81a5      	strh	r5, [r4, #12]
 801d102:	e7cf      	b.n	801d0a4 <__smakebuf_r+0x18>

0801d104 <_putc_r>:
 801d104:	b570      	push	{r4, r5, r6, lr}
 801d106:	460d      	mov	r5, r1
 801d108:	4614      	mov	r4, r2
 801d10a:	4606      	mov	r6, r0
 801d10c:	b118      	cbz	r0, 801d116 <_putc_r+0x12>
 801d10e:	6a03      	ldr	r3, [r0, #32]
 801d110:	b90b      	cbnz	r3, 801d116 <_putc_r+0x12>
 801d112:	f7ff f925 	bl	801c360 <__sinit>
 801d116:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d118:	07d8      	lsls	r0, r3, #31
 801d11a:	d405      	bmi.n	801d128 <_putc_r+0x24>
 801d11c:	89a3      	ldrh	r3, [r4, #12]
 801d11e:	0599      	lsls	r1, r3, #22
 801d120:	d402      	bmi.n	801d128 <_putc_r+0x24>
 801d122:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d124:	f7ff fb1b 	bl	801c75e <__retarget_lock_acquire_recursive>
 801d128:	68a3      	ldr	r3, [r4, #8]
 801d12a:	3b01      	subs	r3, #1
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	60a3      	str	r3, [r4, #8]
 801d130:	da05      	bge.n	801d13e <_putc_r+0x3a>
 801d132:	69a2      	ldr	r2, [r4, #24]
 801d134:	4293      	cmp	r3, r2
 801d136:	db12      	blt.n	801d15e <_putc_r+0x5a>
 801d138:	b2eb      	uxtb	r3, r5
 801d13a:	2b0a      	cmp	r3, #10
 801d13c:	d00f      	beq.n	801d15e <_putc_r+0x5a>
 801d13e:	6823      	ldr	r3, [r4, #0]
 801d140:	1c5a      	adds	r2, r3, #1
 801d142:	6022      	str	r2, [r4, #0]
 801d144:	701d      	strb	r5, [r3, #0]
 801d146:	b2ed      	uxtb	r5, r5
 801d148:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d14a:	07da      	lsls	r2, r3, #31
 801d14c:	d405      	bmi.n	801d15a <_putc_r+0x56>
 801d14e:	89a3      	ldrh	r3, [r4, #12]
 801d150:	059b      	lsls	r3, r3, #22
 801d152:	d402      	bmi.n	801d15a <_putc_r+0x56>
 801d154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d156:	f7ff fb03 	bl	801c760 <__retarget_lock_release_recursive>
 801d15a:	4628      	mov	r0, r5
 801d15c:	bd70      	pop	{r4, r5, r6, pc}
 801d15e:	4629      	mov	r1, r5
 801d160:	4622      	mov	r2, r4
 801d162:	4630      	mov	r0, r6
 801d164:	f7ff f9ed 	bl	801c542 <__swbuf_r>
 801d168:	4605      	mov	r5, r0
 801d16a:	e7ed      	b.n	801d148 <_putc_r+0x44>

0801d16c <_fstat_r>:
 801d16c:	b538      	push	{r3, r4, r5, lr}
 801d16e:	4d07      	ldr	r5, [pc, #28]	@ (801d18c <_fstat_r+0x20>)
 801d170:	2300      	movs	r3, #0
 801d172:	4604      	mov	r4, r0
 801d174:	4608      	mov	r0, r1
 801d176:	4611      	mov	r1, r2
 801d178:	602b      	str	r3, [r5, #0]
 801d17a:	f7e5 fb60 	bl	800283e <_fstat>
 801d17e:	1c43      	adds	r3, r0, #1
 801d180:	d102      	bne.n	801d188 <_fstat_r+0x1c>
 801d182:	682b      	ldr	r3, [r5, #0]
 801d184:	b103      	cbz	r3, 801d188 <_fstat_r+0x1c>
 801d186:	6023      	str	r3, [r4, #0]
 801d188:	bd38      	pop	{r3, r4, r5, pc}
 801d18a:	bf00      	nop
 801d18c:	20001cb4 	.word	0x20001cb4

0801d190 <_isatty_r>:
 801d190:	b538      	push	{r3, r4, r5, lr}
 801d192:	4d06      	ldr	r5, [pc, #24]	@ (801d1ac <_isatty_r+0x1c>)
 801d194:	2300      	movs	r3, #0
 801d196:	4604      	mov	r4, r0
 801d198:	4608      	mov	r0, r1
 801d19a:	602b      	str	r3, [r5, #0]
 801d19c:	f7e5 fb5e 	bl	800285c <_isatty>
 801d1a0:	1c43      	adds	r3, r0, #1
 801d1a2:	d102      	bne.n	801d1aa <_isatty_r+0x1a>
 801d1a4:	682b      	ldr	r3, [r5, #0]
 801d1a6:	b103      	cbz	r3, 801d1aa <_isatty_r+0x1a>
 801d1a8:	6023      	str	r3, [r4, #0]
 801d1aa:	bd38      	pop	{r3, r4, r5, pc}
 801d1ac:	20001cb4 	.word	0x20001cb4

0801d1b0 <_sbrk_r>:
 801d1b0:	b538      	push	{r3, r4, r5, lr}
 801d1b2:	4d06      	ldr	r5, [pc, #24]	@ (801d1cc <_sbrk_r+0x1c>)
 801d1b4:	2300      	movs	r3, #0
 801d1b6:	4604      	mov	r4, r0
 801d1b8:	4608      	mov	r0, r1
 801d1ba:	602b      	str	r3, [r5, #0]
 801d1bc:	f7e5 fb64 	bl	8002888 <_sbrk>
 801d1c0:	1c43      	adds	r3, r0, #1
 801d1c2:	d102      	bne.n	801d1ca <_sbrk_r+0x1a>
 801d1c4:	682b      	ldr	r3, [r5, #0]
 801d1c6:	b103      	cbz	r3, 801d1ca <_sbrk_r+0x1a>
 801d1c8:	6023      	str	r3, [r4, #0]
 801d1ca:	bd38      	pop	{r3, r4, r5, pc}
 801d1cc:	20001cb4 	.word	0x20001cb4

0801d1d0 <_init>:
 801d1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1d2:	bf00      	nop
 801d1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d1d6:	bc08      	pop	{r3}
 801d1d8:	469e      	mov	lr, r3
 801d1da:	4770      	bx	lr

0801d1dc <_fini>:
 801d1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1de:	bf00      	nop
 801d1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d1e2:	bc08      	pop	{r3}
 801d1e4:	469e      	mov	lr, r3
 801d1e6:	4770      	bx	lr
