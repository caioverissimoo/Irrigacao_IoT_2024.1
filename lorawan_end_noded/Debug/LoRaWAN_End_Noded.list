
LoRaWAN_End_Noded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cc40  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c44  0801cd78  0801cd78  0001dd78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801d9bc  0801d9bc  0001e9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801da94  0801da94  0001f194  2**0
                  CONTENTS
  5 .ARM          00000008  0801da94  0801da94  0001ea94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801da9c  0801da9c  0001f194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801da9c  0801da9c  0001ea9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0801daa0  0801daa0  0001eaa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000194  20000000  0801daa4  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001ad8  20000194  0801dc38  0001f194  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20001c6c  0801dc38  0001fc6c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001f194  2**0
                  CONTENTS, READONLY
 13 .debug_info   000442c5  00000000  00000000  0001f1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a550  00000000  00000000  00063483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000034a0  00000000  00000000  0006d9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000027e4  00000000  00000000  00070e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c182  00000000  00000000  0007365c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004006e  00000000  00000000  0009f7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df9f2  00000000  00000000  000df84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001bf23e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ded8  00000000  00000000  001bf284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  001cd15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000194 	.word	0x20000194
 8000154:	00000000 	.word	0x00000000
 8000158:	0801cd60 	.word	0x0801cd60

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000198 	.word	0x20000198
 8000174:	0801cd60 	.word	0x0801cd60

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	@ 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	@ 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_f2iz>:
 800087c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000880:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000884:	d30f      	bcc.n	80008a6 <__aeabi_f2iz+0x2a>
 8000886:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800088a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800088e:	d90d      	bls.n	80008ac <__aeabi_f2iz+0x30>
 8000890:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000894:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000898:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800089c:	fa23 f002 	lsr.w	r0, r3, r2
 80008a0:	bf18      	it	ne
 80008a2:	4240      	negne	r0, r0
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr
 80008ac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80008b0:	d101      	bne.n	80008b6 <__aeabi_f2iz+0x3a>
 80008b2:	0242      	lsls	r2, r0, #9
 80008b4:	d105      	bne.n	80008c2 <__aeabi_f2iz+0x46>
 80008b6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80008ba:	bf08      	it	eq
 80008bc:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008c0:	4770      	bx	lr
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	4770      	bx	lr

080008c8 <__aeabi_uldivmod>:
 80008c8:	b953      	cbnz	r3, 80008e0 <__aeabi_uldivmod+0x18>
 80008ca:	b94a      	cbnz	r2, 80008e0 <__aeabi_uldivmod+0x18>
 80008cc:	2900      	cmp	r1, #0
 80008ce:	bf08      	it	eq
 80008d0:	2800      	cmpeq	r0, #0
 80008d2:	bf1c      	itt	ne
 80008d4:	f04f 31ff 	movne.w	r1, #4294967295
 80008d8:	f04f 30ff 	movne.w	r0, #4294967295
 80008dc:	f000 b96a 	b.w	8000bb4 <__aeabi_idiv0>
 80008e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008e8:	f000 f806 	bl	80008f8 <__udivmoddi4>
 80008ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f4:	b004      	add	sp, #16
 80008f6:	4770      	bx	lr

080008f8 <__udivmoddi4>:
 80008f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008fc:	9d08      	ldr	r5, [sp, #32]
 80008fe:	460c      	mov	r4, r1
 8000900:	2b00      	cmp	r3, #0
 8000902:	d14e      	bne.n	80009a2 <__udivmoddi4+0xaa>
 8000904:	4694      	mov	ip, r2
 8000906:	458c      	cmp	ip, r1
 8000908:	4686      	mov	lr, r0
 800090a:	fab2 f282 	clz	r2, r2
 800090e:	d962      	bls.n	80009d6 <__udivmoddi4+0xde>
 8000910:	b14a      	cbz	r2, 8000926 <__udivmoddi4+0x2e>
 8000912:	f1c2 0320 	rsb	r3, r2, #32
 8000916:	4091      	lsls	r1, r2
 8000918:	fa20 f303 	lsr.w	r3, r0, r3
 800091c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000920:	4319      	orrs	r1, r3
 8000922:	fa00 fe02 	lsl.w	lr, r0, r2
 8000926:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092a:	fa1f f68c 	uxth.w	r6, ip
 800092e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000932:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000936:	fb07 1114 	mls	r1, r7, r4, r1
 800093a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800093e:	fb04 f106 	mul.w	r1, r4, r6
 8000942:	4299      	cmp	r1, r3
 8000944:	d90a      	bls.n	800095c <__udivmoddi4+0x64>
 8000946:	eb1c 0303 	adds.w	r3, ip, r3
 800094a:	f104 30ff 	add.w	r0, r4, #4294967295
 800094e:	f080 8112 	bcs.w	8000b76 <__udivmoddi4+0x27e>
 8000952:	4299      	cmp	r1, r3
 8000954:	f240 810f 	bls.w	8000b76 <__udivmoddi4+0x27e>
 8000958:	3c02      	subs	r4, #2
 800095a:	4463      	add	r3, ip
 800095c:	1a59      	subs	r1, r3, r1
 800095e:	fa1f f38e 	uxth.w	r3, lr
 8000962:	fbb1 f0f7 	udiv	r0, r1, r7
 8000966:	fb07 1110 	mls	r1, r7, r0, r1
 800096a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800096e:	fb00 f606 	mul.w	r6, r0, r6
 8000972:	429e      	cmp	r6, r3
 8000974:	d90a      	bls.n	800098c <__udivmoddi4+0x94>
 8000976:	eb1c 0303 	adds.w	r3, ip, r3
 800097a:	f100 31ff 	add.w	r1, r0, #4294967295
 800097e:	f080 80fc 	bcs.w	8000b7a <__udivmoddi4+0x282>
 8000982:	429e      	cmp	r6, r3
 8000984:	f240 80f9 	bls.w	8000b7a <__udivmoddi4+0x282>
 8000988:	4463      	add	r3, ip
 800098a:	3802      	subs	r0, #2
 800098c:	1b9b      	subs	r3, r3, r6
 800098e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000992:	2100      	movs	r1, #0
 8000994:	b11d      	cbz	r5, 800099e <__udivmoddi4+0xa6>
 8000996:	40d3      	lsrs	r3, r2
 8000998:	2200      	movs	r2, #0
 800099a:	e9c5 3200 	strd	r3, r2, [r5]
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d905      	bls.n	80009b2 <__udivmoddi4+0xba>
 80009a6:	b10d      	cbz	r5, 80009ac <__udivmoddi4+0xb4>
 80009a8:	e9c5 0100 	strd	r0, r1, [r5]
 80009ac:	2100      	movs	r1, #0
 80009ae:	4608      	mov	r0, r1
 80009b0:	e7f5      	b.n	800099e <__udivmoddi4+0xa6>
 80009b2:	fab3 f183 	clz	r1, r3
 80009b6:	2900      	cmp	r1, #0
 80009b8:	d146      	bne.n	8000a48 <__udivmoddi4+0x150>
 80009ba:	42a3      	cmp	r3, r4
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0xcc>
 80009be:	4290      	cmp	r0, r2
 80009c0:	f0c0 80f0 	bcc.w	8000ba4 <__udivmoddi4+0x2ac>
 80009c4:	1a86      	subs	r6, r0, r2
 80009c6:	eb64 0303 	sbc.w	r3, r4, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	2d00      	cmp	r5, #0
 80009ce:	d0e6      	beq.n	800099e <__udivmoddi4+0xa6>
 80009d0:	e9c5 6300 	strd	r6, r3, [r5]
 80009d4:	e7e3      	b.n	800099e <__udivmoddi4+0xa6>
 80009d6:	2a00      	cmp	r2, #0
 80009d8:	f040 8090 	bne.w	8000afc <__udivmoddi4+0x204>
 80009dc:	eba1 040c 	sub.w	r4, r1, ip
 80009e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e4:	fa1f f78c 	uxth.w	r7, ip
 80009e8:	2101      	movs	r1, #1
 80009ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80009ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009f2:	fb08 4416 	mls	r4, r8, r6, r4
 80009f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fa:	fb07 f006 	mul.w	r0, r7, r6
 80009fe:	4298      	cmp	r0, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x11c>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a0a:	d202      	bcs.n	8000a12 <__udivmoddi4+0x11a>
 8000a0c:	4298      	cmp	r0, r3
 8000a0e:	f200 80cd 	bhi.w	8000bac <__udivmoddi4+0x2b4>
 8000a12:	4626      	mov	r6, r4
 8000a14:	1a1c      	subs	r4, r3, r0
 8000a16:	fa1f f38e 	uxth.w	r3, lr
 8000a1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000a22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a26:	fb00 f707 	mul.w	r7, r0, r7
 8000a2a:	429f      	cmp	r7, r3
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x148>
 8000a2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a36:	d202      	bcs.n	8000a3e <__udivmoddi4+0x146>
 8000a38:	429f      	cmp	r7, r3
 8000a3a:	f200 80b0 	bhi.w	8000b9e <__udivmoddi4+0x2a6>
 8000a3e:	4620      	mov	r0, r4
 8000a40:	1bdb      	subs	r3, r3, r7
 8000a42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a46:	e7a5      	b.n	8000994 <__udivmoddi4+0x9c>
 8000a48:	f1c1 0620 	rsb	r6, r1, #32
 8000a4c:	408b      	lsls	r3, r1
 8000a4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a52:	431f      	orrs	r7, r3
 8000a54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a58:	fa04 f301 	lsl.w	r3, r4, r1
 8000a5c:	ea43 030c 	orr.w	r3, r3, ip
 8000a60:	40f4      	lsrs	r4, r6
 8000a62:	fa00 f801 	lsl.w	r8, r0, r1
 8000a66:	0c38      	lsrs	r0, r7, #16
 8000a68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000a70:	fa1f fc87 	uxth.w	ip, r7
 8000a74:	fb00 441e 	mls	r4, r0, lr, r4
 8000a78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000a80:	45a1      	cmp	r9, r4
 8000a82:	fa02 f201 	lsl.w	r2, r2, r1
 8000a86:	d90a      	bls.n	8000a9e <__udivmoddi4+0x1a6>
 8000a88:	193c      	adds	r4, r7, r4
 8000a8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a8e:	f080 8084 	bcs.w	8000b9a <__udivmoddi4+0x2a2>
 8000a92:	45a1      	cmp	r9, r4
 8000a94:	f240 8081 	bls.w	8000b9a <__udivmoddi4+0x2a2>
 8000a98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a9c:	443c      	add	r4, r7
 8000a9e:	eba4 0409 	sub.w	r4, r4, r9
 8000aa2:	fa1f f983 	uxth.w	r9, r3
 8000aa6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000aaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000aae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	d907      	bls.n	8000aca <__udivmoddi4+0x1d2>
 8000aba:	193c      	adds	r4, r7, r4
 8000abc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ac0:	d267      	bcs.n	8000b92 <__udivmoddi4+0x29a>
 8000ac2:	45a4      	cmp	ip, r4
 8000ac4:	d965      	bls.n	8000b92 <__udivmoddi4+0x29a>
 8000ac6:	3b02      	subs	r3, #2
 8000ac8:	443c      	add	r4, r7
 8000aca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ace:	fba0 9302 	umull	r9, r3, r0, r2
 8000ad2:	eba4 040c 	sub.w	r4, r4, ip
 8000ad6:	429c      	cmp	r4, r3
 8000ad8:	46ce      	mov	lr, r9
 8000ada:	469c      	mov	ip, r3
 8000adc:	d351      	bcc.n	8000b82 <__udivmoddi4+0x28a>
 8000ade:	d04e      	beq.n	8000b7e <__udivmoddi4+0x286>
 8000ae0:	b155      	cbz	r5, 8000af8 <__udivmoddi4+0x200>
 8000ae2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ae6:	eb64 040c 	sbc.w	r4, r4, ip
 8000aea:	fa04 f606 	lsl.w	r6, r4, r6
 8000aee:	40cb      	lsrs	r3, r1
 8000af0:	431e      	orrs	r6, r3
 8000af2:	40cc      	lsrs	r4, r1
 8000af4:	e9c5 6400 	strd	r6, r4, [r5]
 8000af8:	2100      	movs	r1, #0
 8000afa:	e750      	b.n	800099e <__udivmoddi4+0xa6>
 8000afc:	f1c2 0320 	rsb	r3, r2, #32
 8000b00:	fa20 f103 	lsr.w	r1, r0, r3
 8000b04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b08:	fa24 f303 	lsr.w	r3, r4, r3
 8000b0c:	4094      	lsls	r4, r2
 8000b0e:	430c      	orrs	r4, r1
 8000b10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b18:	fa1f f78c 	uxth.w	r7, ip
 8000b1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b20:	fb08 3110 	mls	r1, r8, r0, r3
 8000b24:	0c23      	lsrs	r3, r4, #16
 8000b26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2a:	fb00 f107 	mul.w	r1, r0, r7
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	d908      	bls.n	8000b44 <__udivmoddi4+0x24c>
 8000b32:	eb1c 0303 	adds.w	r3, ip, r3
 8000b36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b3a:	d22c      	bcs.n	8000b96 <__udivmoddi4+0x29e>
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	d92a      	bls.n	8000b96 <__udivmoddi4+0x29e>
 8000b40:	3802      	subs	r0, #2
 8000b42:	4463      	add	r3, ip
 8000b44:	1a5b      	subs	r3, r3, r1
 8000b46:	b2a4      	uxth	r4, r4
 8000b48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000b50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b54:	fb01 f307 	mul.w	r3, r1, r7
 8000b58:	42a3      	cmp	r3, r4
 8000b5a:	d908      	bls.n	8000b6e <__udivmoddi4+0x276>
 8000b5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b64:	d213      	bcs.n	8000b8e <__udivmoddi4+0x296>
 8000b66:	42a3      	cmp	r3, r4
 8000b68:	d911      	bls.n	8000b8e <__udivmoddi4+0x296>
 8000b6a:	3902      	subs	r1, #2
 8000b6c:	4464      	add	r4, ip
 8000b6e:	1ae4      	subs	r4, r4, r3
 8000b70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b74:	e739      	b.n	80009ea <__udivmoddi4+0xf2>
 8000b76:	4604      	mov	r4, r0
 8000b78:	e6f0      	b.n	800095c <__udivmoddi4+0x64>
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e706      	b.n	800098c <__udivmoddi4+0x94>
 8000b7e:	45c8      	cmp	r8, r9
 8000b80:	d2ae      	bcs.n	8000ae0 <__udivmoddi4+0x1e8>
 8000b82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b8a:	3801      	subs	r0, #1
 8000b8c:	e7a8      	b.n	8000ae0 <__udivmoddi4+0x1e8>
 8000b8e:	4631      	mov	r1, r6
 8000b90:	e7ed      	b.n	8000b6e <__udivmoddi4+0x276>
 8000b92:	4603      	mov	r3, r0
 8000b94:	e799      	b.n	8000aca <__udivmoddi4+0x1d2>
 8000b96:	4630      	mov	r0, r6
 8000b98:	e7d4      	b.n	8000b44 <__udivmoddi4+0x24c>
 8000b9a:	46d6      	mov	lr, sl
 8000b9c:	e77f      	b.n	8000a9e <__udivmoddi4+0x1a6>
 8000b9e:	4463      	add	r3, ip
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	e74d      	b.n	8000a40 <__udivmoddi4+0x148>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	4623      	mov	r3, r4
 8000ba8:	4608      	mov	r0, r1
 8000baa:	e70f      	b.n	80009cc <__udivmoddi4+0xd4>
 8000bac:	3e02      	subs	r6, #2
 8000bae:	4463      	add	r3, ip
 8000bb0:	e730      	b.n	8000a14 <__udivmoddi4+0x11c>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_idiv0>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bc4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000bc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bd4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000bf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bf4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bfe:	4013      	ands	r3, r2
 8000c00:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000c10:	4b23      	ldr	r3, [pc, #140]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c12:	4a24      	ldr	r2, [pc, #144]	@ (8000ca4 <MX_ADC_Init+0x98>)
 8000c14:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c16:	4b22      	ldr	r3, [pc, #136]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c18:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000c1c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c32:	2204      	movs	r2, #4
 8000c34:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000c42:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000c48:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c56:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c6c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c70:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c7a:	2207      	movs	r2, #7
 8000c7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c8e:	f001 ffb5 	bl	8002bfc <HAL_ADC_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000c98:	f000 fc68 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200001b0 	.word	0x200001b0
 8000ca4:	40012400 	.word	0x40012400

08000ca8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <HAL_ADC_MspInit+0x24>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d103      	bne.n	8000cc2 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cbe:	f7ff ff7b 	bl	8000bb8 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40012400 	.word	0x40012400

08000cd0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a05      	ldr	r2, [pc, #20]	@ (8000cf4 <HAL_ADC_MspDeInit+0x24>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d103      	bne.n	8000cea <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000ce2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ce6:	f7ff ff7f 	bl	8000be8 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40012400 	.word	0x40012400

08000cf8 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <SYS_InitMeasurement+0x14>)
 8000cfe:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <SYS_InitMeasurement+0x18>)
 8000d00:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	200001b0 	.word	0x200001b0
 8000d10:	40012400 	.word	0x40012400

08000d14 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000d22:	f000 f869 	bl	8000df8 <SYS_GetBatteryLevel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000d2a:	482d      	ldr	r0, [pc, #180]	@ (8000de0 <SYS_GetTemperatureLevel+0xcc>)
 8000d2c:	f000 f898 	bl	8000e60 <ADC_ReadChannels>
 8000d30:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000d32:	4b2c      	ldr	r3, [pc, #176]	@ (8000de4 <SYS_GetTemperatureLevel+0xd0>)
 8000d34:	881a      	ldrh	r2, [r3, #0]
 8000d36:	4b2c      	ldr	r3, [pc, #176]	@ (8000de8 <SYS_GetTemperatureLevel+0xd4>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d026      	beq.n	8000d8c <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000d3e:	4b29      	ldr	r3, [pc, #164]	@ (8000de4 <SYS_GetTemperatureLevel+0xd0>)
 8000d40:	881a      	ldrh	r2, [r3, #0]
 8000d42:	4b29      	ldr	r3, [pc, #164]	@ (8000de8 <SYS_GetTemperatureLevel+0xd4>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d01c      	beq.n	8000d84 <SYS_GetTemperatureLevel+0x70>
 8000d4a:	887b      	ldrh	r3, [r7, #2]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	fb02 f303 	mul.w	r3, r2, r3
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	4a25      	ldr	r2, [pc, #148]	@ (8000dec <SYS_GetTemperatureLevel+0xd8>)
 8000d56:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b22      	ldr	r3, [pc, #136]	@ (8000de8 <SYS_GetTemperatureLevel+0xd4>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2264      	movs	r2, #100	@ 0x64
 8000d66:	fb03 f202 	mul.w	r2, r3, r2
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000de4 <SYS_GetTemperatureLevel+0xd0>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4b1d      	ldr	r3, [pc, #116]	@ (8000de8 <SYS_GetTemperatureLevel+0xd4>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	1acb      	subs	r3, r1, r3
 8000d76:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	331e      	adds	r3, #30
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	e001      	b.n	8000d88 <SYS_GetTemperatureLevel+0x74>
 8000d84:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000d88:	803b      	strh	r3, [r7, #0]
 8000d8a:	e01d      	b.n	8000dc8 <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000d8c:	887b      	ldrh	r3, [r7, #2]
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	fb03 f202 	mul.w	r2, r3, r2
 8000d94:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <SYS_GetTemperatureLevel+0xdc>)
 8000d96:	fba3 1302 	umull	r1, r3, r3, r2
 8000d9a:	1ad2      	subs	r2, r2, r3
 8000d9c:	0852      	lsrs	r2, r2, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	0adb      	lsrs	r3, r3, #11
 8000da2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000da6:	fb02 f303 	mul.w	r3, r2, r3
 8000daa:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 8000dae:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 8000db2:	4a10      	ldr	r2, [pc, #64]	@ (8000df4 <SYS_GetTemperatureLevel+0xe0>)
 8000db4:	fb82 1203 	smull	r1, r2, r2, r3
 8000db8:	1292      	asrs	r2, r2, #10
 8000dba:	17db      	asrs	r3, r3, #31
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	331e      	adds	r3, #30
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	b21b      	sxth	r3, r3
 8000dc6:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8000dc8:	883b      	ldrh	r3, [r7, #0]
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	b21b      	sxth	r3, r3
 8000dd0:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 8000dd2:	883b      	ldrh	r3, [r7, #0]
 8000dd4:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	b0001000 	.word	0xb0001000
 8000de4:	1fff75c8 	.word	0x1fff75c8
 8000de8:	1fff75a8 	.word	0x1fff75a8
 8000dec:	09ee009f 	.word	0x09ee009f
 8000df0:	00100101 	.word	0x00100101
 8000df4:	68db8bad 	.word	0x68db8bad

08000df8 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000e06:	4813      	ldr	r0, [pc, #76]	@ (8000e54 <SYS_GetBatteryLevel+0x5c>)
 8000e08:	f000 f82a 	bl	8000e60 <ADC_ReadChannels>
 8000e0c:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	80fb      	strh	r3, [r7, #6]
 8000e18:	e016      	b.n	8000e48 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <SYS_GetBatteryLevel+0x60>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d00b      	beq.n	8000e3e <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000e26:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <SYS_GetBatteryLevel+0x60>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8000e30:	fb03 f202 	mul.w	r2, r3, r2
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3a:	80fb      	strh	r3, [r7, #6]
 8000e3c:	e004      	b.n	8000e48 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000e3e:	4a07      	ldr	r2, [pc, #28]	@ (8000e5c <SYS_GetBatteryLevel+0x64>)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8000e48:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	b4002000 	.word	0xb4002000
 8000e58:	1fff75aa 	.word	0x1fff75aa
 8000e5c:	004c08d8 	.word	0x004c08d8

08000e60 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8000e78:	f7ff fec8 	bl	8000c0c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000e7c:	481a      	ldr	r0, [pc, #104]	@ (8000ee8 <ADC_ReadChannels+0x88>)
 8000e7e:	f002 fcdc 	bl	800383a <HAL_ADCEx_Calibration_Start>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8000e88:	f000 fb70 	bl	800156c <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e98:	f107 0308 	add.w	r3, r7, #8
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4812      	ldr	r0, [pc, #72]	@ (8000ee8 <ADC_ReadChannels+0x88>)
 8000ea0:	f002 f9e8 	bl	8003274 <HAL_ADC_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8000eaa:	f000 fb5f 	bl	800156c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000eae:	480e      	ldr	r0, [pc, #56]	@ (8000ee8 <ADC_ReadChannels+0x88>)
 8000eb0:	f002 f8c4 	bl	800303c <HAL_ADC_Start>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8000eba:	f000 fb57 	bl	800156c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec2:	4809      	ldr	r0, [pc, #36]	@ (8000ee8 <ADC_ReadChannels+0x88>)
 8000ec4:	f002 f932 	bl	800312c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000ec8:	4807      	ldr	r0, [pc, #28]	@ (8000ee8 <ADC_ReadChannels+0x88>)
 8000eca:	f002 f8fd 	bl	80030c8 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000ece:	4806      	ldr	r0, [pc, #24]	@ (8000ee8 <ADC_ReadChannels+0x88>)
 8000ed0:	f002 f9c3 	bl	800325a <HAL_ADC_GetValue>
 8000ed4:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8000ed6:	4804      	ldr	r0, [pc, #16]	@ (8000ee8 <ADC_ReadChannels+0x88>)
 8000ed8:	f002 f824 	bl	8002f24 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8000edc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200001b0 	.word	0x200001b0

08000eec <LL_AHB1_GRP1_EnableClock>:
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ef8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000efa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f10:	68fb      	ldr	r3, [r7, #12]
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f20:	2004      	movs	r0, #4
 8000f22:	f7ff ffe3 	bl	8000eec <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f26:	2001      	movs	r0, #1
 8000f28:	f7ff ffe0 	bl	8000eec <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2102      	movs	r1, #2
 8000f30:	200f      	movs	r0, #15
 8000f32:	f002 fe4a 	bl	8003bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f36:	200f      	movs	r0, #15
 8000f38:	f002 fe61 	bl	8003bfe <HAL_NVIC_EnableIRQ>

}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8000f4c:	23ff      	movs	r3, #255	@ 0xff
 8000f4e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000f56:	d311      	bcc.n	8000f7c <FLASH_IF_Write+0x3c>
 8000f58:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <FLASH_IF_Write+0x48>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	029a      	lsls	r2, r3, #10
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <FLASH_IF_Write+0x4c>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000f66:	3b01      	subs	r3, #1
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d306      	bcc.n	8000f7c <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f000 f85a 	bl	800102c <FLASH_IF_INT_Write>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8000f7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	1fff75e0 	.word	0x1fff75e0
 8000f8c:	03fffc00 	.word	0x03fffc00

08000f90 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8000f9c:	23ff      	movs	r3, #255	@ 0xff
 8000f9e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000fa6:	d311      	bcc.n	8000fcc <FLASH_IF_Read+0x3c>
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <FLASH_IF_Read+0x48>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	029a      	lsls	r2, r3, #10
 8000fae:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <FLASH_IF_Read+0x4c>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d306      	bcc.n	8000fcc <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f000 f93a 	bl	800123c <FLASH_IF_INT_Read>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8000fcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	1fff75e0 	.word	0x1fff75e0
 8000fdc:	03fffc00 	.word	0x03fffc00

08000fe0 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8000fea:	23ff      	movs	r3, #255	@ 0xff
 8000fec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000ff4:	d310      	bcc.n	8001018 <FLASH_IF_Erase+0x38>
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <FLASH_IF_Erase+0x44>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	029a      	lsls	r2, r3, #10
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <FLASH_IF_Erase+0x48>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001004:	3b01      	subs	r3, #1
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4293      	cmp	r3, r2
 800100a:	d305      	bcc.n	8001018 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 800100c:	6839      	ldr	r1, [r7, #0]
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f932 	bl	8001278 <FLASH_IF_INT_Erase>
 8001014:	4603      	mov	r3, r0
 8001016:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001018:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	1fff75e0 	.word	0x1fff75e0
 8001028:	03fffc00 	.word	0x03fffc00

0800102c <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b090      	sub	sp, #64	@ 0x40
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <FLASH_IF_INT_Write+0x3e>
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d009      	beq.n	800106a <FLASH_IF_INT_Write+0x3e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	2b00      	cmp	r3, #0
 800105e:	d104      	bne.n	800106a <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 800106a:	f06f 0305 	mvn.w	r3, #5
 800106e:	e0da      	b.n	8001226 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001070:	f000 f992 	bl	8001398 <FLASH_IF_INT_Clear_Error>
 8001074:	4603      	mov	r3, r0
 8001076:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 800107a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800107e:	2b00      	cmp	r3, #0
 8001080:	f040 80cf 	bne.w	8001222 <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001084:	f003 fa40 	bl	8004508 <HAL_FLASH_Unlock>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	f040 80c6 	bne.w	800121c <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001092:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001096:	4b66      	ldr	r3, [pc, #408]	@ (8001230 <FLASH_IF_INT_Write+0x204>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	0299      	lsls	r1, r3, #10
 800109c:	4b65      	ldr	r3, [pc, #404]	@ (8001234 <FLASH_IF_INT_Write+0x208>)
 800109e:	400b      	ands	r3, r1
 80010a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80010a4:	fb01 f303 	mul.w	r3, r1, r3
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	0adb      	lsrs	r3, r3, #11
 80010ac:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 80010ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4413      	add	r3, r2
 80010b4:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80010b8:	3b01      	subs	r3, #1
 80010ba:	4a5d      	ldr	r2, [pc, #372]	@ (8001230 <FLASH_IF_INT_Write+0x204>)
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	0291      	lsls	r1, r2, #10
 80010c0:	4a5c      	ldr	r2, [pc, #368]	@ (8001234 <FLASH_IF_INT_Write+0x208>)
 80010c2:	400a      	ands	r2, r1
 80010c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80010c8:	fb01 f202 	mul.w	r2, r1, r2
 80010cc:	1a9b      	subs	r3, r3, r2
 80010ce:	0ada      	lsrs	r2, r3, #11
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	3301      	adds	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d905      	bls.n	80010ea <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80010de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010e4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80010e8:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010ee:	e089      	b.n	8001204 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80010f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010f2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80010f6:	02db      	lsls	r3, r3, #11
 80010f8:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80010fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f000 f925 	bl	800134c <FLASH_IF_INT_IsEmpty>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d031      	beq.n	800116c <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001108:	4b4b      	ldr	r3, [pc, #300]	@ (8001238 <FLASH_IF_INT_Write+0x20c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d103      	bne.n	8001118 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 8001110:	23fa      	movs	r3, #250	@ 0xfa
 8001112:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001116:	e07e      	b.n	8001216 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001118:	4b47      	ldr	r3, [pc, #284]	@ (8001238 <FLASH_IF_INT_Write+0x20c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6939      	ldr	r1, [r7, #16]
 800111e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f88a 	bl	800123c <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001128:	4b43      	ldr	r3, [pc, #268]	@ (8001238 <FLASH_IF_INT_Write+0x20c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800112e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001132:	4413      	add	r3, r2
 8001134:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001138:	b292      	uxth	r2, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f019 fe26 	bl	801ad8c <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f896 	bl	8001278 <FLASH_IF_INT_Erase>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 8001152:	23fe      	movs	r3, #254	@ 0xfe
 8001154:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001158:	e05d      	b.n	8001216 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 800115e:	4b36      	ldr	r3, [pc, #216]	@ (8001238 <FLASH_IF_INT_Write+0x20c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001164:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001168:	61fb      	str	r3, [r7, #28]
 800116a:	e005      	b.n	8001178 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 800116c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 8001170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001172:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001176:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800117c:	e026      	b.n	80011cc <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 800117e:	6a3a      	ldr	r2, [r7, #32]
 8001180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001182:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800118a:	2001      	movs	r0, #1
 800118c:	f003 f978 	bl	8004480 <HAL_FLASH_Program>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d113      	bne.n	80011be <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001198:	e9d3 0100 	ldrd	r0, r1, [r3]
 800119c:	6a3a      	ldr	r2, [r7, #32]
 800119e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a0:	4413      	add	r3, r2
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	4299      	cmp	r1, r3
 80011a8:	bf08      	it	eq
 80011aa:	4290      	cmpeq	r0, r2
 80011ac:	d003      	beq.n	80011b6 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 80011ae:	23fc      	movs	r3, #252	@ 0xfc
 80011b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 80011b4:	e00e      	b.n	80011d4 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 80011b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b8:	3308      	adds	r3, #8
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80011bc:	e003      	b.n	80011c6 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 80011be:	23fc      	movs	r3, #252	@ 0xfc
 80011c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 80011c4:	e006      	b.n	80011d4 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80011c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c8:	3308      	adds	r3, #8
 80011ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d3d4      	bcc.n	800117e <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 80011d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d11b      	bne.n	8001214 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 80011dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011e0:	4413      	add	r3, r2
 80011e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 80011e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011e8:	4413      	add	r3, r2
 80011ea:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011f6:	bf28      	it	cs
 80011f8:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80011fc:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80011fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001200:	3301      	adds	r3, #1
 8001202:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	4413      	add	r3, r2
 800120a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800120c:	429a      	cmp	r2, r3
 800120e:	f4ff af6f 	bcc.w	80010f0 <FLASH_IF_INT_Write+0xc4>
 8001212:	e000      	b.n	8001216 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001214:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001216:	f003 f999 	bl	800454c <HAL_FLASH_Lock>
 800121a:	e002      	b.n	8001222 <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 800121c:	23fb      	movs	r3, #251	@ 0xfb
 800121e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001222:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8001226:	4618      	mov	r0, r3
 8001228:	3740      	adds	r7, #64	@ 0x40
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	1fff75e0 	.word	0x1fff75e0
 8001234:	03fffc00 	.word	0x03fffc00
 8001238:	20000214 	.word	0x20000214

0800123c <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <FLASH_IF_INT_Read+0x1c>
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001258:	f06f 0305 	mvn.w	r3, #5
 800125c:	e008      	b.n	8001270 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	b29b      	uxth	r3, r3
 8001262:	461a      	mov	r2, r3
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f019 fd90 	bl	801ad8c <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 800126c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001298:	f06f 0305 	mvn.w	r3, #5
 800129c:	e04e      	b.n	800133c <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800129e:	f000 f87b 	bl	8001398 <FLASH_IF_INT_Clear_Error>
 80012a2:	4603      	mov	r3, r0
 80012a4:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 80012a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d144      	bne.n	8001338 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80012ae:	f003 f92b 	bl	8004508 <HAL_FLASH_Unlock>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d13d      	bne.n	8001334 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80012b8:	2302      	movs	r3, #2
 80012ba:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 80012c2:	4b20      	ldr	r3, [pc, #128]	@ (8001344 <FLASH_IF_INT_Erase+0xcc>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	0299      	lsls	r1, r3, #10
 80012c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001348 <FLASH_IF_INT_Erase+0xd0>)
 80012ca:	400b      	ands	r3, r1
 80012cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80012d0:	fb01 f303 	mul.w	r3, r1, r3
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	0adb      	lsrs	r3, r3, #11
 80012d8:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80012e4:	3b01      	subs	r3, #1
 80012e6:	4a17      	ldr	r2, [pc, #92]	@ (8001344 <FLASH_IF_INT_Erase+0xcc>)
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	0291      	lsls	r1, r2, #10
 80012ec:	4a16      	ldr	r2, [pc, #88]	@ (8001348 <FLASH_IF_INT_Erase+0xd0>)
 80012ee:	400a      	ands	r2, r1
 80012f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80012f4:	fb01 f202 	mul.w	r2, r1, r2
 80012f8:	1a9b      	subs	r3, r3, r2
 80012fa:	0ada      	lsrs	r2, r3, #11
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	3301      	adds	r3, #1
 8001302:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001304:	f107 0214 	add.w	r2, r7, #20
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f003 f9fc 	bl	800470c <HAL_FLASHEx_Erase>
 8001314:	4603      	mov	r3, r0
 8001316:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001318:	7fbb      	ldrb	r3, [r7, #30]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d007      	beq.n	800132e <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800131e:	7fbb      	ldrb	r3, [r7, #30]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d101      	bne.n	8001328 <FLASH_IF_INT_Erase+0xb0>
 8001324:	2301      	movs	r3, #1
 8001326:	e001      	b.n	800132c <FLASH_IF_INT_Erase+0xb4>
 8001328:	f06f 0301 	mvn.w	r3, #1
 800132c:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 800132e:	f003 f90d 	bl	800454c <HAL_FLASH_Lock>
 8001332:	e001      	b.n	8001338 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001334:	23fb      	movs	r3, #251	@ 0xfb
 8001336:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001338:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	1fff75e0 	.word	0x1fff75e0
 8001348:	03fffc00 	.word	0x03fffc00

0800134c <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	e011      	b.n	8001384 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136a:	bf08      	it	eq
 800136c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001370:	d002      	beq.n	8001378 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001372:	2301      	movs	r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
      break;
 8001376:	e009      	b.n	800138c <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3308      	adds	r3, #8
 800137c:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	3308      	adds	r3, #8
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d3e9      	bcc.n	8001360 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 800138c:	68fb      	ldr	r3, [r7, #12]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 800139e:	23fb      	movs	r3, #251	@ 0xfb
 80013a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80013a2:	f003 f8b1 	bl	8004508 <HAL_FLASH_Unlock>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d110      	bne.n	80013ce <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <FLASH_IF_INT_Clear_Error+0x44>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <FLASH_IF_INT_Clear_Error+0x44>)
 80013b2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <FLASH_IF_INT_Clear_Error+0x44>)
 80013ba:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 80013be:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 80013c0:	f003 f8c4 	bl	800454c <HAL_FLASH_Lock>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	58004000 	.word	0x58004000

080013e0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80013e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013f0:	f023 0218 	bic.w	r2, r3, #24
 80013f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <LL_AHB2_GRP1_EnableClock>:
{
 800140a:	b480      	push	{r7}
 800140c:	b085      	sub	sp, #20
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001416:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001418:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4313      	orrs	r3, r2
 8001420:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4013      	ands	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143e:	f001 f9a3 	bl	8002788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001442:	f000 f80e 	bl	8001462 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 8001446:	f008 faeb 	bl	8009a20 <MX_LoRaWAN_Init>
  GPIO_Input_Init();
 800144a:	f000 f852 	bl	80014f2 <GPIO_Input_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 800144e:	f008 faef 	bl	8009a30 <MX_LoRaWAN_Process>
    Check_GPIO_Input();
 8001452:	f000 f86d 	bl	8001530 <Check_GPIO_Input>
    // Pequeno delay
    HAL_Delay(1000);
 8001456:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800145a:	f000 fbcd 	bl	8001bf8 <HAL_Delay>
    MX_LoRaWAN_Process();
 800145e:	bf00      	nop
 8001460:	e7f5      	b.n	800144e <main+0x14>

08001462 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b09a      	sub	sp, #104	@ 0x68
 8001466:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	2248      	movs	r2, #72	@ 0x48
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f01b f9c5 	bl	801c800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
 8001484:	615a      	str	r2, [r3, #20]
 8001486:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001488:	f003 fc7c 	bl	8004d84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff ffa7 	bl	80013e0 <LL_RCC_LSE_SetDriveCapability>
  */
  //HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001492:	2324      	movs	r3, #36	@ 0x24
 8001494:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001496:	2381      	movs	r3, #129	@ 0x81
 8001498:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800149a:	2301      	movs	r3, #1
 800149c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800149e:	2300      	movs	r3, #0
 80014a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80014a2:	23b0      	movs	r3, #176	@ 0xb0
 80014a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014aa:	f107 0320 	add.w	r3, r7, #32
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 ffdc 	bl	800546c <HAL_RCC_OscConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80014ba:	f000 f857 	bl	800156c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 e PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80014be:	234f      	movs	r3, #79	@ 0x4f
 80014c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2102      	movs	r1, #2
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 fb48 	bl	8005b70 <HAL_RCC_ClockConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0x88>
  {
    Error_Handler();
 80014e6:	f000 f841 	bl	800156c <Error_Handler>
  }
}
 80014ea:	bf00      	nop
 80014ec:	3768      	adds	r7, #104	@ 0x68
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <GPIO_Input_Init>:

/* USER CODE BEGIN 4 */
void GPIO_Input_Init(void) {
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
    // Estrutura de inicialização do GPIO
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

    // Ativa o clock para o GPIO
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2001      	movs	r0, #1
 8001508:	f7ff ff7f 	bl	800140a <LL_AHB2_GRP1_EnableClock>

    // Configura PA11 como entrada
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800150c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001510:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001522:	f003 f9c7 	bl	80048b4 <HAL_GPIO_Init>
}
 8001526:	bf00      	nop
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <Check_GPIO_Input>:

void Check_GPIO_Input(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
    // Lê o estado do pino PA11
    GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 8001536:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800153a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800153e:	f003 fbe7 	bl	8004d10 <HAL_GPIO_ReadPin>
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]

    // Processa o estado do pino
    if (pinState == GPIO_PIN_SET) {
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d103      	bne.n	8001554 <Check_GPIO_Input+0x24>
        // O pino está em nível alto
        printf("PA11 está em nível alto.\n");
 800154c:	4805      	ldr	r0, [pc, #20]	@ (8001564 <Check_GPIO_Input+0x34>)
 800154e:	f01b f877 	bl	801c640 <puts>
    } else {
        // O pino está em nível baixo
        printf("PA11 está em nível baixo.\n");
    }
}
 8001552:	e002      	b.n	800155a <Check_GPIO_Input+0x2a>
        printf("PA11 está em nível baixo.\n");
 8001554:	4804      	ldr	r0, [pc, #16]	@ (8001568 <Check_GPIO_Input+0x38>)
 8001556:	f01b f873 	bl	801c640 <puts>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	0801cd78 	.word	0x0801cd78
 8001568:	0801cd94 	.word	0x0801cd94

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <Error_Handler+0x8>

08001578 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001584:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001588:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800158c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <LL_APB1_GRP1_EnableClock>:
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80015a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80015a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80015b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015bc:	68fb      	ldr	r3, [r7, #12]
}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08c      	sub	sp, #48	@ 0x30
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	222c      	movs	r2, #44	@ 0x2c
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f01b f913 	bl	801c800 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015da:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <MX_RTC_Init+0x9c>)
 80015dc:	4a22      	ldr	r2, [pc, #136]	@ (8001668 <MX_RTC_Init+0xa0>)
 80015de:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80015e0:	4b20      	ldr	r3, [pc, #128]	@ (8001664 <MX_RTC_Init+0x9c>)
 80015e2:	221f      	movs	r2, #31
 80015e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <MX_RTC_Init+0x9c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <MX_RTC_Init+0x9c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <MX_RTC_Init+0x9c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <MX_RTC_Init+0x9c>)
 80015fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015fe:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001600:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <MX_RTC_Init+0x9c>)
 8001602:	2200      	movs	r2, #0
 8001604:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001606:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <MX_RTC_Init+0x9c>)
 8001608:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800160c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800160e:	4815      	ldr	r0, [pc, #84]	@ (8001664 <MX_RTC_Init+0x9c>)
 8001610:	f004 ff88 	bl	8006524 <HAL_RTC_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800161a:	f7ff ffa7 	bl	800156c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800161e:	4811      	ldr	r0, [pc, #68]	@ (8001664 <MX_RTC_Init+0x9c>)
 8001620:	f005 fa7e 	bl	8006b20 <HAL_RTCEx_SetSSRU_IT>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800162a:	f7ff ff9f 	bl	800156c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800163a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800163e:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001640:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	@ (8001664 <MX_RTC_Init+0x9c>)
 800164e:	f004 ffeb 	bl	8006628 <HAL_RTC_SetAlarm_IT>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001658:	f7ff ff88 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	3730      	adds	r7, #48	@ 0x30
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000218 	.word	0x20000218
 8001668:	40002800 	.word	0x40002800

0800166c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b090      	sub	sp, #64	@ 0x40
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	2238      	movs	r2, #56	@ 0x38
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f01b f8bf 	bl	801c800 <memset>
  if(rtcHandle->Instance==RTC)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a16      	ldr	r2, [pc, #88]	@ (80016e0 <HAL_RTC_MspInit+0x74>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d125      	bne.n	80016d8 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800168c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001690:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001692:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001696:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	4618      	mov	r0, r3
 800169e:	f004 fe27 	bl	80062f0 <HAL_RCCEx_PeriphCLKConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80016a8:	f7ff ff60 	bl	800156c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016ac:	f7ff ff64 	bl	8001578 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80016b0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80016b4:	f7ff ff70 	bl	8001598 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	2002      	movs	r0, #2
 80016be:	f002 fa84 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80016c2:	2002      	movs	r0, #2
 80016c4:	f002 fa9b 	bl	8003bfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	202a      	movs	r0, #42	@ 0x2a
 80016ce:	f002 fa7c 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80016d2:	202a      	movs	r0, #42	@ 0x2a
 80016d4:	f002 fa93 	bl	8003bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80016d8:	bf00      	nop
 80016da:	3740      	adds	r7, #64	@ 0x40
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40002800 	.word	0x40002800

080016e4 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	58000400 	.word	0x58000400

080016fc <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001718:	f001 f8a2 	bl	8002860 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 800171c:	f7ff ffe2 	bl	80016e4 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001720:	2001      	movs	r0, #1
 8001722:	f003 fbc1 	bl	8004ea8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}

0800172a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800172e:	f001 f8a5 	bl	800287c <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001732:	f000 ff7f 	bl	8002634 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}

0800173a <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800173e:	f001 f88f 	bl	8002860 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001742:	2101      	movs	r1, #1
 8001744:	2000      	movs	r0, #0
 8001746:	f003 fb2b 	bl	8004da0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}

0800174e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001752:	f001 f893 	bl	800287c <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800176a:	bf00      	nop
 800176c:	e7fd      	b.n	800176a <NMI_Handler+0x4>

0800176e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001772:	bf00      	nop
 8001774:	e7fd      	b.n	8001772 <HardFault_Handler+0x4>

08001776 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177a:	bf00      	nop
 800177c:	e7fd      	b.n	800177a <MemManage_Handler+0x4>

0800177e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001782:	bf00      	nop
 8001784:	e7fd      	b.n	8001782 <BusFault_Handler+0x4>

08001786 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178a:	bf00      	nop
 800178c:	e7fd      	b.n	800178a <UsageFault_Handler+0x4>

0800178e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b6:	f001 f841 	bl	800283c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80017c6:	f005 f9e7 	bl	8006b98 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000218 	.word	0x20000218

080017d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80017d8:	2001      	movs	r0, #1
 80017da:	f003 fab1 	bl	8004d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 80017e6:	2002      	movs	r0, #2
 80017e8:	f003 faaa 	bl	8004d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <DMA1_Channel5_IRQHandler+0x10>)
 80017f6:	f002 fca5 	bl	8004144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000300 	.word	0x20000300

08001804 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <USART2_IRQHandler+0x10>)
 800180a:	f006 f80f 	bl	800782c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000026c 	.word	0x2000026c

08001818 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <RTC_Alarm_IRQHandler+0x10>)
 800181e:	f005 f86b 	bl	80068f8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000218 	.word	0x20000218

0800182c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001832:	f005 fd1f 	bl	8007274 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000250 	.word	0x20000250

08001840 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800184c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800184e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4313      	orrs	r3, r2
 8001856:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800185c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001864:	68fb      	ldr	r3, [r7, #12]
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <MX_SUBGHZ_Init+0x20>)
 8001876:	2208      	movs	r2, #8
 8001878:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	@ (8001890 <MX_SUBGHZ_Init+0x20>)
 800187c:	f005 fa78 	bl	8006d70 <HAL_SUBGHZ_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001886:	f7ff fe71 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000250 	.word	0x20000250

08001894 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff ffcf 	bl	8001840 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	2032      	movs	r0, #50	@ 0x32
 80018a8:	f002 f98f 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80018ac:	2032      	movs	r0, #50	@ 0x32
 80018ae:	f002 f9a6 	bl	8003bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <LL_RCC_SetClkAfterWakeFromStop>:
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80018c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80018cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80018e4:	4b02      	ldr	r3, [pc, #8]	@ (80018f0 <LL_FLASH_GetUDN+0x10>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	1fff7580 	.word	0x1fff7580

080018f4 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80018f8:	4b03      	ldr	r3, [pc, #12]	@ (8001908 <LL_FLASH_GetDeviceID+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	b2db      	uxtb	r3, r3
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	1fff7584 	.word	0x1fff7584

0800190c <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001910:	4b03      	ldr	r3, [pc, #12]	@ (8001920 <LL_FLASH_GetSTCompanyID+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	0a1b      	lsrs	r3, r3, #8
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	1fff7584 	.word	0x1fff7584

08001924 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff ffc6 	bl	80018ba <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800192e:	f019 ffb9 	bl	801b8a4 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <SystemApp_Init+0x48>)
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001938:	f000 f96a 	bl	8001c10 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 800193c:	f01a fa42 	bl	801bdc4 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001940:	480b      	ldr	r0, [pc, #44]	@ (8001970 <SystemApp_Init+0x4c>)
 8001942:	f01a faed 	bl	801bf20 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001946:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <SystemApp_Init+0x50>)
 8001948:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800194c:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800194e:	2002      	movs	r0, #2
 8001950:	f01a faf4 	bl	801bf3c <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001954:	f7ff f9d0 	bl	8000cf8 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001958:	f000 f996 	bl	8001c88 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 800195c:	f019 f970 	bl	801ac40 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001960:	2101      	movs	r1, #1
 8001962:	2001      	movs	r0, #1
 8001964:	f019 f9ac 	bl	801acc0 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	2000025c 	.word	0x2000025c
 8001970:	08001b45 	.word	0x08001b45
 8001974:	58004000 	.word	0x58004000

08001978 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 800197c:	f019 f9d0 	bl	801ad20 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800198e:	f7ff fa33 	bl	8000df8 <SYS_GetBatteryLevel>
 8001992:	4603      	mov	r3, r0
 8001994:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001996:	88bb      	ldrh	r3, [r7, #4]
 8001998:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800199c:	4293      	cmp	r3, r2
 800199e:	d902      	bls.n	80019a6 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80019a0:	23fe      	movs	r3, #254	@ 0xfe
 80019a2:	71fb      	strb	r3, [r7, #7]
 80019a4:	e014      	b.n	80019d0 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80019a6:	88bb      	ldrh	r3, [r7, #4]
 80019a8:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80019ac:	d202      	bcs.n	80019b4 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	71fb      	strb	r3, [r7, #7]
 80019b2:	e00d      	b.n	80019d0 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80019b4:	88bb      	ldrh	r3, [r7, #4]
 80019b6:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 80019ba:	461a      	mov	r2, r3
 80019bc:	4613      	mov	r3, r2
 80019be:	01db      	lsls	r3, r3, #7
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <GetBatteryLevel+0x58>)
 80019c8:	fba3 2302 	umull	r2, r3, r3, r2
 80019cc:	09db      	lsrs	r3, r3, #7
 80019ce:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80019d0:	79fb      	ldrb	r3, [r7, #7]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	1b4e81b5 	.word	0x1b4e81b5

080019e0 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f919 	bl	8001c24 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe ff41 	bl	800087c <__aeabi_f2iz>
 80019fa:	4603      	mov	r3, r0
 80019fc:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80019fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3720      	adds	r7, #32
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001a0a:	b590      	push	{r4, r7, lr}
 8001a0c:	b087      	sub	sp, #28
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001a16:	f7ff ff63 	bl	80018e0 <LL_FLASH_GetUDN>
 8001a1a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a22:	d138      	bne.n	8001a96 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001a24:	f000 ff38 	bl	8002898 <HAL_GetUIDw0>
 8001a28:	4604      	mov	r4, r0
 8001a2a:	f000 ff49 	bl	80028c0 <HAL_GetUIDw2>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4423      	add	r3, r4
 8001a32:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001a34:	f000 ff3a 	bl	80028ac <HAL_GetUIDw1>
 8001a38:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	0e1a      	lsrs	r2, r3, #24
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3307      	adds	r3, #7
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	0c1a      	lsrs	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3306      	adds	r3, #6
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	0a1a      	lsrs	r2, r3, #8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3305      	adds	r3, #5
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3304      	adds	r3, #4
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	0e1a      	lsrs	r2, r3, #24
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3303      	adds	r3, #3
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	0c1a      	lsrs	r2, r3, #16
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	0a1a      	lsrs	r2, r3, #8
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3301      	adds	r3, #1
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001a94:	e031      	b.n	8001afa <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3307      	adds	r3, #7
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	0a1a      	lsrs	r2, r3, #8
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3306      	adds	r3, #6
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	0c1a      	lsrs	r2, r3, #16
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3305      	adds	r3, #5
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	0e1a      	lsrs	r2, r3, #24
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001ac4:	f7ff ff16 	bl	80018f4 <LL_FLASH_GetDeviceID>
 8001ac8:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3303      	adds	r3, #3
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001ad4:	f7ff ff1a 	bl	800190c <LL_FLASH_GetSTCompanyID>
 8001ad8:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3302      	adds	r3, #2
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	0a1a      	lsrs	r2, r3, #8
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3301      	adds	r3, #1
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	0c1b      	lsrs	r3, r3, #16
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	701a      	strb	r2, [r3, #0]
}
 8001afa:	bf00      	nop
 8001afc:	371c      	adds	r7, #28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd90      	pop	{r4, r7, pc}

08001b02 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8001b02:	b590      	push	{r4, r7, lr}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8001b0a:	f7ff fee9 	bl	80018e0 <LL_FLASH_GetUDN>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d10d      	bne.n	8001b3a <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001b1e:	f000 febb 	bl	8002898 <HAL_GetUIDw0>
 8001b22:	4604      	mov	r4, r0
 8001b24:	f000 fec2 	bl	80028ac <HAL_GetUIDw1>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	405c      	eors	r4, r3
 8001b2c:	f000 fec8 	bl	80028c0 <HAL_GetUIDw2>
 8001b30:	4603      	mov	r3, r0
 8001b32:	ea84 0203 	eor.w	r2, r4, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd90      	pop	{r4, r7, pc}
	...

08001b44 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	4618      	mov	r0, r3
 8001b54:	f019 f9f4 	bl	801af40 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b5e:	9200      	str	r2, [sp, #0]
 8001b60:	4a07      	ldr	r2, [pc, #28]	@ (8001b80 <TimestampNow+0x3c>)
 8001b62:	2110      	movs	r1, #16
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f81d 	bl	8001ba4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7fe fb04 	bl	8000178 <strlen>
 8001b70:	4603      	mov	r3, r0
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	0801cdfc 	.word	0x0801cdfc

08001b84 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001b88:	2101      	movs	r1, #1
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	f019 f868 	bl	801ac60 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	f019 f860 	bl	801ac60 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001ba4:	b40c      	push	{r2, r3}
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001bb6:	6839      	ldr	r1, [r7, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f019 fb91 	bl	801b2e4 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bcc:	b002      	add	sp, #8
 8001bce:	4770      	bx	lr

08001bd0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001bda:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <HAL_GetTick+0x24>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001be2:	f000 f9bd 	bl	8001f60 <TIMER_IF_GetTimerValue>
 8001be6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001be8:	687b      	ldr	r3, [r7, #4]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000025c 	.word	0x2000025c

08001bf8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fa33 	bl	800206e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001c14:	f000 fe5e 	bl	80028d4 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001c18:	f000 fe62 	bl	80028e0 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001c1c:	f000 fe66 	bl	80028ec <HAL_DBGMCU_DisableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <EnvSensors_Read+0x50>)
 8001c2e:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001c30:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <EnvSensors_Read+0x54>)
 8001c32:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001c34:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <EnvSensors_Read+0x58>)
 8001c36:	60fb      	str	r3, [r7, #12]
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001c38:	f7ff f86c 	bl	8000d14 <SYS_GetTemperatureLevel>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	121b      	asrs	r3, r3, #8
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fdc6 	bl	80007d4 <__aeabi_i2f>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	613b      	str	r3, [r7, #16]
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a07      	ldr	r2, [pc, #28]	@ (8001c80 <EnvSensors_Read+0x5c>)
 8001c62:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a07      	ldr	r2, [pc, #28]	@ (8001c84 <EnvSensors_Read+0x60>)
 8001c68:	611a      	str	r2, [r3, #16]

  return 0;
 8001c6a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	42480000 	.word	0x42480000
 8001c78:	41900000 	.word	0x41900000
 8001c7c:	447a0000 	.word	0x447a0000
 8001c80:	003e090d 	.word	0x003e090d
 8001c84:	000503ab 	.word	0x000503ab

08001c88 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
 8001c92:	687b      	ldr	r3, [r7, #4]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	e00a      	b.n	8001cc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cb0:	f3af 8000 	nop.w
 8001cb4:	4601      	mov	r1, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	60ba      	str	r2, [r7, #8]
 8001cbc:	b2ca      	uxtb	r2, r1
 8001cbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	dbf0      	blt.n	8001cb0 <_read+0x12>
  }

  return len;
 8001cce:	687b      	ldr	r3, [r7, #4]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	e009      	b.n	8001cfe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	60ba      	str	r2, [r7, #8]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	dbf1      	blt.n	8001cea <_write+0x12>
  }
  return len;
 8001d06:	687b      	ldr	r3, [r7, #4]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_close>:

int _close(int file)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d36:	605a      	str	r2, [r3, #4]
  return 0;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <_isatty>:

int _isatty(int file)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d4c:	2301      	movs	r3, #1
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d78:	4a14      	ldr	r2, [pc, #80]	@ (8001dcc <_sbrk+0x5c>)
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <_sbrk+0x60>)
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d84:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <_sbrk+0x64>)
 8001d8e:	4a12      	ldr	r2, [pc, #72]	@ (8001dd8 <_sbrk+0x68>)
 8001d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d92:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d207      	bcs.n	8001db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da0:	f01a fd7c 	bl	801c89c <__errno>
 8001da4:	4603      	mov	r3, r0
 8001da6:	220c      	movs	r2, #12
 8001da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	e009      	b.n	8001dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db0:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001db6:	4b07      	ldr	r3, [pc, #28]	@ (8001dd4 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	4a05      	ldr	r2, [pc, #20]	@ (8001dd4 <_sbrk+0x64>)
 8001dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20010000 	.word	0x20010000
 8001dd0:	00000800 	.word	0x00000800
 8001dd4:	20000260 	.word	0x20000260
 8001dd8:	20001c70 	.word	0x20001c70

08001ddc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
	...

08001e00 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001e0a:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <TIMER_IF_Init+0x5c>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	f083 0301 	eor.w	r3, r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01b      	beq.n	8001e50 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <TIMER_IF_Init+0x60>)
 8001e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1e:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001e20:	f7ff fbd2 	bl	80015c8 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001e24:	f000 f856 	bl	8001ed4 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001e28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e2c:	480c      	ldr	r0, [pc, #48]	@ (8001e60 <TIMER_IF_Init+0x60>)
 8001e2e:	f004 fd07 	bl	8006840 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <TIMER_IF_Init+0x60>)
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001e3a:	4809      	ldr	r0, [pc, #36]	@ (8001e60 <TIMER_IF_Init+0x60>)
 8001e3c:	f004 fe3e 	bl	8006abc <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001e40:	2000      	movs	r0, #0
 8001e42:	f000 f9d3 	bl	80021ec <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001e46:	f000 f85f 	bl	8001f08 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001e4a:	4b04      	ldr	r3, [pc, #16]	@ (8001e5c <TIMER_IF_Init+0x5c>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001e50:	79fb      	ldrb	r3, [r7, #7]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000264 	.word	0x20000264
 8001e60:	20000218 	.word	0x20000218

08001e64 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08e      	sub	sp, #56	@ 0x38
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001e72:	f107 0308 	add.w	r3, r7, #8
 8001e76:	222c      	movs	r2, #44	@ 0x2c
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f01a fcc0 	bl	801c800 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001e80:	f000 f828 	bl	8001ed4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001e84:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <TIMER_IF_StartTimer+0x68>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001e9c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001ea0:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001ea2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ea6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ea8:	f107 0308 	add.w	r3, r7, #8
 8001eac:	2201      	movs	r2, #1
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4807      	ldr	r0, [pc, #28]	@ (8001ed0 <TIMER_IF_StartTimer+0x6c>)
 8001eb2:	f004 fbb9 	bl	8006628 <HAL_RTC_SetAlarm_IT>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001ebc:	f7ff fb56 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3738      	adds	r7, #56	@ 0x38
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000268 	.word	0x20000268
 8001ed0:	20000218 	.word	0x20000218

08001ed4 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001ede:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <TIMER_IF_StopTimer+0x2c>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ee4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ee8:	4806      	ldr	r0, [pc, #24]	@ (8001f04 <TIMER_IF_StopTimer+0x30>)
 8001eea:	f004 fca9 	bl	8006840 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001eee:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <TIMER_IF_StopTimer+0x30>)
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40002800 	.word	0x40002800
 8001f04:	20000218 	.word	0x20000218

08001f08 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001f0c:	f000 f98e 	bl	800222c <GetTimerTicks>
 8001f10:	4603      	mov	r3, r0
 8001f12:	4a03      	ldr	r2, [pc, #12]	@ (8001f20 <TIMER_IF_SetTimerContext+0x18>)
 8001f14:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001f16:	4b02      	ldr	r3, [pc, #8]	@ (8001f20 <TIMER_IF_SetTimerContext+0x18>)
 8001f18:	681b      	ldr	r3, [r3, #0]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000268 	.word	0x20000268

08001f24 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001f28:	4b02      	ldr	r3, [pc, #8]	@ (8001f34 <TIMER_IF_GetTimerContext+0x10>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	20000268 	.word	0x20000268

08001f38 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001f42:	f000 f973 	bl	800222c <GetTimerTicks>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001f50:	687b      	ldr	r3, [r7, #4]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000268 	.word	0x20000268

08001f60 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <TIMER_IF_GetTimerValue+0x24>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001f72:	f000 f95b 	bl	800222c <GetTimerTicks>
 8001f76:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001f78:	687b      	ldr	r3, [r7, #4]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000264 	.word	0x20000264

08001f88 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001f92:	2303      	movs	r3, #3
 8001f94:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001f96:	687b      	ldr	r3, [r7, #4]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001fa2:	b5b0      	push	{r4, r5, r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001faa:	2100      	movs	r1, #0
 8001fac:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	460a      	mov	r2, r1
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	0d95      	lsrs	r5, r2, #22
 8001fb8:	0294      	lsls	r4, r2, #10
 8001fba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	f7fe fc7f 	bl	80008c8 <__aeabi_uldivmod>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4613      	mov	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bdb0      	pop	{r4, r5, r7, pc}

08001fdc <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001fdc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001fe0:	b085      	sub	sp, #20
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	2000      	movs	r0, #0
 8001fee:	460c      	mov	r4, r1
 8001ff0:	4605      	mov	r5, r0
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	4629      	mov	r1, r5
 8001ff6:	f04f 0a00 	mov.w	sl, #0
 8001ffa:	f04f 0b00 	mov.w	fp, #0
 8001ffe:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002002:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002006:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800200a:	4650      	mov	r0, sl
 800200c:	4659      	mov	r1, fp
 800200e:	1b02      	subs	r2, r0, r4
 8002010:	eb61 0305 	sbc.w	r3, r1, r5
 8002014:	f04f 0000 	mov.w	r0, #0
 8002018:	f04f 0100 	mov.w	r1, #0
 800201c:	0099      	lsls	r1, r3, #2
 800201e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002022:	0090      	lsls	r0, r2, #2
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	eb12 0804 	adds.w	r8, r2, r4
 800202c:	eb43 0905 	adc.w	r9, r3, r5
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800203c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002040:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002044:	4690      	mov	r8, r2
 8002046:	4699      	mov	r9, r3
 8002048:	4640      	mov	r0, r8
 800204a:	4649      	mov	r1, r9
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	0a82      	lsrs	r2, r0, #10
 8002056:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800205a:	0a8b      	lsrs	r3, r1, #10
 800205c:	4613      	mov	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002060:	68fb      	ldr	r3, [r7, #12]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800206c:	4770      	bx	lr

0800206e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ff93 	bl	8001fa2 <TIMER_IF_Convert_ms2Tick>
 800207c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800207e:	f000 f8d5 	bl	800222c <GetTimerTicks>
 8002082:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002084:	e000      	b.n	8002088 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002086:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002088:	f000 f8d0 	bl	800222c <GetTimerTicks>
 800208c:	4602      	mov	r2, r0
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	429a      	cmp	r2, r3
 8002096:	d8f6      	bhi.n	8002086 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002098:	bf00      	nop
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80020aa:	f019 fd49 	bl	801bb40 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80020be:	f000 f8a5 	bl	800220c <TIMER_IF_BkUp_Read_MSBticks>
 80020c2:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3301      	adds	r3, #1
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 f88f 	bl	80021ec <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80020d6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020da:	b08c      	sub	sp, #48	@ 0x30
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80020e4:	f000 f8a2 	bl	800222c <GetTimerTicks>
 80020e8:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80020ea:	f000 f88f 	bl	800220c <TIMER_IF_BkUp_Read_MSBticks>
 80020ee:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80020f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f2:	2200      	movs	r2, #0
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	60fa      	str	r2, [r7, #12]
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	000b      	movs	r3, r1
 8002104:	2200      	movs	r2, #0
 8002106:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002108:	2000      	movs	r0, #0
 800210a:	460c      	mov	r4, r1
 800210c:	4605      	mov	r5, r0
 800210e:	eb12 0804 	adds.w	r8, r2, r4
 8002112:	eb43 0905 	adc.w	r9, r3, r5
 8002116:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800211a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	0a82      	lsrs	r2, r0, #10
 8002128:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800212c:	0a8b      	lsrs	r3, r1, #10
 800212e:	4613      	mov	r3, r2
 8002130:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2200      	movs	r2, #0
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002140:	f04f 0b00 	mov.w	fp, #0
 8002144:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff ff46 	bl	8001fdc <TIMER_IF_Convert_Tick2ms>
 8002150:	4603      	mov	r3, r0
 8002152:	b29a      	uxth	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800215a:	4618      	mov	r0, r3
 800215c:	3730      	adds	r7, #48	@ 0x30
 800215e:	46bd      	mov	sp, r7
 8002160:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002164 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	2100      	movs	r1, #0
 8002170:	4803      	ldr	r0, [pc, #12]	@ (8002180 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002172:	f004 fd35 	bl	8006be0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000218 	.word	0x20000218

08002184 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	2101      	movs	r1, #1
 8002190:	4803      	ldr	r0, [pc, #12]	@ (80021a0 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002192:	f004 fd25 	bl	8006be0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000218 	.word	0x20000218

080021a4 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80021ae:	2100      	movs	r1, #0
 80021b0:	4804      	ldr	r0, [pc, #16]	@ (80021c4 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80021b2:	f004 fd2d 	bl	8006c10 <HAL_RTCEx_BKUPRead>
 80021b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80021b8:	687b      	ldr	r3, [r7, #4]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000218 	.word	0x20000218

080021c8 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80021d2:	2101      	movs	r1, #1
 80021d4:	4804      	ldr	r0, [pc, #16]	@ (80021e8 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80021d6:	f004 fd1b 	bl	8006c10 <HAL_RTCEx_BKUPRead>
 80021da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80021dc:	687b      	ldr	r3, [r7, #4]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000218 	.word	0x20000218

080021ec <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	2102      	movs	r1, #2
 80021f8:	4803      	ldr	r0, [pc, #12]	@ (8002208 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80021fa:	f004 fcf1 	bl	8006be0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000218 	.word	0x20000218

0800220c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002212:	2102      	movs	r1, #2
 8002214:	4804      	ldr	r0, [pc, #16]	@ (8002228 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002216:	f004 fcfb 	bl	8006c10 <HAL_RTCEx_BKUPRead>
 800221a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 800221c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000218 	.word	0x20000218

0800222c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002232:	480b      	ldr	r0, [pc, #44]	@ (8002260 <GetTimerTicks+0x34>)
 8002234:	f7ff fdd8 	bl	8001de8 <LL_RTC_TIME_GetSubSecond>
 8002238:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800223a:	e003      	b.n	8002244 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800223c:	4808      	ldr	r0, [pc, #32]	@ (8002260 <GetTimerTicks+0x34>)
 800223e:	f7ff fdd3 	bl	8001de8 <LL_RTC_TIME_GetSubSecond>
 8002242:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002244:	4806      	ldr	r0, [pc, #24]	@ (8002260 <GetTimerTicks+0x34>)
 8002246:	f7ff fdcf 	bl	8001de8 <LL_RTC_TIME_GetSubSecond>
 800224a:	4602      	mov	r2, r0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4293      	cmp	r3, r2
 8002250:	d1f4      	bne.n	800223c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40002800 	.word	0x40002800

08002264 <LL_AHB2_GRP1_EnableClock>:
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800226c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002270:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002272:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4313      	orrs	r3, r2
 800227a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800227c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002280:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4013      	ands	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002288:	68fb      	ldr	r3, [r7, #12]
}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <LL_APB1_GRP1_EnableClock>:
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800229c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80022a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4013      	ands	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022b8:	68fb      	ldr	r3, [r7, #12]
}
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <LL_APB1_GRP1_DisableClock>:
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80022cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022da:	4013      	ands	r3, r2
 80022dc:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022ec:	4b22      	ldr	r3, [pc, #136]	@ (8002378 <MX_USART2_UART_Init+0x90>)
 80022ee:	4a23      	ldr	r2, [pc, #140]	@ (800237c <MX_USART2_UART_Init+0x94>)
 80022f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = USART_BAUDRATE;
 80022f2:	4b21      	ldr	r3, [pc, #132]	@ (8002378 <MX_USART2_UART_Init+0x90>)
 80022f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002378 <MX_USART2_UART_Init+0x90>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002300:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <MX_USART2_UART_Init+0x90>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002306:	4b1c      	ldr	r3, [pc, #112]	@ (8002378 <MX_USART2_UART_Init+0x90>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800230c:	4b1a      	ldr	r3, [pc, #104]	@ (8002378 <MX_USART2_UART_Init+0x90>)
 800230e:	220c      	movs	r2, #12
 8002310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002312:	4b19      	ldr	r3, [pc, #100]	@ (8002378 <MX_USART2_UART_Init+0x90>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002318:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <MX_USART2_UART_Init+0x90>)
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800231e:	4b16      	ldr	r3, [pc, #88]	@ (8002378 <MX_USART2_UART_Init+0x90>)
 8002320:	2200      	movs	r2, #0
 8002322:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002324:	4b14      	ldr	r3, [pc, #80]	@ (8002378 <MX_USART2_UART_Init+0x90>)
 8002326:	2200      	movs	r2, #0
 8002328:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800232a:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <MX_USART2_UART_Init+0x90>)
 800232c:	2200      	movs	r2, #0
 800232e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002330:	4811      	ldr	r0, [pc, #68]	@ (8002378 <MX_USART2_UART_Init+0x90>)
 8002332:	f005 f95e 	bl	80075f2 <HAL_UART_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800233c:	f7ff f916 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002340:	2100      	movs	r1, #0
 8002342:	480d      	ldr	r0, [pc, #52]	@ (8002378 <MX_USART2_UART_Init+0x90>)
 8002344:	f007 fa81 	bl	800984a <HAL_UARTEx_SetTxFifoThreshold>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800234e:	f7ff f90d 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002352:	2100      	movs	r1, #0
 8002354:	4808      	ldr	r0, [pc, #32]	@ (8002378 <MX_USART2_UART_Init+0x90>)
 8002356:	f007 fab6 	bl	80098c6 <HAL_UARTEx_SetRxFifoThreshold>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002360:	f7ff f904 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8002364:	4804      	ldr	r0, [pc, #16]	@ (8002378 <MX_USART2_UART_Init+0x90>)
 8002366:	f007 fa35 	bl	80097d4 <HAL_UARTEx_EnableFifoMode>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002370:	f7ff f8fc 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	2000026c 	.word	0x2000026c
 800237c:	40004400 	.word	0x40004400

08002380 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b096      	sub	sp, #88	@ 0x58
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002398:	f107 030c 	add.w	r3, r7, #12
 800239c:	2238      	movs	r2, #56	@ 0x38
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f01a fa2d 	bl	801c800 <memset>
  if(uartHandle->Instance==USART2)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a33      	ldr	r2, [pc, #204]	@ (8002478 <HAL_UART_MspInit+0xf8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d15f      	bne.n	8002470 <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023b0:	2302      	movs	r3, #2
 80023b2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80023b4:	4b31      	ldr	r3, [pc, #196]	@ (800247c <HAL_UART_MspInit+0xfc>)
 80023b6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	4618      	mov	r0, r3
 80023be:	f003 ff97 	bl	80062f0 <HAL_RCCEx_PeriphCLKConfig>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023c8:	f7ff f8d0 	bl	800156c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023cc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80023d0:	f7ff ff60 	bl	8002294 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d4:	2001      	movs	r0, #1
 80023d6:	f7ff ff45 	bl	8002264 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80023da:	230c      	movs	r3, #12
 80023dc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e6:	2303      	movs	r3, #3
 80023e8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ea:	2307      	movs	r3, #7
 80023ec:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80023f2:	4619      	mov	r1, r3
 80023f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023f8:	f002 fa5c 	bl	80048b4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel5;
 80023fc:	4b20      	ldr	r3, [pc, #128]	@ (8002480 <HAL_UART_MspInit+0x100>)
 80023fe:	4a21      	ldr	r2, [pc, #132]	@ (8002484 <HAL_UART_MspInit+0x104>)
 8002400:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002402:	4b1f      	ldr	r3, [pc, #124]	@ (8002480 <HAL_UART_MspInit+0x100>)
 8002404:	2214      	movs	r2, #20
 8002406:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002408:	4b1d      	ldr	r3, [pc, #116]	@ (8002480 <HAL_UART_MspInit+0x100>)
 800240a:	2210      	movs	r2, #16
 800240c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800240e:	4b1c      	ldr	r3, [pc, #112]	@ (8002480 <HAL_UART_MspInit+0x100>)
 8002410:	2200      	movs	r2, #0
 8002412:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002414:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <HAL_UART_MspInit+0x100>)
 8002416:	2280      	movs	r2, #128	@ 0x80
 8002418:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800241a:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <HAL_UART_MspInit+0x100>)
 800241c:	2200      	movs	r2, #0
 800241e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002420:	4b17      	ldr	r3, [pc, #92]	@ (8002480 <HAL_UART_MspInit+0x100>)
 8002422:	2200      	movs	r2, #0
 8002424:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002426:	4b16      	ldr	r3, [pc, #88]	@ (8002480 <HAL_UART_MspInit+0x100>)
 8002428:	2200      	movs	r2, #0
 800242a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800242c:	4b14      	ldr	r3, [pc, #80]	@ (8002480 <HAL_UART_MspInit+0x100>)
 800242e:	2200      	movs	r2, #0
 8002430:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002432:	4813      	ldr	r0, [pc, #76]	@ (8002480 <HAL_UART_MspInit+0x100>)
 8002434:	f001 fc0c 	bl	8003c50 <HAL_DMA_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800243e:	f7ff f895 	bl	800156c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002442:	2110      	movs	r1, #16
 8002444:	480e      	ldr	r0, [pc, #56]	@ (8002480 <HAL_UART_MspInit+0x100>)
 8002446:	f001 ff43 	bl	80042d0 <HAL_DMA_ConfigChannelAttributes>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 8002450:	f7ff f88c 	bl	800156c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <HAL_UART_MspInit+0x100>)
 8002458:	67da      	str	r2, [r3, #124]	@ 0x7c
 800245a:	4a09      	ldr	r2, [pc, #36]	@ (8002480 <HAL_UART_MspInit+0x100>)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002460:	2200      	movs	r2, #0
 8002462:	2102      	movs	r1, #2
 8002464:	2025      	movs	r0, #37	@ 0x25
 8002466:	f001 fbb0 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800246a:	2025      	movs	r0, #37	@ 0x25
 800246c:	f001 fbc7 	bl	8003bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002470:	bf00      	nop
 8002472:	3758      	adds	r7, #88	@ 0x58
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40004400 	.word	0x40004400
 800247c:	000c0004 	.word	0x000c0004
 8002480:	20000300 	.word	0x20000300
 8002484:	40020058 	.word	0x40020058

08002488 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0b      	ldr	r2, [pc, #44]	@ (80024c4 <HAL_UART_MspDeInit+0x3c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d110      	bne.n	80024bc <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800249a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800249e:	f7ff ff11 	bl	80022c4 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 80024a2:	210c      	movs	r1, #12
 80024a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024a8:	f002 fb64 	bl	8004b74 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024b0:	4618      	mov	r0, r3
 80024b2:	f001 fc75 	bl	8003da0 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80024b6:	2025      	movs	r0, #37	@ 0x25
 80024b8:	f001 fbaf 	bl	8003c1a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40004400 	.word	0x40004400

080024c8 <LL_APB1_GRP1_ForceReset>:
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80024d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4313      	orrs	r3, r2
 80024de:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <LL_APB1_GRP1_ReleaseReset>:
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002500:	4013      	ands	r3, r2
 8002502:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
	...

08002510 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002518:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <LL_EXTI_EnableIT_0_31+0x24>)
 800251a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800251e:	4905      	ldr	r1, [pc, #20]	@ (8002534 <LL_EXTI_EnableIT_0_31+0x24>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	58000800 	.word	0x58000800

08002538 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002540:	4a07      	ldr	r2, [pc, #28]	@ (8002560 <vcom_Init+0x28>)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002546:	f7fe fce9 	bl	8000f1c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800254a:	f7ff fecd 	bl	80022e8 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 800254e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002552:	f7ff ffdd 	bl	8002510 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002556:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20000364 	.word	0x20000364

08002564 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002568:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800256c:	f7ff ffac 	bl	80024c8 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8002570:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002574:	f7ff ffb9 	bl	80024ea <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002578:	4804      	ldr	r0, [pc, #16]	@ (800258c <vcom_DeInit+0x28>)
 800257a:	f7ff ff85 	bl	8002488 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800257e:	200f      	movs	r0, #15
 8002580:	f001 fb4b 	bl	8003c1a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002584:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002586:	4618      	mov	r0, r3
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2000026c 	.word	0x2000026c

08002590 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	461a      	mov	r2, r3
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4804      	ldr	r0, [pc, #16]	@ (80025b4 <vcom_Trace_DMA+0x24>)
 80025a4:	f005 f8c2 	bl	800772c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80025a8:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	2000026c 	.word	0x2000026c

080025b8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80025c0:	4a19      	ldr	r2, [pc, #100]	@ (8002628 <vcom_ReceiveInit+0x70>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80025c6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80025ca:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80025cc:	f107 0308 	add.w	r3, r7, #8
 80025d0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80025d4:	4815      	ldr	r0, [pc, #84]	@ (800262c <vcom_ReceiveInit+0x74>)
 80025d6:	f007 f870 	bl	80096ba <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80025da:	bf00      	nop
 80025dc:	4b13      	ldr	r3, [pc, #76]	@ (800262c <vcom_ReceiveInit+0x74>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ea:	d0f7      	beq.n	80025dc <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80025ec:	bf00      	nop
 80025ee:	4b0f      	ldr	r3, [pc, #60]	@ (800262c <vcom_ReceiveInit+0x74>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025fc:	d1f7      	bne.n	80025ee <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80025fe:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <vcom_ReceiveInit+0x74>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	4b09      	ldr	r3, [pc, #36]	@ (800262c <vcom_ReceiveInit+0x74>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800260c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 800260e:	4807      	ldr	r0, [pc, #28]	@ (800262c <vcom_ReceiveInit+0x74>)
 8002610:	f007 f8ae 	bl	8009770 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002614:	2201      	movs	r2, #1
 8002616:	4906      	ldr	r1, [pc, #24]	@ (8002630 <vcom_ReceiveInit+0x78>)
 8002618:	4804      	ldr	r0, [pc, #16]	@ (800262c <vcom_ReceiveInit+0x74>)
 800261a:	f005 f83b 	bl	8007694 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800261e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000368 	.word	0x20000368
 800262c:	2000026c 	.word	0x2000026c
 8002630:	20000360 	.word	0x20000360

08002634 <vcom_Resume>:

void vcom_Resume(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002638:	4808      	ldr	r0, [pc, #32]	@ (800265c <vcom_Resume+0x28>)
 800263a:	f004 ffda 	bl	80075f2 <HAL_UART_Init>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002644:	f7fe ff92 	bl	800156c <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002648:	4805      	ldr	r0, [pc, #20]	@ (8002660 <vcom_Resume+0x2c>)
 800264a:	f001 fb01 	bl	8003c50 <HAL_DMA_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002654:	f7fe ff8a 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002658:	bf00      	nop
 800265a:	bd80      	pop	{r7, pc}
 800265c:	2000026c 	.word	0x2000026c
 8002660:	20000300 	.word	0x20000300

08002664 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a05      	ldr	r2, [pc, #20]	@ (8002688 <HAL_UART_TxCpltCallback+0x24>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d103      	bne.n	800267e <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002676:	4b05      	ldr	r3, [pc, #20]	@ (800268c <HAL_UART_TxCpltCallback+0x28>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2000      	movs	r0, #0
 800267c:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40004400 	.word	0x40004400
 800268c:	20000364 	.word	0x20000364

08002690 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0d      	ldr	r2, [pc, #52]	@ (80026d4 <HAL_UART_RxCpltCallback+0x44>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d113      	bne.n	80026ca <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80026a2:	4b0d      	ldr	r3, [pc, #52]	@ (80026d8 <HAL_UART_RxCpltCallback+0x48>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_UART_RxCpltCallback+0x30>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80026b4:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <HAL_UART_RxCpltCallback+0x48>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2200      	movs	r2, #0
 80026ba:	2101      	movs	r1, #1
 80026bc:	4807      	ldr	r0, [pc, #28]	@ (80026dc <HAL_UART_RxCpltCallback+0x4c>)
 80026be:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80026c0:	2201      	movs	r2, #1
 80026c2:	4906      	ldr	r1, [pc, #24]	@ (80026dc <HAL_UART_RxCpltCallback+0x4c>)
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f004 ffe5 	bl	8007694 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40004400 	.word	0x40004400
 80026d8:	20000368 	.word	0x20000368
 80026dc:	20000360 	.word	0x20000360

080026e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026e0:	480d      	ldr	r0, [pc, #52]	@ (8002718 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026e4:	f7ff fb7a 	bl	8001ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026e8:	480c      	ldr	r0, [pc, #48]	@ (800271c <LoopForever+0x6>)
  ldr r1, =_edata
 80026ea:	490d      	ldr	r1, [pc, #52]	@ (8002720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002724 <LoopForever+0xe>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026f0:	e002      	b.n	80026f8 <LoopCopyDataInit>

080026f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f6:	3304      	adds	r3, #4

080026f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026fc:	d3f9      	bcc.n	80026f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002728 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002700:	4c0a      	ldr	r4, [pc, #40]	@ (800272c <LoopForever+0x16>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002704:	e001      	b.n	800270a <LoopFillZerobss>

08002706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002708:	3204      	adds	r2, #4

0800270a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800270a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800270c:	d3fb      	bcc.n	8002706 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800270e:	f01a f8cb 	bl	801c8a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002712:	f7fe fe92 	bl	800143a <main>

08002716 <LoopForever>:

LoopForever:
    b LoopForever
 8002716:	e7fe      	b.n	8002716 <LoopForever>
  ldr   r0, =_estack
 8002718:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800271c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002720:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8002724:	0801daa4 	.word	0x0801daa4
  ldr r2, =_sbss
 8002728:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 800272c:	20001c6c 	.word	0x20001c6c

08002730 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002730:	e7fe      	b.n	8002730 <ADC_IRQHandler>
	...

08002734 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002738:	4b04      	ldr	r3, [pc, #16]	@ (800274c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a03      	ldr	r2, [pc, #12]	@ (800274c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800273e:	f023 0301 	bic.w	r3, r3, #1
 8002742:	6053      	str	r3, [r2, #4]
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	e0042000 	.word	0xe0042000

08002750 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002754:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a03      	ldr	r2, [pc, #12]	@ (8002768 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800275a:	f023 0302 	bic.w	r3, r3, #2
 800275e:	6053      	str	r3, [r2, #4]
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	e0042000 	.word	0xe0042000

0800276c <LL_DBGMCU_DisableDBGStandbyMode>:
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002770:	4b04      	ldr	r3, [pc, #16]	@ (8002784 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a03      	ldr	r2, [pc, #12]	@ (8002784 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002776:	f023 0304 	bic.w	r3, r3, #4
 800277a:	6053      	str	r3, [r2, #4]
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	e0042000 	.word	0xe0042000

08002788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002792:	2003      	movs	r0, #3
 8002794:	f001 fa0e 	bl	8003bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002798:	f003 fbcc 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 800279c:	4603      	mov	r3, r0
 800279e:	4a09      	ldr	r2, [pc, #36]	@ (80027c4 <HAL_Init+0x3c>)
 80027a0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027a2:	2000      	movs	r0, #0
 80027a4:	f000 f810 	bl	80027c8 <HAL_InitTick>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	71fb      	strb	r3, [r7, #7]
 80027b2:	e001      	b.n	80027b8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027b4:	f7fe ffd1 	bl	800175a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027b8:	79fb      	ldrb	r3, [r7, #7]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000000 	.word	0x20000000

080027c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027d4:	4b17      	ldr	r3, [pc, #92]	@ (8002834 <HAL_InitTick+0x6c>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d024      	beq.n	8002826 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027dc:	f003 fbaa 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4b14      	ldr	r3, [pc, #80]	@ (8002834 <HAL_InitTick+0x6c>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	4619      	mov	r1, r3
 80027e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 fa1e 	bl	8003c36 <HAL_SYSTICK_Config>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10f      	bne.n	8002820 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b0f      	cmp	r3, #15
 8002804:	d809      	bhi.n	800281a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002806:	2200      	movs	r2, #0
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	f04f 30ff 	mov.w	r0, #4294967295
 800280e:	f001 f9dc 	bl	8003bca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002812:	4a09      	ldr	r2, [pc, #36]	@ (8002838 <HAL_InitTick+0x70>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	e007      	b.n	800282a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
 800281e:	e004      	b.n	800282a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
 8002824:	e001      	b.n	800282a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800282a:	7bfb      	ldrb	r3, [r7, #15]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000008 	.word	0x20000008
 8002838:	20000004 	.word	0x20000004

0800283c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002840:	4b05      	ldr	r3, [pc, #20]	@ (8002858 <HAL_IncTick+0x1c>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	4b05      	ldr	r3, [pc, #20]	@ (800285c <HAL_IncTick+0x20>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4413      	add	r3, r2
 800284c:	4a03      	ldr	r2, [pc, #12]	@ (800285c <HAL_IncTick+0x20>)
 800284e:	6013      	str	r3, [r2, #0]
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	20000008 	.word	0x20000008
 800285c:	2000036c 	.word	0x2000036c

08002860 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002864:	4b04      	ldr	r3, [pc, #16]	@ (8002878 <HAL_SuspendTick+0x18>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a03      	ldr	r2, [pc, #12]	@ (8002878 <HAL_SuspendTick+0x18>)
 800286a:	f023 0302 	bic.w	r3, r3, #2
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	e000e010 	.word	0xe000e010

0800287c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002880:	4b04      	ldr	r3, [pc, #16]	@ (8002894 <HAL_ResumeTick+0x18>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a03      	ldr	r2, [pc, #12]	@ (8002894 <HAL_ResumeTick+0x18>)
 8002886:	f043 0302 	orr.w	r3, r3, #2
 800288a:	6013      	str	r3, [r2, #0]
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	e000e010 	.word	0xe000e010

08002898 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800289c:	4b02      	ldr	r3, [pc, #8]	@ (80028a8 <HAL_GetUIDw0+0x10>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	1fff7590 	.word	0x1fff7590

080028ac <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80028b0:	4b02      	ldr	r3, [pc, #8]	@ (80028bc <HAL_GetUIDw1+0x10>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	1fff7594 	.word	0x1fff7594

080028c0 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80028c4:	4b02      	ldr	r3, [pc, #8]	@ (80028d0 <HAL_GetUIDw2+0x10>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	1fff7598 	.word	0x1fff7598

080028d4 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80028d8:	f7ff ff2c 	bl	8002734 <LL_DBGMCU_DisableDBGSleepMode>
}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80028e4:	f7ff ff34 	bl	8002750 <LL_DBGMCU_DisableDBGStopMode>
}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 80028f0:	f7ff ff3c 	bl	800276c <LL_DBGMCU_DisableDBGStandbyMode>
}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	601a      	str	r2, [r3, #0]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2107      	movs	r1, #7
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	401a      	ands	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	431a      	orrs	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2107      	movs	r1, #7
 8002988:	fa01 f303 	lsl.w	r3, r1, r3
 800298c:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b085      	sub	sp, #20
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	210f      	movs	r1, #15
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	401a      	ands	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	0e9b      	lsrs	r3, r3, #26
 80029ea:	f003 010f 	and.w	r1, r3, #15
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	431a      	orrs	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002a40:	43db      	mvns	r3, r3
 8002a42:	401a      	ands	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	43db      	mvns	r3, r3
 8002a68:	401a      	ands	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	0219      	lsls	r1, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	400b      	ands	r3, r1
 8002a72:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002a76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr

08002a8a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002a9a:	f023 0317 	bic.w	r3, r3, #23
 8002a9e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002ac0:	f023 0317 	bic.w	r3, r3, #23
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6093      	str	r3, [r2, #8]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ae6:	d101      	bne.n	8002aec <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b08:	f023 0317 	bic.w	r3, r3, #23
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b2e:	f023 0317 	bic.w	r3, r3, #23
 8002b32:	f043 0202 	orr.w	r2, r3, #2
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <LL_ADC_IsEnabled+0x18>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <LL_ADC_IsEnabled+0x1a>
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d101      	bne.n	8002b80 <LL_ADC_IsDisableOngoing+0x18>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <LL_ADC_IsDisableOngoing+0x1a>
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b9c:	f023 0317 	bic.w	r3, r3, #23
 8002ba0:	f043 0204 	orr.w	r2, r3, #4
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bc2:	f023 0317 	bic.w	r3, r3, #23
 8002bc6:	f043 0210 	orr.w	r2, r3, #16
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d101      	bne.n	8002bf0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e17e      	b.n	8002f1c <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7fe f83b 	bl	8000ca8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff44 	bl	8002ad2 <LL_ADC_IsInternalRegulatorEnabled>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d115      	bne.n	8002c7c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff18 	bl	8002a8a <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c5a:	4b9e      	ldr	r3, [pc, #632]	@ (8002ed4 <HAL_ADC_Init+0x2d8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	099b      	lsrs	r3, r3, #6
 8002c60:	4a9d      	ldr	r2, [pc, #628]	@ (8002ed8 <HAL_ADC_Init+0x2dc>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	099b      	lsrs	r3, r3, #6
 8002c68:	3301      	adds	r3, #1
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c6e:	e002      	b.n	8002c76 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f9      	bne.n	8002c70 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff26 	bl	8002ad2 <LL_ADC_IsInternalRegulatorEnabled>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10d      	bne.n	8002ca8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c90:	f043 0210 	orr.w	r2, r3, #16
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9c:	f043 0201 	orr.w	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff93 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 8002cb2:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f040 8124 	bne.w	8002f0a <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f040 8120 	bne.w	8002f0a <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cce:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002cd2:	f043 0202 	orr.w	r2, r3, #2
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff ff30 	bl	8002b44 <LL_ADC_IsEnabled>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 80a7 	bne.w	8002e3a <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7e1b      	ldrb	r3, [r3, #24]
 8002cf4:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002cf6:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7e5b      	ldrb	r3, [r3, #25]
 8002cfc:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002cfe:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	7e9b      	ldrb	r3, [r3, #26]
 8002d04:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002d06:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d0c:	2a00      	cmp	r2, #0
 8002d0e:	d002      	beq.n	8002d16 <HAL_ADC_Init+0x11a>
 8002d10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d14:	e000      	b.n	8002d18 <HAL_ADC_Init+0x11c>
 8002d16:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002d18:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002d1e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	da04      	bge.n	8002d32 <HAL_ADC_Init+0x136>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d30:	e001      	b.n	8002d36 <HAL_ADC_Init+0x13a>
 8002d32:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8002d36:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002d3e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d40:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d114      	bne.n	8002d7c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	7e9b      	ldrb	r3, [r3, #26]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d104      	bne.n	8002d64 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	e00b      	b.n	8002d7c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d74:	f043 0201 	orr.w	r2, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d009      	beq.n	8002d98 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002d90:	4313      	orrs	r3, r2
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8002da2:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	69b9      	ldr	r1, [r7, #24]
 8002dac:	430b      	orrs	r3, r1
 8002dae:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d111      	bne.n	8002df2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002dda:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002de0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002de6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	4b38      	ldr	r3, [pc, #224]	@ (8002edc <HAL_ADC_Init+0x2e0>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	6979      	ldr	r1, [r7, #20]
 8002e02:	430b      	orrs	r3, r1
 8002e04:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002e0e:	d014      	beq.n	8002e3a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e18:	d00f      	beq.n	8002e3a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e22:	d00a      	beq.n	8002e3a <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002e24:	4b2e      	ldr	r3, [pc, #184]	@ (8002ee0 <HAL_ADC_Init+0x2e4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002e34:	492a      	ldr	r1, [pc, #168]	@ (8002ee0 <HAL_ADC_Init+0x2e4>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e42:	461a      	mov	r2, r3
 8002e44:	2100      	movs	r1, #0
 8002e46:	f7ff fd76 	bl	8002936 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e52:	461a      	mov	r2, r3
 8002e54:	4923      	ldr	r1, [pc, #140]	@ (8002ee4 <HAL_ADC_Init+0x2e8>)
 8002e56:	f7ff fd6e 	bl	8002936 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d108      	bne.n	8002e74 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f062 020f 	orn	r2, r2, #15
 8002e70:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e72:	e017      	b.n	8002ea4 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e7c:	d112      	bne.n	8002ea4 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	f003 031c 	and.w	r3, r3, #28
 8002e90:	f06f 020f 	mvn.w	r2, #15
 8002e94:	fa02 f103 	lsl.w	r1, r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fd61 	bl	8002972 <LL_ADC_GetSamplingTimeCommonChannels>
 8002eb0:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d116      	bne.n	8002ee8 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec4:	f023 0303 	bic.w	r3, r3, #3
 8002ec8:	f043 0201 	orr.w	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002ed0:	e023      	b.n	8002f1a <HAL_ADC_Init+0x31e>
 8002ed2:	bf00      	nop
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	053e2d63 	.word	0x053e2d63
 8002edc:	1ffffc02 	.word	0x1ffffc02
 8002ee0:	40012708 	.word	0x40012708
 8002ee4:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eec:	f023 0312 	bic.w	r3, r3, #18
 8002ef0:	f043 0210 	orr.w	r2, r3, #16
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efc:	f043 0201 	orr.w	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002f08:	e007      	b.n	8002f1a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0e:	f043 0210 	orr.w	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002f1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e07a      	b.n	800302c <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3a:	f043 0202 	orr.w	r2, r3, #2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 face 	bl	80034e4 <ADC_ConversionStop>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10f      	bne.n	8002f72 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fb92 	bl	800367c <ADC_Disable>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d102      	bne.n	8002f68 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fd9f 	bl	8002ab0 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8002f80:	f023 0303 	bic.w	r3, r3, #3
 8002f84:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f240 329f 	movw	r2, #927	@ 0x39f
 8002f8e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68d9      	ldr	r1, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4b26      	ldr	r3, [pc, #152]	@ (8003034 <HAL_ADC_DeInit+0x110>)
 8002f9c:	400b      	ands	r3, r1
 8002f9e:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8002fae:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0207 	bic.w	r2, r2, #7
 8002fbe:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6a1a      	ldr	r2, [r3, #32]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8002fce:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8002fde:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8002fee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8003038 <HAL_ADC_DeInit+0x114>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a0d      	ldr	r2, [pc, #52]	@ (8003038 <HAL_ADC_DeInit+0x114>)
 8003004:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003008:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fd fe60 	bl	8000cd0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	833e0200 	.word	0x833e0200
 8003038:	40012708 	.word	0x40012708

0800303c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fdc5 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d132      	bne.n	80030ba <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_ADC_Start+0x26>
 800305e:	2302      	movs	r3, #2
 8003060:	e02e      	b.n	80030c0 <HAL_ADC_Start+0x84>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fa80 	bl	8003570 <ADC_Enable>
 8003070:	4603      	mov	r3, r0
 8003072:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d11a      	bne.n	80030b0 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	221c      	movs	r2, #28
 800309a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fd6f 	bl	8002b8c <LL_ADC_REG_StartConversion>
 80030ae:	e006      	b.n	80030be <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80030b8:	e001      	b.n	80030be <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030ba:	2302      	movs	r3, #2
 80030bc:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80030be:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_ADC_Stop+0x16>
 80030da:	2302      	movs	r3, #2
 80030dc:	e022      	b.n	8003124 <HAL_ADC_Stop+0x5c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f9fc 	bl	80034e4 <ADC_ConversionStop>
 80030ec:	4603      	mov	r3, r0
 80030ee:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d111      	bne.n	800311a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fac0 	bl	800367c <ADC_Disable>
 80030fc:	4603      	mov	r3, r0
 80030fe:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800310e:	f023 0301 	bic.w	r3, r3, #1
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003122:	7bfb      	ldrb	r3, [r7, #15]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	2b08      	cmp	r3, #8
 800313c:	d102      	bne.n	8003144 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800313e:	2308      	movs	r3, #8
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	e010      	b.n	8003166 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003156:	f043 0220 	orr.w	r2, r3, #32
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e077      	b.n	8003252 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003162:	2304      	movs	r3, #4
 8003164:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003166:	f7fe fd33 	bl	8001bd0 <HAL_GetTick>
 800316a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800316c:	e021      	b.n	80031b2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d01d      	beq.n	80031b2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003176:	f7fe fd2b 	bl	8001bd0 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d302      	bcc.n	800318c <HAL_ADC_PollForConversion+0x60>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d112      	bne.n	80031b2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10b      	bne.n	80031b2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319e:	f043 0204 	orr.w	r2, r3, #4
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e04f      	b.n	8003252 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0d6      	beq.n	800316e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fbe6 	bl	80029a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d031      	beq.n	8003240 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	7e9b      	ldrb	r3, [r3, #26]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d12d      	bne.n	8003240 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d126      	bne.n	8003240 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fcee 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d112      	bne.n	8003228 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 020c 	bic.w	r2, r2, #12
 8003210:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003216:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	f043 0201 	orr.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	659a      	str	r2, [r3, #88]	@ 0x58
 8003226:	e00b      	b.n	8003240 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322c:	f043 0220 	orr.w	r2, r3, #32
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003238:	f043 0201 	orr.w	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7e1b      	ldrb	r3, [r3, #24]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d103      	bne.n	8003250 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	220c      	movs	r2, #12
 800324e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr
	...

08003274 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x28>
 8003298:	2302      	movs	r3, #2
 800329a:	e110      	b.n	80034be <HAL_ADC_ConfigChannel+0x24a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fc95 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f040 80f7 	bne.w	80034a4 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	f000 80b1 	beq.w	8003422 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032c8:	d004      	beq.n	80032d4 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80032ce:	4a7e      	ldr	r2, [pc, #504]	@ (80034c8 <HAL_ADC_ConfigChannel+0x254>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d108      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f7ff fb92 	bl	8002a08 <LL_ADC_REG_SetSequencerChAdd>
 80032e4:	e041      	b.n	800336a <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	210f      	movs	r1, #15
 80032f4:	fa01 f303 	lsl.w	r3, r1, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	401a      	ands	r2, r3
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <HAL_ADC_ConfigChannel+0xa0>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	0e9b      	lsrs	r3, r3, #26
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	e011      	b.n	8003338 <HAL_ADC_ConfigChannel+0xc4>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 800332c:	2320      	movs	r3, #32
 800332e:	e003      	b.n	8003338 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	6839      	ldr	r1, [r7, #0]
 800333a:	6849      	ldr	r1, [r1, #4]
 800333c:	f001 011f 	and.w	r1, r1, #31
 8003340:	408b      	lsls	r3, r1
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	429a      	cmp	r2, r3
 8003356:	d808      	bhi.n	800336a <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6818      	ldr	r0, [r3, #0]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	f7ff fb2e 	bl	80029c6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6819      	ldr	r1, [r3, #0]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	461a      	mov	r2, r3
 8003378:	f7ff fb6b 	bl	8002a52 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	f280 8097 	bge.w	80034b4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003386:	4851      	ldr	r0, [pc, #324]	@ (80034cc <HAL_ADC_ConfigChannel+0x258>)
 8003388:	f7ff fac8 	bl	800291c <LL_ADC_GetCommonPathInternalCh>
 800338c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a4f      	ldr	r2, [pc, #316]	@ (80034d0 <HAL_ADC_ConfigChannel+0x25c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d120      	bne.n	80033da <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d11b      	bne.n	80033da <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033a8:	4619      	mov	r1, r3
 80033aa:	4848      	ldr	r0, [pc, #288]	@ (80034cc <HAL_ADC_ConfigChannel+0x258>)
 80033ac:	f7ff faa4 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033b0:	4b48      	ldr	r3, [pc, #288]	@ (80034d4 <HAL_ADC_ConfigChannel+0x260>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	099b      	lsrs	r3, r3, #6
 80033b6:	4a48      	ldr	r2, [pc, #288]	@ (80034d8 <HAL_ADC_ConfigChannel+0x264>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	099b      	lsrs	r3, r3, #6
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	4613      	mov	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80033ca:	e002      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f9      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80033d8:	e06c      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a3f      	ldr	r2, [pc, #252]	@ (80034dc <HAL_ADC_ConfigChannel+0x268>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d10c      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d107      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033f4:	4619      	mov	r1, r3
 80033f6:	4835      	ldr	r0, [pc, #212]	@ (80034cc <HAL_ADC_ConfigChannel+0x258>)
 80033f8:	f7ff fa7e 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
 80033fc:	e05a      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a37      	ldr	r2, [pc, #220]	@ (80034e0 <HAL_ADC_ConfigChannel+0x26c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d155      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800340e:	2b00      	cmp	r3, #0
 8003410:	d150      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003418:	4619      	mov	r1, r3
 800341a:	482c      	ldr	r0, [pc, #176]	@ (80034cc <HAL_ADC_ConfigChannel+0x258>)
 800341c:	f7ff fa6c 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
 8003420:	e048      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800342a:	d004      	beq.n	8003436 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003430:	4a25      	ldr	r2, [pc, #148]	@ (80034c8 <HAL_ADC_ConfigChannel+0x254>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d107      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4619      	mov	r1, r3
 8003440:	4610      	mov	r0, r2
 8003442:	f7ff faf3 	bl	8002a2c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	da32      	bge.n	80034b4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800344e:	481f      	ldr	r0, [pc, #124]	@ (80034cc <HAL_ADC_ConfigChannel+0x258>)
 8003450:	f7ff fa64 	bl	800291c <LL_ADC_GetCommonPathInternalCh>
 8003454:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1d      	ldr	r2, [pc, #116]	@ (80034d0 <HAL_ADC_ConfigChannel+0x25c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d107      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003466:	4619      	mov	r1, r3
 8003468:	4818      	ldr	r0, [pc, #96]	@ (80034cc <HAL_ADC_ConfigChannel+0x258>)
 800346a:	f7ff fa45 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
 800346e:	e021      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a19      	ldr	r2, [pc, #100]	@ (80034dc <HAL_ADC_ConfigChannel+0x268>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d107      	bne.n	800348a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003480:	4619      	mov	r1, r3
 8003482:	4812      	ldr	r0, [pc, #72]	@ (80034cc <HAL_ADC_ConfigChannel+0x258>)
 8003484:	f7ff fa38 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
 8003488:	e014      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a14      	ldr	r2, [pc, #80]	@ (80034e0 <HAL_ADC_ConfigChannel+0x26c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d10f      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800349a:	4619      	mov	r1, r3
 800349c:	480b      	ldr	r0, [pc, #44]	@ (80034cc <HAL_ADC_ConfigChannel+0x258>)
 800349e:	f7ff fa2b 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
 80034a2:	e007      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a8:	f043 0220 	orr.w	r2, r3, #32
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80034bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3720      	adds	r7, #32
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	80000004 	.word	0x80000004
 80034cc:	40012708 	.word	0x40012708
 80034d0:	b0001000 	.word	0xb0001000
 80034d4:	20000000 	.word	0x20000000
 80034d8:	053e2d63 	.word	0x053e2d63
 80034dc:	b8004000 	.word	0xb8004000
 80034e0:	b4002000 	.word	0xb4002000

080034e4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fb71 	bl	8002bd8 <LL_ADC_REG_IsConversionOngoing>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d033      	beq.n	8003564 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff fb31 	bl	8002b68 <LL_ADC_IsDisableOngoing>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d104      	bne.n	8003516 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fb4e 	bl	8002bb2 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003516:	f7fe fb5b 	bl	8001bd0 <HAL_GetTick>
 800351a:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800351c:	e01b      	b.n	8003556 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800351e:	f7fe fb57 	bl	8001bd0 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d914      	bls.n	8003556 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00d      	beq.n	8003556 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353e:	f043 0210 	orr.w	r2, r3, #16
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	f043 0201 	orr.w	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e007      	b.n	8003566 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1dc      	bne.n	800351e <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003578:	2300      	movs	r3, #0
 800357a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fadf 	bl	8002b44 <LL_ADC_IsEnabled>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d169      	bne.n	8003660 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	4b36      	ldr	r3, [pc, #216]	@ (800366c <ADC_Enable+0xfc>)
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00d      	beq.n	80035b6 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359e:	f043 0210 	orr.w	r2, r3, #16
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035aa:	f043 0201 	orr.w	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e055      	b.n	8003662 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fa9c 	bl	8002af8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80035c0:	482b      	ldr	r0, [pc, #172]	@ (8003670 <ADC_Enable+0x100>)
 80035c2:	f7ff f9ab 	bl	800291c <LL_ADC_GetCommonPathInternalCh>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00f      	beq.n	80035f0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035d0:	4b28      	ldr	r3, [pc, #160]	@ (8003674 <ADC_Enable+0x104>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	099b      	lsrs	r3, r3, #6
 80035d6:	4a28      	ldr	r2, [pc, #160]	@ (8003678 <ADC_Enable+0x108>)
 80035d8:	fba2 2303 	umull	r2, r3, r2, r3
 80035dc:	099b      	lsrs	r3, r3, #6
 80035de:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80035e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035e2:	e002      	b.n	80035ea <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f9      	bne.n	80035e4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	7e5b      	ldrb	r3, [r3, #25]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d033      	beq.n	8003660 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80035f8:	f7fe faea 	bl	8001bd0 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035fe:	e028      	b.n	8003652 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff fa9d 	bl	8002b44 <LL_ADC_IsEnabled>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d104      	bne.n	800361a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fa6f 	bl	8002af8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800361a:	f7fe fad9 	bl	8001bd0 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d914      	bls.n	8003652 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b01      	cmp	r3, #1
 8003634:	d00d      	beq.n	8003652 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363a:	f043 0210 	orr.w	r2, r3, #16
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003646:	f043 0201 	orr.w	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e007      	b.n	8003662 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b01      	cmp	r3, #1
 800365e:	d1cf      	bne.n	8003600 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	80000017 	.word	0x80000017
 8003670:	40012708 	.word	0x40012708
 8003674:	20000000 	.word	0x20000000
 8003678:	053e2d63 	.word	0x053e2d63

0800367c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fa6d 	bl	8002b68 <LL_ADC_IsDisableOngoing>
 800368e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fa55 	bl	8002b44 <LL_ADC_IsEnabled>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d047      	beq.n	8003730 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d144      	bne.n	8003730 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0305 	and.w	r3, r3, #5
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d10c      	bne.n	80036ce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fa30 	bl	8002b1e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2203      	movs	r2, #3
 80036c4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036c6:	f7fe fa83 	bl	8001bd0 <HAL_GetTick>
 80036ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036cc:	e029      	b.n	8003722 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d2:	f043 0210 	orr.w	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e023      	b.n	8003732 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036ea:	f7fe fa71 	bl	8001bd0 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d914      	bls.n	8003722 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00d      	beq.n	8003722 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370a:	f043 0210 	orr.w	r2, r3, #16
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003716:	f043 0201 	orr.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e007      	b.n	8003732 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1dc      	bne.n	80036ea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <LL_ADC_SetCalibrationFactor>:
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800374a:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr

08003762 <LL_ADC_GetCalibrationFactor>:
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <LL_ADC_Enable>:
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800378e:	f023 0317 	bic.w	r3, r3, #23
 8003792:	f043 0201 	orr.w	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	609a      	str	r2, [r3, #8]
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr

080037a4 <LL_ADC_Disable>:
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037b4:	f023 0317 	bic.w	r3, r3, #23
 80037b8:	f043 0202 	orr.w	r2, r3, #2
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	609a      	str	r2, [r3, #8]
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr

080037ca <LL_ADC_IsEnabled>:
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <LL_ADC_IsEnabled+0x18>
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <LL_ADC_IsEnabled+0x1a>
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr

080037ee <LL_ADC_StartCalibration>:
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037fe:	f023 0317 	bic.w	r3, r3, #23
 8003802:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	609a      	str	r2, [r3, #8]
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <LL_ADC_IsCalibrationOnGoing>:
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003824:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003828:	d101      	bne.n	800382e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr

0800383a <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b088      	sub	sp, #32
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_ADCEx_Calibration_Start+0x1e>
 8003854:	2302      	movs	r3, #2
 8003856:	e0b9      	b.n	80039cc <HAL_ADCEx_Calibration_Start+0x192>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff ff0b 	bl	800367c <ADC_Disable>
 8003866:	4603      	mov	r3, r0
 8003868:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff ffab 	bl	80037ca <LL_ADC_IsEnabled>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 809d 	bne.w	80039b6 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003880:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003884:	f043 0202 	orr.w	r2, r3, #2
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	f248 0303 	movw	r3, #32771	@ 0x8003
 8003896:	4013      	ands	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80038a8:	f023 0303 	bic.w	r3, r3, #3
 80038ac:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	e02e      	b.n	8003912 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff ff98 	bl	80037ee <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038be:	e014      	b.n	80038ea <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	3301      	adds	r3, #1
 80038c4:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 80038cc:	d30d      	bcc.n	80038ea <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d2:	f023 0312 	bic.w	r3, r3, #18
 80038d6:	f043 0210 	orr.w	r2, r3, #16
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e070      	b.n	80039cc <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff ff90 	bl	8003814 <LL_ADC_IsCalibrationOnGoing>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e2      	bne.n	80038c0 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff ff2f 	bl	8003762 <LL_ADC_GetCalibrationFactor>
 8003904:	4602      	mov	r2, r0
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	4413      	add	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	3301      	adds	r3, #1
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	2b07      	cmp	r3, #7
 8003916:	d9cd      	bls.n	80038b4 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff ff29 	bl	800377e <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69b9      	ldr	r1, [r7, #24]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff ff01 	bl	800373a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ff31 	bl	80037a4 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003942:	f7fe f945 	bl	8001bd0 <HAL_GetTick>
 8003946:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003948:	e01c      	b.n	8003984 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800394a:	f7fe f941 	bl	8001bd0 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d915      	bls.n	8003984 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff34 	bl	80037ca <LL_ADC_IsEnabled>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00d      	beq.n	8003984 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396c:	f043 0210 	orr.w	r2, r3, #16
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003978:	f043 0201 	orr.w	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e023      	b.n	80039cc <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff1e 	bl	80037ca <LL_ADC_IsEnabled>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1da      	bne.n	800394a <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68d9      	ldr	r1, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a8:	f023 0303 	bic.w	r3, r3, #3
 80039ac:	f043 0201 	orr.w	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80039b4:	e005      	b.n	80039c2 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ba:	f043 0210 	orr.w	r2, r3, #16
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3720      	adds	r7, #32
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a18 <__NVIC_SetPriorityGrouping+0x44>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039f0:	4013      	ands	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a06:	4a04      	ldr	r2, [pc, #16]	@ (8003a18 <__NVIC_SetPriorityGrouping+0x44>)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	60d3      	str	r3, [r2, #12]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a20:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <__NVIC_GetPriorityGrouping+0x18>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	f003 0307 	and.w	r3, r3, #7
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	db0b      	blt.n	8003a62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	f003 021f 	and.w	r2, r3, #31
 8003a50:	4906      	ldr	r1, [pc, #24]	@ (8003a6c <__NVIC_EnableIRQ+0x34>)
 8003a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	2001      	movs	r0, #1
 8003a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr
 8003a6c:	e000e100 	.word	0xe000e100

08003a70 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	db12      	blt.n	8003aa8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	f003 021f 	and.w	r2, r3, #31
 8003a88:	490a      	ldr	r1, [pc, #40]	@ (8003ab4 <__NVIC_DisableIRQ+0x44>)
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	2001      	movs	r0, #1
 8003a92:	fa00 f202 	lsl.w	r2, r0, r2
 8003a96:	3320      	adds	r3, #32
 8003a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a9c:	f3bf 8f4f 	dsb	sy
}
 8003aa0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003aa2:	f3bf 8f6f 	isb	sy
}
 8003aa6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	e000e100 	.word	0xe000e100

08003ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	6039      	str	r1, [r7, #0]
 8003ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	db0a      	blt.n	8003ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	490c      	ldr	r1, [pc, #48]	@ (8003b04 <__NVIC_SetPriority+0x4c>)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	0112      	lsls	r2, r2, #4
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	440b      	add	r3, r1
 8003adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ae0:	e00a      	b.n	8003af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	4908      	ldr	r1, [pc, #32]	@ (8003b08 <__NVIC_SetPriority+0x50>)
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	3b04      	subs	r3, #4
 8003af0:	0112      	lsls	r2, r2, #4
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	440b      	add	r3, r1
 8003af6:	761a      	strb	r2, [r3, #24]
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	e000e100 	.word	0xe000e100
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b089      	sub	sp, #36	@ 0x24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f1c3 0307 	rsb	r3, r3, #7
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	bf28      	it	cs
 8003b2a:	2304      	movcs	r3, #4
 8003b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3304      	adds	r3, #4
 8003b32:	2b06      	cmp	r3, #6
 8003b34:	d902      	bls.n	8003b3c <NVIC_EncodePriority+0x30>
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3b03      	subs	r3, #3
 8003b3a:	e000      	b.n	8003b3e <NVIC_EncodePriority+0x32>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b40:	f04f 32ff 	mov.w	r2, #4294967295
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	401a      	ands	r2, r3
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b54:	f04f 31ff 	mov.w	r1, #4294967295
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5e:	43d9      	mvns	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b64:	4313      	orrs	r3, r2
         );
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3724      	adds	r7, #36	@ 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b80:	d301      	bcc.n	8003b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b82:	2301      	movs	r3, #1
 8003b84:	e00f      	b.n	8003ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b86:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb0 <SysTick_Config+0x40>)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b8e:	210f      	movs	r1, #15
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	f7ff ff90 	bl	8003ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b98:	4b05      	ldr	r3, [pc, #20]	@ (8003bb0 <SysTick_Config+0x40>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b9e:	4b04      	ldr	r3, [pc, #16]	@ (8003bb0 <SysTick_Config+0x40>)
 8003ba0:	2207      	movs	r2, #7
 8003ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	e000e010 	.word	0xe000e010

08003bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff ff09 	bl	80039d4 <__NVIC_SetPriorityGrouping>
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b086      	sub	sp, #24
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bd8:	f7ff ff20 	bl	8003a1c <__NVIC_GetPriorityGrouping>
 8003bdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	6978      	ldr	r0, [r7, #20]
 8003be4:	f7ff ff92 	bl	8003b0c <NVIC_EncodePriority>
 8003be8:	4602      	mov	r2, r0
 8003bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ff61 	bl	8003ab8 <__NVIC_SetPriority>
}
 8003bf6:	bf00      	nop
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b082      	sub	sp, #8
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	4603      	mov	r3, r0
 8003c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ff13 	bl	8003a38 <__NVIC_EnableIRQ>
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	4603      	mov	r3, r0
 8003c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff21 	bl	8003a70 <__NVIC_DisableIRQ>
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff ff96 	bl	8003b70 <SysTick_Config>
 8003c44:	4603      	mov	r3, r0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e08e      	b.n	8003d80 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	4b47      	ldr	r3, [pc, #284]	@ (8003d88 <HAL_DMA_Init+0x138>)
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d80f      	bhi.n	8003c8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	4b45      	ldr	r3, [pc, #276]	@ (8003d8c <HAL_DMA_Init+0x13c>)
 8003c76:	4413      	add	r3, r2
 8003c78:	4a45      	ldr	r2, [pc, #276]	@ (8003d90 <HAL_DMA_Init+0x140>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	009a      	lsls	r2, r3, #2
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a42      	ldr	r2, [pc, #264]	@ (8003d94 <HAL_DMA_Init+0x144>)
 8003c8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c8c:	e00e      	b.n	8003cac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	4b40      	ldr	r3, [pc, #256]	@ (8003d98 <HAL_DMA_Init+0x148>)
 8003c96:	4413      	add	r3, r2
 8003c98:	4a3d      	ldr	r2, [pc, #244]	@ (8003d90 <HAL_DMA_Init+0x140>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	091b      	lsrs	r3, r3, #4
 8003ca0:	009a      	lsls	r2, r3, #2
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a3c      	ldr	r2, [pc, #240]	@ (8003d9c <HAL_DMA_Init+0x14c>)
 8003caa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6812      	ldr	r2, [r2, #0]
 8003cbe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6819      	ldr	r1, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fb52 	bl	80043a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d0c:	d102      	bne.n	8003d14 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d20:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d2a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d010      	beq.n	8003d56 <HAL_DMA_Init+0x106>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d80c      	bhi.n	8003d56 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fb7b 	bl	8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d52:	605a      	str	r2, [r3, #4]
 8003d54:	e008      	b.n	8003d68 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40020407 	.word	0x40020407
 8003d8c:	bffdfff8 	.word	0xbffdfff8
 8003d90:	cccccccd 	.word	0xcccccccd
 8003d94:	40020000 	.word	0x40020000
 8003d98:	bffdfbf8 	.word	0xbffdfbf8
 8003d9c:	40020400 	.word	0x40020400

08003da0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e07b      	b.n	8003eaa <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4b3a      	ldr	r3, [pc, #232]	@ (8003eb4 <HAL_DMA_DeInit+0x114>)
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d80f      	bhi.n	8003dee <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	4b38      	ldr	r3, [pc, #224]	@ (8003eb8 <HAL_DMA_DeInit+0x118>)
 8003dd6:	4413      	add	r3, r2
 8003dd8:	4a38      	ldr	r2, [pc, #224]	@ (8003ebc <HAL_DMA_DeInit+0x11c>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	091b      	lsrs	r3, r3, #4
 8003de0:	009a      	lsls	r2, r3, #2
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a35      	ldr	r2, [pc, #212]	@ (8003ec0 <HAL_DMA_DeInit+0x120>)
 8003dea:	641a      	str	r2, [r3, #64]	@ 0x40
 8003dec:	e00e      	b.n	8003e0c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	4b33      	ldr	r3, [pc, #204]	@ (8003ec4 <HAL_DMA_DeInit+0x124>)
 8003df6:	4413      	add	r3, r2
 8003df8:	4a30      	ldr	r2, [pc, #192]	@ (8003ebc <HAL_DMA_DeInit+0x11c>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	091b      	lsrs	r3, r3, #4
 8003e00:	009a      	lsls	r2, r3, #2
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a2f      	ldr	r2, [pc, #188]	@ (8003ec8 <HAL_DMA_DeInit+0x128>)
 8003e0a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e18:	f003 021c 	and.w	r2, r3, #28
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e20:	2101      	movs	r1, #1
 8003e22:	fa01 f202 	lsl.w	r2, r1, r2
 8003e26:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 fabd 	bl	80043a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e3e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00f      	beq.n	8003e68 <HAL_DMA_DeInit+0xc8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d80b      	bhi.n	8003e68 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 faf1 	bl	8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e66:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40020407 	.word	0x40020407
 8003eb8:	bffdfff8 	.word	0xbffdfff8
 8003ebc:	cccccccd 	.word	0xcccccccd
 8003ec0:	40020000 	.word	0x40020000
 8003ec4:	bffdfbf8 	.word	0xbffdfbf8
 8003ec8:	40020400 	.word	0x40020400

08003ecc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_DMA_Start_IT+0x20>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e069      	b.n	8003fc0 <HAL_DMA_Start_IT+0xf4>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d155      	bne.n	8003fac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0201 	bic.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fa02 	bl	800432e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 020e 	orr.w	r2, r2, #14
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e00f      	b.n	8003f64 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0204 	bic.w	r2, r2, #4
 8003f52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 020a 	orr.w	r2, r2, #10
 8003f62:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f80:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f98:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0201 	orr.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e008      	b.n	8003fbe <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2280      	movs	r2, #128	@ 0x80
 8003fb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e04f      	b.n	800407a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d008      	beq.n	8003ff8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2204      	movs	r2, #4
 8003fea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e040      	b.n	800407a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 020e 	bic.w	r2, r2, #14
 8004006:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004012:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004016:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402c:	f003 021c 	and.w	r2, r3, #28
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	2101      	movs	r1, #1
 8004036:	fa01 f202 	lsl.w	r2, r1, r2
 800403a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004044:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00c      	beq.n	8004068 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004058:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800405c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004066:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr

08004084 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d005      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2204      	movs	r2, #4
 80040a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	73fb      	strb	r3, [r7, #15]
 80040a6:	e047      	b.n	8004138 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 020e 	bic.w	r2, r2, #14
 80040b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0201 	bic.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040dc:	f003 021c 	and.w	r2, r3, #28
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e4:	2101      	movs	r1, #1
 80040e6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00c      	beq.n	8004118 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004108:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800410c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004116:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	4798      	blx	r3
    }
  }
  return status;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004160:	f003 031c 	and.w	r3, r3, #28
 8004164:	2204      	movs	r2, #4
 8004166:	409a      	lsls	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4013      	ands	r3, r2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d027      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x7c>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d022      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b00      	cmp	r3, #0
 8004186:	d107      	bne.n	8004198 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0204 	bic.w	r2, r2, #4
 8004196:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419c:	f003 021c 	and.w	r2, r3, #28
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a4:	2104      	movs	r1, #4
 80041a6:	fa01 f202 	lsl.w	r2, r1, r2
 80041aa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 8081 	beq.w	80042b8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80041be:	e07b      	b.n	80042b8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c4:	f003 031c 	and.w	r3, r3, #28
 80041c8:	2202      	movs	r2, #2
 80041ca:	409a      	lsls	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d03d      	beq.n	8004250 <HAL_DMA_IRQHandler+0x10c>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d038      	beq.n	8004250 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 020a 	bic.w	r2, r2, #10
 80041fa:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	4b2e      	ldr	r3, [pc, #184]	@ (80042c4 <HAL_DMA_IRQHandler+0x180>)
 800420c:	429a      	cmp	r2, r3
 800420e:	d909      	bls.n	8004224 <HAL_DMA_IRQHandler+0xe0>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004214:	f003 031c 	and.w	r3, r3, #28
 8004218:	4a2b      	ldr	r2, [pc, #172]	@ (80042c8 <HAL_DMA_IRQHandler+0x184>)
 800421a:	2102      	movs	r1, #2
 800421c:	fa01 f303 	lsl.w	r3, r1, r3
 8004220:	6053      	str	r3, [r2, #4]
 8004222:	e008      	b.n	8004236 <HAL_DMA_IRQHandler+0xf2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004228:	f003 031c 	and.w	r3, r3, #28
 800422c:	4a27      	ldr	r2, [pc, #156]	@ (80042cc <HAL_DMA_IRQHandler+0x188>)
 800422e:	2102      	movs	r1, #2
 8004230:	fa01 f303 	lsl.w	r3, r1, r3
 8004234:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d038      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800424e:	e033      	b.n	80042b8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004254:	f003 031c 	and.w	r3, r3, #28
 8004258:	2208      	movs	r2, #8
 800425a:	409a      	lsls	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4013      	ands	r3, r2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d02a      	beq.n	80042ba <HAL_DMA_IRQHandler+0x176>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d025      	beq.n	80042ba <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 020e 	bic.w	r2, r2, #14
 800427c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	f003 021c 	and.w	r2, r3, #28
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	2101      	movs	r1, #1
 800428c:	fa01 f202 	lsl.w	r2, r1, r2
 8004290:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d004      	beq.n	80042ba <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
}
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40020080 	.word	0x40020080
 80042c8:	40020400 	.word	0x40020400
 80042cc:	40020000 	.word	0x40020000

080042d0 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d103      	bne.n	80042ec <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	72fb      	strb	r3, [r7, #11]
    return status;
 80042e8:	7afb      	ldrb	r3, [r7, #11]
 80042ea:	e01b      	b.n	8004324 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f003 0310 	and.w	r3, r3, #16
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00d      	beq.n	800431a <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d004      	beq.n	8004312 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	e003      	b.n	800431a <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004318:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	601a      	str	r2, [r3, #0]

  return status;
 8004322:	7afb      	ldrb	r3, [r7, #11]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr

0800432e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800432e:	b480      	push	{r7}
 8004330:	b085      	sub	sp, #20
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
 800433a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004344:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434a:	2b00      	cmp	r3, #0
 800434c:	d004      	beq.n	8004358 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004356:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435c:	f003 021c 	and.w	r2, r3, #28
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004364:	2101      	movs	r1, #1
 8004366:	fa01 f202 	lsl.w	r2, r1, r2
 800436a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b10      	cmp	r3, #16
 800437a:	d108      	bne.n	800438e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800438c:	e007      	b.n	800439e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	60da      	str	r2, [r3, #12]
}
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004428 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d813      	bhi.n	80043e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c0:	089b      	lsrs	r3, r3, #2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043c8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	3b08      	subs	r3, #8
 80043d8:	4a14      	ldr	r2, [pc, #80]	@ (800442c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	e011      	b.n	8004408 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e8:	089b      	lsrs	r3, r3, #2
 80043ea:	009a      	lsls	r2, r3, #2
 80043ec:	4b10      	ldr	r3, [pc, #64]	@ (8004430 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80043ee:	4413      	add	r3, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	3b08      	subs	r3, #8
 80043fc:	4a0b      	ldr	r2, [pc, #44]	@ (800442c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	091b      	lsrs	r3, r3, #4
 8004404:	3307      	adds	r3, #7
 8004406:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a0a      	ldr	r2, [pc, #40]	@ (8004434 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800440c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	2201      	movs	r2, #1
 8004416:	409a      	lsls	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800441c:	bf00      	nop
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40020407 	.word	0x40020407
 800442c:	cccccccd 	.word	0xcccccccd
 8004430:	4002081c 	.word	0x4002081c
 8004434:	40020880 	.word	0x40020880

08004438 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004448:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4b0a      	ldr	r3, [pc, #40]	@ (8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	461a      	mov	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a08      	ldr	r2, [pc, #32]	@ (800447c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800445c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3b01      	subs	r3, #1
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	2201      	movs	r2, #1
 8004468:	409a      	lsls	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800446e:	bf00      	nop
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr
 8004478:	1000823f 	.word	0x1000823f
 800447c:	40020940 	.word	0x40020940

08004480 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800448e:	4b1c      	ldr	r3, [pc, #112]	@ (8004500 <HAL_FLASH_Program+0x80>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_FLASH_Program+0x1a>
 8004496:	2302      	movs	r3, #2
 8004498:	e02d      	b.n	80044f6 <HAL_FLASH_Program+0x76>
 800449a:	4b19      	ldr	r3, [pc, #100]	@ (8004500 <HAL_FLASH_Program+0x80>)
 800449c:	2201      	movs	r2, #1
 800449e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80044a0:	4b17      	ldr	r3, [pc, #92]	@ (8004500 <HAL_FLASH_Program+0x80>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80044a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80044aa:	f000 f869 	bl	8004580 <FLASH_WaitForLastOperation>
 80044ae:	4603      	mov	r3, r0
 80044b0:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d11a      	bne.n	80044ee <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d105      	bne.n	80044ca <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80044be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044c2:	68b8      	ldr	r0, [r7, #8]
 80044c4:	f000 f8be 	bl	8004644 <FLASH_Program_DoubleWord>
 80044c8:	e004      	b.n	80044d4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	4619      	mov	r1, r3
 80044ce:	68b8      	ldr	r0, [r7, #8]
 80044d0:	f000 f8de 	bl	8004690 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80044d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80044d8:	f000 f852 	bl	8004580 <FLASH_WaitForLastOperation>
 80044dc:	4603      	mov	r3, r0
 80044de:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80044e0:	4b08      	ldr	r3, [pc, #32]	@ (8004504 <HAL_FLASH_Program+0x84>)
 80044e2:	695a      	ldr	r2, [r3, #20]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	43db      	mvns	r3, r3
 80044e8:	4906      	ldr	r1, [pc, #24]	@ (8004504 <HAL_FLASH_Program+0x84>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80044ee:	4b04      	ldr	r3, [pc, #16]	@ (8004500 <HAL_FLASH_Program+0x80>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000370 	.word	0x20000370
 8004504:	58004000 	.word	0x58004000

08004508 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004512:	4b0b      	ldr	r3, [pc, #44]	@ (8004540 <HAL_FLASH_Unlock+0x38>)
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	2b00      	cmp	r3, #0
 8004518:	da0b      	bge.n	8004532 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800451a:	4b09      	ldr	r3, [pc, #36]	@ (8004540 <HAL_FLASH_Unlock+0x38>)
 800451c:	4a09      	ldr	r2, [pc, #36]	@ (8004544 <HAL_FLASH_Unlock+0x3c>)
 800451e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004520:	4b07      	ldr	r3, [pc, #28]	@ (8004540 <HAL_FLASH_Unlock+0x38>)
 8004522:	4a09      	ldr	r2, [pc, #36]	@ (8004548 <HAL_FLASH_Unlock+0x40>)
 8004524:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004526:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <HAL_FLASH_Unlock+0x38>)
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	da01      	bge.n	8004532 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004532:	79fb      	ldrb	r3, [r7, #7]
}
 8004534:	4618      	mov	r0, r3
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	58004000 	.word	0x58004000
 8004544:	45670123 	.word	0x45670123
 8004548:	cdef89ab 	.word	0xcdef89ab

0800454c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004556:	4b09      	ldr	r3, [pc, #36]	@ (800457c <HAL_FLASH_Lock+0x30>)
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	4a08      	ldr	r2, [pc, #32]	@ (800457c <HAL_FLASH_Lock+0x30>)
 800455c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004560:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004562:	4b06      	ldr	r3, [pc, #24]	@ (800457c <HAL_FLASH_Lock+0x30>)
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	db01      	blt.n	800456e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800456e:	79fb      	ldrb	r3, [r7, #7]
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	58004000 	.word	0x58004000

08004580 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004588:	f7fd fb22 	bl	8001bd0 <HAL_GetTick>
 800458c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800458e:	e009      	b.n	80045a4 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004590:	f7fd fb1e 	bl	8001bd0 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	429a      	cmp	r2, r3
 800459e:	d801      	bhi.n	80045a4 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e046      	b.n	8004632 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80045a4:	4b25      	ldr	r3, [pc, #148]	@ (800463c <FLASH_WaitForLastOperation+0xbc>)
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b0:	d0ee      	beq.n	8004590 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 80045b2:	4b22      	ldr	r3, [pc, #136]	@ (800463c <FLASH_WaitForLastOperation+0xbc>)
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80045c2:	4b1e      	ldr	r3, [pc, #120]	@ (800463c <FLASH_WaitForLastOperation+0xbc>)
 80045c4:	2201      	movs	r2, #1
 80045c6:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 80045ce:	4013      	ands	r3, r2
 80045d0:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045d8:	d307      	bcc.n	80045ea <FLASH_WaitForLastOperation+0x6a>
 80045da:	4b18      	ldr	r3, [pc, #96]	@ (800463c <FLASH_WaitForLastOperation+0xbc>)
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80045e4:	4915      	ldr	r1, [pc, #84]	@ (800463c <FLASH_WaitForLastOperation+0xbc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	618b      	str	r3, [r1, #24]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d004      	beq.n	80045fe <FLASH_WaitForLastOperation+0x7e>
 80045f4:	4a11      	ldr	r2, [pc, #68]	@ (800463c <FLASH_WaitForLastOperation+0xbc>)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80045fc:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00e      	beq.n	8004622 <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004604:	4a0e      	ldr	r2, [pc, #56]	@ (8004640 <FLASH_WaitForLastOperation+0xc0>)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e011      	b.n	8004632 <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800460e:	f7fd fadf 	bl	8001bd0 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	d801      	bhi.n	8004622 <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e007      	b.n	8004632 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004622:	4b06      	ldr	r3, [pc, #24]	@ (800463c <FLASH_WaitForLastOperation+0xbc>)
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800462a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800462e:	d0ee      	beq.n	800460e <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	58004000 	.word	0x58004000
 8004640:	20000370 	.word	0x20000370

08004644 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004650:	4b0e      	ldr	r3, [pc, #56]	@ (800468c <FLASH_Program_DoubleWord+0x48>)
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	4a0d      	ldr	r2, [pc, #52]	@ (800468c <FLASH_Program_DoubleWord+0x48>)
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004662:	f3bf 8f6f 	isb	sy
}
 8004666:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	000a      	movs	r2, r1
 8004676:	2300      	movs	r3, #0
 8004678:	68f9      	ldr	r1, [r7, #12]
 800467a:	3104      	adds	r1, #4
 800467c:	4613      	mov	r3, r2
 800467e:	600b      	str	r3, [r1, #0]
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	58004000 	.word	0x58004000

08004690 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004690:	b480      	push	{r7}
 8004692:	b089      	sub	sp, #36	@ 0x24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800469a:	2340      	movs	r3, #64	@ 0x40
 800469c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80046a6:	4b18      	ldr	r3, [pc, #96]	@ (8004708 <FLASH_Program_Fast+0x78>)
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	4a17      	ldr	r2, [pc, #92]	@ (8004708 <FLASH_Program_Fast+0x78>)
 80046ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b2:	f3ef 8310 	mrs	r3, PRIMASK
 80046b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80046b8:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 80046ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80046bc:	b672      	cpsid	i
}
 80046be:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	3304      	adds	r3, #4
 80046cc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	3304      	adds	r3, #4
 80046d2:	617b      	str	r3, [r7, #20]
    row_index--;
 80046d4:	7ffb      	ldrb	r3, [r7, #31]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80046da:	7ffb      	ldrb	r3, [r7, #31]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1ef      	bne.n	80046c0 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80046e0:	bf00      	nop
 80046e2:	4b09      	ldr	r3, [pc, #36]	@ (8004708 <FLASH_Program_Fast+0x78>)
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ee:	d0f8      	beq.n	80046e2 <FLASH_Program_Fast+0x52>
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f383 8810 	msr	PRIMASK, r3
}
 80046fa:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80046fc:	bf00      	nop
 80046fe:	3724      	adds	r7, #36	@ 0x24
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	58004000 	.word	0x58004000

0800470c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004716:	4b28      	ldr	r3, [pc, #160]	@ (80047b8 <HAL_FLASHEx_Erase+0xac>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_FLASHEx_Erase+0x16>
 800471e:	2302      	movs	r3, #2
 8004720:	e046      	b.n	80047b0 <HAL_FLASHEx_Erase+0xa4>
 8004722:	4b25      	ldr	r3, [pc, #148]	@ (80047b8 <HAL_FLASHEx_Erase+0xac>)
 8004724:	2201      	movs	r2, #1
 8004726:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004728:	4b23      	ldr	r3, [pc, #140]	@ (80047b8 <HAL_FLASHEx_Erase+0xac>)
 800472a:	2200      	movs	r2, #0
 800472c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800472e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004732:	f7ff ff25 	bl	8004580 <FLASH_WaitForLastOperation>
 8004736:	4603      	mov	r3, r0
 8004738:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d133      	bne.n	80047a8 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b04      	cmp	r3, #4
 8004746:	d108      	bne.n	800475a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004748:	f000 f838 	bl	80047bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800474c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004750:	f7ff ff16 	bl	8004580 <FLASH_WaitForLastOperation>
 8004754:	4603      	mov	r3, r0
 8004756:	73fb      	strb	r3, [r7, #15]
 8004758:	e024      	b.n	80047a4 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	f04f 32ff 	mov.w	r2, #4294967295
 8004760:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	e012      	b.n	8004790 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800476a:	68b8      	ldr	r0, [r7, #8]
 800476c:	f000 f836 	bl	80047dc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004770:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004774:	f7ff ff04 	bl	8004580 <FLASH_WaitForLastOperation>
 8004778:	4603      	mov	r3, r0
 800477a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	601a      	str	r2, [r3, #0]
          break;
 8004788:	e00a      	b.n	80047a0 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	3301      	adds	r3, #1
 800478e:	60bb      	str	r3, [r7, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	4413      	add	r3, r2
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	429a      	cmp	r2, r3
 800479e:	d3e4      	bcc.n	800476a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 80047a0:	f000 f878 	bl	8004894 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80047a4:	f000 f832 	bl	800480c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80047a8:	4b03      	ldr	r3, [pc, #12]	@ (80047b8 <HAL_FLASHEx_Erase+0xac>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	701a      	strb	r2, [r3, #0]

  return status;
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20000370 	.word	0x20000370

080047bc <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80047c0:	4b05      	ldr	r3, [pc, #20]	@ (80047d8 <FLASH_MassErase+0x1c>)
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	4a04      	ldr	r2, [pc, #16]	@ (80047d8 <FLASH_MassErase+0x1c>)
 80047c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ca:	f043 0304 	orr.w	r3, r3, #4
 80047ce:	6153      	str	r3, [r2, #20]
#endif
}
 80047d0:	bf00      	nop
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr
 80047d8:	58004000 	.word	0x58004000

080047dc <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80047e4:	4b08      	ldr	r3, [pc, #32]	@ (8004808 <FLASH_PageErase+0x2c>)
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	4313      	orrs	r3, r2
 80047f2:	4a05      	ldr	r2, [pc, #20]	@ (8004808 <FLASH_PageErase+0x2c>)
 80047f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f8:	f043 0302 	orr.w	r3, r3, #2
 80047fc:	6153      	str	r3, [r2, #20]
#endif
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr
 8004808:	58004000 	.word	0x58004000

0800480c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004810:	4b1f      	ldr	r3, [pc, #124]	@ (8004890 <FLASH_FlushCaches+0x84>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004818:	2b01      	cmp	r3, #1
 800481a:	d117      	bne.n	800484c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800481c:	4b1c      	ldr	r3, [pc, #112]	@ (8004890 <FLASH_FlushCaches+0x84>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1b      	ldr	r2, [pc, #108]	@ (8004890 <FLASH_FlushCaches+0x84>)
 8004822:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004826:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004828:	4b19      	ldr	r3, [pc, #100]	@ (8004890 <FLASH_FlushCaches+0x84>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a18      	ldr	r2, [pc, #96]	@ (8004890 <FLASH_FlushCaches+0x84>)
 800482e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	4b16      	ldr	r3, [pc, #88]	@ (8004890 <FLASH_FlushCaches+0x84>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a15      	ldr	r2, [pc, #84]	@ (8004890 <FLASH_FlushCaches+0x84>)
 800483a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800483e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004840:	4b13      	ldr	r3, [pc, #76]	@ (8004890 <FLASH_FlushCaches+0x84>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a12      	ldr	r2, [pc, #72]	@ (8004890 <FLASH_FlushCaches+0x84>)
 8004846:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800484a:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 800484c:	4b10      	ldr	r3, [pc, #64]	@ (8004890 <FLASH_FlushCaches+0x84>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004854:	2b01      	cmp	r3, #1
 8004856:	d117      	bne.n	8004888 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004858:	4b0d      	ldr	r3, [pc, #52]	@ (8004890 <FLASH_FlushCaches+0x84>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a0c      	ldr	r2, [pc, #48]	@ (8004890 <FLASH_FlushCaches+0x84>)
 800485e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004862:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004864:	4b0a      	ldr	r3, [pc, #40]	@ (8004890 <FLASH_FlushCaches+0x84>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a09      	ldr	r2, [pc, #36]	@ (8004890 <FLASH_FlushCaches+0x84>)
 800486a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	4b07      	ldr	r3, [pc, #28]	@ (8004890 <FLASH_FlushCaches+0x84>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a06      	ldr	r2, [pc, #24]	@ (8004890 <FLASH_FlushCaches+0x84>)
 8004876:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800487a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800487c:	4b04      	ldr	r3, [pc, #16]	@ (8004890 <FLASH_FlushCaches+0x84>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a03      	ldr	r2, [pc, #12]	@ (8004890 <FLASH_FlushCaches+0x84>)
 8004882:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004886:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004888:	bf00      	nop
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr
 8004890:	58004000 	.word	0x58004000

08004894 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004898:	4b05      	ldr	r3, [pc, #20]	@ (80048b0 <FLASH_AcknowledgePageErase+0x1c>)
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	4a04      	ldr	r2, [pc, #16]	@ (80048b0 <FLASH_AcknowledgePageErase+0x1c>)
 800489e:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 80048a2:	f023 0302 	bic.w	r3, r3, #2
 80048a6:	6153      	str	r3, [r2, #20]
#endif
}
 80048a8:	bf00      	nop
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr
 80048b0:	58004000 	.word	0x58004000

080048b4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048c2:	e140      	b.n	8004b46 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	2101      	movs	r1, #1
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	fa01 f303 	lsl.w	r3, r1, r3
 80048d0:	4013      	ands	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 8132 	beq.w	8004b40 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d005      	beq.n	80048f4 <HAL_GPIO_Init+0x40>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d130      	bne.n	8004956 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	2203      	movs	r2, #3
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4013      	ands	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800492a:	2201      	movs	r2, #1
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43db      	mvns	r3, r3
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4013      	ands	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	091b      	lsrs	r3, r3, #4
 8004940:	f003 0201 	and.w	r2, r3, #1
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	2b03      	cmp	r3, #3
 8004960:	d017      	beq.n	8004992 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	2203      	movs	r2, #3
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4013      	ands	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d123      	bne.n	80049e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	08da      	lsrs	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3208      	adds	r2, #8
 80049a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	220f      	movs	r2, #15
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4013      	ands	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	08da      	lsrs	r2, r3, #3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3208      	adds	r2, #8
 80049e0:	6939      	ldr	r1, [r7, #16]
 80049e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	2203      	movs	r2, #3
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	43db      	mvns	r3, r3
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4013      	ands	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f003 0203 	and.w	r2, r3, #3
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 808c 	beq.w	8004b40 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004a28:	4a4e      	ldr	r2, [pc, #312]	@ (8004b64 <HAL_GPIO_Init+0x2b0>)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	089b      	lsrs	r3, r3, #2
 8004a2e:	3302      	adds	r3, #2
 8004a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	2207      	movs	r2, #7
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004a52:	d00d      	beq.n	8004a70 <HAL_GPIO_Init+0x1bc>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a44      	ldr	r2, [pc, #272]	@ (8004b68 <HAL_GPIO_Init+0x2b4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d007      	beq.n	8004a6c <HAL_GPIO_Init+0x1b8>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a43      	ldr	r2, [pc, #268]	@ (8004b6c <HAL_GPIO_Init+0x2b8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d101      	bne.n	8004a68 <HAL_GPIO_Init+0x1b4>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e004      	b.n	8004a72 <HAL_GPIO_Init+0x1be>
 8004a68:	2307      	movs	r3, #7
 8004a6a:	e002      	b.n	8004a72 <HAL_GPIO_Init+0x1be>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <HAL_GPIO_Init+0x1be>
 8004a70:	2300      	movs	r3, #0
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	f002 0203 	and.w	r2, r2, #3
 8004a78:	0092      	lsls	r2, r2, #2
 8004a7a:	4093      	lsls	r3, r2
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a82:	4938      	ldr	r1, [pc, #224]	@ (8004b64 <HAL_GPIO_Init+0x2b0>)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	089b      	lsrs	r3, r3, #2
 8004a88:	3302      	adds	r3, #2
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a90:	4b37      	ldr	r3, [pc, #220]	@ (8004b70 <HAL_GPIO_Init+0x2bc>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ab4:	4a2e      	ldr	r2, [pc, #184]	@ (8004b70 <HAL_GPIO_Init+0x2bc>)
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004aba:	4b2d      	ldr	r3, [pc, #180]	@ (8004b70 <HAL_GPIO_Init+0x2bc>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ade:	4a24      	ldr	r2, [pc, #144]	@ (8004b70 <HAL_GPIO_Init+0x2bc>)
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004ae4:	4b22      	ldr	r3, [pc, #136]	@ (8004b70 <HAL_GPIO_Init+0x2bc>)
 8004ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aea:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	43db      	mvns	r3, r3
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4013      	ands	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004b0a:	4a19      	ldr	r2, [pc, #100]	@ (8004b70 <HAL_GPIO_Init+0x2bc>)
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004b12:	4b17      	ldr	r3, [pc, #92]	@ (8004b70 <HAL_GPIO_Init+0x2bc>)
 8004b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b18:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4013      	ands	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004b38:	4a0d      	ldr	r2, [pc, #52]	@ (8004b70 <HAL_GPIO_Init+0x2bc>)
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	3301      	adds	r3, #1
 8004b44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f47f aeb7 	bne.w	80048c4 <HAL_GPIO_Init+0x10>
  }
}
 8004b56:	bf00      	nop
 8004b58:	bf00      	nop
 8004b5a:	371c      	adds	r7, #28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40010000 	.word	0x40010000
 8004b68:	48000400 	.word	0x48000400
 8004b6c:	48000800 	.word	0x48000800
 8004b70:	58000800 	.word	0x58000800

08004b74 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004b82:	e0af      	b.n	8004ce4 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004b84:	2201      	movs	r2, #1
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 80a2 	beq.w	8004cde <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004b9a:	4a59      	ldr	r2, [pc, #356]	@ (8004d00 <HAL_GPIO_DeInit+0x18c>)
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	089b      	lsrs	r3, r3, #2
 8004ba0:	3302      	adds	r3, #2
 8004ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	2207      	movs	r2, #7
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004bc2:	d00d      	beq.n	8004be0 <HAL_GPIO_DeInit+0x6c>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a4f      	ldr	r2, [pc, #316]	@ (8004d04 <HAL_GPIO_DeInit+0x190>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d007      	beq.n	8004bdc <HAL_GPIO_DeInit+0x68>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a4e      	ldr	r2, [pc, #312]	@ (8004d08 <HAL_GPIO_DeInit+0x194>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d101      	bne.n	8004bd8 <HAL_GPIO_DeInit+0x64>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	e004      	b.n	8004be2 <HAL_GPIO_DeInit+0x6e>
 8004bd8:	2307      	movs	r3, #7
 8004bda:	e002      	b.n	8004be2 <HAL_GPIO_DeInit+0x6e>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <HAL_GPIO_DeInit+0x6e>
 8004be0:	2300      	movs	r3, #0
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	f002 0203 	and.w	r2, r2, #3
 8004be8:	0092      	lsls	r2, r2, #2
 8004bea:	4093      	lsls	r3, r2
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d136      	bne.n	8004c60 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004bf2:	4b46      	ldr	r3, [pc, #280]	@ (8004d0c <HAL_GPIO_DeInit+0x198>)
 8004bf4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	43db      	mvns	r3, r3
 8004bfc:	4943      	ldr	r1, [pc, #268]	@ (8004d0c <HAL_GPIO_DeInit+0x198>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004c04:	4b41      	ldr	r3, [pc, #260]	@ (8004d0c <HAL_GPIO_DeInit+0x198>)
 8004c06:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	493f      	ldr	r1, [pc, #252]	@ (8004d0c <HAL_GPIO_DeInit+0x198>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004c16:	4b3d      	ldr	r3, [pc, #244]	@ (8004d0c <HAL_GPIO_DeInit+0x198>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	493b      	ldr	r1, [pc, #236]	@ (8004d0c <HAL_GPIO_DeInit+0x198>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004c24:	4b39      	ldr	r3, [pc, #228]	@ (8004d0c <HAL_GPIO_DeInit+0x198>)
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	4937      	ldr	r1, [pc, #220]	@ (8004d0c <HAL_GPIO_DeInit+0x198>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f003 0303 	and.w	r3, r3, #3
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	2207      	movs	r2, #7
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004c42:	4a2f      	ldr	r2, [pc, #188]	@ (8004d00 <HAL_GPIO_DeInit+0x18c>)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	089b      	lsrs	r3, r3, #2
 8004c48:	3302      	adds	r3, #2
 8004c4a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	43da      	mvns	r2, r3
 8004c52:	482b      	ldr	r0, [pc, #172]	@ (8004d00 <HAL_GPIO_DeInit+0x18c>)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	089b      	lsrs	r3, r3, #2
 8004c58:	400a      	ands	r2, r1
 8004c5a:	3302      	adds	r3, #2
 8004c5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	2103      	movs	r1, #3
 8004c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	08da      	lsrs	r2, r3, #3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3208      	adds	r2, #8
 8004c7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	220f      	movs	r2, #15
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	08d2      	lsrs	r2, r2, #3
 8004c94:	4019      	ands	r1, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3208      	adds	r2, #8
 8004c9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	2103      	movs	r1, #3
 8004ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cac:	43db      	mvns	r3, r3
 8004cae:	401a      	ands	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	2101      	movs	r1, #1
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	401a      	ands	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	2103      	movs	r1, #3
 8004cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	401a      	ands	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f47f af49 	bne.w	8004b84 <HAL_GPIO_DeInit+0x10>
  }
}
 8004cf2:	bf00      	nop
 8004cf4:	bf00      	nop
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40010000 	.word	0x40010000
 8004d04:	48000400 	.word	0x48000400
 8004d08:	48000800 	.word	0x48000800
 8004d0c:	58000800 	.word	0x58000800

08004d10 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	887b      	ldrh	r3, [r7, #2]
 8004d22:	4013      	ands	r3, r2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
 8004d2c:	e001      	b.n	8004d32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr
	...

08004d40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d4a:	4b08      	ldr	r3, [pc, #32]	@ (8004d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	4013      	ands	r3, r2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d006      	beq.n	8004d64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d56:	4a05      	ldr	r2, [pc, #20]	@ (8004d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d5c:	88fb      	ldrh	r3, [r7, #6]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 f806 	bl	8004d70 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d64:	bf00      	nop
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	58000800 	.word	0x58000800

08004d70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	4603      	mov	r3, r0
 8004d78:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr

08004d84 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d88:	4b04      	ldr	r3, [pc, #16]	@ (8004d9c <HAL_PWR_EnableBkUpAccess+0x18>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a03      	ldr	r2, [pc, #12]	@ (8004d9c <HAL_PWR_EnableBkUpAccess+0x18>)
 8004d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d92:	6013      	str	r3, [r2, #0]
}
 8004d94:	bf00      	nop
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr
 8004d9c:	58000400 	.word	0x58000400

08004da0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10c      	bne.n	8004dcc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004db2:	4b13      	ldr	r3, [pc, #76]	@ (8004e00 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dbe:	d10d      	bne.n	8004ddc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004dc0:	f000 f83c 	bl	8004e3c <HAL_PWREx_DisableLowPowerRunMode>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004dca:	e015      	b.n	8004df8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8004e00 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004dd8:	f000 f822 	bl	8004e20 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004ddc:	4b09      	ldr	r3, [pc, #36]	@ (8004e04 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	4a08      	ldr	r2, [pc, #32]	@ (8004e04 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004de2:	f023 0304 	bic.w	r3, r3, #4
 8004de6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004dee:	bf30      	wfi
 8004df0:	e002      	b.n	8004df8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004df2:	bf40      	sev
    __WFE();
 8004df4:	bf20      	wfe
    __WFE();
 8004df6:	bf20      	wfe
  }
}
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	58000400 	.word	0x58000400
 8004e04:	e000ed00 	.word	0xe000ed00

08004e08 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004e0c:	4b03      	ldr	r3, [pc, #12]	@ (8004e1c <HAL_PWREx_GetVoltageRange+0x14>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	58000400 	.word	0x58000400

08004e20 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004e24:	4b04      	ldr	r3, [pc, #16]	@ (8004e38 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a03      	ldr	r2, [pc, #12]	@ (8004e38 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004e2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e2e:	6013      	str	r3, [r2, #0]
}
 8004e30:	bf00      	nop
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr
 8004e38:	58000400 	.word	0x58000400

08004e3c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004e42:	4b16      	ldr	r3, [pc, #88]	@ (8004e9c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a15      	ldr	r2, [pc, #84]	@ (8004e9c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004e48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e4c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004e4e:	4b14      	ldr	r3, [pc, #80]	@ (8004ea0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2232      	movs	r2, #50	@ 0x32
 8004e54:	fb02 f303 	mul.w	r3, r2, r3
 8004e58:	4a12      	ldr	r2, [pc, #72]	@ (8004ea4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8004e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5e:	0c9b      	lsrs	r3, r3, #18
 8004e60:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004e62:	e002      	b.n	8004e6a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e9c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e76:	d102      	bne.n	8004e7e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f2      	bne.n	8004e64 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004e7e:	4b07      	ldr	r3, [pc, #28]	@ (8004e9c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e8a:	d101      	bne.n	8004e90 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e000      	b.n	8004e92 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr
 8004e9c:	58000400 	.word	0x58000400
 8004ea0:	20000000 	.word	0x20000000
 8004ea4:	431bde83 	.word	0x431bde83

08004ea8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004eb2:	4b10      	ldr	r3, [pc, #64]	@ (8004ef4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f023 0307 	bic.w	r3, r3, #7
 8004eba:	4a0e      	ldr	r2, [pc, #56]	@ (8004ef4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004ebc:	f043 0302 	orr.w	r3, r3, #2
 8004ec0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8004ef8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004ec8:	f043 0304 	orr.w	r3, r3, #4
 8004ecc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004ece:	79fb      	ldrb	r3, [r7, #7]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004ed4:	bf30      	wfi
 8004ed6:	e002      	b.n	8004ede <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004ed8:	bf40      	sev
    __WFE();
 8004eda:	bf20      	wfe
    __WFE();
 8004edc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004ede:	4b06      	ldr	r3, [pc, #24]	@ (8004ef8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	4a05      	ldr	r2, [pc, #20]	@ (8004ef8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004ee4:	f023 0304 	bic.w	r3, r3, #4
 8004ee8:	6113      	str	r3, [r2, #16]
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr
 8004ef4:	58000400 	.word	0x58000400
 8004ef8:	e000ed00 	.word	0xe000ed00

08004efc <LL_PWR_IsEnabledBkUpAccess>:
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004f00:	4b06      	ldr	r3, [pc, #24]	@ (8004f1c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f0c:	d101      	bne.n	8004f12 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr
 8004f1c:	58000400 	.word	0x58000400

08004f20 <LL_RCC_HSE_EnableTcxo>:
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f32:	6013      	str	r3, [r2, #0]
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr

08004f3c <LL_RCC_HSE_DisableTcxo>:
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f4e:	6013      	str	r3, [r2, #0]
}
 8004f50:	bf00      	nop
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr

08004f58 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004f5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f6a:	d101      	bne.n	8004f70 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e000      	b.n	8004f72 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr

08004f7a <LL_RCC_HSE_Enable>:
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f8c:	6013      	str	r3, [r2, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr

08004f96 <LL_RCC_HSE_Disable>:
{
 8004f96:	b480      	push	{r7}
 8004f98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fa8:	6013      	str	r3, [r2, #0]
}
 8004faa:	bf00      	nop
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr

08004fb2 <LL_RCC_HSE_IsReady>:
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004fb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fc4:	d101      	bne.n	8004fca <LL_RCC_HSE_IsReady+0x18>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <LL_RCC_HSE_IsReady+0x1a>
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr

08004fd4 <LL_RCC_HSI_Enable>:
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe6:	6013      	str	r3, [r2, #0]
}
 8004fe8:	bf00      	nop
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr

08004ff0 <LL_RCC_HSI_Disable>:
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ffe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005002:	6013      	str	r3, [r2, #0]
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <LL_RCC_HSI_IsReady>:
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800501a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800501e:	d101      	bne.n	8005024 <LL_RCC_HSI_IsReady+0x18>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <LL_RCC_HSI_IsReady+0x1a>
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr

0800502e <LL_RCC_HSI_SetCalibTrimming>:
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	061b      	lsls	r3, r3, #24
 8005044:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005048:	4313      	orrs	r3, r2
 800504a:	604b      	str	r3, [r1, #4]
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr

08005056 <LL_RCC_LSE_IsReady>:
{
 8005056:	b480      	push	{r7}
 8005058:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800505a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b02      	cmp	r3, #2
 8005068:	d101      	bne.n	800506e <LL_RCC_LSE_IsReady+0x18>
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <LL_RCC_LSE_IsReady+0x1a>
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr

08005078 <LL_RCC_LSI_Enable>:
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800507c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005080:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005084:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005088:	f043 0301 	orr.w	r3, r3, #1
 800508c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr

08005098 <LL_RCC_LSI_Disable>:
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800509c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80050b0:	bf00      	nop
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr

080050b8 <LL_RCC_LSI_IsReady>:
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80050bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d101      	bne.n	80050d0 <LL_RCC_LSI_IsReady+0x18>
 80050cc:	2301      	movs	r3, #1
 80050ce:	e000      	b.n	80050d2 <LL_RCC_LSI_IsReady+0x1a>
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr

080050da <LL_RCC_MSI_Enable>:
{
 80050da:	b480      	push	{r7}
 80050dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80050de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	6013      	str	r3, [r2, #0]
}
 80050ee:	bf00      	nop
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bc80      	pop	{r7}
 80050f4:	4770      	bx	lr

080050f6 <LL_RCC_MSI_Disable>:
{
 80050f6:	b480      	push	{r7}
 80050f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80050fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005104:	f023 0301 	bic.w	r3, r3, #1
 8005108:	6013      	str	r3, [r2, #0]
}
 800510a:	bf00      	nop
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr

08005112 <LL_RCC_MSI_IsReady>:
{
 8005112:	b480      	push	{r7}
 8005114:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005116:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b02      	cmp	r3, #2
 8005122:	d101      	bne.n	8005128 <LL_RCC_MSI_IsReady+0x16>
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <LL_RCC_MSI_IsReady+0x18>
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr

08005132 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005132:	b480      	push	{r7}
 8005134:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b08      	cmp	r3, #8
 8005142:	d101      	bne.n	8005148 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr

08005152 <LL_RCC_MSI_GetRange>:
{
 8005152:	b480      	push	{r7}
 8005154:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005160:	4618      	mov	r0, r3
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr

08005168 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800516c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005170:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005174:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005178:	4618      	mov	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr

08005180 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	021b      	lsls	r3, r3, #8
 8005196:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800519a:	4313      	orrs	r3, r2
 800519c:	604b      	str	r3, [r1, #4]
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <LL_RCC_SetSysClkSource>:
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80051b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f023 0203 	bic.w	r2, r3, #3
 80051ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	608b      	str	r3, [r1, #8]
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bc80      	pop	{r7}
 80051cc:	4770      	bx	lr

080051ce <LL_RCC_GetSysClkSource>:
{
 80051ce:	b480      	push	{r7}
 80051d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80051d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 030c 	and.w	r3, r3, #12
}
 80051dc:	4618      	mov	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr

080051e4 <LL_RCC_SetAHBPrescaler>:
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80051ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	608b      	str	r3, [r1, #8]
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr

0800520a <LL_C2_RCC_SetAHBPrescaler>:
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005212:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005216:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800521a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800521e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4313      	orrs	r3, r2
 8005226:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr

08005234 <LL_RCC_SetAHB3Prescaler>:
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800523c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005240:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005244:	f023 020f 	bic.w	r2, r3, #15
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	091b      	lsrs	r3, r3, #4
 800524c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005250:	4313      	orrs	r3, r2
 8005252:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr

08005260 <LL_RCC_SetAPB1Prescaler>:
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005272:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4313      	orrs	r3, r2
 800527a:	608b      	str	r3, [r1, #8]
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	4770      	bx	lr

08005286 <LL_RCC_SetAPB2Prescaler>:
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800528e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005298:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4313      	orrs	r3, r2
 80052a0:	608b      	str	r3, [r1, #8]
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr

080052ac <LL_RCC_GetAHBPrescaler>:
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80052b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	46bd      	mov	sp, r7
 80052be:	bc80      	pop	{r7}
 80052c0:	4770      	bx	lr

080052c2 <LL_RCC_GetAHB3Prescaler>:
{
 80052c2:	b480      	push	{r7}
 80052c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80052c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr

080052dc <LL_RCC_GetAPB1Prescaler>:
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80052e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr

080052f2 <LL_RCC_GetAPB2Prescaler>:
{
 80052f2:	b480      	push	{r7}
 80052f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80052f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005300:	4618      	mov	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr

08005308 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800530c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005316:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800531a:	6013      	str	r3, [r2, #0]
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr

08005324 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005332:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005336:	6013      	str	r3, [r2, #0]
}
 8005338:	bf00      	nop
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr

08005340 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800534e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005352:	d101      	bne.n	8005358 <LL_RCC_PLL_IsReady+0x18>
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <LL_RCC_PLL_IsReady+0x1a>
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr

08005362 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005362:	b480      	push	{r7}
 8005364:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	0a1b      	lsrs	r3, r3, #8
 800536e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005372:	4618      	mov	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr

0800537a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800537a:	b480      	push	{r7}
 800537c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800537e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005388:	4618      	mov	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr

08005390 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800539e:	4618      	mov	r0, r3
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr

080053a6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80053a6:	b480      	push	{r7}
 80053a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80053aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0303 	and.w	r3, r3, #3
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr

080053bc <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80053c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ce:	d101      	bne.n	80053d4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	46bd      	mov	sp, r7
 80053da:	bc80      	pop	{r7}
 80053dc:	4770      	bx	lr

080053de <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80053de:	b480      	push	{r7}
 80053e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80053e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80053ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053f2:	d101      	bne.n	80053f8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80053f4:	2301      	movs	r3, #1
 80053f6:	e000      	b.n	80053fa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr

08005402 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005402:	b480      	push	{r7}
 8005404:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800540a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800540e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005416:	d101      	bne.n	800541c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005418:	2301      	movs	r3, #1
 800541a:	e000      	b.n	800541e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr

08005426 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005426:	b480      	push	{r7}
 8005428:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800542a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005434:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005438:	d101      	bne.n	800543e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800544c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005456:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800545a:	d101      	bne.n	8005460 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr
	...

0800546c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e36f      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800547e:	f7ff fea6 	bl	80051ce <LL_RCC_GetSysClkSource>
 8005482:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005484:	f7ff ff8f 	bl	80053a6 <LL_RCC_PLL_GetMainSource>
 8005488:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 80c4 	beq.w	8005620 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <HAL_RCC_OscConfig+0x3e>
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	2b0c      	cmp	r3, #12
 80054a2:	d176      	bne.n	8005592 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d173      	bne.n	8005592 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e353      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <HAL_RCC_OscConfig+0x68>
 80054c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054d2:	e006      	b.n	80054e2 <HAL_RCC_OscConfig+0x76>
 80054d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054dc:	091b      	lsrs	r3, r3, #4
 80054de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d222      	bcs.n	800552c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fd5a 	bl	8005fa4 <RCC_SetFlashLatencyFromMSIRange>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e331      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005504:	f043 0308 	orr.w	r3, r3, #8
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005518:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800551c:	4313      	orrs	r3, r2
 800551e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff fe2b 	bl	8005180 <LL_RCC_MSI_SetCalibTrimming>
 800552a:	e021      	b.n	8005570 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800552c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005536:	f043 0308 	orr.w	r3, r3, #8
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800554e:	4313      	orrs	r3, r2
 8005550:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff fe12 	bl	8005180 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fd1f 	bl	8005fa4 <RCC_SetFlashLatencyFromMSIRange>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e2f6      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005570:	f000 fce0 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8005574:	4603      	mov	r3, r0
 8005576:	4aa7      	ldr	r2, [pc, #668]	@ (8005814 <HAL_RCC_OscConfig+0x3a8>)
 8005578:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800557a:	4ba7      	ldr	r3, [pc, #668]	@ (8005818 <HAL_RCC_OscConfig+0x3ac>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f7fd f922 	bl	80027c8 <HAL_InitTick>
 8005584:	4603      	mov	r3, r0
 8005586:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d047      	beq.n	800561e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800558e:	7cfb      	ldrb	r3, [r7, #19]
 8005590:	e2e5      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d02c      	beq.n	80055f4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800559a:	f7ff fd9e 	bl	80050da <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800559e:	f7fc fb17 	bl	8001bd0 <HAL_GetTick>
 80055a2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80055a4:	e008      	b.n	80055b8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055a6:	f7fc fb13 	bl	8001bd0 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e2d2      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80055b8:	f7ff fdab 	bl	8005112 <LL_RCC_MSI_IsReady>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0f1      	beq.n	80055a6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055cc:	f043 0308 	orr.w	r3, r3, #8
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055e4:	4313      	orrs	r3, r2
 80055e6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff fdc7 	bl	8005180 <LL_RCC_MSI_SetCalibTrimming>
 80055f2:	e015      	b.n	8005620 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055f4:	f7ff fd7f 	bl	80050f6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055f8:	f7fc faea 	bl	8001bd0 <HAL_GetTick>
 80055fc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005600:	f7fc fae6 	bl	8001bd0 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e2a5      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005612:	f7ff fd7e 	bl	8005112 <LL_RCC_MSI_IsReady>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1f1      	bne.n	8005600 <HAL_RCC_OscConfig+0x194>
 800561c:	e000      	b.n	8005620 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800561e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d058      	beq.n	80056de <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	2b08      	cmp	r3, #8
 8005630:	d005      	beq.n	800563e <HAL_RCC_OscConfig+0x1d2>
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	2b0c      	cmp	r3, #12
 8005636:	d108      	bne.n	800564a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	2b03      	cmp	r3, #3
 800563c:	d105      	bne.n	800564a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d14b      	bne.n	80056de <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e289      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800564a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800565c:	4313      	orrs	r3, r2
 800565e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005668:	d102      	bne.n	8005670 <HAL_RCC_OscConfig+0x204>
 800566a:	f7ff fc86 	bl	8004f7a <LL_RCC_HSE_Enable>
 800566e:	e00d      	b.n	800568c <HAL_RCC_OscConfig+0x220>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005678:	d104      	bne.n	8005684 <HAL_RCC_OscConfig+0x218>
 800567a:	f7ff fc51 	bl	8004f20 <LL_RCC_HSE_EnableTcxo>
 800567e:	f7ff fc7c 	bl	8004f7a <LL_RCC_HSE_Enable>
 8005682:	e003      	b.n	800568c <HAL_RCC_OscConfig+0x220>
 8005684:	f7ff fc87 	bl	8004f96 <LL_RCC_HSE_Disable>
 8005688:	f7ff fc58 	bl	8004f3c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d012      	beq.n	80056ba <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005694:	f7fc fa9c 	bl	8001bd0 <HAL_GetTick>
 8005698:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800569a:	e008      	b.n	80056ae <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800569c:	f7fc fa98 	bl	8001bd0 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b64      	cmp	r3, #100	@ 0x64
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e257      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80056ae:	f7ff fc80 	bl	8004fb2 <LL_RCC_HSE_IsReady>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0f1      	beq.n	800569c <HAL_RCC_OscConfig+0x230>
 80056b8:	e011      	b.n	80056de <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ba:	f7fc fa89 	bl	8001bd0 <HAL_GetTick>
 80056be:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056c2:	f7fc fa85 	bl	8001bd0 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b64      	cmp	r3, #100	@ 0x64
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e244      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80056d4:	f7ff fc6d 	bl	8004fb2 <LL_RCC_HSE_IsReady>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f1      	bne.n	80056c2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d046      	beq.n	8005778 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d005      	beq.n	80056fc <HAL_RCC_OscConfig+0x290>
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	2b0c      	cmp	r3, #12
 80056f4:	d10e      	bne.n	8005714 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d10b      	bne.n	8005714 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e22a      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff fc8e 	bl	800502e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005712:	e031      	b.n	8005778 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d019      	beq.n	8005750 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800571c:	f7ff fc5a 	bl	8004fd4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005720:	f7fc fa56 	bl	8001bd0 <HAL_GetTick>
 8005724:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005728:	f7fc fa52 	bl	8001bd0 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e211      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800573a:	f7ff fc67 	bl	800500c <LL_RCC_HSI_IsReady>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0f1      	beq.n	8005728 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff fc70 	bl	800502e <LL_RCC_HSI_SetCalibTrimming>
 800574e:	e013      	b.n	8005778 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005750:	f7ff fc4e 	bl	8004ff0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005754:	f7fc fa3c 	bl	8001bd0 <HAL_GetTick>
 8005758:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800575c:	f7fc fa38 	bl	8001bd0 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e1f7      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800576e:	f7ff fc4d 	bl	800500c <LL_RCC_HSI_IsReady>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1f1      	bne.n	800575c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0308 	and.w	r3, r3, #8
 8005780:	2b00      	cmp	r3, #0
 8005782:	d06e      	beq.n	8005862 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d056      	beq.n	800583a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800578c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005790:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005794:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69da      	ldr	r2, [r3, #28]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f003 0310 	and.w	r3, r3, #16
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d031      	beq.n	8005808 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d006      	beq.n	80057bc <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e1d0      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d013      	beq.n	80057ee <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80057c6:	f7ff fc67 	bl	8005098 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057ca:	f7fc fa01 	bl	8001bd0 <HAL_GetTick>
 80057ce:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80057d0:	e008      	b.n	80057e4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057d2:	f7fc f9fd 	bl	8001bd0 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b11      	cmp	r3, #17
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e1bc      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80057e4:	f7ff fc68 	bl	80050b8 <LL_RCC_LSI_IsReady>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f1      	bne.n	80057d2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80057ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057f6:	f023 0210 	bic.w	r2, r3, #16
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005808:	f7ff fc36 	bl	8005078 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800580c:	f7fc f9e0 	bl	8001bd0 <HAL_GetTick>
 8005810:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005812:	e00c      	b.n	800582e <HAL_RCC_OscConfig+0x3c2>
 8005814:	20000000 	.word	0x20000000
 8005818:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800581c:	f7fc f9d8 	bl	8001bd0 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b11      	cmp	r3, #17
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e197      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800582e:	f7ff fc43 	bl	80050b8 <LL_RCC_LSI_IsReady>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f1      	beq.n	800581c <HAL_RCC_OscConfig+0x3b0>
 8005838:	e013      	b.n	8005862 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800583a:	f7ff fc2d 	bl	8005098 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800583e:	f7fc f9c7 	bl	8001bd0 <HAL_GetTick>
 8005842:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005846:	f7fc f9c3 	bl	8001bd0 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b11      	cmp	r3, #17
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e182      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005858:	f7ff fc2e 	bl	80050b8 <LL_RCC_LSI_IsReady>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f1      	bne.n	8005846 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0304 	and.w	r3, r3, #4
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 80d8 	beq.w	8005a20 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005870:	f7ff fb44 	bl	8004efc <LL_PWR_IsEnabledBkUpAccess>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d113      	bne.n	80058a2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800587a:	f7ff fa83 	bl	8004d84 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800587e:	f7fc f9a7 	bl	8001bd0 <HAL_GetTick>
 8005882:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005884:	e008      	b.n	8005898 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005886:	f7fc f9a3 	bl	8001bd0 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e162      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005898:	f7ff fb30 	bl	8004efc <LL_PWR_IsEnabledBkUpAccess>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f1      	beq.n	8005886 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d07b      	beq.n	80059a2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b85      	cmp	r3, #133	@ 0x85
 80058b0:	d003      	beq.n	80058ba <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b05      	cmp	r3, #5
 80058b8:	d109      	bne.n	80058ce <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80058ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058c6:	f043 0304 	orr.w	r3, r3, #4
 80058ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058ce:	f7fc f97f 	bl	8001bd0 <HAL_GetTick>
 80058d2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058e0:	f043 0301 	orr.w	r3, r3, #1
 80058e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80058e8:	e00a      	b.n	8005900 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ea:	f7fc f971 	bl	8001bd0 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e12e      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005900:	f7ff fba9 	bl	8005056 <LL_RCC_LSE_IsReady>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0ef      	beq.n	80058ea <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	2b81      	cmp	r3, #129	@ 0x81
 8005910:	d003      	beq.n	800591a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	2b85      	cmp	r3, #133	@ 0x85
 8005918:	d121      	bne.n	800595e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591a:	f7fc f959 	bl	8001bd0 <HAL_GetTick>
 800591e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005928:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800592c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005934:	e00a      	b.n	800594c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005936:	f7fc f94b 	bl	8001bd0 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005944:	4293      	cmp	r3, r2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e108      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800594c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0ec      	beq.n	8005936 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800595c:	e060      	b.n	8005a20 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800595e:	f7fc f937 	bl	8001bd0 <HAL_GetTick>
 8005962:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800596c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005970:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005978:	e00a      	b.n	8005990 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800597a:	f7fc f929 	bl	8001bd0 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005988:	4293      	cmp	r3, r2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e0e6      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1ec      	bne.n	800597a <HAL_RCC_OscConfig+0x50e>
 80059a0:	e03e      	b.n	8005a20 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059a2:	f7fc f915 	bl	8001bd0 <HAL_GetTick>
 80059a6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80059a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80059bc:	e00a      	b.n	80059d4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059be:	f7fc f907 	bl	8001bd0 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d901      	bls.n	80059d4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e0c4      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80059d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1ec      	bne.n	80059be <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059e4:	f7fc f8f4 	bl	8001bd0 <HAL_GetTick>
 80059e8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80059ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059f6:	f023 0301 	bic.w	r3, r3, #1
 80059fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80059fe:	e00a      	b.n	8005a16 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a00:	f7fc f8e6 	bl	8001bd0 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e0a3      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005a16:	f7ff fb1e 	bl	8005056 <LL_RCC_LSE_IsReady>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1ef      	bne.n	8005a00 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 8099 	beq.w	8005b5c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	2b0c      	cmp	r3, #12
 8005a2e:	d06c      	beq.n	8005b0a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d14b      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a38:	f7ff fc74 	bl	8005324 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3c:	f7fc f8c8 	bl	8001bd0 <HAL_GetTick>
 8005a40:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a44:	f7fc f8c4 	bl	8001bd0 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b0a      	cmp	r3, #10
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e083      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005a56:	f7ff fc73 	bl	8005340 <LL_RCC_PLL_IsReady>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1f1      	bne.n	8005a44 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	4b40      	ldr	r3, [pc, #256]	@ (8005b68 <HAL_RCC_OscConfig+0x6fc>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a72:	4311      	orrs	r1, r2
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a78:	0212      	lsls	r2, r2, #8
 8005a7a:	4311      	orrs	r1, r2
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a80:	4311      	orrs	r1, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a86:	4311      	orrs	r1, r2
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a96:	f7ff fc37 	bl	8005308 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aa8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aaa:	f7fc f891 	bl	8001bd0 <HAL_GetTick>
 8005aae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005ab0:	e008      	b.n	8005ac4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab2:	f7fc f88d 	bl	8001bd0 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b0a      	cmp	r3, #10
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e04c      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005ac4:	f7ff fc3c 	bl	8005340 <LL_RCC_PLL_IsReady>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0f1      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x646>
 8005ace:	e045      	b.n	8005b5c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad0:	f7ff fc28 	bl	8005324 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad4:	f7fc f87c 	bl	8001bd0 <HAL_GetTick>
 8005ad8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005adc:	f7fc f878 	bl	8001bd0 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b0a      	cmp	r3, #10
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e037      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005aee:	f7ff fc27 	bl	8005340 <LL_RCC_PLL_IsReady>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1f1      	bne.n	8005adc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b02:	4b1a      	ldr	r3, [pc, #104]	@ (8005b6c <HAL_RCC_OscConfig+0x700>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	60cb      	str	r3, [r1, #12]
 8005b08:	e028      	b.n	8005b5c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e023      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	f003 0203 	and.w	r2, r3, #3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d115      	bne.n	8005b58 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d10e      	bne.n	8005b58 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b44:	021b      	lsls	r3, r3, #8
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d106      	bne.n	8005b58 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d001      	beq.n	8005b5c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e000      	b.n	8005b5e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	11c1808c 	.word	0x11c1808c
 8005b6c:	eefefffc 	.word	0xeefefffc

08005b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e12c      	b.n	8005dde <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b84:	4b98      	ldr	r3, [pc, #608]	@ (8005de8 <HAL_RCC_ClockConfig+0x278>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0307 	and.w	r3, r3, #7
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d91b      	bls.n	8005bca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b92:	4b95      	ldr	r3, [pc, #596]	@ (8005de8 <HAL_RCC_ClockConfig+0x278>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f023 0207 	bic.w	r2, r3, #7
 8005b9a:	4993      	ldr	r1, [pc, #588]	@ (8005de8 <HAL_RCC_ClockConfig+0x278>)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ba2:	f7fc f815 	bl	8001bd0 <HAL_GetTick>
 8005ba6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005baa:	f7fc f811 	bl	8001bd0 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e110      	b.n	8005dde <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bbc:	4b8a      	ldr	r3, [pc, #552]	@ (8005de8 <HAL_RCC_ClockConfig+0x278>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d1ef      	bne.n	8005baa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d016      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff fb02 	bl	80051e4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005be0:	f7fb fff6 	bl	8001bd0 <HAL_GetTick>
 8005be4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005be8:	f7fb fff2 	bl	8001bd0 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e0f1      	b.n	8005dde <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005bfa:	f7ff fbdf 	bl	80053bc <LL_RCC_IsActiveFlag_HPRE>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0f1      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d016      	beq.n	8005c3e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff faf8 	bl	800520a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c1a:	f7fb ffd9 	bl	8001bd0 <HAL_GetTick>
 8005c1e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005c20:	e008      	b.n	8005c34 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c22:	f7fb ffd5 	bl	8001bd0 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e0d4      	b.n	8005dde <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005c34:	f7ff fbd3 	bl	80053de <LL_RCC_IsActiveFlag_C2HPRE>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0f1      	beq.n	8005c22 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d016      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff faf0 	bl	8005234 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c54:	f7fb ffbc 	bl	8001bd0 <HAL_GetTick>
 8005c58:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c5c:	f7fb ffb8 	bl	8001bd0 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e0b7      	b.n	8005dde <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c6e:	f7ff fbc8 	bl	8005402 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0f1      	beq.n	8005c5c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d016      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff fae9 	bl	8005260 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c8e:	f7fb ff9f 	bl	8001bd0 <HAL_GetTick>
 8005c92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c94:	e008      	b.n	8005ca8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c96:	f7fb ff9b 	bl	8001bd0 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e09a      	b.n	8005dde <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005ca8:	f7ff fbbd 	bl	8005426 <LL_RCC_IsActiveFlag_PPRE1>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0f1      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0308 	and.w	r3, r3, #8
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d017      	beq.n	8005cee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff fade 	bl	8005286 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005cca:	f7fb ff81 	bl	8001bd0 <HAL_GetTick>
 8005cce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005cd0:	e008      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005cd2:	f7fb ff7d 	bl	8001bd0 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e07c      	b.n	8005dde <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005ce4:	f7ff fbb0 	bl	8005448 <LL_RCC_IsActiveFlag_PPRE2>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0f1      	beq.n	8005cd2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d043      	beq.n	8005d82 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d106      	bne.n	8005d10 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005d02:	f7ff f956 	bl	8004fb2 <LL_RCC_HSE_IsReady>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d11e      	bne.n	8005d4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e066      	b.n	8005dde <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d106      	bne.n	8005d26 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005d18:	f7ff fb12 	bl	8005340 <LL_RCC_PLL_IsReady>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d113      	bne.n	8005d4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e05b      	b.n	8005dde <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d106      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005d2e:	f7ff f9f0 	bl	8005112 <LL_RCC_MSI_IsReady>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d108      	bne.n	8005d4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e050      	b.n	8005dde <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005d3c:	f7ff f966 	bl	800500c <LL_RCC_HSI_IsReady>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e049      	b.n	8005dde <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff fa2a 	bl	80051a8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d54:	f7fb ff3c 	bl	8001bd0 <HAL_GetTick>
 8005d58:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5a:	e00a      	b.n	8005d72 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d5c:	f7fb ff38 	bl	8001bd0 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e035      	b.n	8005dde <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d72:	f7ff fa2c 	bl	80051ce <LL_RCC_GetSysClkSource>
 8005d76:	4602      	mov	r2, r0
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d1ec      	bne.n	8005d5c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d82:	4b19      	ldr	r3, [pc, #100]	@ (8005de8 <HAL_RCC_ClockConfig+0x278>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d21b      	bcs.n	8005dc8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d90:	4b15      	ldr	r3, [pc, #84]	@ (8005de8 <HAL_RCC_ClockConfig+0x278>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f023 0207 	bic.w	r2, r3, #7
 8005d98:	4913      	ldr	r1, [pc, #76]	@ (8005de8 <HAL_RCC_ClockConfig+0x278>)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005da0:	f7fb ff16 	bl	8001bd0 <HAL_GetTick>
 8005da4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005da8:	f7fb ff12 	bl	8001bd0 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e011      	b.n	8005dde <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dba:	4b0b      	ldr	r3, [pc, #44]	@ (8005de8 <HAL_RCC_ClockConfig+0x278>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d1ef      	bne.n	8005da8 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005dc8:	f000 f8b4 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	4a07      	ldr	r2, [pc, #28]	@ (8005dec <HAL_RCC_ClockConfig+0x27c>)
 8005dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8005dd2:	4b07      	ldr	r3, [pc, #28]	@ (8005df0 <HAL_RCC_ClockConfig+0x280>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fc fcf6 	bl	80027c8 <HAL_InitTick>
 8005ddc:	4603      	mov	r3, r0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	58004000 	.word	0x58004000
 8005dec:	20000000 	.word	0x20000000
 8005df0:	20000004 	.word	0x20000004

08005df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005df4:	b590      	push	{r4, r7, lr}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e02:	f7ff f9e4 	bl	80051ce <LL_RCC_GetSysClkSource>
 8005e06:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e08:	f7ff facd 	bl	80053a6 <LL_RCC_PLL_GetMainSource>
 8005e0c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d005      	beq.n	8005e20 <HAL_RCC_GetSysClockFreq+0x2c>
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b0c      	cmp	r3, #12
 8005e18:	d139      	bne.n	8005e8e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d136      	bne.n	8005e8e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005e20:	f7ff f987 	bl	8005132 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d115      	bne.n	8005e56 <HAL_RCC_GetSysClockFreq+0x62>
 8005e2a:	f7ff f982 	bl	8005132 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d106      	bne.n	8005e42 <HAL_RCC_GetSysClockFreq+0x4e>
 8005e34:	f7ff f98d 	bl	8005152 <LL_RCC_MSI_GetRange>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	0a1b      	lsrs	r3, r3, #8
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	e005      	b.n	8005e4e <HAL_RCC_GetSysClockFreq+0x5a>
 8005e42:	f7ff f991 	bl	8005168 <LL_RCC_MSI_GetRangeAfterStandby>
 8005e46:	4603      	mov	r3, r0
 8005e48:	0a1b      	lsrs	r3, r3, #8
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	4a36      	ldr	r2, [pc, #216]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x134>)
 8005e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e54:	e014      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0x8c>
 8005e56:	f7ff f96c 	bl	8005132 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d106      	bne.n	8005e6e <HAL_RCC_GetSysClockFreq+0x7a>
 8005e60:	f7ff f977 	bl	8005152 <LL_RCC_MSI_GetRange>
 8005e64:	4603      	mov	r3, r0
 8005e66:	091b      	lsrs	r3, r3, #4
 8005e68:	f003 030f 	and.w	r3, r3, #15
 8005e6c:	e005      	b.n	8005e7a <HAL_RCC_GetSysClockFreq+0x86>
 8005e6e:	f7ff f97b 	bl	8005168 <LL_RCC_MSI_GetRangeAfterStandby>
 8005e72:	4603      	mov	r3, r0
 8005e74:	091b      	lsrs	r3, r3, #4
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	4a2b      	ldr	r2, [pc, #172]	@ (8005f28 <HAL_RCC_GetSysClockFreq+0x134>)
 8005e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e80:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d115      	bne.n	8005eb4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e8c:	e012      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d102      	bne.n	8005e9a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e94:	4b25      	ldr	r3, [pc, #148]	@ (8005f2c <HAL_RCC_GetSysClockFreq+0x138>)
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	e00c      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	d109      	bne.n	8005eb4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005ea0:	f7ff f85a 	bl	8004f58 <LL_RCC_HSE_IsEnabledDiv2>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d102      	bne.n	8005eb0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005eaa:	4b20      	ldr	r3, [pc, #128]	@ (8005f2c <HAL_RCC_GetSysClockFreq+0x138>)
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	e001      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8005f30 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005eb2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005eb4:	f7ff f98b 	bl	80051ce <LL_RCC_GetSysClkSource>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b0c      	cmp	r3, #12
 8005ebc:	d12f      	bne.n	8005f1e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005ebe:	f7ff fa72 	bl	80053a6 <LL_RCC_PLL_GetMainSource>
 8005ec2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d003      	beq.n	8005ed2 <HAL_RCC_GetSysClockFreq+0xde>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d003      	beq.n	8005ed8 <HAL_RCC_GetSysClockFreq+0xe4>
 8005ed0:	e00d      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005ed2:	4b16      	ldr	r3, [pc, #88]	@ (8005f2c <HAL_RCC_GetSysClockFreq+0x138>)
 8005ed4:	60fb      	str	r3, [r7, #12]
        break;
 8005ed6:	e00d      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005ed8:	f7ff f83e 	bl	8004f58 <LL_RCC_HSE_IsEnabledDiv2>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d102      	bne.n	8005ee8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005ee2:	4b12      	ldr	r3, [pc, #72]	@ (8005f2c <HAL_RCC_GetSysClockFreq+0x138>)
 8005ee4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005ee6:	e005      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005ee8:	4b11      	ldr	r3, [pc, #68]	@ (8005f30 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005eea:	60fb      	str	r3, [r7, #12]
        break;
 8005eec:	e002      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	60fb      	str	r3, [r7, #12]
        break;
 8005ef2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005ef4:	f7ff fa35 	bl	8005362 <LL_RCC_PLL_GetN>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	fb03 f402 	mul.w	r4, r3, r2
 8005f00:	f7ff fa46 	bl	8005390 <LL_RCC_PLL_GetDivider>
 8005f04:	4603      	mov	r3, r0
 8005f06:	091b      	lsrs	r3, r3, #4
 8005f08:	3301      	adds	r3, #1
 8005f0a:	fbb4 f4f3 	udiv	r4, r4, r3
 8005f0e:	f7ff fa34 	bl	800537a <LL_RCC_PLL_GetR>
 8005f12:	4603      	mov	r3, r0
 8005f14:	0f5b      	lsrs	r3, r3, #29
 8005f16:	3301      	adds	r3, #1
 8005f18:	fbb4 f3f3 	udiv	r3, r4, r3
 8005f1c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005f1e:	697b      	ldr	r3, [r7, #20]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd90      	pop	{r4, r7, pc}
 8005f28:	0801d364 	.word	0x0801d364
 8005f2c:	00f42400 	.word	0x00f42400
 8005f30:	01e84800 	.word	0x01e84800

08005f34 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f34:	b598      	push	{r3, r4, r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005f38:	f7ff ff5c 	bl	8005df4 <HAL_RCC_GetSysClockFreq>
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	f7ff f9b5 	bl	80052ac <LL_RCC_GetAHBPrescaler>
 8005f42:	4603      	mov	r3, r0
 8005f44:	091b      	lsrs	r3, r3, #4
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	4a03      	ldr	r2, [pc, #12]	@ (8005f58 <HAL_RCC_GetHCLKFreq+0x24>)
 8005f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f50:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	bd98      	pop	{r3, r4, r7, pc}
 8005f58:	0801d304 	.word	0x0801d304

08005f5c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f5c:	b598      	push	{r3, r4, r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005f60:	f7ff ffe8 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8005f64:	4604      	mov	r4, r0
 8005f66:	f7ff f9b9 	bl	80052dc <LL_RCC_GetAPB1Prescaler>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	0a1b      	lsrs	r3, r3, #8
 8005f6e:	4a03      	ldr	r2, [pc, #12]	@ (8005f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f74:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	bd98      	pop	{r3, r4, r7, pc}
 8005f7c:	0801d344 	.word	0x0801d344

08005f80 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f80:	b598      	push	{r3, r4, r7, lr}
 8005f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005f84:	f7ff ffd6 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8005f88:	4604      	mov	r4, r0
 8005f8a:	f7ff f9b2 	bl	80052f2 <LL_RCC_GetAPB2Prescaler>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	0adb      	lsrs	r3, r3, #11
 8005f92:	4a03      	ldr	r2, [pc, #12]	@ (8005fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f98:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	bd98      	pop	{r3, r4, r7, pc}
 8005fa0:	0801d344 	.word	0x0801d344

08005fa4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005fa4:	b590      	push	{r4, r7, lr}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	091b      	lsrs	r3, r3, #4
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	4a10      	ldr	r2, [pc, #64]	@ (8005ff8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fba:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005fbc:	f7ff f981 	bl	80052c2 <LL_RCC_GetAHB3Prescaler>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	091b      	lsrs	r3, r3, #4
 8005fc4:	f003 030f 	and.w	r3, r3, #15
 8005fc8:	4a0c      	ldr	r2, [pc, #48]	@ (8005ffc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	4a09      	ldr	r2, [pc, #36]	@ (8006000 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	0c9c      	lsrs	r4, r3, #18
 8005fe0:	f7fe ff12 	bl	8004e08 <HAL_PWREx_GetVoltageRange>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 f80b 	bl	8006004 <RCC_SetFlashLatency>
 8005fee:	4603      	mov	r3, r0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd90      	pop	{r4, r7, pc}
 8005ff8:	0801d364 	.word	0x0801d364
 8005ffc:	0801d304 	.word	0x0801d304
 8006000:	431bde83 	.word	0x431bde83

08006004 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08e      	sub	sp, #56	@ 0x38
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800600e:	4a3a      	ldr	r2, [pc, #232]	@ (80060f8 <RCC_SetFlashLatency+0xf4>)
 8006010:	f107 0320 	add.w	r3, r7, #32
 8006014:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006018:	6018      	str	r0, [r3, #0]
 800601a:	3304      	adds	r3, #4
 800601c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800601e:	4a37      	ldr	r2, [pc, #220]	@ (80060fc <RCC_SetFlashLatency+0xf8>)
 8006020:	f107 0318 	add.w	r3, r7, #24
 8006024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006028:	6018      	str	r0, [r3, #0]
 800602a:	3304      	adds	r3, #4
 800602c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800602e:	4a34      	ldr	r2, [pc, #208]	@ (8006100 <RCC_SetFlashLatency+0xfc>)
 8006030:	f107 030c 	add.w	r3, r7, #12
 8006034:	ca07      	ldmia	r2, {r0, r1, r2}
 8006036:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800603a:	2300      	movs	r3, #0
 800603c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006044:	d11b      	bne.n	800607e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006046:	2300      	movs	r3, #0
 8006048:	633b      	str	r3, [r7, #48]	@ 0x30
 800604a:	e014      	b.n	8006076 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800604c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	3338      	adds	r3, #56	@ 0x38
 8006052:	443b      	add	r3, r7
 8006054:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006058:	461a      	mov	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4293      	cmp	r3, r2
 800605e:	d807      	bhi.n	8006070 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	3338      	adds	r3, #56	@ 0x38
 8006066:	443b      	add	r3, r7
 8006068:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800606c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800606e:	e021      	b.n	80060b4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006072:	3301      	adds	r3, #1
 8006074:	633b      	str	r3, [r7, #48]	@ 0x30
 8006076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006078:	2b02      	cmp	r3, #2
 800607a:	d9e7      	bls.n	800604c <RCC_SetFlashLatency+0x48>
 800607c:	e01a      	b.n	80060b4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800607e:	2300      	movs	r3, #0
 8006080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006082:	e014      	b.n	80060ae <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	3338      	adds	r3, #56	@ 0x38
 800608a:	443b      	add	r3, r7
 800608c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006090:	461a      	mov	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4293      	cmp	r3, r2
 8006096:	d807      	bhi.n	80060a8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	3338      	adds	r3, #56	@ 0x38
 800609e:	443b      	add	r3, r7
 80060a0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80060a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060a6:	e005      	b.n	80060b4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80060a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060aa:	3301      	adds	r3, #1
 80060ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d9e7      	bls.n	8006084 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80060b4:	4b13      	ldr	r3, [pc, #76]	@ (8006104 <RCC_SetFlashLatency+0x100>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f023 0207 	bic.w	r2, r3, #7
 80060bc:	4911      	ldr	r1, [pc, #68]	@ (8006104 <RCC_SetFlashLatency+0x100>)
 80060be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c0:	4313      	orrs	r3, r2
 80060c2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060c4:	f7fb fd84 	bl	8001bd0 <HAL_GetTick>
 80060c8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80060ca:	e008      	b.n	80060de <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80060cc:	f7fb fd80 	bl	8001bd0 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d901      	bls.n	80060de <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e007      	b.n	80060ee <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80060de:	4b09      	ldr	r3, [pc, #36]	@ (8006104 <RCC_SetFlashLatency+0x100>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d1ef      	bne.n	80060cc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3738      	adds	r7, #56	@ 0x38
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	0801ce08 	.word	0x0801ce08
 80060fc:	0801ce10 	.word	0x0801ce10
 8006100:	0801ce18 	.word	0x0801ce18
 8006104:	58004000 	.word	0x58004000

08006108 <LL_RCC_LSE_IsReady>:
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800610c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b02      	cmp	r3, #2
 800611a:	d101      	bne.n	8006120 <LL_RCC_LSE_IsReady+0x18>
 800611c:	2301      	movs	r3, #1
 800611e:	e000      	b.n	8006122 <LL_RCC_LSE_IsReady+0x1a>
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	46bd      	mov	sp, r7
 8006126:	bc80      	pop	{r7}
 8006128:	4770      	bx	lr

0800612a <LL_RCC_SetUSARTClockSource>:
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006136:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	0c1b      	lsrs	r3, r3, #16
 800613e:	43db      	mvns	r3, r3
 8006140:	401a      	ands	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	b29b      	uxth	r3, r3
 8006146:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr

0800615a <LL_RCC_SetI2SClockSource>:
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800616a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800616e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4313      	orrs	r3, r2
 8006176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800617a:	bf00      	nop
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	bc80      	pop	{r7}
 8006182:	4770      	bx	lr

08006184 <LL_RCC_SetLPUARTClockSource>:
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800618c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006194:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006198:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4313      	orrs	r3, r2
 80061a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bc80      	pop	{r7}
 80061ac:	4770      	bx	lr

080061ae <LL_RCC_SetI2CClockSource>:
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80061b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	091b      	lsrs	r3, r3, #4
 80061c2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80061c6:	43db      	mvns	r3, r3
 80061c8:	401a      	ands	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80061d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr

080061e6 <LL_RCC_SetLPTIMClockSource>:
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80061ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	0c1b      	lsrs	r3, r3, #16
 80061fa:	041b      	lsls	r3, r3, #16
 80061fc:	43db      	mvns	r3, r3
 80061fe:	401a      	ands	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	041b      	lsls	r3, r3, #16
 8006204:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	bc80      	pop	{r7}
 8006216:	4770      	bx	lr

08006218 <LL_RCC_SetRNGClockSource>:
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006228:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800622c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4313      	orrs	r3, r2
 8006234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	4770      	bx	lr

08006242 <LL_RCC_SetADCClockSource>:
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800624a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800624e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006252:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006256:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4313      	orrs	r3, r2
 800625e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr

0800626c <LL_RCC_SetRTCClockSource>:
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006280:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4313      	orrs	r3, r2
 8006288:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr

08006296 <LL_RCC_GetRTCClockSource>:
{
 8006296:	b480      	push	{r7}
 8006298:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800629a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800629e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr

080062ae <LL_RCC_ForceBackupDomainReset>:
{
 80062ae:	b480      	push	{r7}
 80062b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80062b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80062c6:	bf00      	nop
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bc80      	pop	{r7}
 80062cc:	4770      	bx	lr

080062ce <LL_RCC_ReleaseBackupDomainReset>:
{
 80062ce:	b480      	push	{r7}
 80062d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80062d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80062e6:	bf00      	nop
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bc80      	pop	{r7}
 80062ec:	4770      	bx	lr
	...

080062f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80062fc:	2300      	movs	r3, #0
 80062fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006300:	2300      	movs	r3, #0
 8006302:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d058      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006310:	f7fe fd38 	bl	8004d84 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006314:	f7fb fc5c 	bl	8001bd0 <HAL_GetTick>
 8006318:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800631a:	e009      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800631c:	f7fb fc58 	bl	8001bd0 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d902      	bls.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	74fb      	strb	r3, [r7, #19]
        break;
 800632e:	e006      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006330:	4b7b      	ldr	r3, [pc, #492]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800633c:	d1ee      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800633e:	7cfb      	ldrb	r3, [r7, #19]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d13c      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006344:	f7ff ffa7 	bl	8006296 <LL_RCC_GetRTCClockSource>
 8006348:	4602      	mov	r2, r0
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800634e:	429a      	cmp	r2, r3
 8006350:	d00f      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800635a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800635e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006360:	f7ff ffa5 	bl	80062ae <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006364:	f7ff ffb3 	bl	80062ce <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006368:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d014      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637c:	f7fb fc28 	bl	8001bd0 <HAL_GetTick>
 8006380:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006382:	e00b      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006384:	f7fb fc24 	bl	8001bd0 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006392:	4293      	cmp	r3, r2
 8006394:	d902      	bls.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	74fb      	strb	r3, [r7, #19]
            break;
 800639a:	e004      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800639c:	f7ff feb4 	bl	8006108 <LL_RCC_LSE_IsReady>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d1ee      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80063a6:	7cfb      	ldrb	r3, [r7, #19]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d105      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff ff5b 	bl	800626c <LL_RCC_SetRTCClockSource>
 80063b6:	e004      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063b8:	7cfb      	ldrb	r3, [r7, #19]
 80063ba:	74bb      	strb	r3, [r7, #18]
 80063bc:	e001      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063be:	7cfb      	ldrb	r3, [r7, #19]
 80063c0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d004      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff fea9 	bl	800612a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d004      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff fe9e 	bl	800612a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d004      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff fec0 	bl	8006184 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800640c:	2b00      	cmp	r3, #0
 800640e:	d004      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff fee6 	bl	80061e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006422:	2b00      	cmp	r3, #0
 8006424:	d004      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff fedb 	bl	80061e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006438:	2b00      	cmp	r3, #0
 800643a:	d004      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006440:	4618      	mov	r0, r3
 8006442:	f7ff fed0 	bl	80061e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	d004      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff fea9 	bl	80061ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff fe9e 	bl	80061ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d004      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff fe93 	bl	80061ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0310 	and.w	r3, r3, #16
 8006490:	2b00      	cmp	r3, #0
 8006492:	d011      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff fe5e 	bl	800615a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064a6:	d107      	bne.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80064a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d010      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff fea5 	bl	8006218 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d107      	bne.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80064d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064e4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d011      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff fea3 	bl	8006242 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006504:	d107      	bne.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006506:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006514:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006516:	7cbb      	ldrb	r3, [r7, #18]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	58000400 	.word	0x58000400

08006524 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d071      	beq.n	800661a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7fb f88e 	bl	800166c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006558:	4b32      	ldr	r3, [pc, #200]	@ (8006624 <HAL_RTC_Init+0x100>)
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b10      	cmp	r3, #16
 8006562:	d051      	beq.n	8006608 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006564:	4b2f      	ldr	r3, [pc, #188]	@ (8006624 <HAL_RTC_Init+0x100>)
 8006566:	22ca      	movs	r2, #202	@ 0xca
 8006568:	625a      	str	r2, [r3, #36]	@ 0x24
 800656a:	4b2e      	ldr	r3, [pc, #184]	@ (8006624 <HAL_RTC_Init+0x100>)
 800656c:	2253      	movs	r2, #83	@ 0x53
 800656e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fa11 	bl	8006998 <RTC_EnterInitMode>
 8006576:	4603      	mov	r3, r0
 8006578:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d13f      	bne.n	8006600 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006580:	4b28      	ldr	r3, [pc, #160]	@ (8006624 <HAL_RTC_Init+0x100>)
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	4a27      	ldr	r2, [pc, #156]	@ (8006624 <HAL_RTC_Init+0x100>)
 8006586:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800658a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800658e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006590:	4b24      	ldr	r3, [pc, #144]	@ (8006624 <HAL_RTC_Init+0x100>)
 8006592:	699a      	ldr	r2, [r3, #24]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6859      	ldr	r1, [r3, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	4319      	orrs	r1, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	430b      	orrs	r3, r1
 80065a4:	491f      	ldr	r1, [pc, #124]	@ (8006624 <HAL_RTC_Init+0x100>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	041b      	lsls	r3, r3, #16
 80065b4:	491b      	ldr	r1, [pc, #108]	@ (8006624 <HAL_RTC_Init+0x100>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80065ba:	4b1a      	ldr	r3, [pc, #104]	@ (8006624 <HAL_RTC_Init+0x100>)
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ca:	430b      	orrs	r3, r1
 80065cc:	4915      	ldr	r1, [pc, #84]	@ (8006624 <HAL_RTC_Init+0x100>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fa14 	bl	8006a00 <RTC_ExitInitMode>
 80065d8:	4603      	mov	r3, r0
 80065da:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10e      	bne.n	8006600 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80065e2:	4b10      	ldr	r3, [pc, #64]	@ (8006624 <HAL_RTC_Init+0x100>)
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a19      	ldr	r1, [r3, #32]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	4319      	orrs	r1, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	430b      	orrs	r3, r1
 80065fa:	490a      	ldr	r1, [pc, #40]	@ (8006624 <HAL_RTC_Init+0x100>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006600:	4b08      	ldr	r3, [pc, #32]	@ (8006624 <HAL_RTC_Init+0x100>)
 8006602:	22ff      	movs	r2, #255	@ 0xff
 8006604:	625a      	str	r2, [r3, #36]	@ 0x24
 8006606:	e001      	b.n	800660c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d103      	bne.n	800661a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800661a:	7bfb      	ldrb	r3, [r7, #15]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40002800 	.word	0x40002800

08006628 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006628:	b590      	push	{r4, r7, lr}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800663e:	2b01      	cmp	r3, #1
 8006640:	d101      	bne.n	8006646 <HAL_RTC_SetAlarm_IT+0x1e>
 8006642:	2302      	movs	r3, #2
 8006644:	e0f3      	b.n	800682e <HAL_RTC_SetAlarm_IT+0x206>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2202      	movs	r2, #2
 8006652:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006656:	4b78      	ldr	r3, [pc, #480]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800665e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006666:	d06a      	beq.n	800673e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d13a      	bne.n	80066e4 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800666e:	4b72      	ldr	r3, [pc, #456]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006676:	2b00      	cmp	r3, #0
 8006678:	d102      	bne.n	8006680 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2200      	movs	r2, #0
 800667e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	4618      	mov	r0, r3
 800668e:	f000 f9f5 	bl	8006a7c <RTC_ByteToBcd2>
 8006692:	4603      	mov	r3, r0
 8006694:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	785b      	ldrb	r3, [r3, #1]
 800669a:	4618      	mov	r0, r3
 800669c:	f000 f9ee 	bl	8006a7c <RTC_ByteToBcd2>
 80066a0:	4603      	mov	r3, r0
 80066a2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80066a4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	789b      	ldrb	r3, [r3, #2]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 f9e6 	bl	8006a7c <RTC_ByteToBcd2>
 80066b0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80066b2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	78db      	ldrb	r3, [r3, #3]
 80066ba:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80066bc:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 f9d8 	bl	8006a7c <RTC_ByteToBcd2>
 80066cc:	4603      	mov	r3, r0
 80066ce:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80066d0:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80066d8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80066de:	4313      	orrs	r3, r2
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	e02c      	b.n	800673e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 80066ec:	d00d      	beq.n	800670a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066f6:	d008      	beq.n	800670a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80066f8:	4b4f      	ldr	r3, [pc, #316]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006700:	2b00      	cmp	r3, #0
 8006702:	d102      	bne.n	800670a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2200      	movs	r2, #0
 8006708:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006716:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800671c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	78db      	ldrb	r3, [r3, #3]
 8006722:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006724:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800672c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800672e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006734:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800673a:	4313      	orrs	r3, r2
 800673c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800673e:	4b3e      	ldr	r3, [pc, #248]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 8006740:	22ca      	movs	r2, #202	@ 0xca
 8006742:	625a      	str	r2, [r3, #36]	@ 0x24
 8006744:	4b3c      	ldr	r3, [pc, #240]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 8006746:	2253      	movs	r2, #83	@ 0x53
 8006748:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006752:	d12c      	bne.n	80067ae <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006754:	4b38      	ldr	r3, [pc, #224]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	4a37      	ldr	r2, [pc, #220]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 800675a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800675e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006760:	4b35      	ldr	r3, [pc, #212]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 8006762:	2201      	movs	r2, #1
 8006764:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800676c:	d107      	bne.n	800677e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	4930      	ldr	r1, [pc, #192]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 8006778:	4313      	orrs	r3, r2
 800677a:	644b      	str	r3, [r1, #68]	@ 0x44
 800677c:	e006      	b.n	800678c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800677e:	4a2e      	ldr	r2, [pc, #184]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006784:	4a2c      	ldr	r2, [pc, #176]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800678c:	4a2a      	ldr	r2, [pc, #168]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006798:	f043 0201 	orr.w	r2, r3, #1
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80067a0:	4b25      	ldr	r3, [pc, #148]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	4a24      	ldr	r2, [pc, #144]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 80067a6:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80067aa:	6193      	str	r3, [r2, #24]
 80067ac:	e02b      	b.n	8006806 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80067ae:	4b22      	ldr	r3, [pc, #136]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	4a21      	ldr	r2, [pc, #132]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 80067b4:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80067b8:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80067ba:	4b1f      	ldr	r3, [pc, #124]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 80067bc:	2202      	movs	r2, #2
 80067be:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067c6:	d107      	bne.n	80067d8 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	699a      	ldr	r2, [r3, #24]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	4919      	ldr	r1, [pc, #100]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80067d6:	e006      	b.n	80067e6 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80067d8:	4a17      	ldr	r2, [pc, #92]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80067de:	4a16      	ldr	r2, [pc, #88]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80067e6:	4a14      	ldr	r2, [pc, #80]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f2:	f043 0202 	orr.w	r2, r3, #2
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80067fa:	4b0f      	ldr	r3, [pc, #60]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	4a0e      	ldr	r2, [pc, #56]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 8006800:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8006804:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006806:	4b0d      	ldr	r3, [pc, #52]	@ (800683c <HAL_RTC_SetAlarm_IT+0x214>)
 8006808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800680c:	4a0b      	ldr	r2, [pc, #44]	@ (800683c <HAL_RTC_SetAlarm_IT+0x214>)
 800680e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006812:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006816:	4b08      	ldr	r3, [pc, #32]	@ (8006838 <HAL_RTC_SetAlarm_IT+0x210>)
 8006818:	22ff      	movs	r2, #255	@ 0xff
 800681a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	bd90      	pop	{r4, r7, pc}
 8006836:	bf00      	nop
 8006838:	40002800 	.word	0x40002800
 800683c:	58000800 	.word	0x58000800

08006840 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_RTC_DeactivateAlarm+0x18>
 8006854:	2302      	movs	r3, #2
 8006856:	e048      	b.n	80068ea <HAL_RTC_DeactivateAlarm+0xaa>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006868:	4b22      	ldr	r3, [pc, #136]	@ (80068f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800686a:	22ca      	movs	r2, #202	@ 0xca
 800686c:	625a      	str	r2, [r3, #36]	@ 0x24
 800686e:	4b21      	ldr	r3, [pc, #132]	@ (80068f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006870:	2253      	movs	r2, #83	@ 0x53
 8006872:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800687a:	d115      	bne.n	80068a8 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800687c:	4b1d      	ldr	r3, [pc, #116]	@ (80068f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	4a1c      	ldr	r2, [pc, #112]	@ (80068f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006882:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006886:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006888:	4b1a      	ldr	r3, [pc, #104]	@ (80068f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800688a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800688c:	4a19      	ldr	r2, [pc, #100]	@ (80068f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800688e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006892:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006898:	f023 0201 	bic.w	r2, r3, #1
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80068a0:	4b14      	ldr	r3, [pc, #80]	@ (80068f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068a2:	2201      	movs	r2, #1
 80068a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80068a6:	e014      	b.n	80068d2 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80068a8:	4b12      	ldr	r3, [pc, #72]	@ (80068f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	4a11      	ldr	r2, [pc, #68]	@ (80068f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068ae:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80068b2:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80068b4:	4b0f      	ldr	r3, [pc, #60]	@ (80068f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b8:	4a0e      	ldr	r2, [pc, #56]	@ (80068f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068be:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c4:	f023 0202 	bic.w	r2, r3, #2
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80068cc:	4b09      	ldr	r3, [pc, #36]	@ (80068f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068ce:	2202      	movs	r2, #2
 80068d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068d2:	4b08      	ldr	r3, [pc, #32]	@ (80068f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80068d4:	22ff      	movs	r2, #255	@ 0xff
 80068d6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr
 80068f4:	40002800 	.word	0x40002800

080068f8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006900:	4b11      	ldr	r3, [pc, #68]	@ (8006948 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006902:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006908:	4013      	ands	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d005      	beq.n	8006922 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006916:	4b0c      	ldr	r3, [pc, #48]	@ (8006948 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006918:	2201      	movs	r2, #1
 800691a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7fb fbc0 	bl	80020a2 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d005      	beq.n	8006938 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800692c:	4b06      	ldr	r3, [pc, #24]	@ (8006948 <HAL_RTC_AlarmIRQHandler+0x50>)
 800692e:	2202      	movs	r2, #2
 8006930:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f94a 	bl	8006bcc <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006940:	bf00      	nop
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	40002800 	.word	0x40002800

0800694c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006954:	4b0f      	ldr	r3, [pc, #60]	@ (8006994 <HAL_RTC_WaitForSynchro+0x48>)
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	4a0e      	ldr	r2, [pc, #56]	@ (8006994 <HAL_RTC_WaitForSynchro+0x48>)
 800695a:	f023 0320 	bic.w	r3, r3, #32
 800695e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006960:	f7fb f936 	bl	8001bd0 <HAL_GetTick>
 8006964:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006966:	e009      	b.n	800697c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006968:	f7fb f932 	bl	8001bd0 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006976:	d901      	bls.n	800697c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e006      	b.n	800698a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800697c:	4b05      	ldr	r3, [pc, #20]	@ (8006994 <HAL_RTC_WaitForSynchro+0x48>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0ef      	beq.n	8006968 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	40002800 	.word	0x40002800

08006998 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069a0:	2300      	movs	r3, #0
 80069a2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80069a4:	4b15      	ldr	r3, [pc, #84]	@ (80069fc <RTC_EnterInitMode+0x64>)
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d120      	bne.n	80069f2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80069b0:	4b12      	ldr	r3, [pc, #72]	@ (80069fc <RTC_EnterInitMode+0x64>)
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	4a11      	ldr	r2, [pc, #68]	@ (80069fc <RTC_EnterInitMode+0x64>)
 80069b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ba:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80069bc:	f7fb f908 	bl	8001bd0 <HAL_GetTick>
 80069c0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80069c2:	e00d      	b.n	80069e0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80069c4:	f7fb f904 	bl	8001bd0 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069d2:	d905      	bls.n	80069e0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2203      	movs	r2, #3
 80069dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80069e0:	4b06      	ldr	r3, [pc, #24]	@ (80069fc <RTC_EnterInitMode+0x64>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d102      	bne.n	80069f2 <RTC_EnterInitMode+0x5a>
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d1e8      	bne.n	80069c4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	40002800 	.word	0x40002800

08006a00 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8006a78 <RTC_ExitInitMode+0x78>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	4a19      	ldr	r2, [pc, #100]	@ (8006a78 <RTC_ExitInitMode+0x78>)
 8006a12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a16:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006a18:	4b17      	ldr	r3, [pc, #92]	@ (8006a78 <RTC_ExitInitMode+0x78>)
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10c      	bne.n	8006a3e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff ff91 	bl	800694c <HAL_RTC_WaitForSynchro>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d01e      	beq.n	8006a6e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2203      	movs	r2, #3
 8006a34:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	73fb      	strb	r3, [r7, #15]
 8006a3c:	e017      	b.n	8006a6e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a78 <RTC_ExitInitMode+0x78>)
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	4a0d      	ldr	r2, [pc, #52]	@ (8006a78 <RTC_ExitInitMode+0x78>)
 8006a44:	f023 0320 	bic.w	r3, r3, #32
 8006a48:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff ff7e 	bl	800694c <HAL_RTC_WaitForSynchro>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d005      	beq.n	8006a62 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2203      	movs	r2, #3
 8006a5a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006a62:	4b05      	ldr	r3, [pc, #20]	@ (8006a78 <RTC_ExitInitMode+0x78>)
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	4a04      	ldr	r2, [pc, #16]	@ (8006a78 <RTC_ExitInitMode+0x78>)
 8006a68:	f043 0320 	orr.w	r3, r3, #32
 8006a6c:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	40002800 	.word	0x40002800

08006a7c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006a8e:	e005      	b.n	8006a9c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3301      	adds	r3, #1
 8006a94:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006a96:	7afb      	ldrb	r3, [r7, #11]
 8006a98:	3b0a      	subs	r3, #10
 8006a9a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006a9c:	7afb      	ldrb	r3, [r7, #11]
 8006a9e:	2b09      	cmp	r3, #9
 8006aa0:	d8f6      	bhi.n	8006a90 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	7afb      	ldrb	r3, [r7, #11]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	b2db      	uxtb	r3, r3
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bc80      	pop	{r7}
 8006ab8:	4770      	bx	lr
	...

08006abc <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e01f      	b.n	8006b12 <HAL_RTCEx_EnableBypassShadow+0x56>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2202      	movs	r2, #2
 8006ade:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8006b1c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006ae4:	22ca      	movs	r2, #202	@ 0xca
 8006ae6:	625a      	str	r2, [r3, #36]	@ 0x24
 8006ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8006b1c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006aea:	2253      	movs	r2, #83	@ 0x53
 8006aec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006aee:	4b0b      	ldr	r3, [pc, #44]	@ (8006b1c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	4a0a      	ldr	r2, [pc, #40]	@ (8006b1c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006af4:	f043 0320 	orr.w	r3, r3, #32
 8006af8:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006afa:	4b08      	ldr	r3, [pc, #32]	@ (8006b1c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006afc:	22ff      	movs	r2, #255	@ 0xff
 8006afe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc80      	pop	{r7}
 8006b1a:	4770      	bx	lr
 8006b1c:	40002800 	.word	0x40002800

08006b20 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <HAL_RTCEx_SetSSRU_IT+0x16>
 8006b32:	2302      	movs	r3, #2
 8006b34:	e027      	b.n	8006b86 <HAL_RTCEx_SetSSRU_IT+0x66>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2202      	movs	r2, #2
 8006b42:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b46:	4b12      	ldr	r3, [pc, #72]	@ (8006b90 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006b48:	22ca      	movs	r2, #202	@ 0xca
 8006b4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8006b4c:	4b10      	ldr	r3, [pc, #64]	@ (8006b90 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006b4e:	2253      	movs	r2, #83	@ 0x53
 8006b50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006b52:	4b0f      	ldr	r3, [pc, #60]	@ (8006b90 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	4a0e      	ldr	r2, [pc, #56]	@ (8006b90 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006b58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b5c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b94 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b64:	4a0b      	ldr	r2, [pc, #44]	@ (8006b94 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006b66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b6a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b6e:	4b08      	ldr	r3, [pc, #32]	@ (8006b90 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006b70:	22ff      	movs	r2, #255	@ 0xff
 8006b72:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bc80      	pop	{r7}
 8006b8e:	4770      	bx	lr
 8006b90:	40002800 	.word	0x40002800
 8006b94:	58000800 	.word	0x58000800

08006b98 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006ba0:	4b09      	ldr	r3, [pc, #36]	@ (8006bc8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006bac:	4b06      	ldr	r3, [pc, #24]	@ (8006bc8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006bae:	2240      	movs	r2, #64	@ 0x40
 8006bb0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7fb fa7f 	bl	80020b6 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	40002800 	.word	0x40002800

08006bcc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr
	...

08006be0 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006bec:	4b07      	ldr	r3, [pc, #28]	@ (8006c0c <HAL_RTCEx_BKUPWrite+0x2c>)
 8006bee:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	601a      	str	r2, [r3, #0]
}
 8006c00:	bf00      	nop
 8006c02:	371c      	adds	r7, #28
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	4000b100 	.word	0x4000b100

08006c10 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006c1a:	4b07      	ldr	r3, [pc, #28]	@ (8006c38 <HAL_RTCEx_BKUPRead+0x28>)
 8006c1c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4413      	add	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bc80      	pop	{r7}
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	4000b100 	.word	0x4000b100

08006c3c <LL_PWR_SetRadioBusyTrigger>:
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006c44:	4b06      	ldr	r3, [pc, #24]	@ (8006c60 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c4c:	4904      	ldr	r1, [pc, #16]	@ (8006c60 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	608b      	str	r3, [r1, #8]
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bc80      	pop	{r7}
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	58000400 	.word	0x58000400

08006c64 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8006c64:	b480      	push	{r7}
 8006c66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c68:	4b05      	ldr	r3, [pc, #20]	@ (8006c80 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c6e:	4a04      	ldr	r2, [pc, #16]	@ (8006c80 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006c78:	bf00      	nop
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bc80      	pop	{r7}
 8006c7e:	4770      	bx	lr
 8006c80:	58000400 	.word	0x58000400

08006c84 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c88:	4b05      	ldr	r3, [pc, #20]	@ (8006ca0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c8e:	4a04      	ldr	r2, [pc, #16]	@ (8006ca0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006c90:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006c98:	bf00      	nop
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bc80      	pop	{r7}
 8006c9e:	4770      	bx	lr
 8006ca0:	58000400 	.word	0x58000400

08006ca4 <LL_PWR_ClearFlag_RFBUSY>:
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006ca8:	4b03      	ldr	r3, [pc, #12]	@ (8006cb8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006caa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cae:	619a      	str	r2, [r3, #24]
}
 8006cb0:	bf00      	nop
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr
 8006cb8:	58000400 	.word	0x58000400

08006cbc <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006cc0:	4b06      	ldr	r3, [pc, #24]	@ (8006cdc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d101      	bne.n	8006cd0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e000      	b.n	8006cd2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bc80      	pop	{r7}
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	58000400 	.word	0x58000400

08006ce0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006ce4:	4b06      	ldr	r3, [pc, #24]	@ (8006d00 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b04      	cmp	r3, #4
 8006cee:	d101      	bne.n	8006cf4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	58000400 	.word	0x58000400

08006d04 <LL_RCC_RF_DisableReset>:
{
 8006d04:	b480      	push	{r7}
 8006d06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006d1c:	bf00      	nop
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bc80      	pop	{r7}
 8006d22:	4770      	bx	lr

08006d24 <LL_RCC_IsRFUnderReset>:
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d38:	d101      	bne.n	8006d3e <LL_RCC_IsRFUnderReset+0x1a>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <LL_RCC_IsRFUnderReset+0x1c>
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bc80      	pop	{r7}
 8006d46:	4770      	bx	lr

08006d48 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006d50:	4b06      	ldr	r3, [pc, #24]	@ (8006d6c <LL_EXTI_EnableIT_32_63+0x24>)
 8006d52:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006d56:	4905      	ldr	r1, [pc, #20]	@ (8006d6c <LL_EXTI_EnableIT_32_63+0x24>)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bc80      	pop	{r7}
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	58000800 	.word	0x58000800

08006d70 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d103      	bne.n	8006d86 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	73fb      	strb	r3, [r7, #15]
    return status;
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	e052      	b.n	8006e2c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	799b      	ldrb	r3, [r3, #6]
 8006d8e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <HAL_SUBGHZ_Init+0x2c>
 8006d96:	7bbb      	ldrb	r3, [r7, #14]
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d109      	bne.n	8006db0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7fa fd76 	bl	8001894 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006da8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006dac:	f7ff ffcc 	bl	8006d48 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d126      	bne.n	8006e04 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2202      	movs	r2, #2
 8006dba:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8006dbc:	f7ff ffa2 	bl	8006d04 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8006e34 <HAL_SUBGHZ_Init+0xc4>)
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	00db      	lsls	r3, r3, #3
 8006dc8:	1a9b      	subs	r3, r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	0cdb      	lsrs	r3, r3, #19
 8006dce:	2264      	movs	r2, #100	@ 0x64
 8006dd0:	fb02 f303 	mul.w	r3, r2, r3
 8006dd4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d105      	bne.n	8006de8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	609a      	str	r2, [r3, #8]
        break;
 8006de6:	e007      	b.n	8006df8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006dee:	f7ff ff99 	bl	8006d24 <LL_RCC_IsRFUnderReset>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1ee      	bne.n	8006dd6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006df8:	f7ff ff34 	bl	8006c64 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006dfc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006e00:	f7ff ff1c 	bl	8006c3c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006e04:	f7ff ff4e 	bl	8006ca4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10a      	bne.n	8006e24 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 faac 	bl	8007370 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	719a      	strb	r2, [r3, #6]

  return status;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	20000000 	.word	0x20000000

08006e38 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	607a      	str	r2, [r7, #4]
 8006e42:	461a      	mov	r2, r3
 8006e44:	460b      	mov	r3, r1
 8006e46:	817b      	strh	r3, [r7, #10]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	799b      	ldrb	r3, [r3, #6]
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d14a      	bne.n	8006eec <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	795b      	ldrb	r3, [r3, #5]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d101      	bne.n	8006e62 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e045      	b.n	8006eee <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 fb4c 	bl	800750c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006e74:	f7ff ff06 	bl	8006c84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006e78:	210d      	movs	r1, #13
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f000 fa98 	bl	80073b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006e80:	897b      	ldrh	r3, [r7, #10]
 8006e82:	0a1b      	lsrs	r3, r3, #8
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	4619      	mov	r1, r3
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 fa90 	bl	80073b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006e90:	897b      	ldrh	r3, [r7, #10]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	4619      	mov	r1, r3
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 fa8a 	bl	80073b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	82bb      	strh	r3, [r7, #20]
 8006ea0:	e00a      	b.n	8006eb8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006ea2:	8abb      	ldrh	r3, [r7, #20]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 fa7f 	bl	80073b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006eb2:	8abb      	ldrh	r3, [r7, #20]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	82bb      	strh	r3, [r7, #20]
 8006eb8:	8aba      	ldrh	r2, [r7, #20]
 8006eba:	893b      	ldrh	r3, [r7, #8]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d3f0      	bcc.n	8006ea2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006ec0:	f7ff fed0 	bl	8006c64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 fb45 	bl	8007554 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	75fb      	strb	r3, [r7, #23]
 8006ed6:	e001      	b.n	8006edc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	715a      	strb	r2, [r3, #5]

    return status;
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
 8006eea:	e000      	b.n	8006eee <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006eec:	2302      	movs	r3, #2
  }
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b088      	sub	sp, #32
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	461a      	mov	r2, r3
 8006f02:	460b      	mov	r3, r1
 8006f04:	817b      	strh	r3, [r7, #10]
 8006f06:	4613      	mov	r3, r2
 8006f08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	799b      	ldrb	r3, [r3, #6]
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d14a      	bne.n	8006fae <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	795b      	ldrb	r3, [r3, #5]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d101      	bne.n	8006f24 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006f20:	2302      	movs	r3, #2
 8006f22:	e045      	b.n	8006fb0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2201      	movs	r2, #1
 8006f28:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 faee 	bl	800750c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006f30:	f7ff fea8 	bl	8006c84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006f34:	211d      	movs	r1, #29
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 fa3a 	bl	80073b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006f3c:	897b      	ldrh	r3, [r7, #10]
 8006f3e:	0a1b      	lsrs	r3, r3, #8
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	4619      	mov	r1, r3
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f000 fa32 	bl	80073b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006f4c:	897b      	ldrh	r3, [r7, #10]
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	4619      	mov	r1, r3
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 fa2c 	bl	80073b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006f58:	2100      	movs	r1, #0
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 fa28 	bl	80073b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006f60:	2300      	movs	r3, #0
 8006f62:	82fb      	strh	r3, [r7, #22]
 8006f64:	e009      	b.n	8006f7a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006f66:	69b9      	ldr	r1, [r7, #24]
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 fa77 	bl	800745c <SUBGHZSPI_Receive>
      pData++;
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	3301      	adds	r3, #1
 8006f72:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006f74:	8afb      	ldrh	r3, [r7, #22]
 8006f76:	3301      	adds	r3, #1
 8006f78:	82fb      	strh	r3, [r7, #22]
 8006f7a:	8afa      	ldrh	r2, [r7, #22]
 8006f7c:	893b      	ldrh	r3, [r7, #8]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d3f1      	bcc.n	8006f66 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f82:	f7ff fe6f 	bl	8006c64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 fae4 	bl	8007554 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	77fb      	strb	r3, [r7, #31]
 8006f98:	e001      	b.n	8006f9e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	715a      	strb	r2, [r3, #5]

    return status;
 8006faa:	7ffb      	ldrb	r3, [r7, #31]
 8006fac:	e000      	b.n	8006fb0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006fae:	2302      	movs	r3, #2
  }
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3720      	adds	r7, #32
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	607a      	str	r2, [r7, #4]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	72fb      	strb	r3, [r7, #11]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	799b      	ldrb	r3, [r3, #6]
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d14a      	bne.n	800706c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	795b      	ldrb	r3, [r3, #5]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d101      	bne.n	8006fe2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8006fde:	2302      	movs	r3, #2
 8006fe0:	e045      	b.n	800706e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 fa8f 	bl	800750c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006fee:	7afb      	ldrb	r3, [r7, #11]
 8006ff0:	2b84      	cmp	r3, #132	@ 0x84
 8006ff2:	d002      	beq.n	8006ffa <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006ff4:	7afb      	ldrb	r3, [r7, #11]
 8006ff6:	2b94      	cmp	r3, #148	@ 0x94
 8006ff8:	d103      	bne.n	8007002 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	711a      	strb	r2, [r3, #4]
 8007000:	e002      	b.n	8007008 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007008:	f7ff fe3c 	bl	8006c84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800700c:	7afb      	ldrb	r3, [r7, #11]
 800700e:	4619      	mov	r1, r3
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 f9cd 	bl	80073b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007016:	2300      	movs	r3, #0
 8007018:	82bb      	strh	r3, [r7, #20]
 800701a:	e00a      	b.n	8007032 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800701c:	8abb      	ldrh	r3, [r7, #20]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	4413      	add	r3, r2
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	4619      	mov	r1, r3
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f000 f9c2 	bl	80073b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800702c:	8abb      	ldrh	r3, [r7, #20]
 800702e:	3301      	adds	r3, #1
 8007030:	82bb      	strh	r3, [r7, #20]
 8007032:	8aba      	ldrh	r2, [r7, #20]
 8007034:	893b      	ldrh	r3, [r7, #8]
 8007036:	429a      	cmp	r2, r3
 8007038:	d3f0      	bcc.n	800701c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800703a:	f7ff fe13 	bl	8006c64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800703e:	7afb      	ldrb	r3, [r7, #11]
 8007040:	2b84      	cmp	r3, #132	@ 0x84
 8007042:	d002      	beq.n	800704a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 fa85 	bl	8007554 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d002      	beq.n	8007058 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	75fb      	strb	r3, [r7, #23]
 8007056:	e001      	b.n	800705c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	715a      	strb	r2, [r3, #5]

    return status;
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	e000      	b.n	800706e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800706c:	2302      	movs	r3, #2
  }
}
 800706e:	4618      	mov	r0, r3
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b088      	sub	sp, #32
 800707a:	af00      	add	r7, sp, #0
 800707c:	60f8      	str	r0, [r7, #12]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	461a      	mov	r2, r3
 8007082:	460b      	mov	r3, r1
 8007084:	72fb      	strb	r3, [r7, #11]
 8007086:	4613      	mov	r3, r2
 8007088:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	799b      	ldrb	r3, [r3, #6]
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b01      	cmp	r3, #1
 8007096:	d13d      	bne.n	8007114 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	795b      	ldrb	r3, [r3, #5]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d101      	bne.n	80070a4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80070a0:	2302      	movs	r3, #2
 80070a2:	e038      	b.n	8007116 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2201      	movs	r2, #1
 80070a8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fa2e 	bl	800750c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80070b0:	f7ff fde8 	bl	8006c84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80070b4:	7afb      	ldrb	r3, [r7, #11]
 80070b6:	4619      	mov	r1, r3
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 f979 	bl	80073b0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80070be:	2100      	movs	r1, #0
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 f975 	bl	80073b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80070c6:	2300      	movs	r3, #0
 80070c8:	82fb      	strh	r3, [r7, #22]
 80070ca:	e009      	b.n	80070e0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80070cc:	69b9      	ldr	r1, [r7, #24]
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f000 f9c4 	bl	800745c <SUBGHZSPI_Receive>
      pData++;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	3301      	adds	r3, #1
 80070d8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80070da:	8afb      	ldrh	r3, [r7, #22]
 80070dc:	3301      	adds	r3, #1
 80070de:	82fb      	strh	r3, [r7, #22]
 80070e0:	8afa      	ldrh	r2, [r7, #22]
 80070e2:	893b      	ldrh	r3, [r7, #8]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d3f1      	bcc.n	80070cc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80070e8:	f7ff fdbc 	bl	8006c64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 fa31 	bl	8007554 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	77fb      	strb	r3, [r7, #31]
 80070fe:	e001      	b.n	8007104 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2201      	movs	r2, #1
 8007108:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	715a      	strb	r2, [r3, #5]

    return status;
 8007110:	7ffb      	ldrb	r3, [r7, #31]
 8007112:	e000      	b.n	8007116 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007114:	2302      	movs	r3, #2
  }
}
 8007116:	4618      	mov	r0, r3
 8007118:	3720      	adds	r7, #32
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b086      	sub	sp, #24
 8007122:	af00      	add	r7, sp, #0
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	461a      	mov	r2, r3
 800712a:	460b      	mov	r3, r1
 800712c:	72fb      	strb	r3, [r7, #11]
 800712e:	4613      	mov	r3, r2
 8007130:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	799b      	ldrb	r3, [r3, #6]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b01      	cmp	r3, #1
 800713a:	d13e      	bne.n	80071ba <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	795b      	ldrb	r3, [r3, #5]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d101      	bne.n	8007148 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007144:	2302      	movs	r3, #2
 8007146:	e039      	b.n	80071bc <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2201      	movs	r2, #1
 800714c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f9dc 	bl	800750c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007154:	f7ff fd96 	bl	8006c84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007158:	210e      	movs	r1, #14
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 f928 	bl	80073b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007160:	7afb      	ldrb	r3, [r7, #11]
 8007162:	4619      	mov	r1, r3
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f923 	bl	80073b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800716a:	2300      	movs	r3, #0
 800716c:	82bb      	strh	r3, [r7, #20]
 800716e:	e00a      	b.n	8007186 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007170:	8abb      	ldrh	r3, [r7, #20]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	4413      	add	r3, r2
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	4619      	mov	r1, r3
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 f918 	bl	80073b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007180:	8abb      	ldrh	r3, [r7, #20]
 8007182:	3301      	adds	r3, #1
 8007184:	82bb      	strh	r3, [r7, #20]
 8007186:	8aba      	ldrh	r2, [r7, #20]
 8007188:	893b      	ldrh	r3, [r7, #8]
 800718a:	429a      	cmp	r2, r3
 800718c:	d3f0      	bcc.n	8007170 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800718e:	f7ff fd69 	bl	8006c64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f000 f9de 	bl	8007554 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	75fb      	strb	r3, [r7, #23]
 80071a4:	e001      	b.n	80071aa <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2201      	movs	r2, #1
 80071ae:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	715a      	strb	r2, [r3, #5]

    return status;
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	e000      	b.n	80071bc <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80071ba:	2302      	movs	r3, #2
  }
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b088      	sub	sp, #32
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	607a      	str	r2, [r7, #4]
 80071ce:	461a      	mov	r2, r3
 80071d0:	460b      	mov	r3, r1
 80071d2:	72fb      	strb	r3, [r7, #11]
 80071d4:	4613      	mov	r3, r2
 80071d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	799b      	ldrb	r3, [r3, #6]
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d141      	bne.n	800726a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	795b      	ldrb	r3, [r3, #5]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d101      	bne.n	80071f2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80071ee:	2302      	movs	r3, #2
 80071f0:	e03c      	b.n	800726c <HAL_SUBGHZ_ReadBuffer+0xa8>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2201      	movs	r2, #1
 80071f6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 f987 	bl	800750c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80071fe:	f7ff fd41 	bl	8006c84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007202:	211e      	movs	r1, #30
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 f8d3 	bl	80073b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800720a:	7afb      	ldrb	r3, [r7, #11]
 800720c:	4619      	mov	r1, r3
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 f8ce 	bl	80073b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007214:	2100      	movs	r1, #0
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 f8ca 	bl	80073b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800721c:	2300      	movs	r3, #0
 800721e:	82fb      	strh	r3, [r7, #22]
 8007220:	e009      	b.n	8007236 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007222:	69b9      	ldr	r1, [r7, #24]
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 f919 	bl	800745c <SUBGHZSPI_Receive>
      pData++;
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	3301      	adds	r3, #1
 800722e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007230:	8afb      	ldrh	r3, [r7, #22]
 8007232:	3301      	adds	r3, #1
 8007234:	82fb      	strh	r3, [r7, #22]
 8007236:	8afa      	ldrh	r2, [r7, #22]
 8007238:	893b      	ldrh	r3, [r7, #8]
 800723a:	429a      	cmp	r2, r3
 800723c:	d3f1      	bcc.n	8007222 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800723e:	f7ff fd11 	bl	8006c64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 f986 	bl	8007554 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	77fb      	strb	r3, [r7, #31]
 8007254:	e001      	b.n	800725a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2201      	movs	r2, #1
 800725e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	715a      	strb	r2, [r3, #5]

    return status;
 8007266:	7ffb      	ldrb	r3, [r7, #31]
 8007268:	e000      	b.n	800726c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800726a:	2302      	movs	r3, #2
  }
}
 800726c:	4618      	mov	r0, r3
 800726e:	3720      	adds	r7, #32
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800727c:	2300      	movs	r3, #0
 800727e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007280:	f107 020c 	add.w	r2, r7, #12
 8007284:	2302      	movs	r3, #2
 8007286:	2112      	movs	r1, #18
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7ff fef4 	bl	8007076 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800728e:	7b3b      	ldrb	r3, [r7, #12]
 8007290:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007292:	89fb      	ldrh	r3, [r7, #14]
 8007294:	021b      	lsls	r3, r3, #8
 8007296:	b21a      	sxth	r2, r3
 8007298:	7b7b      	ldrb	r3, [r7, #13]
 800729a:	b21b      	sxth	r3, r3
 800729c:	4313      	orrs	r3, r2
 800729e:	b21b      	sxth	r3, r3
 80072a0:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80072a2:	f107 020c 	add.w	r2, r7, #12
 80072a6:	2302      	movs	r3, #2
 80072a8:	2102      	movs	r1, #2
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff fe84 	bl	8006fb8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80072b0:	89fb      	ldrh	r3, [r7, #14]
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f013 fae4 	bl	801a888 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80072c0:	89fb      	ldrh	r3, [r7, #14]
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d002      	beq.n	80072d0 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f013 faea 	bl	801a8a4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80072d0:	89fb      	ldrh	r3, [r7, #14]
 80072d2:	f003 0304 	and.w	r3, r3, #4
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f013 fb3a 	bl	801a954 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80072e0:	89fb      	ldrh	r3, [r7, #14]
 80072e2:	f003 0308 	and.w	r3, r3, #8
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f013 fb40 	bl	801a970 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80072f0:	89fb      	ldrh	r3, [r7, #14]
 80072f2:	f003 0310 	and.w	r3, r3, #16
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f013 fb46 	bl	801a98c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007300:	89fb      	ldrh	r3, [r7, #14]
 8007302:	f003 0320 	and.w	r3, r3, #32
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f013 fb14 	bl	801a938 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007310:	89fb      	ldrh	r3, [r7, #14]
 8007312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	d002      	beq.n	8007320 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f013 fad0 	bl	801a8c0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007320:	89fb      	ldrh	r3, [r7, #14]
 8007322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00d      	beq.n	8007346 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800732a:	89fb      	ldrh	r3, [r7, #14]
 800732c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007334:	2101      	movs	r1, #1
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f013 fad0 	bl	801a8dc <HAL_SUBGHZ_CADStatusCallback>
 800733c:	e003      	b.n	8007346 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800733e:	2100      	movs	r1, #0
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f013 facb 	bl	801a8dc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007346:	89fb      	ldrh	r3, [r7, #14]
 8007348:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f013 fae1 	bl	801a918 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007356:	89fb      	ldrh	r3, [r7, #14]
 8007358:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f013 fb21 	bl	801a9a8 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8007366:	bf00      	nop
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007378:	4b0c      	ldr	r3, [pc, #48]	@ (80073ac <SUBGHZSPI_Init+0x3c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a0b      	ldr	r2, [pc, #44]	@ (80073ac <SUBGHZSPI_Init+0x3c>)
 800737e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007382:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007384:	4a09      	ldr	r2, [pc, #36]	@ (80073ac <SUBGHZSPI_Init+0x3c>)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 800738c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800738e:	4b07      	ldr	r3, [pc, #28]	@ (80073ac <SUBGHZSPI_Init+0x3c>)
 8007390:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007394:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007396:	4b05      	ldr	r3, [pc, #20]	@ (80073ac <SUBGHZSPI_Init+0x3c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a04      	ldr	r2, [pc, #16]	@ (80073ac <SUBGHZSPI_Init+0x3c>)
 800739c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073a0:	6013      	str	r3, [r2, #0]
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bc80      	pop	{r7}
 80073aa:	4770      	bx	lr
 80073ac:	58010000 	.word	0x58010000

080073b0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80073c0:	4b23      	ldr	r3, [pc, #140]	@ (8007450 <SUBGHZSPI_Transmit+0xa0>)
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	4613      	mov	r3, r2
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	0cdb      	lsrs	r3, r3, #19
 80073ce:	2264      	movs	r2, #100	@ 0x64
 80073d0:	fb02 f303 	mul.w	r3, r2, r3
 80073d4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d105      	bne.n	80073e8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	609a      	str	r2, [r3, #8]
      break;
 80073e6:	e008      	b.n	80073fa <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80073ee:	4b19      	ldr	r3, [pc, #100]	@ (8007454 <SUBGHZSPI_Transmit+0xa4>)
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d1ed      	bne.n	80073d6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80073fa:	4b17      	ldr	r3, [pc, #92]	@ (8007458 <SUBGHZSPI_Transmit+0xa8>)
 80073fc:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	78fa      	ldrb	r2, [r7, #3]
 8007402:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007404:	4b12      	ldr	r3, [pc, #72]	@ (8007450 <SUBGHZSPI_Transmit+0xa0>)
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	4613      	mov	r3, r2
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	1a9b      	subs	r3, r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	0cdb      	lsrs	r3, r3, #19
 8007412:	2264      	movs	r2, #100	@ 0x64
 8007414:	fb02 f303 	mul.w	r3, r2, r3
 8007418:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d105      	bne.n	800742c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	609a      	str	r2, [r3, #8]
      break;
 800742a:	e008      	b.n	800743e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3b01      	subs	r3, #1
 8007430:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007432:	4b08      	ldr	r3, [pc, #32]	@ (8007454 <SUBGHZSPI_Transmit+0xa4>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b01      	cmp	r3, #1
 800743c:	d1ed      	bne.n	800741a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800743e:	4b05      	ldr	r3, [pc, #20]	@ (8007454 <SUBGHZSPI_Transmit+0xa4>)
 8007440:	68db      	ldr	r3, [r3, #12]

  return status;
 8007442:	7dfb      	ldrb	r3, [r7, #23]
}
 8007444:	4618      	mov	r0, r3
 8007446:	371c      	adds	r7, #28
 8007448:	46bd      	mov	sp, r7
 800744a:	bc80      	pop	{r7}
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	20000000 	.word	0x20000000
 8007454:	58010000 	.word	0x58010000
 8007458:	5801000c 	.word	0x5801000c

0800745c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800746a:	4b25      	ldr	r3, [pc, #148]	@ (8007500 <SUBGHZSPI_Receive+0xa4>)
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	4613      	mov	r3, r2
 8007470:	00db      	lsls	r3, r3, #3
 8007472:	1a9b      	subs	r3, r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	0cdb      	lsrs	r3, r3, #19
 8007478:	2264      	movs	r2, #100	@ 0x64
 800747a:	fb02 f303 	mul.w	r3, r2, r3
 800747e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d105      	bne.n	8007492 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	609a      	str	r2, [r3, #8]
      break;
 8007490:	e008      	b.n	80074a4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3b01      	subs	r3, #1
 8007496:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007498:	4b1a      	ldr	r3, [pc, #104]	@ (8007504 <SUBGHZSPI_Receive+0xa8>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d1ed      	bne.n	8007480 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80074a4:	4b18      	ldr	r3, [pc, #96]	@ (8007508 <SUBGHZSPI_Receive+0xac>)
 80074a6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	22ff      	movs	r2, #255	@ 0xff
 80074ac:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80074ae:	4b14      	ldr	r3, [pc, #80]	@ (8007500 <SUBGHZSPI_Receive+0xa4>)
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	4613      	mov	r3, r2
 80074b4:	00db      	lsls	r3, r3, #3
 80074b6:	1a9b      	subs	r3, r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	0cdb      	lsrs	r3, r3, #19
 80074bc:	2264      	movs	r2, #100	@ 0x64
 80074be:	fb02 f303 	mul.w	r3, r2, r3
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d105      	bne.n	80074d6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	609a      	str	r2, [r3, #8]
      break;
 80074d4:	e008      	b.n	80074e8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3b01      	subs	r3, #1
 80074da:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80074dc:	4b09      	ldr	r3, [pc, #36]	@ (8007504 <SUBGHZSPI_Receive+0xa8>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d1ed      	bne.n	80074c4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80074e8:	4b06      	ldr	r3, [pc, #24]	@ (8007504 <SUBGHZSPI_Receive+0xa8>)
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	701a      	strb	r2, [r3, #0]

  return status;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	371c      	adds	r7, #28
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bc80      	pop	{r7}
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	20000000 	.word	0x20000000
 8007504:	58010000 	.word	0x58010000
 8007508:	5801000c 	.word	0x5801000c

0800750c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	791b      	ldrb	r3, [r3, #4]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d111      	bne.n	8007540 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800751c:	4b0c      	ldr	r3, [pc, #48]	@ (8007550 <SUBGHZ_CheckDeviceReady+0x44>)
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	4613      	mov	r3, r2
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	4413      	add	r3, r2
 8007526:	00db      	lsls	r3, r3, #3
 8007528:	0c1b      	lsrs	r3, r3, #16
 800752a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800752c:	f7ff fbaa 	bl	8006c84 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	3b01      	subs	r3, #1
 8007534:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1f9      	bne.n	8007530 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800753c:	f7ff fb92 	bl	8006c64 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f807 	bl	8007554 <SUBGHZ_WaitOnBusy>
 8007546:	4603      	mov	r3, r0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20000000 	.word	0x20000000

08007554 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007560:	4b12      	ldr	r3, [pc, #72]	@ (80075ac <SUBGHZ_WaitOnBusy+0x58>)
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	4613      	mov	r3, r2
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	4413      	add	r3, r2
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	0d1b      	lsrs	r3, r3, #20
 800756e:	2264      	movs	r2, #100	@ 0x64
 8007570:	fb02 f303 	mul.w	r3, r2, r3
 8007574:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007576:	f7ff fbb3 	bl	8006ce0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800757a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d105      	bne.n	800758e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2202      	movs	r2, #2
 800758a:	609a      	str	r2, [r3, #8]
      break;
 800758c:	e009      	b.n	80075a2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3b01      	subs	r3, #1
 8007592:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007594:	f7ff fb92 	bl	8006cbc <LL_PWR_IsActiveFlag_RFBUSYS>
 8007598:	4602      	mov	r2, r0
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	4013      	ands	r3, r2
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d0e9      	beq.n	8007576 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20000000 	.word	0x20000000

080075b0 <LL_RCC_GetUSARTClockSource>:
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80075b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	401a      	ands	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	041b      	lsls	r3, r3, #16
 80075c8:	4313      	orrs	r3, r2
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bc80      	pop	{r7}
 80075d2:	4770      	bx	lr

080075d4 <LL_RCC_GetLPUARTClockSource>:
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80075dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4013      	ands	r3, r2
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bc80      	pop	{r7}
 80075f0:	4770      	bx	lr

080075f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b082      	sub	sp, #8
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e042      	b.n	800768a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7fa feb2 	bl	8002380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2224      	movs	r2, #36	@ 0x24
 8007620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f022 0201 	bic.w	r2, r2, #1
 8007632:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fc3b 	bl	8007eb0 <UART_SetConfig>
 800763a:	4603      	mov	r3, r0
 800763c:	2b01      	cmp	r3, #1
 800763e:	d101      	bne.n	8007644 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e022      	b.n	800768a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fea3 	bl	8008398 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007660:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007670:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f042 0201 	orr.w	r2, r2, #1
 8007680:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 ff29 	bl	80084da <UART_CheckIdleState>
 8007688:	4603      	mov	r3, r0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
	...

08007694 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08a      	sub	sp, #40	@ 0x28
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	4613      	mov	r3, r2
 80076a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076a8:	2b20      	cmp	r3, #32
 80076aa:	d137      	bne.n	800771c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <HAL_UART_Receive_IT+0x24>
 80076b2:	88fb      	ldrh	r3, [r7, #6]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e030      	b.n	800771e <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a18      	ldr	r2, [pc, #96]	@ (8007728 <HAL_UART_Receive_IT+0x94>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d01f      	beq.n	800770c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d018      	beq.n	800770c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	e853 3f00 	ldrex	r3, [r3]
 80076e6:	613b      	str	r3, [r7, #16]
   return(result);
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80076ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	461a      	mov	r2, r3
 80076f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f8:	623b      	str	r3, [r7, #32]
 80076fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	69f9      	ldr	r1, [r7, #28]
 80076fe:	6a3a      	ldr	r2, [r7, #32]
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	61bb      	str	r3, [r7, #24]
   return(result);
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e6      	bne.n	80076da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800770c:	88fb      	ldrh	r3, [r7, #6]
 800770e:	461a      	mov	r2, r3
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f000 fff8 	bl	8008708 <UART_Start_Receive_IT>
 8007718:	4603      	mov	r3, r0
 800771a:	e000      	b.n	800771e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800771c:	2302      	movs	r3, #2
  }
}
 800771e:	4618      	mov	r0, r3
 8007720:	3728      	adds	r7, #40	@ 0x28
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	40008000 	.word	0x40008000

0800772c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b08a      	sub	sp, #40	@ 0x28
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	4613      	mov	r3, r2
 8007738:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007740:	2b20      	cmp	r3, #32
 8007742:	d167      	bne.n	8007814 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <HAL_UART_Transmit_DMA+0x24>
 800774a:	88fb      	ldrh	r3, [r7, #6]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e060      	b.n	8007816 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	88fa      	ldrh	r2, [r7, #6]
 800775e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	88fa      	ldrh	r2, [r7, #6]
 8007766:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2221      	movs	r2, #33	@ 0x21
 8007776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d028      	beq.n	80077d4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007786:	4a26      	ldr	r2, [pc, #152]	@ (8007820 <HAL_UART_Transmit_DMA+0xf4>)
 8007788:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800778e:	4a25      	ldr	r2, [pc, #148]	@ (8007824 <HAL_UART_Transmit_DMA+0xf8>)
 8007790:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007796:	4a24      	ldr	r2, [pc, #144]	@ (8007828 <HAL_UART_Transmit_DMA+0xfc>)
 8007798:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800779e:	2200      	movs	r2, #0
 80077a0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077aa:	4619      	mov	r1, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3328      	adds	r3, #40	@ 0x28
 80077b2:	461a      	mov	r2, r3
 80077b4:	88fb      	ldrh	r3, [r7, #6]
 80077b6:	f7fc fb89 	bl	8003ecc <HAL_DMA_Start_IT>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d009      	beq.n	80077d4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2210      	movs	r2, #16
 80077c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2220      	movs	r2, #32
 80077cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e020      	b.n	8007816 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2240      	movs	r2, #64	@ 0x40
 80077da:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3308      	adds	r3, #8
 80077e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	e853 3f00 	ldrex	r3, [r3]
 80077ea:	613b      	str	r3, [r7, #16]
   return(result);
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3308      	adds	r3, #8
 80077fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077fc:	623a      	str	r2, [r7, #32]
 80077fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	69f9      	ldr	r1, [r7, #28]
 8007802:	6a3a      	ldr	r2, [r7, #32]
 8007804:	e841 2300 	strex	r3, r2, [r1]
 8007808:	61bb      	str	r3, [r7, #24]
   return(result);
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e5      	bne.n	80077dc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	e000      	b.n	8007816 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007814:	2302      	movs	r3, #2
  }
}
 8007816:	4618      	mov	r0, r3
 8007818:	3728      	adds	r7, #40	@ 0x28
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	08008a93 	.word	0x08008a93
 8007824:	08008b2d 	.word	0x08008b2d
 8007828:	08008b49 	.word	0x08008b49

0800782c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b0ba      	sub	sp, #232	@ 0xe8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007852:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007856:	f640 030f 	movw	r3, #2063	@ 0x80f
 800785a:	4013      	ands	r3, r2
 800785c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007860:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007864:	2b00      	cmp	r3, #0
 8007866:	d11b      	bne.n	80078a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800786c:	f003 0320 	and.w	r3, r3, #32
 8007870:	2b00      	cmp	r3, #0
 8007872:	d015      	beq.n	80078a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007878:	f003 0320 	and.w	r3, r3, #32
 800787c:	2b00      	cmp	r3, #0
 800787e:	d105      	bne.n	800788c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d009      	beq.n	80078a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 82e3 	beq.w	8007e5c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	4798      	blx	r3
      }
      return;
 800789e:	e2dd      	b.n	8007e5c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 8123 	beq.w	8007af0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80078aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80078ae:	4b8d      	ldr	r3, [pc, #564]	@ (8007ae4 <HAL_UART_IRQHandler+0x2b8>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d106      	bne.n	80078c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80078b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80078ba:	4b8b      	ldr	r3, [pc, #556]	@ (8007ae8 <HAL_UART_IRQHandler+0x2bc>)
 80078bc:	4013      	ands	r3, r2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 8116 	beq.w	8007af0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d011      	beq.n	80078f4 <HAL_UART_IRQHandler+0xc8>
 80078d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00b      	beq.n	80078f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2201      	movs	r2, #1
 80078e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ea:	f043 0201 	orr.w	r2, r3, #1
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d011      	beq.n	8007924 <HAL_UART_IRQHandler+0xf8>
 8007900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00b      	beq.n	8007924 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2202      	movs	r2, #2
 8007912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800791a:	f043 0204 	orr.w	r2, r3, #4
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007928:	f003 0304 	and.w	r3, r3, #4
 800792c:	2b00      	cmp	r3, #0
 800792e:	d011      	beq.n	8007954 <HAL_UART_IRQHandler+0x128>
 8007930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00b      	beq.n	8007954 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2204      	movs	r2, #4
 8007942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800794a:	f043 0202 	orr.w	r2, r3, #2
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007958:	f003 0308 	and.w	r3, r3, #8
 800795c:	2b00      	cmp	r3, #0
 800795e:	d017      	beq.n	8007990 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007964:	f003 0320 	and.w	r3, r3, #32
 8007968:	2b00      	cmp	r3, #0
 800796a:	d105      	bne.n	8007978 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800796c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007970:	4b5c      	ldr	r3, [pc, #368]	@ (8007ae4 <HAL_UART_IRQHandler+0x2b8>)
 8007972:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00b      	beq.n	8007990 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2208      	movs	r2, #8
 800797e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007986:	f043 0208 	orr.w	r2, r3, #8
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007998:	2b00      	cmp	r3, #0
 800799a:	d012      	beq.n	80079c2 <HAL_UART_IRQHandler+0x196>
 800799c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00c      	beq.n	80079c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079b8:	f043 0220 	orr.w	r2, r3, #32
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 8249 	beq.w	8007e60 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079d2:	f003 0320 	and.w	r3, r3, #32
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d013      	beq.n	8007a02 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079de:	f003 0320 	and.w	r3, r3, #32
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d105      	bne.n	80079f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d007      	beq.n	8007a02 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a16:	2b40      	cmp	r3, #64	@ 0x40
 8007a18:	d005      	beq.n	8007a26 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a1e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d054      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 ffce 	bl	80089c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a36:	2b40      	cmp	r3, #64	@ 0x40
 8007a38:	d146      	bne.n	8007ac8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3308      	adds	r3, #8
 8007a40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a48:	e853 3f00 	ldrex	r3, [r3]
 8007a4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007a50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3308      	adds	r3, #8
 8007a62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1d9      	bne.n	8007a3a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d017      	beq.n	8007ac0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a96:	4a15      	ldr	r2, [pc, #84]	@ (8007aec <HAL_UART_IRQHandler+0x2c0>)
 8007a98:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fc faef 	bl	8004084 <HAL_DMA_Abort_IT>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d019      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007aba:	4610      	mov	r0, r2
 8007abc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007abe:	e00f      	b.n	8007ae0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f9e0 	bl	8007e86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ac6:	e00b      	b.n	8007ae0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f9dc 	bl	8007e86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ace:	e007      	b.n	8007ae0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f9d8 	bl	8007e86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007ade:	e1bf      	b.n	8007e60 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae0:	bf00      	nop
    return;
 8007ae2:	e1bd      	b.n	8007e60 <HAL_UART_IRQHandler+0x634>
 8007ae4:	10000001 	.word	0x10000001
 8007ae8:	04000120 	.word	0x04000120
 8007aec:	08008bc9 	.word	0x08008bc9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	f040 8153 	bne.w	8007da0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007afe:	f003 0310 	and.w	r3, r3, #16
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 814c 	beq.w	8007da0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b0c:	f003 0310 	and.w	r3, r3, #16
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 8145 	beq.w	8007da0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2210      	movs	r2, #16
 8007b1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b28:	2b40      	cmp	r3, #64	@ 0x40
 8007b2a:	f040 80bb 	bne.w	8007ca4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 818f 	beq.w	8007e64 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b50:	429a      	cmp	r2, r3
 8007b52:	f080 8187 	bcs.w	8007e64 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0320 	and.w	r3, r3, #32
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f040 8087 	bne.w	8007c82 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ba2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007baa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1da      	bne.n	8007b74 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3308      	adds	r3, #8
 8007bc4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bc8:	e853 3f00 	ldrex	r3, [r3]
 8007bcc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007bce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bd0:	f023 0301 	bic.w	r3, r3, #1
 8007bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3308      	adds	r3, #8
 8007bde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007be2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007be6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007bea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007bee:	e841 2300 	strex	r3, r2, [r1]
 8007bf2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007bf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1e1      	bne.n	8007bbe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	3308      	adds	r3, #8
 8007c00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c04:	e853 3f00 	ldrex	r3, [r3]
 8007c08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3308      	adds	r3, #8
 8007c1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e3      	bne.n	8007bfa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c50:	f023 0310 	bic.w	r3, r3, #16
 8007c54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c6a:	e841 2300 	strex	r3, r2, [r1]
 8007c6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1e4      	bne.n	8007c40 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fc f9a3 	bl	8003fc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2202      	movs	r2, #2
 8007c86:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f8fb 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ca2:	e0df      	b.n	8007e64 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 80d1 	beq.w	8007e68 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007cc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 80cc 	beq.w	8007e68 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	461a      	mov	r2, r3
 8007cee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cf4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cfa:	e841 2300 	strex	r3, r2, [r1]
 8007cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1e4      	bne.n	8007cd0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d10:	e853 3f00 	ldrex	r3, [r3]
 8007d14:	623b      	str	r3, [r7, #32]
   return(result);
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d1c:	f023 0301 	bic.w	r3, r3, #1
 8007d20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3308      	adds	r3, #8
 8007d2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e1      	bne.n	8007d06 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	e853 3f00 	ldrex	r3, [r3]
 8007d62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f023 0310 	bic.w	r3, r3, #16
 8007d6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d78:	61fb      	str	r3, [r7, #28]
 8007d7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7c:	69b9      	ldr	r1, [r7, #24]
 8007d7e:	69fa      	ldr	r2, [r7, #28]
 8007d80:	e841 2300 	strex	r3, r2, [r1]
 8007d84:	617b      	str	r3, [r7, #20]
   return(result);
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1e4      	bne.n	8007d56 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f87d 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d9e:	e063      	b.n	8007e68 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00e      	beq.n	8007dca <HAL_UART_IRQHandler+0x59e>
 8007dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007db0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d008      	beq.n	8007dca <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007dc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f001 fc5e 	bl	8009684 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dc8:	e051      	b.n	8007e6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d014      	beq.n	8007e00 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d105      	bne.n	8007dee <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007de6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d008      	beq.n	8007e00 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d03a      	beq.n	8007e6c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	4798      	blx	r3
    }
    return;
 8007dfe:	e035      	b.n	8007e6c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d009      	beq.n	8007e20 <HAL_UART_IRQHandler+0x5f4>
 8007e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 feeb 	bl	8008bf4 <UART_EndTransmit_IT>
    return;
 8007e1e:	e026      	b.n	8007e6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d009      	beq.n	8007e40 <HAL_UART_IRQHandler+0x614>
 8007e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d003      	beq.n	8007e40 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f001 fc35 	bl	80096a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e3e:	e016      	b.n	8007e6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d010      	beq.n	8007e6e <HAL_UART_IRQHandler+0x642>
 8007e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	da0c      	bge.n	8007e6e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f001 fc1e 	bl	8009696 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e5a:	e008      	b.n	8007e6e <HAL_UART_IRQHandler+0x642>
      return;
 8007e5c:	bf00      	nop
 8007e5e:	e006      	b.n	8007e6e <HAL_UART_IRQHandler+0x642>
    return;
 8007e60:	bf00      	nop
 8007e62:	e004      	b.n	8007e6e <HAL_UART_IRQHandler+0x642>
      return;
 8007e64:	bf00      	nop
 8007e66:	e002      	b.n	8007e6e <HAL_UART_IRQHandler+0x642>
      return;
 8007e68:	bf00      	nop
 8007e6a:	e000      	b.n	8007e6e <HAL_UART_IRQHandler+0x642>
    return;
 8007e6c:	bf00      	nop
  }
}
 8007e6e:	37e8      	adds	r7, #232	@ 0xe8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bc80      	pop	{r7}
 8007e84:	4770      	bx	lr

08007e86 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bc80      	pop	{r7}
 8007e96:	4770      	bx	lr

08007e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bc80      	pop	{r7}
 8007eac:	4770      	bx	lr
	...

08007eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007eb4:	b08c      	sub	sp, #48	@ 0x30
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	689a      	ldr	r2, [r3, #8]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	4b94      	ldr	r3, [pc, #592]	@ (8008130 <UART_SetConfig+0x280>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	6812      	ldr	r2, [r2, #0]
 8007ee6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ee8:	430b      	orrs	r3, r1
 8007eea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a89      	ldr	r2, [pc, #548]	@ (8008134 <UART_SetConfig+0x284>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d004      	beq.n	8007f1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007f26:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	6812      	ldr	r2, [r2, #0]
 8007f2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f30:	430b      	orrs	r3, r1
 8007f32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3a:	f023 010f 	bic.w	r1, r3, #15
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	430a      	orrs	r2, r1
 8007f48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a7a      	ldr	r2, [pc, #488]	@ (8008138 <UART_SetConfig+0x288>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d127      	bne.n	8007fa4 <UART_SetConfig+0xf4>
 8007f54:	2003      	movs	r0, #3
 8007f56:	f7ff fb2b 	bl	80075b0 <LL_RCC_GetUSARTClockSource>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d81b      	bhi.n	8007f9c <UART_SetConfig+0xec>
 8007f64:	a201      	add	r2, pc, #4	@ (adr r2, 8007f6c <UART_SetConfig+0xbc>)
 8007f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6a:	bf00      	nop
 8007f6c:	08007f7d 	.word	0x08007f7d
 8007f70:	08007f8d 	.word	0x08007f8d
 8007f74:	08007f85 	.word	0x08007f85
 8007f78:	08007f95 	.word	0x08007f95
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f82:	e080      	b.n	8008086 <UART_SetConfig+0x1d6>
 8007f84:	2302      	movs	r3, #2
 8007f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8a:	e07c      	b.n	8008086 <UART_SetConfig+0x1d6>
 8007f8c:	2304      	movs	r3, #4
 8007f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f92:	e078      	b.n	8008086 <UART_SetConfig+0x1d6>
 8007f94:	2308      	movs	r3, #8
 8007f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f9a:	e074      	b.n	8008086 <UART_SetConfig+0x1d6>
 8007f9c:	2310      	movs	r3, #16
 8007f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fa2:	e070      	b.n	8008086 <UART_SetConfig+0x1d6>
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a64      	ldr	r2, [pc, #400]	@ (800813c <UART_SetConfig+0x28c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d138      	bne.n	8008020 <UART_SetConfig+0x170>
 8007fae:	200c      	movs	r0, #12
 8007fb0:	f7ff fafe 	bl	80075b0 <LL_RCC_GetUSARTClockSource>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8007fba:	2b0c      	cmp	r3, #12
 8007fbc:	d82c      	bhi.n	8008018 <UART_SetConfig+0x168>
 8007fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc4 <UART_SetConfig+0x114>)
 8007fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc4:	08007ff9 	.word	0x08007ff9
 8007fc8:	08008019 	.word	0x08008019
 8007fcc:	08008019 	.word	0x08008019
 8007fd0:	08008019 	.word	0x08008019
 8007fd4:	08008009 	.word	0x08008009
 8007fd8:	08008019 	.word	0x08008019
 8007fdc:	08008019 	.word	0x08008019
 8007fe0:	08008019 	.word	0x08008019
 8007fe4:	08008001 	.word	0x08008001
 8007fe8:	08008019 	.word	0x08008019
 8007fec:	08008019 	.word	0x08008019
 8007ff0:	08008019 	.word	0x08008019
 8007ff4:	08008011 	.word	0x08008011
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ffe:	e042      	b.n	8008086 <UART_SetConfig+0x1d6>
 8008000:	2302      	movs	r3, #2
 8008002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008006:	e03e      	b.n	8008086 <UART_SetConfig+0x1d6>
 8008008:	2304      	movs	r3, #4
 800800a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800800e:	e03a      	b.n	8008086 <UART_SetConfig+0x1d6>
 8008010:	2308      	movs	r3, #8
 8008012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008016:	e036      	b.n	8008086 <UART_SetConfig+0x1d6>
 8008018:	2310      	movs	r3, #16
 800801a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801e:	e032      	b.n	8008086 <UART_SetConfig+0x1d6>
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a43      	ldr	r2, [pc, #268]	@ (8008134 <UART_SetConfig+0x284>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d12a      	bne.n	8008080 <UART_SetConfig+0x1d0>
 800802a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800802e:	f7ff fad1 	bl	80075d4 <LL_RCC_GetLPUARTClockSource>
 8008032:	4603      	mov	r3, r0
 8008034:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008038:	d01a      	beq.n	8008070 <UART_SetConfig+0x1c0>
 800803a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800803e:	d81b      	bhi.n	8008078 <UART_SetConfig+0x1c8>
 8008040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008044:	d00c      	beq.n	8008060 <UART_SetConfig+0x1b0>
 8008046:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800804a:	d815      	bhi.n	8008078 <UART_SetConfig+0x1c8>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d003      	beq.n	8008058 <UART_SetConfig+0x1a8>
 8008050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008054:	d008      	beq.n	8008068 <UART_SetConfig+0x1b8>
 8008056:	e00f      	b.n	8008078 <UART_SetConfig+0x1c8>
 8008058:	2300      	movs	r3, #0
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800805e:	e012      	b.n	8008086 <UART_SetConfig+0x1d6>
 8008060:	2302      	movs	r3, #2
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008066:	e00e      	b.n	8008086 <UART_SetConfig+0x1d6>
 8008068:	2304      	movs	r3, #4
 800806a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800806e:	e00a      	b.n	8008086 <UART_SetConfig+0x1d6>
 8008070:	2308      	movs	r3, #8
 8008072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008076:	e006      	b.n	8008086 <UART_SetConfig+0x1d6>
 8008078:	2310      	movs	r3, #16
 800807a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800807e:	e002      	b.n	8008086 <UART_SetConfig+0x1d6>
 8008080:	2310      	movs	r3, #16
 8008082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a2a      	ldr	r2, [pc, #168]	@ (8008134 <UART_SetConfig+0x284>)
 800808c:	4293      	cmp	r3, r2
 800808e:	f040 80a4 	bne.w	80081da <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008092:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008096:	2b08      	cmp	r3, #8
 8008098:	d823      	bhi.n	80080e2 <UART_SetConfig+0x232>
 800809a:	a201      	add	r2, pc, #4	@ (adr r2, 80080a0 <UART_SetConfig+0x1f0>)
 800809c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a0:	080080c5 	.word	0x080080c5
 80080a4:	080080e3 	.word	0x080080e3
 80080a8:	080080cd 	.word	0x080080cd
 80080ac:	080080e3 	.word	0x080080e3
 80080b0:	080080d3 	.word	0x080080d3
 80080b4:	080080e3 	.word	0x080080e3
 80080b8:	080080e3 	.word	0x080080e3
 80080bc:	080080e3 	.word	0x080080e3
 80080c0:	080080db 	.word	0x080080db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080c4:	f7fd ff4a 	bl	8005f5c <HAL_RCC_GetPCLK1Freq>
 80080c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080ca:	e010      	b.n	80080ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008140 <UART_SetConfig+0x290>)
 80080ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080d0:	e00d      	b.n	80080ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080d2:	f7fd fe8f 	bl	8005df4 <HAL_RCC_GetSysClockFreq>
 80080d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080d8:	e009      	b.n	80080ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080e0:	e005      	b.n	80080ee <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80080ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 8137 	beq.w	8008364 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080fa:	4a12      	ldr	r2, [pc, #72]	@ (8008144 <UART_SetConfig+0x294>)
 80080fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008100:	461a      	mov	r2, r3
 8008102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008104:	fbb3 f3f2 	udiv	r3, r3, r2
 8008108:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	4613      	mov	r3, r2
 8008110:	005b      	lsls	r3, r3, #1
 8008112:	4413      	add	r3, r2
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	429a      	cmp	r2, r3
 8008118:	d305      	bcc.n	8008126 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008120:	69ba      	ldr	r2, [r7, #24]
 8008122:	429a      	cmp	r2, r3
 8008124:	d910      	bls.n	8008148 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800812c:	e11a      	b.n	8008364 <UART_SetConfig+0x4b4>
 800812e:	bf00      	nop
 8008130:	cfff69f3 	.word	0xcfff69f3
 8008134:	40008000 	.word	0x40008000
 8008138:	40013800 	.word	0x40013800
 800813c:	40004400 	.word	0x40004400
 8008140:	00f42400 	.word	0x00f42400
 8008144:	0801d3f4 	.word	0x0801d3f4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814a:	2200      	movs	r2, #0
 800814c:	60bb      	str	r3, [r7, #8]
 800814e:	60fa      	str	r2, [r7, #12]
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008154:	4a8e      	ldr	r2, [pc, #568]	@ (8008390 <UART_SetConfig+0x4e0>)
 8008156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800815a:	b29b      	uxth	r3, r3
 800815c:	2200      	movs	r2, #0
 800815e:	603b      	str	r3, [r7, #0]
 8008160:	607a      	str	r2, [r7, #4]
 8008162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008166:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800816a:	f7f8 fbad 	bl	80008c8 <__aeabi_uldivmod>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	4610      	mov	r0, r2
 8008174:	4619      	mov	r1, r3
 8008176:	f04f 0200 	mov.w	r2, #0
 800817a:	f04f 0300 	mov.w	r3, #0
 800817e:	020b      	lsls	r3, r1, #8
 8008180:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008184:	0202      	lsls	r2, r0, #8
 8008186:	6979      	ldr	r1, [r7, #20]
 8008188:	6849      	ldr	r1, [r1, #4]
 800818a:	0849      	lsrs	r1, r1, #1
 800818c:	2000      	movs	r0, #0
 800818e:	460c      	mov	r4, r1
 8008190:	4605      	mov	r5, r0
 8008192:	eb12 0804 	adds.w	r8, r2, r4
 8008196:	eb43 0905 	adc.w	r9, r3, r5
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	469a      	mov	sl, r3
 80081a2:	4693      	mov	fp, r2
 80081a4:	4652      	mov	r2, sl
 80081a6:	465b      	mov	r3, fp
 80081a8:	4640      	mov	r0, r8
 80081aa:	4649      	mov	r1, r9
 80081ac:	f7f8 fb8c 	bl	80008c8 <__aeabi_uldivmod>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	4613      	mov	r3, r2
 80081b6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081be:	d308      	bcc.n	80081d2 <UART_SetConfig+0x322>
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081c6:	d204      	bcs.n	80081d2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6a3a      	ldr	r2, [r7, #32]
 80081ce:	60da      	str	r2, [r3, #12]
 80081d0:	e0c8      	b.n	8008364 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80081d8:	e0c4      	b.n	8008364 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081e2:	d167      	bne.n	80082b4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80081e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d828      	bhi.n	800823e <UART_SetConfig+0x38e>
 80081ec:	a201      	add	r2, pc, #4	@ (adr r2, 80081f4 <UART_SetConfig+0x344>)
 80081ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f2:	bf00      	nop
 80081f4:	08008219 	.word	0x08008219
 80081f8:	08008221 	.word	0x08008221
 80081fc:	08008229 	.word	0x08008229
 8008200:	0800823f 	.word	0x0800823f
 8008204:	0800822f 	.word	0x0800822f
 8008208:	0800823f 	.word	0x0800823f
 800820c:	0800823f 	.word	0x0800823f
 8008210:	0800823f 	.word	0x0800823f
 8008214:	08008237 	.word	0x08008237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008218:	f7fd fea0 	bl	8005f5c <HAL_RCC_GetPCLK1Freq>
 800821c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800821e:	e014      	b.n	800824a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008220:	f7fd feae 	bl	8005f80 <HAL_RCC_GetPCLK2Freq>
 8008224:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008226:	e010      	b.n	800824a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008228:	4b5a      	ldr	r3, [pc, #360]	@ (8008394 <UART_SetConfig+0x4e4>)
 800822a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800822c:	e00d      	b.n	800824a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800822e:	f7fd fde1 	bl	8005df4 <HAL_RCC_GetSysClockFreq>
 8008232:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008234:	e009      	b.n	800824a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800823a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800823c:	e005      	b.n	800824a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008248:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800824a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 8089 	beq.w	8008364 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008256:	4a4e      	ldr	r2, [pc, #312]	@ (8008390 <UART_SetConfig+0x4e0>)
 8008258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800825c:	461a      	mov	r2, r3
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008260:	fbb3 f3f2 	udiv	r3, r3, r2
 8008264:	005a      	lsls	r2, r3, #1
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	085b      	lsrs	r3, r3, #1
 800826c:	441a      	add	r2, r3
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	fbb2 f3f3 	udiv	r3, r2, r3
 8008276:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	2b0f      	cmp	r3, #15
 800827c:	d916      	bls.n	80082ac <UART_SetConfig+0x3fc>
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008284:	d212      	bcs.n	80082ac <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	b29b      	uxth	r3, r3
 800828a:	f023 030f 	bic.w	r3, r3, #15
 800828e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008290:	6a3b      	ldr	r3, [r7, #32]
 8008292:	085b      	lsrs	r3, r3, #1
 8008294:	b29b      	uxth	r3, r3
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	b29a      	uxth	r2, r3
 800829c:	8bfb      	ldrh	r3, [r7, #30]
 800829e:	4313      	orrs	r3, r2
 80082a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	8bfa      	ldrh	r2, [r7, #30]
 80082a8:	60da      	str	r2, [r3, #12]
 80082aa:	e05b      	b.n	8008364 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082b2:	e057      	b.n	8008364 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80082b8:	2b08      	cmp	r3, #8
 80082ba:	d828      	bhi.n	800830e <UART_SetConfig+0x45e>
 80082bc:	a201      	add	r2, pc, #4	@ (adr r2, 80082c4 <UART_SetConfig+0x414>)
 80082be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c2:	bf00      	nop
 80082c4:	080082e9 	.word	0x080082e9
 80082c8:	080082f1 	.word	0x080082f1
 80082cc:	080082f9 	.word	0x080082f9
 80082d0:	0800830f 	.word	0x0800830f
 80082d4:	080082ff 	.word	0x080082ff
 80082d8:	0800830f 	.word	0x0800830f
 80082dc:	0800830f 	.word	0x0800830f
 80082e0:	0800830f 	.word	0x0800830f
 80082e4:	08008307 	.word	0x08008307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082e8:	f7fd fe38 	bl	8005f5c <HAL_RCC_GetPCLK1Freq>
 80082ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082ee:	e014      	b.n	800831a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082f0:	f7fd fe46 	bl	8005f80 <HAL_RCC_GetPCLK2Freq>
 80082f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082f6:	e010      	b.n	800831a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082f8:	4b26      	ldr	r3, [pc, #152]	@ (8008394 <UART_SetConfig+0x4e4>)
 80082fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082fc:	e00d      	b.n	800831a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082fe:	f7fd fd79 	bl	8005df4 <HAL_RCC_GetSysClockFreq>
 8008302:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008304:	e009      	b.n	800831a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800830a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800830c:	e005      	b.n	800831a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800830e:	2300      	movs	r3, #0
 8008310:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008318:	bf00      	nop
    }

    if (pclk != 0U)
 800831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831c:	2b00      	cmp	r3, #0
 800831e:	d021      	beq.n	8008364 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008324:	4a1a      	ldr	r2, [pc, #104]	@ (8008390 <UART_SetConfig+0x4e0>)
 8008326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800832a:	461a      	mov	r2, r3
 800832c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	085b      	lsrs	r3, r3, #1
 8008338:	441a      	add	r2, r3
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008342:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	2b0f      	cmp	r3, #15
 8008348:	d909      	bls.n	800835e <UART_SetConfig+0x4ae>
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008350:	d205      	bcs.n	800835e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	b29a      	uxth	r2, r3
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	60da      	str	r2, [r3, #12]
 800835c:	e002      	b.n	8008364 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	2201      	movs	r2, #1
 8008368:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	2201      	movs	r2, #1
 8008370:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	2200      	movs	r2, #0
 8008378:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	2200      	movs	r2, #0
 800837e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008380:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008384:	4618      	mov	r0, r3
 8008386:	3730      	adds	r7, #48	@ 0x30
 8008388:	46bd      	mov	sp, r7
 800838a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800838e:	bf00      	nop
 8008390:	0801d3f4 	.word	0x0801d3f4
 8008394:	00f42400 	.word	0x00f42400

08008398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00a      	beq.n	80083c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00a      	beq.n	80083e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e8:	f003 0304 	and.w	r3, r3, #4
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00a      	beq.n	8008406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	430a      	orrs	r2, r1
 8008404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840a:	f003 0308 	and.w	r3, r3, #8
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00a      	beq.n	8008428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	430a      	orrs	r2, r1
 8008426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800842c:	f003 0310 	and.w	r3, r3, #16
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00a      	beq.n	800844a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	430a      	orrs	r2, r1
 8008448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800844e:	f003 0320 	and.w	r3, r3, #32
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00a      	beq.n	800846c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01a      	beq.n	80084ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008492:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008496:	d10a      	bne.n	80084ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	430a      	orrs	r2, r1
 80084ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00a      	beq.n	80084d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	430a      	orrs	r2, r1
 80084ce:	605a      	str	r2, [r3, #4]
  }
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bc80      	pop	{r7}
 80084d8:	4770      	bx	lr

080084da <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b086      	sub	sp, #24
 80084de:	af02      	add	r7, sp, #8
 80084e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084ea:	f7f9 fb71 	bl	8001bd0 <HAL_GetTick>
 80084ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0308 	and.w	r3, r3, #8
 80084fa:	2b08      	cmp	r3, #8
 80084fc:	d10e      	bne.n	800851c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f832 	bl	8008576 <UART_WaitOnFlagUntilTimeout>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e028      	b.n	800856e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0304 	and.w	r3, r3, #4
 8008526:	2b04      	cmp	r3, #4
 8008528:	d10e      	bne.n	8008548 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800852a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f81c 	bl	8008576 <UART_WaitOnFlagUntilTimeout>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e012      	b.n	800856e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2220      	movs	r2, #32
 800854c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2220      	movs	r2, #32
 8008554:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b09c      	sub	sp, #112	@ 0x70
 800857a:	af00      	add	r7, sp, #0
 800857c:	60f8      	str	r0, [r7, #12]
 800857e:	60b9      	str	r1, [r7, #8]
 8008580:	603b      	str	r3, [r7, #0]
 8008582:	4613      	mov	r3, r2
 8008584:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008586:	e0a9      	b.n	80086dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008588:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800858a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858e:	f000 80a5 	beq.w	80086dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008592:	f7f9 fb1d 	bl	8001bd0 <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800859e:	429a      	cmp	r2, r3
 80085a0:	d302      	bcc.n	80085a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80085a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d140      	bne.n	800862a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085b0:	e853 3f00 	ldrex	r3, [r3]
 80085b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80085b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085b8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80085bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085c8:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80085cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80085ce:	e841 2300 	strex	r3, r2, [r1]
 80085d2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80085d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1e6      	bne.n	80085a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3308      	adds	r3, #8
 80085e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085e4:	e853 3f00 	ldrex	r3, [r3]
 80085e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ec:	f023 0301 	bic.w	r3, r3, #1
 80085f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3308      	adds	r3, #8
 80085f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80085fa:	64ba      	str	r2, [r7, #72]	@ 0x48
 80085fc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008600:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008602:	e841 2300 	strex	r3, r2, [r1]
 8008606:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1e5      	bne.n	80085da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2220      	movs	r2, #32
 8008612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2220      	movs	r2, #32
 800861a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e069      	b.n	80086fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 0304 	and.w	r3, r3, #4
 8008634:	2b00      	cmp	r3, #0
 8008636:	d051      	beq.n	80086dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008642:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008646:	d149      	bne.n	80086dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008650:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865a:	e853 3f00 	ldrex	r3, [r3]
 800865e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008662:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008666:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	461a      	mov	r2, r3
 800866e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008670:	637b      	str	r3, [r7, #52]	@ 0x34
 8008672:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008674:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008676:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008678:	e841 2300 	strex	r3, r2, [r1]
 800867c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800867e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1e6      	bne.n	8008652 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3308      	adds	r3, #8
 800868a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	e853 3f00 	ldrex	r3, [r3]
 8008692:	613b      	str	r3, [r7, #16]
   return(result);
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	f023 0301 	bic.w	r3, r3, #1
 800869a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3308      	adds	r3, #8
 80086a2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80086a4:	623a      	str	r2, [r7, #32]
 80086a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a8:	69f9      	ldr	r1, [r7, #28]
 80086aa:	6a3a      	ldr	r2, [r7, #32]
 80086ac:	e841 2300 	strex	r3, r2, [r1]
 80086b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1e5      	bne.n	8008684 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2220      	movs	r2, #32
 80086bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e010      	b.n	80086fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	69da      	ldr	r2, [r3, #28]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	4013      	ands	r3, r2
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	bf0c      	ite	eq
 80086ec:	2301      	moveq	r3, #1
 80086ee:	2300      	movne	r3, #0
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	461a      	mov	r2, r3
 80086f4:	79fb      	ldrb	r3, [r7, #7]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	f43f af46 	beq.w	8008588 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3770      	adds	r7, #112	@ 0x70
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008708:	b480      	push	{r7}
 800870a:	b0a3      	sub	sp, #140	@ 0x8c
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	4613      	mov	r3, r2
 8008714:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	88fa      	ldrh	r2, [r7, #6]
 8008720:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	88fa      	ldrh	r2, [r7, #6]
 8008728:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800873a:	d10e      	bne.n	800875a <UART_Start_Receive_IT+0x52>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d105      	bne.n	8008750 <UART_Start_Receive_IT+0x48>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800874a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800874e:	e02d      	b.n	80087ac <UART_Start_Receive_IT+0xa4>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	22ff      	movs	r2, #255	@ 0xff
 8008754:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008758:	e028      	b.n	80087ac <UART_Start_Receive_IT+0xa4>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10d      	bne.n	800877e <UART_Start_Receive_IT+0x76>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d104      	bne.n	8008774 <UART_Start_Receive_IT+0x6c>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	22ff      	movs	r2, #255	@ 0xff
 800876e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008772:	e01b      	b.n	80087ac <UART_Start_Receive_IT+0xa4>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	227f      	movs	r2, #127	@ 0x7f
 8008778:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800877c:	e016      	b.n	80087ac <UART_Start_Receive_IT+0xa4>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008786:	d10d      	bne.n	80087a4 <UART_Start_Receive_IT+0x9c>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d104      	bne.n	800879a <UART_Start_Receive_IT+0x92>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	227f      	movs	r2, #127	@ 0x7f
 8008794:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008798:	e008      	b.n	80087ac <UART_Start_Receive_IT+0xa4>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	223f      	movs	r2, #63	@ 0x3f
 800879e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087a2:	e003      	b.n	80087ac <UART_Start_Receive_IT+0xa4>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2222      	movs	r2, #34	@ 0x22
 80087b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3308      	adds	r3, #8
 80087c2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087c6:	e853 3f00 	ldrex	r3, [r3]
 80087ca:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80087cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087ce:	f043 0301 	orr.w	r3, r3, #1
 80087d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3308      	adds	r3, #8
 80087dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80087e0:	673a      	str	r2, [r7, #112]	@ 0x70
 80087e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80087e6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80087e8:	e841 2300 	strex	r3, r2, [r1]
 80087ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80087ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1e3      	bne.n	80087bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087fc:	d14f      	bne.n	800889e <UART_Start_Receive_IT+0x196>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008804:	88fa      	ldrh	r2, [r7, #6]
 8008806:	429a      	cmp	r2, r3
 8008808:	d349      	bcc.n	800889e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008812:	d107      	bne.n	8008824 <UART_Start_Receive_IT+0x11c>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d103      	bne.n	8008824 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4a46      	ldr	r2, [pc, #280]	@ (8008938 <UART_Start_Receive_IT+0x230>)
 8008820:	675a      	str	r2, [r3, #116]	@ 0x74
 8008822:	e002      	b.n	800882a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	4a45      	ldr	r2, [pc, #276]	@ (800893c <UART_Start_Receive_IT+0x234>)
 8008828:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d01a      	beq.n	8008868 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800883a:	e853 3f00 	ldrex	r3, [r3]
 800883e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008846:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008854:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008856:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800885a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800885c:	e841 2300 	strex	r3, r2, [r1]
 8008860:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e4      	bne.n	8008832 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3308      	adds	r3, #8
 800886e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008872:	e853 3f00 	ldrex	r3, [r3]
 8008876:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800887a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800887e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3308      	adds	r3, #8
 8008886:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008888:	64ba      	str	r2, [r7, #72]	@ 0x48
 800888a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800888e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008890:	e841 2300 	strex	r3, r2, [r1]
 8008894:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e5      	bne.n	8008868 <UART_Start_Receive_IT+0x160>
 800889c:	e046      	b.n	800892c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088a6:	d107      	bne.n	80088b8 <UART_Start_Receive_IT+0x1b0>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d103      	bne.n	80088b8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4a23      	ldr	r2, [pc, #140]	@ (8008940 <UART_Start_Receive_IT+0x238>)
 80088b4:	675a      	str	r2, [r3, #116]	@ 0x74
 80088b6:	e002      	b.n	80088be <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	4a22      	ldr	r2, [pc, #136]	@ (8008944 <UART_Start_Receive_IT+0x23c>)
 80088bc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d019      	beq.n	80088fa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ce:	e853 3f00 	ldrex	r3, [r3]
 80088d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80088da:	677b      	str	r3, [r7, #116]	@ 0x74
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	461a      	mov	r2, r3
 80088e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80088e6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80088ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088ec:	e841 2300 	strex	r3, r2, [r1]
 80088f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80088f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1e6      	bne.n	80088c6 <UART_Start_Receive_IT+0x1be>
 80088f8:	e018      	b.n	800892c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	e853 3f00 	ldrex	r3, [r3]
 8008906:	613b      	str	r3, [r7, #16]
   return(result);
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	f043 0320 	orr.w	r3, r3, #32
 800890e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	461a      	mov	r2, r3
 8008916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008918:	623b      	str	r3, [r7, #32]
 800891a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891c:	69f9      	ldr	r1, [r7, #28]
 800891e:	6a3a      	ldr	r2, [r7, #32]
 8008920:	e841 2300 	strex	r3, r2, [r1]
 8008924:	61bb      	str	r3, [r7, #24]
   return(result);
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1e6      	bne.n	80088fa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	378c      	adds	r7, #140	@ 0x8c
 8008932:	46bd      	mov	sp, r7
 8008934:	bc80      	pop	{r7}
 8008936:	4770      	bx	lr
 8008938:	0800931d 	.word	0x0800931d
 800893c:	08008fbd 	.word	0x08008fbd
 8008940:	08008e05 	.word	0x08008e05
 8008944:	08008c4d 	.word	0x08008c4d

08008948 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008948:	b480      	push	{r7}
 800894a:	b08f      	sub	sp, #60	@ 0x3c
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	e853 3f00 	ldrex	r3, [r3]
 800895c:	61fb      	str	r3, [r7, #28]
   return(result);
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008964:	637b      	str	r3, [r7, #52]	@ 0x34
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800896e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008970:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008972:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008974:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008976:	e841 2300 	strex	r3, r2, [r1]
 800897a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800897c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1e6      	bne.n	8008950 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	3308      	adds	r3, #8
 8008988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	e853 3f00 	ldrex	r3, [r3]
 8008990:	60bb      	str	r3, [r7, #8]
   return(result);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008998:	633b      	str	r3, [r7, #48]	@ 0x30
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3308      	adds	r3, #8
 80089a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089a2:	61ba      	str	r2, [r7, #24]
 80089a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a6:	6979      	ldr	r1, [r7, #20]
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	613b      	str	r3, [r7, #16]
   return(result);
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1e5      	bne.n	8008982 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80089be:	bf00      	nop
 80089c0:	373c      	adds	r7, #60	@ 0x3c
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bc80      	pop	{r7}
 80089c6:	4770      	bx	lr

080089c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b095      	sub	sp, #84	@ 0x54
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d8:	e853 3f00 	ldrex	r3, [r3]
 80089dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	461a      	mov	r2, r3
 80089ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80089f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089f6:	e841 2300 	strex	r3, r2, [r1]
 80089fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1e6      	bne.n	80089d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3308      	adds	r3, #8
 8008a08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	e853 3f00 	ldrex	r3, [r3]
 8008a10:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a18:	f023 0301 	bic.w	r3, r3, #1
 8008a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3308      	adds	r3, #8
 8008a24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a2e:	e841 2300 	strex	r3, r2, [r1]
 8008a32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1e3      	bne.n	8008a02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d118      	bne.n	8008a74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	e853 3f00 	ldrex	r3, [r3]
 8008a4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	f023 0310 	bic.w	r3, r3, #16
 8008a56:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a60:	61bb      	str	r3, [r7, #24]
 8008a62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a64:	6979      	ldr	r1, [r7, #20]
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	e841 2300 	strex	r3, r2, [r1]
 8008a6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1e6      	bne.n	8008a42 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2220      	movs	r2, #32
 8008a78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008a88:	bf00      	nop
 8008a8a:	3754      	adds	r7, #84	@ 0x54
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bc80      	pop	{r7}
 8008a90:	4770      	bx	lr

08008a92 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b090      	sub	sp, #64	@ 0x40
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 0320 	and.w	r3, r3, #32
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d137      	bne.n	8008b1e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3308      	adds	r3, #8
 8008abc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008acc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3308      	adds	r3, #8
 8008ad4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ad6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008adc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e5      	bne.n	8008ab6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	e853 3f00 	ldrex	r3, [r3]
 8008af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008afe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	461a      	mov	r2, r3
 8008b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b08:	61fb      	str	r3, [r7, #28]
 8008b0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0c:	69b9      	ldr	r1, [r7, #24]
 8008b0e:	69fa      	ldr	r2, [r7, #28]
 8008b10:	e841 2300 	strex	r3, r2, [r1]
 8008b14:	617b      	str	r3, [r7, #20]
   return(result);
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1e6      	bne.n	8008aea <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b1c:	e002      	b.n	8008b24 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008b1e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008b20:	f7f9 fda0 	bl	8002664 <HAL_UART_TxCpltCallback>
}
 8008b24:	bf00      	nop
 8008b26:	3740      	adds	r7, #64	@ 0x40
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b38:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f7ff f99a 	bl	8007e74 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b40:	bf00      	nop
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b54:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b5c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b64:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b70:	2b80      	cmp	r3, #128	@ 0x80
 8008b72:	d109      	bne.n	8008b88 <UART_DMAError+0x40>
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	2b21      	cmp	r3, #33	@ 0x21
 8008b78:	d106      	bne.n	8008b88 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008b82:	6978      	ldr	r0, [r7, #20]
 8008b84:	f7ff fee0 	bl	8008948 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b92:	2b40      	cmp	r3, #64	@ 0x40
 8008b94:	d109      	bne.n	8008baa <UART_DMAError+0x62>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2b22      	cmp	r3, #34	@ 0x22
 8008b9a:	d106      	bne.n	8008baa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008ba4:	6978      	ldr	r0, [r7, #20]
 8008ba6:	f7ff ff0f 	bl	80089c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bb0:	f043 0210 	orr.w	r2, r3, #16
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bba:	6978      	ldr	r0, [r7, #20]
 8008bbc:	f7ff f963 	bl	8007e86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bc0:	bf00      	nop
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f7ff f94d 	bl	8007e86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bec:	bf00      	nop
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b088      	sub	sp, #32
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	e853 3f00 	ldrex	r3, [r3]
 8008c08:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c10:	61fb      	str	r3, [r7, #28]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	61bb      	str	r3, [r7, #24]
 8008c1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1e:	6979      	ldr	r1, [r7, #20]
 8008c20:	69ba      	ldr	r2, [r7, #24]
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	613b      	str	r3, [r7, #16]
   return(result);
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e6      	bne.n	8008bfc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2220      	movs	r2, #32
 8008c32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7f9 fd11 	bl	8002664 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c42:	bf00      	nop
 8008c44:	3720      	adds	r7, #32
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
	...

08008c4c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b09c      	sub	sp, #112	@ 0x70
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c5a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c64:	2b22      	cmp	r3, #34	@ 0x22
 8008c66:	f040 80be 	bne.w	8008de6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c70:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c78:	b2d9      	uxtb	r1, r3
 8008c7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c84:	400a      	ands	r2, r1
 8008c86:	b2d2      	uxtb	r2, r2
 8008c88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f040 80a1 	bne.w	8008df6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cbc:	e853 3f00 	ldrex	r3, [r3]
 8008cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008cd4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008cd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008cda:	e841 2300 	strex	r3, r2, [r1]
 8008cde:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1e6      	bne.n	8008cb4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	3308      	adds	r3, #8
 8008cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf0:	e853 3f00 	ldrex	r3, [r3]
 8008cf4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf8:	f023 0301 	bic.w	r3, r3, #1
 8008cfc:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3308      	adds	r3, #8
 8008d04:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008d06:	647a      	str	r2, [r7, #68]	@ 0x44
 8008d08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d0e:	e841 2300 	strex	r3, r2, [r1]
 8008d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1e5      	bne.n	8008ce6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2220      	movs	r2, #32
 8008d1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a33      	ldr	r2, [pc, #204]	@ (8008e00 <UART_RxISR_8BIT+0x1b4>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d01f      	beq.n	8008d78 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d018      	beq.n	8008d78 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4e:	e853 3f00 	ldrex	r3, [r3]
 8008d52:	623b      	str	r3, [r7, #32]
   return(result);
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	461a      	mov	r2, r3
 8008d62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d6c:	e841 2300 	strex	r3, r2, [r1]
 8008d70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d1e6      	bne.n	8008d46 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d12e      	bne.n	8008dde <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	e853 3f00 	ldrex	r3, [r3]
 8008d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f023 0310 	bic.w	r3, r3, #16
 8008d9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	461a      	mov	r2, r3
 8008da2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008da4:	61fb      	str	r3, [r7, #28]
 8008da6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da8:	69b9      	ldr	r1, [r7, #24]
 8008daa:	69fa      	ldr	r2, [r7, #28]
 8008dac:	e841 2300 	strex	r3, r2, [r1]
 8008db0:	617b      	str	r3, [r7, #20]
   return(result);
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1e6      	bne.n	8008d86 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	69db      	ldr	r3, [r3, #28]
 8008dbe:	f003 0310 	and.w	r3, r3, #16
 8008dc2:	2b10      	cmp	r3, #16
 8008dc4:	d103      	bne.n	8008dce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2210      	movs	r2, #16
 8008dcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7ff f85e 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ddc:	e00b      	b.n	8008df6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7f9 fc56 	bl	8002690 <HAL_UART_RxCpltCallback>
}
 8008de4:	e007      	b.n	8008df6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	699a      	ldr	r2, [r3, #24]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f042 0208 	orr.w	r2, r2, #8
 8008df4:	619a      	str	r2, [r3, #24]
}
 8008df6:	bf00      	nop
 8008df8:	3770      	adds	r7, #112	@ 0x70
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	40008000 	.word	0x40008000

08008e04 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b09c      	sub	sp, #112	@ 0x70
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e1c:	2b22      	cmp	r3, #34	@ 0x22
 8008e1e:	f040 80be 	bne.w	8008f9e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e30:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e32:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008e36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e40:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e46:	1c9a      	adds	r2, r3, #2
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	3b01      	subs	r3, #1
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f040 80a1 	bne.w	8008fae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008e7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e80:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e8c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e6      	bne.n	8008e6c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3308      	adds	r3, #8
 8008ea4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea8:	e853 3f00 	ldrex	r3, [r3]
 8008eac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb0:	f023 0301 	bic.w	r3, r3, #1
 8008eb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3308      	adds	r3, #8
 8008ebc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ebe:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ec4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ec6:	e841 2300 	strex	r3, r2, [r1]
 8008eca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1e5      	bne.n	8008e9e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2220      	movs	r2, #32
 8008ed6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a33      	ldr	r2, [pc, #204]	@ (8008fb8 <UART_RxISR_16BIT+0x1b4>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d01f      	beq.n	8008f30 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d018      	beq.n	8008f30 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	e853 3f00 	ldrex	r3, [r3]
 8008f0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f1e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f24:	e841 2300 	strex	r3, r2, [r1]
 8008f28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1e6      	bne.n	8008efe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d12e      	bne.n	8008f96 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	e853 3f00 	ldrex	r3, [r3]
 8008f4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	f023 0310 	bic.w	r3, r3, #16
 8008f52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f5c:	61bb      	str	r3, [r7, #24]
 8008f5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f60:	6979      	ldr	r1, [r7, #20]
 8008f62:	69ba      	ldr	r2, [r7, #24]
 8008f64:	e841 2300 	strex	r3, r2, [r1]
 8008f68:	613b      	str	r3, [r7, #16]
   return(result);
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e6      	bne.n	8008f3e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	69db      	ldr	r3, [r3, #28]
 8008f76:	f003 0310 	and.w	r3, r3, #16
 8008f7a:	2b10      	cmp	r3, #16
 8008f7c:	d103      	bne.n	8008f86 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2210      	movs	r2, #16
 8008f84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7fe ff82 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f94:	e00b      	b.n	8008fae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7f9 fb7a 	bl	8002690 <HAL_UART_RxCpltCallback>
}
 8008f9c:	e007      	b.n	8008fae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	699a      	ldr	r2, [r3, #24]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f042 0208 	orr.w	r2, r2, #8
 8008fac:	619a      	str	r2, [r3, #24]
}
 8008fae:	bf00      	nop
 8008fb0:	3770      	adds	r7, #112	@ 0x70
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	40008000 	.word	0x40008000

08008fbc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b0ac      	sub	sp, #176	@ 0xb0
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008fca:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ff2:	2b22      	cmp	r3, #34	@ 0x22
 8008ff4:	f040 8182 	bne.w	80092fc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ffe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009002:	e125      	b.n	8009250 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800900e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009012:	b2d9      	uxtb	r1, r3
 8009014:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009018:	b2da      	uxtb	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800901e:	400a      	ands	r2, r1
 8009020:	b2d2      	uxtb	r2, r2
 8009022:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009028:	1c5a      	adds	r2, r3, #1
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009034:	b29b      	uxth	r3, r3
 8009036:	3b01      	subs	r3, #1
 8009038:	b29a      	uxth	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800904a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800904e:	f003 0307 	and.w	r3, r3, #7
 8009052:	2b00      	cmp	r3, #0
 8009054:	d053      	beq.n	80090fe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	d011      	beq.n	8009086 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009062:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00b      	beq.n	8009086 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2201      	movs	r2, #1
 8009074:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800907c:	f043 0201 	orr.w	r2, r3, #1
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800908a:	f003 0302 	and.w	r3, r3, #2
 800908e:	2b00      	cmp	r3, #0
 8009090:	d011      	beq.n	80090b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009092:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009096:	f003 0301 	and.w	r3, r3, #1
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00b      	beq.n	80090b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2202      	movs	r2, #2
 80090a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ac:	f043 0204 	orr.w	r2, r3, #4
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090ba:	f003 0304 	and.w	r3, r3, #4
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d011      	beq.n	80090e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80090c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090c6:	f003 0301 	and.w	r3, r3, #1
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00b      	beq.n	80090e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2204      	movs	r2, #4
 80090d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090dc:	f043 0202 	orr.w	r2, r3, #2
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d006      	beq.n	80090fe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7fe fec8 	bl	8007e86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009104:	b29b      	uxth	r3, r3
 8009106:	2b00      	cmp	r3, #0
 8009108:	f040 80a2 	bne.w	8009250 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009112:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009114:	e853 3f00 	ldrex	r3, [r3]
 8009118:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800911a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800911c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009120:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	461a      	mov	r2, r3
 800912a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800912e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009130:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009132:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009134:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009136:	e841 2300 	strex	r3, r2, [r1]
 800913a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800913c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1e4      	bne.n	800910c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3308      	adds	r3, #8
 8009148:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800914c:	e853 3f00 	ldrex	r3, [r3]
 8009150:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009152:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009154:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009158:	f023 0301 	bic.w	r3, r3, #1
 800915c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3308      	adds	r3, #8
 8009166:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800916a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800916c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009170:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009172:	e841 2300 	strex	r3, r2, [r1]
 8009176:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009178:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1e1      	bne.n	8009142 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2220      	movs	r2, #32
 8009182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a5f      	ldr	r2, [pc, #380]	@ (8009314 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d021      	beq.n	80091e0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d01a      	beq.n	80091e0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80091b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	461a      	mov	r2, r3
 80091c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80091ce:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80091d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80091d4:	e841 2300 	strex	r3, r2, [r1]
 80091d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80091da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1e4      	bne.n	80091aa <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d130      	bne.n	800924a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f6:	e853 3f00 	ldrex	r3, [r3]
 80091fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fe:	f023 0310 	bic.w	r3, r3, #16
 8009202:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009210:	643b      	str	r3, [r7, #64]	@ 0x40
 8009212:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009214:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009216:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009218:	e841 2300 	strex	r3, r2, [r1]
 800921c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800921e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1e4      	bne.n	80091ee <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	69db      	ldr	r3, [r3, #28]
 800922a:	f003 0310 	and.w	r3, r3, #16
 800922e:	2b10      	cmp	r3, #16
 8009230:	d103      	bne.n	800923a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2210      	movs	r2, #16
 8009238:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7fe fe28 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
 8009248:	e002      	b.n	8009250 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f7f9 fa20 	bl	8002690 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009250:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009254:	2b00      	cmp	r3, #0
 8009256:	d006      	beq.n	8009266 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800925c:	f003 0320 	and.w	r3, r3, #32
 8009260:	2b00      	cmp	r3, #0
 8009262:	f47f aecf 	bne.w	8009004 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800926c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009270:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009274:	2b00      	cmp	r3, #0
 8009276:	d049      	beq.n	800930c <UART_RxISR_8BIT_FIFOEN+0x350>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800927e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009282:	429a      	cmp	r2, r3
 8009284:	d242      	bcs.n	800930c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3308      	adds	r3, #8
 800928c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928e:	6a3b      	ldr	r3, [r7, #32]
 8009290:	e853 3f00 	ldrex	r3, [r3]
 8009294:	61fb      	str	r3, [r7, #28]
   return(result);
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800929c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3308      	adds	r3, #8
 80092a6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80092aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092b2:	e841 2300 	strex	r3, r2, [r1]
 80092b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1e3      	bne.n	8009286 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a15      	ldr	r2, [pc, #84]	@ (8009318 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80092c2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	e853 3f00 	ldrex	r3, [r3]
 80092d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	f043 0320 	orr.w	r3, r3, #32
 80092d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	461a      	mov	r2, r3
 80092e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80092e6:	61bb      	str	r3, [r7, #24]
 80092e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ea:	6979      	ldr	r1, [r7, #20]
 80092ec:	69ba      	ldr	r2, [r7, #24]
 80092ee:	e841 2300 	strex	r3, r2, [r1]
 80092f2:	613b      	str	r3, [r7, #16]
   return(result);
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1e4      	bne.n	80092c4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092fa:	e007      	b.n	800930c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	699a      	ldr	r2, [r3, #24]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f042 0208 	orr.w	r2, r2, #8
 800930a:	619a      	str	r2, [r3, #24]
}
 800930c:	bf00      	nop
 800930e:	37b0      	adds	r7, #176	@ 0xb0
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	40008000 	.word	0x40008000
 8009318:	08008c4d 	.word	0x08008c4d

0800931c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b0ae      	sub	sp, #184	@ 0xb8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800932a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009352:	2b22      	cmp	r3, #34	@ 0x22
 8009354:	f040 8186 	bne.w	8009664 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800935e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009362:	e129      	b.n	80095b8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800936a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009372:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009376:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800937a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800937e:	4013      	ands	r3, r2
 8009380:	b29a      	uxth	r2, r3
 8009382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009386:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800938c:	1c9a      	adds	r2, r3, #2
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009398:	b29b      	uxth	r3, r3
 800939a:	3b01      	subs	r3, #1
 800939c:	b29a      	uxth	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	69db      	ldr	r3, [r3, #28]
 80093aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80093ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093b2:	f003 0307 	and.w	r3, r3, #7
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d053      	beq.n	8009462 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d011      	beq.n	80093ea <UART_RxISR_16BIT_FIFOEN+0xce>
 80093c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00b      	beq.n	80093ea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2201      	movs	r2, #1
 80093d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093e0:	f043 0201 	orr.w	r2, r3, #1
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093ee:	f003 0302 	and.w	r3, r3, #2
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d011      	beq.n	800941a <UART_RxISR_16BIT_FIFOEN+0xfe>
 80093f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00b      	beq.n	800941a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2202      	movs	r2, #2
 8009408:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009410:	f043 0204 	orr.w	r2, r3, #4
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800941a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800941e:	f003 0304 	and.w	r3, r3, #4
 8009422:	2b00      	cmp	r3, #0
 8009424:	d011      	beq.n	800944a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009426:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800942a:	f003 0301 	and.w	r3, r3, #1
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00b      	beq.n	800944a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2204      	movs	r2, #4
 8009438:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009440:	f043 0202 	orr.w	r2, r3, #2
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009450:	2b00      	cmp	r3, #0
 8009452:	d006      	beq.n	8009462 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7fe fd16 	bl	8007e86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009468:	b29b      	uxth	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	f040 80a4 	bne.w	80095b8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009476:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009478:	e853 3f00 	ldrex	r3, [r3]
 800947c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800947e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009484:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	461a      	mov	r2, r3
 800948e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009492:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009496:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009498:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800949a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800949e:	e841 2300 	strex	r3, r2, [r1]
 80094a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80094a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1e2      	bne.n	8009470 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3308      	adds	r3, #8
 80094b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094b4:	e853 3f00 	ldrex	r3, [r3]
 80094b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80094ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094c0:	f023 0301 	bic.w	r3, r3, #1
 80094c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3308      	adds	r3, #8
 80094ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80094d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094da:	e841 2300 	strex	r3, r2, [r1]
 80094de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e1      	bne.n	80094aa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2220      	movs	r2, #32
 80094ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a5f      	ldr	r2, [pc, #380]	@ (800967c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d021      	beq.n	8009548 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800950e:	2b00      	cmp	r3, #0
 8009510:	d01a      	beq.n	8009548 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800951a:	e853 3f00 	ldrex	r3, [r3]
 800951e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009520:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009522:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009526:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009534:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009536:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009538:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800953a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800953c:	e841 2300 	strex	r3, r2, [r1]
 8009540:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1e4      	bne.n	8009512 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800954c:	2b01      	cmp	r3, #1
 800954e:	d130      	bne.n	80095b2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955e:	e853 3f00 	ldrex	r3, [r3]
 8009562:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009566:	f023 0310 	bic.w	r3, r3, #16
 800956a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009578:	647b      	str	r3, [r7, #68]	@ 0x44
 800957a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800957e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009580:	e841 2300 	strex	r3, r2, [r1]
 8009584:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e4      	bne.n	8009556 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	69db      	ldr	r3, [r3, #28]
 8009592:	f003 0310 	and.w	r3, r3, #16
 8009596:	2b10      	cmp	r3, #16
 8009598:	d103      	bne.n	80095a2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2210      	movs	r2, #16
 80095a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7fe fc74 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
 80095b0:	e002      	b.n	80095b8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7f9 f86c 	bl	8002690 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095b8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d006      	beq.n	80095ce <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80095c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095c4:	f003 0320 	and.w	r3, r3, #32
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f47f aecb 	bne.w	8009364 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095d4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80095d8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d049      	beq.n	8009674 <UART_RxISR_16BIT_FIFOEN+0x358>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80095e6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d242      	bcs.n	8009674 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3308      	adds	r3, #8
 80095f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	623b      	str	r3, [r7, #32]
   return(result);
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009604:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3308      	adds	r3, #8
 800960e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009612:	633a      	str	r2, [r7, #48]	@ 0x30
 8009614:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e3      	bne.n	80095ee <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a15      	ldr	r2, [pc, #84]	@ (8009680 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800962a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	e853 3f00 	ldrex	r3, [r3]
 8009638:	60fb      	str	r3, [r7, #12]
   return(result);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f043 0320 	orr.w	r3, r3, #32
 8009640:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	461a      	mov	r2, r3
 800964a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800964e:	61fb      	str	r3, [r7, #28]
 8009650:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009652:	69b9      	ldr	r1, [r7, #24]
 8009654:	69fa      	ldr	r2, [r7, #28]
 8009656:	e841 2300 	strex	r3, r2, [r1]
 800965a:	617b      	str	r3, [r7, #20]
   return(result);
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e4      	bne.n	800962c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009662:	e007      	b.n	8009674 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	699a      	ldr	r2, [r3, #24]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f042 0208 	orr.w	r2, r2, #8
 8009672:	619a      	str	r2, [r3, #24]
}
 8009674:	bf00      	nop
 8009676:	37b8      	adds	r7, #184	@ 0xb8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	40008000 	.word	0x40008000
 8009680:	08008e05 	.word	0x08008e05

08009684 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	bc80      	pop	{r7}
 8009694:	4770      	bx	lr

08009696 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800969e:	bf00      	nop
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bc80      	pop	{r7}
 80096a6:	4770      	bx	lr

080096a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bc80      	pop	{r7}
 80096b8:	4770      	bx	lr

080096ba <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b088      	sub	sp, #32
 80096be:	af02      	add	r7, sp, #8
 80096c0:	60f8      	str	r0, [r7, #12]
 80096c2:	1d3b      	adds	r3, r7, #4
 80096c4:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d101      	bne.n	80096da <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 80096d6:	2302      	movs	r3, #2
 80096d8:	e046      	b.n	8009768 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2224      	movs	r2, #36	@ 0x24
 80096e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f022 0201 	bic.w	r2, r2, #1
 80096f8:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	430a      	orrs	r2, r1
 800970c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d105      	bne.n	8009720 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009714:	1d3b      	adds	r3, r7, #4
 8009716:	e893 0006 	ldmia.w	r3, {r1, r2}
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f000 f911 	bl	8009942 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f042 0201 	orr.w	r2, r2, #1
 800972e:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009730:	f7f8 fa4e 	bl	8001bd0 <HAL_GetTick>
 8009734:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009736:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	2200      	movs	r2, #0
 8009740:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f7fe ff16 	bl	8008576 <UART_WaitOnFlagUntilTimeout>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d002      	beq.n	8009756 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009750:	2303      	movs	r3, #3
 8009752:	75fb      	strb	r3, [r7, #23]
 8009754:	e003      	b.n	800975e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2220      	movs	r2, #32
 800975a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 8009766:	7dfb      	ldrb	r3, [r7, #23]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009770:	b480      	push	{r7}
 8009772:	b089      	sub	sp, #36	@ 0x24
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800977e:	2b01      	cmp	r3, #1
 8009780:	d101      	bne.n	8009786 <HAL_UARTEx_EnableStopMode+0x16>
 8009782:	2302      	movs	r3, #2
 8009784:	e021      	b.n	80097ca <HAL_UARTEx_EnableStopMode+0x5a>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	e853 3f00 	ldrex	r3, [r3]
 800979a:	60bb      	str	r3, [r7, #8]
   return(result);
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	f043 0302 	orr.w	r3, r3, #2
 80097a2:	61fb      	str	r3, [r7, #28]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	461a      	mov	r2, r3
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	61bb      	str	r3, [r7, #24]
 80097ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b0:	6979      	ldr	r1, [r7, #20]
 80097b2:	69ba      	ldr	r2, [r7, #24]
 80097b4:	e841 2300 	strex	r3, r2, [r1]
 80097b8:	613b      	str	r3, [r7, #16]
   return(result);
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1e6      	bne.n	800978e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3724      	adds	r7, #36	@ 0x24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bc80      	pop	{r7}
 80097d2:	4770      	bx	lr

080097d4 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d101      	bne.n	80097ea <HAL_UARTEx_EnableFifoMode+0x16>
 80097e6:	2302      	movs	r3, #2
 80097e8:	e02b      	b.n	8009842 <HAL_UARTEx_EnableFifoMode+0x6e>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2224      	movs	r2, #36	@ 0x24
 80097f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f022 0201 	bic.w	r2, r2, #1
 8009810:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009818:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8009820:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 f8ac 	bl	8009988 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2220      	movs	r2, #32
 8009834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b084      	sub	sp, #16
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800985a:	2b01      	cmp	r3, #1
 800985c:	d101      	bne.n	8009862 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800985e:	2302      	movs	r3, #2
 8009860:	e02d      	b.n	80098be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2201      	movs	r2, #1
 8009866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2224      	movs	r2, #36	@ 0x24
 800986e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f022 0201 	bic.w	r2, r2, #1
 8009888:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	430a      	orrs	r2, r1
 800989c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f872 	bl	8009988 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2220      	movs	r2, #32
 80098b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b084      	sub	sp, #16
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d101      	bne.n	80098de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80098da:	2302      	movs	r3, #2
 80098dc:	e02d      	b.n	800993a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2224      	movs	r2, #36	@ 0x24
 80098ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f022 0201 	bic.w	r2, r2, #1
 8009904:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	683a      	ldr	r2, [r7, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f834 	bl	8009988 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2220      	movs	r2, #32
 800992c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009942:	b480      	push	{r7}
 8009944:	b085      	sub	sp, #20
 8009946:	af00      	add	r7, sp, #0
 8009948:	60f8      	str	r0, [r7, #12]
 800994a:	1d3b      	adds	r3, r7, #4
 800994c:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	f023 0210 	bic.w	r2, r3, #16
 800995a:	893b      	ldrh	r3, [r7, #8]
 800995c:	4619      	mov	r1, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	430a      	orrs	r2, r1
 8009964:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8009970:	7abb      	ldrb	r3, [r7, #10]
 8009972:	061a      	lsls	r2, r3, #24
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	430a      	orrs	r2, r1
 800997a:	605a      	str	r2, [r3, #4]
}
 800997c:	bf00      	nop
 800997e:	3714      	adds	r7, #20
 8009980:	46bd      	mov	sp, r7
 8009982:	bc80      	pop	{r7}
 8009984:	4770      	bx	lr
	...

08009988 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009994:	2b00      	cmp	r3, #0
 8009996:	d108      	bne.n	80099aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099a8:	e031      	b.n	8009a0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099aa:	2308      	movs	r3, #8
 80099ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099ae:	2308      	movs	r3, #8
 80099b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	0e5b      	lsrs	r3, r3, #25
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	f003 0307 	and.w	r3, r3, #7
 80099c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	0f5b      	lsrs	r3, r3, #29
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	f003 0307 	and.w	r3, r3, #7
 80099d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099d2:	7bbb      	ldrb	r3, [r7, #14]
 80099d4:	7b3a      	ldrb	r2, [r7, #12]
 80099d6:	4910      	ldr	r1, [pc, #64]	@ (8009a18 <UARTEx_SetNbDataToProcess+0x90>)
 80099d8:	5c8a      	ldrb	r2, [r1, r2]
 80099da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80099de:	7b3a      	ldrb	r2, [r7, #12]
 80099e0:	490e      	ldr	r1, [pc, #56]	@ (8009a1c <UARTEx_SetNbDataToProcess+0x94>)
 80099e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
 80099f2:	7b7a      	ldrb	r2, [r7, #13]
 80099f4:	4908      	ldr	r1, [pc, #32]	@ (8009a18 <UARTEx_SetNbDataToProcess+0x90>)
 80099f6:	5c8a      	ldrb	r2, [r1, r2]
 80099f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80099fc:	7b7a      	ldrb	r2, [r7, #13]
 80099fe:	4907      	ldr	r1, [pc, #28]	@ (8009a1c <UARTEx_SetNbDataToProcess+0x94>)
 8009a00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a02:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009a0e:	bf00      	nop
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bc80      	pop	{r7}
 8009a16:	4770      	bx	lr
 8009a18:	0801d40c 	.word	0x0801d40c
 8009a1c:	0801d414 	.word	0x0801d414

08009a20 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009a24:	f7f7 ff7e 	bl	8001924 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8009a28:	f000 f820 	bl	8009a6c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8009a2c:	bf00      	nop
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009a34:	f04f 30ff 	mov.w	r0, #4294967295
 8009a38:	f011 fda6 	bl	801b588 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8009a3c:	bf00      	nop
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <__NVIC_SystemReset>:
{
 8009a40:	b480      	push	{r7}
 8009a42:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009a44:	f3bf 8f4f 	dsb	sy
}
 8009a48:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009a4a:	4b06      	ldr	r3, [pc, #24]	@ (8009a64 <__NVIC_SystemReset+0x24>)
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009a52:	4904      	ldr	r1, [pc, #16]	@ (8009a64 <__NVIC_SystemReset+0x24>)
 8009a54:	4b04      	ldr	r3, [pc, #16]	@ (8009a68 <__NVIC_SystemReset+0x28>)
 8009a56:	4313      	orrs	r3, r2
 8009a58:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009a5a:	f3bf 8f4f 	dsb	sy
}
 8009a5e:	bf00      	nop
    __NOP();
 8009a60:	bf00      	nop
 8009a62:	e7fd      	b.n	8009a60 <__NVIC_SystemReset+0x20>
 8009a64:	e000ed00 	.word	0xe000ed00
 8009a68:	05fa0004 	.word	0x05fa0004

08009a6c <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8009a72:	2300      	movs	r3, #0
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	4b1f      	ldr	r3, [pc, #124]	@ (8009af4 <LoRaWAN_Init+0x88>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8009a7e:	481e      	ldr	r0, [pc, #120]	@ (8009af8 <LoRaWAN_Init+0x8c>)
 8009a80:	f011 ff20 	bl	801b8c4 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009a84:	4a1d      	ldr	r2, [pc, #116]	@ (8009afc <LoRaWAN_Init+0x90>)
 8009a86:	2100      	movs	r1, #0
 8009a88:	2001      	movs	r0, #1
 8009a8a:	f011 fe79 	bl	801b780 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8009b00 <LoRaWAN_Init+0x94>)
 8009a90:	2100      	movs	r1, #0
 8009a92:	2002      	movs	r0, #2
 8009a94:	f011 fe74 	bl	801b780 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8009a98:	4a1a      	ldr	r2, [pc, #104]	@ (8009b04 <LoRaWAN_Init+0x98>)
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	2004      	movs	r0, #4
 8009a9e:	f011 fe6f 	bl	801b780 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8009aa2:	4a19      	ldr	r2, [pc, #100]	@ (8009b08 <LoRaWAN_Init+0x9c>)
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	2008      	movs	r0, #8
 8009aa8:	f011 fe6a 	bl	801b780 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009aac:	f000 f9aa 	bl	8009e04 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8009ab0:	4916      	ldr	r1, [pc, #88]	@ (8009b0c <LoRaWAN_Init+0xa0>)
 8009ab2:	4817      	ldr	r0, [pc, #92]	@ (8009b10 <LoRaWAN_Init+0xa4>)
 8009ab4:	f001 feec 	bl	800b890 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8009ab8:	4816      	ldr	r0, [pc, #88]	@ (8009b14 <LoRaWAN_Init+0xa8>)
 8009aba:	f001 ff45 	bl	800b948 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 8009abe:	4b16      	ldr	r3, [pc, #88]	@ (8009b18 <LoRaWAN_Init+0xac>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	4a16      	ldr	r2, [pc, #88]	@ (8009b1c <LoRaWAN_Init+0xb0>)
 8009ac4:	7812      	ldrb	r2, [r2, #0]
 8009ac6:	4611      	mov	r1, r2
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f002 f803 	bl	800bad4 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8009ace:	4b14      	ldr	r3, [pc, #80]	@ (8009b20 <LoRaWAN_Init+0xb4>)
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10b      	bne.n	8009aee <LoRaWAN_Init+0x82>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009ad6:	4b13      	ldr	r3, [pc, #76]	@ (8009b24 <LoRaWAN_Init+0xb8>)
 8009ad8:	6819      	ldr	r1, [r3, #0]
 8009ada:	2300      	movs	r3, #0
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	4b12      	ldr	r3, [pc, #72]	@ (8009b28 <LoRaWAN_Init+0xbc>)
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	4812      	ldr	r0, [pc, #72]	@ (8009b2c <LoRaWAN_Init+0xc0>)
 8009ae4:	f011 feee 	bl	801b8c4 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8009ae8:	4810      	ldr	r0, [pc, #64]	@ (8009b2c <LoRaWAN_Init+0xc0>)
 8009aea:	f011 ff21 	bl	801b930 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8009aee:	bf00      	nop
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	08009d05 	.word	0x08009d05
 8009af8:	200003a4 	.word	0x200003a4
 8009afc:	0800babd 	.word	0x0800babd
 8009b00:	08009b45 	.word	0x08009b45
 8009b04:	08009d29 	.word	0x08009d29
 8009b08:	08009c85 	.word	0x08009c85
 8009b0c:	01030000 	.word	0x01030000
 8009b10:	2000000c 	.word	0x2000000c
 8009b14:	20000058 	.word	0x20000058
 8009b18:	20000009 	.word	0x20000009
 8009b1c:	2000000a 	.word	0x2000000a
 8009b20:	20000388 	.word	0x20000388
 8009b24:	20000070 	.word	0x20000070
 8009b28:	08009b51 	.word	0x08009b51
 8009b2c:	2000038c 	.word	0x2000038c

08009b30 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  /* USER CODE END OnRxData_1 */
}
 8009b3a:	bf00      	nop
 8009b3c:	370c      	adds	r7, #12
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bc80      	pop	{r7}
 8009b42:	4770      	bx	lr

08009b44 <SendTxData>:

static void SendTxData(void)
{
 8009b44:	b480      	push	{r7}
 8009b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */

  /* USER CODE END SendTxData_1 */
}
 8009b48:	bf00      	nop
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bc80      	pop	{r7}
 8009b4e:	4770      	bx	lr

08009b50 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8009b58:	2100      	movs	r1, #0
 8009b5a:	2002      	movs	r0, #2
 8009b5c:	f011 fe32 	bl	801b7c4 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8009b60:	4803      	ldr	r0, [pc, #12]	@ (8009b70 <OnTxTimerEvent+0x20>)
 8009b62:	f011 fee5 	bl	801b930 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8009b66:	bf00      	nop
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	2000038c 	.word	0x2000038c

08009b74 <OnTxData>:
/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  /* USER CODE END OnTxData_1 */
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bc80      	pop	{r7}
 8009b84:	4770      	bx	lr

08009b86 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 8009b86:	b480      	push	{r7}
 8009b88:	b083      	sub	sp, #12
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  /* USER CODE END OnJoinRequest_1 */
}
 8009b8e:	bf00      	nop
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bc80      	pop	{r7}
 8009b96:	4770      	bx	lr

08009b98 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  /* USER CODE END OnBeaconStatusChange_1 */
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bc80      	pop	{r7}
 8009ba8:	4770      	bx	lr

08009baa <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 8009baa:	b480      	push	{r7}
 8009bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 8009bae:	bf00      	nop
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bc80      	pop	{r7}
 8009bb4:	4770      	bx	lr

08009bb6 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b083      	sub	sp, #12
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  /* USER CODE END OnClassChange_1 */
}
 8009bc0:	bf00      	nop
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bc80      	pop	{r7}
 8009bc8:	4770      	bx	lr

08009bca <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8009bce:	2100      	movs	r1, #0
 8009bd0:	2001      	movs	r0, #1
 8009bd2:	f011 fdf7 	bl	801b7c4 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8009bd6:	bf00      	nop
 8009bd8:	bd80      	pop	{r7, pc}
	...

08009bdc <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 8009be4:	4a0d      	ldr	r2, [pc, #52]	@ (8009c1c <OnTxPeriodicityChanged+0x40>)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 8009bea:	4b0c      	ldr	r3, [pc, #48]	@ (8009c1c <OnTxPeriodicityChanged+0x40>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d103      	bne.n	8009bfa <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8009bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8009c1c <OnTxPeriodicityChanged+0x40>)
 8009bf4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009bf8:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 8009bfa:	4809      	ldr	r0, [pc, #36]	@ (8009c20 <OnTxPeriodicityChanged+0x44>)
 8009bfc:	f011 ff06 	bl	801ba0c <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8009c00:	4b06      	ldr	r3, [pc, #24]	@ (8009c1c <OnTxPeriodicityChanged+0x40>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4619      	mov	r1, r3
 8009c06:	4806      	ldr	r0, [pc, #24]	@ (8009c20 <OnTxPeriodicityChanged+0x44>)
 8009c08:	f011 ff70 	bl	801baec <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8009c0c:	4804      	ldr	r0, [pc, #16]	@ (8009c20 <OnTxPeriodicityChanged+0x44>)
 8009c0e:	f011 fe8f 	bl	801b930 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 8009c12:	bf00      	nop
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	20000070 	.word	0x20000070
 8009c20:	2000038c 	.word	0x2000038c

08009c24 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8009c2e:	4a04      	ldr	r2, [pc, #16]	@ (8009c40 <OnTxFrameCtrlChanged+0x1c>)
 8009c30:	79fb      	ldrb	r3, [r7, #7]
 8009c32:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8009c34:	bf00      	nop
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bc80      	pop	{r7}
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	20000058 	.word	0x20000058

08009c44 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8009c4e:	4a04      	ldr	r2, [pc, #16]	@ (8009c60 <OnPingSlotPeriodicityChanged+0x1c>)
 8009c50:	79fb      	ldrb	r3, [r7, #7]
 8009c52:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bc80      	pop	{r7}
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	20000058 	.word	0x20000058

08009c64 <OnSystemReset>:

static void OnSystemReset(void)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8009c68:	f002 fcff 	bl	800c66a <LmHandlerHalt>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d106      	bne.n	8009c80 <OnSystemReset+0x1c>
 8009c72:	f001 ffd3 	bl	800bc1c <LmHandlerJoinStatus>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d101      	bne.n	8009c80 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 8009c7c:	f7ff fee0 	bl	8009a40 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 8009c80:	bf00      	nop
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <StopJoin>:

static void StopJoin(void)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 8009c88:	4817      	ldr	r0, [pc, #92]	@ (8009ce8 <StopJoin+0x64>)
 8009c8a:	f011 febf 	bl	801ba0c <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8009c8e:	f002 fcdf 	bl	800c650 <LmHandlerStop>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d006      	beq.n	8009ca6 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8009c98:	4b14      	ldr	r3, [pc, #80]	@ (8009cec <StopJoin+0x68>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	2002      	movs	r0, #2
 8009ca0:	f012 f8be 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
 8009ca4:	e01a      	b.n	8009cdc <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 8009ca6:	4b12      	ldr	r3, [pc, #72]	@ (8009cf0 <StopJoin+0x6c>)
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2100      	movs	r1, #0
 8009cac:	2002      	movs	r0, #2
 8009cae:	f012 f8b7 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 8009cb2:	4b10      	ldr	r3, [pc, #64]	@ (8009cf4 <StopJoin+0x70>)
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 8009cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8009cf8 <StopJoin+0x74>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	2002      	movs	r0, #2
 8009cc0:	f012 f8ae 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 8009cc4:	480d      	ldr	r0, [pc, #52]	@ (8009cfc <StopJoin+0x78>)
 8009cc6:	f001 fe3f 	bl	800b948 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8009cca:	4b0a      	ldr	r3, [pc, #40]	@ (8009cf4 <StopJoin+0x70>)
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	2101      	movs	r1, #1
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f001 feff 	bl	800bad4 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8009cd6:	4804      	ldr	r0, [pc, #16]	@ (8009ce8 <StopJoin+0x64>)
 8009cd8:	f011 fe2a 	bl	801b930 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 8009cdc:	4808      	ldr	r0, [pc, #32]	@ (8009d00 <StopJoin+0x7c>)
 8009cde:	f011 fe27 	bl	801b930 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 8009ce2:	bf00      	nop
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	2000038c 	.word	0x2000038c
 8009cec:	0801ce24 	.word	0x0801ce24
 8009cf0:	0801ce44 	.word	0x0801ce44
 8009cf4:	20000009 	.word	0x20000009
 8009cf8:	0801ce58 	.word	0x0801ce58
 8009cfc:	20000058 	.word	0x20000058
 8009d00:	200003a4 	.word	0x200003a4

08009d04 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 8009d0c:	4b05      	ldr	r3, [pc, #20]	@ (8009d24 <OnStopJoinTimerEvent+0x20>)
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d103      	bne.n	8009d1c <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8009d14:	2100      	movs	r1, #0
 8009d16:	2008      	movs	r0, #8
 8009d18:	f011 fd54 	bl	801b7c4 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */

  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 8009d1c:	bf00      	nop
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	20000009 	.word	0x20000009

08009d28 <StoreContext>:

static void StoreContext(void)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 8009d2e:	23ff      	movs	r3, #255	@ 0xff
 8009d30:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 8009d32:	f002 fccf 	bl	800c6d4 <LmHandlerNvmDataStore>
 8009d36:	4603      	mov	r3, r0
 8009d38:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 8009d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d3e:	f113 0f08 	cmn.w	r3, #8
 8009d42:	d106      	bne.n	8009d52 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8009d44:	4b0a      	ldr	r3, [pc, #40]	@ (8009d70 <StoreContext+0x48>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	2100      	movs	r1, #0
 8009d4a:	2002      	movs	r0, #2
 8009d4c:	f012 f868 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 8009d50:	e00a      	b.n	8009d68 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 8009d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d5a:	d105      	bne.n	8009d68 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8009d5c:	4b05      	ldr	r3, [pc, #20]	@ (8009d74 <StoreContext+0x4c>)
 8009d5e:	2200      	movs	r2, #0
 8009d60:	2100      	movs	r1, #0
 8009d62:	2002      	movs	r0, #2
 8009d64:	f012 f85c 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
}
 8009d68:	bf00      	nop
 8009d6a:	3708      	adds	r7, #8
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	0801ce78 	.word	0x0801ce78
 8009d74:	0801ce90 	.word	0x0801ce90

08009d78 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	4603      	mov	r3, r0
 8009d80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 8009d82:	79fb      	ldrb	r3, [r7, #7]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d106      	bne.n	8009d96 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8009d88:	4b08      	ldr	r3, [pc, #32]	@ (8009dac <OnNvmDataChange+0x34>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	2002      	movs	r0, #2
 8009d90:	f012 f846 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 8009d94:	e005      	b.n	8009da2 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 8009d96:	4b06      	ldr	r3, [pc, #24]	@ (8009db0 <OnNvmDataChange+0x38>)
 8009d98:	2200      	movs	r2, #0
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	2002      	movs	r0, #2
 8009d9e:	f012 f83f 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
}
 8009da2:	bf00      	nop
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	0801cea8 	.word	0x0801cea8
 8009db0:	0801cebc 	.word	0x0801cebc

08009db4 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 8009dbe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009dc2:	4807      	ldr	r0, [pc, #28]	@ (8009de0 <OnStoreContextRequest+0x2c>)
 8009dc4:	f7f7 f90c 	bl	8000fe0 <FLASH_IF_Erase>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d104      	bne.n	8009dd8 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	6879      	ldr	r1, [r7, #4]
 8009dd2:	4803      	ldr	r0, [pc, #12]	@ (8009de0 <OnStoreContextRequest+0x2c>)
 8009dd4:	f7f7 f8b4 	bl	8000f40 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8009dd8:	bf00      	nop
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	0803f000 	.word	0x0803f000

08009de4 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	4903      	ldr	r1, [pc, #12]	@ (8009e00 <OnRestoreContextRequest+0x1c>)
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7f7 f8cc 	bl	8000f90 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	0803f000 	.word	0x0803f000

08009e04 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 8009e08:	4b18      	ldr	r3, [pc, #96]	@ (8009e6c <LoraInfo_Init+0x68>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8009e0e:	4b17      	ldr	r3, [pc, #92]	@ (8009e6c <LoraInfo_Init+0x68>)
 8009e10:	2200      	movs	r2, #0
 8009e12:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8009e14:	4b15      	ldr	r3, [pc, #84]	@ (8009e6c <LoraInfo_Init+0x68>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8009e1a:	4b14      	ldr	r3, [pc, #80]	@ (8009e6c <LoraInfo_Init+0x68>)
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8009e20:	4b12      	ldr	r3, [pc, #72]	@ (8009e6c <LoraInfo_Init+0x68>)
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	f043 0320 	orr.w	r3, r3, #32
 8009e28:	4a10      	ldr	r2, [pc, #64]	@ (8009e6c <LoraInfo_Init+0x68>)
 8009e2a:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 8009e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8009e6c <LoraInfo_Init+0x68>)
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e34:	4a0d      	ldr	r2, [pc, #52]	@ (8009e6c <LoraInfo_Init+0x68>)
 8009e36:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8009e38:	4b0c      	ldr	r3, [pc, #48]	@ (8009e6c <LoraInfo_Init+0x68>)
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d10d      	bne.n	8009e5c <LoraInfo_Init+0x58>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8009e40:	4b0b      	ldr	r3, [pc, #44]	@ (8009e70 <LoraInfo_Init+0x6c>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	2100      	movs	r1, #0
 8009e46:	2000      	movs	r0, #0
 8009e48:	f011 ffea 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 8009e4c:	bf00      	nop
 8009e4e:	f011 ffd5 	bl	801bdfc <UTIL_ADV_TRACE_IsBufferEmpty>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d1fa      	bne.n	8009e4e <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 8009e58:	bf00      	nop
 8009e5a:	e7fd      	b.n	8009e58 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8009e5c:	4b03      	ldr	r3, [pc, #12]	@ (8009e6c <LoraInfo_Init+0x68>)
 8009e5e:	2200      	movs	r2, #0
 8009e60:	60da      	str	r2, [r3, #12]
#else /* LORAWAN_KMS == 1 */
  loraInfo.Kms = 1;
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
 8009e62:	4b02      	ldr	r3, [pc, #8]	@ (8009e6c <LoraInfo_Init+0x68>)
 8009e64:	2200      	movs	r2, #0
 8009e66:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8009e68:	bf00      	nop
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	200003bc 	.word	0x200003bc
 8009e70:	0801ced0 	.word	0x0801ced0

08009e74 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 8009e74:	b480      	push	{r7}
 8009e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8009e78:	4b02      	ldr	r3, [pc, #8]	@ (8009e84 <LoraInfo_GetPtr+0x10>)
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bc80      	pop	{r7}
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	200003bc 	.word	0x200003bc

08009e88 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 8009e92:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr

08009e9e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b085      	sub	sp, #20
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8009eac:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bc80      	pop	{r7}
 8009eb6:	4770      	bx	lr

08009eb8 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 8009ec2:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bc80      	pop	{r7}
 8009ecc:	4770      	bx	lr

08009ece <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8009ece:	b480      	push	{r7}
 8009ed0:	b083      	sub	sp, #12
 8009ed2:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 8009ed8:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bc80      	pop	{r7}
 8009ee2:	4770      	bx	lr

08009ee4 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 8009eea:	2301      	movs	r3, #1
 8009eec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 8009eee:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bc80      	pop	{r7}
 8009ef8:	4770      	bx	lr

08009efa <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b085      	sub	sp, #20
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	4603      	mov	r3, r0
 8009f02:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 8009f04:	2300      	movs	r3, #0
 8009f06:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 8009f08:	79fb      	ldrb	r3, [r7, #7]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d102      	bne.n	8009f14 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 8009f0e:	230f      	movs	r3, #15
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	e001      	b.n	8009f18 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 8009f14:	2316      	movs	r3, #22
 8009f16:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 8009f18:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bc80      	pop	{r7}
 8009f22:	4770      	bx	lr

08009f24 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	33f1      	adds	r3, #241	@ 0xf1
 8009f30:	2210      	movs	r2, #16
 8009f32:	2100      	movs	r1, #0
 8009f34:	4618      	mov	r0, r3
 8009f36:	f00d fc0d 	bl	8017754 <memset1>
    ctx->M_n = 0;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	22f0      	movs	r2, #240	@ 0xf0
 8009f46:	2100      	movs	r1, #0
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f00d fc03 	bl	8017754 <memset1>
}
 8009f4e:	bf00      	nop
 8009f50:	3708      	adds	r7, #8
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b082      	sub	sp, #8
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	461a      	mov	r2, r3
 8009f64:	2110      	movs	r1, #16
 8009f66:	6838      	ldr	r0, [r7, #0]
 8009f68:	f000 fe5c 	bl	800ac24 <lorawan_aes_set_key>
}
 8009f6c:	bf00      	nop
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b08c      	sub	sp, #48	@ 0x30
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	f000 80a1 	beq.w	800a0ce <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8009f92:	f1c3 0310 	rsb	r3, r3, #16
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	bf28      	it	cs
 8009f9c:	4613      	movcs	r3, r2
 8009f9e:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f203 1201 	addw	r2, r3, #257	@ 0x101
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8009fac:	4413      	add	r3, r2
 8009fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fb0:	b292      	uxth	r2, r2
 8009fb2:	68b9      	ldr	r1, [r7, #8]
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f00d fb92 	bl	80176de <memcpy1>
        ctx->M_n += mlen;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc2:	441a      	add	r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8009fd0:	2b0f      	cmp	r3, #15
 8009fd2:	f240 808d 	bls.w	800a0f0 <AES_CMAC_Update+0x17c>
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	f000 8088 	beq.w	800a0f0 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fe4:	e015      	b.n	800a012 <AES_CMAC_Update+0x9e>
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fea:	4413      	add	r3, r2
 8009fec:	33f1      	adds	r3, #241	@ 0xf1
 8009fee:	781a      	ldrb	r2, [r3, #0]
 8009ff0:	68f9      	ldr	r1, [r7, #12]
 8009ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff4:	440b      	add	r3, r1
 8009ff6:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	4053      	eors	r3, r2
 8009ffe:	b2d9      	uxtb	r1, r3
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a004:	4413      	add	r3, r2
 800a006:	33f1      	adds	r3, #241	@ 0xf1
 800a008:	460a      	mov	r2, r1
 800a00a:	701a      	strb	r2, [r3, #0]
 800a00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a00e:	3301      	adds	r3, #1
 800a010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a014:	2b0f      	cmp	r3, #15
 800a016:	dde6      	ble.n	8009fe6 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a01e:	f107 0314 	add.w	r3, r7, #20
 800a022:	2210      	movs	r2, #16
 800a024:	4618      	mov	r0, r3
 800a026:	f00d fb5a 	bl	80176de <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	f107 0114 	add.w	r1, r7, #20
 800a030:	f107 0314 	add.w	r3, r7, #20
 800a034:	4618      	mov	r0, r3
 800a036:	f000 fed3 	bl	800ade0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	33f1      	adds	r3, #241	@ 0xf1
 800a03e:	f107 0114 	add.w	r1, r7, #20
 800a042:	2210      	movs	r2, #16
 800a044:	4618      	mov	r0, r3
 800a046:	f00d fb4a 	bl	80176de <memcpy1>

        data += mlen;
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04e:	4413      	add	r3, r2
 800a050:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800a05a:	e038      	b.n	800a0ce <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800a05c:	2300      	movs	r3, #0
 800a05e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a060:	e013      	b.n	800a08a <AES_CMAC_Update+0x116>
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a066:	4413      	add	r3, r2
 800a068:	33f1      	adds	r3, #241	@ 0xf1
 800a06a:	781a      	ldrb	r2, [r3, #0]
 800a06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a06e:	68b9      	ldr	r1, [r7, #8]
 800a070:	440b      	add	r3, r1
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	4053      	eors	r3, r2
 800a076:	b2d9      	uxtb	r1, r3
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07c:	4413      	add	r3, r2
 800a07e:	33f1      	adds	r3, #241	@ 0xf1
 800a080:	460a      	mov	r2, r1
 800a082:	701a      	strb	r2, [r3, #0]
 800a084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a086:	3301      	adds	r3, #1
 800a088:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08c:	2b0f      	cmp	r3, #15
 800a08e:	dde8      	ble.n	800a062 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a096:	f107 0314 	add.w	r3, r7, #20
 800a09a:	2210      	movs	r2, #16
 800a09c:	4618      	mov	r0, r3
 800a09e:	f00d fb1e 	bl	80176de <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	f107 0114 	add.w	r1, r7, #20
 800a0a8:	f107 0314 	add.w	r3, r7, #20
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f000 fe97 	bl	800ade0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	33f1      	adds	r3, #241	@ 0xf1
 800a0b6:	f107 0114 	add.w	r1, r7, #20
 800a0ba:	2210      	movs	r2, #16
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f00d fb0e 	bl	80176de <memcpy1>

        data += 16;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	3310      	adds	r3, #16
 800a0c6:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	3b10      	subs	r3, #16
 800a0cc:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b10      	cmp	r3, #16
 800a0d2:	d8c3      	bhi.n	800a05c <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	b292      	uxth	r2, r2
 800a0de:	68b9      	ldr	r1, [r7, #8]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f00d fafc 	bl	80176de <memcpy1>
    ctx->M_n = len;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800a0ee:	e000      	b.n	800a0f2 <AES_CMAC_Update+0x17e>
            return;
 800a0f0:	bf00      	nop
}
 800a0f2:	3730      	adds	r7, #48	@ 0x30
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b092      	sub	sp, #72	@ 0x48
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800a102:	f107 031c 	add.w	r3, r7, #28
 800a106:	2210      	movs	r2, #16
 800a108:	2100      	movs	r1, #0
 800a10a:	4618      	mov	r0, r3
 800a10c:	f00d fb22 	bl	8017754 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	f107 011c 	add.w	r1, r7, #28
 800a116:	f107 031c 	add.w	r3, r7, #28
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 fe60 	bl	800ade0 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800a120:	7f3b      	ldrb	r3, [r7, #28]
 800a122:	b25b      	sxtb	r3, r3
 800a124:	2b00      	cmp	r3, #0
 800a126:	da30      	bge.n	800a18a <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800a128:	2300      	movs	r3, #0
 800a12a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a12c:	e01b      	b.n	800a166 <AES_CMAC_Final+0x6e>
 800a12e:	f107 021c 	add.w	r2, r7, #28
 800a132:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a134:	4413      	add	r3, r2
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	005b      	lsls	r3, r3, #1
 800a13a:	b25a      	sxtb	r2, r3
 800a13c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a13e:	3301      	adds	r3, #1
 800a140:	3348      	adds	r3, #72	@ 0x48
 800a142:	443b      	add	r3, r7
 800a144:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a148:	09db      	lsrs	r3, r3, #7
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	b25b      	sxtb	r3, r3
 800a14e:	4313      	orrs	r3, r2
 800a150:	b25b      	sxtb	r3, r3
 800a152:	b2d9      	uxtb	r1, r3
 800a154:	f107 021c 	add.w	r2, r7, #28
 800a158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a15a:	4413      	add	r3, r2
 800a15c:	460a      	mov	r2, r1
 800a15e:	701a      	strb	r2, [r3, #0]
 800a160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a162:	3301      	adds	r3, #1
 800a164:	647b      	str	r3, [r7, #68]	@ 0x44
 800a166:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a168:	2b0e      	cmp	r3, #14
 800a16a:	dde0      	ble.n	800a12e <AES_CMAC_Final+0x36>
 800a16c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a170:	005b      	lsls	r3, r3, #1
 800a172:	b2db      	uxtb	r3, r3
 800a174:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800a178:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a17c:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800a180:	43db      	mvns	r3, r3
 800a182:	b2db      	uxtb	r3, r3
 800a184:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a188:	e027      	b.n	800a1da <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800a18a:	2300      	movs	r3, #0
 800a18c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a18e:	e01b      	b.n	800a1c8 <AES_CMAC_Final+0xd0>
 800a190:	f107 021c 	add.w	r2, r7, #28
 800a194:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a196:	4413      	add	r3, r2
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	005b      	lsls	r3, r3, #1
 800a19c:	b25a      	sxtb	r2, r3
 800a19e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	3348      	adds	r3, #72	@ 0x48
 800a1a4:	443b      	add	r3, r7
 800a1a6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a1aa:	09db      	lsrs	r3, r3, #7
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	b25b      	sxtb	r3, r3
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	b25b      	sxtb	r3, r3
 800a1b4:	b2d9      	uxtb	r1, r3
 800a1b6:	f107 021c 	add.w	r2, r7, #28
 800a1ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1bc:	4413      	add	r3, r2
 800a1be:	460a      	mov	r2, r1
 800a1c0:	701a      	strb	r2, [r3, #0]
 800a1c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1ca:	2b0e      	cmp	r3, #14
 800a1cc:	dde0      	ble.n	800a190 <AES_CMAC_Final+0x98>
 800a1ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a1d2:	005b      	lsls	r3, r3, #1
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a1e0:	2b10      	cmp	r3, #16
 800a1e2:	d11d      	bne.n	800a220 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1e8:	e016      	b.n	800a218 <AES_CMAC_Final+0x120>
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ee:	4413      	add	r3, r2
 800a1f0:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a1f4:	781a      	ldrb	r2, [r3, #0]
 800a1f6:	f107 011c 	add.w	r1, r7, #28
 800a1fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1fc:	440b      	add	r3, r1
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	4053      	eors	r3, r2
 800a202:	b2d9      	uxtb	r1, r3
 800a204:	683a      	ldr	r2, [r7, #0]
 800a206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a208:	4413      	add	r3, r2
 800a20a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a20e:	460a      	mov	r2, r1
 800a210:	701a      	strb	r2, [r3, #0]
 800a212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a214:	3301      	adds	r3, #1
 800a216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a21a:	2b0f      	cmp	r3, #15
 800a21c:	dde5      	ble.n	800a1ea <AES_CMAC_Final+0xf2>
 800a21e:	e096      	b.n	800a34e <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800a220:	7f3b      	ldrb	r3, [r7, #28]
 800a222:	b25b      	sxtb	r3, r3
 800a224:	2b00      	cmp	r3, #0
 800a226:	da30      	bge.n	800a28a <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800a228:	2300      	movs	r3, #0
 800a22a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a22c:	e01b      	b.n	800a266 <AES_CMAC_Final+0x16e>
 800a22e:	f107 021c 	add.w	r2, r7, #28
 800a232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a234:	4413      	add	r3, r2
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	005b      	lsls	r3, r3, #1
 800a23a:	b25a      	sxtb	r2, r3
 800a23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a23e:	3301      	adds	r3, #1
 800a240:	3348      	adds	r3, #72	@ 0x48
 800a242:	443b      	add	r3, r7
 800a244:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a248:	09db      	lsrs	r3, r3, #7
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	b25b      	sxtb	r3, r3
 800a24e:	4313      	orrs	r3, r2
 800a250:	b25b      	sxtb	r3, r3
 800a252:	b2d9      	uxtb	r1, r3
 800a254:	f107 021c 	add.w	r2, r7, #28
 800a258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25a:	4413      	add	r3, r2
 800a25c:	460a      	mov	r2, r1
 800a25e:	701a      	strb	r2, [r3, #0]
 800a260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a262:	3301      	adds	r3, #1
 800a264:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a268:	2b0e      	cmp	r3, #14
 800a26a:	dde0      	ble.n	800a22e <AES_CMAC_Final+0x136>
 800a26c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a270:	005b      	lsls	r3, r3, #1
 800a272:	b2db      	uxtb	r3, r3
 800a274:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800a278:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a27c:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800a280:	43db      	mvns	r3, r3
 800a282:	b2db      	uxtb	r3, r3
 800a284:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a288:	e027      	b.n	800a2da <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800a28a:	2300      	movs	r3, #0
 800a28c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a28e:	e01b      	b.n	800a2c8 <AES_CMAC_Final+0x1d0>
 800a290:	f107 021c 	add.w	r2, r7, #28
 800a294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a296:	4413      	add	r3, r2
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	b25a      	sxtb	r2, r3
 800a29e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	3348      	adds	r3, #72	@ 0x48
 800a2a4:	443b      	add	r3, r7
 800a2a6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a2aa:	09db      	lsrs	r3, r3, #7
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	b25b      	sxtb	r3, r3
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	b25b      	sxtb	r3, r3
 800a2b4:	b2d9      	uxtb	r1, r3
 800a2b6:	f107 021c 	add.w	r2, r7, #28
 800a2ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2bc:	4413      	add	r3, r2
 800a2be:	460a      	mov	r2, r1
 800a2c0:	701a      	strb	r2, [r3, #0]
 800a2c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ca:	2b0e      	cmp	r3, #14
 800a2cc:	dde0      	ble.n	800a290 <AES_CMAC_Final+0x198>
 800a2ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2d2:	005b      	lsls	r3, r3, #1
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	2280      	movs	r2, #128	@ 0x80
 800a2e6:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800a2ea:	e007      	b.n	800a2fc <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a302:	1c5a      	adds	r2, r3, #1
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a310:	2b0f      	cmp	r3, #15
 800a312:	d9eb      	bls.n	800a2ec <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800a314:	2300      	movs	r3, #0
 800a316:	633b      	str	r3, [r7, #48]	@ 0x30
 800a318:	e016      	b.n	800a348 <AES_CMAC_Final+0x250>
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31e:	4413      	add	r3, r2
 800a320:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a324:	781a      	ldrb	r2, [r3, #0]
 800a326:	f107 011c 	add.w	r1, r7, #28
 800a32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a32c:	440b      	add	r3, r1
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	4053      	eors	r3, r2
 800a332:	b2d9      	uxtb	r1, r3
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a338:	4413      	add	r3, r2
 800a33a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a33e:	460a      	mov	r2, r1
 800a340:	701a      	strb	r2, [r3, #0]
 800a342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a344:	3301      	adds	r3, #1
 800a346:	633b      	str	r3, [r7, #48]	@ 0x30
 800a348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34a:	2b0f      	cmp	r3, #15
 800a34c:	dde5      	ble.n	800a31a <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800a34e:	2300      	movs	r3, #0
 800a350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a352:	e015      	b.n	800a380 <AES_CMAC_Final+0x288>
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a358:	4413      	add	r3, r2
 800a35a:	33f1      	adds	r3, #241	@ 0xf1
 800a35c:	781a      	ldrb	r2, [r3, #0]
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a362:	440b      	add	r3, r1
 800a364:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	4053      	eors	r3, r2
 800a36c:	b2d9      	uxtb	r1, r3
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a372:	4413      	add	r3, r2
 800a374:	33f1      	adds	r3, #241	@ 0xf1
 800a376:	460a      	mov	r2, r1
 800a378:	701a      	strb	r2, [r3, #0]
 800a37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a37c:	3301      	adds	r3, #1
 800a37e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a382:	2b0f      	cmp	r3, #15
 800a384:	dde6      	ble.n	800a354 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a38c:	f107 030c 	add.w	r3, r7, #12
 800a390:	2210      	movs	r2, #16
 800a392:	4618      	mov	r0, r3
 800a394:	f00d f9a3 	bl	80176de <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	f107 030c 	add.w	r3, r7, #12
 800a39e:	6879      	ldr	r1, [r7, #4]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f000 fd1d 	bl	800ade0 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800a3a6:	f107 031c 	add.w	r3, r7, #28
 800a3aa:	2210      	movs	r2, #16
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f00d f9d0 	bl	8017754 <memset1>
}
 800a3b4:	bf00      	nop
 800a3b6:	3748      	adds	r7, #72	@ 0x48
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	781a      	ldrb	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	7852      	ldrb	r2, [r2, #1]
 800a3d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	3302      	adds	r3, #2
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	7892      	ldrb	r2, [r2, #2]
 800a3e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	3303      	adds	r3, #3
 800a3e6:	683a      	ldr	r2, [r7, #0]
 800a3e8:	78d2      	ldrb	r2, [r2, #3]
 800a3ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	7912      	ldrb	r2, [r2, #4]
 800a3f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	3305      	adds	r3, #5
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	7952      	ldrb	r2, [r2, #5]
 800a3fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	3306      	adds	r3, #6
 800a404:	683a      	ldr	r2, [r7, #0]
 800a406:	7992      	ldrb	r2, [r2, #6]
 800a408:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	3307      	adds	r3, #7
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	79d2      	ldrb	r2, [r2, #7]
 800a412:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	3308      	adds	r3, #8
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	7a12      	ldrb	r2, [r2, #8]
 800a41c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	3309      	adds	r3, #9
 800a422:	683a      	ldr	r2, [r7, #0]
 800a424:	7a52      	ldrb	r2, [r2, #9]
 800a426:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	330a      	adds	r3, #10
 800a42c:	683a      	ldr	r2, [r7, #0]
 800a42e:	7a92      	ldrb	r2, [r2, #10]
 800a430:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	330b      	adds	r3, #11
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	7ad2      	ldrb	r2, [r2, #11]
 800a43a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	330c      	adds	r3, #12
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	7b12      	ldrb	r2, [r2, #12]
 800a444:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	330d      	adds	r3, #13
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	7b52      	ldrb	r2, [r2, #13]
 800a44e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	330e      	adds	r3, #14
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	7b92      	ldrb	r2, [r2, #14]
 800a458:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	330f      	adds	r3, #15
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	7bd2      	ldrb	r2, [r2, #15]
 800a462:	701a      	strb	r2, [r3, #0]
#endif
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	bc80      	pop	{r7}
 800a46c:	4770      	bx	lr

0800a46e <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800a46e:	b480      	push	{r7}
 800a470:	b085      	sub	sp, #20
 800a472:	af00      	add	r7, sp, #0
 800a474:	60f8      	str	r0, [r7, #12]
 800a476:	60b9      	str	r1, [r7, #8]
 800a478:	4613      	mov	r3, r2
 800a47a:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800a47c:	e007      	b.n	800a48e <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	1c53      	adds	r3, r2, #1
 800a482:	60bb      	str	r3, [r7, #8]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	1c59      	adds	r1, r3, #1
 800a488:	60f9      	str	r1, [r7, #12]
 800a48a:	7812      	ldrb	r2, [r2, #0]
 800a48c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800a48e:	79fb      	ldrb	r3, [r7, #7]
 800a490:	1e5a      	subs	r2, r3, #1
 800a492:	71fa      	strb	r2, [r7, #7]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1f2      	bne.n	800a47e <copy_block_nn+0x10>
}
 800a498:	bf00      	nop
 800a49a:	bf00      	nop
 800a49c:	3714      	adds	r7, #20
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bc80      	pop	{r7}
 800a4a2:	4770      	bx	lr

0800a4a4 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	781a      	ldrb	r2, [r3, #0]
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	4053      	eors	r3, r2
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	7819      	ldrb	r1, [r3, #0]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	781a      	ldrb	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	404a      	eors	r2, r1
 800a4d0:	b2d2      	uxtb	r2, r2
 800a4d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	3302      	adds	r3, #2
 800a4d8:	7819      	ldrb	r1, [r3, #0]
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	3302      	adds	r3, #2
 800a4de:	781a      	ldrb	r2, [r3, #0]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	3302      	adds	r3, #2
 800a4e4:	404a      	eors	r2, r1
 800a4e6:	b2d2      	uxtb	r2, r2
 800a4e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	3303      	adds	r3, #3
 800a4ee:	7819      	ldrb	r1, [r3, #0]
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	3303      	adds	r3, #3
 800a4f4:	781a      	ldrb	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	3303      	adds	r3, #3
 800a4fa:	404a      	eors	r2, r1
 800a4fc:	b2d2      	uxtb	r2, r2
 800a4fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	3304      	adds	r3, #4
 800a504:	7819      	ldrb	r1, [r3, #0]
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	3304      	adds	r3, #4
 800a50a:	781a      	ldrb	r2, [r3, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	3304      	adds	r3, #4
 800a510:	404a      	eors	r2, r1
 800a512:	b2d2      	uxtb	r2, r2
 800a514:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	3305      	adds	r3, #5
 800a51a:	7819      	ldrb	r1, [r3, #0]
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	3305      	adds	r3, #5
 800a520:	781a      	ldrb	r2, [r3, #0]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	3305      	adds	r3, #5
 800a526:	404a      	eors	r2, r1
 800a528:	b2d2      	uxtb	r2, r2
 800a52a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	3306      	adds	r3, #6
 800a530:	7819      	ldrb	r1, [r3, #0]
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	3306      	adds	r3, #6
 800a536:	781a      	ldrb	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	3306      	adds	r3, #6
 800a53c:	404a      	eors	r2, r1
 800a53e:	b2d2      	uxtb	r2, r2
 800a540:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	3307      	adds	r3, #7
 800a546:	7819      	ldrb	r1, [r3, #0]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	3307      	adds	r3, #7
 800a54c:	781a      	ldrb	r2, [r3, #0]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	3307      	adds	r3, #7
 800a552:	404a      	eors	r2, r1
 800a554:	b2d2      	uxtb	r2, r2
 800a556:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	3308      	adds	r3, #8
 800a55c:	7819      	ldrb	r1, [r3, #0]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	3308      	adds	r3, #8
 800a562:	781a      	ldrb	r2, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	3308      	adds	r3, #8
 800a568:	404a      	eors	r2, r1
 800a56a:	b2d2      	uxtb	r2, r2
 800a56c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	3309      	adds	r3, #9
 800a572:	7819      	ldrb	r1, [r3, #0]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	3309      	adds	r3, #9
 800a578:	781a      	ldrb	r2, [r3, #0]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	3309      	adds	r3, #9
 800a57e:	404a      	eors	r2, r1
 800a580:	b2d2      	uxtb	r2, r2
 800a582:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	330a      	adds	r3, #10
 800a588:	7819      	ldrb	r1, [r3, #0]
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	330a      	adds	r3, #10
 800a58e:	781a      	ldrb	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	330a      	adds	r3, #10
 800a594:	404a      	eors	r2, r1
 800a596:	b2d2      	uxtb	r2, r2
 800a598:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	330b      	adds	r3, #11
 800a59e:	7819      	ldrb	r1, [r3, #0]
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	330b      	adds	r3, #11
 800a5a4:	781a      	ldrb	r2, [r3, #0]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	330b      	adds	r3, #11
 800a5aa:	404a      	eors	r2, r1
 800a5ac:	b2d2      	uxtb	r2, r2
 800a5ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	330c      	adds	r3, #12
 800a5b4:	7819      	ldrb	r1, [r3, #0]
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	330c      	adds	r3, #12
 800a5ba:	781a      	ldrb	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	330c      	adds	r3, #12
 800a5c0:	404a      	eors	r2, r1
 800a5c2:	b2d2      	uxtb	r2, r2
 800a5c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	330d      	adds	r3, #13
 800a5ca:	7819      	ldrb	r1, [r3, #0]
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	330d      	adds	r3, #13
 800a5d0:	781a      	ldrb	r2, [r3, #0]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	330d      	adds	r3, #13
 800a5d6:	404a      	eors	r2, r1
 800a5d8:	b2d2      	uxtb	r2, r2
 800a5da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	330e      	adds	r3, #14
 800a5e0:	7819      	ldrb	r1, [r3, #0]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	330e      	adds	r3, #14
 800a5e6:	781a      	ldrb	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	330e      	adds	r3, #14
 800a5ec:	404a      	eors	r2, r1
 800a5ee:	b2d2      	uxtb	r2, r2
 800a5f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	330f      	adds	r3, #15
 800a5f6:	7819      	ldrb	r1, [r3, #0]
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	330f      	adds	r3, #15
 800a5fc:	781a      	ldrb	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	330f      	adds	r3, #15
 800a602:	404a      	eors	r2, r1
 800a604:	b2d2      	uxtb	r2, r2
 800a606:	701a      	strb	r2, [r3, #0]
#endif
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bc80      	pop	{r7}
 800a610:	4770      	bx	lr

0800a612 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800a612:	b480      	push	{r7}
 800a614:	b085      	sub	sp, #20
 800a616:	af00      	add	r7, sp, #0
 800a618:	60f8      	str	r0, [r7, #12]
 800a61a:	60b9      	str	r1, [r7, #8]
 800a61c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	781a      	ldrb	r2, [r3, #0]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	4053      	eors	r3, r2
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	3301      	adds	r3, #1
 800a632:	7819      	ldrb	r1, [r3, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	3301      	adds	r3, #1
 800a638:	781a      	ldrb	r2, [r3, #0]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3301      	adds	r3, #1
 800a63e:	404a      	eors	r2, r1
 800a640:	b2d2      	uxtb	r2, r2
 800a642:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	3302      	adds	r3, #2
 800a648:	7819      	ldrb	r1, [r3, #0]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	3302      	adds	r3, #2
 800a64e:	781a      	ldrb	r2, [r3, #0]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	3302      	adds	r3, #2
 800a654:	404a      	eors	r2, r1
 800a656:	b2d2      	uxtb	r2, r2
 800a658:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	3303      	adds	r3, #3
 800a65e:	7819      	ldrb	r1, [r3, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	3303      	adds	r3, #3
 800a664:	781a      	ldrb	r2, [r3, #0]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	3303      	adds	r3, #3
 800a66a:	404a      	eors	r2, r1
 800a66c:	b2d2      	uxtb	r2, r2
 800a66e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	3304      	adds	r3, #4
 800a674:	7819      	ldrb	r1, [r3, #0]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	3304      	adds	r3, #4
 800a67a:	781a      	ldrb	r2, [r3, #0]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	3304      	adds	r3, #4
 800a680:	404a      	eors	r2, r1
 800a682:	b2d2      	uxtb	r2, r2
 800a684:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	3305      	adds	r3, #5
 800a68a:	7819      	ldrb	r1, [r3, #0]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	3305      	adds	r3, #5
 800a690:	781a      	ldrb	r2, [r3, #0]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3305      	adds	r3, #5
 800a696:	404a      	eors	r2, r1
 800a698:	b2d2      	uxtb	r2, r2
 800a69a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	3306      	adds	r3, #6
 800a6a0:	7819      	ldrb	r1, [r3, #0]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3306      	adds	r3, #6
 800a6a6:	781a      	ldrb	r2, [r3, #0]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	3306      	adds	r3, #6
 800a6ac:	404a      	eors	r2, r1
 800a6ae:	b2d2      	uxtb	r2, r2
 800a6b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	3307      	adds	r3, #7
 800a6b6:	7819      	ldrb	r1, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	3307      	adds	r3, #7
 800a6bc:	781a      	ldrb	r2, [r3, #0]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	3307      	adds	r3, #7
 800a6c2:	404a      	eors	r2, r1
 800a6c4:	b2d2      	uxtb	r2, r2
 800a6c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	3308      	adds	r3, #8
 800a6cc:	7819      	ldrb	r1, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	3308      	adds	r3, #8
 800a6d2:	781a      	ldrb	r2, [r3, #0]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	3308      	adds	r3, #8
 800a6d8:	404a      	eors	r2, r1
 800a6da:	b2d2      	uxtb	r2, r2
 800a6dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	3309      	adds	r3, #9
 800a6e2:	7819      	ldrb	r1, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	3309      	adds	r3, #9
 800a6e8:	781a      	ldrb	r2, [r3, #0]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	3309      	adds	r3, #9
 800a6ee:	404a      	eors	r2, r1
 800a6f0:	b2d2      	uxtb	r2, r2
 800a6f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	330a      	adds	r3, #10
 800a6f8:	7819      	ldrb	r1, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	330a      	adds	r3, #10
 800a6fe:	781a      	ldrb	r2, [r3, #0]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	330a      	adds	r3, #10
 800a704:	404a      	eors	r2, r1
 800a706:	b2d2      	uxtb	r2, r2
 800a708:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	330b      	adds	r3, #11
 800a70e:	7819      	ldrb	r1, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	330b      	adds	r3, #11
 800a714:	781a      	ldrb	r2, [r3, #0]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	330b      	adds	r3, #11
 800a71a:	404a      	eors	r2, r1
 800a71c:	b2d2      	uxtb	r2, r2
 800a71e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	330c      	adds	r3, #12
 800a724:	7819      	ldrb	r1, [r3, #0]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	330c      	adds	r3, #12
 800a72a:	781a      	ldrb	r2, [r3, #0]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	330c      	adds	r3, #12
 800a730:	404a      	eors	r2, r1
 800a732:	b2d2      	uxtb	r2, r2
 800a734:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	330d      	adds	r3, #13
 800a73a:	7819      	ldrb	r1, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	330d      	adds	r3, #13
 800a740:	781a      	ldrb	r2, [r3, #0]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	330d      	adds	r3, #13
 800a746:	404a      	eors	r2, r1
 800a748:	b2d2      	uxtb	r2, r2
 800a74a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	330e      	adds	r3, #14
 800a750:	7819      	ldrb	r1, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	330e      	adds	r3, #14
 800a756:	781a      	ldrb	r2, [r3, #0]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	330e      	adds	r3, #14
 800a75c:	404a      	eors	r2, r1
 800a75e:	b2d2      	uxtb	r2, r2
 800a760:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	330f      	adds	r3, #15
 800a766:	7819      	ldrb	r1, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	330f      	adds	r3, #15
 800a76c:	781a      	ldrb	r2, [r3, #0]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	330f      	adds	r3, #15
 800a772:	404a      	eors	r2, r1
 800a774:	b2d2      	uxtb	r2, r2
 800a776:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800a778:	bf00      	nop
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bc80      	pop	{r7}
 800a780:	4770      	bx	lr

0800a782 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b082      	sub	sp, #8
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800a78c:	6839      	ldr	r1, [r7, #0]
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f7ff fe88 	bl	800a4a4 <xor_block>
}
 800a794:	bf00      	nop
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	4b48      	ldr	r3, [pc, #288]	@ (800a8cc <shift_sub_rows+0x130>)
 800a7ac:	5c9a      	ldrb	r2, [r3, r2]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	701a      	strb	r2, [r3, #0]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	3304      	adds	r3, #4
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	3304      	adds	r3, #4
 800a7be:	4a43      	ldr	r2, [pc, #268]	@ (800a8cc <shift_sub_rows+0x130>)
 800a7c0:	5c52      	ldrb	r2, [r2, r1]
 800a7c2:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	3308      	adds	r3, #8
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	3308      	adds	r3, #8
 800a7d0:	4a3e      	ldr	r2, [pc, #248]	@ (800a8cc <shift_sub_rows+0x130>)
 800a7d2:	5c52      	ldrb	r2, [r2, r1]
 800a7d4:	701a      	strb	r2, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	330c      	adds	r3, #12
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	4619      	mov	r1, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	330c      	adds	r3, #12
 800a7e2:	4a3a      	ldr	r2, [pc, #232]	@ (800a8cc <shift_sub_rows+0x130>)
 800a7e4:	5c52      	ldrb	r2, [r2, r1]
 800a7e6:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	785b      	ldrb	r3, [r3, #1]
 800a7ec:	73fb      	strb	r3, [r7, #15]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	3305      	adds	r3, #5
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	4a34      	ldr	r2, [pc, #208]	@ (800a8cc <shift_sub_rows+0x130>)
 800a7fc:	5c52      	ldrb	r2, [r2, r1]
 800a7fe:	701a      	strb	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3309      	adds	r3, #9
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	4619      	mov	r1, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	3305      	adds	r3, #5
 800a80c:	4a2f      	ldr	r2, [pc, #188]	@ (800a8cc <shift_sub_rows+0x130>)
 800a80e:	5c52      	ldrb	r2, [r2, r1]
 800a810:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	330d      	adds	r3, #13
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	4619      	mov	r1, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	3309      	adds	r3, #9
 800a81e:	4a2b      	ldr	r2, [pc, #172]	@ (800a8cc <shift_sub_rows+0x130>)
 800a820:	5c52      	ldrb	r2, [r2, r1]
 800a822:	701a      	strb	r2, [r3, #0]
 800a824:	7bfa      	ldrb	r2, [r7, #15]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	330d      	adds	r3, #13
 800a82a:	4928      	ldr	r1, [pc, #160]	@ (800a8cc <shift_sub_rows+0x130>)
 800a82c:	5c8a      	ldrb	r2, [r1, r2]
 800a82e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	789b      	ldrb	r3, [r3, #2]
 800a834:	73fb      	strb	r3, [r7, #15]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	330a      	adds	r3, #10
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	4619      	mov	r1, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	3302      	adds	r3, #2
 800a842:	4a22      	ldr	r2, [pc, #136]	@ (800a8cc <shift_sub_rows+0x130>)
 800a844:	5c52      	ldrb	r2, [r2, r1]
 800a846:	701a      	strb	r2, [r3, #0]
 800a848:	7bfa      	ldrb	r2, [r7, #15]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	330a      	adds	r3, #10
 800a84e:	491f      	ldr	r1, [pc, #124]	@ (800a8cc <shift_sub_rows+0x130>)
 800a850:	5c8a      	ldrb	r2, [r1, r2]
 800a852:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	799b      	ldrb	r3, [r3, #6]
 800a858:	73fb      	strb	r3, [r7, #15]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	330e      	adds	r3, #14
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	4619      	mov	r1, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	3306      	adds	r3, #6
 800a866:	4a19      	ldr	r2, [pc, #100]	@ (800a8cc <shift_sub_rows+0x130>)
 800a868:	5c52      	ldrb	r2, [r2, r1]
 800a86a:	701a      	strb	r2, [r3, #0]
 800a86c:	7bfa      	ldrb	r2, [r7, #15]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	330e      	adds	r3, #14
 800a872:	4916      	ldr	r1, [pc, #88]	@ (800a8cc <shift_sub_rows+0x130>)
 800a874:	5c8a      	ldrb	r2, [r1, r2]
 800a876:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	7bdb      	ldrb	r3, [r3, #15]
 800a87c:	73fb      	strb	r3, [r7, #15]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	330b      	adds	r3, #11
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	4619      	mov	r1, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	330f      	adds	r3, #15
 800a88a:	4a10      	ldr	r2, [pc, #64]	@ (800a8cc <shift_sub_rows+0x130>)
 800a88c:	5c52      	ldrb	r2, [r2, r1]
 800a88e:	701a      	strb	r2, [r3, #0]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	3307      	adds	r3, #7
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	4619      	mov	r1, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	330b      	adds	r3, #11
 800a89c:	4a0b      	ldr	r2, [pc, #44]	@ (800a8cc <shift_sub_rows+0x130>)
 800a89e:	5c52      	ldrb	r2, [r2, r1]
 800a8a0:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	3303      	adds	r3, #3
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	3307      	adds	r3, #7
 800a8ae:	4a07      	ldr	r2, [pc, #28]	@ (800a8cc <shift_sub_rows+0x130>)
 800a8b0:	5c52      	ldrb	r2, [r2, r1]
 800a8b2:	701a      	strb	r2, [r3, #0]
 800a8b4:	7bfa      	ldrb	r2, [r7, #15]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	3303      	adds	r3, #3
 800a8ba:	4904      	ldr	r1, [pc, #16]	@ (800a8cc <shift_sub_rows+0x130>)
 800a8bc:	5c8a      	ldrb	r2, [r1, r2]
 800a8be:	701a      	strb	r2, [r3, #0]
}
 800a8c0:	bf00      	nop
 800a8c2:	3714      	adds	r7, #20
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bc80      	pop	{r7}
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	0801d41c 	.word	0x0801d41c

0800a8d0 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800a8d8:	f107 0308 	add.w	r3, r7, #8
 800a8dc:	6879      	ldr	r1, [r7, #4]
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7ff fd6c 	bl	800a3bc <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800a8e4:	7a3b      	ldrb	r3, [r7, #8]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	4b9a      	ldr	r3, [pc, #616]	@ (800ab54 <mix_sub_columns+0x284>)
 800a8ea:	5c9a      	ldrb	r2, [r3, r2]
 800a8ec:	7b7b      	ldrb	r3, [r7, #13]
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	4b99      	ldr	r3, [pc, #612]	@ (800ab58 <mix_sub_columns+0x288>)
 800a8f2:	5c5b      	ldrb	r3, [r3, r1]
 800a8f4:	4053      	eors	r3, r2
 800a8f6:	b2da      	uxtb	r2, r3
 800a8f8:	7cbb      	ldrb	r3, [r7, #18]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	4b97      	ldr	r3, [pc, #604]	@ (800ab5c <mix_sub_columns+0x28c>)
 800a8fe:	5c5b      	ldrb	r3, [r3, r1]
 800a900:	4053      	eors	r3, r2
 800a902:	b2da      	uxtb	r2, r3
 800a904:	7dfb      	ldrb	r3, [r7, #23]
 800a906:	4619      	mov	r1, r3
 800a908:	4b94      	ldr	r3, [pc, #592]	@ (800ab5c <mix_sub_columns+0x28c>)
 800a90a:	5c5b      	ldrb	r3, [r3, r1]
 800a90c:	4053      	eors	r3, r2
 800a90e:	b2da      	uxtb	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800a914:	7a3b      	ldrb	r3, [r7, #8]
 800a916:	461a      	mov	r2, r3
 800a918:	4b90      	ldr	r3, [pc, #576]	@ (800ab5c <mix_sub_columns+0x28c>)
 800a91a:	5c9a      	ldrb	r2, [r3, r2]
 800a91c:	7b7b      	ldrb	r3, [r7, #13]
 800a91e:	4619      	mov	r1, r3
 800a920:	4b8c      	ldr	r3, [pc, #560]	@ (800ab54 <mix_sub_columns+0x284>)
 800a922:	5c5b      	ldrb	r3, [r3, r1]
 800a924:	4053      	eors	r3, r2
 800a926:	b2da      	uxtb	r2, r3
 800a928:	7cbb      	ldrb	r3, [r7, #18]
 800a92a:	4619      	mov	r1, r3
 800a92c:	4b8a      	ldr	r3, [pc, #552]	@ (800ab58 <mix_sub_columns+0x288>)
 800a92e:	5c5b      	ldrb	r3, [r3, r1]
 800a930:	4053      	eors	r3, r2
 800a932:	b2d9      	uxtb	r1, r3
 800a934:	7dfb      	ldrb	r3, [r7, #23]
 800a936:	461a      	mov	r2, r3
 800a938:	4b88      	ldr	r3, [pc, #544]	@ (800ab5c <mix_sub_columns+0x28c>)
 800a93a:	5c9a      	ldrb	r2, [r3, r2]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	3301      	adds	r3, #1
 800a940:	404a      	eors	r2, r1
 800a942:	b2d2      	uxtb	r2, r2
 800a944:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800a946:	7a3b      	ldrb	r3, [r7, #8]
 800a948:	461a      	mov	r2, r3
 800a94a:	4b84      	ldr	r3, [pc, #528]	@ (800ab5c <mix_sub_columns+0x28c>)
 800a94c:	5c9a      	ldrb	r2, [r3, r2]
 800a94e:	7b7b      	ldrb	r3, [r7, #13]
 800a950:	4619      	mov	r1, r3
 800a952:	4b82      	ldr	r3, [pc, #520]	@ (800ab5c <mix_sub_columns+0x28c>)
 800a954:	5c5b      	ldrb	r3, [r3, r1]
 800a956:	4053      	eors	r3, r2
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	7cbb      	ldrb	r3, [r7, #18]
 800a95c:	4619      	mov	r1, r3
 800a95e:	4b7d      	ldr	r3, [pc, #500]	@ (800ab54 <mix_sub_columns+0x284>)
 800a960:	5c5b      	ldrb	r3, [r3, r1]
 800a962:	4053      	eors	r3, r2
 800a964:	b2d9      	uxtb	r1, r3
 800a966:	7dfb      	ldrb	r3, [r7, #23]
 800a968:	461a      	mov	r2, r3
 800a96a:	4b7b      	ldr	r3, [pc, #492]	@ (800ab58 <mix_sub_columns+0x288>)
 800a96c:	5c9a      	ldrb	r2, [r3, r2]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	3302      	adds	r3, #2
 800a972:	404a      	eors	r2, r1
 800a974:	b2d2      	uxtb	r2, r2
 800a976:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800a978:	7a3b      	ldrb	r3, [r7, #8]
 800a97a:	461a      	mov	r2, r3
 800a97c:	4b76      	ldr	r3, [pc, #472]	@ (800ab58 <mix_sub_columns+0x288>)
 800a97e:	5c9a      	ldrb	r2, [r3, r2]
 800a980:	7b7b      	ldrb	r3, [r7, #13]
 800a982:	4619      	mov	r1, r3
 800a984:	4b75      	ldr	r3, [pc, #468]	@ (800ab5c <mix_sub_columns+0x28c>)
 800a986:	5c5b      	ldrb	r3, [r3, r1]
 800a988:	4053      	eors	r3, r2
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	7cbb      	ldrb	r3, [r7, #18]
 800a98e:	4619      	mov	r1, r3
 800a990:	4b72      	ldr	r3, [pc, #456]	@ (800ab5c <mix_sub_columns+0x28c>)
 800a992:	5c5b      	ldrb	r3, [r3, r1]
 800a994:	4053      	eors	r3, r2
 800a996:	b2d9      	uxtb	r1, r3
 800a998:	7dfb      	ldrb	r3, [r7, #23]
 800a99a:	461a      	mov	r2, r3
 800a99c:	4b6d      	ldr	r3, [pc, #436]	@ (800ab54 <mix_sub_columns+0x284>)
 800a99e:	5c9a      	ldrb	r2, [r3, r2]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	3303      	adds	r3, #3
 800a9a4:	404a      	eors	r2, r1
 800a9a6:	b2d2      	uxtb	r2, r2
 800a9a8:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800a9aa:	7b3b      	ldrb	r3, [r7, #12]
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	4b69      	ldr	r3, [pc, #420]	@ (800ab54 <mix_sub_columns+0x284>)
 800a9b0:	5c9a      	ldrb	r2, [r3, r2]
 800a9b2:	7c7b      	ldrb	r3, [r7, #17]
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	4b68      	ldr	r3, [pc, #416]	@ (800ab58 <mix_sub_columns+0x288>)
 800a9b8:	5c5b      	ldrb	r3, [r3, r1]
 800a9ba:	4053      	eors	r3, r2
 800a9bc:	b2da      	uxtb	r2, r3
 800a9be:	7dbb      	ldrb	r3, [r7, #22]
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	4b66      	ldr	r3, [pc, #408]	@ (800ab5c <mix_sub_columns+0x28c>)
 800a9c4:	5c5b      	ldrb	r3, [r3, r1]
 800a9c6:	4053      	eors	r3, r2
 800a9c8:	b2d9      	uxtb	r1, r3
 800a9ca:	7afb      	ldrb	r3, [r7, #11]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	4b63      	ldr	r3, [pc, #396]	@ (800ab5c <mix_sub_columns+0x28c>)
 800a9d0:	5c9a      	ldrb	r2, [r3, r2]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	404a      	eors	r2, r1
 800a9d8:	b2d2      	uxtb	r2, r2
 800a9da:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800a9dc:	7b3b      	ldrb	r3, [r7, #12]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	4b5e      	ldr	r3, [pc, #376]	@ (800ab5c <mix_sub_columns+0x28c>)
 800a9e2:	5c9a      	ldrb	r2, [r3, r2]
 800a9e4:	7c7b      	ldrb	r3, [r7, #17]
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	4b5a      	ldr	r3, [pc, #360]	@ (800ab54 <mix_sub_columns+0x284>)
 800a9ea:	5c5b      	ldrb	r3, [r3, r1]
 800a9ec:	4053      	eors	r3, r2
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	7dbb      	ldrb	r3, [r7, #22]
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	4b58      	ldr	r3, [pc, #352]	@ (800ab58 <mix_sub_columns+0x288>)
 800a9f6:	5c5b      	ldrb	r3, [r3, r1]
 800a9f8:	4053      	eors	r3, r2
 800a9fa:	b2d9      	uxtb	r1, r3
 800a9fc:	7afb      	ldrb	r3, [r7, #11]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	4b56      	ldr	r3, [pc, #344]	@ (800ab5c <mix_sub_columns+0x28c>)
 800aa02:	5c9a      	ldrb	r2, [r3, r2]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	3305      	adds	r3, #5
 800aa08:	404a      	eors	r2, r1
 800aa0a:	b2d2      	uxtb	r2, r2
 800aa0c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800aa0e:	7b3b      	ldrb	r3, [r7, #12]
 800aa10:	461a      	mov	r2, r3
 800aa12:	4b52      	ldr	r3, [pc, #328]	@ (800ab5c <mix_sub_columns+0x28c>)
 800aa14:	5c9a      	ldrb	r2, [r3, r2]
 800aa16:	7c7b      	ldrb	r3, [r7, #17]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	4b50      	ldr	r3, [pc, #320]	@ (800ab5c <mix_sub_columns+0x28c>)
 800aa1c:	5c5b      	ldrb	r3, [r3, r1]
 800aa1e:	4053      	eors	r3, r2
 800aa20:	b2da      	uxtb	r2, r3
 800aa22:	7dbb      	ldrb	r3, [r7, #22]
 800aa24:	4619      	mov	r1, r3
 800aa26:	4b4b      	ldr	r3, [pc, #300]	@ (800ab54 <mix_sub_columns+0x284>)
 800aa28:	5c5b      	ldrb	r3, [r3, r1]
 800aa2a:	4053      	eors	r3, r2
 800aa2c:	b2d9      	uxtb	r1, r3
 800aa2e:	7afb      	ldrb	r3, [r7, #11]
 800aa30:	461a      	mov	r2, r3
 800aa32:	4b49      	ldr	r3, [pc, #292]	@ (800ab58 <mix_sub_columns+0x288>)
 800aa34:	5c9a      	ldrb	r2, [r3, r2]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	3306      	adds	r3, #6
 800aa3a:	404a      	eors	r2, r1
 800aa3c:	b2d2      	uxtb	r2, r2
 800aa3e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800aa40:	7b3b      	ldrb	r3, [r7, #12]
 800aa42:	461a      	mov	r2, r3
 800aa44:	4b44      	ldr	r3, [pc, #272]	@ (800ab58 <mix_sub_columns+0x288>)
 800aa46:	5c9a      	ldrb	r2, [r3, r2]
 800aa48:	7c7b      	ldrb	r3, [r7, #17]
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	4b43      	ldr	r3, [pc, #268]	@ (800ab5c <mix_sub_columns+0x28c>)
 800aa4e:	5c5b      	ldrb	r3, [r3, r1]
 800aa50:	4053      	eors	r3, r2
 800aa52:	b2da      	uxtb	r2, r3
 800aa54:	7dbb      	ldrb	r3, [r7, #22]
 800aa56:	4619      	mov	r1, r3
 800aa58:	4b40      	ldr	r3, [pc, #256]	@ (800ab5c <mix_sub_columns+0x28c>)
 800aa5a:	5c5b      	ldrb	r3, [r3, r1]
 800aa5c:	4053      	eors	r3, r2
 800aa5e:	b2d9      	uxtb	r1, r3
 800aa60:	7afb      	ldrb	r3, [r7, #11]
 800aa62:	461a      	mov	r2, r3
 800aa64:	4b3b      	ldr	r3, [pc, #236]	@ (800ab54 <mix_sub_columns+0x284>)
 800aa66:	5c9a      	ldrb	r2, [r3, r2]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	3307      	adds	r3, #7
 800aa6c:	404a      	eors	r2, r1
 800aa6e:	b2d2      	uxtb	r2, r2
 800aa70:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800aa72:	7c3b      	ldrb	r3, [r7, #16]
 800aa74:	461a      	mov	r2, r3
 800aa76:	4b37      	ldr	r3, [pc, #220]	@ (800ab54 <mix_sub_columns+0x284>)
 800aa78:	5c9a      	ldrb	r2, [r3, r2]
 800aa7a:	7d7b      	ldrb	r3, [r7, #21]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	4b36      	ldr	r3, [pc, #216]	@ (800ab58 <mix_sub_columns+0x288>)
 800aa80:	5c5b      	ldrb	r3, [r3, r1]
 800aa82:	4053      	eors	r3, r2
 800aa84:	b2da      	uxtb	r2, r3
 800aa86:	7abb      	ldrb	r3, [r7, #10]
 800aa88:	4619      	mov	r1, r3
 800aa8a:	4b34      	ldr	r3, [pc, #208]	@ (800ab5c <mix_sub_columns+0x28c>)
 800aa8c:	5c5b      	ldrb	r3, [r3, r1]
 800aa8e:	4053      	eors	r3, r2
 800aa90:	b2d9      	uxtb	r1, r3
 800aa92:	7bfb      	ldrb	r3, [r7, #15]
 800aa94:	461a      	mov	r2, r3
 800aa96:	4b31      	ldr	r3, [pc, #196]	@ (800ab5c <mix_sub_columns+0x28c>)
 800aa98:	5c9a      	ldrb	r2, [r3, r2]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	3308      	adds	r3, #8
 800aa9e:	404a      	eors	r2, r1
 800aaa0:	b2d2      	uxtb	r2, r2
 800aaa2:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800aaa4:	7c3b      	ldrb	r3, [r7, #16]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	4b2c      	ldr	r3, [pc, #176]	@ (800ab5c <mix_sub_columns+0x28c>)
 800aaaa:	5c9a      	ldrb	r2, [r3, r2]
 800aaac:	7d7b      	ldrb	r3, [r7, #21]
 800aaae:	4619      	mov	r1, r3
 800aab0:	4b28      	ldr	r3, [pc, #160]	@ (800ab54 <mix_sub_columns+0x284>)
 800aab2:	5c5b      	ldrb	r3, [r3, r1]
 800aab4:	4053      	eors	r3, r2
 800aab6:	b2da      	uxtb	r2, r3
 800aab8:	7abb      	ldrb	r3, [r7, #10]
 800aaba:	4619      	mov	r1, r3
 800aabc:	4b26      	ldr	r3, [pc, #152]	@ (800ab58 <mix_sub_columns+0x288>)
 800aabe:	5c5b      	ldrb	r3, [r3, r1]
 800aac0:	4053      	eors	r3, r2
 800aac2:	b2d9      	uxtb	r1, r3
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
 800aac6:	461a      	mov	r2, r3
 800aac8:	4b24      	ldr	r3, [pc, #144]	@ (800ab5c <mix_sub_columns+0x28c>)
 800aaca:	5c9a      	ldrb	r2, [r3, r2]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	3309      	adds	r3, #9
 800aad0:	404a      	eors	r2, r1
 800aad2:	b2d2      	uxtb	r2, r2
 800aad4:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800aad6:	7c3b      	ldrb	r3, [r7, #16]
 800aad8:	461a      	mov	r2, r3
 800aada:	4b20      	ldr	r3, [pc, #128]	@ (800ab5c <mix_sub_columns+0x28c>)
 800aadc:	5c9a      	ldrb	r2, [r3, r2]
 800aade:	7d7b      	ldrb	r3, [r7, #21]
 800aae0:	4619      	mov	r1, r3
 800aae2:	4b1e      	ldr	r3, [pc, #120]	@ (800ab5c <mix_sub_columns+0x28c>)
 800aae4:	5c5b      	ldrb	r3, [r3, r1]
 800aae6:	4053      	eors	r3, r2
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	7abb      	ldrb	r3, [r7, #10]
 800aaec:	4619      	mov	r1, r3
 800aaee:	4b19      	ldr	r3, [pc, #100]	@ (800ab54 <mix_sub_columns+0x284>)
 800aaf0:	5c5b      	ldrb	r3, [r3, r1]
 800aaf2:	4053      	eors	r3, r2
 800aaf4:	b2d9      	uxtb	r1, r3
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
 800aaf8:	461a      	mov	r2, r3
 800aafa:	4b17      	ldr	r3, [pc, #92]	@ (800ab58 <mix_sub_columns+0x288>)
 800aafc:	5c9a      	ldrb	r2, [r3, r2]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	330a      	adds	r3, #10
 800ab02:	404a      	eors	r2, r1
 800ab04:	b2d2      	uxtb	r2, r2
 800ab06:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ab08:	7c3b      	ldrb	r3, [r7, #16]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	4b12      	ldr	r3, [pc, #72]	@ (800ab58 <mix_sub_columns+0x288>)
 800ab0e:	5c9a      	ldrb	r2, [r3, r2]
 800ab10:	7d7b      	ldrb	r3, [r7, #21]
 800ab12:	4619      	mov	r1, r3
 800ab14:	4b11      	ldr	r3, [pc, #68]	@ (800ab5c <mix_sub_columns+0x28c>)
 800ab16:	5c5b      	ldrb	r3, [r3, r1]
 800ab18:	4053      	eors	r3, r2
 800ab1a:	b2da      	uxtb	r2, r3
 800ab1c:	7abb      	ldrb	r3, [r7, #10]
 800ab1e:	4619      	mov	r1, r3
 800ab20:	4b0e      	ldr	r3, [pc, #56]	@ (800ab5c <mix_sub_columns+0x28c>)
 800ab22:	5c5b      	ldrb	r3, [r3, r1]
 800ab24:	4053      	eors	r3, r2
 800ab26:	b2d9      	uxtb	r1, r3
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	4b09      	ldr	r3, [pc, #36]	@ (800ab54 <mix_sub_columns+0x284>)
 800ab2e:	5c9a      	ldrb	r2, [r3, r2]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	330b      	adds	r3, #11
 800ab34:	404a      	eors	r2, r1
 800ab36:	b2d2      	uxtb	r2, r2
 800ab38:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800ab3a:	7d3b      	ldrb	r3, [r7, #20]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	4b05      	ldr	r3, [pc, #20]	@ (800ab54 <mix_sub_columns+0x284>)
 800ab40:	5c9a      	ldrb	r2, [r3, r2]
 800ab42:	7a7b      	ldrb	r3, [r7, #9]
 800ab44:	4619      	mov	r1, r3
 800ab46:	4b04      	ldr	r3, [pc, #16]	@ (800ab58 <mix_sub_columns+0x288>)
 800ab48:	5c5b      	ldrb	r3, [r3, r1]
 800ab4a:	4053      	eors	r3, r2
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
 800ab50:	4619      	mov	r1, r3
 800ab52:	e005      	b.n	800ab60 <mix_sub_columns+0x290>
 800ab54:	0801d51c 	.word	0x0801d51c
 800ab58:	0801d61c 	.word	0x0801d61c
 800ab5c:	0801d41c 	.word	0x0801d41c
 800ab60:	4b2d      	ldr	r3, [pc, #180]	@ (800ac18 <mix_sub_columns+0x348>)
 800ab62:	5c5b      	ldrb	r3, [r3, r1]
 800ab64:	4053      	eors	r3, r2
 800ab66:	b2d9      	uxtb	r1, r3
 800ab68:	7cfb      	ldrb	r3, [r7, #19]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	4b2a      	ldr	r3, [pc, #168]	@ (800ac18 <mix_sub_columns+0x348>)
 800ab6e:	5c9a      	ldrb	r2, [r3, r2]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	330c      	adds	r3, #12
 800ab74:	404a      	eors	r2, r1
 800ab76:	b2d2      	uxtb	r2, r2
 800ab78:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800ab7a:	7d3b      	ldrb	r3, [r7, #20]
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	4b26      	ldr	r3, [pc, #152]	@ (800ac18 <mix_sub_columns+0x348>)
 800ab80:	5c9a      	ldrb	r2, [r3, r2]
 800ab82:	7a7b      	ldrb	r3, [r7, #9]
 800ab84:	4619      	mov	r1, r3
 800ab86:	4b25      	ldr	r3, [pc, #148]	@ (800ac1c <mix_sub_columns+0x34c>)
 800ab88:	5c5b      	ldrb	r3, [r3, r1]
 800ab8a:	4053      	eors	r3, r2
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	4619      	mov	r1, r3
 800ab92:	4b23      	ldr	r3, [pc, #140]	@ (800ac20 <mix_sub_columns+0x350>)
 800ab94:	5c5b      	ldrb	r3, [r3, r1]
 800ab96:	4053      	eors	r3, r2
 800ab98:	b2d9      	uxtb	r1, r3
 800ab9a:	7cfb      	ldrb	r3, [r7, #19]
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	4b1e      	ldr	r3, [pc, #120]	@ (800ac18 <mix_sub_columns+0x348>)
 800aba0:	5c9a      	ldrb	r2, [r3, r2]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	330d      	adds	r3, #13
 800aba6:	404a      	eors	r2, r1
 800aba8:	b2d2      	uxtb	r2, r2
 800abaa:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800abac:	7d3b      	ldrb	r3, [r7, #20]
 800abae:	461a      	mov	r2, r3
 800abb0:	4b19      	ldr	r3, [pc, #100]	@ (800ac18 <mix_sub_columns+0x348>)
 800abb2:	5c9a      	ldrb	r2, [r3, r2]
 800abb4:	7a7b      	ldrb	r3, [r7, #9]
 800abb6:	4619      	mov	r1, r3
 800abb8:	4b17      	ldr	r3, [pc, #92]	@ (800ac18 <mix_sub_columns+0x348>)
 800abba:	5c5b      	ldrb	r3, [r3, r1]
 800abbc:	4053      	eors	r3, r2
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	7bbb      	ldrb	r3, [r7, #14]
 800abc2:	4619      	mov	r1, r3
 800abc4:	4b15      	ldr	r3, [pc, #84]	@ (800ac1c <mix_sub_columns+0x34c>)
 800abc6:	5c5b      	ldrb	r3, [r3, r1]
 800abc8:	4053      	eors	r3, r2
 800abca:	b2d9      	uxtb	r1, r3
 800abcc:	7cfb      	ldrb	r3, [r7, #19]
 800abce:	461a      	mov	r2, r3
 800abd0:	4b13      	ldr	r3, [pc, #76]	@ (800ac20 <mix_sub_columns+0x350>)
 800abd2:	5c9a      	ldrb	r2, [r3, r2]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	330e      	adds	r3, #14
 800abd8:	404a      	eors	r2, r1
 800abda:	b2d2      	uxtb	r2, r2
 800abdc:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800abde:	7d3b      	ldrb	r3, [r7, #20]
 800abe0:	461a      	mov	r2, r3
 800abe2:	4b0f      	ldr	r3, [pc, #60]	@ (800ac20 <mix_sub_columns+0x350>)
 800abe4:	5c9a      	ldrb	r2, [r3, r2]
 800abe6:	7a7b      	ldrb	r3, [r7, #9]
 800abe8:	4619      	mov	r1, r3
 800abea:	4b0b      	ldr	r3, [pc, #44]	@ (800ac18 <mix_sub_columns+0x348>)
 800abec:	5c5b      	ldrb	r3, [r3, r1]
 800abee:	4053      	eors	r3, r2
 800abf0:	b2da      	uxtb	r2, r3
 800abf2:	7bbb      	ldrb	r3, [r7, #14]
 800abf4:	4619      	mov	r1, r3
 800abf6:	4b08      	ldr	r3, [pc, #32]	@ (800ac18 <mix_sub_columns+0x348>)
 800abf8:	5c5b      	ldrb	r3, [r3, r1]
 800abfa:	4053      	eors	r3, r2
 800abfc:	b2d9      	uxtb	r1, r3
 800abfe:	7cfb      	ldrb	r3, [r7, #19]
 800ac00:	461a      	mov	r2, r3
 800ac02:	4b06      	ldr	r3, [pc, #24]	@ (800ac1c <mix_sub_columns+0x34c>)
 800ac04:	5c9a      	ldrb	r2, [r3, r2]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	330f      	adds	r3, #15
 800ac0a:	404a      	eors	r2, r1
 800ac0c:	b2d2      	uxtb	r2, r2
 800ac0e:	701a      	strb	r2, [r3, #0]
  }
 800ac10:	bf00      	nop
 800ac12:	3718      	adds	r7, #24
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	0801d41c 	.word	0x0801d41c
 800ac1c:	0801d51c 	.word	0x0801d51c
 800ac20:	0801d61c 	.word	0x0801d61c

0800ac24 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	607a      	str	r2, [r7, #4]
 800ac30:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800ac32:	7afb      	ldrb	r3, [r7, #11]
 800ac34:	3b10      	subs	r3, #16
 800ac36:	2b10      	cmp	r3, #16
 800ac38:	bf8c      	ite	hi
 800ac3a:	2201      	movhi	r2, #1
 800ac3c:	2200      	movls	r2, #0
 800ac3e:	b2d2      	uxtb	r2, r2
 800ac40:	2a00      	cmp	r2, #0
 800ac42:	d10b      	bne.n	800ac5c <lorawan_aes_set_key+0x38>
 800ac44:	4a64      	ldr	r2, [pc, #400]	@ (800add8 <lorawan_aes_set_key+0x1b4>)
 800ac46:	fa22 f303 	lsr.w	r3, r2, r3
 800ac4a:	f003 0301 	and.w	r3, r3, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	bf14      	ite	ne
 800ac52:	2301      	movne	r3, #1
 800ac54:	2300      	moveq	r3, #0
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d105      	bne.n	800ac68 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800ac64:	23ff      	movs	r3, #255	@ 0xff
 800ac66:	e0b2      	b.n	800adce <lorawan_aes_set_key+0x1aa>
        break;
 800ac68:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	7afa      	ldrb	r2, [r7, #11]
 800ac6e:	68f9      	ldr	r1, [r7, #12]
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7ff fbfc 	bl	800a46e <copy_block_nn>
    hi = (keylen + 28) << 2;
 800ac76:	7afb      	ldrb	r3, [r7, #11]
 800ac78:	331c      	adds	r3, #28
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800ac80:	7c7b      	ldrb	r3, [r7, #17]
 800ac82:	091b      	lsrs	r3, r3, #4
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	3b01      	subs	r3, #1
 800ac88:	b2da      	uxtb	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ac90:	7afb      	ldrb	r3, [r7, #11]
 800ac92:	75fb      	strb	r3, [r7, #23]
 800ac94:	2301      	movs	r3, #1
 800ac96:	75bb      	strb	r3, [r7, #22]
 800ac98:	e093      	b.n	800adc2 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800ac9a:	7dfb      	ldrb	r3, [r7, #23]
 800ac9c:	3b04      	subs	r3, #4
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	5cd3      	ldrb	r3, [r2, r3]
 800aca2:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800aca4:	7dfb      	ldrb	r3, [r7, #23]
 800aca6:	3b03      	subs	r3, #3
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	5cd3      	ldrb	r3, [r2, r3]
 800acac:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800acae:	7dfb      	ldrb	r3, [r7, #23]
 800acb0:	3b02      	subs	r3, #2
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	5cd3      	ldrb	r3, [r2, r3]
 800acb6:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800acb8:	7dfb      	ldrb	r3, [r7, #23]
 800acba:	3b01      	subs	r3, #1
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	5cd3      	ldrb	r3, [r2, r3]
 800acc0:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800acc2:	7dfb      	ldrb	r3, [r7, #23]
 800acc4:	7afa      	ldrb	r2, [r7, #11]
 800acc6:	fbb3 f1f2 	udiv	r1, r3, r2
 800acca:	fb01 f202 	mul.w	r2, r1, r2
 800acce:	1a9b      	subs	r3, r3, r2
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d127      	bne.n	800ad26 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800acd6:	7d7b      	ldrb	r3, [r7, #21]
 800acd8:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800acda:	7d3b      	ldrb	r3, [r7, #20]
 800acdc:	4a3f      	ldr	r2, [pc, #252]	@ (800addc <lorawan_aes_set_key+0x1b8>)
 800acde:	5cd2      	ldrb	r2, [r2, r3]
 800ace0:	7dbb      	ldrb	r3, [r7, #22]
 800ace2:	4053      	eors	r3, r2
 800ace4:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800ace6:	7cfb      	ldrb	r3, [r7, #19]
 800ace8:	4a3c      	ldr	r2, [pc, #240]	@ (800addc <lorawan_aes_set_key+0x1b8>)
 800acea:	5cd3      	ldrb	r3, [r2, r3]
 800acec:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800acee:	7cbb      	ldrb	r3, [r7, #18]
 800acf0:	4a3a      	ldr	r2, [pc, #232]	@ (800addc <lorawan_aes_set_key+0x1b8>)
 800acf2:	5cd3      	ldrb	r3, [r2, r3]
 800acf4:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800acf6:	7c3b      	ldrb	r3, [r7, #16]
 800acf8:	4a38      	ldr	r2, [pc, #224]	@ (800addc <lorawan_aes_set_key+0x1b8>)
 800acfa:	5cd3      	ldrb	r3, [r2, r3]
 800acfc:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800acfe:	7dbb      	ldrb	r3, [r7, #22]
 800ad00:	005b      	lsls	r3, r3, #1
 800ad02:	b25a      	sxtb	r2, r3
 800ad04:	7dbb      	ldrb	r3, [r7, #22]
 800ad06:	09db      	lsrs	r3, r3, #7
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	0049      	lsls	r1, r1, #1
 800ad0e:	440b      	add	r3, r1
 800ad10:	4619      	mov	r1, r3
 800ad12:	00c8      	lsls	r0, r1, #3
 800ad14:	4619      	mov	r1, r3
 800ad16:	4603      	mov	r3, r0
 800ad18:	440b      	add	r3, r1
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	b25b      	sxtb	r3, r3
 800ad1e:	4053      	eors	r3, r2
 800ad20:	b25b      	sxtb	r3, r3
 800ad22:	75bb      	strb	r3, [r7, #22]
 800ad24:	e01c      	b.n	800ad60 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800ad26:	7afb      	ldrb	r3, [r7, #11]
 800ad28:	2b18      	cmp	r3, #24
 800ad2a:	d919      	bls.n	800ad60 <lorawan_aes_set_key+0x13c>
 800ad2c:	7dfb      	ldrb	r3, [r7, #23]
 800ad2e:	7afa      	ldrb	r2, [r7, #11]
 800ad30:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad34:	fb01 f202 	mul.w	r2, r1, r2
 800ad38:	1a9b      	subs	r3, r3, r2
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	2b10      	cmp	r3, #16
 800ad3e:	d10f      	bne.n	800ad60 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800ad40:	7d7b      	ldrb	r3, [r7, #21]
 800ad42:	4a26      	ldr	r2, [pc, #152]	@ (800addc <lorawan_aes_set_key+0x1b8>)
 800ad44:	5cd3      	ldrb	r3, [r2, r3]
 800ad46:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800ad48:	7d3b      	ldrb	r3, [r7, #20]
 800ad4a:	4a24      	ldr	r2, [pc, #144]	@ (800addc <lorawan_aes_set_key+0x1b8>)
 800ad4c:	5cd3      	ldrb	r3, [r2, r3]
 800ad4e:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800ad50:	7cfb      	ldrb	r3, [r7, #19]
 800ad52:	4a22      	ldr	r2, [pc, #136]	@ (800addc <lorawan_aes_set_key+0x1b8>)
 800ad54:	5cd3      	ldrb	r3, [r2, r3]
 800ad56:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800ad58:	7cbb      	ldrb	r3, [r7, #18]
 800ad5a:	4a20      	ldr	r2, [pc, #128]	@ (800addc <lorawan_aes_set_key+0x1b8>)
 800ad5c:	5cd3      	ldrb	r3, [r2, r3]
 800ad5e:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800ad60:	7dfa      	ldrb	r2, [r7, #23]
 800ad62:	7afb      	ldrb	r3, [r7, #11]
 800ad64:	1ad3      	subs	r3, r2, r3
 800ad66:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ad68:	7c3b      	ldrb	r3, [r7, #16]
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	5cd1      	ldrb	r1, [r2, r3]
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
 800ad70:	7d7a      	ldrb	r2, [r7, #21]
 800ad72:	404a      	eors	r2, r1
 800ad74:	b2d1      	uxtb	r1, r2
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ad7a:	7c3b      	ldrb	r3, [r7, #16]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	5cd1      	ldrb	r1, [r2, r3]
 800ad82:	7dfb      	ldrb	r3, [r7, #23]
 800ad84:	3301      	adds	r3, #1
 800ad86:	7d3a      	ldrb	r2, [r7, #20]
 800ad88:	404a      	eors	r2, r1
 800ad8a:	b2d1      	uxtb	r1, r2
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800ad90:	7c3b      	ldrb	r3, [r7, #16]
 800ad92:	3302      	adds	r3, #2
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	5cd1      	ldrb	r1, [r2, r3]
 800ad98:	7dfb      	ldrb	r3, [r7, #23]
 800ad9a:	3302      	adds	r3, #2
 800ad9c:	7cfa      	ldrb	r2, [r7, #19]
 800ad9e:	404a      	eors	r2, r1
 800ada0:	b2d1      	uxtb	r1, r2
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800ada6:	7c3b      	ldrb	r3, [r7, #16]
 800ada8:	3303      	adds	r3, #3
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	5cd1      	ldrb	r1, [r2, r3]
 800adae:	7dfb      	ldrb	r3, [r7, #23]
 800adb0:	3303      	adds	r3, #3
 800adb2:	7cba      	ldrb	r2, [r7, #18]
 800adb4:	404a      	eors	r2, r1
 800adb6:	b2d1      	uxtb	r1, r2
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800adbc:	7dfb      	ldrb	r3, [r7, #23]
 800adbe:	3304      	adds	r3, #4
 800adc0:	75fb      	strb	r3, [r7, #23]
 800adc2:	7dfa      	ldrb	r2, [r7, #23]
 800adc4:	7c7b      	ldrb	r3, [r7, #17]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	f4ff af67 	bcc.w	800ac9a <lorawan_aes_set_key+0x76>
    }
    return 0;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3718      	adds	r7, #24
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	00010101 	.word	0x00010101
 800addc:	0801d41c 	.word	0x0801d41c

0800ade0 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08a      	sub	sp, #40	@ 0x28
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d038      	beq.n	800ae68 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	f107 0314 	add.w	r3, r7, #20
 800adfc:	68f9      	ldr	r1, [r7, #12]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff fc07 	bl	800a612 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800ae04:	2301      	movs	r3, #1
 800ae06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae0a:	e014      	b.n	800ae36 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800ae0c:	f107 0314 	add.w	r3, r7, #20
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff fd5d 	bl	800a8d0 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ae1c:	0112      	lsls	r2, r2, #4
 800ae1e:	441a      	add	r2, r3
 800ae20:	f107 0314 	add.w	r3, r7, #20
 800ae24:	4611      	mov	r1, r2
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7ff fcab 	bl	800a782 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800ae2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae30:	3301      	adds	r3, #1
 800ae32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ae3c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d3e3      	bcc.n	800ae0c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800ae44:	f107 0314 	add.w	r3, r7, #20
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7ff fca7 	bl	800a79c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ae54:	0112      	lsls	r2, r2, #4
 800ae56:	441a      	add	r2, r3
 800ae58:	f107 0314 	add.w	r3, r7, #20
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	68b8      	ldr	r0, [r7, #8]
 800ae60:	f7ff fbd7 	bl	800a612 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800ae64:	2300      	movs	r3, #0
 800ae66:	e000      	b.n	800ae6a <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800ae68:	23ff      	movs	r3, #255	@ 0xff
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3728      	adds	r7, #40	@ 0x28
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
	...

0800ae74 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800ae74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae76:	b0a1      	sub	sp, #132	@ 0x84
 800ae78:	af12      	add	r7, sp, #72	@ 0x48
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800ae80:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ae84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ae88:	4611      	mov	r1, r2
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 fa12 	bl	800b2b4 <SecureElementGetKeyByID>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d174      	bne.n	800af80 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ae96:	2300      	movs	r3, #0
 800ae98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ae9c:	e06c      	b.n	800af78 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800ae9e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800aea2:	4939      	ldr	r1, [pc, #228]	@ (800af88 <PrintKey+0x114>)
 800aea4:	4613      	mov	r3, r2
 800aea6:	005b      	lsls	r3, r3, #1
 800aea8:	4413      	add	r3, r2
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	440b      	add	r3, r1
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d15a      	bne.n	800af6e <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800aeb8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800aebc:	4932      	ldr	r1, [pc, #200]	@ (800af88 <PrintKey+0x114>)
 800aebe:	4613      	mov	r3, r2
 800aec0:	005b      	lsls	r3, r3, #1
 800aec2:	4413      	add	r3, r2
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	440b      	add	r3, r1
 800aec8:	3308      	adds	r3, #8
 800aeca:	6819      	ldr	r1, [r3, #0]
 800aecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aece:	785b      	ldrb	r3, [r3, #1]
 800aed0:	461d      	mov	r5, r3
 800aed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed4:	789b      	ldrb	r3, [r3, #2]
 800aed6:	461e      	mov	r6, r3
 800aed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeda:	78db      	ldrb	r3, [r3, #3]
 800aedc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee0:	791b      	ldrb	r3, [r3, #4]
 800aee2:	627b      	str	r3, [r7, #36]	@ 0x24
 800aee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee6:	795b      	ldrb	r3, [r3, #5]
 800aee8:	623b      	str	r3, [r7, #32]
 800aeea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeec:	799b      	ldrb	r3, [r3, #6]
 800aeee:	61fb      	str	r3, [r7, #28]
 800aef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef2:	79db      	ldrb	r3, [r3, #7]
 800aef4:	61bb      	str	r3, [r7, #24]
 800aef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef8:	7a1b      	ldrb	r3, [r3, #8]
 800aefa:	617b      	str	r3, [r7, #20]
 800aefc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefe:	7a5b      	ldrb	r3, [r3, #9]
 800af00:	613b      	str	r3, [r7, #16]
 800af02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af04:	7a9b      	ldrb	r3, [r3, #10]
 800af06:	60fb      	str	r3, [r7, #12]
 800af08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af0a:	7adb      	ldrb	r3, [r3, #11]
 800af0c:	60bb      	str	r3, [r7, #8]
 800af0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af10:	7b1b      	ldrb	r3, [r3, #12]
 800af12:	607b      	str	r3, [r7, #4]
 800af14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af16:	7b5b      	ldrb	r3, [r3, #13]
 800af18:	461c      	mov	r4, r3
 800af1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af1c:	7b9b      	ldrb	r3, [r3, #14]
 800af1e:	4618      	mov	r0, r3
 800af20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af22:	7bdb      	ldrb	r3, [r3, #15]
 800af24:	461a      	mov	r2, r3
 800af26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af28:	7c1b      	ldrb	r3, [r3, #16]
 800af2a:	9310      	str	r3, [sp, #64]	@ 0x40
 800af2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800af2e:	900e      	str	r0, [sp, #56]	@ 0x38
 800af30:	940d      	str	r4, [sp, #52]	@ 0x34
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	920c      	str	r2, [sp, #48]	@ 0x30
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	920b      	str	r2, [sp, #44]	@ 0x2c
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	920a      	str	r2, [sp, #40]	@ 0x28
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	9209      	str	r2, [sp, #36]	@ 0x24
 800af42:	697a      	ldr	r2, [r7, #20]
 800af44:	9208      	str	r2, [sp, #32]
 800af46:	69ba      	ldr	r2, [r7, #24]
 800af48:	9207      	str	r2, [sp, #28]
 800af4a:	69fa      	ldr	r2, [r7, #28]
 800af4c:	9206      	str	r2, [sp, #24]
 800af4e:	6a3a      	ldr	r2, [r7, #32]
 800af50:	9205      	str	r2, [sp, #20]
 800af52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af54:	9204      	str	r2, [sp, #16]
 800af56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af58:	9303      	str	r3, [sp, #12]
 800af5a:	9602      	str	r6, [sp, #8]
 800af5c:	9501      	str	r5, [sp, #4]
 800af5e:	9100      	str	r1, [sp, #0]
 800af60:	4b0a      	ldr	r3, [pc, #40]	@ (800af8c <PrintKey+0x118>)
 800af62:	2200      	movs	r2, #0
 800af64:	2100      	movs	r1, #0
 800af66:	2002      	movs	r0, #2
 800af68:	f010 ff5a 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
 800af6c:	e008      	b.n	800af80 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800af6e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800af72:	3301      	adds	r3, #1
 800af74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800af78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800af7c:	2b0a      	cmp	r3, #10
 800af7e:	d98e      	bls.n	800ae9e <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800af80:	373c      	adds	r7, #60	@ 0x3c
 800af82:	46bd      	mov	sp, r7
 800af84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af86:	bf00      	nop
 800af88:	0801d71c 	.word	0x0801d71c
 800af8c:	0801cfb4 	.word	0x0801cfb4

0800af90 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800af90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af92:	b091      	sub	sp, #68	@ 0x44
 800af94:	af08      	add	r7, sp, #32
 800af96:	4603      	mov	r3, r0
 800af98:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800af9e:	f107 0310 	add.w	r3, r7, #16
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 fbf0 	bl	800b788 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800afa8:	7c3b      	ldrb	r3, [r7, #16]
 800afaa:	7c7a      	ldrb	r2, [r7, #17]
 800afac:	7cb9      	ldrb	r1, [r7, #18]
 800afae:	7cf8      	ldrb	r0, [r7, #19]
 800afb0:	7d3c      	ldrb	r4, [r7, #20]
 800afb2:	7d7d      	ldrb	r5, [r7, #21]
 800afb4:	7dbe      	ldrb	r6, [r7, #22]
 800afb6:	f897 c017 	ldrb.w	ip, [r7, #23]
 800afba:	f8cd c01c 	str.w	ip, [sp, #28]
 800afbe:	9606      	str	r6, [sp, #24]
 800afc0:	9505      	str	r5, [sp, #20]
 800afc2:	9404      	str	r4, [sp, #16]
 800afc4:	9003      	str	r0, [sp, #12]
 800afc6:	9102      	str	r1, [sp, #8]
 800afc8:	9201      	str	r2, [sp, #4]
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	4b24      	ldr	r3, [pc, #144]	@ (800b060 <PrintIds+0xd0>)
 800afce:	2200      	movs	r2, #0
 800afd0:	2100      	movs	r1, #0
 800afd2:	2002      	movs	r0, #2
 800afd4:	f010 ff24 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800afd8:	f107 0318 	add.w	r3, r7, #24
 800afdc:	4618      	mov	r0, r3
 800afde:	f000 fc03 	bl	800b7e8 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800afe2:	7e3b      	ldrb	r3, [r7, #24]
 800afe4:	7e7a      	ldrb	r2, [r7, #25]
 800afe6:	7eb9      	ldrb	r1, [r7, #26]
 800afe8:	7ef8      	ldrb	r0, [r7, #27]
 800afea:	7f3c      	ldrb	r4, [r7, #28]
 800afec:	7f7d      	ldrb	r5, [r7, #29]
 800afee:	7fbe      	ldrb	r6, [r7, #30]
 800aff0:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800aff4:	f8cd c01c 	str.w	ip, [sp, #28]
 800aff8:	9606      	str	r6, [sp, #24]
 800affa:	9505      	str	r5, [sp, #20]
 800affc:	9404      	str	r4, [sp, #16]
 800affe:	9003      	str	r0, [sp, #12]
 800b000:	9102      	str	r1, [sp, #8]
 800b002:	9201      	str	r2, [sp, #4]
 800b004:	9300      	str	r3, [sp, #0]
 800b006:	4b17      	ldr	r3, [pc, #92]	@ (800b064 <PrintIds+0xd4>)
 800b008:	2200      	movs	r2, #0
 800b00a:	2100      	movs	r1, #0
 800b00c:	2002      	movs	r0, #2
 800b00e:	f010 ff07 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800b012:	f107 020c 	add.w	r2, r7, #12
 800b016:	79fb      	ldrb	r3, [r7, #7]
 800b018:	4611      	mov	r1, r2
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 fc16 	bl	800b84c <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800b020:	f107 030c 	add.w	r3, r7, #12
 800b024:	3303      	adds	r3, #3
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	461a      	mov	r2, r3
 800b02a:	f107 030c 	add.w	r3, r7, #12
 800b02e:	3302      	adds	r3, #2
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	4619      	mov	r1, r3
 800b034:	f107 030c 	add.w	r3, r7, #12
 800b038:	3301      	adds	r3, #1
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f107 030c 	add.w	r3, r7, #12
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	9303      	str	r3, [sp, #12]
 800b046:	9002      	str	r0, [sp, #8]
 800b048:	9101      	str	r1, [sp, #4]
 800b04a:	9200      	str	r2, [sp, #0]
 800b04c:	4b06      	ldr	r3, [pc, #24]	@ (800b068 <PrintIds+0xd8>)
 800b04e:	2200      	movs	r2, #0
 800b050:	2100      	movs	r1, #0
 800b052:	2002      	movs	r0, #2
 800b054:	f010 fee4 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800b058:	bf00      	nop
 800b05a:	3724      	adds	r7, #36	@ 0x24
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b060:	0801d010 	.word	0x0801d010
 800b064:	0801d050 	.word	0x0801d050
 800b068:	0801d090 	.word	0x0801d090

0800b06c <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	4603      	mov	r3, r0
 800b074:	6039      	str	r1, [r7, #0]
 800b076:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b078:	2300      	movs	r3, #0
 800b07a:	73fb      	strb	r3, [r7, #15]
 800b07c:	e01a      	b.n	800b0b4 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b07e:	4b12      	ldr	r3, [pc, #72]	@ (800b0c8 <GetKeyByID+0x5c>)
 800b080:	6819      	ldr	r1, [r3, #0]
 800b082:	7bfa      	ldrb	r2, [r7, #15]
 800b084:	4613      	mov	r3, r2
 800b086:	011b      	lsls	r3, r3, #4
 800b088:	4413      	add	r3, r2
 800b08a:	440b      	add	r3, r1
 800b08c:	3318      	adds	r3, #24
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	79fa      	ldrb	r2, [r7, #7]
 800b092:	429a      	cmp	r2, r3
 800b094:	d10b      	bne.n	800b0ae <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b096:	4b0c      	ldr	r3, [pc, #48]	@ (800b0c8 <GetKeyByID+0x5c>)
 800b098:	6819      	ldr	r1, [r3, #0]
 800b09a:	7bfa      	ldrb	r2, [r7, #15]
 800b09c:	4613      	mov	r3, r2
 800b09e:	011b      	lsls	r3, r3, #4
 800b0a0:	4413      	add	r3, r2
 800b0a2:	3318      	adds	r3, #24
 800b0a4:	18ca      	adds	r2, r1, r3
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	e006      	b.n	800b0bc <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b0ae:	7bfb      	ldrb	r3, [r7, #15]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	73fb      	strb	r3, [r7, #15]
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
 800b0b6:	2b0a      	cmp	r3, #10
 800b0b8:	d9e1      	bls.n	800b07e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b0ba:	2303      	movs	r3, #3
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3714      	adds	r7, #20
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bc80      	pop	{r7}
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	200003cc 	.word	0x200003cc

0800b0cc <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800b0cc:	b590      	push	{r4, r7, lr}
 800b0ce:	b0d1      	sub	sp, #324	@ 0x144
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800b0d6:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800b0da:	6020      	str	r0, [r4, #0]
 800b0dc:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800b0e0:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800b0e4:	6001      	str	r1, [r0, #0]
 800b0e6:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800b0ea:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800b0ee:	600a      	str	r2, [r1, #0]
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b0f6:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800b0fa:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800b0fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b100:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d003      	beq.n	800b112 <ComputeCmac+0x46>
 800b10a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d101      	bne.n	800b116 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b112:	2302      	movs	r3, #2
 800b114:	e05d      	b.n	800b1d2 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800b116:	f107 0314 	add.w	r3, r7, #20
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fe ff02 	bl	8009f24 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800b120:	f107 0210 	add.w	r2, r7, #16
 800b124:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b128:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	4611      	mov	r1, r2
 800b130:	4618      	mov	r0, r3
 800b132:	f7ff ff9b 	bl	800b06c <GetKeyByID>
 800b136:	4603      	mov	r3, r0
 800b138:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b13c:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800b140:	2b00      	cmp	r3, #0
 800b142:	d144      	bne.n	800b1ce <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800b144:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b148:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	1c5a      	adds	r2, r3, #1
 800b150:	f107 0314 	add.w	r3, r7, #20
 800b154:	4611      	mov	r1, r2
 800b156:	4618      	mov	r0, r3
 800b158:	f7fe fefd 	bl	8009f56 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800b15c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b160:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d009      	beq.n	800b17e <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800b16a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b16e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800b172:	f107 0014 	add.w	r0, r7, #20
 800b176:	2210      	movs	r2, #16
 800b178:	6819      	ldr	r1, [r3, #0]
 800b17a:	f7fe fefb 	bl	8009f74 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800b17e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b182:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800b186:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b18a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b18e:	f107 0014 	add.w	r0, r7, #20
 800b192:	6812      	ldr	r2, [r2, #0]
 800b194:	6819      	ldr	r1, [r3, #0]
 800b196:	f7fe feed 	bl	8009f74 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800b19a:	f107 0214 	add.w	r2, r7, #20
 800b19e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800b1a2:	4611      	mov	r1, r2
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7fe ffa7 	bl	800a0f8 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800b1aa:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800b1b4:	021b      	lsls	r3, r3, #8
 800b1b6:	431a      	orrs	r2, r3
 800b1b8:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800b1bc:	041b      	lsls	r3, r3, #16
 800b1be:	431a      	orrs	r2, r3
 800b1c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b1c4:	061b      	lsls	r3, r3, #24
 800b1c6:	431a      	orrs	r2, r3
 800b1c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800b1cc:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800b1ce:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd90      	pop	{r4, r7, pc}

0800b1dc <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d101      	bne.n	800b1ee <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	e00a      	b.n	800b204 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800b1ee:	4a07      	ldr	r2, [pc, #28]	@ (800b20c <SecureElementInit+0x30>)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800b1f4:	4b05      	ldr	r3, [pc, #20]	@ (800b20c <SecureElementInit+0x30>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	22d8      	movs	r2, #216	@ 0xd8
 800b1fa:	4905      	ldr	r1, [pc, #20]	@ (800b210 <SecureElementInit+0x34>)
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f00c fa6e 	bl	80176de <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	200003cc 	.word	0x200003cc
 800b210:	0801d9bc 	.word	0x0801d9bc

0800b214 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b086      	sub	sp, #24
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800b21e:	2300      	movs	r3, #0
 800b220:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800b222:	f107 030c 	add.w	r3, r7, #12
 800b226:	4618      	mov	r0, r3
 800b228:	f000 faae 	bl	800b788 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800b22c:	f107 0308 	add.w	r3, r7, #8
 800b230:	4619      	mov	r1, r3
 800b232:	2001      	movs	r0, #1
 800b234:	f000 fb0a 	bl	800b84c <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d024      	beq.n	800b288 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800b23e:	2300      	movs	r3, #0
 800b240:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800b242:	2300      	movs	r3, #0
 800b244:	75bb      	strb	r3, [r7, #22]
 800b246:	e00c      	b.n	800b262 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800b248:	7dbb      	ldrb	r3, [r7, #22]
 800b24a:	3318      	adds	r3, #24
 800b24c:	443b      	add	r3, r7
 800b24e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d002      	beq.n	800b25c <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800b256:	2301      	movs	r3, #1
 800b258:	75fb      	strb	r3, [r7, #23]
                break;
 800b25a:	e005      	b.n	800b268 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800b25c:	7dbb      	ldrb	r3, [r7, #22]
 800b25e:	3301      	adds	r3, #1
 800b260:	75bb      	strb	r3, [r7, #22]
 800b262:	7dbb      	ldrb	r3, [r7, #22]
 800b264:	2b07      	cmp	r3, #7
 800b266:	d9ef      	bls.n	800b248 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800b268:	7dfb      	ldrb	r3, [r7, #23]
 800b26a:	f083 0301 	eor.w	r3, r3, #1
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	2b00      	cmp	r3, #0
 800b272:	d009      	beq.n	800b288 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800b274:	f107 020c 	add.w	r2, r7, #12
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4610      	mov	r0, r2
 800b27c:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800b27e:	f107 030c 	add.w	r3, r7, #12
 800b282:	4618      	mov	r0, r3
 800b284:	f000 fa68 	bl	800b758 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00c      	beq.n	800b2a8 <SecureElementInitMcuID+0x94>
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d109      	bne.n	800b2a8 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800b294:	f107 0208 	add.w	r2, r7, #8
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	4610      	mov	r0, r2
 800b29c:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	2001      	movs	r0, #1
 800b2a4:	f000 fab8 	bl	800b818 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3718      	adds	r7, #24
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
	...

0800b2b4 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	6039      	str	r1, [r7, #0]
 800b2be:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	73fb      	strb	r3, [r7, #15]
 800b2c4:	e01a      	b.n	800b2fc <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b2c6:	4b12      	ldr	r3, [pc, #72]	@ (800b310 <SecureElementGetKeyByID+0x5c>)
 800b2c8:	6819      	ldr	r1, [r3, #0]
 800b2ca:	7bfa      	ldrb	r2, [r7, #15]
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	011b      	lsls	r3, r3, #4
 800b2d0:	4413      	add	r3, r2
 800b2d2:	440b      	add	r3, r1
 800b2d4:	3318      	adds	r3, #24
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	79fa      	ldrb	r2, [r7, #7]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d10b      	bne.n	800b2f6 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b2de:	4b0c      	ldr	r3, [pc, #48]	@ (800b310 <SecureElementGetKeyByID+0x5c>)
 800b2e0:	6819      	ldr	r1, [r3, #0]
 800b2e2:	7bfa      	ldrb	r2, [r7, #15]
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	011b      	lsls	r3, r3, #4
 800b2e8:	4413      	add	r3, r2
 800b2ea:	3318      	adds	r3, #24
 800b2ec:	18ca      	adds	r2, r1, r3
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	e006      	b.n	800b304 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	73fb      	strb	r3, [r7, #15]
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
 800b2fe:	2b0a      	cmp	r3, #10
 800b300:	d9e1      	bls.n	800b2c6 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b302:	2303      	movs	r3, #3
}
 800b304:	4618      	mov	r0, r3
 800b306:	3714      	adds	r7, #20
 800b308:	46bd      	mov	sp, r7
 800b30a:	bc80      	pop	{r7}
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop
 800b310:	200003cc 	.word	0x200003cc

0800b314 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800b318:	2000      	movs	r0, #0
 800b31a:	f7ff fdab 	bl	800ae74 <PrintKey>
    PrintKey( NWK_KEY );
 800b31e:	2001      	movs	r0, #1
 800b320:	f7ff fda8 	bl	800ae74 <PrintKey>
    PrintKey( APP_S_KEY );
 800b324:	2009      	movs	r0, #9
 800b326:	f7ff fda5 	bl	800ae74 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800b32a:	2008      	movs	r0, #8
 800b32c:	f7ff fda2 	bl	800ae74 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800b330:	2000      	movs	r0, #0
 800b332:	f7ff fe2d 	bl	800af90 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	4603      	mov	r3, r0
 800b344:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800b346:	200b      	movs	r0, #11
 800b348:	f7ff fd94 	bl	800ae74 <PrintKey>
    PrintKey( MC_KE_KEY );
 800b34c:	200c      	movs	r0, #12
 800b34e:	f7ff fd91 	bl	800ae74 <PrintKey>
    PrintKey( APP_S_KEY );
 800b352:	2009      	movs	r0, #9
 800b354:	f7ff fd8e 	bl	800ae74 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800b358:	2008      	movs	r0, #8
 800b35a:	f7ff fd8b 	bl	800ae74 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800b35e:	200a      	movs	r0, #10
 800b360:	f7ff fd88 	bl	800ae74 <PrintKey>
    PrintIds( mode );
 800b364:	79fb      	ldrb	r3, [r7, #7]
 800b366:	4618      	mov	r0, r3
 800b368:	f7ff fe12 	bl	800af90 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
	...

0800b378 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b088      	sub	sp, #32
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	4603      	mov	r3, r0
 800b380:	6039      	str	r1, [r7, #0]
 800b382:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d101      	bne.n	800b38e <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b38a:	2302      	movs	r3, #2
 800b38c:	e04c      	b.n	800b428 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b38e:	2300      	movs	r3, #0
 800b390:	77fb      	strb	r3, [r7, #31]
 800b392:	e045      	b.n	800b420 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b394:	4b26      	ldr	r3, [pc, #152]	@ (800b430 <SecureElementSetKey+0xb8>)
 800b396:	6819      	ldr	r1, [r3, #0]
 800b398:	7ffa      	ldrb	r2, [r7, #31]
 800b39a:	4613      	mov	r3, r2
 800b39c:	011b      	lsls	r3, r3, #4
 800b39e:	4413      	add	r3, r2
 800b3a0:	440b      	add	r3, r1
 800b3a2:	3318      	adds	r3, #24
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	79fa      	ldrb	r2, [r7, #7]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d136      	bne.n	800b41a <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800b3ac:	79fb      	ldrb	r3, [r7, #7]
 800b3ae:	2b0d      	cmp	r3, #13
 800b3b0:	d123      	bne.n	800b3fa <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b3b2:	2306      	movs	r3, #6
 800b3b4:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60fb      	str	r3, [r7, #12]
 800b3ba:	f107 0310 	add.w	r3, r7, #16
 800b3be:	2200      	movs	r2, #0
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	605a      	str	r2, [r3, #4]
 800b3c4:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800b3c6:	f107 030c 	add.w	r3, r7, #12
 800b3ca:	220c      	movs	r2, #12
 800b3cc:	2110      	movs	r1, #16
 800b3ce:	6838      	ldr	r0, [r7, #0]
 800b3d0:	f000 f876 	bl	800b4c0 <SecureElementAesEncrypt>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800b3d8:	4b15      	ldr	r3, [pc, #84]	@ (800b430 <SecureElementSetKey+0xb8>)
 800b3da:	6819      	ldr	r1, [r3, #0]
 800b3dc:	7ffa      	ldrb	r2, [r7, #31]
 800b3de:	4613      	mov	r3, r2
 800b3e0:	011b      	lsls	r3, r3, #4
 800b3e2:	4413      	add	r3, r2
 800b3e4:	3318      	adds	r3, #24
 800b3e6:	440b      	add	r3, r1
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	f107 010c 	add.w	r1, r7, #12
 800b3ee:	2210      	movs	r2, #16
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f00c f974 	bl	80176de <memcpy1>
                return retval;
 800b3f6:	7fbb      	ldrb	r3, [r7, #30]
 800b3f8:	e016      	b.n	800b428 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800b3fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b430 <SecureElementSetKey+0xb8>)
 800b3fc:	6819      	ldr	r1, [r3, #0]
 800b3fe:	7ffa      	ldrb	r2, [r7, #31]
 800b400:	4613      	mov	r3, r2
 800b402:	011b      	lsls	r3, r3, #4
 800b404:	4413      	add	r3, r2
 800b406:	3318      	adds	r3, #24
 800b408:	440b      	add	r3, r1
 800b40a:	3301      	adds	r3, #1
 800b40c:	2210      	movs	r2, #16
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	4618      	mov	r0, r3
 800b412:	f00c f964 	bl	80176de <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800b416:	2300      	movs	r3, #0
 800b418:	e006      	b.n	800b428 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b41a:	7ffb      	ldrb	r3, [r7, #31]
 800b41c:	3301      	adds	r3, #1
 800b41e:	77fb      	strb	r3, [r7, #31]
 800b420:	7ffb      	ldrb	r3, [r7, #31]
 800b422:	2b0a      	cmp	r3, #10
 800b424:	d9b6      	bls.n	800b394 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b426:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3720      	adds	r7, #32
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	200003cc 	.word	0x200003cc

0800b434 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b086      	sub	sp, #24
 800b438:	af02      	add	r7, sp, #8
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
 800b440:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800b442:	78fb      	ldrb	r3, [r7, #3]
 800b444:	2b0b      	cmp	r3, #11
 800b446:	d901      	bls.n	800b44c <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b448:	2303      	movs	r3, #3
 800b44a:	e009      	b.n	800b460 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800b44c:	78fa      	ldrb	r2, [r7, #3]
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	9300      	str	r3, [sp, #0]
 800b452:	4613      	mov	r3, r2
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	68b9      	ldr	r1, [r7, #8]
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f7ff fe37 	bl	800b0cc <ComputeCmac>
 800b45e:	4603      	mov	r3, r0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b088      	sub	sp, #32
 800b46c:	af02      	add	r7, sp, #8
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d101      	bne.n	800b480 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b47c:	2302      	movs	r3, #2
 800b47e:	e01b      	b.n	800b4b8 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800b480:	2306      	movs	r3, #6
 800b482:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800b484:	2300      	movs	r3, #0
 800b486:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800b488:	78fa      	ldrb	r2, [r7, #3]
 800b48a:	f107 0310 	add.w	r3, r7, #16
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	4613      	mov	r3, r2
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	68f9      	ldr	r1, [r7, #12]
 800b496:	2000      	movs	r0, #0
 800b498:	f7ff fe18 	bl	800b0cc <ComputeCmac>
 800b49c:	4603      	mov	r3, r0
 800b49e:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b4a0:	7dfb      	ldrb	r3, [r7, #23]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800b4a6:	7dfb      	ldrb	r3, [r7, #23]
 800b4a8:	e006      	b.n	800b4b8 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d001      	beq.n	800b4b6 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800b4b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3718      	adds	r7, #24
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b0c2      	sub	sp, #264	@ 0x108
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b4cc:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800b4d0:	6001      	str	r1, [r0, #0]
 800b4d2:	4611      	mov	r1, r2
 800b4d4:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800b4d8:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800b4dc:	6013      	str	r3, [r2, #0]
 800b4de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4e2:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800b4e6:	460a      	mov	r2, r1
 800b4e8:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d006      	beq.n	800b4fe <SecureElementAesEncrypt+0x3e>
 800b4f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d101      	bne.n	800b502 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b4fe:	2302      	movs	r3, #2
 800b500:	e059      	b.n	800b5b6 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800b502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b506:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 030f 	and.w	r3, r3, #15
 800b510:	2b00      	cmp	r3, #0
 800b512:	d001      	beq.n	800b518 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b514:	2305      	movs	r3, #5
 800b516:	e04e      	b.n	800b5b6 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800b518:	f107 0314 	add.w	r3, r7, #20
 800b51c:	22f0      	movs	r2, #240	@ 0xf0
 800b51e:	2100      	movs	r1, #0
 800b520:	4618      	mov	r0, r3
 800b522:	f00c f917 	bl	8017754 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800b526:	f107 0210 	add.w	r2, r7, #16
 800b52a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b52e:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	4611      	mov	r1, r2
 800b536:	4618      	mov	r0, r3
 800b538:	f7ff fd98 	bl	800b06c <GetKeyByID>
 800b53c:	4603      	mov	r3, r0
 800b53e:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b542:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800b546:	2b00      	cmp	r3, #0
 800b548:	d133      	bne.n	800b5b2 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	3301      	adds	r3, #1
 800b54e:	f107 0214 	add.w	r2, r7, #20
 800b552:	2110      	movs	r1, #16
 800b554:	4618      	mov	r0, r3
 800b556:	f7ff fb65 	bl	800ac24 <lorawan_aes_set_key>

        uint8_t block = 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800b560:	e020      	b.n	800b5a4 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800b562:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	18d0      	adds	r0, r2, r3
 800b56a:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800b56e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800b572:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800b576:	6812      	ldr	r2, [r2, #0]
 800b578:	4413      	add	r3, r2
 800b57a:	f107 0214 	add.w	r2, r7, #20
 800b57e:	4619      	mov	r1, r3
 800b580:	f7ff fc2e 	bl	800ade0 <lorawan_aes_encrypt>
            block = block + 16;
 800b584:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800b588:	3310      	adds	r3, #16
 800b58a:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800b58e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b592:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800b596:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800b59a:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800b59e:	6812      	ldr	r2, [r2, #0]
 800b5a0:	3a10      	subs	r2, #16
 800b5a2:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800b5a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5a8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d1d7      	bne.n	800b562 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800b5b2:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b088      	sub	sp, #32
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	70fb      	strb	r3, [r7, #3]
 800b5cc:	4613      	mov	r3, r2
 800b5ce:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d101      	bne.n	800b5da <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b5d6:	2302      	movs	r3, #2
 800b5d8:	e02e      	b.n	800b638 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800b5da:	2306      	movs	r3, #6
 800b5dc:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800b5de:	78bb      	ldrb	r3, [r7, #2]
 800b5e0:	2b0c      	cmp	r3, #12
 800b5e2:	d104      	bne.n	800b5ee <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800b5e4:	78fb      	ldrb	r3, [r7, #3]
 800b5e6:	2b0b      	cmp	r3, #11
 800b5e8:	d001      	beq.n	800b5ee <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b5ea:	2303      	movs	r3, #3
 800b5ec:	e024      	b.n	800b638 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	60fb      	str	r3, [r7, #12]
 800b5f2:	f107 0310 	add.w	r3, r7, #16
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	601a      	str	r2, [r3, #0]
 800b5fa:	605a      	str	r2, [r3, #4]
 800b5fc:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800b5fe:	f107 030c 	add.w	r3, r7, #12
 800b602:	78fa      	ldrb	r2, [r7, #3]
 800b604:	2110      	movs	r1, #16
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7ff ff5a 	bl	800b4c0 <SecureElementAesEncrypt>
 800b60c:	4603      	mov	r3, r0
 800b60e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b610:	7ffb      	ldrb	r3, [r7, #31]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d001      	beq.n	800b61a <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800b616:	7ffb      	ldrb	r3, [r7, #31]
 800b618:	e00e      	b.n	800b638 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800b61a:	f107 020c 	add.w	r2, r7, #12
 800b61e:	78bb      	ldrb	r3, [r7, #2]
 800b620:	4611      	mov	r1, r2
 800b622:	4618      	mov	r0, r3
 800b624:	f7ff fea8 	bl	800b378 <SecureElementSetKey>
 800b628:	4603      	mov	r3, r0
 800b62a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b62c:	7ffb      	ldrb	r3, [r7, #31]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800b632:	7ffb      	ldrb	r3, [r7, #31]
 800b634:	e000      	b.n	800b638 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b636:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3720      	adds	r7, #32
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	60b9      	str	r1, [r7, #8]
 800b648:	607b      	str	r3, [r7, #4]
 800b64a:	4603      	mov	r3, r0
 800b64c:	73fb      	strb	r3, [r7, #15]
 800b64e:	4613      	mov	r3, r2
 800b650:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d005      	beq.n	800b664 <SecureElementProcessJoinAccept+0x24>
 800b658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d002      	beq.n	800b664 <SecureElementProcessJoinAccept+0x24>
 800b65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b660:	2b00      	cmp	r3, #0
 800b662:	d101      	bne.n	800b668 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b664:	2302      	movs	r3, #2
 800b666:	e05c      	b.n	800b722 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800b668:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b66c:	2b21      	cmp	r3, #33	@ 0x21
 800b66e:	d901      	bls.n	800b674 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b670:	2305      	movs	r3, #5
 800b672:	e056      	b.n	800b722 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800b674:	2301      	movs	r3, #1
 800b676:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800b678:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	461a      	mov	r2, r3
 800b680:	6879      	ldr	r1, [r7, #4]
 800b682:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b684:	f00c f82b 	bl	80176de <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	1c58      	adds	r0, r3, #1
 800b68c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b690:	3b01      	subs	r3, #1
 800b692:	4619      	mov	r1, r3
 800b694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b696:	3301      	adds	r3, #1
 800b698:	7dfa      	ldrb	r2, [r7, #23]
 800b69a:	f7ff ff11 	bl	800b4c0 <SecureElementAesEncrypt>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d001      	beq.n	800b6a8 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800b6a4:	2307      	movs	r3, #7
 800b6a6:	e03c      	b.n	800b722 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6aa:	330b      	adds	r3, #11
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	09db      	lsrs	r3, r3, #7
 800b6b0:	b2da      	uxtb	r2, r3
 800b6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b4:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800b6b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b6ba:	3b04      	subs	r3, #4
 800b6bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6be:	4413      	add	r3, r2
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b6c8:	3b03      	subs	r3, #3
 800b6ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6cc:	4413      	add	r3, r2
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	021b      	lsls	r3, r3, #8
 800b6d2:	ea41 0203 	orr.w	r2, r1, r3
 800b6d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b6da:	3b02      	subs	r3, #2
 800b6dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b6de:	440b      	add	r3, r1
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	041b      	lsls	r3, r3, #16
 800b6e4:	431a      	orrs	r2, r3
 800b6e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b6ea:	3b01      	subs	r3, #1
 800b6ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b6ee:	440b      	add	r3, r1
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	061b      	lsls	r3, r3, #24
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800b6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d10d      	bne.n	800b71c <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800b700:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b704:	3b04      	subs	r3, #4
 800b706:	4619      	mov	r1, r3
 800b708:	2301      	movs	r3, #1
 800b70a:	693a      	ldr	r2, [r7, #16]
 800b70c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b70e:	f7ff feab 	bl	800b468 <SecureElementVerifyAesCmac>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d003      	beq.n	800b720 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800b718:	2301      	movs	r3, #1
 800b71a:	e002      	b.n	800b722 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800b71c:	2304      	movs	r3, #4
 800b71e:	e000      	b.n	800b722 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b720:	2300      	movs	r3, #0
}
 800b722:	4618      	mov	r0, r3
 800b724:	3718      	adds	r7, #24
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
	...

0800b72c <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d101      	bne.n	800b73e <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b73a:	2302      	movs	r3, #2
 800b73c:	e006      	b.n	800b74c <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800b73e:	4b05      	ldr	r3, [pc, #20]	@ (800b754 <SecureElementRandomNumber+0x28>)
 800b740:	695b      	ldr	r3, [r3, #20]
 800b742:	4798      	blx	r3
 800b744:	4602      	mov	r2, r0
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800b74a:	2300      	movs	r3, #0
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	0801d86c 	.word	0x0801d86c

0800b758 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d101      	bne.n	800b76a <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b766:	2302      	movs	r3, #2
 800b768:	e007      	b.n	800b77a <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800b76a:	4b06      	ldr	r3, [pc, #24]	@ (800b784 <SecureElementSetDevEui+0x2c>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2208      	movs	r2, #8
 800b770:	6879      	ldr	r1, [r7, #4]
 800b772:	4618      	mov	r0, r3
 800b774:	f00b ffb3 	bl	80176de <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b778:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	200003cc 	.word	0x200003cc

0800b788 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d101      	bne.n	800b79a <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b796:	2302      	movs	r3, #2
 800b798:	e007      	b.n	800b7aa <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800b79a:	4b06      	ldr	r3, [pc, #24]	@ (800b7b4 <SecureElementGetDevEui+0x2c>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2208      	movs	r2, #8
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f00b ff9b 	bl	80176de <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b7a8:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	200003cc 	.word	0x200003cc

0800b7b8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d101      	bne.n	800b7ca <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b7c6:	2302      	movs	r3, #2
 800b7c8:	e008      	b.n	800b7dc <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800b7ca:	4b06      	ldr	r3, [pc, #24]	@ (800b7e4 <SecureElementSetJoinEui+0x2c>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	3308      	adds	r3, #8
 800b7d0:	2208      	movs	r2, #8
 800b7d2:	6879      	ldr	r1, [r7, #4]
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f00b ff82 	bl	80176de <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b7da:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3708      	adds	r7, #8
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	200003cc 	.word	0x200003cc

0800b7e8 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d101      	bne.n	800b7fa <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b7f6:	2302      	movs	r3, #2
 800b7f8:	e008      	b.n	800b80c <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800b7fa:	4b06      	ldr	r3, [pc, #24]	@ (800b814 <SecureElementGetJoinEui+0x2c>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	3308      	adds	r3, #8
 800b800:	2208      	movs	r2, #8
 800b802:	4619      	mov	r1, r3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f00b ff6a 	bl	80176de <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b80a:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	200003cc 	.word	0x200003cc

0800b818 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	4603      	mov	r3, r0
 800b820:	6039      	str	r1, [r7, #0]
 800b822:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800b824:	79fb      	ldrb	r3, [r7, #7]
 800b826:	2b02      	cmp	r3, #2
 800b828:	d104      	bne.n	800b834 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800b82a:	4b07      	ldr	r3, [pc, #28]	@ (800b848 <SecureElementSetDevAddr+0x30>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	683a      	ldr	r2, [r7, #0]
 800b830:	611a      	str	r2, [r3, #16]
 800b832:	e003      	b.n	800b83c <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800b834:	4b04      	ldr	r3, [pc, #16]	@ (800b848 <SecureElementSetDevAddr+0x30>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	683a      	ldr	r2, [r7, #0]
 800b83a:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800b83c:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800b83e:	4618      	mov	r0, r3
 800b840:	370c      	adds	r7, #12
 800b842:	46bd      	mov	sp, r7
 800b844:	bc80      	pop	{r7}
 800b846:	4770      	bx	lr
 800b848:	200003cc 	.word	0x200003cc

0800b84c <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
 800b852:	4603      	mov	r3, r0
 800b854:	6039      	str	r1, [r7, #0]
 800b856:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d101      	bne.n	800b862 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b85e:	2302      	movs	r3, #2
 800b860:	e00e      	b.n	800b880 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800b862:	79fb      	ldrb	r3, [r7, #7]
 800b864:	2b02      	cmp	r3, #2
 800b866:	d105      	bne.n	800b874 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800b868:	4b08      	ldr	r3, [pc, #32]	@ (800b88c <SecureElementGetDevAddr+0x40>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	691a      	ldr	r2, [r3, #16]
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	601a      	str	r2, [r3, #0]
 800b872:	e004      	b.n	800b87e <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800b874:	4b05      	ldr	r3, [pc, #20]	@ (800b88c <SecureElementGetDevAddr+0x40>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	695a      	ldr	r2, [r3, #20]
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800b87e:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800b880:	4618      	mov	r0, r3
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	bc80      	pop	{r7}
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	200003cc 	.word	0x200003cc

0800b890 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800b89a:	4a22      	ldr	r2, [pc, #136]	@ (800b924 <LmHandlerInit+0x94>)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800b8a0:	4b21      	ldr	r3, [pc, #132]	@ (800b928 <LmHandlerInit+0x98>)
 800b8a2:	4a22      	ldr	r2, [pc, #136]	@ (800b92c <LmHandlerInit+0x9c>)
 800b8a4:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800b8a6:	4b20      	ldr	r3, [pc, #128]	@ (800b928 <LmHandlerInit+0x98>)
 800b8a8:	4a21      	ldr	r2, [pc, #132]	@ (800b930 <LmHandlerInit+0xa0>)
 800b8aa:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800b8ac:	4b1e      	ldr	r3, [pc, #120]	@ (800b928 <LmHandlerInit+0x98>)
 800b8ae:	4a21      	ldr	r2, [pc, #132]	@ (800b934 <LmHandlerInit+0xa4>)
 800b8b0:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800b8b2:	4b1d      	ldr	r3, [pc, #116]	@ (800b928 <LmHandlerInit+0x98>)
 800b8b4:	4a20      	ldr	r2, [pc, #128]	@ (800b938 <LmHandlerInit+0xa8>)
 800b8b6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800b8b8:	4b1a      	ldr	r3, [pc, #104]	@ (800b924 <LmHandlerInit+0x94>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a1f      	ldr	r2, [pc, #124]	@ (800b93c <LmHandlerInit+0xac>)
 800b8c0:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800b8c2:	4b18      	ldr	r3, [pc, #96]	@ (800b924 <LmHandlerInit+0x94>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	4a1c      	ldr	r2, [pc, #112]	@ (800b93c <LmHandlerInit+0xac>)
 800b8ca:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800b8cc:	4b15      	ldr	r3, [pc, #84]	@ (800b924 <LmHandlerInit+0x94>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	4a1a      	ldr	r2, [pc, #104]	@ (800b93c <LmHandlerInit+0xac>)
 800b8d4:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800b8d6:	4b13      	ldr	r3, [pc, #76]	@ (800b924 <LmHandlerInit+0x94>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	4a17      	ldr	r2, [pc, #92]	@ (800b93c <LmHandlerInit+0xac>)
 800b8de:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800b8e0:	4b16      	ldr	r3, [pc, #88]	@ (800b93c <LmHandlerInit+0xac>)
 800b8e2:	4a17      	ldr	r2, [pc, #92]	@ (800b940 <LmHandlerInit+0xb0>)
 800b8e4:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800b8e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b924 <LmHandlerInit+0x94>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	4a13      	ldr	r2, [pc, #76]	@ (800b93c <LmHandlerInit+0xac>)
 800b8ee:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800b8f0:	4914      	ldr	r1, [pc, #80]	@ (800b944 <LmHandlerInit+0xb4>)
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	f000 fd3a 	bl	800c36c <LmHandlerPackageRegister>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800b8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b902:	e00a      	b.n	800b91a <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800b904:	463b      	mov	r3, r7
 800b906:	4618      	mov	r0, r3
 800b908:	f001 fa02 	bl	800cd10 <LmhpPackagesRegistrationInit>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d002      	beq.n	800b918 <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800b912:	f04f 33ff 	mov.w	r3, #4294967295
 800b916:	e000      	b.n	800b91a <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	20000414 	.word	0x20000414
 800b928:	20000418 	.word	0x20000418
 800b92c:	0800c031 	.word	0x0800c031
 800b930:	0800c0a5 	.word	0x0800c0a5
 800b934:	0800c185 	.word	0x0800c185
 800b938:	0800c2d9 	.word	0x0800c2d9
 800b93c:	20000428 	.word	0x20000428
 800b940:	0800c6e5 	.word	0x0800c6e5
 800b944:	20000074 	.word	0x20000074

0800b948 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b090      	sub	sp, #64	@ 0x40
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800b950:	2218      	movs	r2, #24
 800b952:	6879      	ldr	r1, [r7, #4]
 800b954:	4853      	ldr	r0, [pc, #332]	@ (800baa4 <LmHandlerConfigure+0x15c>)
 800b956:	f00b fec2 	bl	80176de <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800b95a:	f7fe fa8b 	bl	8009e74 <LoraInfo_GetPtr>
 800b95e:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800b960:	4b50      	ldr	r3, [pc, #320]	@ (800baa4 <LmHandlerConfigure+0x15c>)
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	461a      	mov	r2, r3
 800b966:	2301      	movs	r3, #1
 800b968:	4093      	lsls	r3, r2
 800b96a:	461a      	mov	r2, r3
 800b96c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	4013      	ands	r3, r2
 800b972:	2b00      	cmp	r3, #0
 800b974:	d107      	bne.n	800b986 <LmHandlerConfigure+0x3e>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800b976:	4b4c      	ldr	r3, [pc, #304]	@ (800baa8 <LmHandlerConfigure+0x160>)
 800b978:	2201      	movs	r2, #1
 800b97a:	2100      	movs	r1, #0
 800b97c:	2000      	movs	r0, #0
 800b97e:	f010 fa4f 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800b982:	bf00      	nop
 800b984:	e7fd      	b.n	800b982 <LmHandlerConfigure+0x3a>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800b986:	4b47      	ldr	r3, [pc, #284]	@ (800baa4 <LmHandlerConfigure+0x15c>)
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	461a      	mov	r2, r3
 800b98c:	4947      	ldr	r1, [pc, #284]	@ (800baac <LmHandlerConfigure+0x164>)
 800b98e:	4848      	ldr	r0, [pc, #288]	@ (800bab0 <LmHandlerConfigure+0x168>)
 800b990:	f004 fba2 	bl	80100d8 <LoRaMacInitialization>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d002      	beq.n	800b9a0 <LmHandlerConfigure+0x58>
    {
        return LORAMAC_HANDLER_ERROR;
 800b99a:	f04f 33ff 	mov.w	r3, #4294967295
 800b99e:	e07c      	b.n	800ba9a <LmHandlerConfigure+0x152>
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800b9a0:	2305      	movs	r3, #5
 800b9a2:	753b      	strb	r3, [r7, #20]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	61bb      	str	r3, [r7, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800b9a8:	f107 0314 	add.w	r3, r7, #20
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f005 f8e1 	bl	8010b74 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800b9b2:	4b3e      	ldr	r3, [pc, #248]	@ (800baac <LmHandlerConfigure+0x164>)
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	4a3d      	ldr	r2, [pc, #244]	@ (800baac <LmHandlerConfigure+0x164>)
 800b9b8:	68d2      	ldr	r2, [r2, #12]
 800b9ba:	4611      	mov	r1, r2
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7ff fc29 	bl	800b214 <SecureElementInitMcuID>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <LmHandlerConfigure+0x86>
    {
        return LORAMAC_HANDLER_ERROR;
 800b9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9cc:	e065      	b.n	800ba9a <LmHandlerConfigure+0x152>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800b9ce:	2306      	movs	r3, #6
 800b9d0:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b9d2:	f107 0314 	add.w	r3, r7, #20
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f004 ff16 	bl	8010808 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	4a35      	ldr	r2, [pc, #212]	@ (800bab4 <LmHandlerConfigure+0x16c>)
 800b9e0:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b9e2:	f107 0314 	add.w	r3, r7, #20
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f005 f8c4 	bl	8010b74 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800b9ec:	2302      	movs	r3, #2
 800b9ee:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800b9f0:	4b30      	ldr	r3, [pc, #192]	@ (800bab4 <LmHandlerConfigure+0x16c>)
 800b9f2:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b9f4:	f107 0314 	add.w	r3, r7, #20
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f004 ff05 	bl	8010808 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800b9fe:	2303      	movs	r3, #3
 800ba00:	753b      	strb	r3, [r7, #20]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800ba02:	4b2d      	ldr	r3, [pc, #180]	@ (800bab8 <LmHandlerConfigure+0x170>)
 800ba04:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ba06:	f107 0314 	add.w	r3, r7, #20
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f004 fefc 	bl	8010808 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800ba10:	f7ff fc80 	bl	800b314 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800ba14:	230f      	movs	r3, #15
 800ba16:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ba1c:	f107 0314 	add.w	r3, r7, #20
 800ba20:	4618      	mov	r0, r3
 800ba22:	f005 f8a7 	bl	8010b74 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800ba26:	2310      	movs	r3, #16
 800ba28:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ba2e:	f107 0314 	add.w	r3, r7, #20
 800ba32:	4618      	mov	r0, r3
 800ba34:	f005 f89e 	bl	8010b74 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800ba38:	2304      	movs	r3, #4
 800ba3a:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800ba3c:	4b19      	ldr	r3, [pc, #100]	@ (800baa4 <LmHandlerConfigure+0x15c>)
 800ba3e:	789b      	ldrb	r3, [r3, #2]
 800ba40:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ba42:	f107 0314 	add.w	r3, r7, #20
 800ba46:	4618      	mov	r0, r3
 800ba48:	f005 f894 	bl	8010b74 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800ba4c:	2339      	movs	r3, #57	@ 0x39
 800ba4e:	753b      	strb	r3, [r7, #20]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800ba50:	4b14      	ldr	r3, [pc, #80]	@ (800baa4 <LmHandlerConfigure+0x15c>)
 800ba52:	695b      	ldr	r3, [r3, #20]
 800ba54:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ba56:	f107 0314 	add.w	r3, r7, #20
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f005 f88a 	bl	8010b74 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800ba60:	230f      	movs	r3, #15
 800ba62:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800ba64:	4b0f      	ldr	r3, [pc, #60]	@ (800baa4 <LmHandlerConfigure+0x15c>)
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	f107 020c 	add.w	r2, r7, #12
 800ba6c:	4611      	mov	r1, r2
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f007 ff62 	bl	8013938 <RegionGetPhyParam>
 800ba74:	4603      	mov	r3, r0
 800ba76:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	bf14      	ite	ne
 800ba7e:	2301      	movne	r3, #1
 800ba80:	2300      	moveq	r3, #0
 800ba82:	b2da      	uxtb	r2, r3
 800ba84:	4b07      	ldr	r3, [pc, #28]	@ (800baa4 <LmHandlerConfigure+0x15c>)
 800ba86:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800ba88:	2014      	movs	r0, #20
 800ba8a:	f000 fab9 	bl	800c000 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800ba8e:	4b05      	ldr	r3, [pc, #20]	@ (800baa4 <LmHandlerConfigure+0x15c>)
 800ba90:	79db      	ldrb	r3, [r3, #7]
 800ba92:	4618      	mov	r0, r3
 800ba94:	f005 fe4a 	bl	801172c <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3740      	adds	r7, #64	@ 0x40
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	200003fc 	.word	0x200003fc
 800baa8:	0801d0bc 	.word	0x0801d0bc
 800baac:	20000428 	.word	0x20000428
 800bab0:	20000418 	.word	0x20000418
 800bab4:	200003d0 	.word	0x200003d0
 800bab8:	200003d8 	.word	0x200003d8

0800babc <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800bac0:	f002 fb06 	bl	800e0d0 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800bac4:	f000 fd90 	bl	800c5e8 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800bac8:	f000 fd60 	bl	800c58c <LmHandlerPackageIsTxPending>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800bad0:	bd80      	pop	{r7, pc}
	...

0800bad4 <LmHandlerJoin>:
{
    return DutyCycleWaitTime;
}

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b092      	sub	sp, #72	@ 0x48
 800bad8:	af00      	add	r7, sp, #0
 800bada:	4603      	mov	r3, r0
 800badc:	460a      	mov	r2, r1
 800bade:	71fb      	strb	r3, [r7, #7]
 800bae0:	4613      	mov	r3, r2
 800bae2:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800bae4:	2301      	movs	r3, #1
 800bae6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800baea:	4b47      	ldr	r3, [pc, #284]	@ (800bc08 <LmHandlerJoin+0x134>)
 800baec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800baf6:	4b44      	ldr	r3, [pc, #272]	@ (800bc08 <LmHandlerJoin+0x134>)
 800baf8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800bafc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800bb00:	79fb      	ldrb	r3, [r7, #7]
 800bb02:	2b02      	cmp	r3, #2
 800bb04:	d110      	bne.n	800bb28 <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800bb06:	2302      	movs	r3, #2
 800bb08:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800bb0c:	4b3f      	ldr	r3, [pc, #252]	@ (800bc0c <LmHandlerJoin+0x138>)
 800bb0e:	2202      	movs	r2, #2
 800bb10:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800bb12:	4a3e      	ldr	r2, [pc, #248]	@ (800bc0c <LmHandlerJoin+0x138>)
 800bb14:	79bb      	ldrb	r3, [r7, #6]
 800bb16:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800bb18:	f004 fd90 	bl	801063c <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800bb1c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800bb20:	4618      	mov	r0, r3
 800bb22:	f005 fbbb 	bl	801129c <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800bb26:	e06b      	b.n	800bc00 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800bb2e:	4b37      	ldr	r3, [pc, #220]	@ (800bc0c <LmHandlerJoin+0x138>)
 800bb30:	2201      	movs	r2, #1
 800bb32:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800bb34:	4b34      	ldr	r3, [pc, #208]	@ (800bc08 <LmHandlerJoin+0x134>)
 800bb36:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800bb3a:	4b34      	ldr	r3, [pc, #208]	@ (800bc0c <LmHandlerJoin+0x138>)
 800bb3c:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800bb3e:	4b32      	ldr	r3, [pc, #200]	@ (800bc08 <LmHandlerJoin+0x134>)
 800bb40:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800bb44:	4b31      	ldr	r3, [pc, #196]	@ (800bc0c <LmHandlerJoin+0x138>)
 800bb46:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800bb48:	4b30      	ldr	r3, [pc, #192]	@ (800bc0c <LmHandlerJoin+0x138>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800bb4e:	4a2f      	ldr	r2, [pc, #188]	@ (800bc0c <LmHandlerJoin+0x138>)
 800bb50:	79bb      	ldrb	r3, [r7, #6]
 800bb52:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800bb54:	4b2e      	ldr	r3, [pc, #184]	@ (800bc10 <LmHandlerJoin+0x13c>)
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	f083 0301 	eor.w	r3, r3, #1
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d034      	beq.n	800bbcc <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800bb62:	231e      	movs	r3, #30
 800bb64:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800bb66:	4b28      	ldr	r3, [pc, #160]	@ (800bc08 <LmHandlerJoin+0x134>)
 800bb68:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bb6c:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800bb6e:	f107 030c 	add.w	r3, r7, #12
 800bb72:	4618      	mov	r0, r3
 800bb74:	f004 fffe 	bl	8010b74 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800bb78:	231f      	movs	r3, #31
 800bb7a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800bb7c:	4b22      	ldr	r3, [pc, #136]	@ (800bc08 <LmHandlerJoin+0x134>)
 800bb7e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bb82:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800bb84:	f107 030c 	add.w	r3, r7, #12
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f004 fff3 	bl	8010b74 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800bb8e:	2321      	movs	r3, #33	@ 0x21
 800bb90:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800bb92:	4b1d      	ldr	r3, [pc, #116]	@ (800bc08 <LmHandlerJoin+0x134>)
 800bb94:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800bb98:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800bb9a:	f107 030c 	add.w	r3, r7, #12
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f004 ffe8 	bl	8010b74 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800bba4:	2320      	movs	r3, #32
 800bba6:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800bba8:	4b17      	ldr	r3, [pc, #92]	@ (800bc08 <LmHandlerJoin+0x134>)
 800bbaa:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800bbae:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800bbb0:	f107 030c 	add.w	r3, r7, #12
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f004 ffdd 	bl	8010b74 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800bbba:	2328      	movs	r3, #40	@ 0x28
 800bbbc:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800bbbe:	4b15      	ldr	r3, [pc, #84]	@ (800bc14 <LmHandlerJoin+0x140>)
 800bbc0:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800bbc2:	f107 030c 	add.w	r3, r7, #12
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f004 ffd4 	bl	8010b74 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800bbcc:	f004 fd36 	bl	801063c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800bbd8:	f107 030c 	add.w	r3, r7, #12
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f004 ffc9 	bl	8010b74 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800bbe2:	4b0d      	ldr	r3, [pc, #52]	@ (800bc18 <LmHandlerJoin+0x144>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d004      	beq.n	800bbf6 <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800bbec:	4b0a      	ldr	r3, [pc, #40]	@ (800bc18 <LmHandlerJoin+0x144>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbf2:	4806      	ldr	r0, [pc, #24]	@ (800bc0c <LmHandlerJoin+0x138>)
 800bbf4:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800bbf6:	4b04      	ldr	r3, [pc, #16]	@ (800bc08 <LmHandlerJoin+0x134>)
 800bbf8:	785b      	ldrb	r3, [r3, #1]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f000 f930 	bl	800be60 <LmHandlerRequestClass>
}
 800bc00:	bf00      	nop
 800bc02:	3748      	adds	r7, #72	@ 0x48
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	200003fc 	.word	0x200003fc
 800bc0c:	20000080 	.word	0x20000080
 800bc10:	20000536 	.word	0x20000536
 800bc14:	01000300 	.word	0x01000300
 800bc18:	20000414 	.word	0x20000414

0800bc1c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b08c      	sub	sp, #48	@ 0x30
 800bc20:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800bc22:	2301      	movs	r3, #1
 800bc24:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800bc26:	1d3b      	adds	r3, r7, #4
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f004 fded 	bl	8010808 <LoRaMacMibGetRequestConfirm>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800bc34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d106      	bne.n	800bc4a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800bc3c:	7a3b      	ldrb	r3, [r7, #8]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d101      	bne.n	800bc46 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800bc42:	2300      	movs	r3, #0
 800bc44:	e002      	b.n	800bc4c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800bc46:	2301      	movs	r3, #1
 800bc48:	e000      	b.n	800bc4c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800bc4a:	2300      	movs	r3, #0
    }
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3730      	adds	r7, #48	@ 0x30
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b08a      	sub	sp, #40	@ 0x28
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	70fb      	strb	r3, [r7, #3]
 800bc60:	4613      	mov	r3, r2
 800bc62:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800bc64:	23ff      	movs	r3, #255	@ 0xff
 800bc66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800bc6a:	f001 ffbd 	bl	800dbe8 <LoRaMacIsBusy>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d002      	beq.n	800bc7a <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800bc74:	f06f 0301 	mvn.w	r3, #1
 800bc78:	e0bc      	b.n	800bdf4 <LmHandlerSend+0x1a0>
    }

    if( LoRaMacIsStopped() == true )
 800bc7a:	f001 ffd1 	bl	800dc20 <LoRaMacIsStopped>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d002      	beq.n	800bc8a <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800bc84:	f06f 0302 	mvn.w	r3, #2
 800bc88:	e0b4      	b.n	800bdf4 <LmHandlerSend+0x1a0>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800bc8a:	f7ff ffc7 	bl	800bc1c <LmHandlerJoinStatus>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d00a      	beq.n	800bcaa <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800bc94:	4b59      	ldr	r3, [pc, #356]	@ (800bdfc <LmHandlerSend+0x1a8>)
 800bc96:	79db      	ldrb	r3, [r3, #7]
 800bc98:	4a58      	ldr	r2, [pc, #352]	@ (800bdfc <LmHandlerSend+0x1a8>)
 800bc9a:	7a12      	ldrb	r2, [r2, #8]
 800bc9c:	4611      	mov	r1, r2
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7ff ff18 	bl	800bad4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800bca4:	f06f 0302 	mvn.w	r3, #2
 800bca8:	e0a4      	b.n	800bdf4 <LmHandlerSend+0x1a0>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800bcaa:	4b55      	ldr	r3, [pc, #340]	@ (800be00 <LmHandlerSend+0x1ac>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	4798      	blx	r3
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00d      	beq.n	800bcd4 <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	781a      	ldrb	r2, [r3, #0]
 800bcbc:	4b50      	ldr	r3, [pc, #320]	@ (800be00 <LmHandlerSend+0x1ac>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d006      	beq.n	800bcd4 <LmHandlerSend+0x80>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d002      	beq.n	800bcd4 <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800bcce:	f06f 0303 	mvn.w	r3, #3
 800bcd2:	e08f      	b.n	800bdf4 <LmHandlerSend+0x1a0>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800bcd4:	4a4b      	ldr	r2, [pc, #300]	@ (800be04 <LmHandlerSend+0x1b0>)
 800bcd6:	78fb      	ldrb	r3, [r7, #3]
 800bcd8:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800bcda:	78fb      	ldrb	r3, [r7, #3]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	bf14      	ite	ne
 800bce0:	2301      	movne	r3, #1
 800bce2:	2300      	moveq	r3, #0
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800bce8:	4b47      	ldr	r3, [pc, #284]	@ (800be08 <LmHandlerSend+0x1b4>)
 800bcea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bcee:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	785b      	ldrb	r3, [r3, #1]
 800bcf4:	f107 020c 	add.w	r2, r7, #12
 800bcf8:	4611      	mov	r1, r2
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f004 fcfe 	bl	80106fc <LoRaMacQueryTxPossible>
 800bd00:	4603      	mov	r3, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d009      	beq.n	800bd1a <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800bd06:	2300      	movs	r3, #0
 800bd08:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800bd12:	23f9      	movs	r3, #249	@ 0xf9
 800bd14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bd18:	e008      	b.n	800bd2c <LmHandlerSend+0xd8>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	785b      	ldrb	r3, [r3, #1]
 800bd24:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800bd2c:	4b35      	ldr	r3, [pc, #212]	@ (800be04 <LmHandlerSend+0x1b0>)
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	3310      	adds	r3, #16
 800bd32:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd36:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800bd3a:	4b33      	ldr	r3, [pc, #204]	@ (800be08 <LmHandlerSend+0x1b4>)
 800bd3c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800bd40:	4b30      	ldr	r3, [pc, #192]	@ (800be04 <LmHandlerSend+0x1b0>)
 800bd42:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800bd44:	78ba      	ldrb	r2, [r7, #2]
 800bd46:	f107 0310 	add.w	r3, r7, #16
 800bd4a:	4611      	mov	r1, r2
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f005 fbf7 	bl	8011540 <LoRaMacMcpsRequest>
 800bd52:	4603      	mov	r3, r0
 800bd54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800bd58:	6a3b      	ldr	r3, [r7, #32]
 800bd5a:	4a2c      	ldr	r2, [pc, #176]	@ (800be0c <LmHandlerSend+0x1b8>)
 800bd5c:	6013      	str	r3, [r2, #0]

    switch( status )
 800bd5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bd62:	2b11      	cmp	r3, #17
 800bd64:	d83f      	bhi.n	800bde6 <LmHandlerSend+0x192>
 800bd66:	a201      	add	r2, pc, #4	@ (adr r2, 800bd6c <LmHandlerSend+0x118>)
 800bd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd6c:	0800bdb5 	.word	0x0800bdb5
 800bd70:	0800bdc7 	.word	0x0800bdc7
 800bd74:	0800bde7 	.word	0x0800bde7
 800bd78:	0800bde7 	.word	0x0800bde7
 800bd7c:	0800bde7 	.word	0x0800bde7
 800bd80:	0800bde7 	.word	0x0800bde7
 800bd84:	0800bde7 	.word	0x0800bde7
 800bd88:	0800bdcf 	.word	0x0800bdcf
 800bd8c:	0800bde7 	.word	0x0800bde7
 800bd90:	0800bde7 	.word	0x0800bde7
 800bd94:	0800bde7 	.word	0x0800bde7
 800bd98:	0800bddf 	.word	0x0800bddf
 800bd9c:	0800bde7 	.word	0x0800bde7
 800bda0:	0800bde7 	.word	0x0800bde7
 800bda4:	0800bdc7 	.word	0x0800bdc7
 800bda8:	0800bdc7 	.word	0x0800bdc7
 800bdac:	0800bdc7 	.word	0x0800bdc7
 800bdb0:	0800bdd7 	.word	0x0800bdd7
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800bdb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bdb8:	f113 0f07 	cmn.w	r3, #7
 800bdbc:	d017      	beq.n	800bdee <LmHandlerSend+0x19a>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800bdc4:	e013      	b.n	800bdee <LmHandlerSend+0x19a>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800bdc6:	23fe      	movs	r3, #254	@ 0xfe
 800bdc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bdcc:	e010      	b.n	800bdf0 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800bdce:	23fd      	movs	r3, #253	@ 0xfd
 800bdd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bdd4:	e00c      	b.n	800bdf0 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800bdd6:	23fb      	movs	r3, #251	@ 0xfb
 800bdd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bddc:	e008      	b.n	800bdf0 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800bdde:	23fa      	movs	r3, #250	@ 0xfa
 800bde0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bde4:	e004      	b.n	800bdf0 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800bde6:	23ff      	movs	r3, #255	@ 0xff
 800bde8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bdec:	e000      	b.n	800bdf0 <LmHandlerSend+0x19c>
            break;
 800bdee:	bf00      	nop
    }

    return lmhStatus;
 800bdf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3728      	adds	r7, #40	@ 0x28
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	20000080 	.word	0x20000080
 800be00:	200003e8 	.word	0x200003e8
 800be04:	2000008c 	.word	0x2000008c
 800be08:	200003fc 	.word	0x200003fc
 800be0c:	20000440 	.word	0x20000440

0800be10 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800be16:	230a      	movs	r3, #10
 800be18:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800be1a:	463b      	mov	r3, r7
 800be1c:	4618      	mov	r0, r3
 800be1e:	f005 fa3d 	bl	801129c <LoRaMacMlmeRequest>
 800be22:	4603      	mov	r3, r0
 800be24:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	4a06      	ldr	r2, [pc, #24]	@ (800be44 <LmHandlerDeviceTimeReq+0x34>)
 800be2a:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800be2c:	7dfb      	ldrb	r3, [r7, #23]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d101      	bne.n	800be36 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800be32:	2300      	movs	r3, #0
 800be34:	e001      	b.n	800be3a <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800be36:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3718      	adds	r7, #24
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	20000440 	.word	0x20000440

0800be48 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	4603      	mov	r3, r0
 800be50:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800be52:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800be56:	4618      	mov	r0, r3
 800be58:	370c      	adds	r7, #12
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bc80      	pop	{r7}
 800be5e:	4770      	bx	lr

0800be60 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b08e      	sub	sp, #56	@ 0x38
 800be64:	af00      	add	r7, sp, #0
 800be66:	4603      	mov	r3, r0
 800be68:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800be6a:	2300      	movs	r3, #0
 800be6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800be70:	f001 feba 	bl	800dbe8 <LoRaMacIsBusy>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d002      	beq.n	800be80 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800be7a:	f06f 0301 	mvn.w	r3, #1
 800be7e:	e071      	b.n	800bf64 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800be80:	f7ff fecc 	bl	800bc1c <LmHandlerJoinStatus>
 800be84:	4603      	mov	r3, r0
 800be86:	2b01      	cmp	r3, #1
 800be88:	d002      	beq.n	800be90 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800be8a:	f06f 0302 	mvn.w	r3, #2
 800be8e:	e069      	b.n	800bf64 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800be90:	2300      	movs	r3, #0
 800be92:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800be94:	f107 030c 	add.w	r3, r7, #12
 800be98:	4618      	mov	r0, r3
 800be9a:	f004 fcb5 	bl	8010808 <LoRaMacMibGetRequestConfirm>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d002      	beq.n	800beaa <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800bea4:	f04f 33ff 	mov.w	r3, #4294967295
 800bea8:	e05c      	b.n	800bf64 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800beaa:	7c3b      	ldrb	r3, [r7, #16]
 800beac:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800beb0:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800beb4:	79fb      	ldrb	r3, [r7, #7]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d052      	beq.n	800bf60 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800beba:	79fb      	ldrb	r3, [r7, #7]
 800bebc:	2b02      	cmp	r3, #2
 800bebe:	d028      	beq.n	800bf12 <LmHandlerRequestClass+0xb2>
 800bec0:	2b02      	cmp	r3, #2
 800bec2:	dc48      	bgt.n	800bf56 <LmHandlerRequestClass+0xf6>
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d002      	beq.n	800bece <LmHandlerRequestClass+0x6e>
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d01e      	beq.n	800bf0a <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800becc:	e043      	b.n	800bf56 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800bece:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d041      	beq.n	800bf5a <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800bed6:	79fb      	ldrb	r3, [r7, #7]
 800bed8:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800beda:	f107 030c 	add.w	r3, r7, #12
 800bede:	4618      	mov	r0, r3
 800bee0:	f004 fe48 	bl	8010b74 <LoRaMacMibSetRequestConfirm>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d10b      	bne.n	800bf02 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800beea:	4b20      	ldr	r3, [pc, #128]	@ (800bf6c <LmHandlerRequestClass+0x10c>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d032      	beq.n	800bf5a <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800bef4:	4b1d      	ldr	r3, [pc, #116]	@ (800bf6c <LmHandlerRequestClass+0x10c>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800befa:	79fa      	ldrb	r2, [r7, #7]
 800befc:	4610      	mov	r0, r2
 800befe:	4798      	blx	r3
                break;
 800bf00:	e02b      	b.n	800bf5a <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800bf02:	23ff      	movs	r3, #255	@ 0xff
 800bf04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800bf08:	e027      	b.n	800bf5a <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800bf0a:	23ff      	movs	r3, #255	@ 0xff
 800bf0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800bf10:	e026      	b.n	800bf60 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800bf12:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d003      	beq.n	800bf22 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800bf1a:	23ff      	movs	r3, #255	@ 0xff
 800bf1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800bf20:	e01d      	b.n	800bf5e <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800bf22:	79fb      	ldrb	r3, [r7, #7]
 800bf24:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800bf26:	f107 030c 	add.w	r3, r7, #12
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f004 fe22 	bl	8010b74 <LoRaMacMibSetRequestConfirm>
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d10b      	bne.n	800bf4e <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800bf36:	4b0d      	ldr	r3, [pc, #52]	@ (800bf6c <LmHandlerRequestClass+0x10c>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d00e      	beq.n	800bf5e <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800bf40:	4b0a      	ldr	r3, [pc, #40]	@ (800bf6c <LmHandlerRequestClass+0x10c>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf46:	79fa      	ldrb	r2, [r7, #7]
 800bf48:	4610      	mov	r0, r2
 800bf4a:	4798      	blx	r3
                break;
 800bf4c:	e007      	b.n	800bf5e <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800bf4e:	23ff      	movs	r3, #255	@ 0xff
 800bf50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800bf54:	e003      	b.n	800bf5e <LmHandlerRequestClass+0xfe>
                break;
 800bf56:	bf00      	nop
 800bf58:	e002      	b.n	800bf60 <LmHandlerRequestClass+0x100>
                break;
 800bf5a:	bf00      	nop
 800bf5c:	e000      	b.n	800bf60 <LmHandlerRequestClass+0x100>
                break;
 800bf5e:	bf00      	nop
        }
    }
    return errorStatus;
 800bf60:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3738      	adds	r7, #56	@ 0x38
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	20000414 	.word	0x20000414

0800bf70 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b08c      	sub	sp, #48	@ 0x30
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d102      	bne.n	800bf84 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800bf7e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf82:	e010      	b.n	800bfa6 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800bf84:	2300      	movs	r3, #0
 800bf86:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800bf88:	f107 0308 	add.w	r3, r7, #8
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f004 fc3b 	bl	8010808 <LoRaMacMibGetRequestConfirm>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d002      	beq.n	800bf9e <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800bf98:	f04f 33ff 	mov.w	r3, #4294967295
 800bf9c:	e003      	b.n	800bfa6 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800bf9e:	7b3a      	ldrb	r2, [r7, #12]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800bfa4:	2300      	movs	r3, #0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3730      	adds	r7, #48	@ 0x30
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
	...

0800bfb0 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b08c      	sub	sp, #48	@ 0x30
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d102      	bne.n	800bfc4 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800bfbe:	f04f 33ff 	mov.w	r3, #4294967295
 800bfc2:	e016      	b.n	800bff2 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800bfc4:	231f      	movs	r3, #31
 800bfc6:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800bfc8:	f107 0308 	add.w	r3, r7, #8
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f004 fc1b 	bl	8010808 <LoRaMacMibGetRequestConfirm>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d002      	beq.n	800bfde <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800bfd8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfdc:	e009      	b.n	800bff2 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800bfde:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f993 2000 	ldrsb.w	r2, [r3]
 800bfec:	4b03      	ldr	r3, [pc, #12]	@ (800bffc <LmHandlerGetTxDatarate+0x4c>)
 800bfee:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800bff0:	2300      	movs	r3, #0
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3730      	adds	r7, #48	@ 0x30
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	200003fc 	.word	0x200003fc

0800c000 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b08c      	sub	sp, #48	@ 0x30
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c008:	2322      	movs	r3, #34	@ 0x22
 800c00a:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c010:	f107 0308 	add.w	r3, r7, #8
 800c014:	4618      	mov	r0, r3
 800c016:	f004 fdad 	bl	8010b74 <LoRaMacMibSetRequestConfirm>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d002      	beq.n	800c026 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c020:	f04f 33ff 	mov.w	r3, #4294967295
 800c024:	e000      	b.n	800c028 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c026:	2300      	movs	r3, #0
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3730      	adds	r7, #48	@ 0x30
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c038:	4b18      	ldr	r3, [pc, #96]	@ (800c09c <McpsConfirm+0x6c>)
 800c03a:	2201      	movs	r2, #1
 800c03c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	785a      	ldrb	r2, [r3, #1]
 800c042:	4b16      	ldr	r3, [pc, #88]	@ (800c09c <McpsConfirm+0x6c>)
 800c044:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	789b      	ldrb	r3, [r3, #2]
 800c04a:	b25a      	sxtb	r2, r3
 800c04c:	4b13      	ldr	r3, [pc, #76]	@ (800c09c <McpsConfirm+0x6c>)
 800c04e:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	4a11      	ldr	r2, [pc, #68]	@ (800c09c <McpsConfirm+0x6c>)
 800c056:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c05e:	4b0f      	ldr	r3, [pc, #60]	@ (800c09c <McpsConfirm+0x6c>)
 800c060:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	691b      	ldr	r3, [r3, #16]
 800c066:	b2da      	uxtb	r2, r3
 800c068:	4b0c      	ldr	r3, [pc, #48]	@ (800c09c <McpsConfirm+0x6c>)
 800c06a:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	791b      	ldrb	r3, [r3, #4]
 800c070:	461a      	mov	r2, r3
 800c072:	4b0a      	ldr	r3, [pc, #40]	@ (800c09c <McpsConfirm+0x6c>)
 800c074:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800c076:	4b0a      	ldr	r3, [pc, #40]	@ (800c0a0 <McpsConfirm+0x70>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d004      	beq.n	800c08a <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800c080:	4b07      	ldr	r3, [pc, #28]	@ (800c0a0 <McpsConfirm+0x70>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c086:	4805      	ldr	r0, [pc, #20]	@ (800c09c <McpsConfirm+0x6c>)
 800c088:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800c08a:	6879      	ldr	r1, [r7, #4]
 800c08c:	2000      	movs	r0, #0
 800c08e:	f000 f9eb 	bl	800c468 <LmHandlerPackagesNotify>
}
 800c092:	bf00      	nop
 800c094:	3708      	adds	r7, #8
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	2000008c 	.word	0x2000008c
 800c0a0:	20000414 	.word	0x20000414

0800c0a4 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b088      	sub	sp, #32
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800c0b2:	4b32      	ldr	r3, [pc, #200]	@ (800c17c <McpsIndication+0xd8>)
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	785a      	ldrb	r2, [r3, #1]
 800c0bc:	4b2f      	ldr	r3, [pc, #188]	@ (800c17c <McpsIndication+0xd8>)
 800c0be:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c0c0:	4b2e      	ldr	r3, [pc, #184]	@ (800c17c <McpsIndication+0xd8>)
 800c0c2:	785b      	ldrb	r3, [r3, #1]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d155      	bne.n	800c174 <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	791b      	ldrb	r3, [r3, #4]
 800c0cc:	b25a      	sxtb	r2, r3
 800c0ce:	4b2b      	ldr	r3, [pc, #172]	@ (800c17c <McpsIndication+0xd8>)
 800c0d0:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0d8:	b25a      	sxtb	r2, r3
 800c0da:	4b28      	ldr	r3, [pc, #160]	@ (800c17c <McpsIndication+0xd8>)
 800c0dc:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c0e4:	4b25      	ldr	r3, [pc, #148]	@ (800c17c <McpsIndication+0xd8>)
 800c0e6:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	78da      	ldrb	r2, [r3, #3]
 800c0ec:	4b23      	ldr	r3, [pc, #140]	@ (800c17c <McpsIndication+0xd8>)
 800c0ee:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	691b      	ldr	r3, [r3, #16]
 800c0f4:	4a21      	ldr	r2, [pc, #132]	@ (800c17c <McpsIndication+0xd8>)
 800c0f6:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	78db      	ldrb	r3, [r3, #3]
 800c0fc:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	7b1b      	ldrb	r3, [r3, #12]
 800c102:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800c10a:	4b1d      	ldr	r3, [pc, #116]	@ (800c180 <McpsIndication+0xdc>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c110:	2b00      	cmp	r3, #0
 800c112:	d007      	beq.n	800c124 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800c114:	4b1a      	ldr	r3, [pc, #104]	@ (800c180 <McpsIndication+0xdc>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c11a:	f107 0218 	add.w	r2, r7, #24
 800c11e:	4917      	ldr	r1, [pc, #92]	@ (800c17c <McpsIndication+0xd8>)
 800c120:	4610      	mov	r0, r2
 800c122:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800c124:	4b16      	ldr	r3, [pc, #88]	@ (800c180 <McpsIndication+0xdc>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d007      	beq.n	800c13e <McpsIndication+0x9a>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	7e1b      	ldrb	r3, [r3, #24]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800c136:	4b12      	ldr	r3, [pc, #72]	@ (800c180 <McpsIndication+0xdc>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c13c:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800c13e:	6879      	ldr	r1, [r7, #4]
 800c140:	2001      	movs	r0, #1
 800c142:	f000 f991 	bl	800c468 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800c146:	f107 0317 	add.w	r3, r7, #23
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7ff ff10 	bl	800bf70 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	795b      	ldrb	r3, [r3, #5]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d00e      	beq.n	800c176 <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 800c158:	2300      	movs	r3, #0
 800c15a:	733b      	strb	r3, [r7, #12]
 800c15c:	2300      	movs	r3, #0
 800c15e:	737b      	strb	r3, [r7, #13]
 800c160:	2300      	movs	r3, #0
 800c162:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800c164:	f107 030c 	add.w	r3, r7, #12
 800c168:	2201      	movs	r2, #1
 800c16a:	2100      	movs	r1, #0
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7ff fd71 	bl	800bc54 <LmHandlerSend>
 800c172:	e000      	b.n	800c176 <McpsIndication+0xd2>
        return;
 800c174:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800c176:	3720      	adds	r7, #32
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	200000a8 	.word	0x200000a8
 800c180:	20000414 	.word	0x20000414

0800c184 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b08c      	sub	sp, #48	@ 0x30
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800c18c:	4b4a      	ldr	r3, [pc, #296]	@ (800c2b8 <MlmeConfirm+0x134>)
 800c18e:	2200      	movs	r2, #0
 800c190:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	785a      	ldrb	r2, [r3, #1]
 800c196:	4b48      	ldr	r3, [pc, #288]	@ (800c2b8 <MlmeConfirm+0x134>)
 800c198:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800c19a:	4b48      	ldr	r3, [pc, #288]	@ (800c2bc <MlmeConfirm+0x138>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d004      	beq.n	800c1ae <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800c1a4:	4b45      	ldr	r3, [pc, #276]	@ (800c2bc <MlmeConfirm+0x138>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1aa:	4843      	ldr	r0, [pc, #268]	@ (800c2b8 <MlmeConfirm+0x134>)
 800c1ac:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800c1ae:	6879      	ldr	r1, [r7, #4]
 800c1b0:	2002      	movs	r0, #2
 800c1b2:	f000 f959 	bl	800c468 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	2b0c      	cmp	r3, #12
 800c1be:	d874      	bhi.n	800c2aa <MlmeConfirm+0x126>
 800c1c0:	a201      	add	r2, pc, #4	@ (adr r2, 800c1c8 <MlmeConfirm+0x44>)
 800c1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c6:	bf00      	nop
 800c1c8:	0800c1fd 	.word	0x0800c1fd
 800c1cc:	0800c2ab 	.word	0x0800c2ab
 800c1d0:	0800c2ab 	.word	0x0800c2ab
 800c1d4:	0800c2ab 	.word	0x0800c2ab
 800c1d8:	0800c279 	.word	0x0800c279
 800c1dc:	0800c2ab 	.word	0x0800c2ab
 800c1e0:	0800c2ab 	.word	0x0800c2ab
 800c1e4:	0800c2ab 	.word	0x0800c2ab
 800c1e8:	0800c2ab 	.word	0x0800c2ab
 800c1ec:	0800c2ab 	.word	0x0800c2ab
 800c1f0:	0800c2ab 	.word	0x0800c2ab
 800c1f4:	0800c291 	.word	0x0800c291
 800c1f8:	0800c2ab 	.word	0x0800c2ab
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800c1fc:	2306      	movs	r3, #6
 800c1fe:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800c200:	f107 0308 	add.w	r3, r7, #8
 800c204:	4618      	mov	r0, r3
 800c206:	f004 faff 	bl	8010808 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800c20a:	4b2d      	ldr	r3, [pc, #180]	@ (800c2c0 <MlmeConfirm+0x13c>)
 800c20c:	79db      	ldrb	r3, [r3, #7]
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	4611      	mov	r1, r2
 800c212:	4618      	mov	r0, r3
 800c214:	f7ff fb00 	bl	800b818 <SecureElementSetDevAddr>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d102      	bne.n	800c224 <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	4a28      	ldr	r2, [pc, #160]	@ (800c2c4 <MlmeConfirm+0x140>)
 800c222:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800c224:	4828      	ldr	r0, [pc, #160]	@ (800c2c8 <MlmeConfirm+0x144>)
 800c226:	f7ff fec3 	bl	800bfb0 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800c22a:	4828      	ldr	r0, [pc, #160]	@ (800c2cc <MlmeConfirm+0x148>)
 800c22c:	f000 fa2a 	bl	800c684 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c230:	4b21      	ldr	r3, [pc, #132]	@ (800c2b8 <MlmeConfirm+0x134>)
 800c232:	785b      	ldrb	r3, [r3, #1]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d108      	bne.n	800c24a <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c238:	4b21      	ldr	r3, [pc, #132]	@ (800c2c0 <MlmeConfirm+0x13c>)
 800c23a:	2200      	movs	r2, #0
 800c23c:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800c23e:	4b24      	ldr	r3, [pc, #144]	@ (800c2d0 <MlmeConfirm+0x14c>)
 800c240:	785b      	ldrb	r3, [r3, #1]
 800c242:	4618      	mov	r0, r3
 800c244:	f7ff fe0c 	bl	800be60 <LmHandlerRequestClass>
 800c248:	e002      	b.n	800c250 <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800c24a:	4b1d      	ldr	r3, [pc, #116]	@ (800c2c0 <MlmeConfirm+0x13c>)
 800c24c:	22ff      	movs	r2, #255	@ 0xff
 800c24e:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800c250:	4b1a      	ldr	r3, [pc, #104]	@ (800c2bc <MlmeConfirm+0x138>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c256:	2b00      	cmp	r3, #0
 800c258:	d004      	beq.n	800c264 <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c25a:	4b18      	ldr	r3, [pc, #96]	@ (800c2bc <MlmeConfirm+0x138>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c260:	4817      	ldr	r0, [pc, #92]	@ (800c2c0 <MlmeConfirm+0x13c>)
 800c262:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c264:	4b14      	ldr	r3, [pc, #80]	@ (800c2b8 <MlmeConfirm+0x134>)
 800c266:	785b      	ldrb	r3, [r3, #1]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d120      	bne.n	800c2ae <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800c26c:	4b14      	ldr	r3, [pc, #80]	@ (800c2c0 <MlmeConfirm+0x13c>)
 800c26e:	79db      	ldrb	r3, [r3, #7]
 800c270:	4618      	mov	r0, r3
 800c272:	f7ff f863 	bl	800b33c <SecureElementPrintSessionKeys>
                }
            }
            break;
 800c276:	e01a      	b.n	800c2ae <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800c278:	4b16      	ldr	r3, [pc, #88]	@ (800c2d4 <MlmeConfirm+0x150>)
 800c27a:	2201      	movs	r2, #1
 800c27c:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	7a1a      	ldrb	r2, [r3, #8]
 800c282:	4b14      	ldr	r3, [pc, #80]	@ (800c2d4 <MlmeConfirm+0x150>)
 800c284:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	7a5a      	ldrb	r2, [r3, #9]
 800c28a:	4b12      	ldr	r3, [pc, #72]	@ (800c2d4 <MlmeConfirm+0x150>)
 800c28c:	74da      	strb	r2, [r3, #19]
            }
            break;
 800c28e:	e00f      	b.n	800c2b0 <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	785b      	ldrb	r3, [r3, #1]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d105      	bne.n	800c2a4 <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800c298:	4b0d      	ldr	r3, [pc, #52]	@ (800c2d0 <MlmeConfirm+0x14c>)
 800c29a:	7c1b      	ldrb	r3, [r3, #16]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7ff fdd3 	bl	800be48 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800c2a2:	e005      	b.n	800c2b0 <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 800c2a4:	f7ff fdb4 	bl	800be10 <LmHandlerDeviceTimeReq>
            break;
 800c2a8:	e002      	b.n	800c2b0 <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800c2aa:	bf00      	nop
 800c2ac:	e000      	b.n	800c2b0 <MlmeConfirm+0x12c>
            break;
 800c2ae:	bf00      	nop
    }
}
 800c2b0:	bf00      	nop
 800c2b2:	3730      	adds	r7, #48	@ 0x30
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	2000008c 	.word	0x2000008c
 800c2bc:	20000414 	.word	0x20000414
 800c2c0:	20000080 	.word	0x20000080
 800c2c4:	200003d0 	.word	0x200003d0
 800c2c8:	20000084 	.word	0x20000084
 800c2cc:	20000085 	.word	0x20000085
 800c2d0:	200003fc 	.word	0x200003fc
 800c2d4:	200000a8 	.word	0x200000a8

0800c2d8 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800c2e2:	4b20      	ldr	r3, [pc, #128]	@ (800c364 <MlmeIndication+0x8c>)
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	785a      	ldrb	r2, [r3, #1]
 800c2ec:	4b1d      	ldr	r3, [pc, #116]	@ (800c364 <MlmeIndication+0x8c>)
 800c2ee:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	789b      	ldrb	r3, [r3, #2]
 800c2f4:	b25a      	sxtb	r2, r3
 800c2f6:	4b1b      	ldr	r3, [pc, #108]	@ (800c364 <MlmeIndication+0x8c>)
 800c2f8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c300:	b25a      	sxtb	r2, r3
 800c302:	4b18      	ldr	r3, [pc, #96]	@ (800c364 <MlmeIndication+0x8c>)
 800c304:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c30c:	4b15      	ldr	r3, [pc, #84]	@ (800c364 <MlmeIndication+0x8c>)
 800c30e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	78da      	ldrb	r2, [r3, #3]
 800c314:	4b13      	ldr	r3, [pc, #76]	@ (800c364 <MlmeIndication+0x8c>)
 800c316:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	4a11      	ldr	r2, [pc, #68]	@ (800c364 <MlmeIndication+0x8c>)
 800c31e:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800c320:	4b11      	ldr	r3, [pc, #68]	@ (800c368 <MlmeIndication+0x90>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00d      	beq.n	800c346 <MlmeIndication+0x6e>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	2b0b      	cmp	r3, #11
 800c330:	d009      	beq.n	800c346 <MlmeIndication+0x6e>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	2b0f      	cmp	r3, #15
 800c338:	d005      	beq.n	800c346 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800c33a:	4b0b      	ldr	r3, [pc, #44]	@ (800c368 <MlmeIndication+0x90>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c340:	4908      	ldr	r1, [pc, #32]	@ (800c364 <MlmeIndication+0x8c>)
 800c342:	2000      	movs	r0, #0
 800c344:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800c346:	6879      	ldr	r1, [r7, #4]
 800c348:	2003      	movs	r0, #3
 800c34a:	f000 f88d 	bl	800c468 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	2b0b      	cmp	r3, #11
 800c354:	d001      	beq.n	800c35a <MlmeIndication+0x82>
 800c356:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800c358:	e000      	b.n	800c35c <MlmeIndication+0x84>
            break;
 800c35a:	bf00      	nop
    }
}
 800c35c:	bf00      	nop
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	200000a8 	.word	0x200000a8
 800c368:	20000414 	.word	0x20000414

0800c36c <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	4603      	mov	r3, r0
 800c374:	6039      	str	r1, [r7, #0]
 800c376:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800c378:	2300      	movs	r3, #0
 800c37a:	60fb      	str	r3, [r7, #12]
    switch( id )
 800c37c:	79fb      	ldrb	r3, [r7, #7]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d104      	bne.n	800c38c <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800c382:	f000 f9b9 	bl	800c6f8 <LmhpCompliancePackageFactory>
 800c386:	4603      	mov	r3, r0
 800c388:	60fb      	str	r3, [r7, #12]
                break;
 800c38a:	e00d      	b.n	800c3a8 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800c38c:	f107 020c 	add.w	r2, r7, #12
 800c390:	79fb      	ldrb	r3, [r7, #7]
 800c392:	4611      	mov	r1, r2
 800c394:	4618      	mov	r0, r3
 800c396:	f000 fcc5 	bl	800cd24 <LmhpPackagesRegister>
 800c39a:	4603      	mov	r3, r0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d002      	beq.n	800c3a6 <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800c3a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3a4:	e031      	b.n	800c40a <LmHandlerPackageRegister+0x9e>
                }
                break;
 800c3a6:	bf00      	nop
            }
    }
    if( package != NULL )
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d02b      	beq.n	800c406 <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 800c3ae:	79fb      	ldrb	r3, [r7, #7]
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	4918      	ldr	r1, [pc, #96]	@ (800c414 <LmHandlerPackageRegister+0xa8>)
 800c3b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800c3b8:	79fb      	ldrb	r3, [r7, #7]
 800c3ba:	4a16      	ldr	r2, [pc, #88]	@ (800c414 <LmHandlerPackageRegister+0xa8>)
 800c3bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3c0:	4a15      	ldr	r2, [pc, #84]	@ (800c418 <LmHandlerPackageRegister+0xac>)
 800c3c2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800c3c4:	79fb      	ldrb	r3, [r7, #7]
 800c3c6:	4a13      	ldr	r2, [pc, #76]	@ (800c414 <LmHandlerPackageRegister+0xa8>)
 800c3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3cc:	4a13      	ldr	r2, [pc, #76]	@ (800c41c <LmHandlerPackageRegister+0xb0>)
 800c3ce:	631a      	str	r2, [r3, #48]	@ 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800c3d0:	79fb      	ldrb	r3, [r7, #7]
 800c3d2:	4a10      	ldr	r2, [pc, #64]	@ (800c414 <LmHandlerPackageRegister+0xa8>)
 800c3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3d8:	4a11      	ldr	r2, [pc, #68]	@ (800c420 <LmHandlerPackageRegister+0xb4>)
 800c3da:	635a      	str	r2, [r3, #52]	@ 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800c3dc:	4b11      	ldr	r3, [pc, #68]	@ (800c424 <LmHandlerPackageRegister+0xb8>)
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	79fb      	ldrb	r3, [r7, #7]
 800c3e2:	490c      	ldr	r1, [pc, #48]	@ (800c414 <LmHandlerPackageRegister+0xa8>)
 800c3e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c3e8:	6992      	ldr	r2, [r2, #24]
 800c3ea:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800c3ec:	79fb      	ldrb	r3, [r7, #7]
 800c3ee:	4a09      	ldr	r2, [pc, #36]	@ (800c414 <LmHandlerPackageRegister+0xa8>)
 800c3f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	4a0c      	ldr	r2, [pc, #48]	@ (800c428 <LmHandlerPackageRegister+0xbc>)
 800c3f8:	6851      	ldr	r1, [r2, #4]
 800c3fa:	4a0b      	ldr	r2, [pc, #44]	@ (800c428 <LmHandlerPackageRegister+0xbc>)
 800c3fc:	7852      	ldrb	r2, [r2, #1]
 800c3fe:	6838      	ldr	r0, [r7, #0]
 800c400:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800c402:	2300      	movs	r3, #0
 800c404:	e001      	b.n	800c40a <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c406:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	200003e8 	.word	0x200003e8
 800c418:	0800bad5 	.word	0x0800bad5
 800c41c:	0800bc55 	.word	0x0800bc55
 800c420:	0800be11 	.word	0x0800be11
 800c424:	20000414 	.word	0x20000414
 800c428:	200000bc 	.word	0x200000bc

0800c42c <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	4603      	mov	r3, r0
 800c434:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800c436:	79fb      	ldrb	r3, [r7, #7]
 800c438:	2b04      	cmp	r3, #4
 800c43a:	d80e      	bhi.n	800c45a <LmHandlerPackageIsInitialized+0x2e>
 800c43c:	79fb      	ldrb	r3, [r7, #7]
 800c43e:	4a09      	ldr	r2, [pc, #36]	@ (800c464 <LmHandlerPackageIsInitialized+0x38>)
 800c440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d007      	beq.n	800c45a <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800c44a:	79fb      	ldrb	r3, [r7, #7]
 800c44c:	4a05      	ldr	r2, [pc, #20]	@ (800c464 <LmHandlerPackageIsInitialized+0x38>)
 800c44e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	4798      	blx	r3
 800c456:	4603      	mov	r3, r0
 800c458:	e000      	b.n	800c45c <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800c45a:	2300      	movs	r3, #0
    }
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3708      	adds	r7, #8
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	200003e8 	.word	0x200003e8

0800c468 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	4603      	mov	r3, r0
 800c470:	6039      	str	r1, [r7, #0]
 800c472:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c474:	2300      	movs	r3, #0
 800c476:	73fb      	strb	r3, [r7, #15]
 800c478:	e07c      	b.n	800c574 <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 800c47a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c47e:	4a42      	ldr	r2, [pc, #264]	@ (800c588 <LmHandlerPackagesNotify+0x120>)
 800c480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d06f      	beq.n	800c568 <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 800c488:	79fb      	ldrb	r3, [r7, #7]
 800c48a:	2b03      	cmp	r3, #3
 800c48c:	d863      	bhi.n	800c556 <LmHandlerPackagesNotify+0xee>
 800c48e:	a201      	add	r2, pc, #4	@ (adr r2, 800c494 <LmHandlerPackagesNotify+0x2c>)
 800c490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c494:	0800c4a5 	.word	0x0800c4a5
 800c498:	0800c4c7 	.word	0x0800c4c7
 800c49c:	0800c513 	.word	0x0800c513
 800c4a0:	0800c535 	.word	0x0800c535
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800c4a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4a8:	4a37      	ldr	r2, [pc, #220]	@ (800c588 <LmHandlerPackagesNotify+0x120>)
 800c4aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4ae:	69db      	ldr	r3, [r3, #28]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d052      	beq.n	800c55a <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800c4b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4b8:	4a33      	ldr	r2, [pc, #204]	@ (800c588 <LmHandlerPackagesNotify+0x120>)
 800c4ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4be:	69db      	ldr	r3, [r3, #28]
 800c4c0:	6838      	ldr	r0, [r7, #0]
 800c4c2:	4798      	blx	r3
                        }
                        break;
 800c4c4:	e049      	b.n	800c55a <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800c4c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4ca:	4a2f      	ldr	r2, [pc, #188]	@ (800c588 <LmHandlerPackagesNotify+0x120>)
 800c4cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4d0:	6a1b      	ldr	r3, [r3, #32]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d043      	beq.n	800c55e <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800c4d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4da:	4a2b      	ldr	r2, [pc, #172]	@ (800c588 <LmHandlerPackagesNotify+0x120>)
 800c4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4e0:	781a      	ldrb	r2, [r3, #0]
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d00a      	beq.n	800c500 <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800c4ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d135      	bne.n	800c55e <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800c4f2:	4b25      	ldr	r3, [pc, #148]	@ (800c588 <LmHandlerPackagesNotify+0x120>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	4798      	blx	r3
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d02e      	beq.n	800c55e <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800c500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c504:	4a20      	ldr	r2, [pc, #128]	@ (800c588 <LmHandlerPackagesNotify+0x120>)
 800c506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c50a:	6a1b      	ldr	r3, [r3, #32]
 800c50c:	6838      	ldr	r0, [r7, #0]
 800c50e:	4798      	blx	r3
                        }
                        break;
 800c510:	e025      	b.n	800c55e <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800c512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c516:	4a1c      	ldr	r2, [pc, #112]	@ (800c588 <LmHandlerPackagesNotify+0x120>)
 800c518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d01f      	beq.n	800c562 <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800c522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c526:	4a18      	ldr	r2, [pc, #96]	@ (800c588 <LmHandlerPackagesNotify+0x120>)
 800c528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c52c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c52e:	6838      	ldr	r0, [r7, #0]
 800c530:	4798      	blx	r3
                        }
                        break;
 800c532:	e016      	b.n	800c562 <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800c534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c538:	4a13      	ldr	r2, [pc, #76]	@ (800c588 <LmHandlerPackagesNotify+0x120>)
 800c53a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c53e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c540:	2b00      	cmp	r3, #0
 800c542:	d010      	beq.n	800c566 <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800c544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c548:	4a0f      	ldr	r2, [pc, #60]	@ (800c588 <LmHandlerPackagesNotify+0x120>)
 800c54a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c550:	6838      	ldr	r0, [r7, #0]
 800c552:	4798      	blx	r3
                        }
                        break;
 800c554:	e007      	b.n	800c566 <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 800c556:	bf00      	nop
 800c558:	e006      	b.n	800c568 <LmHandlerPackagesNotify+0x100>
                        break;
 800c55a:	bf00      	nop
 800c55c:	e004      	b.n	800c568 <LmHandlerPackagesNotify+0x100>
                        break;
 800c55e:	bf00      	nop
 800c560:	e002      	b.n	800c568 <LmHandlerPackagesNotify+0x100>
                        break;
 800c562:	bf00      	nop
 800c564:	e000      	b.n	800c568 <LmHandlerPackagesNotify+0x100>
                        break;
 800c566:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	3301      	adds	r3, #1
 800c570:	b2db      	uxtb	r3, r3
 800c572:	73fb      	strb	r3, [r7, #15]
 800c574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c578:	2b04      	cmp	r3, #4
 800c57a:	f77f af7e 	ble.w	800c47a <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800c57e:	bf00      	nop
 800c580:	bf00      	nop
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	200003e8 	.word	0x200003e8

0800c58c <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c592:	2300      	movs	r3, #0
 800c594:	71fb      	strb	r3, [r7, #7]
 800c596:	e01c      	b.n	800c5d2 <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 800c598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c59c:	4a11      	ldr	r2, [pc, #68]	@ (800c5e4 <LmHandlerPackageIsTxPending+0x58>)
 800c59e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00f      	beq.n	800c5c6 <LmHandlerPackageIsTxPending+0x3a>
 800c5a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00b      	beq.n	800c5c6 <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800c5ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5b2:	4a0c      	ldr	r2, [pc, #48]	@ (800c5e4 <LmHandlerPackageIsTxPending+0x58>)
 800c5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	4798      	blx	r3
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d001      	beq.n	800c5c6 <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	e00a      	b.n	800c5dc <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c5c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	71fb      	strb	r3, [r7, #7]
 800c5d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5d6:	2b04      	cmp	r3, #4
 800c5d8:	ddde      	ble.n	800c598 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	200003e8 	.word	0x200003e8

0800c5e8 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	71fb      	strb	r3, [r7, #7]
 800c5f2:	e022      	b.n	800c63a <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800c5f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5f8:	4a14      	ldr	r2, [pc, #80]	@ (800c64c <LmHandlerPackagesProcess+0x64>)
 800c5fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d015      	beq.n	800c62e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800c602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c606:	4a11      	ldr	r2, [pc, #68]	@ (800c64c <LmHandlerPackagesProcess+0x64>)
 800c608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c60c:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d00d      	beq.n	800c62e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800c612:	79fb      	ldrb	r3, [r7, #7]
 800c614:	4618      	mov	r0, r3
 800c616:	f7ff ff09 	bl	800c42c <LmHandlerPackageIsInitialized>
 800c61a:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d006      	beq.n	800c62e <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800c620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c624:	4a09      	ldr	r2, [pc, #36]	@ (800c64c <LmHandlerPackagesProcess+0x64>)
 800c626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c62a:	695b      	ldr	r3, [r3, #20]
 800c62c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c62e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c632:	b2db      	uxtb	r3, r3
 800c634:	3301      	adds	r3, #1
 800c636:	b2db      	uxtb	r3, r3
 800c638:	71fb      	strb	r3, [r7, #7]
 800c63a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c63e:	2b04      	cmp	r3, #4
 800c640:	ddd8      	ble.n	800c5f4 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800c642:	bf00      	nop
 800c644:	bf00      	nop
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	200003e8 	.word	0x200003e8

0800c650 <LmHandlerStop>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800c650:	b580      	push	{r7, lr}
 800c652:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800c654:	f005 f890 	bl	8011778 <LoRaMacDeInitialization>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d101      	bne.n	800c662 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c65e:	2300      	movs	r3, #0
 800c660:	e001      	b.n	800c666 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c662:	f06f 0301 	mvn.w	r3, #1
    }
}
 800c666:	4618      	mov	r0, r3
 800c668:	bd80      	pop	{r7, pc}

0800c66a <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800c66e:	f004 f81b 	bl	80106a8 <LoRaMacHalt>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d101      	bne.n	800c67c <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c678:	2300      	movs	r3, #0
 800c67a:	e001      	b.n	800c680 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c67c:	f06f 0301 	mvn.w	r3, #1
    }
}
 800c680:	4618      	mov	r0, r3
 800c682:	bd80      	pop	{r7, pc}

0800c684 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b08c      	sub	sp, #48	@ 0x30
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d102      	bne.n	800c698 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c692:	f04f 33ff 	mov.w	r3, #4294967295
 800c696:	e016      	b.n	800c6c6 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800c698:	2320      	movs	r3, #32
 800c69a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c69c:	f107 0308 	add.w	r3, r7, #8
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f004 f8b1 	bl	8010808 <LoRaMacMibGetRequestConfirm>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d002      	beq.n	800c6b2 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b0:	e009      	b.n	800c6c6 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800c6b2:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f993 2000 	ldrsb.w	r2, [r3]
 800c6c0:	4b03      	ldr	r3, [pc, #12]	@ (800c6d0 <LmHandlerGetTxPower+0x4c>)
 800c6c2:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3730      	adds	r7, #48	@ 0x30
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	200003fc 	.word	0x200003fc

0800c6d4 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	af00      	add	r7, sp, #0
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
    }

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
 800c6d8:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bc80      	pop	{r7}
 800c6e2:	4770      	bx	lr

0800c6e4 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800c6ee:	bf00      	nop
 800c6f0:	370c      	adds	r7, #12
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bc80      	pop	{r7}
 800c6f6:	4770      	bx	lr

0800c6f8 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800c6fc:	4b02      	ldr	r3, [pc, #8]	@ (800c708 <LmhpCompliancePackageFactory+0x10>)
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	46bd      	mov	sp, r7
 800c702:	bc80      	pop	{r7}
 800c704:	4770      	bx	lr
 800c706:	bf00      	nop
 800c708:	200000c4 	.word	0x200000c4

0800c70c <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800c70c:	b480      	push	{r7}
 800c70e:	b085      	sub	sp, #20
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	60b9      	str	r1, [r7, #8]
 800c716:	4613      	mov	r3, r2
 800c718:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00f      	beq.n	800c740 <LmhpComplianceInit+0x34>
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d00c      	beq.n	800c740 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 800c726:	4a0c      	ldr	r2, [pc, #48]	@ (800c758 <LmhpComplianceInit+0x4c>)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800c72c:	4a0b      	ldr	r2, [pc, #44]	@ (800c75c <LmhpComplianceInit+0x50>)
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800c732:	4a0a      	ldr	r2, [pc, #40]	@ (800c75c <LmhpComplianceInit+0x50>)
 800c734:	79fb      	ldrb	r3, [r7, #7]
 800c736:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800c738:	4b08      	ldr	r3, [pc, #32]	@ (800c75c <LmhpComplianceInit+0x50>)
 800c73a:	2201      	movs	r2, #1
 800c73c:	701a      	strb	r2, [r3, #0]
 800c73e:	e006      	b.n	800c74e <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800c740:	4b05      	ldr	r3, [pc, #20]	@ (800c758 <LmhpComplianceInit+0x4c>)
 800c742:	2200      	movs	r2, #0
 800c744:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800c746:	4b05      	ldr	r3, [pc, #20]	@ (800c75c <LmhpComplianceInit+0x50>)
 800c748:	2200      	movs	r2, #0
 800c74a:	701a      	strb	r2, [r3, #0]
    }
}
 800c74c:	bf00      	nop
 800c74e:	bf00      	nop
 800c750:	3714      	adds	r7, #20
 800c752:	46bd      	mov	sp, r7
 800c754:	bc80      	pop	{r7}
 800c756:	4770      	bx	lr
 800c758:	20000564 	.word	0x20000564
 800c75c:	20000550 	.word	0x20000550

0800c760 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800c760:	b480      	push	{r7}
 800c762:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800c764:	4b02      	ldr	r3, [pc, #8]	@ (800c770 <LmhpComplianceIsInitialized+0x10>)
 800c766:	781b      	ldrb	r3, [r3, #0]
}
 800c768:	4618      	mov	r0, r3
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bc80      	pop	{r7}
 800c76e:	4770      	bx	lr
 800c770:	20000550 	.word	0x20000550

0800c774 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800c774:	b480      	push	{r7}
 800c776:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800c778:	4b07      	ldr	r3, [pc, #28]	@ (800c798 <LmhpComplianceIsRunning+0x24>)
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	f083 0301 	eor.w	r3, r3, #1
 800c780:	b2db      	uxtb	r3, r3
 800c782:	2b00      	cmp	r3, #0
 800c784:	d001      	beq.n	800c78a <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800c786:	2300      	movs	r3, #0
 800c788:	e001      	b.n	800c78e <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800c78a:	4b03      	ldr	r3, [pc, #12]	@ (800c798 <LmhpComplianceIsRunning+0x24>)
 800c78c:	785b      	ldrb	r3, [r3, #1]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	46bd      	mov	sp, r7
 800c792:	bc80      	pop	{r7}
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	20000550 	.word	0x20000550

0800c79c <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c7a4:	4b0f      	ldr	r3, [pc, #60]	@ (800c7e4 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	f083 0301 	eor.w	r3, r3, #1
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d112      	bne.n	800c7d8 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800c7b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c7e4 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c7b4:	785b      	ldrb	r3, [r3, #1]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00f      	beq.n	800c7da <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d10b      	bne.n	800c7da <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d007      	beq.n	800c7da <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800c7ca:	4b06      	ldr	r3, [pc, #24]	@ (800c7e4 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c7cc:	899b      	ldrh	r3, [r3, #12]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	b29a      	uxth	r2, r3
 800c7d2:	4b04      	ldr	r3, [pc, #16]	@ (800c7e4 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c7d4:	819a      	strh	r2, [r3, #12]
 800c7d6:	e000      	b.n	800c7da <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800c7d8:	bf00      	nop
    }
}
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bc80      	pop	{r7}
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	20000550 	.word	0x20000550

0800c7e8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c7f0:	4b12      	ldr	r3, [pc, #72]	@ (800c83c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	f083 0301 	eor.w	r3, r3, #1
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d116      	bne.n	800c82c <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800c7fe:	4b0f      	ldr	r3, [pc, #60]	@ (800c83c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c800:	785b      	ldrb	r3, [r3, #1]
 800c802:	f083 0301 	eor.w	r3, r3, #1
 800c806:	b2db      	uxtb	r3, r3
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d111      	bne.n	800c830 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	2b05      	cmp	r3, #5
 800c812:	d10e      	bne.n	800c832 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800c814:	4b09      	ldr	r3, [pc, #36]	@ (800c83c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c816:	2201      	movs	r2, #1
 800c818:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	7a1a      	ldrb	r2, [r3, #8]
 800c81e:	4b07      	ldr	r3, [pc, #28]	@ (800c83c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c820:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	7a5a      	ldrb	r2, [r3, #9]
 800c826:	4b05      	ldr	r3, [pc, #20]	@ (800c83c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c828:	741a      	strb	r2, [r3, #16]
 800c82a:	e002      	b.n	800c832 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800c82c:	bf00      	nop
 800c82e:	e000      	b.n	800c832 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800c830:	bf00      	nop
    }
}
 800c832:	370c      	adds	r7, #12
 800c834:	46bd      	mov	sp, r7
 800c836:	bc80      	pop	{r7}
 800c838:	4770      	bx	lr
 800c83a:	bf00      	nop
 800c83c:	20000550 	.word	0x20000550

0800c840 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b082      	sub	sp, #8
 800c844:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800c846:	4b36      	ldr	r3, [pc, #216]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	f083 0301 	eor.w	r3, r3, #1
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	2b00      	cmp	r3, #0
 800c852:	d002      	beq.n	800c85a <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c854:	f04f 33ff 	mov.w	r3, #4294967295
 800c858:	e05e      	b.n	800c918 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 800c85a:	4b31      	ldr	r3, [pc, #196]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c85c:	785b      	ldrb	r3, [r3, #1]
 800c85e:	f083 0301 	eor.w	r3, r3, #1
 800c862:	b2db      	uxtb	r3, r3
 800c864:	2b00      	cmp	r3, #0
 800c866:	d001      	beq.n	800c86c <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c868:	2300      	movs	r3, #0
 800c86a:	e055      	b.n	800c918 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 800c86c:	4b2c      	ldr	r3, [pc, #176]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c86e:	7b9b      	ldrb	r3, [r3, #14]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d019      	beq.n	800c8a8 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800c874:	4b2a      	ldr	r3, [pc, #168]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c876:	2200      	movs	r2, #0
 800c878:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800c87a:	4b29      	ldr	r3, [pc, #164]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c87c:	2203      	movs	r2, #3
 800c87e:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800c880:	4b27      	ldr	r3, [pc, #156]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	2205      	movs	r2, #5
 800c886:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800c888:	4b25      	ldr	r3, [pc, #148]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	3301      	adds	r3, #1
 800c88e:	4a24      	ldr	r2, [pc, #144]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c890:	7bd2      	ldrb	r2, [r2, #15]
 800c892:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800c894:	4b22      	ldr	r3, [pc, #136]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	3302      	adds	r3, #2
 800c89a:	4a21      	ldr	r2, [pc, #132]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c89c:	7c12      	ldrb	r2, [r2, #16]
 800c89e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800c8a0:	4b1f      	ldr	r3, [pc, #124]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	709a      	strb	r2, [r3, #2]
 800c8a6:	e01c      	b.n	800c8e2 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800c8a8:	4b1d      	ldr	r3, [pc, #116]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c8aa:	789b      	ldrb	r3, [r3, #2]
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d005      	beq.n	800c8bc <LmhpComplianceTxProcess+0x7c>
 800c8b0:	2b04      	cmp	r3, #4
 800c8b2:	d116      	bne.n	800c8e2 <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 800c8b4:	4b1a      	ldr	r3, [pc, #104]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	709a      	strb	r2, [r3, #2]
                break;
 800c8ba:	e012      	b.n	800c8e2 <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 800c8bc:	4b18      	ldr	r3, [pc, #96]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c8be:	2202      	movs	r2, #2
 800c8c0:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800c8c2:	4b17      	ldr	r3, [pc, #92]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c8c4:	899b      	ldrh	r3, [r3, #12]
 800c8c6:	0a1b      	lsrs	r3, r3, #8
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	4b15      	ldr	r3, [pc, #84]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	b2d2      	uxtb	r2, r2
 800c8d0:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800c8d2:	4b13      	ldr	r3, [pc, #76]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c8d4:	899a      	ldrh	r2, [r3, #12]
 800c8d6:	4b12      	ldr	r3, [pc, #72]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	b2d2      	uxtb	r2, r2
 800c8de:	701a      	strb	r2, [r3, #0]
                break;
 800c8e0:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800c8e2:	23e0      	movs	r3, #224	@ 0xe0
 800c8e4:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800c8e6:	4b0e      	ldr	r3, [pc, #56]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c8e8:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800c8ea:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800c8ec:	4b0c      	ldr	r3, [pc, #48]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c8ee:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800c8f0:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 800c8f2:	480c      	ldr	r0, [pc, #48]	@ (800c924 <LmhpComplianceTxProcess+0xe4>)
 800c8f4:	f00f f81c 	bl	801b930 <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 800c8f8:	4b0b      	ldr	r3, [pc, #44]	@ (800c928 <LmhpComplianceTxProcess+0xe8>)
 800c8fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d102      	bne.n	800c906 <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 800c900:	f04f 33ff 	mov.w	r3, #4294967295
 800c904:	e008      	b.n	800c918 <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800c906:	4b08      	ldr	r3, [pc, #32]	@ (800c928 <LmhpComplianceTxProcess+0xe8>)
 800c908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c90a:	4a05      	ldr	r2, [pc, #20]	@ (800c920 <LmhpComplianceTxProcess+0xe0>)
 800c90c:	78d2      	ldrb	r2, [r2, #3]
 800c90e:	4611      	mov	r1, r2
 800c910:	4638      	mov	r0, r7
 800c912:	2201      	movs	r2, #1
 800c914:	4798      	blx	r3
 800c916:	4603      	mov	r3, r0
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3708      	adds	r7, #8
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	20000550 	.word	0x20000550
 800c924:	20000538 	.word	0x20000538
 800c928:	200000c4 	.word	0x200000c4

0800c92c <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b0a4      	sub	sp, #144	@ 0x90
 800c930:	af02      	add	r7, sp, #8
 800c932:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c934:	4ba5      	ldr	r3, [pc, #660]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	f083 0301 	eor.w	r3, r3, #1
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f040 81c6 	bne.w	800ccd0 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	7b5b      	ldrb	r3, [r3, #13]
 800c948:	f083 0301 	eor.w	r3, r3, #1
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	2b00      	cmp	r3, #0
 800c950:	f040 81c0 	bne.w	800ccd4 <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800c954:	4b9d      	ldr	r3, [pc, #628]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c956:	785b      	ldrb	r3, [r3, #1]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00c      	beq.n	800c976 <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	7b9b      	ldrb	r3, [r3, #14]
 800c960:	f083 0301 	eor.w	r3, r3, #1
 800c964:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 800c966:	2b00      	cmp	r3, #0
 800c968:	d005      	beq.n	800c976 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800c96a:	4b98      	ldr	r3, [pc, #608]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c96c:	899b      	ldrh	r3, [r3, #12]
 800c96e:	3301      	adds	r3, #1
 800c970:	b29a      	uxth	r2, r3
 800c972:	4b96      	ldr	r3, [pc, #600]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c974:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	78db      	ldrb	r3, [r3, #3]
 800c97a:	2be0      	cmp	r3, #224	@ 0xe0
 800c97c:	f040 81ac 	bne.w	800ccd8 <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800c980:	4b92      	ldr	r3, [pc, #584]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c982:	785b      	ldrb	r3, [r3, #1]
 800c984:	f083 0301 	eor.w	r3, r3, #1
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d060      	beq.n	800ca50 <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	7b1b      	ldrb	r3, [r3, #12]
 800c992:	2b04      	cmp	r3, #4
 800c994:	f040 81a7 	bne.w	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	f040 81a1 	bne.w	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	f040 819a 	bne.w	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	3302      	adds	r3, #2
 800c9b8:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	f040 8193 	bne.w	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	3303      	adds	r3, #3
 800c9c6:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	f040 818c 	bne.w	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 800c9ce:	4b7f      	ldr	r3, [pc, #508]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800c9d4:	4b7d      	ldr	r3, [pc, #500]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9d6:	22e0      	movs	r2, #224	@ 0xe0
 800c9d8:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800c9da:	4b7c      	ldr	r3, [pc, #496]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9dc:	2202      	movs	r2, #2
 800c9de:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800c9e0:	4b7a      	ldr	r3, [pc, #488]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800c9e6:	4b79      	ldr	r3, [pc, #484]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800c9ec:	4b77      	ldr	r3, [pc, #476]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800c9f2:	4b76      	ldr	r3, [pc, #472]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800c9f8:	4b74      	ldr	r3, [pc, #464]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800c9fe:	4b73      	ldr	r3, [pc, #460]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ca00:	2201      	movs	r2, #1
 800ca02:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 800ca04:	2304      	movs	r3, #4
 800ca06:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ca0c:	f107 030c 	add.w	r3, r7, #12
 800ca10:	4618      	mov	r0, r3
 800ca12:	f004 f8af 	bl	8010b74 <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 800ca16:	2000      	movs	r0, #0
 800ca18:	f004 fe88 	bl	801172c <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800ca1c:	4b6c      	ldr	r3, [pc, #432]	@ (800cbd0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d003      	beq.n	800ca2e <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800ca26:	4b6a      	ldr	r3, [pc, #424]	@ (800cbd0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800ca2e:	2300      	movs	r3, #0
 800ca30:	9300      	str	r3, [sp, #0]
 800ca32:	4b68      	ldr	r3, [pc, #416]	@ (800cbd4 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	f04f 31ff 	mov.w	r1, #4294967295
 800ca3a:	4867      	ldr	r0, [pc, #412]	@ (800cbd8 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800ca3c:	f00e ff42 	bl	801b8c4 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800ca40:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ca44:	4864      	ldr	r0, [pc, #400]	@ (800cbd8 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800ca46:	f00f f851 	bl	801baec <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 800ca4a:	f7ff fef9 	bl	800c840 <LmhpComplianceTxProcess>
 800ca4e:	e14a      	b.n	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	781a      	ldrb	r2, [r3, #0]
 800ca56:	4b5d      	ldr	r3, [pc, #372]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ca58:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800ca5a:	4b5c      	ldr	r3, [pc, #368]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ca5c:	789b      	ldrb	r3, [r3, #2]
 800ca5e:	2b0a      	cmp	r3, #10
 800ca60:	f200 813c 	bhi.w	800ccdc <LmhpComplianceOnMcpsIndication+0x3b0>
 800ca64:	a201      	add	r2, pc, #4	@ (adr r2, 800ca6c <LmhpComplianceOnMcpsIndication+0x140>)
 800ca66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca6a:	bf00      	nop
 800ca6c:	0800ca99 	.word	0x0800ca99
 800ca70:	0800cae3 	.word	0x0800cae3
 800ca74:	0800caeb 	.word	0x0800caeb
 800ca78:	0800caf9 	.word	0x0800caf9
 800ca7c:	0800cb07 	.word	0x0800cb07
 800ca80:	0800cb5f 	.word	0x0800cb5f
 800ca84:	0800cb71 	.word	0x0800cb71
 800ca88:	0800cbe1 	.word	0x0800cbe1
 800ca8c:	0800cc89 	.word	0x0800cc89
 800ca90:	0800cc9b 	.word	0x0800cc9b
 800ca94:	0800ccb5 	.word	0x0800ccb5
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800ca98:	484f      	ldr	r0, [pc, #316]	@ (800cbd8 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800ca9a:	f00e ffb7 	bl	801ba0c <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800ca9e:	4b4b      	ldr	r3, [pc, #300]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800caa4:	4b49      	ldr	r3, [pc, #292]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800caa6:	2200      	movs	r2, #0
 800caa8:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800caaa:	2304      	movs	r3, #4
 800caac:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800caae:	4b48      	ldr	r3, [pc, #288]	@ (800cbd0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800cab6:	f107 030c 	add.w	r3, r7, #12
 800caba:	4618      	mov	r0, r3
 800cabc:	f004 f85a 	bl	8010b74 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800cac0:	4b43      	ldr	r3, [pc, #268]	@ (800cbd0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	785b      	ldrb	r3, [r3, #1]
 800cac6:	4618      	mov	r0, r3
 800cac8:	f004 fe30 	bl	801172c <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800cacc:	4b40      	ldr	r3, [pc, #256]	@ (800cbd0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	f000 8104 	beq.w	800cce0 <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800cad8:	4b3d      	ldr	r3, [pc, #244]	@ (800cbd0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	4798      	blx	r3
                    }
                }
                break;
 800cae0:	e0fe      	b.n	800cce0 <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 800cae2:	4b3a      	ldr	r3, [pc, #232]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cae4:	2202      	movs	r2, #2
 800cae6:	719a      	strb	r2, [r3, #6]
                break;
 800cae8:	e0fd      	b.n	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 800caea:	4b38      	ldr	r3, [pc, #224]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800caec:	2201      	movs	r2, #1
 800caee:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800caf0:	4b36      	ldr	r3, [pc, #216]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800caf2:	2201      	movs	r2, #1
 800caf4:	709a      	strb	r2, [r3, #2]
                break;
 800caf6:	e0f6      	b.n	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 800caf8:	4b34      	ldr	r3, [pc, #208]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cafa:	2200      	movs	r2, #0
 800cafc:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800cafe:	4b33      	ldr	r3, [pc, #204]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cb00:	2201      	movs	r2, #1
 800cb02:	709a      	strb	r2, [r3, #2]
                break;
 800cb04:	e0ef      	b.n	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	7b1a      	ldrb	r2, [r3, #12]
 800cb0a:	4b30      	ldr	r3, [pc, #192]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cb0c:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 800cb0e:	4b2f      	ldr	r3, [pc, #188]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cb10:	689b      	ldr	r3, [r3, #8]
 800cb12:	2204      	movs	r2, #4
 800cb14:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800cb16:	2301      	movs	r3, #1
 800cb18:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800cb1c:	e012      	b.n	800cb44 <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	689a      	ldr	r2, [r3, #8]
 800cb22:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800cb26:	4413      	add	r3, r2
 800cb28:	781a      	ldrb	r2, [r3, #0]
 800cb2a:	4b28      	ldr	r3, [pc, #160]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cb2c:	6899      	ldr	r1, [r3, #8]
 800cb2e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800cb32:	440b      	add	r3, r1
 800cb34:	3201      	adds	r2, #1
 800cb36:	b2d2      	uxtb	r2, r2
 800cb38:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800cb3a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800cb3e:	3301      	adds	r3, #1
 800cb40:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800cb44:	4b21      	ldr	r3, [pc, #132]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cb46:	795a      	ldrb	r2, [r3, #5]
 800cb48:	4b20      	ldr	r3, [pc, #128]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cb4a:	799b      	ldrb	r3, [r3, #6]
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	bf28      	it	cs
 800cb50:	4613      	movcs	r3, r2
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d3e0      	bcc.n	800cb1e <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 800cb5c:	e0c3      	b.n	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 800cb5e:	2305      	movs	r3, #5
 800cb60:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 800cb64:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f004 fb97 	bl	801129c <LoRaMacMlmeRequest>
                }
                break;
 800cb6e:	e0ba      	b.n	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800cb70:	4819      	ldr	r0, [pc, #100]	@ (800cbd8 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800cb72:	f00e ff4b 	bl	801ba0c <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800cb76:	4b15      	ldr	r3, [pc, #84]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cb78:	2200      	movs	r2, #0
 800cb7a:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800cb7c:	4b13      	ldr	r3, [pc, #76]	@ (800cbcc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800cb82:	2304      	movs	r3, #4
 800cb84:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800cb86:	4b12      	ldr	r3, [pc, #72]	@ (800cbd0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800cb8e:	f107 030c 	add.w	r3, r7, #12
 800cb92:	4618      	mov	r0, r3
 800cb94:	f003 ffee 	bl	8010b74 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800cb98:	4b0d      	ldr	r3, [pc, #52]	@ (800cbd0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	785b      	ldrb	r3, [r3, #1]
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f004 fdc4 	bl	801172c <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800cba4:	4b0a      	ldr	r3, [pc, #40]	@ (800cbd0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	689b      	ldr	r3, [r3, #8]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d003      	beq.n	800cbb6 <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800cbae:	4b08      	ldr	r3, [pc, #32]	@ (800cbd0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 800cbb6:	4b09      	ldr	r3, [pc, #36]	@ (800cbdc <LmhpComplianceOnMcpsIndication+0x2b0>)
 800cbb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f000 8092 	beq.w	800cce4 <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800cbc0:	4b06      	ldr	r3, [pc, #24]	@ (800cbdc <LmhpComplianceOnMcpsIndication+0x2b0>)
 800cbc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbc4:	2101      	movs	r1, #1
 800cbc6:	2002      	movs	r0, #2
 800cbc8:	4798      	blx	r3
                    }
                }
                break;
 800cbca:	e08b      	b.n	800cce4 <LmhpComplianceOnMcpsIndication+0x3b8>
 800cbcc:	20000550 	.word	0x20000550
 800cbd0:	20000564 	.word	0x20000564
 800cbd4:	0800ccfd 	.word	0x0800ccfd
 800cbd8:	20000538 	.word	0x20000538
 800cbdc:	200000c4 	.word	0x200000c4
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	7b1b      	ldrb	r3, [r3, #12]
 800cbe4:	2b03      	cmp	r3, #3
 800cbe6:	d113      	bne.n	800cc10 <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 800cbe8:	2306      	movs	r3, #6
 800cbea:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	021b      	lsls	r3, r3, #8
 800cbf8:	b21a      	sxth	r2, r3
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	689b      	ldr	r3, [r3, #8]
 800cbfe:	3302      	adds	r3, #2
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	b21b      	sxth	r3, r3
 800cc04:	4313      	orrs	r3, r2
 800cc06:	b21b      	sxth	r3, r3
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800cc0e:	e032      	b.n	800cc76 <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	7b1b      	ldrb	r3, [r3, #12]
 800cc14:	2b07      	cmp	r3, #7
 800cc16:	d12e      	bne.n	800cc76 <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 800cc18:	2307      	movs	r3, #7
 800cc1a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	3301      	adds	r3, #1
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	021b      	lsls	r3, r3, #8
 800cc28:	b21a      	sxth	r2, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	689b      	ldr	r3, [r3, #8]
 800cc2e:	3302      	adds	r3, #2
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	b21b      	sxth	r3, r3
 800cc34:	4313      	orrs	r3, r2
 800cc36:	b21b      	sxth	r3, r3
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	3303      	adds	r3, #3
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	041a      	lsls	r2, r3, #16
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	3304      	adds	r3, #4
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	021b      	lsls	r3, r3, #8
 800cc52:	4313      	orrs	r3, r2
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	6892      	ldr	r2, [r2, #8]
 800cc58:	3205      	adds	r2, #5
 800cc5a:	7812      	ldrb	r2, [r2, #0]
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	461a      	mov	r2, r3
 800cc60:	2364      	movs	r3, #100	@ 0x64
 800cc62:	fb02 f303 	mul.w	r3, r2, r3
 800cc66:	667b      	str	r3, [r7, #100]	@ 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	3306      	adds	r3, #6
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	b25b      	sxtb	r3, r3
 800cc72:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 800cc76:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f004 fb0e 	bl	801129c <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 800cc80:	4b1a      	ldr	r3, [pc, #104]	@ (800ccec <LmhpComplianceOnMcpsIndication+0x3c0>)
 800cc82:	2201      	movs	r2, #1
 800cc84:	709a      	strb	r2, [r3, #2]
                }
                break;
 800cc86:	e02e      	b.n	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 800cc88:	230a      	movs	r3, #10
 800cc8a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800cc8e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800cc92:	4618      	mov	r0, r3
 800cc94:	f004 fb02 	bl	801129c <LoRaMacMlmeRequest>
                }
                break;
 800cc98:	e025      	b.n	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	3301      	adds	r3, #1
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800cca8:	f107 030c 	add.w	r3, r7, #12
 800ccac:	4618      	mov	r0, r3
 800ccae:	f003 ff61 	bl	8010b74 <LoRaMacMibSetRequestConfirm>
                }
                break;
 800ccb2:	e018      	b.n	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800ccb4:	230d      	movs	r3, #13
 800ccb6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	785b      	ldrb	r3, [r3, #1]
 800ccc0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 800ccc4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f004 fae7 	bl	801129c <LoRaMacMlmeRequest>
                }
                break;
 800ccce:	e00a      	b.n	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800ccd0:	bf00      	nop
 800ccd2:	e008      	b.n	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800ccd4:	bf00      	nop
 800ccd6:	e006      	b.n	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800ccd8:	bf00      	nop
 800ccda:	e004      	b.n	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 800ccdc:	bf00      	nop
 800ccde:	e002      	b.n	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800cce0:	bf00      	nop
 800cce2:	e000      	b.n	800cce6 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800cce4:	bf00      	nop
        }
    }
}
 800cce6:	3788      	adds	r7, #136	@ 0x88
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	20000550 	.word	0x20000550

0800ccf0 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800ccf4:	bf00      	nop
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bc80      	pop	{r7}
 800ccfa:	4770      	bx	lr

0800ccfc <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800cd04:	f7ff fd9c 	bl	800c840 <LmhpComplianceTxProcess>
}
 800cd08:	bf00      	nop
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800cd18:	2300      	movs	r3, #0
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	370c      	adds	r7, #12
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bc80      	pop	{r7}
 800cd22:	4770      	bx	lr

0800cd24 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	6039      	str	r1, [r7, #0]
 800cd2e:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800cd30:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	370c      	adds	r7, #12
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bc80      	pop	{r7}
 800cd3c:	4770      	bx	lr
	...

0800cd40 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800cd40:	b590      	push	{r4, r7, lr}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800cd46:	f00e ff7b 	bl	801bc40 <UTIL_TIMER_GetCurrentTime>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	4a0f      	ldr	r2, [pc, #60]	@ (800cd8c <OnRadioTxDone+0x4c>)
 800cd4e:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800cd50:	4c0f      	ldr	r4, [pc, #60]	@ (800cd90 <OnRadioTxDone+0x50>)
 800cd52:	463b      	mov	r3, r7
 800cd54:	4618      	mov	r0, r3
 800cd56:	f00e f8f3 	bl	801af40 <SysTimeGet>
 800cd5a:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800cd5e:	463a      	mov	r2, r7
 800cd60:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cd64:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800cd68:	4a0a      	ldr	r2, [pc, #40]	@ (800cd94 <OnRadioTxDone+0x54>)
 800cd6a:	7813      	ldrb	r3, [r2, #0]
 800cd6c:	f043 0310 	orr.w	r3, r3, #16
 800cd70:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800cd72:	f003 f8ef 	bl	800ff54 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800cd76:	4b08      	ldr	r3, [pc, #32]	@ (800cd98 <OnRadioTxDone+0x58>)
 800cd78:	2201      	movs	r2, #1
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	2002      	movs	r0, #2
 800cd7e:	f00f f84f 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
}
 800cd82:	bf00      	nop
 800cd84:	370c      	adds	r7, #12
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd90      	pop	{r4, r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	200011ec 	.word	0x200011ec
 800cd90:	20000568 	.word	0x20000568
 800cd94:	200011e8 	.word	0x200011e8
 800cd98:	0801d108 	.word	0x0801d108

0800cd9c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	4608      	mov	r0, r1
 800cda6:	4611      	mov	r1, r2
 800cda8:	461a      	mov	r2, r3
 800cdaa:	4603      	mov	r3, r0
 800cdac:	817b      	strh	r3, [r7, #10]
 800cdae:	460b      	mov	r3, r1
 800cdb0:	813b      	strh	r3, [r7, #8]
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800cdb6:	f00e ff43 	bl	801bc40 <UTIL_TIMER_GetCurrentTime>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	4a0f      	ldr	r2, [pc, #60]	@ (800cdfc <OnRadioRxDone+0x60>)
 800cdbe:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800cdc0:	4a0e      	ldr	r2, [pc, #56]	@ (800cdfc <OnRadioRxDone+0x60>)
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800cdc6:	4a0d      	ldr	r2, [pc, #52]	@ (800cdfc <OnRadioRxDone+0x60>)
 800cdc8:	897b      	ldrh	r3, [r7, #10]
 800cdca:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800cdcc:	4a0b      	ldr	r2, [pc, #44]	@ (800cdfc <OnRadioRxDone+0x60>)
 800cdce:	893b      	ldrh	r3, [r7, #8]
 800cdd0:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800cdd2:	4a0a      	ldr	r2, [pc, #40]	@ (800cdfc <OnRadioRxDone+0x60>)
 800cdd4:	79fb      	ldrb	r3, [r7, #7]
 800cdd6:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800cdd8:	4a09      	ldr	r2, [pc, #36]	@ (800ce00 <OnRadioRxDone+0x64>)
 800cdda:	7813      	ldrb	r3, [r2, #0]
 800cddc:	f043 0308 	orr.w	r3, r3, #8
 800cde0:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800cde2:	f003 f8b7 	bl	800ff54 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800cde6:	4b07      	ldr	r3, [pc, #28]	@ (800ce04 <OnRadioRxDone+0x68>)
 800cde8:	2201      	movs	r2, #1
 800cdea:	2100      	movs	r1, #0
 800cdec:	2002      	movs	r0, #2
 800cdee:	f00f f817 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
}
 800cdf2:	bf00      	nop
 800cdf4:	3710      	adds	r7, #16
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	200011f0 	.word	0x200011f0
 800ce00:	200011e8 	.word	0x200011e8
 800ce04:	0801d118 	.word	0x0801d118

0800ce08 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800ce0c:	4a07      	ldr	r2, [pc, #28]	@ (800ce2c <OnRadioTxTimeout+0x24>)
 800ce0e:	7813      	ldrb	r3, [r2, #0]
 800ce10:	f043 0304 	orr.w	r3, r3, #4
 800ce14:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800ce16:	f003 f89d 	bl	800ff54 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800ce1a:	4b05      	ldr	r3, [pc, #20]	@ (800ce30 <OnRadioTxTimeout+0x28>)
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	2100      	movs	r1, #0
 800ce20:	2002      	movs	r0, #2
 800ce22:	f00e fffd 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
}
 800ce26:	bf00      	nop
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	200011e8 	.word	0x200011e8
 800ce30:	0801d128 	.word	0x0801d128

0800ce34 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800ce38:	4a04      	ldr	r2, [pc, #16]	@ (800ce4c <OnRadioRxError+0x18>)
 800ce3a:	7813      	ldrb	r3, [r2, #0]
 800ce3c:	f043 0302 	orr.w	r3, r3, #2
 800ce40:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800ce42:	f003 f887 	bl	800ff54 <OnMacProcessNotify>
}
 800ce46:	bf00      	nop
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	200011e8 	.word	0x200011e8

0800ce50 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800ce54:	4a07      	ldr	r2, [pc, #28]	@ (800ce74 <OnRadioRxTimeout+0x24>)
 800ce56:	7813      	ldrb	r3, [r2, #0]
 800ce58:	f043 0301 	orr.w	r3, r3, #1
 800ce5c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800ce5e:	f003 f879 	bl	800ff54 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800ce62:	4b05      	ldr	r3, [pc, #20]	@ (800ce78 <OnRadioRxTimeout+0x28>)
 800ce64:	2201      	movs	r2, #1
 800ce66:	2100      	movs	r1, #0
 800ce68:	2002      	movs	r0, #2
 800ce6a:	f00e ffd9 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
}
 800ce6e:	bf00      	nop
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	200011e8 	.word	0x200011e8
 800ce78:	0801d138 	.word	0x0801d138

0800ce7c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ce80:	4b08      	ldr	r3, [pc, #32]	@ (800cea4 <UpdateRxSlotIdleState+0x28>)
 800ce82:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ce86:	2b02      	cmp	r3, #2
 800ce88:	d004      	beq.n	800ce94 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800ce8a:	4b07      	ldr	r3, [pc, #28]	@ (800cea8 <UpdateRxSlotIdleState+0x2c>)
 800ce8c:	2206      	movs	r2, #6
 800ce8e:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800ce92:	e003      	b.n	800ce9c <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ce94:	4b04      	ldr	r3, [pc, #16]	@ (800cea8 <UpdateRxSlotIdleState+0x2c>)
 800ce96:	2202      	movs	r2, #2
 800ce98:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
}
 800ce9c:	bf00      	nop
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bc80      	pop	{r7}
 800cea2:	4770      	bx	lr
 800cea4:	20000a70 	.word	0x20000a70
 800cea8:	20000568 	.word	0x20000568

0800ceac <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b092      	sub	sp, #72	@ 0x48
 800ceb0:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ceb2:	4b50      	ldr	r3, [pc, #320]	@ (800cff4 <ProcessRadioTxDone+0x148>)
 800ceb4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ceb8:	2b02      	cmp	r3, #2
 800ceba:	d002      	beq.n	800cec2 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800cebc:	4b4e      	ldr	r3, [pc, #312]	@ (800cff8 <ProcessRadioTxDone+0x14c>)
 800cebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cec0:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cec2:	f3ef 8310 	mrs	r3, PRIMASK
 800cec6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800cec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800ceca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800cecc:	b672      	cpsid	i
}
 800cece:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800ced0:	f00e feb6 	bl	801bc40 <UTIL_TIMER_GetCurrentTime>
 800ced4:	4602      	mov	r2, r0
 800ced6:	4b49      	ldr	r3, [pc, #292]	@ (800cffc <ProcessRadioTxDone+0x150>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	1ad3      	subs	r3, r2, r3
 800cedc:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800cede:	4b48      	ldr	r3, [pc, #288]	@ (800d000 <ProcessRadioTxDone+0x154>)
 800cee0:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800cee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee6:	1ad3      	subs	r3, r2, r3
 800cee8:	4619      	mov	r1, r3
 800ceea:	4846      	ldr	r0, [pc, #280]	@ (800d004 <ProcessRadioTxDone+0x158>)
 800ceec:	f00e fdfe 	bl	801baec <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800cef0:	4844      	ldr	r0, [pc, #272]	@ (800d004 <ProcessRadioTxDone+0x158>)
 800cef2:	f00e fd1d 	bl	801b930 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800cef6:	4b42      	ldr	r3, [pc, #264]	@ (800d000 <ProcessRadioTxDone+0x154>)
 800cef8:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800cefc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cefe:	1ad3      	subs	r3, r2, r3
 800cf00:	4619      	mov	r1, r3
 800cf02:	4841      	ldr	r0, [pc, #260]	@ (800d008 <ProcessRadioTxDone+0x15c>)
 800cf04:	f00e fdf2 	bl	801baec <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800cf08:	483f      	ldr	r0, [pc, #252]	@ (800d008 <ProcessRadioTxDone+0x15c>)
 800cf0a:	f00e fd11 	bl	801b930 <UTIL_TIMER_Start>
 800cf0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf10:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf14:	f383 8810 	msr	PRIMASK, r3
}
 800cf18:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800cf1a:	4b36      	ldr	r3, [pc, #216]	@ (800cff4 <ProcessRadioTxDone+0x148>)
 800cf1c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800cf20:	2b02      	cmp	r3, #2
 800cf22:	d004      	beq.n	800cf2e <ProcessRadioTxDone+0x82>
 800cf24:	4b36      	ldr	r3, [pc, #216]	@ (800d000 <ProcessRadioTxDone+0x154>)
 800cf26:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d019      	beq.n	800cf62 <ProcessRadioTxDone+0xb6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800cf2e:	2316      	movs	r3, #22
 800cf30:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cf34:	4b2f      	ldr	r3, [pc, #188]	@ (800cff4 <ProcessRadioTxDone+0x148>)
 800cf36:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800cf3a:	f107 0220 	add.w	r2, r7, #32
 800cf3e:	4611      	mov	r1, r2
 800cf40:	4618      	mov	r0, r3
 800cf42:	f006 fcf9 	bl	8013938 <RegionGetPhyParam>
 800cf46:	4603      	mov	r3, r0
 800cf48:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800cf4a:	4b2d      	ldr	r3, [pc, #180]	@ (800d000 <ProcessRadioTxDone+0x154>)
 800cf4c:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	4413      	add	r3, r2
 800cf54:	4619      	mov	r1, r3
 800cf56:	482d      	ldr	r0, [pc, #180]	@ (800d00c <ProcessRadioTxDone+0x160>)
 800cf58:	f00e fdc8 	bl	801baec <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800cf5c:	482b      	ldr	r0, [pc, #172]	@ (800d00c <ProcessRadioTxDone+0x160>)
 800cf5e:	f00e fce7 	bl	801b930 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800cf62:	4b26      	ldr	r3, [pc, #152]	@ (800cffc <ProcessRadioTxDone+0x150>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a23      	ldr	r2, [pc, #140]	@ (800cff4 <ProcessRadioTxDone+0x148>)
 800cf68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800cf6a:	4b25      	ldr	r3, [pc, #148]	@ (800d000 <ProcessRadioTxDone+0x154>)
 800cf6c:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 800cf70:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800cf72:	4b22      	ldr	r3, [pc, #136]	@ (800cffc <ProcessRadioTxDone+0x150>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800cf78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f00e f817 	bl	801afb0 <SysTimeGetMcuTime>
 800cf82:	4638      	mov	r0, r7
 800cf84:	4b1b      	ldr	r3, [pc, #108]	@ (800cff4 <ProcessRadioTxDone+0x148>)
 800cf86:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 800cf8a:	9200      	str	r2, [sp, #0]
 800cf8c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cf90:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800cf94:	ca06      	ldmia	r2, {r1, r2}
 800cf96:	f00d ff6c 	bl	801ae72 <SysTimeSub>
 800cf9a:	f107 0314 	add.w	r3, r7, #20
 800cf9e:	463a      	mov	r2, r7
 800cfa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cfa4:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800cfa8:	4b15      	ldr	r3, [pc, #84]	@ (800d000 <ProcessRadioTxDone+0x154>)
 800cfaa:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800cfae:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800cfb4:	4b0f      	ldr	r3, [pc, #60]	@ (800cff4 <ProcessRadioTxDone+0x148>)
 800cfb6:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d101      	bne.n	800cfc2 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800cfc2:	4b0c      	ldr	r3, [pc, #48]	@ (800cff4 <ProcessRadioTxDone+0x148>)
 800cfc4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800cfc8:	f107 0208 	add.w	r2, r7, #8
 800cfcc:	4611      	mov	r1, r2
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f006 fcd3 	bl	801397a <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800cfd4:	4b0a      	ldr	r3, [pc, #40]	@ (800d000 <ProcessRadioTxDone+0x154>)
 800cfd6:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800cfda:	f083 0301 	eor.w	r3, r3, #1
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d003      	beq.n	800cfec <ProcessRadioTxDone+0x140>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cfe4:	4b06      	ldr	r3, [pc, #24]	@ (800d000 <ProcessRadioTxDone+0x154>)
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    }
#endif /* LORAMAC_VERSION */
}
 800cfec:	bf00      	nop
 800cfee:	3740      	adds	r7, #64	@ 0x40
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	20000a70 	.word	0x20000a70
 800cff8:	0801d86c 	.word	0x0801d86c
 800cffc:	200011ec 	.word	0x200011ec
 800d000:	20000568 	.word	0x20000568
 800d004:	200008e8 	.word	0x200008e8
 800d008:	20000900 	.word	0x20000900
 800d00c:	2000095c 	.word	0x2000095c

0800d010 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800d014:	4b10      	ldr	r3, [pc, #64]	@ (800d058 <PrepareRxDoneAbort+0x48>)
 800d016:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800d01a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d01e:	4a0e      	ldr	r2, [pc, #56]	@ (800d058 <PrepareRxDoneAbort+0x48>)
 800d020:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800d024:	4b0c      	ldr	r3, [pc, #48]	@ (800d058 <PrepareRxDoneAbort+0x48>)
 800d026:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d002      	beq.n	800d034 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800d02e:	2000      	movs	r0, #0
 800d030:	f001 f950 	bl	800e2d4 <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800d034:	4a08      	ldr	r2, [pc, #32]	@ (800d058 <PrepareRxDoneAbort+0x48>)
 800d036:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d03a:	f043 0302 	orr.w	r3, r3, #2
 800d03e:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d042:	4a05      	ldr	r2, [pc, #20]	@ (800d058 <PrepareRxDoneAbort+0x48>)
 800d044:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d048:	f043 0310 	orr.w	r3, r3, #16
 800d04c:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481

    UpdateRxSlotIdleState( );
 800d050:	f7ff ff14 	bl	800ce7c <UpdateRxSlotIdleState>
}
 800d054:	bf00      	nop
 800d056:	bd80      	pop	{r7, pc}
 800d058:	20000568 	.word	0x20000568

0800d05c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800d05c:	b5b0      	push	{r4, r5, r7, lr}
 800d05e:	b0aa      	sub	sp, #168	@ 0xa8
 800d060:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d062:	2313      	movs	r3, #19
 800d064:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800d068:	4b78      	ldr	r3, [pc, #480]	@ (800d24c <ProcessRadioRxDone+0x1f0>)
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint16_t size = RxDoneParams.Size;
 800d070:	4b76      	ldr	r3, [pc, #472]	@ (800d24c <ProcessRadioRxDone+0x1f0>)
 800d072:	891b      	ldrh	r3, [r3, #8]
 800d074:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 800d078:	4b74      	ldr	r3, [pc, #464]	@ (800d24c <ProcessRadioRxDone+0x1f0>)
 800d07a:	895b      	ldrh	r3, [r3, #10]
 800d07c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    int8_t snr = RxDoneParams.Snr;
 800d080:	4b72      	ldr	r3, [pc, #456]	@ (800d24c <ProcessRadioRxDone+0x1f0>)
 800d082:	7b1b      	ldrb	r3, [r3, #12]
 800d084:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    uint8_t pktHeaderLen = 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    uint32_t downLinkCounter = 0;
 800d08e:	2300      	movs	r3, #0
 800d090:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800d092:	4b6f      	ldr	r3, [pc, #444]	@ (800d250 <ProcessRadioRxDone+0x1f4>)
 800d094:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d098:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t multicast = 0;
 800d09c:	2300      	movs	r3, #0
 800d09e:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800d0ae:	4b69      	ldr	r3, [pc, #420]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    MacCtx.RxStatus.Rssi = rssi;
 800d0b6:	4a67      	ldr	r2, [pc, #412]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d0b8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800d0bc:	f8a2 347c 	strh.w	r3, [r2, #1148]	@ 0x47c
    MacCtx.RxStatus.Snr = snr;
 800d0c0:	4a64      	ldr	r2, [pc, #400]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d0c2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d0c6:	f882 347e 	strb.w	r3, [r2, #1150]	@ 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800d0ca:	4b62      	ldr	r3, [pc, #392]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d0cc:	f893 2480 	ldrb.w	r2, [r3, #1152]	@ 0x480
 800d0d0:	4b60      	ldr	r3, [pc, #384]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d0d2:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
    MacCtx.McpsIndication.Port = 0;
 800d0d6:	4b5f      	ldr	r3, [pc, #380]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 800d0de:	4b5d      	ldr	r3, [pc, #372]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800d0e6:	4b5b      	ldr	r3, [pc, #364]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 800d0ee:	4b59      	ldr	r3, [pc, #356]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 800d0f6:	4b57      	ldr	r3, [pc, #348]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.RxData = false;
 800d0fe:	4b55      	ldr	r3, [pc, #340]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d100:	2200      	movs	r2, #0
 800d102:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.AckReceived = false;
 800d106:	4b53      	ldr	r3, [pc, #332]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d108:	2200      	movs	r2, #0
 800d10a:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800d10e:	4b51      	ldr	r3, [pc, #324]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d110:	2200      	movs	r2, #0
 800d112:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d116:	4b4f      	ldr	r3, [pc, #316]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d118:	2200      	movs	r2, #0
 800d11a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 800d11e:	4b4d      	ldr	r3, [pc, #308]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d120:	2200      	movs	r2, #0
 800d122:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800d126:	4b4b      	ldr	r3, [pc, #300]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d128:	2200      	movs	r2, #0
 800d12a:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800d12e:	4b4a      	ldr	r3, [pc, #296]	@ (800d258 <ProcessRadioRxDone+0x1fc>)
 800d130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d132:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800d134:	4849      	ldr	r0, [pc, #292]	@ (800d25c <ProcessRadioRxDone+0x200>)
 800d136:	f00e fc69 	bl	801ba0c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800d13a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d13e:	4619      	mov	r1, r3
 800d140:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800d144:	f004 fc59 	bl	80119fa <LoRaMacClassBRxBeacon>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00b      	beq.n	800d166 <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800d14e:	4a41      	ldr	r2, [pc, #260]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d150:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800d154:	f8a2 3472 	strh.w	r3, [r2, #1138]	@ 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800d158:	4a3e      	ldr	r2, [pc, #248]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d15a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d15e:	f882 3474 	strb.w	r3, [r2, #1140]	@ 0x474
        return;
 800d162:	f000 bc1f 	b.w	800d9a4 <ProcessRadioRxDone+0x948>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d166:	4b3a      	ldr	r3, [pc, #232]	@ (800d250 <ProcessRadioRxDone+0x1f4>)
 800d168:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d11e      	bne.n	800d1ae <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d170:	f004 fc56 	bl	8011a20 <LoRaMacClassBIsPingExpected>
 800d174:	4603      	mov	r3, r0
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00a      	beq.n	800d190 <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d17a:	2000      	movs	r0, #0
 800d17c:	f004 fc07 	bl	801198e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d180:	2000      	movs	r0, #0
 800d182:	f004 fc28 	bl	80119d6 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800d186:	4b33      	ldr	r3, [pc, #204]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d188:	2204      	movs	r2, #4
 800d18a:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
 800d18e:	e00e      	b.n	800d1ae <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d190:	f004 fc4d 	bl	8011a2e <LoRaMacClassBIsMulticastExpected>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d009      	beq.n	800d1ae <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d19a:	2000      	movs	r0, #0
 800d19c:	f004 fc01 	bl	80119a2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	f004 fc21 	bl	80119e8 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800d1a6:	4b2b      	ldr	r3, [pc, #172]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d1a8:	2205      	movs	r2, #5
 800d1aa:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800d1ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d106      	bne.n	800d1c4 <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d1b6:	4b27      	ldr	r3, [pc, #156]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
        PrepareRxDoneAbort( );
 800d1be:	f7ff ff27 	bl	800d010 <PrepareRxDoneAbort>
        return;
 800d1c2:	e3ef      	b.n	800d9a4 <ProcessRadioRxDone+0x948>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800d1c4:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800d1c8:	1c5a      	adds	r2, r3, #1
 800d1ca:	f887 2086 	strb.w	r2, [r7, #134]	@ 0x86
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d1d4:	4413      	add	r3, r2
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800d1dc:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800d1e0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d1e4:	b2db      	uxtb	r3, r3
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	2b06      	cmp	r3, #6
 800d1ea:	f200 83b4 	bhi.w	800d956 <ProcessRadioRxDone+0x8fa>
 800d1ee:	a201      	add	r2, pc, #4	@ (adr r2, 800d1f4 <ProcessRadioRxDone+0x198>)
 800d1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1f4:	0800d211 	.word	0x0800d211
 800d1f8:	0800d957 	.word	0x0800d957
 800d1fc:	0800d3f1 	.word	0x0800d3f1
 800d200:	0800d957 	.word	0x0800d957
 800d204:	0800d3e9 	.word	0x0800d3e9
 800d208:	0800d957 	.word	0x0800d957
 800d20c:	0800d8fb 	.word	0x0800d8fb
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800d210:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d214:	2b10      	cmp	r3, #16
 800d216:	d806      	bhi.n	800d226 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d218:	4b0e      	ldr	r3, [pc, #56]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d21a:	2201      	movs	r2, #1
 800d21c:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d220:	f7ff fef6 	bl	800d010 <PrepareRxDoneAbort>
                return;
 800d224:	e3be      	b.n	800d9a4 <ProcessRadioRxDone+0x948>
            }
            macMsgJoinAccept.Buffer = payload;
 800d226:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d22a:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 800d22c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d230:	b2db      	uxtb	r3, r3
 800d232:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d234:	4b06      	ldr	r3, [pc, #24]	@ (800d250 <ProcessRadioRxDone+0x1f4>)
 800d236:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d010      	beq.n	800d260 <ProcessRadioRxDone+0x204>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d23e:	4b05      	ldr	r3, [pc, #20]	@ (800d254 <ProcessRadioRxDone+0x1f8>)
 800d240:	2201      	movs	r2, #1
 800d242:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d246:	f7ff fee3 	bl	800d010 <PrepareRxDoneAbort>
                return;
 800d24a:	e3ab      	b.n	800d9a4 <ProcessRadioRxDone+0x948>
 800d24c:	200011f0 	.word	0x200011f0
 800d250:	20000a70 	.word	0x20000a70
 800d254:	20000568 	.word	0x20000568
 800d258:	0801d86c 	.word	0x0801d86c
 800d25c:	20000900 	.word	0x20000900
            }

            SecureElementGetJoinEui( joinEui );
 800d260:	1d3b      	adds	r3, r7, #4
 800d262:	4618      	mov	r0, r3
 800d264:	f7fe fac0 	bl	800b7e8 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800d268:	f107 0214 	add.w	r2, r7, #20
 800d26c:	1d3b      	adds	r3, r7, #4
 800d26e:	4619      	mov	r1, r3
 800d270:	20ff      	movs	r0, #255	@ 0xff
 800d272:	f005 fde3 	bl	8012e3c <LoRaMacCryptoHandleJoinAccept>
 800d276:	4603      	mov	r3, r0
 800d278:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800d27c:	2300      	movs	r3, #0
 800d27e:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d282:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d286:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	b25b      	sxtb	r3, r3
 800d28e:	703b      	strb	r3, [r7, #0]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d290:	4bbb      	ldr	r3, [pc, #748]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d292:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d296:	707b      	strb	r3, [r7, #1]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800d298:	4bb9      	ldr	r3, [pc, #740]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d29a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d29e:	4639      	mov	r1, r7
 800d2a0:	2207      	movs	r2, #7
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f006 fb96 	bl	80139d4 <RegionVerify>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800d2ae:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f040 808c 	bne.w	800d3d0 <ProcessRadioRxDone+0x374>
 800d2b8:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f000 8087 	beq.w	800d3d0 <ProcessRadioRxDone+0x374>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800d2c2:	7f7b      	ldrb	r3, [r7, #29]
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	4bae      	ldr	r3, [pc, #696]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d2c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800d2cc:	4bac      	ldr	r3, [pc, #688]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d2ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800d2d2:	7fbb      	ldrb	r3, [r7, #30]
 800d2d4:	021b      	lsls	r3, r3, #8
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	4aa9      	ldr	r2, [pc, #676]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d2da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800d2de:	4ba8      	ldr	r3, [pc, #672]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d2e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800d2e4:	7ffb      	ldrb	r3, [r7, #31]
 800d2e6:	041b      	lsls	r3, r3, #16
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	4aa5      	ldr	r2, [pc, #660]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d2ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800d2f0:	6a3b      	ldr	r3, [r7, #32]
 800d2f2:	4aa3      	ldr	r2, [pc, #652]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d2f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800d2f8:	4ba1      	ldr	r3, [pc, #644]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d2fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d2fe:	4619      	mov	r1, r3
 800d300:	2002      	movs	r0, #2
 800d302:	f7fe fa89 	bl	800b818 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800d306:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d30a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	461a      	mov	r2, r3
 800d312:	4b9b      	ldr	r3, [pc, #620]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d314:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d318:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d31c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d320:	b2db      	uxtb	r3, r3
 800d322:	461a      	mov	r2, r3
 800d324:	4b96      	ldr	r3, [pc, #600]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d326:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d32a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d32e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d332:	b2db      	uxtb	r3, r3
 800d334:	461a      	mov	r2, r3
 800d336:	4b92      	ldr	r3, [pc, #584]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d338:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800d33c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d340:	461a      	mov	r2, r3
 800d342:	4b8f      	ldr	r3, [pc, #572]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d344:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800d346:	4b8e      	ldr	r3, [pc, #568]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d102      	bne.n	800d354 <ProcessRadioRxDone+0x2f8>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800d34e:	4b8c      	ldr	r3, [pc, #560]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d350:	2201      	movs	r2, #1
 800d352:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800d354:	4b8a      	ldr	r3, [pc, #552]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d358:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d35c:	fb02 f303 	mul.w	r3, r2, r3
 800d360:	4a87      	ldr	r2, [pc, #540]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d362:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800d364:	4b86      	ldr	r3, [pc, #536]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d368:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d36c:	4a84      	ldr	r2, [pc, #528]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d36e:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800d370:	4b83      	ldr	r3, [pc, #524]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d372:	2201      	movs	r2, #1
 800d374:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800d378:	4b81      	ldr	r3, [pc, #516]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d37a:	2200      	movs	r2, #0
 800d37c:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800d380:	f107 0314 	add.w	r3, r7, #20
 800d384:	3312      	adds	r3, #18
 800d386:	67bb      	str	r3, [r7, #120]	@ 0x78
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800d388:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	3b11      	subs	r3, #17
 800d390:	b2db      	uxtb	r3, r3
 800d392:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800d396:	4b7a      	ldr	r3, [pc, #488]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d398:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d39c:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800d3a0:	4611      	mov	r1, r2
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f006 fb37 	bl	8013a16 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d3a8:	4b75      	ldr	r3, [pc, #468]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d3aa:	2202      	movs	r2, #2
 800d3ac:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800d3b0:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f005 f81b 	bl	80123f0 <LoRaMacConfirmQueueIsCmdActive>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f000 82d2 	beq.w	800d966 <ProcessRadioRxDone+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800d3c2:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	f004 ff85 	bl	80122d8 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800d3ce:	e2ca      	b.n	800d966 <ProcessRadioRxDone+0x90a>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800d3d0:	2001      	movs	r0, #1
 800d3d2:	f005 f80d 	bl	80123f0 <LoRaMacConfirmQueueIsCmdActive>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	f000 82c3 	beq.w	800d964 <ProcessRadioRxDone+0x908>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800d3de:	2101      	movs	r1, #1
 800d3e0:	2007      	movs	r0, #7
 800d3e2:	f004 ff79 	bl	80122d8 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800d3e6:	e2bd      	b.n	800d964 <ProcessRadioRxDone+0x908>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800d3e8:	4b66      	ldr	r3, [pc, #408]	@ (800d584 <ProcessRadioRxDone+0x528>)
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d3f0:	4b63      	ldr	r3, [pc, #396]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d3f2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d3f6:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800d3fa:	4b62      	ldr	r3, [pc, #392]	@ (800d584 <ProcessRadioRxDone+0x528>)
 800d3fc:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 800d400:	b25b      	sxtb	r3, r3
 800d402:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800d406:	230d      	movs	r3, #13
 800d408:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800d40c:	4b5c      	ldr	r3, [pc, #368]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d40e:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800d412:	2b00      	cmp	r3, #0
 800d414:	d002      	beq.n	800d41c <ProcessRadioRxDone+0x3c0>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800d416:	230e      	movs	r3, #14
 800d418:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d41c:	4b58      	ldr	r3, [pc, #352]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d41e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d422:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800d426:	4611      	mov	r1, r2
 800d428:	4618      	mov	r0, r3
 800d42a:	f006 fa85 	bl	8013938 <RegionGetPhyParam>
 800d42e:	4603      	mov	r3, r0
 800d430:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800d432:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d436:	3b0d      	subs	r3, #13
 800d438:	b29b      	uxth	r3, r3
 800d43a:	b21b      	sxth	r3, r3
 800d43c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d440:	b21a      	sxth	r2, r3
 800d442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d444:	b21b      	sxth	r3, r3
 800d446:	429a      	cmp	r2, r3
 800d448:	dc03      	bgt.n	800d452 <ProcessRadioRxDone+0x3f6>
 800d44a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d44e:	2b0b      	cmp	r3, #11
 800d450:	d806      	bhi.n	800d460 <ProcessRadioRxDone+0x404>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d452:	4b4c      	ldr	r3, [pc, #304]	@ (800d584 <ProcessRadioRxDone+0x528>)
 800d454:	2201      	movs	r2, #1
 800d456:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d45a:	f7ff fdd9 	bl	800d010 <PrepareRxDoneAbort>
                return;
 800d45e:	e2a1      	b.n	800d9a4 <ProcessRadioRxDone+0x948>
            }
            macMsgData.Buffer = payload;
 800d460:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d464:	63fb      	str	r3, [r7, #60]	@ 0x3c
            macMsgData.BufSize = size;
 800d466:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d46a:	b2db      	uxtb	r3, r3
 800d46c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800d470:	4b45      	ldr	r3, [pc, #276]	@ (800d588 <ProcessRadioRxDone+0x52c>)
 800d472:	663b      	str	r3, [r7, #96]	@ 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800d474:	23ff      	movs	r3, #255	@ 0xff
 800d476:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800d47a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d47e:	4618      	mov	r0, r3
 800d480:	f005 ffdc 	bl	801343c <LoRaMacParserData>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	d006      	beq.n	800d498 <ProcessRadioRxDone+0x43c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d48a:	4b3e      	ldr	r3, [pc, #248]	@ (800d584 <ProcessRadioRxDone+0x528>)
 800d48c:	2201      	movs	r2, #1
 800d48e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d492:	f7ff fdbd 	bl	800d010 <PrepareRxDoneAbort>
                return;
 800d496:	e285      	b.n	800d9a4 <ProcessRadioRxDone+0x948>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800d498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d49a:	4a3a      	ldr	r2, [pc, #232]	@ (800d584 <ProcessRadioRxDone+0x528>)
 800d49c:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800d4a0:	f107 020e 	add.w	r2, r7, #14
 800d4a4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d4a8:	4611      	mov	r1, r2
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f002 fc79 	bl	800fda2 <DetermineFrameType>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d006      	beq.n	800d4c4 <ProcessRadioRxDone+0x468>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d4b6:	4b33      	ldr	r3, [pc, #204]	@ (800d584 <ProcessRadioRxDone+0x528>)
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d4be:	f7ff fda7 	bl	800d010 <PrepareRxDoneAbort>
                return;
 800d4c2:	e26f      	b.n	800d9a4 <ProcessRadioRxDone+0x948>
            }

            //Check if it is a multicast message
            multicast = 0;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            downLinkCounter = 0;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800d4d4:	e04f      	b.n	800d576 <ProcessRadioRxDone+0x51a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800d4d6:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800d4da:	4929      	ldr	r1, [pc, #164]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d4dc:	4613      	mov	r3, r2
 800d4de:	005b      	lsls	r3, r3, #1
 800d4e0:	4413      	add	r3, r2
 800d4e2:	011b      	lsls	r3, r3, #4
 800d4e4:	440b      	add	r3, r1
 800d4e6:	33ec      	adds	r3, #236	@ 0xec
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d13d      	bne.n	800d56c <ProcessRadioRxDone+0x510>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800d4f0:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800d4f4:	4922      	ldr	r1, [pc, #136]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	005b      	lsls	r3, r3, #1
 800d4fa:	4413      	add	r3, r2
 800d4fc:	011b      	lsls	r3, r3, #4
 800d4fe:	440b      	add	r3, r1
 800d500:	33e9      	adds	r3, #233	@ 0xe9
 800d502:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800d504:	2b00      	cmp	r3, #0
 800d506:	d031      	beq.n	800d56c <ProcessRadioRxDone+0x510>
                {
                    multicast = 1;
 800d508:	2301      	movs	r3, #1
 800d50a:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800d50e:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800d512:	491b      	ldr	r1, [pc, #108]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d514:	4613      	mov	r3, r2
 800d516:	005b      	lsls	r3, r3, #1
 800d518:	4413      	add	r3, r2
 800d51a:	011b      	lsls	r3, r3, #4
 800d51c:	440b      	add	r3, r1
 800d51e:	33ea      	adds	r3, #234	@ 0xea
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800d526:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800d52a:	4915      	ldr	r1, [pc, #84]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d52c:	4613      	mov	r3, r2
 800d52e:	005b      	lsls	r3, r3, #1
 800d530:	4413      	add	r3, r2
 800d532:	011b      	lsls	r3, r3, #4
 800d534:	440b      	add	r3, r1
 800d536:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800d540:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800d544:	490e      	ldr	r1, [pc, #56]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d546:	4613      	mov	r3, r2
 800d548:	005b      	lsls	r3, r3, #1
 800d54a:	4413      	add	r3, r2
 800d54c:	011b      	lsls	r3, r3, #4
 800d54e:	440b      	add	r3, r1
 800d550:	33ec      	adds	r3, #236	@ 0xec
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800d558:	4b09      	ldr	r3, [pc, #36]	@ (800d580 <ProcessRadioRxDone+0x524>)
 800d55a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d55e:	2b02      	cmp	r3, #2
 800d560:	d114      	bne.n	800d58c <ProcessRadioRxDone+0x530>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800d562:	4b08      	ldr	r3, [pc, #32]	@ (800d584 <ProcessRadioRxDone+0x528>)
 800d564:	2203      	movs	r2, #3
 800d566:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
                    }
                    break;
 800d56a:	e00f      	b.n	800d58c <ProcessRadioRxDone+0x530>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d56c:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800d570:	3301      	adds	r3, #1
 800d572:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800d576:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d0ab      	beq.n	800d4d6 <ProcessRadioRxDone+0x47a>
 800d57e:	e006      	b.n	800d58e <ProcessRadioRxDone+0x532>
 800d580:	20000a70 	.word	0x20000a70
 800d584:	20000568 	.word	0x20000568
 800d588:	200007a0 	.word	0x200007a0
                    break;
 800d58c:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800d58e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800d592:	2b01      	cmp	r3, #1
 800d594:	d117      	bne.n	800d5c6 <ProcessRadioRxDone+0x56a>
 800d596:	7bbb      	ldrb	r3, [r7, #14]
 800d598:	2b03      	cmp	r3, #3
 800d59a:	d10d      	bne.n	800d5b8 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800d59c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d5a0:	f003 0320 	and.w	r3, r3, #32
 800d5a4:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d106      	bne.n	800d5b8 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800d5aa:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d5ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5b2:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d006      	beq.n	800d5c6 <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d5b8:	4bb3      	ldr	r3, [pc, #716]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d5c0:	f7ff fd26 	bl	800d010 <PrepareRxDoneAbort>
                return;
 800d5c4:	e1ee      	b.n	800d9a4 <ProcessRadioRxDone+0x948>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800d5c6:	2315      	movs	r3, #21
 800d5c8:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d5cc:	4baf      	ldr	r3, [pc, #700]	@ (800d88c <ProcessRadioRxDone+0x830>)
 800d5ce:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d5d2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800d5d6:	4611      	mov	r1, r2
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f006 f9ad 	bl	8013938 <RegionGetPhyParam>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	66fb      	str	r3, [r7, #108]	@ 0x6c

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800d5e2:	7bb9      	ldrb	r1, [r7, #14]
 800d5e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	4da8      	ldr	r5, [pc, #672]	@ (800d88c <ProcessRadioRxDone+0x830>)
 800d5ea:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800d5ee:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800d5f2:	f107 0210 	add.w	r2, r7, #16
 800d5f6:	9202      	str	r2, [sp, #8]
 800d5f8:	f107 020f 	add.w	r2, r7, #15
 800d5fc:	9201      	str	r2, [sp, #4]
 800d5fe:	9300      	str	r3, [sp, #0]
 800d600:	f8d5 3128 	ldr.w	r3, [r5, #296]	@ 0x128
 800d604:	4622      	mov	r2, r4
 800d606:	f000 fe8d 	bl	800e324 <GetFCntDown>
 800d60a:	4603      	mov	r3, r0
 800d60c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d610:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d614:	2b00      	cmp	r3, #0
 800d616:	d035      	beq.n	800d684 <ProcessRadioRxDone+0x628>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800d618:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d61c:	2b07      	cmp	r3, #7
 800d61e:	d119      	bne.n	800d654 <ProcessRadioRxDone+0x5f8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800d620:	4b99      	ldr	r3, [pc, #612]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d622:	2208      	movs	r2, #8
 800d624:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800d628:	4b98      	ldr	r3, [pc, #608]	@ (800d88c <ProcessRadioRxDone+0x830>)
 800d62a:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d11d      	bne.n	800d66e <ProcessRadioRxDone+0x612>
 800d632:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800d636:	f023 031f 	bic.w	r3, r3, #31
 800d63a:	b2db      	uxtb	r3, r3
 800d63c:	2ba0      	cmp	r3, #160	@ 0xa0
 800d63e:	d116      	bne.n	800d66e <ProcessRadioRxDone+0x612>
 800d640:	4b92      	ldr	r3, [pc, #584]	@ (800d88c <ProcessRadioRxDone+0x830>)
 800d642:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d644:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d646:	429a      	cmp	r2, r3
 800d648:	d111      	bne.n	800d66e <ProcessRadioRxDone+0x612>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800d64a:	4b90      	ldr	r3, [pc, #576]	@ (800d88c <ProcessRadioRxDone+0x830>)
 800d64c:	2201      	movs	r2, #1
 800d64e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800d652:	e00c      	b.n	800d66e <ProcessRadioRxDone+0x612>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800d654:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d658:	2b08      	cmp	r3, #8
 800d65a:	d104      	bne.n	800d666 <ProcessRadioRxDone+0x60a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800d65c:	4b8a      	ldr	r3, [pc, #552]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d65e:	220a      	movs	r2, #10
 800d660:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800d664:	e003      	b.n	800d66e <ProcessRadioRxDone+0x612>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d666:	4b88      	ldr	r3, [pc, #544]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d668:	2201      	movs	r2, #1
 800d66a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	4a85      	ldr	r2, [pc, #532]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d672:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	4a83      	ldr	r2, [pc, #524]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d67a:	f8c2 3460 	str.w	r3, [r2, #1120]	@ 0x460
                PrepareRxDoneAbort( );
 800d67e:	f7ff fcc7 	bl	800d010 <PrepareRxDoneAbort>
                return;
 800d682:	e18f      	b.n	800d9a4 <ProcessRadioRxDone+0x948>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800d684:	7bfa      	ldrb	r2, [r7, #15]
 800d686:	6939      	ldr	r1, [r7, #16]
 800d688:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800d68c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d690:	9300      	str	r3, [sp, #0]
 800d692:	460b      	mov	r3, r1
 800d694:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800d698:	f005 fd32 	bl	8013100 <LoRaMacCryptoUnsecureMessage>
 800d69c:	4603      	mov	r3, r0
 800d69e:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d6a2:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d00f      	beq.n	800d6ca <ProcessRadioRxDone+0x66e>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800d6aa:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d6ae:	2b02      	cmp	r3, #2
 800d6b0:	d104      	bne.n	800d6bc <ProcessRadioRxDone+0x660>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800d6b2:	4b75      	ldr	r3, [pc, #468]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d6b4:	220b      	movs	r2, #11
 800d6b6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800d6ba:	e003      	b.n	800d6c4 <ProcessRadioRxDone+0x668>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800d6bc:	4b72      	ldr	r3, [pc, #456]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d6be:	220c      	movs	r2, #12
 800d6c0:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                }
                PrepareRxDoneAbort( );
 800d6c4:	f7ff fca4 	bl	800d010 <PrepareRxDoneAbort>
                return;
 800d6c8:	e16c      	b.n	800d9a4 <ProcessRadioRxDone+0x948>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d6ca:	4b6f      	ldr	r3, [pc, #444]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 800d6d2:	4a6d      	ldr	r2, [pc, #436]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d6d4:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800d6d8:	f882 341a 	strb.w	r3, [r2, #1050]	@ 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 800d6dc:	4b6a      	ldr	r3, [pc, #424]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 800d6e4:	4b68      	ldr	r3, [pc, #416]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	4a66      	ldr	r2, [pc, #408]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d6f0:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	4a64      	ldr	r2, [pc, #400]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d6f8:	f8c2 3460 	str.w	r3, [r2, #1120]	@ 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800d6fc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d700:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d704:	b2db      	uxtb	r3, r3
 800d706:	2b00      	cmp	r3, #0
 800d708:	bf14      	ite	ne
 800d70a:	2301      	movne	r3, #1
 800d70c:	2300      	moveq	r3, #0
 800d70e:	b2da      	uxtb	r2, r3
 800d710:	4b5d      	ldr	r3, [pc, #372]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d712:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d716:	4b5c      	ldr	r3, [pc, #368]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d718:	2200      	movs	r2, #0
 800d71a:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800d71e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d722:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2b00      	cmp	r3, #0
 800d72a:	bf14      	ite	ne
 800d72c:	2301      	movne	r3, #1
 800d72e:	2300      	moveq	r3, #0
 800d730:	b2da      	uxtb	r2, r3
 800d732:	4b55      	ldr	r3, [pc, #340]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d734:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d738:	4b53      	ldr	r3, [pc, #332]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d73a:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d004      	beq.n	800d74c <ProcessRadioRxDone+0x6f0>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800d742:	4b51      	ldr	r3, [pc, #324]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d744:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d102      	bne.n	800d752 <ProcessRadioRxDone+0x6f6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800d74c:	4b4f      	ldr	r3, [pc, #316]	@ (800d88c <ProcessRadioRxDone+0x830>)
 800d74e:	2200      	movs	r2, #0
 800d750:	629a      	str	r2, [r3, #40]	@ 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800d752:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800d756:	2b01      	cmp	r3, #1
 800d758:	d104      	bne.n	800d764 <ProcessRadioRxDone+0x708>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800d75a:	4b4b      	ldr	r3, [pc, #300]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d75c:	2202      	movs	r2, #2
 800d75e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800d762:	e01f      	b.n	800d7a4 <ProcessRadioRxDone+0x748>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800d764:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800d768:	f023 031f 	bic.w	r3, r3, #31
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	2ba0      	cmp	r3, #160	@ 0xa0
 800d770:	d110      	bne.n	800d794 <ProcessRadioRxDone+0x738>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800d772:	4b46      	ldr	r3, [pc, #280]	@ (800d88c <ProcessRadioRxDone+0x830>)
 800d774:	2201      	movs	r2, #1
 800d776:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800d77a:	4b44      	ldr	r3, [pc, #272]	@ (800d88c <ProcessRadioRxDone+0x830>)
 800d77c:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800d780:	2b00      	cmp	r3, #0
 800d782:	d102      	bne.n	800d78a <ProcessRadioRxDone+0x72e>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800d784:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d786:	4a41      	ldr	r2, [pc, #260]	@ (800d88c <ProcessRadioRxDone+0x830>)
 800d788:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800d78a:	4b3f      	ldr	r3, [pc, #252]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d78c:	2201      	movs	r2, #1
 800d78e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800d792:	e007      	b.n	800d7a4 <ProcessRadioRxDone+0x748>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800d794:	4b3d      	ldr	r3, [pc, #244]	@ (800d88c <ProcessRadioRxDone+0x830>)
 800d796:	2200      	movs	r2, #0
 800d798:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d79c:	4b3a      	ldr	r3, [pc, #232]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800d7a4:	4b39      	ldr	r3, [pc, #228]	@ (800d88c <ProcessRadioRxDone+0x830>)
 800d7a6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d106      	bne.n	800d7bc <ProcessRadioRxDone+0x760>
 800d7ae:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d7b2:	f003 0310 	and.w	r3, r3, #16
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d008      	beq.n	800d7ce <ProcessRadioRxDone+0x772>
 800d7bc:	4b33      	ldr	r3, [pc, #204]	@ (800d88c <ProcessRadioRxDone+0x830>)
 800d7be:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d103      	bne.n	800d7ce <ProcessRadioRxDone+0x772>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800d7c6:	4b30      	ldr	r3, [pc, #192]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800d7ce:	4b2e      	ldr	r3, [pc, #184]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d7d0:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800d7d4:	4a2c      	ldr	r2, [pc, #176]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d7d6:	f892 2434 	ldrb.w	r2, [r2, #1076]	@ 0x434
 800d7da:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f001 ff02 	bl	800f5e8 <RemoveMacCommands>

            switch( fType )
 800d7e4:	7bbb      	ldrb	r3, [r7, #14]
 800d7e6:	2b03      	cmp	r3, #3
 800d7e8:	d878      	bhi.n	800d8dc <ProcessRadioRxDone+0x880>
 800d7ea:	a201      	add	r2, pc, #4	@ (adr r2, 800d7f0 <ProcessRadioRxDone+0x794>)
 800d7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7f0:	0800d801 	.word	0x0800d801
 800d7f4:	0800d851 	.word	0x0800d851
 800d7f8:	0800d891 	.word	0x0800d891
 800d7fc:	0800d8b7 	.word	0x0800d8b7
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d800:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d804:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	461c      	mov	r4, r3
 800d80c:	4b1e      	ldr	r3, [pc, #120]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d80e:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800d812:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800d816:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800d81a:	f102 0010 	add.w	r0, r2, #16
 800d81e:	9300      	str	r3, [sp, #0]
 800d820:	460b      	mov	r3, r1
 800d822:	4622      	mov	r2, r4
 800d824:	2100      	movs	r1, #0
 800d826:	f000 fef7 	bl	800e618 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d82a:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800d82e:	4b16      	ldr	r3, [pc, #88]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d830:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d834:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d836:	4a14      	ldr	r2, [pc, #80]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d838:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d83c:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800d840:	4b11      	ldr	r3, [pc, #68]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d842:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                    MacCtx.McpsIndication.RxData = true;
 800d846:	4b10      	ldr	r3, [pc, #64]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d848:	2201      	movs	r2, #1
 800d84a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    break;
 800d84e:	e04c      	b.n	800d8ea <ProcessRadioRxDone+0x88e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d850:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d854:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	461c      	mov	r4, r3
 800d85c:	4b0a      	ldr	r3, [pc, #40]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d85e:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800d862:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800d866:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800d86a:	f102 0010 	add.w	r0, r2, #16
 800d86e:	9300      	str	r3, [sp, #0]
 800d870:	460b      	mov	r3, r1
 800d872:	4622      	mov	r2, r4
 800d874:	2100      	movs	r1, #0
 800d876:	f000 fecf 	bl	800e618 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d87a:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800d87e:	4b02      	ldr	r3, [pc, #8]	@ (800d888 <ProcessRadioRxDone+0x82c>)
 800d880:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    break;
 800d884:	e031      	b.n	800d8ea <ProcessRadioRxDone+0x88e>
 800d886:	bf00      	nop
 800d888:	20000568 	.word	0x20000568
 800d88c:	20000a70 	.word	0x20000a70
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800d890:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800d892:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800d896:	4b45      	ldr	r3, [pc, #276]	@ (800d9ac <ProcessRadioRxDone+0x950>)
 800d898:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800d89c:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800d8a0:	9300      	str	r3, [sp, #0]
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	2100      	movs	r1, #0
 800d8a6:	f000 feb7 	bl	800e618 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d8aa:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800d8ae:	4b3f      	ldr	r3, [pc, #252]	@ (800d9ac <ProcessRadioRxDone+0x950>)
 800d8b0:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    break;
 800d8b4:	e019      	b.n	800d8ea <ProcessRadioRxDone+0x88e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d8b6:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800d8ba:	4b3c      	ldr	r3, [pc, #240]	@ (800d9ac <ProcessRadioRxDone+0x950>)
 800d8bc:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d8c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d8c2:	4a3a      	ldr	r2, [pc, #232]	@ (800d9ac <ProcessRadioRxDone+0x950>)
 800d8c4:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d8c8:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800d8cc:	4b37      	ldr	r3, [pc, #220]	@ (800d9ac <ProcessRadioRxDone+0x950>)
 800d8ce:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                    MacCtx.McpsIndication.RxData = true;
 800d8d2:	4b36      	ldr	r3, [pc, #216]	@ (800d9ac <ProcessRadioRxDone+0x950>)
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    break;
 800d8da:	e006      	b.n	800d8ea <ProcessRadioRxDone+0x88e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d8dc:	4b33      	ldr	r3, [pc, #204]	@ (800d9ac <ProcessRadioRxDone+0x950>)
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                    PrepareRxDoneAbort( );
 800d8e4:	f7ff fb94 	bl	800d010 <PrepareRxDoneAbort>
                    break;
 800d8e8:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d8ea:	4a30      	ldr	r2, [pc, #192]	@ (800d9ac <ProcessRadioRxDone+0x950>)
 800d8ec:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d8f0:	f043 0302 	orr.w	r3, r3, #2
 800d8f4:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481

            break;
 800d8f8:	e035      	b.n	800d966 <ProcessRadioRxDone+0x90a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800d8fa:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800d8fe:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800d902:	18d1      	adds	r1, r2, r3
 800d904:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800d908:	b29b      	uxth	r3, r3
 800d90a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800d90e:	1ad3      	subs	r3, r2, r3
 800d910:	b29b      	uxth	r3, r3
 800d912:	461a      	mov	r2, r3
 800d914:	4826      	ldr	r0, [pc, #152]	@ (800d9b0 <ProcessRadioRxDone+0x954>)
 800d916:	f009 fee2 	bl	80176de <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800d91a:	4b24      	ldr	r3, [pc, #144]	@ (800d9ac <ProcessRadioRxDone+0x950>)
 800d91c:	2203      	movs	r2, #3
 800d91e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d922:	4b22      	ldr	r3, [pc, #136]	@ (800d9ac <ProcessRadioRxDone+0x950>)
 800d924:	2200      	movs	r2, #0
 800d926:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800d92a:	4b20      	ldr	r3, [pc, #128]	@ (800d9ac <ProcessRadioRxDone+0x950>)
 800d92c:	4a20      	ldr	r2, [pc, #128]	@ (800d9b0 <ProcessRadioRxDone+0x954>)
 800d92e:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800d932:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d936:	b2da      	uxtb	r2, r3
 800d938:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800d93c:	1ad3      	subs	r3, r2, r3
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	4b1a      	ldr	r3, [pc, #104]	@ (800d9ac <ProcessRadioRxDone+0x950>)
 800d942:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d946:	4a19      	ldr	r2, [pc, #100]	@ (800d9ac <ProcessRadioRxDone+0x950>)
 800d948:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d94c:	f043 0302 	orr.w	r3, r3, #2
 800d950:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            break;
 800d954:	e007      	b.n	800d966 <ProcessRadioRxDone+0x90a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d956:	4b15      	ldr	r3, [pc, #84]	@ (800d9ac <ProcessRadioRxDone+0x950>)
 800d958:	2201      	movs	r2, #1
 800d95a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            PrepareRxDoneAbort( );
 800d95e:	f7ff fb57 	bl	800d010 <PrepareRxDoneAbort>
            break;
 800d962:	e000      	b.n	800d966 <ProcessRadioRxDone+0x90a>
            break;
 800d964:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800d966:	4b11      	ldr	r3, [pc, #68]	@ (800d9ac <ProcessRadioRxDone+0x950>)
 800d968:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d008      	beq.n	800d982 <ProcessRadioRxDone+0x926>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800d970:	4b0e      	ldr	r3, [pc, #56]	@ (800d9ac <ProcessRadioRxDone+0x950>)
 800d972:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 800d976:	2b00      	cmp	r3, #0
 800d978:	d00b      	beq.n	800d992 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 800d97a:	2000      	movs	r0, #0
 800d97c:	f000 fcaa 	bl	800e2d4 <OnAckTimeoutTimerEvent>
 800d980:	e007      	b.n	800d992 <ProcessRadioRxDone+0x936>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800d982:	4b0c      	ldr	r3, [pc, #48]	@ (800d9b4 <ProcessRadioRxDone+0x958>)
 800d984:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d988:	2b02      	cmp	r3, #2
 800d98a:	d102      	bne.n	800d992 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 800d98c:	2000      	movs	r0, #0
 800d98e:	f000 fca1 	bl	800e2d4 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d992:	4a06      	ldr	r2, [pc, #24]	@ (800d9ac <ProcessRadioRxDone+0x950>)
 800d994:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d998:	f043 0310 	orr.w	r3, r3, #16
 800d99c:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800d9a0:	f7ff fa6c 	bl	800ce7c <UpdateRxSlotIdleState>
}
 800d9a4:	3798      	adds	r7, #152	@ 0x98
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bdb0      	pop	{r4, r5, r7, pc}
 800d9aa:	bf00      	nop
 800d9ac:	20000568 	.word	0x20000568
 800d9b0:	200007a0 	.word	0x200007a0
 800d9b4:	20000a70 	.word	0x20000a70

0800d9b8 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d9bc:	4b11      	ldr	r3, [pc, #68]	@ (800da04 <ProcessRadioTxTimeout+0x4c>)
 800d9be:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d9c2:	2b02      	cmp	r3, #2
 800d9c4:	d002      	beq.n	800d9cc <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800d9c6:	4b10      	ldr	r3, [pc, #64]	@ (800da08 <ProcessRadioTxTimeout+0x50>)
 800d9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ca:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800d9cc:	f7ff fa56 	bl	800ce7c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800d9d0:	4b0e      	ldr	r3, [pc, #56]	@ (800da0c <ProcessRadioTxTimeout+0x54>)
 800d9d2:	2202      	movs	r2, #2
 800d9d4:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800d9d8:	2002      	movs	r0, #2
 800d9da:	f004 fcd5 	bl	8012388 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800d9de:	4b0b      	ldr	r3, [pc, #44]	@ (800da0c <ProcessRadioTxTimeout+0x54>)
 800d9e0:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d003      	beq.n	800d9f0 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 800d9e8:	4b08      	ldr	r3, [pc, #32]	@ (800da0c <ProcessRadioTxTimeout+0x54>)
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d9f0:	4a06      	ldr	r2, [pc, #24]	@ (800da0c <ProcessRadioTxTimeout+0x54>)
 800d9f2:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d9f6:	f043 0310 	orr.w	r3, r3, #16
 800d9fa:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
}
 800d9fe:	bf00      	nop
 800da00:	bd80      	pop	{r7, pc}
 800da02:	bf00      	nop
 800da04:	20000a70 	.word	0x20000a70
 800da08:	0801d86c 	.word	0x0801d86c
 800da0c:	20000568 	.word	0x20000568

0800da10 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	4603      	mov	r3, r0
 800da18:	460a      	mov	r2, r1
 800da1a:	71fb      	strb	r3, [r7, #7]
 800da1c:	4613      	mov	r3, r2
 800da1e:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800da20:	2300      	movs	r3, #0
 800da22:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800da24:	4b40      	ldr	r3, [pc, #256]	@ (800db28 <HandleRadioRxErrorTimeout+0x118>)
 800da26:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800da2a:	2b02      	cmp	r3, #2
 800da2c:	d002      	beq.n	800da34 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800da2e:	4b3f      	ldr	r3, [pc, #252]	@ (800db2c <HandleRadioRxErrorTimeout+0x11c>)
 800da30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da32:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800da34:	f003 ffed 	bl	8011a12 <LoRaMacClassBIsBeaconExpected>
 800da38:	4603      	mov	r3, r0
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d007      	beq.n	800da4e <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800da3e:	2002      	movs	r0, #2
 800da40:	f003 ff9b 	bl	801197a <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800da44:	2000      	movs	r0, #0
 800da46:	f003 ffbd 	bl	80119c4 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800da4a:	2301      	movs	r3, #1
 800da4c:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800da4e:	4b36      	ldr	r3, [pc, #216]	@ (800db28 <HandleRadioRxErrorTimeout+0x118>)
 800da50:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800da54:	2b01      	cmp	r3, #1
 800da56:	d119      	bne.n	800da8c <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800da58:	f003 ffe2 	bl	8011a20 <LoRaMacClassBIsPingExpected>
 800da5c:	4603      	mov	r3, r0
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d007      	beq.n	800da72 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800da62:	2000      	movs	r0, #0
 800da64:	f003 ff93 	bl	801198e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800da68:	2000      	movs	r0, #0
 800da6a:	f003 ffb4 	bl	80119d6 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800da6e:	2301      	movs	r3, #1
 800da70:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800da72:	f003 ffdc 	bl	8011a2e <LoRaMacClassBIsMulticastExpected>
 800da76:	4603      	mov	r3, r0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d007      	beq.n	800da8c <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800da7c:	2000      	movs	r0, #0
 800da7e:	f003 ff90 	bl	80119a2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800da82:	2000      	movs	r0, #0
 800da84:	f003 ffb0 	bl	80119e8 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800da88:	2301      	movs	r3, #1
 800da8a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800da8c:	7bfb      	ldrb	r3, [r7, #15]
 800da8e:	f083 0301 	eor.w	r3, r3, #1
 800da92:	b2db      	uxtb	r3, r3
 800da94:	2b00      	cmp	r3, #0
 800da96:	d040      	beq.n	800db1a <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800da98:	4b25      	ldr	r3, [pc, #148]	@ (800db30 <HandleRadioRxErrorTimeout+0x120>)
 800da9a:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d122      	bne.n	800dae8 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800daa2:	4b23      	ldr	r3, [pc, #140]	@ (800db30 <HandleRadioRxErrorTimeout+0x120>)
 800daa4:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d003      	beq.n	800dab4 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800daac:	4a20      	ldr	r2, [pc, #128]	@ (800db30 <HandleRadioRxErrorTimeout+0x120>)
 800daae:	79fb      	ldrb	r3, [r7, #7]
 800dab0:	f882 3435 	strb.w	r3, [r2, #1077]	@ 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800dab4:	79fb      	ldrb	r3, [r7, #7]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f004 fc66 	bl	8012388 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800dabc:	4b1a      	ldr	r3, [pc, #104]	@ (800db28 <HandleRadioRxErrorTimeout+0x118>)
 800dabe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dac0:	4618      	mov	r0, r3
 800dac2:	f00e f8cf 	bl	801bc64 <UTIL_TIMER_GetElapsedTime>
 800dac6:	4602      	mov	r2, r0
 800dac8:	4b19      	ldr	r3, [pc, #100]	@ (800db30 <HandleRadioRxErrorTimeout+0x120>)
 800daca:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800dace:	429a      	cmp	r2, r3
 800dad0:	d323      	bcc.n	800db1a <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800dad2:	4818      	ldr	r0, [pc, #96]	@ (800db34 <HandleRadioRxErrorTimeout+0x124>)
 800dad4:	f00d ff9a 	bl	801ba0c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800dad8:	4a15      	ldr	r2, [pc, #84]	@ (800db30 <HandleRadioRxErrorTimeout+0x120>)
 800dada:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dade:	f043 0310 	orr.w	r3, r3, #16
 800dae2:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 800dae6:	e018      	b.n	800db1a <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800dae8:	4b11      	ldr	r3, [pc, #68]	@ (800db30 <HandleRadioRxErrorTimeout+0x120>)
 800daea:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d003      	beq.n	800dafa <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800daf2:	4a0f      	ldr	r2, [pc, #60]	@ (800db30 <HandleRadioRxErrorTimeout+0x120>)
 800daf4:	79bb      	ldrb	r3, [r7, #6]
 800daf6:	f882 3435 	strb.w	r3, [r2, #1077]	@ 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800dafa:	79bb      	ldrb	r3, [r7, #6]
 800dafc:	4618      	mov	r0, r3
 800dafe:	f004 fc43 	bl	8012388 <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800db02:	4b09      	ldr	r3, [pc, #36]	@ (800db28 <HandleRadioRxErrorTimeout+0x118>)
 800db04:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800db08:	2b02      	cmp	r3, #2
 800db0a:	d006      	beq.n	800db1a <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800db0c:	4a08      	ldr	r2, [pc, #32]	@ (800db30 <HandleRadioRxErrorTimeout+0x120>)
 800db0e:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800db12:	f043 0310 	orr.w	r3, r3, #16
 800db16:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800db1a:	f7ff f9af 	bl	800ce7c <UpdateRxSlotIdleState>
}
 800db1e:	bf00      	nop
 800db20:	3710      	adds	r7, #16
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	20000a70 	.word	0x20000a70
 800db2c:	0801d86c 	.word	0x0801d86c
 800db30:	20000568 	.word	0x20000568
 800db34:	20000900 	.word	0x20000900

0800db38 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800db3c:	2106      	movs	r1, #6
 800db3e:	2005      	movs	r0, #5
 800db40:	f7ff ff66 	bl	800da10 <HandleRadioRxErrorTimeout>
}
 800db44:	bf00      	nop
 800db46:	bd80      	pop	{r7, pc}

0800db48 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800db4c:	2104      	movs	r1, #4
 800db4e:	2003      	movs	r0, #3
 800db50:	f7ff ff5e 	bl	800da10 <HandleRadioRxErrorTimeout>
}
 800db54:	bf00      	nop
 800db56:	bd80      	pop	{r7, pc}

0800db58 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db5e:	f3ef 8310 	mrs	r3, PRIMASK
 800db62:	607b      	str	r3, [r7, #4]
  return(result);
 800db64:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800db66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800db68:	b672      	cpsid	i
}
 800db6a:	bf00      	nop
    events = LoRaMacRadioEvents;
 800db6c:	4b1d      	ldr	r3, [pc, #116]	@ (800dbe4 <LoRaMacHandleIrqEvents+0x8c>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800db72:	4b1c      	ldr	r3, [pc, #112]	@ (800dbe4 <LoRaMacHandleIrqEvents+0x8c>)
 800db74:	2200      	movs	r2, #0
 800db76:	601a      	str	r2, [r3, #0]
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	f383 8810 	msr	PRIMASK, r3
}
 800db82:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d027      	beq.n	800dbda <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800db8a:	783b      	ldrb	r3, [r7, #0]
 800db8c:	f003 0310 	and.w	r3, r3, #16
 800db90:	b2db      	uxtb	r3, r3
 800db92:	2b00      	cmp	r3, #0
 800db94:	d001      	beq.n	800db9a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800db96:	f7ff f989 	bl	800ceac <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800db9a:	783b      	ldrb	r3, [r7, #0]
 800db9c:	f003 0308 	and.w	r3, r3, #8
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d001      	beq.n	800dbaa <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800dba6:	f7ff fa59 	bl	800d05c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800dbaa:	783b      	ldrb	r3, [r7, #0]
 800dbac:	f003 0304 	and.w	r3, r3, #4
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d001      	beq.n	800dbba <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800dbb6:	f7ff feff 	bl	800d9b8 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800dbba:	783b      	ldrb	r3, [r7, #0]
 800dbbc:	f003 0302 	and.w	r3, r3, #2
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d001      	beq.n	800dbca <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800dbc6:	f7ff ffb7 	bl	800db38 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800dbca:	783b      	ldrb	r3, [r7, #0]
 800dbcc:	f003 0301 	and.w	r3, r3, #1
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d001      	beq.n	800dbda <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800dbd6:	f7ff ffb7 	bl	800db48 <ProcessRadioRxTimeout>
        }
    }
}
 800dbda:	bf00      	nop
 800dbdc:	3710      	adds	r7, #16
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	200011e8 	.word	0x200011e8

0800dbe8 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800dbe8:	b480      	push	{r7}
 800dbea:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800dbec:	4b0b      	ldr	r3, [pc, #44]	@ (800dc1c <LoRaMacIsBusy+0x34>)
 800dbee:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d101      	bne.n	800dbfa <LoRaMacIsBusy+0x12>
    {
        return false;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	e00c      	b.n	800dc14 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800dbfa:	4b08      	ldr	r3, [pc, #32]	@ (800dc1c <LoRaMacIsBusy+0x34>)
 800dbfc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d106      	bne.n	800dc12 <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800dc04:	4b05      	ldr	r3, [pc, #20]	@ (800dc1c <LoRaMacIsBusy+0x34>)
 800dc06:	f893 3482 	ldrb.w	r3, [r3, #1154]	@ 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d101      	bne.n	800dc12 <LoRaMacIsBusy+0x2a>
    {
        return false;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	e000      	b.n	800dc14 <LoRaMacIsBusy+0x2c>
    }
    return true;
 800dc12:	2301      	movs	r3, #1
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bc80      	pop	{r7}
 800dc1a:	4770      	bx	lr
 800dc1c:	20000568 	.word	0x20000568

0800dc20 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800dc20:	b480      	push	{r7}
 800dc22:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800dc24:	4b05      	ldr	r3, [pc, #20]	@ (800dc3c <LoRaMacIsStopped+0x1c>)
 800dc26:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d101      	bne.n	800dc32 <LoRaMacIsStopped+0x12>
    {
        return true;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	e000      	b.n	800dc34 <LoRaMacIsStopped+0x14>
    }
    return false;
 800dc32:	2300      	movs	r3, #0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bc80      	pop	{r7}
 800dc3a:	4770      	bx	lr
 800dc3c:	20000568 	.word	0x20000568

0800dc40 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	4603      	mov	r3, r0
 800dc48:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800dc4a:	4a04      	ldr	r2, [pc, #16]	@ (800dc5c <LoRaMacEnableRequests+0x1c>)
 800dc4c:	79fb      	ldrb	r3, [r7, #7]
 800dc4e:	f882 3482 	strb.w	r3, [r2, #1154]	@ 0x482
}
 800dc52:	bf00      	nop
 800dc54:	370c      	adds	r7, #12
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bc80      	pop	{r7}
 800dc5a:	4770      	bx	lr
 800dc5c:	20000568 	.word	0x20000568

0800dc60 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800dc66:	4b2c      	ldr	r3, [pc, #176]	@ (800dd18 <LoRaMacHandleRequestEvents+0xb8>)
 800dc68:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dc6c:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800dc6e:	4b2a      	ldr	r3, [pc, #168]	@ (800dd18 <LoRaMacHandleRequestEvents+0xb8>)
 800dc70:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d14a      	bne.n	800dd0e <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800dc78:	4b27      	ldr	r3, [pc, #156]	@ (800dd18 <LoRaMacHandleRequestEvents+0xb8>)
 800dc7a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dc7e:	f003 0301 	and.w	r3, r3, #1
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d006      	beq.n	800dc96 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800dc88:	4a23      	ldr	r2, [pc, #140]	@ (800dd18 <LoRaMacHandleRequestEvents+0xb8>)
 800dc8a:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dc8e:	f36f 0300 	bfc	r3, #0, #1
 800dc92:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800dc96:	4b20      	ldr	r3, [pc, #128]	@ (800dd18 <LoRaMacHandleRequestEvents+0xb8>)
 800dc98:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dc9c:	f003 0304 	and.w	r3, r3, #4
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d006      	beq.n	800dcb4 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800dca6:	4a1c      	ldr	r2, [pc, #112]	@ (800dd18 <LoRaMacHandleRequestEvents+0xb8>)
 800dca8:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dcac:	f36f 0382 	bfc	r3, #2, #1
 800dcb0:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800dcb4:	2001      	movs	r0, #1
 800dcb6:	f7ff ffc3 	bl	800dc40 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800dcba:	793b      	ldrb	r3, [r7, #4]
 800dcbc:	f003 0301 	and.w	r3, r3, #1
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d005      	beq.n	800dcd2 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800dcc6:	4b14      	ldr	r3, [pc, #80]	@ (800dd18 <LoRaMacHandleRequestEvents+0xb8>)
 800dcc8:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4813      	ldr	r0, [pc, #76]	@ (800dd1c <LoRaMacHandleRequestEvents+0xbc>)
 800dcd0:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800dcd2:	793b      	ldrb	r3, [r7, #4]
 800dcd4:	f003 0304 	and.w	r3, r3, #4
 800dcd8:	b2db      	uxtb	r3, r3
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00e      	beq.n	800dcfc <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800dcde:	4810      	ldr	r0, [pc, #64]	@ (800dd20 <LoRaMacHandleRequestEvents+0xc0>)
 800dce0:	f004 fba0 	bl	8012424 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800dce4:	f004 fbf0 	bl	80124c8 <LoRaMacConfirmQueueGetCnt>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d006      	beq.n	800dcfc <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800dcee:	4a0a      	ldr	r2, [pc, #40]	@ (800dd18 <LoRaMacHandleRequestEvents+0xb8>)
 800dcf0:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dcf4:	f043 0304 	orr.w	r3, r3, #4
 800dcf8:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800dcfc:	f003 feb5 	bl	8011a6a <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800dd00:	4a05      	ldr	r2, [pc, #20]	@ (800dd18 <LoRaMacHandleRequestEvents+0xb8>)
 800dd02:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dd06:	f36f 1304 	bfc	r3, #4, #1
 800dd0a:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
}
 800dd0e:	bf00      	nop
 800dd10:	3708      	adds	r7, #8
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	20000568 	.word	0x20000568
 800dd1c:	2000099c 	.word	0x2000099c
 800dd20:	200009b0 	.word	0x200009b0

0800dd24 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800dd28:	4b16      	ldr	r3, [pc, #88]	@ (800dd84 <LoRaMacHandleIndicationEvents+0x60>)
 800dd2a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dd2e:	f003 0308 	and.w	r3, r3, #8
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d00d      	beq.n	800dd54 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800dd38:	4a12      	ldr	r2, [pc, #72]	@ (800dd84 <LoRaMacHandleIndicationEvents+0x60>)
 800dd3a:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dd3e:	f36f 03c3 	bfc	r3, #3, #1
 800dd42:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800dd46:	4b0f      	ldr	r3, [pc, #60]	@ (800dd84 <LoRaMacHandleIndicationEvents+0x60>)
 800dd48:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800dd4c:	68db      	ldr	r3, [r3, #12]
 800dd4e:	490e      	ldr	r1, [pc, #56]	@ (800dd88 <LoRaMacHandleIndicationEvents+0x64>)
 800dd50:	480e      	ldr	r0, [pc, #56]	@ (800dd8c <LoRaMacHandleIndicationEvents+0x68>)
 800dd52:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800dd54:	4b0b      	ldr	r3, [pc, #44]	@ (800dd84 <LoRaMacHandleIndicationEvents+0x60>)
 800dd56:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dd5a:	f003 0302 	and.w	r3, r3, #2
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d00d      	beq.n	800dd80 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800dd64:	4a07      	ldr	r2, [pc, #28]	@ (800dd84 <LoRaMacHandleIndicationEvents+0x60>)
 800dd66:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dd6a:	f36f 0341 	bfc	r3, #1, #1
 800dd6e:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800dd72:	4b04      	ldr	r3, [pc, #16]	@ (800dd84 <LoRaMacHandleIndicationEvents+0x60>)
 800dd74:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	4903      	ldr	r1, [pc, #12]	@ (800dd88 <LoRaMacHandleIndicationEvents+0x64>)
 800dd7c:	4804      	ldr	r0, [pc, #16]	@ (800dd90 <LoRaMacHandleIndicationEvents+0x6c>)
 800dd7e:	4798      	blx	r3
    }
}
 800dd80:	bf00      	nop
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	20000568 	.word	0x20000568
 800dd88:	200009e4 	.word	0x200009e4
 800dd8c:	200009c4 	.word	0x200009c4
 800dd90:	20000980 	.word	0x20000980

0800dd94 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800dd9a:	4b32      	ldr	r3, [pc, #200]	@ (800de64 <LoRaMacHandleMcpsRequest+0xd0>)
 800dd9c:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dda0:	f003 0301 	and.w	r3, r3, #1
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d058      	beq.n	800de5c <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ddb2:	4b2c      	ldr	r3, [pc, #176]	@ (800de64 <LoRaMacHandleMcpsRequest+0xd0>)
 800ddb4:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d004      	beq.n	800ddc6 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800ddbc:	4b29      	ldr	r3, [pc, #164]	@ (800de64 <LoRaMacHandleMcpsRequest+0xd0>)
 800ddbe:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ddc2:	2b03      	cmp	r3, #3
 800ddc4:	d104      	bne.n	800ddd0 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800ddc6:	f002 f83b 	bl	800fe40 <CheckRetransUnconfirmedUplink>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	71fb      	strb	r3, [r7, #7]
 800ddce:	e020      	b.n	800de12 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800ddd0:	4b24      	ldr	r3, [pc, #144]	@ (800de64 <LoRaMacHandleMcpsRequest+0xd0>)
 800ddd2:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	d11b      	bne.n	800de12 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 800ddda:	4b22      	ldr	r3, [pc, #136]	@ (800de64 <LoRaMacHandleMcpsRequest+0xd0>)
 800dddc:	f893 340f 	ldrb.w	r3, [r3, #1039]	@ 0x40f
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d014      	beq.n	800de0e <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800dde4:	f002 f858 	bl	800fe98 <CheckRetransConfirmedUplink>
 800dde8:	4603      	mov	r3, r0
 800ddea:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ddec:	4b1e      	ldr	r3, [pc, #120]	@ (800de68 <LoRaMacHandleMcpsRequest+0xd4>)
 800ddee:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d10d      	bne.n	800de12 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800ddf6:	79fb      	ldrb	r3, [r7, #7]
 800ddf8:	f083 0301 	eor.w	r3, r3, #1
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d002      	beq.n	800de08 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800de02:	f002 f8db 	bl	800ffbc <AckTimeoutRetriesProcess>
 800de06:	e004      	b.n	800de12 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800de08:	f002 f916 	bl	8010038 <AckTimeoutRetriesFinalize>
 800de0c:	e001      	b.n	800de12 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800de0e:	2301      	movs	r3, #1
 800de10:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800de12:	79fb      	ldrb	r3, [r7, #7]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d00d      	beq.n	800de34 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800de18:	4814      	ldr	r0, [pc, #80]	@ (800de6c <LoRaMacHandleMcpsRequest+0xd8>)
 800de1a:	f00d fdf7 	bl	801ba0c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800de1e:	4b11      	ldr	r3, [pc, #68]	@ (800de64 <LoRaMacHandleMcpsRequest+0xd0>)
 800de20:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800de24:	f023 0320 	bic.w	r3, r3, #32
 800de28:	4a0e      	ldr	r2, [pc, #56]	@ (800de64 <LoRaMacHandleMcpsRequest+0xd0>)
 800de2a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800de2e:	f002 f855 	bl	800fedc <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800de32:	e013      	b.n	800de5c <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800de34:	79bb      	ldrb	r3, [r7, #6]
 800de36:	f083 0301 	eor.w	r3, r3, #1
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d00d      	beq.n	800de5c <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800de40:	4a08      	ldr	r2, [pc, #32]	@ (800de64 <LoRaMacHandleMcpsRequest+0xd0>)
 800de42:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800de46:	f36f 1304 	bfc	r3, #4, #1
 800de4a:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            MacCtx.AckTimeoutRetry = false;
 800de4e:	4b05      	ldr	r3, [pc, #20]	@ (800de64 <LoRaMacHandleMcpsRequest+0xd0>)
 800de50:	2200      	movs	r2, #0
 800de52:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
            OnTxDelayedTimerEvent( NULL );
 800de56:	2000      	movs	r0, #0
 800de58:	f000 f992 	bl	800e180 <OnTxDelayedTimerEvent>
}
 800de5c:	bf00      	nop
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	20000568 	.word	0x20000568
 800de68:	20000a70 	.word	0x20000a70
 800de6c:	200008d0 	.word	0x200008d0

0800de70 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800de70:	b580      	push	{r7, lr}
 800de72:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800de74:	4b1b      	ldr	r3, [pc, #108]	@ (800dee4 <LoRaMacHandleMlmeRequest+0x74>)
 800de76:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800de7a:	f003 0304 	and.w	r3, r3, #4
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	2b00      	cmp	r3, #0
 800de82:	d02c      	beq.n	800dede <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800de84:	2001      	movs	r0, #1
 800de86:	f004 fab3 	bl	80123f0 <LoRaMacConfirmQueueIsCmdActive>
 800de8a:	4603      	mov	r3, r0
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d012      	beq.n	800deb6 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800de90:	2001      	movs	r0, #1
 800de92:	f004 fa4f 	bl	8012334 <LoRaMacConfirmQueueGetStatus>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d103      	bne.n	800dea4 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800de9c:	4b11      	ldr	r3, [pc, #68]	@ (800dee4 <LoRaMacHandleMlmeRequest+0x74>)
 800de9e:	2200      	movs	r2, #0
 800dea0:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800dea4:	4b0f      	ldr	r3, [pc, #60]	@ (800dee4 <LoRaMacHandleMlmeRequest+0x74>)
 800dea6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800deaa:	f023 0302 	bic.w	r3, r3, #2
 800deae:	4a0d      	ldr	r2, [pc, #52]	@ (800dee4 <LoRaMacHandleMlmeRequest+0x74>)
 800deb0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800deb4:	e013      	b.n	800dede <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800deb6:	2006      	movs	r0, #6
 800deb8:	f004 fa9a 	bl	80123f0 <LoRaMacConfirmQueueIsCmdActive>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d105      	bne.n	800dece <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800dec2:	2007      	movs	r0, #7
 800dec4:	f004 fa94 	bl	80123f0 <LoRaMacConfirmQueueIsCmdActive>
 800dec8:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800deca:	2b00      	cmp	r3, #0
 800decc:	d007      	beq.n	800dede <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800dece:	4b05      	ldr	r3, [pc, #20]	@ (800dee4 <LoRaMacHandleMlmeRequest+0x74>)
 800ded0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ded4:	f023 0302 	bic.w	r3, r3, #2
 800ded8:	4a02      	ldr	r2, [pc, #8]	@ (800dee4 <LoRaMacHandleMlmeRequest+0x74>)
 800deda:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800dede:	bf00      	nop
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	20000568 	.word	0x20000568

0800dee8 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800deec:	200c      	movs	r0, #12
 800deee:	f004 fa7f 	bl	80123f0 <LoRaMacConfirmQueueIsCmdActive>
 800def2:	4603      	mov	r3, r0
 800def4:	2b00      	cmp	r3, #0
 800def6:	d019      	beq.n	800df2c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800def8:	4b0e      	ldr	r3, [pc, #56]	@ (800df34 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800defa:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800defe:	f003 0301 	and.w	r3, r3, #1
 800df02:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800df04:	2b00      	cmp	r3, #0
 800df06:	d111      	bne.n	800df2c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800df08:	4b0a      	ldr	r3, [pc, #40]	@ (800df34 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800df0a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800df0e:	f003 0304 	and.w	r3, r3, #4
 800df12:	b2db      	uxtb	r3, r3
 800df14:	2b00      	cmp	r3, #0
 800df16:	d009      	beq.n	800df2c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800df18:	4b06      	ldr	r3, [pc, #24]	@ (800df34 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800df1a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800df1e:	f023 0302 	bic.w	r3, r3, #2
 800df22:	4a04      	ldr	r2, [pc, #16]	@ (800df34 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800df24:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800df28:	2301      	movs	r3, #1
 800df2a:	e000      	b.n	800df2e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800df2c:	2300      	movs	r3, #0
}
 800df2e:	4618      	mov	r0, r3
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	20000568 	.word	0x20000568

0800df38 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800df38:	b480      	push	{r7}
 800df3a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800df3c:	4b0d      	ldr	r3, [pc, #52]	@ (800df74 <LoRaMacCheckForRxAbort+0x3c>)
 800df3e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800df42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df46:	2b00      	cmp	r3, #0
 800df48:	d00f      	beq.n	800df6a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800df4a:	4b0a      	ldr	r3, [pc, #40]	@ (800df74 <LoRaMacCheckForRxAbort+0x3c>)
 800df4c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800df50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df54:	4a07      	ldr	r2, [pc, #28]	@ (800df74 <LoRaMacCheckForRxAbort+0x3c>)
 800df56:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800df5a:	4b06      	ldr	r3, [pc, #24]	@ (800df74 <LoRaMacCheckForRxAbort+0x3c>)
 800df5c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800df60:	f023 0302 	bic.w	r3, r3, #2
 800df64:	4a03      	ldr	r2, [pc, #12]	@ (800df74 <LoRaMacCheckForRxAbort+0x3c>)
 800df66:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800df6a:	bf00      	nop
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bc80      	pop	{r7}
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop
 800df74:	20000568 	.word	0x20000568

0800df78 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b084      	sub	sp, #16
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800df80:	2300      	movs	r3, #0
 800df82:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800df84:	2300      	movs	r3, #0
 800df86:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800df88:	4b50      	ldr	r3, [pc, #320]	@ (800e0cc <LoRaMacHandleNvm+0x154>)
 800df8a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800df8e:	2b00      	cmp	r3, #0
 800df90:	f040 8098 	bne.w	800e0c4 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2124      	movs	r1, #36	@ 0x24
 800df98:	4618      	mov	r0, r3
 800df9a:	f009 fbf5 	bl	8017788 <Crc32>
 800df9e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfa4:	68ba      	ldr	r2, [r7, #8]
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d006      	beq.n	800dfb8 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	68ba      	ldr	r2, [r7, #8]
 800dfae:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800dfb0:	89fb      	ldrh	r3, [r7, #14]
 800dfb2:	f043 0301 	orr.w	r3, r3, #1
 800dfb6:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	3328      	adds	r3, #40	@ 0x28
 800dfbc:	211c      	movs	r1, #28
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f009 fbe2 	bl	8017788 <Crc32>
 800dfc4:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfca:	68ba      	ldr	r2, [r7, #8]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d006      	beq.n	800dfde <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	68ba      	ldr	r2, [r7, #8]
 800dfd4:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800dfd6:	89fb      	ldrh	r3, [r7, #14]
 800dfd8:	f043 0302 	orr.w	r3, r3, #2
 800dfdc:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	3348      	adds	r3, #72	@ 0x48
 800dfe2:	21fc      	movs	r1, #252	@ 0xfc
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f009 fbcf 	bl	8017788 <Crc32>
 800dfea:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800dff2:	68ba      	ldr	r2, [r7, #8]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d007      	beq.n	800e008 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800e000:	89fb      	ldrh	r3, [r7, #14]
 800e002:	f043 0304 	orr.w	r3, r3, #4
 800e006:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800e00e:	21d4      	movs	r1, #212	@ 0xd4
 800e010:	4618      	mov	r0, r3
 800e012:	f009 fbb9 	bl	8017788 <Crc32>
 800e016:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800e01e:	68ba      	ldr	r2, [r7, #8]
 800e020:	429a      	cmp	r2, r3
 800e022:	d007      	beq.n	800e034 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	68ba      	ldr	r2, [r7, #8]
 800e028:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800e02c:	89fb      	ldrh	r3, [r7, #14]
 800e02e:	f043 0308 	orr.w	r3, r3, #8
 800e032:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800e03a:	21a0      	movs	r1, #160	@ 0xa0
 800e03c:	4618      	mov	r0, r3
 800e03e:	f009 fba3 	bl	8017788 <Crc32>
 800e042:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e04a:	68ba      	ldr	r2, [r7, #8]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d007      	beq.n	800e060 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	68ba      	ldr	r2, [r7, #8]
 800e054:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800e058:	89fb      	ldrh	r3, [r7, #14]
 800e05a:	f043 0310 	orr.w	r3, r3, #16
 800e05e:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800e066:	f44f 6193 	mov.w	r1, #1176	@ 0x498
 800e06a:	4618      	mov	r0, r3
 800e06c:	f009 fb8c 	bl	8017788 <Crc32>
 800e070:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f8d3 375c 	ldr.w	r3, [r3, #1884]	@ 0x75c
 800e078:	68ba      	ldr	r2, [r7, #8]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d007      	beq.n	800e08e <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	68ba      	ldr	r2, [r7, #8]
 800e082:	f8c3 275c 	str.w	r2, [r3, #1884]	@ 0x75c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800e086:	89fb      	ldrh	r3, [r7, #14]
 800e088:	f043 0320 	orr.w	r3, r3, #32
 800e08c:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 800e094:	2114      	movs	r1, #20
 800e096:	4618      	mov	r0, r3
 800e098:	f009 fb76 	bl	8017788 <Crc32>
 800e09c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f8d3 3774 	ldr.w	r3, [r3, #1908]	@ 0x774
 800e0a4:	68ba      	ldr	r2, [r7, #8]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d007      	beq.n	800e0ba <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	68ba      	ldr	r2, [r7, #8]
 800e0ae:	f8c3 2774 	str.w	r2, [r3, #1908]	@ 0x774
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800e0b2:	89fb      	ldrh	r3, [r7, #14]
 800e0b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0b8:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800e0ba:	89fb      	ldrh	r3, [r7, #14]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f001 ff5f 	bl	800ff80 <CallNvmDataChangeCallback>
 800e0c2:	e000      	b.n	800e0c6 <LoRaMacHandleNvm+0x14e>
        return;
 800e0c4:	bf00      	nop
}
 800e0c6:	3710      	adds	r7, #16
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	20000568 	.word	0x20000568

0800e0d0 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800e0da:	f7ff fd3d 	bl	800db58 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e0de:	f003 fd28 	bl	8011b32 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e0e2:	4b25      	ldr	r3, [pc, #148]	@ (800e178 <LoRaMacProcess+0xa8>)
 800e0e4:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e0e8:	f003 0310 	and.w	r3, r3, #16
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d023      	beq.n	800e13a <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800e0f2:	2000      	movs	r0, #0
 800e0f4:	f7ff fda4 	bl	800dc40 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800e0f8:	f7ff ff1e 	bl	800df38 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800e0fc:	f001 ffd0 	bl	80100a0 <IsRequestPending>
 800e100:	4603      	mov	r3, r0
 800e102:	2b00      	cmp	r3, #0
 800e104:	d006      	beq.n	800e114 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800e106:	f7ff feef 	bl	800dee8 <LoRaMacCheckForBeaconAcquisition>
 800e10a:	4603      	mov	r3, r0
 800e10c:	461a      	mov	r2, r3
 800e10e:	79fb      	ldrb	r3, [r7, #7]
 800e110:	4313      	orrs	r3, r2
 800e112:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800e114:	79fb      	ldrb	r3, [r7, #7]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d103      	bne.n	800e122 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800e11a:	f7ff fea9 	bl	800de70 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800e11e:	f7ff fe39 	bl	800dd94 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800e122:	f7ff fd9d 	bl	800dc60 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e126:	2001      	movs	r0, #1
 800e128:	f7ff fd8a 	bl	800dc40 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800e12c:	4a12      	ldr	r2, [pc, #72]	@ (800e178 <LoRaMacProcess+0xa8>)
 800e12e:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e132:	f043 0320 	orr.w	r3, r3, #32
 800e136:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
    LoRaMacHandleIndicationEvents( );
 800e13a:	f7ff fdf3 	bl	800dd24 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800e13e:	4b0e      	ldr	r3, [pc, #56]	@ (800e178 <LoRaMacProcess+0xa8>)
 800e140:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800e144:	2b02      	cmp	r3, #2
 800e146:	d101      	bne.n	800e14c <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800e148:	f001 fbc8 	bl	800f8dc <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800e14c:	4b0a      	ldr	r3, [pc, #40]	@ (800e178 <LoRaMacProcess+0xa8>)
 800e14e:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e152:	f003 0320 	and.w	r3, r3, #32
 800e156:	b2db      	uxtb	r3, r3
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d009      	beq.n	800e170 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800e15c:	4a06      	ldr	r2, [pc, #24]	@ (800e178 <LoRaMacProcess+0xa8>)
 800e15e:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e162:	f36f 1345 	bfc	r3, #5, #1
 800e166:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        LoRaMacHandleNvm( &Nvm );
 800e16a:	4804      	ldr	r0, [pc, #16]	@ (800e17c <LoRaMacProcess+0xac>)
 800e16c:	f7ff ff04 	bl	800df78 <LoRaMacHandleNvm>
    }
}
 800e170:	bf00      	nop
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	20000568 	.word	0x20000568
 800e17c:	20000a70 	.word	0x20000a70

0800e180 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b082      	sub	sp, #8
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800e188:	4817      	ldr	r0, [pc, #92]	@ (800e1e8 <OnTxDelayedTimerEvent+0x68>)
 800e18a:	f00d fc3f 	bl	801ba0c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e18e:	4b17      	ldr	r3, [pc, #92]	@ (800e1ec <OnTxDelayedTimerEvent+0x6c>)
 800e190:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e194:	f023 0320 	bic.w	r3, r3, #32
 800e198:	4a14      	ldr	r2, [pc, #80]	@ (800e1ec <OnTxDelayedTimerEvent+0x6c>)
 800e19a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800e19e:	2001      	movs	r0, #1
 800e1a0:	f001 f8f4 	bl	800f38c <ScheduleTx>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d018      	beq.n	800e1dc <OnTxDelayedTimerEvent+0x5c>
 800e1aa:	2b0b      	cmp	r3, #11
 800e1ac:	d016      	beq.n	800e1dc <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e1ae:	4b10      	ldr	r3, [pc, #64]	@ (800e1f0 <OnTxDelayedTimerEvent+0x70>)
 800e1b0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800e1b4:	b2da      	uxtb	r2, r3
 800e1b6:	4b0d      	ldr	r3, [pc, #52]	@ (800e1ec <OnTxDelayedTimerEvent+0x6c>)
 800e1b8:	f883 2436 	strb.w	r2, [r3, #1078]	@ 0x436
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800e1bc:	4b0b      	ldr	r3, [pc, #44]	@ (800e1ec <OnTxDelayedTimerEvent+0x6c>)
 800e1be:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 800e1c2:	4b0a      	ldr	r3, [pc, #40]	@ (800e1ec <OnTxDelayedTimerEvent+0x6c>)
 800e1c4:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800e1c8:	4b08      	ldr	r3, [pc, #32]	@ (800e1ec <OnTxDelayedTimerEvent+0x6c>)
 800e1ca:	2209      	movs	r2, #9
 800e1cc:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800e1d0:	2009      	movs	r0, #9
 800e1d2:	f004 f8d9 	bl	8012388 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800e1d6:	f001 fe81 	bl	800fedc <StopRetransmission>
            break;
 800e1da:	e000      	b.n	800e1de <OnTxDelayedTimerEvent+0x5e>
            break;
 800e1dc:	bf00      	nop
        }
    }
}
 800e1de:	bf00      	nop
 800e1e0:	3708      	adds	r7, #8
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	200008d0 	.word	0x200008d0
 800e1ec:	20000568 	.word	0x20000568
 800e1f0:	20000a70 	.word	0x20000a70

0800e1f4 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800e1fc:	4b14      	ldr	r3, [pc, #80]	@ (800e250 <OnRxWindow1TimerEvent+0x5c>)
 800e1fe:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800e202:	4b13      	ldr	r3, [pc, #76]	@ (800e250 <OnRxWindow1TimerEvent+0x5c>)
 800e204:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800e208:	4b12      	ldr	r3, [pc, #72]	@ (800e254 <OnRxWindow1TimerEvent+0x60>)
 800e20a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800e20e:	b25a      	sxtb	r2, r3
 800e210:	4b0f      	ldr	r3, [pc, #60]	@ (800e250 <OnRxWindow1TimerEvent+0x5c>)
 800e212:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e216:	4b0f      	ldr	r3, [pc, #60]	@ (800e254 <OnRxWindow1TimerEvent+0x60>)
 800e218:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800e21c:	4b0c      	ldr	r3, [pc, #48]	@ (800e250 <OnRxWindow1TimerEvent+0x5c>)
 800e21e:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e222:	4b0c      	ldr	r3, [pc, #48]	@ (800e254 <OnRxWindow1TimerEvent+0x60>)
 800e224:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800e228:	4b09      	ldr	r3, [pc, #36]	@ (800e250 <OnRxWindow1TimerEvent+0x5c>)
 800e22a:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800e22e:	4b08      	ldr	r3, [pc, #32]	@ (800e250 <OnRxWindow1TimerEvent+0x5c>)
 800e230:	2200      	movs	r2, #0
 800e232:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800e236:	4b06      	ldr	r3, [pc, #24]	@ (800e250 <OnRxWindow1TimerEvent+0x5c>)
 800e238:	2200      	movs	r2, #0
 800e23a:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800e23e:	4906      	ldr	r1, [pc, #24]	@ (800e258 <OnRxWindow1TimerEvent+0x64>)
 800e240:	4806      	ldr	r0, [pc, #24]	@ (800e25c <OnRxWindow1TimerEvent+0x68>)
 800e242:	f001 fb17 	bl	800f874 <RxWindowSetup>
}
 800e246:	bf00      	nop
 800e248:	3708      	adds	r7, #8
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	20000568 	.word	0x20000568
 800e254:	20000a70 	.word	0x20000a70
 800e258:	20000920 	.word	0x20000920
 800e25c:	200008e8 	.word	0x200008e8

0800e260 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e268:	4b16      	ldr	r3, [pc, #88]	@ (800e2c4 <OnRxWindow2TimerEvent+0x64>)
 800e26a:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d023      	beq.n	800e2ba <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800e272:	4b14      	ldr	r3, [pc, #80]	@ (800e2c4 <OnRxWindow2TimerEvent+0x64>)
 800e274:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800e278:	4b12      	ldr	r3, [pc, #72]	@ (800e2c4 <OnRxWindow2TimerEvent+0x64>)
 800e27a:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800e27e:	4b12      	ldr	r3, [pc, #72]	@ (800e2c8 <OnRxWindow2TimerEvent+0x68>)
 800e280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e282:	4a10      	ldr	r2, [pc, #64]	@ (800e2c4 <OnRxWindow2TimerEvent+0x64>)
 800e284:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e288:	4b0f      	ldr	r3, [pc, #60]	@ (800e2c8 <OnRxWindow2TimerEvent+0x68>)
 800e28a:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800e28e:	4b0d      	ldr	r3, [pc, #52]	@ (800e2c4 <OnRxWindow2TimerEvent+0x64>)
 800e290:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e294:	4b0c      	ldr	r3, [pc, #48]	@ (800e2c8 <OnRxWindow2TimerEvent+0x68>)
 800e296:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800e29a:	4b0a      	ldr	r3, [pc, #40]	@ (800e2c4 <OnRxWindow2TimerEvent+0x64>)
 800e29c:	f883 23dd 	strb.w	r2, [r3, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800e2a0:	4b08      	ldr	r3, [pc, #32]	@ (800e2c4 <OnRxWindow2TimerEvent+0x64>)
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f883 23de 	strb.w	r2, [r3, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800e2a8:	4b06      	ldr	r3, [pc, #24]	@ (800e2c4 <OnRxWindow2TimerEvent+0x64>)
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	f883 23df 	strb.w	r2, [r3, #991]	@ 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800e2b0:	4906      	ldr	r1, [pc, #24]	@ (800e2cc <OnRxWindow2TimerEvent+0x6c>)
 800e2b2:	4807      	ldr	r0, [pc, #28]	@ (800e2d0 <OnRxWindow2TimerEvent+0x70>)
 800e2b4:	f001 fade 	bl	800f874 <RxWindowSetup>
 800e2b8:	e000      	b.n	800e2bc <OnRxWindow2TimerEvent+0x5c>
        return;
 800e2ba:	bf00      	nop
}
 800e2bc:	3708      	adds	r7, #8
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}
 800e2c2:	bf00      	nop
 800e2c4:	20000568 	.word	0x20000568
 800e2c8:	20000a70 	.word	0x20000a70
 800e2cc:	20000934 	.word	0x20000934
 800e2d0:	20000900 	.word	0x20000900

0800e2d4 <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800e2dc:	480e      	ldr	r0, [pc, #56]	@ (800e318 <OnAckTimeoutTimerEvent+0x44>)
 800e2de:	f00d fb95 	bl	801ba0c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800e2e2:	4b0e      	ldr	r3, [pc, #56]	@ (800e31c <OnAckTimeoutTimerEvent+0x48>)
 800e2e4:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d003      	beq.n	800e2f4 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800e2ec:	4b0b      	ldr	r3, [pc, #44]	@ (800e31c <OnAckTimeoutTimerEvent+0x48>)
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e2f4:	4b0a      	ldr	r3, [pc, #40]	@ (800e320 <OnAckTimeoutTimerEvent+0x4c>)
 800e2f6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e2fa:	2b02      	cmp	r3, #2
 800e2fc:	d106      	bne.n	800e30c <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800e2fe:	4a07      	ldr	r2, [pc, #28]	@ (800e31c <OnAckTimeoutTimerEvent+0x48>)
 800e300:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e304:	f043 0310 	orr.w	r3, r3, #16
 800e308:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
    OnMacProcessNotify( );
 800e30c:	f001 fe22 	bl	800ff54 <OnMacProcessNotify>
}
 800e310:	bf00      	nop
 800e312:	3708      	adds	r7, #8
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	2000095c 	.word	0x2000095c
 800e31c:	20000568 	.word	0x20000568
 800e320:	20000a70 	.word	0x20000a70

0800e324 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	60ba      	str	r2, [r7, #8]
 800e32c:	607b      	str	r3, [r7, #4]
 800e32e:	4603      	mov	r3, r0
 800e330:	73fb      	strb	r3, [r7, #15]
 800e332:	460b      	mov	r3, r1
 800e334:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d005      	beq.n	800e348 <GetFCntDown+0x24>
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d002      	beq.n	800e348 <GetFCntDown+0x24>
 800e342:	6a3b      	ldr	r3, [r7, #32]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d101      	bne.n	800e34c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e348:	230a      	movs	r3, #10
 800e34a:	e029      	b.n	800e3a0 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800e34c:	7bfb      	ldrb	r3, [r7, #15]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d016      	beq.n	800e380 <GetFCntDown+0x5c>
 800e352:	2b01      	cmp	r3, #1
 800e354:	d118      	bne.n	800e388 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800e356:	79bb      	ldrb	r3, [r7, #6]
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d10d      	bne.n	800e378 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800e35c:	7bbb      	ldrb	r3, [r7, #14]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d002      	beq.n	800e368 <GetFCntDown+0x44>
 800e362:	7bbb      	ldrb	r3, [r7, #14]
 800e364:	2b03      	cmp	r3, #3
 800e366:	d103      	bne.n	800e370 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800e368:	69fb      	ldr	r3, [r7, #28]
 800e36a:	2202      	movs	r2, #2
 800e36c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800e36e:	e00d      	b.n	800e38c <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800e370:	69fb      	ldr	r3, [r7, #28]
 800e372:	2201      	movs	r2, #1
 800e374:	701a      	strb	r2, [r3, #0]
            break;
 800e376:	e009      	b.n	800e38c <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800e378:	69fb      	ldr	r3, [r7, #28]
 800e37a:	2203      	movs	r2, #3
 800e37c:	701a      	strb	r2, [r3, #0]
            break;
 800e37e:	e005      	b.n	800e38c <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	2204      	movs	r2, #4
 800e384:	701a      	strb	r2, [r3, #0]
            break;
 800e386:	e001      	b.n	800e38c <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800e388:	2305      	movs	r3, #5
 800e38a:	e009      	b.n	800e3a0 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	7818      	ldrb	r0, [r3, #0]
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	89db      	ldrh	r3, [r3, #14]
 800e394:	461a      	mov	r2, r3
 800e396:	8b39      	ldrh	r1, [r7, #24]
 800e398:	6a3b      	ldr	r3, [r7, #32]
 800e39a:	f004 fc33 	bl	8012c04 <LoRaMacCryptoGetFCntDown>
 800e39e:	4603      	mov	r3, r0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800e3a8:	b5b0      	push	{r4, r5, r7, lr}
 800e3aa:	b084      	sub	sp, #16
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e3b2:	2303      	movs	r3, #3
 800e3b4:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800e3b6:	4b6d      	ldr	r3, [pc, #436]	@ (800e56c <SwitchClass+0x1c4>)
 800e3b8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e3bc:	2b02      	cmp	r3, #2
 800e3be:	f000 80b9 	beq.w	800e534 <SwitchClass+0x18c>
 800e3c2:	2b02      	cmp	r3, #2
 800e3c4:	f300 80cc 	bgt.w	800e560 <SwitchClass+0x1b8>
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d003      	beq.n	800e3d4 <SwitchClass+0x2c>
 800e3cc:	2b01      	cmp	r3, #1
 800e3ce:	f000 80a3 	beq.w	800e518 <SwitchClass+0x170>
 800e3d2:	e0c5      	b.n	800e560 <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800e3d4:	79fb      	ldrb	r3, [r7, #7]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d109      	bne.n	800e3ee <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800e3da:	4b64      	ldr	r3, [pc, #400]	@ (800e56c <SwitchClass+0x1c4>)
 800e3dc:	4a63      	ldr	r2, [pc, #396]	@ (800e56c <SwitchClass+0x1c4>)
 800e3de:	3374      	adds	r3, #116	@ 0x74
 800e3e0:	326c      	adds	r2, #108	@ 0x6c
 800e3e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e3e6:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800e3ee:	79fb      	ldrb	r3, [r7, #7]
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d10c      	bne.n	800e40e <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800e3f4:	79fb      	ldrb	r3, [r7, #7]
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f003 fb3d 	bl	8011a76 <LoRaMacClassBSwitchClass>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800e400:	7bfb      	ldrb	r3, [r7, #15]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d103      	bne.n	800e40e <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800e406:	4a59      	ldr	r2, [pc, #356]	@ (800e56c <SwitchClass+0x1c4>)
 800e408:	79fb      	ldrb	r3, [r7, #7]
 800e40a:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800e40e:	79fb      	ldrb	r3, [r7, #7]
 800e410:	2b02      	cmp	r3, #2
 800e412:	f040 80a0 	bne.w	800e556 <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e416:	4a55      	ldr	r2, [pc, #340]	@ (800e56c <SwitchClass+0x1c4>)
 800e418:	79fb      	ldrb	r3, [r7, #7]
 800e41a:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800e41e:	4a54      	ldr	r2, [pc, #336]	@ (800e570 <SwitchClass+0x1c8>)
 800e420:	4b53      	ldr	r3, [pc, #332]	@ (800e570 <SwitchClass+0x1c8>)
 800e422:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 800e426:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 800e42a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e42c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e42e:	682b      	ldr	r3, [r5, #0]
 800e430:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e432:	4b4f      	ldr	r3, [pc, #316]	@ (800e570 <SwitchClass+0x1c8>)
 800e434:	2202      	movs	r2, #2
 800e436:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e43a:	2300      	movs	r3, #0
 800e43c:	73bb      	strb	r3, [r7, #14]
 800e43e:	e05b      	b.n	800e4f8 <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800e440:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800e444:	4949      	ldr	r1, [pc, #292]	@ (800e56c <SwitchClass+0x1c4>)
 800e446:	4613      	mov	r3, r2
 800e448:	005b      	lsls	r3, r3, #1
 800e44a:	4413      	add	r3, r2
 800e44c:	011b      	lsls	r3, r3, #4
 800e44e:	440b      	add	r3, r1
 800e450:	33e9      	adds	r3, #233	@ 0xe9
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d049      	beq.n	800e4ec <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800e458:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800e45c:	4943      	ldr	r1, [pc, #268]	@ (800e56c <SwitchClass+0x1c4>)
 800e45e:	4613      	mov	r3, r2
 800e460:	005b      	lsls	r3, r3, #1
 800e462:	4413      	add	r3, r2
 800e464:	011b      	lsls	r3, r3, #4
 800e466:	440b      	add	r3, r1
 800e468:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e46c:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800e46e:	2b02      	cmp	r3, #2
 800e470:	d13c      	bne.n	800e4ec <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800e472:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800e476:	493d      	ldr	r1, [pc, #244]	@ (800e56c <SwitchClass+0x1c4>)
 800e478:	4613      	mov	r3, r2
 800e47a:	005b      	lsls	r3, r3, #1
 800e47c:	4413      	add	r3, r2
 800e47e:	011b      	lsls	r3, r3, #4
 800e480:	440b      	add	r3, r1
 800e482:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4a38      	ldr	r2, [pc, #224]	@ (800e56c <SwitchClass+0x1c4>)
 800e48a:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800e48c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800e490:	4936      	ldr	r1, [pc, #216]	@ (800e56c <SwitchClass+0x1c4>)
 800e492:	4613      	mov	r3, r2
 800e494:	005b      	lsls	r3, r3, #1
 800e496:	4413      	add	r3, r2
 800e498:	011b      	lsls	r3, r3, #4
 800e49a:	440b      	add	r3, r1
 800e49c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800e4a0:	f993 3000 	ldrsb.w	r3, [r3]
 800e4a4:	b2da      	uxtb	r2, r3
 800e4a6:	4b31      	ldr	r3, [pc, #196]	@ (800e56c <SwitchClass+0x1c4>)
 800e4a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800e4ac:	4b30      	ldr	r3, [pc, #192]	@ (800e570 <SwitchClass+0x1c8>)
 800e4ae:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800e4b2:	4b2f      	ldr	r3, [pc, #188]	@ (800e570 <SwitchClass+0x1c8>)
 800e4b4:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800e4b8:	4b2c      	ldr	r3, [pc, #176]	@ (800e56c <SwitchClass+0x1c4>)
 800e4ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e4bc:	4a2c      	ldr	r2, [pc, #176]	@ (800e570 <SwitchClass+0x1c8>)
 800e4be:	f8c2 33e4 	str.w	r3, [r2, #996]	@ 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e4c2:	4b2a      	ldr	r3, [pc, #168]	@ (800e56c <SwitchClass+0x1c4>)
 800e4c4:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800e4c8:	4b29      	ldr	r3, [pc, #164]	@ (800e570 <SwitchClass+0x1c8>)
 800e4ca:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e4ce:	4b27      	ldr	r3, [pc, #156]	@ (800e56c <SwitchClass+0x1c4>)
 800e4d0:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800e4d4:	4b26      	ldr	r3, [pc, #152]	@ (800e570 <SwitchClass+0x1c8>)
 800e4d6:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e4da:	4b25      	ldr	r3, [pc, #148]	@ (800e570 <SwitchClass+0x1c8>)
 800e4dc:	2203      	movs	r2, #3
 800e4de:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800e4e2:	4b23      	ldr	r3, [pc, #140]	@ (800e570 <SwitchClass+0x1c8>)
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
                        break;
 800e4ea:	e009      	b.n	800e500 <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e4ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4f0:	b2db      	uxtb	r3, r3
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	b2db      	uxtb	r3, r3
 800e4f6:	73bb      	strb	r3, [r7, #14]
 800e4f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	dd9f      	ble.n	800e440 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800e500:	4b1b      	ldr	r3, [pc, #108]	@ (800e570 <SwitchClass+0x1c8>)
 800e502:	2200      	movs	r2, #0
 800e504:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800e508:	4b1a      	ldr	r3, [pc, #104]	@ (800e574 <SwitchClass+0x1cc>)
 800e50a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e50c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800e50e:	f001 f9e5 	bl	800f8dc <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800e512:	2300      	movs	r3, #0
 800e514:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800e516:	e01e      	b.n	800e556 <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800e518:	79fb      	ldrb	r3, [r7, #7]
 800e51a:	4618      	mov	r0, r3
 800e51c:	f003 faab 	bl	8011a76 <LoRaMacClassBSwitchClass>
 800e520:	4603      	mov	r3, r0
 800e522:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800e524:	7bfb      	ldrb	r3, [r7, #15]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d117      	bne.n	800e55a <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e52a:	4a10      	ldr	r2, [pc, #64]	@ (800e56c <SwitchClass+0x1c4>)
 800e52c:	79fb      	ldrb	r3, [r7, #7]
 800e52e:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 800e532:	e012      	b.n	800e55a <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800e534:	79fb      	ldrb	r3, [r7, #7]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d111      	bne.n	800e55e <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800e53a:	4b0d      	ldr	r3, [pc, #52]	@ (800e570 <SwitchClass+0x1c8>)
 800e53c:	2206      	movs	r2, #6
 800e53e:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e542:	4a0a      	ldr	r2, [pc, #40]	@ (800e56c <SwitchClass+0x1c4>)
 800e544:	79fb      	ldrb	r3, [r7, #7]
 800e546:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800e54a:	4b0a      	ldr	r3, [pc, #40]	@ (800e574 <SwitchClass+0x1cc>)
 800e54c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e54e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800e550:	2300      	movs	r3, #0
 800e552:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800e554:	e003      	b.n	800e55e <SwitchClass+0x1b6>
            break;
 800e556:	bf00      	nop
 800e558:	e002      	b.n	800e560 <SwitchClass+0x1b8>
            break;
 800e55a:	bf00      	nop
 800e55c:	e000      	b.n	800e560 <SwitchClass+0x1b8>
            break;
 800e55e:	bf00      	nop
        }
    }

    return status;
 800e560:	7bfb      	ldrb	r3, [r7, #15]
}
 800e562:	4618      	mov	r0, r3
 800e564:	3710      	adds	r7, #16
 800e566:	46bd      	mov	sp, r7
 800e568:	bdb0      	pop	{r4, r5, r7, pc}
 800e56a:	bf00      	nop
 800e56c:	20000a70 	.word	0x20000a70
 800e570:	20000568 	.word	0x20000568
 800e574:	0801d86c 	.word	0x0801d86c

0800e578 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b086      	sub	sp, #24
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	4603      	mov	r3, r0
 800e580:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e582:	4b10      	ldr	r3, [pc, #64]	@ (800e5c4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e584:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800e588:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800e58a:	79fb      	ldrb	r3, [r7, #7]
 800e58c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e58e:	230d      	movs	r3, #13
 800e590:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e592:	4b0c      	ldr	r3, [pc, #48]	@ (800e5c4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e594:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d001      	beq.n	800e5a0 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e59c:	230e      	movs	r3, #14
 800e59e:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e5a0:	4b08      	ldr	r3, [pc, #32]	@ (800e5c4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e5a2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e5a6:	f107 0210 	add.w	r2, r7, #16
 800e5aa:	4611      	mov	r1, r2
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f005 f9c3 	bl	8013938 <RegionGetPhyParam>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	b2db      	uxtb	r3, r3
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3718      	adds	r7, #24
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	20000a70 	.word	0x20000a70

0800e5c8 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	71fb      	strb	r3, [r7, #7]
 800e5d2:	460b      	mov	r3, r1
 800e5d4:	71bb      	strb	r3, [r7, #6]
 800e5d6:	4613      	mov	r3, r2
 800e5d8:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800e5e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7ff ffc6 	bl	800e578 <GetMaxAppPayloadWithoutFOptsLength>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800e5f0:	79fb      	ldrb	r3, [r7, #7]
 800e5f2:	b29a      	uxth	r2, r3
 800e5f4:	797b      	ldrb	r3, [r7, #5]
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	4413      	add	r3, r2
 800e5fa:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800e5fc:	89ba      	ldrh	r2, [r7, #12]
 800e5fe:	89fb      	ldrh	r3, [r7, #14]
 800e600:	429a      	cmp	r2, r3
 800e602:	d804      	bhi.n	800e60e <ValidatePayloadLength+0x46>
 800e604:	89bb      	ldrh	r3, [r7, #12]
 800e606:	2bff      	cmp	r3, #255	@ 0xff
 800e608:	d801      	bhi.n	800e60e <ValidatePayloadLength+0x46>
    {
        return true;
 800e60a:	2301      	movs	r3, #1
 800e60c:	e000      	b.n	800e610 <ValidatePayloadLength+0x48>
    }
    return false;
 800e60e:	2300      	movs	r3, #0
}
 800e610:	4618      	mov	r0, r3
 800e612:	3710      	adds	r7, #16
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800e618:	b590      	push	{r4, r7, lr}
 800e61a:	b0a5      	sub	sp, #148	@ 0x94
 800e61c:	af02      	add	r7, sp, #8
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	4608      	mov	r0, r1
 800e622:	4611      	mov	r1, r2
 800e624:	461a      	mov	r2, r3
 800e626:	4603      	mov	r3, r0
 800e628:	70fb      	strb	r3, [r7, #3]
 800e62a:	460b      	mov	r3, r1
 800e62c:	70bb      	strb	r3, [r7, #2]
 800e62e:	4613      	mov	r3, r2
 800e630:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800e632:	2300      	movs	r3, #0
 800e634:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800e638:	2300      	movs	r3, #0
 800e63a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800e63e:	2300      	movs	r3, #0
 800e640:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800e644:	f000 bc7d 	b.w	800ef42 <ProcessMacCommands+0x92a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800e648:	78fb      	ldrb	r3, [r7, #3]
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	4413      	add	r3, r2
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	4618      	mov	r0, r3
 800e652:	f003 fcf5 	bl	8012040 <LoRaMacCommandsGetCmdSize>
 800e656:	4603      	mov	r3, r0
 800e658:	461a      	mov	r2, r3
 800e65a:	78fb      	ldrb	r3, [r7, #3]
 800e65c:	441a      	add	r2, r3
 800e65e:	78bb      	ldrb	r3, [r7, #2]
 800e660:	429a      	cmp	r2, r3
 800e662:	f300 8474 	bgt.w	800ef4e <ProcessMacCommands+0x936>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800e666:	78fb      	ldrb	r3, [r7, #3]
 800e668:	1c5a      	adds	r2, r3, #1
 800e66a:	70fa      	strb	r2, [r7, #3]
 800e66c:	461a      	mov	r2, r3
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4413      	add	r3, r2
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	3b02      	subs	r3, #2
 800e676:	2b11      	cmp	r3, #17
 800e678:	f200 846b 	bhi.w	800ef52 <ProcessMacCommands+0x93a>
 800e67c:	a201      	add	r2, pc, #4	@ (adr r2, 800e684 <ProcessMacCommands+0x6c>)
 800e67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e682:	bf00      	nop
 800e684:	0800e6cd 	.word	0x0800e6cd
 800e688:	0800e70f 	.word	0x0800e70f
 800e68c:	0800e82b 	.word	0x0800e82b
 800e690:	0800e869 	.word	0x0800e869
 800e694:	0800e953 	.word	0x0800e953
 800e698:	0800e9b1 	.word	0x0800e9b1
 800e69c:	0800ea6d 	.word	0x0800ea6d
 800e6a0:	0800eac3 	.word	0x0800eac3
 800e6a4:	0800eba9 	.word	0x0800eba9
 800e6a8:	0800ef53 	.word	0x0800ef53
 800e6ac:	0800ef53 	.word	0x0800ef53
 800e6b0:	0800ec4d 	.word	0x0800ec4d
 800e6b4:	0800ef53 	.word	0x0800ef53
 800e6b8:	0800ef53 	.word	0x0800ef53
 800e6bc:	0800ed63 	.word	0x0800ed63
 800e6c0:	0800ed97 	.word	0x0800ed97
 800e6c4:	0800ee27 	.word	0x0800ee27
 800e6c8:	0800ee9f 	.word	0x0800ee9f
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800e6cc:	2005      	movs	r0, #5
 800e6ce:	f003 fe8f 	bl	80123f0 <LoRaMacConfirmQueueIsCmdActive>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	f000 8425 	beq.w	800ef24 <ProcessMacCommands+0x90c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800e6da:	2105      	movs	r1, #5
 800e6dc:	2000      	movs	r0, #0
 800e6de:	f003 fdfb 	bl	80122d8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800e6e2:	78fb      	ldrb	r3, [r7, #3]
 800e6e4:	1c5a      	adds	r2, r3, #1
 800e6e6:	70fa      	strb	r2, [r7, #3]
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	781a      	ldrb	r2, [r3, #0]
 800e6f0:	4bac      	ldr	r3, [pc, #688]	@ (800e9a4 <ProcessMacCommands+0x38c>)
 800e6f2:	f883 2450 	strb.w	r2, [r3, #1104]	@ 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800e6f6:	78fb      	ldrb	r3, [r7, #3]
 800e6f8:	1c5a      	adds	r2, r3, #1
 800e6fa:	70fa      	strb	r2, [r7, #3]
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4413      	add	r3, r2
 800e702:	781a      	ldrb	r2, [r3, #0]
 800e704:	4ba7      	ldr	r3, [pc, #668]	@ (800e9a4 <ProcessMacCommands+0x38c>)
 800e706:	f883 2451 	strb.w	r2, [r3, #1105]	@ 0x451
                }
                break;
 800e70a:	f000 bc0b 	b.w	800ef24 <ProcessMacCommands+0x90c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800e70e:	2300      	movs	r3, #0
 800e710:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800e714:	2300      	movs	r3, #0
 800e716:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800e71a:	2300      	movs	r3, #0
 800e71c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800e720:	2300      	movs	r3, #0
 800e722:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 800e726:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800e72a:	f083 0301 	eor.w	r3, r3, #1
 800e72e:	b2db      	uxtb	r3, r3
 800e730:	2b00      	cmp	r3, #0
 800e732:	f000 83f9 	beq.w	800ef28 <ProcessMacCommands+0x910>
                {
                    adrBlockFound = true;
 800e736:	2301      	movs	r3, #1
 800e738:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800e73c:	78fb      	ldrb	r3, [r7, #3]
 800e73e:	3b01      	subs	r3, #1
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	4413      	add	r3, r2
 800e744:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800e746:	78ba      	ldrb	r2, [r7, #2]
 800e748:	78fb      	ldrb	r3, [r7, #3]
 800e74a:	1ad3      	subs	r3, r2, r3
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	3301      	adds	r3, #1
 800e750:	b2db      	uxtb	r3, r3
 800e752:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800e756:	4b94      	ldr	r3, [pc, #592]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e758:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800e75c:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e760:	4b91      	ldr	r3, [pc, #580]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e762:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800e766:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800e76a:	4b8f      	ldr	r3, [pc, #572]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e76c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800e770:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e774:	4b8c      	ldr	r3, [pc, #560]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e776:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800e77a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e77e:	4b8a      	ldr	r3, [pc, #552]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e780:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800e784:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800e788:	4b87      	ldr	r3, [pc, #540]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e78a:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800e78e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800e790:	4b85      	ldr	r3, [pc, #532]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e792:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800e796:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800e79a:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800e79e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800e7a2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800e7a6:	9301      	str	r3, [sp, #4]
 800e7a8:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800e7ac:	9300      	str	r3, [sp, #0]
 800e7ae:	4623      	mov	r3, r4
 800e7b0:	f005 f9c5 	bl	8013b3e <RegionLinkAdrReq>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800e7ba:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800e7be:	f003 0307 	and.w	r3, r3, #7
 800e7c2:	2b07      	cmp	r3, #7
 800e7c4:	d10e      	bne.n	800e7e4 <ProcessMacCommands+0x1cc>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800e7c6:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800e7ca:	4b77      	ldr	r3, [pc, #476]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e7cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800e7d0:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800e7d4:	4b74      	ldr	r3, [pc, #464]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e7d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800e7da:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800e7de:	4b72      	ldr	r3, [pc, #456]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e7e0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800e7ea:	e00b      	b.n	800e804 <ProcessMacCommands+0x1ec>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800e7ec:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	2003      	movs	r0, #3
 800e7f6:	f003 fac3 	bl	8011d80 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800e7fa:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800e7fe:	3301      	adds	r3, #1
 800e800:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800e804:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800e808:	4a68      	ldr	r2, [pc, #416]	@ (800e9ac <ProcessMacCommands+0x394>)
 800e80a:	fba2 2303 	umull	r2, r3, r2, r3
 800e80e:	089b      	lsrs	r3, r3, #2
 800e810:	b2db      	uxtb	r3, r3
 800e812:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800e816:	429a      	cmp	r2, r3
 800e818:	d3e8      	bcc.n	800e7ec <ProcessMacCommands+0x1d4>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800e81a:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e81e:	78fb      	ldrb	r3, [r7, #3]
 800e820:	4413      	add	r3, r2
 800e822:	b2db      	uxtb	r3, r3
 800e824:	3b01      	subs	r3, #1
 800e826:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800e828:	e37e      	b.n	800ef28 <ProcessMacCommands+0x910>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800e82a:	78fb      	ldrb	r3, [r7, #3]
 800e82c:	1c5a      	adds	r2, r3, #1
 800e82e:	70fa      	strb	r2, [r7, #3]
 800e830:	461a      	mov	r2, r3
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	4413      	add	r3, r2
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	f003 030f 	and.w	r3, r3, #15
 800e83c:	b2da      	uxtb	r2, r3
 800e83e:	4b5a      	ldr	r3, [pc, #360]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e840:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800e844:	4b58      	ldr	r3, [pc, #352]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e846:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800e84a:	461a      	mov	r2, r3
 800e84c:	2301      	movs	r3, #1
 800e84e:	4093      	lsls	r3, r2
 800e850:	b29a      	uxth	r2, r3
 800e852:	4b55      	ldr	r3, [pc, #340]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e854:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800e858:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800e85c:	2200      	movs	r2, #0
 800e85e:	4619      	mov	r1, r3
 800e860:	2004      	movs	r0, #4
 800e862:	f003 fa8d 	bl	8011d80 <LoRaMacCommandsAddCmd>
                break;
 800e866:	e36c      	b.n	800ef42 <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800e868:	2307      	movs	r3, #7
 800e86a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800e86e:	78fb      	ldrb	r3, [r7, #3]
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	4413      	add	r3, r2
 800e874:	781b      	ldrb	r3, [r3, #0]
 800e876:	091b      	lsrs	r3, r3, #4
 800e878:	b2db      	uxtb	r3, r3
 800e87a:	b25b      	sxtb	r3, r3
 800e87c:	f003 0307 	and.w	r3, r3, #7
 800e880:	b25b      	sxtb	r3, r3
 800e882:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800e886:	78fb      	ldrb	r3, [r7, #3]
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	4413      	add	r3, r2
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	b25b      	sxtb	r3, r3
 800e890:	f003 030f 	and.w	r3, r3, #15
 800e894:	b25b      	sxtb	r3, r3
 800e896:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800e89a:	78fb      	ldrb	r3, [r7, #3]
 800e89c:	3301      	adds	r3, #1
 800e89e:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800e8a0:	78fb      	ldrb	r3, [r7, #3]
 800e8a2:	1c5a      	adds	r2, r3, #1
 800e8a4:	70fa      	strb	r2, [r7, #3]
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	4413      	add	r3, r2
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e8b0:	78fb      	ldrb	r3, [r7, #3]
 800e8b2:	1c5a      	adds	r2, r3, #1
 800e8b4:	70fa      	strb	r2, [r7, #3]
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	021a      	lsls	r2, r3, #8
 800e8c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8c2:	4313      	orrs	r3, r2
 800e8c4:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e8c6:	78fb      	ldrb	r3, [r7, #3]
 800e8c8:	1c5a      	adds	r2, r3, #1
 800e8ca:	70fa      	strb	r2, [r7, #3]
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	4413      	add	r3, r2
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	041a      	lsls	r2, r3, #16
 800e8d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8d8:	4313      	orrs	r3, r2
 800e8da:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800e8dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8de:	2264      	movs	r2, #100	@ 0x64
 800e8e0:	fb02 f303 	mul.w	r3, r2, r3
 800e8e4:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800e8e6:	4b30      	ldr	r3, [pc, #192]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e8e8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e8ec:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800e8f0:	4611      	mov	r1, r2
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f005 f94a 	bl	8013b8c <RegionRxParamSetupReq>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800e8fe:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800e902:	f003 0307 	and.w	r3, r3, #7
 800e906:	2b07      	cmp	r3, #7
 800e908:	d117      	bne.n	800e93a <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800e90a:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800e90e:	b2da      	uxtb	r2, r3
 800e910:	4b25      	ldr	r3, [pc, #148]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e912:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800e916:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800e91a:	b2da      	uxtb	r2, r3
 800e91c:	4b22      	ldr	r3, [pc, #136]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e91e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800e922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e924:	4a20      	ldr	r2, [pc, #128]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e926:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800e928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e92a:	4a1f      	ldr	r2, [pc, #124]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e92c:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800e92e:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800e932:	b2da      	uxtb	r2, r3
 800e934:	4b1c      	ldr	r3, [pc, #112]	@ (800e9a8 <ProcessMacCommands+0x390>)
 800e936:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 800e93a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800e93e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800e942:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800e946:	2201      	movs	r2, #1
 800e948:	4619      	mov	r1, r3
 800e94a:	2005      	movs	r0, #5
 800e94c:	f003 fa18 	bl	8011d80 <LoRaMacCommandsAddCmd>
                break;
 800e950:	e2f7      	b.n	800ef42 <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800e952:	23ff      	movs	r3, #255	@ 0xff
 800e954:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800e958:	4b12      	ldr	r3, [pc, #72]	@ (800e9a4 <ProcessMacCommands+0x38c>)
 800e95a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d00d      	beq.n	800e97e <ProcessMacCommands+0x366>
 800e962:	4b10      	ldr	r3, [pc, #64]	@ (800e9a4 <ProcessMacCommands+0x38c>)
 800e964:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d007      	beq.n	800e97e <ProcessMacCommands+0x366>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800e96e:	4b0d      	ldr	r3, [pc, #52]	@ (800e9a4 <ProcessMacCommands+0x38c>)
 800e970:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4798      	blx	r3
 800e978:	4603      	mov	r3, r0
 800e97a:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800e97e:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800e982:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800e986:	787b      	ldrb	r3, [r7, #1]
 800e988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e98c:	b2db      	uxtb	r3, r3
 800e98e:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800e992:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800e996:	2202      	movs	r2, #2
 800e998:	4619      	mov	r1, r3
 800e99a:	2006      	movs	r0, #6
 800e99c:	f003 f9f0 	bl	8011d80 <LoRaMacCommandsAddCmd>
                break;
 800e9a0:	e2cf      	b.n	800ef42 <ProcessMacCommands+0x92a>
 800e9a2:	bf00      	nop
 800e9a4:	20000568 	.word	0x20000568
 800e9a8:	20000a70 	.word	0x20000a70
 800e9ac:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800e9b0:	2303      	movs	r3, #3
 800e9b2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800e9b6:	78fb      	ldrb	r3, [r7, #3]
 800e9b8:	1c5a      	adds	r2, r3, #1
 800e9ba:	70fa      	strb	r2, [r7, #3]
 800e9bc:	461a      	mov	r2, r3
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	b25b      	sxtb	r3, r3
 800e9c6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800e9ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800e9ce:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800e9d0:	78fb      	ldrb	r3, [r7, #3]
 800e9d2:	1c5a      	adds	r2, r3, #1
 800e9d4:	70fa      	strb	r2, [r7, #3]
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4413      	add	r3, r2
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e9e0:	78fb      	ldrb	r3, [r7, #3]
 800e9e2:	1c5a      	adds	r2, r3, #1
 800e9e4:	70fa      	strb	r2, [r7, #3]
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	4413      	add	r3, r2
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	021a      	lsls	r2, r3, #8
 800e9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e9f6:	78fb      	ldrb	r3, [r7, #3]
 800e9f8:	1c5a      	adds	r2, r3, #1
 800e9fa:	70fa      	strb	r2, [r7, #3]
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	4413      	add	r3, r2
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	041a      	lsls	r2, r3, #16
 800ea06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea08:	4313      	orrs	r3, r2
 800ea0a:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800ea0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea0e:	2264      	movs	r2, #100	@ 0x64
 800ea10:	fb02 f303 	mul.w	r3, r2, r3
 800ea14:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800ea16:	2300      	movs	r3, #0
 800ea18:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800ea1a:	78fb      	ldrb	r3, [r7, #3]
 800ea1c:	1c5a      	adds	r2, r3, #1
 800ea1e:	70fa      	strb	r2, [r7, #3]
 800ea20:	461a      	mov	r2, r3
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	4413      	add	r3, r2
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	b25b      	sxtb	r3, r3
 800ea2a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800ea2e:	4b85      	ldr	r3, [pc, #532]	@ (800ec44 <ProcessMacCommands+0x62c>)
 800ea30:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ea34:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800ea38:	4611      	mov	r1, r2
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f005 f8c1 	bl	8013bc2 <RegionNewChannelReq>
 800ea40:	4603      	mov	r3, r0
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800ea48:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ea4c:	b25b      	sxtb	r3, r3
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	f2c0 826c 	blt.w	800ef2c <ProcessMacCommands+0x914>
                {
                    macCmdPayload[0] = status;
 800ea54:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ea58:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800ea5c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ea60:	2201      	movs	r2, #1
 800ea62:	4619      	mov	r1, r3
 800ea64:	2007      	movs	r0, #7
 800ea66:	f003 f98b 	bl	8011d80 <LoRaMacCommandsAddCmd>
                }
                break;
 800ea6a:	e25f      	b.n	800ef2c <ProcessMacCommands+0x914>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800ea6c:	78fb      	ldrb	r3, [r7, #3]
 800ea6e:	1c5a      	adds	r2, r3, #1
 800ea70:	70fa      	strb	r2, [r7, #3]
 800ea72:	461a      	mov	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	4413      	add	r3, r2
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	f003 030f 	and.w	r3, r3, #15
 800ea7e:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800ea82:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d104      	bne.n	800ea94 <ProcessMacCommands+0x47c>
                {
                    delay++;
 800ea8a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800ea8e:	3301      	adds	r3, #1
 800ea90:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800ea94:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800ea98:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ea9c:	fb02 f303 	mul.w	r3, r2, r3
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	4b68      	ldr	r3, [pc, #416]	@ (800ec44 <ProcessMacCommands+0x62c>)
 800eaa4:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800eaa6:	4b67      	ldr	r3, [pc, #412]	@ (800ec44 <ProcessMacCommands+0x62c>)
 800eaa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eaaa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800eaae:	4a65      	ldr	r2, [pc, #404]	@ (800ec44 <ProcessMacCommands+0x62c>)
 800eab0:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800eab2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800eab6:	2200      	movs	r2, #0
 800eab8:	4619      	mov	r1, r3
 800eaba:	2008      	movs	r0, #8
 800eabc:	f003 f960 	bl	8011d80 <LoRaMacCommandsAddCmd>
                break;
 800eac0:	e23f      	b.n	800ef42 <ProcessMacCommands+0x92a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800eac2:	78fb      	ldrb	r3, [r7, #3]
 800eac4:	1c5a      	adds	r2, r3, #1
 800eac6:	70fa      	strb	r2, [r7, #3]
 800eac8:	461a      	mov	r2, r3
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	4413      	add	r3, r2
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800ead4:	2300      	movs	r3, #0
 800ead6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800eada:	2300      	movs	r3, #0
 800eadc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800eae0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800eae4:	f003 0320 	and.w	r3, r3, #32
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d002      	beq.n	800eaf2 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800eaec:	2301      	movs	r3, #1
 800eaee:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800eaf2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800eaf6:	f003 0310 	and.w	r3, r3, #16
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d002      	beq.n	800eb04 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800eafe:	2301      	movs	r3, #1
 800eb00:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800eb04:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800eb08:	f003 030f 	and.w	r3, r3, #15
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800eb12:	4b4c      	ldr	r3, [pc, #304]	@ (800ec44 <ProcessMacCommands+0x62c>)
 800eb14:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eb18:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800eb1c:	4611      	mov	r1, r2
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f005 f86a 	bl	8013bf8 <RegionTxParamSetupReq>
 800eb24:	4603      	mov	r3, r0
 800eb26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb2a:	f000 8201 	beq.w	800ef30 <ProcessMacCommands+0x918>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800eb2e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800eb32:	4b44      	ldr	r3, [pc, #272]	@ (800ec44 <ProcessMacCommands+0x62c>)
 800eb34:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800eb38:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800eb3c:	4b41      	ldr	r3, [pc, #260]	@ (800ec44 <ProcessMacCommands+0x62c>)
 800eb3e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800eb42:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800eb46:	461a      	mov	r2, r3
 800eb48:	4b3f      	ldr	r3, [pc, #252]	@ (800ec48 <ProcessMacCommands+0x630>)
 800eb4a:	5c9b      	ldrb	r3, [r3, r2]
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7f1 fe3d 	bl	80007cc <__aeabi_ui2f>
 800eb52:	4603      	mov	r3, r0
 800eb54:	4a3b      	ldr	r2, [pc, #236]	@ (800ec44 <ProcessMacCommands+0x62c>)
 800eb56:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800eb5a:	2302      	movs	r3, #2
 800eb5c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800eb60:	4b38      	ldr	r3, [pc, #224]	@ (800ec44 <ProcessMacCommands+0x62c>)
 800eb62:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800eb66:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eb6a:	4b36      	ldr	r3, [pc, #216]	@ (800ec44 <ProcessMacCommands+0x62c>)
 800eb6c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eb70:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800eb74:	4611      	mov	r1, r2
 800eb76:	4618      	mov	r0, r3
 800eb78:	f004 fede 	bl	8013938 <RegionGetPhyParam>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800eb80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb82:	b25a      	sxtb	r2, r3
 800eb84:	4b2f      	ldr	r3, [pc, #188]	@ (800ec44 <ProcessMacCommands+0x62c>)
 800eb86:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	bfb8      	it	lt
 800eb8e:	4613      	movlt	r3, r2
 800eb90:	b25a      	sxtb	r2, r3
 800eb92:	4b2c      	ldr	r3, [pc, #176]	@ (800ec44 <ProcessMacCommands+0x62c>)
 800eb94:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800eb98:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	4619      	mov	r1, r3
 800eba0:	2009      	movs	r0, #9
 800eba2:	f003 f8ed 	bl	8011d80 <LoRaMacCommandsAddCmd>
                }
                break;
 800eba6:	e1c3      	b.n	800ef30 <ProcessMacCommands+0x918>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800eba8:	2303      	movs	r3, #3
 800ebaa:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800ebae:	78fb      	ldrb	r3, [r7, #3]
 800ebb0:	1c5a      	adds	r2, r3, #1
 800ebb2:	70fa      	strb	r2, [r7, #3]
 800ebb4:	461a      	mov	r2, r3
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	4413      	add	r3, r2
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800ebc0:	78fb      	ldrb	r3, [r7, #3]
 800ebc2:	1c5a      	adds	r2, r3, #1
 800ebc4:	70fa      	strb	r2, [r7, #3]
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	4413      	add	r3, r2
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800ebd0:	78fb      	ldrb	r3, [r7, #3]
 800ebd2:	1c5a      	adds	r2, r3, #1
 800ebd4:	70fa      	strb	r2, [r7, #3]
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	4413      	add	r3, r2
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	021a      	lsls	r2, r3, #8
 800ebe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebe2:	4313      	orrs	r3, r2
 800ebe4:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ebe6:	78fb      	ldrb	r3, [r7, #3]
 800ebe8:	1c5a      	adds	r2, r3, #1
 800ebea:	70fa      	strb	r2, [r7, #3]
 800ebec:	461a      	mov	r2, r3
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	4413      	add	r3, r2
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	041a      	lsls	r2, r3, #16
 800ebf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebf8:	4313      	orrs	r3, r2
 800ebfa:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800ebfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebfe:	2264      	movs	r2, #100	@ 0x64
 800ec00:	fb02 f303 	mul.w	r3, r2, r3
 800ec04:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800ec06:	4b0f      	ldr	r3, [pc, #60]	@ (800ec44 <ProcessMacCommands+0x62c>)
 800ec08:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ec0c:	f107 0220 	add.w	r2, r7, #32
 800ec10:	4611      	mov	r1, r2
 800ec12:	4618      	mov	r0, r3
 800ec14:	f005 f80b 	bl	8013c2e <RegionDlChannelReq>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800ec20:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ec24:	b25b      	sxtb	r3, r3
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	f2c0 8184 	blt.w	800ef34 <ProcessMacCommands+0x91c>
                {
                    macCmdPayload[0] = status;
 800ec2c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ec30:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800ec34:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ec38:	2201      	movs	r2, #1
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	200a      	movs	r0, #10
 800ec3e:	f003 f89f 	bl	8011d80 <LoRaMacCommandsAddCmd>
                }
                break;
 800ec42:	e177      	b.n	800ef34 <ProcessMacCommands+0x91c>
 800ec44:	20000a70 	.word	0x20000a70
 800ec48:	0801d7a0 	.word	0x0801d7a0
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800ec4c:	200a      	movs	r0, #10
 800ec4e:	f003 fbcf 	bl	80123f0 <LoRaMacConfirmQueueIsCmdActive>
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	f000 816f 	beq.w	800ef38 <ProcessMacCommands+0x920>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800ec5a:	210a      	movs	r1, #10
 800ec5c:	2000      	movs	r0, #0
 800ec5e:	f003 fb3b 	bl	80122d8 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800ec62:	f107 0318 	add.w	r3, r7, #24
 800ec66:	2200      	movs	r2, #0
 800ec68:	601a      	str	r2, [r3, #0]
 800ec6a:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800ec6c:	f107 0310 	add.w	r3, r7, #16
 800ec70:	2200      	movs	r2, #0
 800ec72:	601a      	str	r2, [r3, #0]
 800ec74:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800ec76:	f107 0308 	add.w	r3, r7, #8
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	601a      	str	r2, [r3, #0]
 800ec7e:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800ec80:	78fb      	ldrb	r3, [r7, #3]
 800ec82:	1c5a      	adds	r2, r3, #1
 800ec84:	70fa      	strb	r2, [r7, #3]
 800ec86:	461a      	mov	r2, r3
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	4413      	add	r3, r2
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800ec90:	78fb      	ldrb	r3, [r7, #3]
 800ec92:	1c5a      	adds	r2, r3, #1
 800ec94:	70fa      	strb	r2, [r7, #3]
 800ec96:	461a      	mov	r2, r3
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	4413      	add	r3, r2
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	021a      	lsls	r2, r3, #8
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	4313      	orrs	r3, r2
 800eca4:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800eca6:	78fb      	ldrb	r3, [r7, #3]
 800eca8:	1c5a      	adds	r2, r3, #1
 800ecaa:	70fa      	strb	r2, [r7, #3]
 800ecac:	461a      	mov	r2, r3
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	4413      	add	r3, r2
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	041a      	lsls	r2, r3, #16
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	4313      	orrs	r3, r2
 800ecba:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800ecbc:	78fb      	ldrb	r3, [r7, #3]
 800ecbe:	1c5a      	adds	r2, r3, #1
 800ecc0:	70fa      	strb	r2, [r7, #3]
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	4413      	add	r3, r2
 800ecc8:	781b      	ldrb	r3, [r3, #0]
 800ecca:	061a      	lsls	r2, r3, #24
 800eccc:	69bb      	ldr	r3, [r7, #24]
 800ecce:	4313      	orrs	r3, r2
 800ecd0:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800ecd2:	78fb      	ldrb	r3, [r7, #3]
 800ecd4:	1c5a      	adds	r2, r3, #1
 800ecd6:	70fa      	strb	r2, [r7, #3]
 800ecd8:	461a      	mov	r2, r3
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	4413      	add	r3, r2
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	b21b      	sxth	r3, r3
 800ece2:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800ece4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ece8:	461a      	mov	r2, r3
 800ecea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ecee:	fb02 f303 	mul.w	r3, r2, r3
 800ecf2:	121b      	asrs	r3, r3, #8
 800ecf4:	b21b      	sxth	r3, r3
 800ecf6:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800ecf8:	f107 0310 	add.w	r3, r7, #16
 800ecfc:	f107 0218 	add.w	r2, r7, #24
 800ed00:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed04:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800ed08:	693a      	ldr	r2, [r7, #16]
 800ed0a:	4b94      	ldr	r3, [pc, #592]	@ (800ef5c <ProcessMacCommands+0x944>)
 800ed0c:	4413      	add	r3, r2
 800ed0e:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800ed10:	f107 0308 	add.w	r3, r7, #8
 800ed14:	4618      	mov	r0, r3
 800ed16:	f00c f913 	bl	801af40 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800ed1a:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800ed1e:	4b90      	ldr	r3, [pc, #576]	@ (800ef60 <ProcessMacCommands+0x948>)
 800ed20:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800ed24:	9200      	str	r2, [sp, #0]
 800ed26:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800ed2a:	f107 0210 	add.w	r2, r7, #16
 800ed2e:	ca06      	ldmia	r2, {r1, r2}
 800ed30:	f00c f89f 	bl	801ae72 <SysTimeSub>
 800ed34:	f107 0010 	add.w	r0, r7, #16
 800ed38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ed3a:	9300      	str	r3, [sp, #0]
 800ed3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed3e:	f107 0208 	add.w	r2, r7, #8
 800ed42:	ca06      	ldmia	r2, {r1, r2}
 800ed44:	f00c f85c 	bl	801ae00 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800ed48:	f107 0310 	add.w	r3, r7, #16
 800ed4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ed50:	f00c f8c8 	bl	801aee4 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800ed54:	f002 fecd 	bl	8011af2 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800ed58:	4b81      	ldr	r3, [pc, #516]	@ (800ef60 <ProcessMacCommands+0x948>)
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800ed60:	e0ea      	b.n	800ef38 <ProcessMacCommands+0x920>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800ed62:	200d      	movs	r0, #13
 800ed64:	f003 fb44 	bl	80123f0 <LoRaMacConfirmQueueIsCmdActive>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f000 80e6 	beq.w	800ef3c <ProcessMacCommands+0x924>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800ed70:	210d      	movs	r1, #13
 800ed72:	2000      	movs	r0, #0
 800ed74:	f003 fab0 	bl	80122d8 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800ed78:	4b79      	ldr	r3, [pc, #484]	@ (800ef60 <ProcessMacCommands+0x948>)
 800ed7a:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800ed7e:	2b04      	cmp	r3, #4
 800ed80:	f000 80dc 	beq.w	800ef3c <ProcessMacCommands+0x924>
 800ed84:	4b76      	ldr	r3, [pc, #472]	@ (800ef60 <ProcessMacCommands+0x948>)
 800ed86:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800ed8a:	2b05      	cmp	r3, #5
 800ed8c:	f000 80d6 	beq.w	800ef3c <ProcessMacCommands+0x924>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800ed90:	f002 fe90 	bl	8011ab4 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800ed94:	e0d2      	b.n	800ef3c <ProcessMacCommands+0x924>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800ed96:	2303      	movs	r3, #3
 800ed98:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800eda0:	78fb      	ldrb	r3, [r7, #3]
 800eda2:	1c5a      	adds	r2, r3, #1
 800eda4:	70fa      	strb	r2, [r7, #3]
 800eda6:	461a      	mov	r2, r3
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	4413      	add	r3, r2
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800edb0:	78fb      	ldrb	r3, [r7, #3]
 800edb2:	1c5a      	adds	r2, r3, #1
 800edb4:	70fa      	strb	r2, [r7, #3]
 800edb6:	461a      	mov	r2, r3
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	4413      	add	r3, r2
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	021b      	lsls	r3, r3, #8
 800edc0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800edc2:	4313      	orrs	r3, r2
 800edc4:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800edc6:	78fb      	ldrb	r3, [r7, #3]
 800edc8:	1c5a      	adds	r2, r3, #1
 800edca:	70fa      	strb	r2, [r7, #3]
 800edcc:	461a      	mov	r2, r3
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	4413      	add	r3, r2
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	041b      	lsls	r3, r3, #16
 800edd6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800edd8:	4313      	orrs	r3, r2
 800edda:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800eddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800edde:	2264      	movs	r2, #100	@ 0x64
 800ede0:	fb02 f303 	mul.w	r3, r2, r3
 800ede4:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800ede6:	78fb      	ldrb	r3, [r7, #3]
 800ede8:	1c5a      	adds	r2, r3, #1
 800edea:	70fa      	strb	r2, [r7, #3]
 800edec:	461a      	mov	r2, r3
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	4413      	add	r3, r2
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	f003 030f 	and.w	r3, r3, #15
 800edf8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800edfc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ee00:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ee02:	4618      	mov	r0, r3
 800ee04:	f002 fe5c 	bl	8011ac0 <LoRaMacClassBPingSlotChannelReq>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 800ee0e:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800ee12:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800ee16:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	4619      	mov	r1, r3
 800ee1e:	2011      	movs	r0, #17
 800ee20:	f002 ffae 	bl	8011d80 <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 800ee24:	e08d      	b.n	800ef42 <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800ee26:	200e      	movs	r0, #14
 800ee28:	f003 fae2 	bl	80123f0 <LoRaMacConfirmQueueIsCmdActive>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	f000 8086 	beq.w	800ef40 <ProcessMacCommands+0x928>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800ee34:	210e      	movs	r1, #14
 800ee36:	2000      	movs	r0, #0
 800ee38:	f003 fa4e 	bl	80122d8 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 800ee42:	2300      	movs	r3, #0
 800ee44:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800ee48:	78fb      	ldrb	r3, [r7, #3]
 800ee4a:	1c5a      	adds	r2, r3, #1
 800ee4c:	70fa      	strb	r2, [r7, #3]
 800ee4e:	461a      	mov	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	4413      	add	r3, r2
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800ee5a:	78fb      	ldrb	r3, [r7, #3]
 800ee5c:	1c5a      	adds	r2, r3, #1
 800ee5e:	70fa      	strb	r2, [r7, #3]
 800ee60:	461a      	mov	r2, r3
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4413      	add	r3, r2
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	021b      	lsls	r3, r3, #8
 800ee6a:	b21a      	sxth	r2, r3
 800ee6c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800ee70:	4313      	orrs	r3, r2
 800ee72:	b21b      	sxth	r3, r3
 800ee74:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800ee78:	78fb      	ldrb	r3, [r7, #3]
 800ee7a:	1c5a      	adds	r2, r3, #1
 800ee7c:	70fa      	strb	r2, [r7, #3]
 800ee7e:	461a      	mov	r2, r3
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	4413      	add	r3, r2
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800ee8a:	4b36      	ldr	r3, [pc, #216]	@ (800ef64 <ProcessMacCommands+0x94c>)
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 800ee92:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800ee96:	4618      	mov	r0, r3
 800ee98:	f002 fe1e 	bl	8011ad8 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800ee9c:	e050      	b.n	800ef40 <ProcessMacCommands+0x928>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800eea4:	78fb      	ldrb	r3, [r7, #3]
 800eea6:	1c5a      	adds	r2, r3, #1
 800eea8:	70fa      	strb	r2, [r7, #3]
 800eeaa:	461a      	mov	r2, r3
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	4413      	add	r3, r2
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800eeb6:	78fb      	ldrb	r3, [r7, #3]
 800eeb8:	1c5a      	adds	r2, r3, #1
 800eeba:	70fa      	strb	r2, [r7, #3]
 800eebc:	461a      	mov	r2, r3
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	4413      	add	r3, r2
 800eec2:	781b      	ldrb	r3, [r3, #0]
 800eec4:	021b      	lsls	r3, r3, #8
 800eec6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800eeca:	4313      	orrs	r3, r2
 800eecc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800eed0:	78fb      	ldrb	r3, [r7, #3]
 800eed2:	1c5a      	adds	r2, r3, #1
 800eed4:	70fa      	strb	r2, [r7, #3]
 800eed6:	461a      	mov	r2, r3
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	4413      	add	r3, r2
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	041b      	lsls	r3, r3, #16
 800eee0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800eee4:	4313      	orrs	r3, r2
 800eee6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 800eeea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eeee:	2264      	movs	r2, #100	@ 0x64
 800eef0:	fb02 f303 	mul.w	r3, r2, r3
 800eef4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800eef8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800eefc:	f002 fdff 	bl	8011afe <LoRaMacClassBBeaconFreqReq>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d003      	beq.n	800ef0e <ProcessMacCommands+0x8f6>
                    {
                        macCmdPayload[0] = 1;
 800ef06:	2301      	movs	r3, #1
 800ef08:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800ef0c:	e002      	b.n	800ef14 <ProcessMacCommands+0x8fc>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800ef14:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ef18:	2201      	movs	r2, #1
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	2013      	movs	r0, #19
 800ef1e:	f002 ff2f 	bl	8011d80 <LoRaMacCommandsAddCmd>
                }
                break;
 800ef22:	e00e      	b.n	800ef42 <ProcessMacCommands+0x92a>
                break;
 800ef24:	bf00      	nop
 800ef26:	e00c      	b.n	800ef42 <ProcessMacCommands+0x92a>
                break;
 800ef28:	bf00      	nop
 800ef2a:	e00a      	b.n	800ef42 <ProcessMacCommands+0x92a>
                break;
 800ef2c:	bf00      	nop
 800ef2e:	e008      	b.n	800ef42 <ProcessMacCommands+0x92a>
                break;
 800ef30:	bf00      	nop
 800ef32:	e006      	b.n	800ef42 <ProcessMacCommands+0x92a>
                break;
 800ef34:	bf00      	nop
 800ef36:	e004      	b.n	800ef42 <ProcessMacCommands+0x92a>
                break;
 800ef38:	bf00      	nop
 800ef3a:	e002      	b.n	800ef42 <ProcessMacCommands+0x92a>
                break;
 800ef3c:	bf00      	nop
 800ef3e:	e000      	b.n	800ef42 <ProcessMacCommands+0x92a>
                break;
 800ef40:	bf00      	nop
    while( macIndex < commandsSize )
 800ef42:	78fa      	ldrb	r2, [r7, #3]
 800ef44:	78bb      	ldrb	r3, [r7, #2]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	f4ff ab7e 	bcc.w	800e648 <ProcessMacCommands+0x30>
 800ef4c:	e002      	b.n	800ef54 <ProcessMacCommands+0x93c>
            return;
 800ef4e:	bf00      	nop
 800ef50:	e000      	b.n	800ef54 <ProcessMacCommands+0x93c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800ef52:	bf00      	nop
        }
    }
}
 800ef54:	378c      	adds	r7, #140	@ 0x8c
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd90      	pop	{r4, r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	12d53d80 	.word	0x12d53d80
 800ef60:	20000568 	.word	0x20000568
 800ef64:	200011f0 	.word	0x200011f0

0800ef68 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b08e      	sub	sp, #56	@ 0x38
 800ef6c:	af02      	add	r7, sp, #8
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	607a      	str	r2, [r7, #4]
 800ef72:	461a      	mov	r2, r3
 800ef74:	460b      	mov	r3, r1
 800ef76:	72fb      	strb	r3, [r7, #11]
 800ef78:	4613      	mov	r3, r2
 800ef7a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef7c:	2303      	movs	r3, #3
 800ef7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ef82:	4b65      	ldr	r3, [pc, #404]	@ (800f118 <Send+0x1b0>)
 800ef84:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ef88:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800ef8c:	4b62      	ldr	r3, [pc, #392]	@ (800f118 <Send+0x1b0>)
 800ef8e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ef92:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ef96:	4b60      	ldr	r3, [pc, #384]	@ (800f118 <Send+0x1b0>)
 800ef98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ef9c:	4b5e      	ldr	r3, [pc, #376]	@ (800f118 <Send+0x1b0>)
 800ef9e:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d101      	bne.n	800efaa <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800efa6:	2307      	movs	r3, #7
 800efa8:	e0b1      	b.n	800f10e <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800efaa:	4b5b      	ldr	r3, [pc, #364]	@ (800f118 <Send+0x1b0>)
 800efac:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d102      	bne.n	800efba <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800efb4:	4b58      	ldr	r3, [pc, #352]	@ (800f118 <Send+0x1b0>)
 800efb6:	2200      	movs	r2, #0
 800efb8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 800efba:	2300      	movs	r3, #0
 800efbc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800efc0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800efc4:	f36f 0303 	bfc	r3, #0, #4
 800efc8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800efcc:	4b52      	ldr	r3, [pc, #328]	@ (800f118 <Send+0x1b0>)
 800efce:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800efd2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800efd6:	f362 13c7 	bfi	r3, r2, #7, #1
 800efda:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800efde:	4b4e      	ldr	r3, [pc, #312]	@ (800f118 <Send+0x1b0>)
 800efe0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d106      	bne.n	800eff6 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800efe8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800efec:	f043 0310 	orr.w	r3, r3, #16
 800eff0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800eff4:	e005      	b.n	800f002 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800eff6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800effa:	f36f 1304 	bfc	r3, #4, #1
 800effe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800f002:	4b45      	ldr	r3, [pc, #276]	@ (800f118 <Send+0x1b0>)
 800f004:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d005      	beq.n	800f018 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800f00c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f010:	f043 0320 	orr.w	r3, r3, #32
 800f014:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 800f018:	2301      	movs	r3, #1
 800f01a:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800f01c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f020:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f024:	b2db      	uxtb	r3, r3
 800f026:	2b00      	cmp	r3, #0
 800f028:	bf14      	ite	ne
 800f02a:	2301      	movne	r3, #1
 800f02c:	2300      	moveq	r3, #0
 800f02e:	b2db      	uxtb	r3, r3
 800f030:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f032:	4b39      	ldr	r3, [pc, #228]	@ (800f118 <Send+0x1b0>)
 800f034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f036:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800f038:	4b37      	ldr	r3, [pc, #220]	@ (800f118 <Send+0x1b0>)
 800f03a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800f03e:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800f040:	4b35      	ldr	r3, [pc, #212]	@ (800f118 <Send+0x1b0>)
 800f042:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800f046:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f048:	4b33      	ldr	r3, [pc, #204]	@ (800f118 <Send+0x1b0>)
 800f04a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f04e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f052:	4b31      	ldr	r3, [pc, #196]	@ (800f118 <Send+0x1b0>)
 800f054:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800f058:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f05c:	4b2e      	ldr	r3, [pc, #184]	@ (800f118 <Send+0x1b0>)
 800f05e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f062:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800f066:	4b2c      	ldr	r3, [pc, #176]	@ (800f118 <Send+0x1b0>)
 800f068:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f06c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800f070:	4b29      	ldr	r3, [pc, #164]	@ (800f118 <Send+0x1b0>)
 800f072:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800f076:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800f078:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f07c:	f107 0014 	add.w	r0, r7, #20
 800f080:	4a26      	ldr	r2, [pc, #152]	@ (800f11c <Send+0x1b4>)
 800f082:	4927      	ldr	r1, [pc, #156]	@ (800f120 <Send+0x1b8>)
 800f084:	f002 fc56 	bl	8011934 <LoRaMacAdrCalcNext>
 800f088:	4603      	mov	r3, r0
 800f08a:	461a      	mov	r2, r3
 800f08c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f090:	f362 1386 	bfi	r3, r2, #6, #1
 800f094:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800f098:	7afa      	ldrb	r2, [r7, #11]
 800f09a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800f09e:	893b      	ldrh	r3, [r7, #8]
 800f0a0:	9300      	str	r3, [sp, #0]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	68f8      	ldr	r0, [r7, #12]
 800f0a6:	f000 fc5d 	bl	800f964 <PrepareFrame>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800f0b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d003      	beq.n	800f0c0 <Send+0x158>
 800f0b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f0bc:	2b0a      	cmp	r3, #10
 800f0be:	d107      	bne.n	800f0d0 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 800f0c0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f000 f961 	bl	800f38c <ScheduleTx>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800f0d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d00a      	beq.n	800f0ee <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800f0d8:	4a0f      	ldr	r2, [pc, #60]	@ (800f118 <Send+0x1b0>)
 800f0da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f0de:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800f0e2:	4a0d      	ldr	r2, [pc, #52]	@ (800f118 <Send+0x1b0>)
 800f0e4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800f0e8:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 800f0ec:	e00d      	b.n	800f10a <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800f0ee:	4b0a      	ldr	r3, [pc, #40]	@ (800f118 <Send+0x1b0>)
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800f0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f8:	4a07      	ldr	r2, [pc, #28]	@ (800f118 <Send+0x1b0>)
 800f0fa:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800f0fc:	f002 fee6 	bl	8011ecc <LoRaMacCommandsRemoveNoneStickyCmds>
 800f100:	4603      	mov	r3, r0
 800f102:	2b00      	cmp	r3, #0
 800f104:	d001      	beq.n	800f10a <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f106:	2313      	movs	r3, #19
 800f108:	e001      	b.n	800f10e <Send+0x1a6>
        }
    }
    return status;
 800f10a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3730      	adds	r7, #48	@ 0x30
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	20000a70 	.word	0x20000a70
 800f11c:	20000aa8 	.word	0x20000aa8
 800f120:	20000aa9 	.word	0x20000aa9

0800f124 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	af00      	add	r7, sp, #0
 800f12a:	4603      	mov	r3, r0
 800f12c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f12e:	2300      	movs	r3, #0
 800f130:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800f132:	2300      	movs	r3, #0
 800f134:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800f136:	2301      	movs	r3, #1
 800f138:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800f13a:	79fb      	ldrb	r3, [r7, #7]
 800f13c:	2bff      	cmp	r3, #255	@ 0xff
 800f13e:	d11f      	bne.n	800f180 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800f140:	2000      	movs	r0, #0
 800f142:	f7ff f931 	bl	800e3a8 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800f146:	4b15      	ldr	r3, [pc, #84]	@ (800f19c <SendReJoinReq+0x78>)
 800f148:	2200      	movs	r2, #0
 800f14a:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800f14e:	4b13      	ldr	r3, [pc, #76]	@ (800f19c <SendReJoinReq+0x78>)
 800f150:	4a13      	ldr	r2, [pc, #76]	@ (800f1a0 <SendReJoinReq+0x7c>)
 800f152:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f156:	4b11      	ldr	r3, [pc, #68]	@ (800f19c <SendReJoinReq+0x78>)
 800f158:	22ff      	movs	r2, #255	@ 0xff
 800f15a:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800f15e:	7b3b      	ldrb	r3, [r7, #12]
 800f160:	f36f 1347 	bfc	r3, #5, #3
 800f164:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800f166:	7b3a      	ldrb	r2, [r7, #12]
 800f168:	4b0c      	ldr	r3, [pc, #48]	@ (800f19c <SendReJoinReq+0x78>)
 800f16a:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800f16e:	480d      	ldr	r0, [pc, #52]	@ (800f1a4 <SendReJoinReq+0x80>)
 800f170:	f7fc fb3a 	bl	800b7e8 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800f174:	480c      	ldr	r0, [pc, #48]	@ (800f1a8 <SendReJoinReq+0x84>)
 800f176:	f7fc fb07 	bl	800b788 <SecureElementGetDevEui>

            allowDelayedTx = false;
 800f17a:	2300      	movs	r3, #0
 800f17c:	73fb      	strb	r3, [r7, #15]

            break;
 800f17e:	e002      	b.n	800f186 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f180:	2302      	movs	r3, #2
 800f182:	73bb      	strb	r3, [r7, #14]
            break;
 800f184:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800f186:	7bfb      	ldrb	r3, [r7, #15]
 800f188:	4618      	mov	r0, r3
 800f18a:	f000 f8ff 	bl	800f38c <ScheduleTx>
 800f18e:	4603      	mov	r3, r0
 800f190:	73bb      	strb	r3, [r7, #14]
    return status;
 800f192:	7bbb      	ldrb	r3, [r7, #14]
}
 800f194:	4618      	mov	r0, r3
 800f196:	3710      	adds	r7, #16
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}
 800f19c:	20000568 	.word	0x20000568
 800f1a0:	2000056a 	.word	0x2000056a
 800f1a4:	20000676 	.word	0x20000676
 800f1a8:	2000067e 	.word	0x2000067e

0800f1ac <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f1b0:	f002 fc2f 	bl	8011a12 <LoRaMacClassBIsBeaconExpected>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d001      	beq.n	800f1be <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800f1ba:	230e      	movs	r3, #14
 800f1bc:	e013      	b.n	800f1e6 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f1be:	4b0b      	ldr	r3, [pc, #44]	@ (800f1ec <CheckForClassBCollision+0x40>)
 800f1c0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f1c4:	2b01      	cmp	r3, #1
 800f1c6:	d10d      	bne.n	800f1e4 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f1c8:	f002 fc2a 	bl	8011a20 <LoRaMacClassBIsPingExpected>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d001      	beq.n	800f1d6 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f1d2:	230f      	movs	r3, #15
 800f1d4:	e007      	b.n	800f1e6 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f1d6:	f002 fc2a 	bl	8011a2e <LoRaMacClassBIsMulticastExpected>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d001      	beq.n	800f1e4 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f1e0:	230f      	movs	r3, #15
 800f1e2:	e000      	b.n	800f1e6 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800f1e4:	2300      	movs	r3, #0
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	bd80      	pop	{r7, pc}
 800f1ea:	bf00      	nop
 800f1ec:	20000a70 	.word	0x20000a70

0800f1f0 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800f1f0:	b590      	push	{r4, r7, lr}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f1f6:	4b2d      	ldr	r3, [pc, #180]	@ (800f2ac <ComputeRxWindowParameters+0xbc>)
 800f1f8:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f1fc:	4b2b      	ldr	r3, [pc, #172]	@ (800f2ac <ComputeRxWindowParameters+0xbc>)
 800f1fe:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f202:	4b2a      	ldr	r3, [pc, #168]	@ (800f2ac <ComputeRxWindowParameters+0xbc>)
 800f204:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 800f208:	4b28      	ldr	r3, [pc, #160]	@ (800f2ac <ComputeRxWindowParameters+0xbc>)
 800f20a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800f20e:	4b27      	ldr	r3, [pc, #156]	@ (800f2ac <ComputeRxWindowParameters+0xbc>)
 800f210:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f214:	b25b      	sxtb	r3, r3
 800f216:	f004 fd85 	bl	8013d24 <RegionApplyDrOffset>
 800f21a:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f21c:	b259      	sxtb	r1, r3
 800f21e:	4b23      	ldr	r3, [pc, #140]	@ (800f2ac <ComputeRxWindowParameters+0xbc>)
 800f220:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800f224:	4b21      	ldr	r3, [pc, #132]	@ (800f2ac <ComputeRxWindowParameters+0xbc>)
 800f226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f228:	4821      	ldr	r0, [pc, #132]	@ (800f2b0 <ComputeRxWindowParameters+0xc0>)
 800f22a:	9000      	str	r0, [sp, #0]
 800f22c:	4620      	mov	r0, r4
 800f22e:	f004 fc24 	bl	8013a7a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f232:	4b1e      	ldr	r3, [pc, #120]	@ (800f2ac <ComputeRxWindowParameters+0xbc>)
 800f234:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800f238:	4b1c      	ldr	r3, [pc, #112]	@ (800f2ac <ComputeRxWindowParameters+0xbc>)
 800f23a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f23e:	b259      	sxtb	r1, r3
 800f240:	4b1a      	ldr	r3, [pc, #104]	@ (800f2ac <ComputeRxWindowParameters+0xbc>)
 800f242:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800f246:	4b19      	ldr	r3, [pc, #100]	@ (800f2ac <ComputeRxWindowParameters+0xbc>)
 800f248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f24a:	4c1a      	ldr	r4, [pc, #104]	@ (800f2b4 <ComputeRxWindowParameters+0xc4>)
 800f24c:	9400      	str	r4, [sp, #0]
 800f24e:	f004 fc14 	bl	8013a7a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f252:	4b16      	ldr	r3, [pc, #88]	@ (800f2ac <ComputeRxWindowParameters+0xbc>)
 800f254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f256:	4a18      	ldr	r2, [pc, #96]	@ (800f2b8 <ComputeRxWindowParameters+0xc8>)
 800f258:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800f25c:	4413      	add	r3, r2
 800f25e:	4a16      	ldr	r2, [pc, #88]	@ (800f2b8 <ComputeRxWindowParameters+0xc8>)
 800f260:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f264:	4b11      	ldr	r3, [pc, #68]	@ (800f2ac <ComputeRxWindowParameters+0xbc>)
 800f266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f268:	4a13      	ldr	r2, [pc, #76]	@ (800f2b8 <ComputeRxWindowParameters+0xc8>)
 800f26a:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 800f26e:	4413      	add	r3, r2
 800f270:	4a11      	ldr	r2, [pc, #68]	@ (800f2b8 <ComputeRxWindowParameters+0xc8>)
 800f272:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800f276:	4b10      	ldr	r3, [pc, #64]	@ (800f2b8 <ComputeRxWindowParameters+0xc8>)
 800f278:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f27c:	2b04      	cmp	r3, #4
 800f27e:	d011      	beq.n	800f2a4 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f280:	4b0a      	ldr	r3, [pc, #40]	@ (800f2ac <ComputeRxWindowParameters+0xbc>)
 800f282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f284:	4a0c      	ldr	r2, [pc, #48]	@ (800f2b8 <ComputeRxWindowParameters+0xc8>)
 800f286:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800f28a:	4413      	add	r3, r2
 800f28c:	4a0a      	ldr	r2, [pc, #40]	@ (800f2b8 <ComputeRxWindowParameters+0xc8>)
 800f28e:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f292:	4b06      	ldr	r3, [pc, #24]	@ (800f2ac <ComputeRxWindowParameters+0xbc>)
 800f294:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f296:	4a08      	ldr	r2, [pc, #32]	@ (800f2b8 <ComputeRxWindowParameters+0xc8>)
 800f298:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 800f29c:	4413      	add	r3, r2
 800f29e:	4a06      	ldr	r2, [pc, #24]	@ (800f2b8 <ComputeRxWindowParameters+0xc8>)
 800f2a0:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 800f2a4:	bf00      	nop
 800f2a6:	3704      	adds	r7, #4
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd90      	pop	{r4, r7, pc}
 800f2ac:	20000a70 	.word	0x20000a70
 800f2b0:	20000920 	.word	0x20000920
 800f2b4:	20000934 	.word	0x20000934
 800f2b8:	20000568 	.word	0x20000568

0800f2bc <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f2c6:	4b13      	ldr	r3, [pc, #76]	@ (800f314 <VerifyTxFrame+0x58>)
 800f2c8:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d01b      	beq.n	800f308 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f2d0:	1d3b      	adds	r3, r7, #4
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f002 fe4a 	bl	8011f6c <LoRaMacCommandsGetSizeSerializedCmds>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d001      	beq.n	800f2e2 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f2de:	2313      	movs	r3, #19
 800f2e0:	e013      	b.n	800f30a <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800f2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f318 <VerifyTxFrame+0x5c>)
 800f2e4:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800f2e8:	4a0a      	ldr	r2, [pc, #40]	@ (800f314 <VerifyTxFrame+0x58>)
 800f2ea:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	b2d2      	uxtb	r2, r2
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7ff f968 	bl	800e5c8 <ValidatePayloadLength>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	f083 0301 	eor.w	r3, r3, #1
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	2b00      	cmp	r3, #0
 800f302:	d001      	beq.n	800f308 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800f304:	2308      	movs	r3, #8
 800f306:	e000      	b.n	800f30a <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800f308:	2300      	movs	r3, #0
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3708      	adds	r7, #8
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	20000a70 	.word	0x20000a70
 800f318:	20000568 	.word	0x20000568

0800f31c <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800f322:	4b18      	ldr	r3, [pc, #96]	@ (800f384 <SerializeTxFrame+0x68>)
 800f324:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d002      	beq.n	800f332 <SerializeTxFrame+0x16>
 800f32c:	2b04      	cmp	r3, #4
 800f32e:	d011      	beq.n	800f354 <SerializeTxFrame+0x38>
 800f330:	e021      	b.n	800f376 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800f332:	4815      	ldr	r0, [pc, #84]	@ (800f388 <SerializeTxFrame+0x6c>)
 800f334:	f004 f974 	bl	8013620 <LoRaMacSerializerJoinRequest>
 800f338:	4603      	mov	r3, r0
 800f33a:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800f33c:	79fb      	ldrb	r3, [r7, #7]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d001      	beq.n	800f346 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f342:	2311      	movs	r3, #17
 800f344:	e01a      	b.n	800f37c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800f346:	4b0f      	ldr	r3, [pc, #60]	@ (800f384 <SerializeTxFrame+0x68>)
 800f348:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800f34c:	461a      	mov	r2, r3
 800f34e:	4b0d      	ldr	r3, [pc, #52]	@ (800f384 <SerializeTxFrame+0x68>)
 800f350:	801a      	strh	r2, [r3, #0]
            break;
 800f352:	e012      	b.n	800f37a <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800f354:	480c      	ldr	r0, [pc, #48]	@ (800f388 <SerializeTxFrame+0x6c>)
 800f356:	f004 f9e5 	bl	8013724 <LoRaMacSerializerData>
 800f35a:	4603      	mov	r3, r0
 800f35c:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800f35e:	79fb      	ldrb	r3, [r7, #7]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d001      	beq.n	800f368 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f364:	2311      	movs	r3, #17
 800f366:	e009      	b.n	800f37c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800f368:	4b06      	ldr	r3, [pc, #24]	@ (800f384 <SerializeTxFrame+0x68>)
 800f36a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800f36e:	461a      	mov	r2, r3
 800f370:	4b04      	ldr	r3, [pc, #16]	@ (800f384 <SerializeTxFrame+0x68>)
 800f372:	801a      	strh	r2, [r3, #0]
            break;
 800f374:	e001      	b.n	800f37a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800f376:	2303      	movs	r3, #3
 800f378:	e000      	b.n	800f37c <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800f37a:	2300      	movs	r3, #0
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3708      	adds	r7, #8
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}
 800f384:	20000568 	.word	0x20000568
 800f388:	20000670 	.word	0x20000670

0800f38c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b090      	sub	sp, #64	@ 0x40
 800f390:	af02      	add	r7, sp, #8
 800f392:	4603      	mov	r3, r0
 800f394:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f396:	2303      	movs	r3, #3
 800f398:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800f39c:	f7ff ff06 	bl	800f1ac <CheckForClassBCollision>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800f3a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d002      	beq.n	800f3b4 <ScheduleTx+0x28>
    {
        return status;
 800f3ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f3b2:	e092      	b.n	800f4da <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 800f3b4:	f000 f8fe 	bl	800f5b4 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800f3b8:	f7ff ffb0 	bl	800f31c <SerializeTxFrame>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800f3c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d002      	beq.n	800f3d0 <ScheduleTx+0x44>
    {
        return status;
 800f3ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f3ce:	e084      	b.n	800f4da <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800f3d0:	4b44      	ldr	r3, [pc, #272]	@ (800f4e4 <ScheduleTx+0x158>)
 800f3d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3d4:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f3d6:	4b43      	ldr	r3, [pc, #268]	@ (800f4e4 <ScheduleTx+0x158>)
 800f3d8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f3dc:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800f3de:	4b41      	ldr	r3, [pc, #260]	@ (800f4e4 <ScheduleTx+0x158>)
 800f3e0:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800f3e4:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f3e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f00b fde0 	bl	801afb0 <SysTimeGetMcuTime>
 800f3f0:	4638      	mov	r0, r7
 800f3f2:	4b3c      	ldr	r3, [pc, #240]	@ (800f4e4 <ScheduleTx+0x158>)
 800f3f4:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 800f3f8:	9200      	str	r2, [sp, #0]
 800f3fa:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800f3fe:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f402:	ca06      	ldmia	r2, {r1, r2}
 800f404:	f00b fd35 	bl	801ae72 <SysTimeSub>
 800f408:	f107 0320 	add.w	r3, r7, #32
 800f40c:	463a      	mov	r2, r7
 800f40e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f412:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800f416:	4b33      	ldr	r3, [pc, #204]	@ (800f4e4 <ScheduleTx+0x158>)
 800f418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f41a:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800f41c:	2300      	movs	r3, #0
 800f41e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 800f422:	2301      	movs	r3, #1
 800f424:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800f426:	4b30      	ldr	r3, [pc, #192]	@ (800f4e8 <ScheduleTx+0x15c>)
 800f428:	881b      	ldrh	r3, [r3, #0]
 800f42a:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f42c:	4b2d      	ldr	r3, [pc, #180]	@ (800f4e4 <ScheduleTx+0x158>)
 800f42e:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800f432:	2b00      	cmp	r3, #0
 800f434:	d104      	bne.n	800f440 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800f436:	2301      	movs	r3, #1
 800f438:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 800f43c:	2300      	movs	r3, #0
 800f43e:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800f440:	4b28      	ldr	r3, [pc, #160]	@ (800f4e4 <ScheduleTx+0x158>)
 800f442:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f446:	f107 0114 	add.w	r1, r7, #20
 800f44a:	4b28      	ldr	r3, [pc, #160]	@ (800f4ec <ScheduleTx+0x160>)
 800f44c:	9300      	str	r3, [sp, #0]
 800f44e:	4b28      	ldr	r3, [pc, #160]	@ (800f4f0 <ScheduleTx+0x164>)
 800f450:	4a28      	ldr	r2, [pc, #160]	@ (800f4f4 <ScheduleTx+0x168>)
 800f452:	f004 fc2d 	bl	8013cb0 <RegionNextChannel>
 800f456:	4603      	mov	r3, r0
 800f458:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 800f45c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f460:	2b00      	cmp	r3, #0
 800f462:	d025      	beq.n	800f4b0 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800f464:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f468:	2b0b      	cmp	r3, #11
 800f46a:	d11e      	bne.n	800f4aa <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 800f46c:	4b1e      	ldr	r3, [pc, #120]	@ (800f4e8 <ScheduleTx+0x15c>)
 800f46e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 800f472:	2b00      	cmp	r3, #0
 800f474:	d01c      	beq.n	800f4b0 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 800f476:	7bfb      	ldrb	r3, [r7, #15]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d013      	beq.n	800f4a4 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800f47c:	4b1a      	ldr	r3, [pc, #104]	@ (800f4e8 <ScheduleTx+0x15c>)
 800f47e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f482:	f043 0320 	orr.w	r3, r3, #32
 800f486:	4a18      	ldr	r2, [pc, #96]	@ (800f4e8 <ScheduleTx+0x15c>)
 800f488:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800f48c:	4b16      	ldr	r3, [pc, #88]	@ (800f4e8 <ScheduleTx+0x15c>)
 800f48e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 800f492:	4619      	mov	r1, r3
 800f494:	4818      	ldr	r0, [pc, #96]	@ (800f4f8 <ScheduleTx+0x16c>)
 800f496:	f00c fb29 	bl	801baec <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800f49a:	4817      	ldr	r0, [pc, #92]	@ (800f4f8 <ScheduleTx+0x16c>)
 800f49c:	f00c fa48 	bl	801b930 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	e01a      	b.n	800f4da <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 800f4a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f4a8:	e017      	b.n	800f4da <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800f4aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f4ae:	e014      	b.n	800f4da <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800f4b0:	f7ff fe9e 	bl	800f1f0 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800f4b4:	f7ff ff02 	bl	800f2bc <VerifyTxFrame>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800f4be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d002      	beq.n	800f4cc <ScheduleTx+0x140>
    {
        return status;
 800f4c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f4ca:	e006      	b.n	800f4da <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800f4cc:	4b06      	ldr	r3, [pc, #24]	@ (800f4e8 <ScheduleTx+0x15c>)
 800f4ce:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f000 fb60 	bl	800fb98 <SendFrameOnChannel>
 800f4d8:	4603      	mov	r3, r0
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3738      	adds	r7, #56	@ 0x38
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	20000a70 	.word	0x20000a70
 800f4e8:	20000568 	.word	0x20000568
 800f4ec:	20000aa0 	.word	0x20000aa0
 800f4f0:	200009ec 	.word	0x200009ec
 800f4f4:	20000979 	.word	0x20000979
 800f4f8:	200008d0 	.word	0x200008d0

0800f4fc <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b084      	sub	sp, #16
 800f500:	af00      	add	r7, sp, #0
 800f502:	4603      	mov	r3, r0
 800f504:	460a      	mov	r2, r1
 800f506:	71fb      	strb	r3, [r7, #7]
 800f508:	4613      	mov	r3, r2
 800f50a:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f50c:	2313      	movs	r3, #19
 800f50e:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800f510:	2300      	movs	r3, #0
 800f512:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800f514:	4b25      	ldr	r3, [pc, #148]	@ (800f5ac <SecureFrame+0xb0>)
 800f516:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d002      	beq.n	800f524 <SecureFrame+0x28>
 800f51e:	2b04      	cmp	r3, #4
 800f520:	d011      	beq.n	800f546 <SecureFrame+0x4a>
 800f522:	e03b      	b.n	800f59c <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800f524:	4822      	ldr	r0, [pc, #136]	@ (800f5b0 <SecureFrame+0xb4>)
 800f526:	f003 fc45 	bl	8012db4 <LoRaMacCryptoPrepareJoinRequest>
 800f52a:	4603      	mov	r3, r0
 800f52c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800f52e:	7bfb      	ldrb	r3, [r7, #15]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d001      	beq.n	800f538 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f534:	2311      	movs	r3, #17
 800f536:	e034      	b.n	800f5a2 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800f538:	4b1c      	ldr	r3, [pc, #112]	@ (800f5ac <SecureFrame+0xb0>)
 800f53a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800f53e:	461a      	mov	r2, r3
 800f540:	4b1a      	ldr	r3, [pc, #104]	@ (800f5ac <SecureFrame+0xb0>)
 800f542:	801a      	strh	r2, [r3, #0]
            break;
 800f544:	e02c      	b.n	800f5a0 <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800f546:	f107 0308 	add.w	r3, r7, #8
 800f54a:	4618      	mov	r0, r3
 800f54c:	f003 fb42 	bl	8012bd4 <LoRaMacCryptoGetFCntUp>
 800f550:	4603      	mov	r3, r0
 800f552:	2b00      	cmp	r3, #0
 800f554:	d001      	beq.n	800f55a <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800f556:	2312      	movs	r3, #18
 800f558:	e023      	b.n	800f5a2 <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800f55a:	4b14      	ldr	r3, [pc, #80]	@ (800f5ac <SecureFrame+0xb0>)
 800f55c:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 800f560:	2b00      	cmp	r3, #0
 800f562:	d104      	bne.n	800f56e <SecureFrame+0x72>
 800f564:	4b11      	ldr	r3, [pc, #68]	@ (800f5ac <SecureFrame+0xb0>)
 800f566:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	d902      	bls.n	800f574 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	3b01      	subs	r3, #1
 800f572:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800f574:	68b8      	ldr	r0, [r7, #8]
 800f576:	79ba      	ldrb	r2, [r7, #6]
 800f578:	79f9      	ldrb	r1, [r7, #7]
 800f57a:	4b0d      	ldr	r3, [pc, #52]	@ (800f5b0 <SecureFrame+0xb4>)
 800f57c:	f003 fd48 	bl	8013010 <LoRaMacCryptoSecureMessage>
 800f580:	4603      	mov	r3, r0
 800f582:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800f584:	7bfb      	ldrb	r3, [r7, #15]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d001      	beq.n	800f58e <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f58a:	2311      	movs	r3, #17
 800f58c:	e009      	b.n	800f5a2 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800f58e:	4b07      	ldr	r3, [pc, #28]	@ (800f5ac <SecureFrame+0xb0>)
 800f590:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800f594:	461a      	mov	r2, r3
 800f596:	4b05      	ldr	r3, [pc, #20]	@ (800f5ac <SecureFrame+0xb0>)
 800f598:	801a      	strh	r2, [r3, #0]
            break;
 800f59a:	e001      	b.n	800f5a0 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800f59c:	2303      	movs	r3, #3
 800f59e:	e000      	b.n	800f5a2 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800f5a0:	2300      	movs	r3, #0
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	20000568 	.word	0x20000568
 800f5b0:	20000670 	.word	0x20000670

0800f5b4 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800f5b8:	4b09      	ldr	r3, [pc, #36]	@ (800f5e0 <CalculateBackOff+0x2c>)
 800f5ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d10a      	bne.n	800f5d6 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800f5c0:	4b07      	ldr	r3, [pc, #28]	@ (800f5e0 <CalculateBackOff+0x2c>)
 800f5c2:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 800f5c6:	3b01      	subs	r3, #1
 800f5c8:	4a06      	ldr	r2, [pc, #24]	@ (800f5e4 <CalculateBackOff+0x30>)
 800f5ca:	f8d2 2414 	ldr.w	r2, [r2, #1044]	@ 0x414
 800f5ce:	fb02 f303 	mul.w	r3, r2, r3
 800f5d2:	4a03      	ldr	r2, [pc, #12]	@ (800f5e0 <CalculateBackOff+0x2c>)
 800f5d4:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 800f5d6:	bf00      	nop
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bc80      	pop	{r7}
 800f5dc:	4770      	bx	lr
 800f5de:	bf00      	nop
 800f5e0:	20000a70 	.word	0x20000a70
 800f5e4:	20000568 	.word	0x20000568

0800f5e8 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	7139      	strb	r1, [r7, #4]
 800f5f2:	71fb      	strb	r3, [r7, #7]
 800f5f4:	4613      	mov	r3, r2
 800f5f6:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800f5f8:	79fb      	ldrb	r3, [r7, #7]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d002      	beq.n	800f604 <RemoveMacCommands+0x1c>
 800f5fe:	79fb      	ldrb	r3, [r7, #7]
 800f600:	2b01      	cmp	r3, #1
 800f602:	d10d      	bne.n	800f620 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800f604:	79bb      	ldrb	r3, [r7, #6]
 800f606:	2b01      	cmp	r3, #1
 800f608:	d108      	bne.n	800f61c <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800f60a:	793b      	ldrb	r3, [r7, #4]
 800f60c:	f003 0320 	and.w	r3, r3, #32
 800f610:	b2db      	uxtb	r3, r3
 800f612:	2b00      	cmp	r3, #0
 800f614:	d004      	beq.n	800f620 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800f616:	f002 fc7d 	bl	8011f14 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800f61a:	e001      	b.n	800f620 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800f61c:	f002 fc7a 	bl	8011f14 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800f620:	bf00      	nop
 800f622:	3708      	adds	r7, #8
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 800f628:	b5b0      	push	{r4, r5, r7, lr}
 800f62a:	b090      	sub	sp, #64	@ 0x40
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	4603      	mov	r3, r0
 800f630:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 800f632:	79fb      	ldrb	r3, [r7, #7]
 800f634:	f083 0301 	eor.w	r3, r3, #1
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d003      	beq.n	800f646 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800f63e:	4b80      	ldr	r3, [pc, #512]	@ (800f840 <ResetMacParameters+0x218>)
 800f640:	2200      	movs	r2, #0
 800f642:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800f646:	4b7e      	ldr	r3, [pc, #504]	@ (800f840 <ResetMacParameters+0x218>)
 800f648:	2200      	movs	r2, #0
 800f64a:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800f64c:	4b7d      	ldr	r3, [pc, #500]	@ (800f844 <ResetMacParameters+0x21c>)
 800f64e:	2200      	movs	r2, #0
 800f650:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 800f654:	4b7b      	ldr	r3, [pc, #492]	@ (800f844 <ResetMacParameters+0x21c>)
 800f656:	2201      	movs	r2, #1
 800f658:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 800f65c:	4b79      	ldr	r3, [pc, #484]	@ (800f844 <ResetMacParameters+0x21c>)
 800f65e:	2201      	movs	r2, #1
 800f660:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
    MacCtx.AckTimeoutRetry = false;
 800f664:	4b77      	ldr	r3, [pc, #476]	@ (800f844 <ResetMacParameters+0x21c>)
 800f666:	2200      	movs	r2, #0
 800f668:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 800f66c:	4b74      	ldr	r3, [pc, #464]	@ (800f840 <ResetMacParameters+0x218>)
 800f66e:	2200      	movs	r2, #0
 800f670:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800f674:	4b72      	ldr	r3, [pc, #456]	@ (800f840 <ResetMacParameters+0x218>)
 800f676:	2201      	movs	r2, #1
 800f678:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800f67c:	4b70      	ldr	r3, [pc, #448]	@ (800f840 <ResetMacParameters+0x218>)
 800f67e:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 800f682:	4b6f      	ldr	r3, [pc, #444]	@ (800f840 <ResetMacParameters+0x218>)
 800f684:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800f688:	4b6d      	ldr	r3, [pc, #436]	@ (800f840 <ResetMacParameters+0x218>)
 800f68a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800f68e:	4b6c      	ldr	r3, [pc, #432]	@ (800f840 <ResetMacParameters+0x218>)
 800f690:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800f694:	4b6a      	ldr	r3, [pc, #424]	@ (800f840 <ResetMacParameters+0x218>)
 800f696:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 800f69a:	4b69      	ldr	r3, [pc, #420]	@ (800f840 <ResetMacParameters+0x218>)
 800f69c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800f6a0:	4b67      	ldr	r3, [pc, #412]	@ (800f840 <ResetMacParameters+0x218>)
 800f6a2:	4a67      	ldr	r2, [pc, #412]	@ (800f840 <ResetMacParameters+0x218>)
 800f6a4:	336c      	adds	r3, #108	@ 0x6c
 800f6a6:	32b4      	adds	r2, #180	@ 0xb4
 800f6a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f6ac:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800f6b0:	4b63      	ldr	r3, [pc, #396]	@ (800f840 <ResetMacParameters+0x218>)
 800f6b2:	4a63      	ldr	r2, [pc, #396]	@ (800f840 <ResetMacParameters+0x218>)
 800f6b4:	3374      	adds	r3, #116	@ 0x74
 800f6b6:	32bc      	adds	r2, #188	@ 0xbc
 800f6b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f6bc:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800f6c0:	4b5f      	ldr	r3, [pc, #380]	@ (800f840 <ResetMacParameters+0x218>)
 800f6c2:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 800f6c6:	4b5e      	ldr	r3, [pc, #376]	@ (800f840 <ResetMacParameters+0x218>)
 800f6c8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800f6cc:	4b5c      	ldr	r3, [pc, #368]	@ (800f840 <ResetMacParameters+0x218>)
 800f6ce:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 800f6d2:	4b5b      	ldr	r3, [pc, #364]	@ (800f840 <ResetMacParameters+0x218>)
 800f6d4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800f6d8:	4b59      	ldr	r3, [pc, #356]	@ (800f840 <ResetMacParameters+0x218>)
 800f6da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f6de:	4a58      	ldr	r2, [pc, #352]	@ (800f840 <ResetMacParameters+0x218>)
 800f6e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800f6e4:	4b56      	ldr	r3, [pc, #344]	@ (800f840 <ResetMacParameters+0x218>)
 800f6e6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800f6ea:	4a55      	ldr	r2, [pc, #340]	@ (800f840 <ResetMacParameters+0x218>)
 800f6ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800f6f0:	4b53      	ldr	r3, [pc, #332]	@ (800f840 <ResetMacParameters+0x218>)
 800f6f2:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 800f6f6:	4b52      	ldr	r3, [pc, #328]	@ (800f840 <ResetMacParameters+0x218>)
 800f6f8:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800f6fc:	4b50      	ldr	r3, [pc, #320]	@ (800f840 <ResetMacParameters+0x218>)
 800f6fe:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 800f702:	4b4f      	ldr	r3, [pc, #316]	@ (800f840 <ResetMacParameters+0x218>)
 800f704:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 800f708:	4b4e      	ldr	r3, [pc, #312]	@ (800f844 <ResetMacParameters+0x21c>)
 800f70a:	2200      	movs	r2, #0
 800f70c:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 800f710:	4b4b      	ldr	r3, [pc, #300]	@ (800f840 <ResetMacParameters+0x218>)
 800f712:	2200      	movs	r2, #0
 800f714:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800f718:	4b49      	ldr	r3, [pc, #292]	@ (800f840 <ResetMacParameters+0x218>)
 800f71a:	2200      	movs	r2, #0
 800f71c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800f720:	4b47      	ldr	r3, [pc, #284]	@ (800f840 <ResetMacParameters+0x218>)
 800f722:	2200      	movs	r2, #0
 800f724:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 800f728:	4b45      	ldr	r3, [pc, #276]	@ (800f840 <ResetMacParameters+0x218>)
 800f72a:	2200      	movs	r2, #0
 800f72c:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800f730:	4b43      	ldr	r3, [pc, #268]	@ (800f840 <ResetMacParameters+0x218>)
 800f732:	2200      	movs	r2, #0
 800f734:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800f738:	4b41      	ldr	r3, [pc, #260]	@ (800f840 <ResetMacParameters+0x218>)
 800f73a:	2200      	movs	r2, #0
 800f73c:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800f740:	4b3f      	ldr	r3, [pc, #252]	@ (800f840 <ResetMacParameters+0x218>)
 800f742:	2200      	movs	r2, #0
 800f744:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800f748:	4b3d      	ldr	r3, [pc, #244]	@ (800f840 <ResetMacParameters+0x218>)
 800f74a:	2200      	movs	r2, #0
 800f74c:	f883 2142 	strb.w	r2, [r3, #322]	@ 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800f750:	4b3b      	ldr	r3, [pc, #236]	@ (800f840 <ResetMacParameters+0x218>)
 800f752:	2200      	movs	r2, #0
 800f754:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800f758:	2301      	movs	r3, #1
 800f75a:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800f75c:	4b3a      	ldr	r3, [pc, #232]	@ (800f848 <ResetMacParameters+0x220>)
 800f75e:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800f760:	4b3a      	ldr	r3, [pc, #232]	@ (800f84c <ResetMacParameters+0x224>)
 800f762:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800f764:	4b36      	ldr	r3, [pc, #216]	@ (800f840 <ResetMacParameters+0x218>)
 800f766:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f76a:	f107 020c 	add.w	r2, r7, #12
 800f76e:	4611      	mov	r1, r2
 800f770:	4618      	mov	r0, r3
 800f772:	f004 f918 	bl	80139a6 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800f776:	4b33      	ldr	r3, [pc, #204]	@ (800f844 <ResetMacParameters+0x21c>)
 800f778:	2200      	movs	r2, #0
 800f77a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f77e:	4b31      	ldr	r3, [pc, #196]	@ (800f844 <ResetMacParameters+0x21c>)
 800f780:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800f784:	4b2f      	ldr	r3, [pc, #188]	@ (800f844 <ResetMacParameters+0x21c>)
 800f786:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f78a:	4b2d      	ldr	r3, [pc, #180]	@ (800f840 <ResetMacParameters+0x218>)
 800f78c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f78e:	4a2d      	ldr	r2, [pc, #180]	@ (800f844 <ResetMacParameters+0x21c>)
 800f790:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f794:	4b2a      	ldr	r3, [pc, #168]	@ (800f840 <ResetMacParameters+0x218>)
 800f796:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800f79a:	4b2a      	ldr	r3, [pc, #168]	@ (800f844 <ResetMacParameters+0x21c>)
 800f79c:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f7a0:	4b27      	ldr	r3, [pc, #156]	@ (800f840 <ResetMacParameters+0x218>)
 800f7a2:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800f7a6:	4b27      	ldr	r3, [pc, #156]	@ (800f844 <ResetMacParameters+0x21c>)
 800f7a8:	f883 23dd 	strb.w	r2, [r3, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f7ac:	4b25      	ldr	r3, [pc, #148]	@ (800f844 <ResetMacParameters+0x21c>)
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	f883 23de 	strb.w	r2, [r3, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f7b4:	4b23      	ldr	r3, [pc, #140]	@ (800f844 <ResetMacParameters+0x21c>)
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	f883 23df 	strb.w	r2, [r3, #991]	@ 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f7bc:	4a21      	ldr	r2, [pc, #132]	@ (800f844 <ResetMacParameters+0x21c>)
 800f7be:	4b21      	ldr	r3, [pc, #132]	@ (800f844 <ResetMacParameters+0x21c>)
 800f7c0:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 800f7c4:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 800f7c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7cc:	682b      	ldr	r3, [r5, #0]
 800f7ce:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f7d0:	4b1c      	ldr	r3, [pc, #112]	@ (800f844 <ResetMacParameters+0x21c>)
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f7d8:	4b1a      	ldr	r3, [pc, #104]	@ (800f844 <ResetMacParameters+0x21c>)
 800f7da:	2202      	movs	r2, #2
 800f7dc:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 800f7e8:	4b16      	ldr	r3, [pc, #88]	@ (800f844 <ResetMacParameters+0x21c>)
 800f7ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d009      	beq.n	800f806 <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800f7f2:	4b14      	ldr	r3, [pc, #80]	@ (800f844 <ResetMacParameters+0x21c>)
 800f7f4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800f7fc:	4b11      	ldr	r3, [pc, #68]	@ (800f844 <ResetMacParameters+0x21c>)
 800f7fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f802:	695b      	ldr	r3, [r3, #20]
 800f804:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800f806:	4b12      	ldr	r3, [pc, #72]	@ (800f850 <ResetMacParameters+0x228>)
 800f808:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800f80a:	4b12      	ldr	r3, [pc, #72]	@ (800f854 <ResetMacParameters+0x22c>)
 800f80c:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800f80e:	4b12      	ldr	r3, [pc, #72]	@ (800f858 <ResetMacParameters+0x230>)
 800f810:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800f812:	4b12      	ldr	r3, [pc, #72]	@ (800f85c <ResetMacParameters+0x234>)
 800f814:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800f816:	4b12      	ldr	r3, [pc, #72]	@ (800f860 <ResetMacParameters+0x238>)
 800f818:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800f81a:	4b12      	ldr	r3, [pc, #72]	@ (800f864 <ResetMacParameters+0x23c>)
 800f81c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800f81e:	4b12      	ldr	r3, [pc, #72]	@ (800f868 <ResetMacParameters+0x240>)
 800f820:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800f822:	4b12      	ldr	r3, [pc, #72]	@ (800f86c <ResetMacParameters+0x244>)
 800f824:	637b      	str	r3, [r7, #52]	@ 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800f826:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800f82a:	f107 0318 	add.w	r3, r7, #24
 800f82e:	4a10      	ldr	r2, [pc, #64]	@ (800f870 <ResetMacParameters+0x248>)
 800f830:	4618      	mov	r0, r3
 800f832:	f002 f897 	bl	8011964 <LoRaMacClassBInit>
}
 800f836:	bf00      	nop
 800f838:	3740      	adds	r7, #64	@ 0x40
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bdb0      	pop	{r4, r5, r7, pc}
 800f83e:	bf00      	nop
 800f840:	20000a70 	.word	0x20000a70
 800f844:	20000568 	.word	0x20000568
 800f848:	20000c90 	.word	0x20000c90
 800f84c:	20000d34 	.word	0x20000d34
 800f850:	200009c4 	.word	0x200009c4
 800f854:	20000980 	.word	0x20000980
 800f858:	200009b0 	.word	0x200009b0
 800f85c:	200009e9 	.word	0x200009e9
 800f860:	20000b54 	.word	0x20000b54
 800f864:	20000ab8 	.word	0x20000ab8
 800f868:	20000abc 	.word	0x20000abc
 800f86c:	20000b58 	.word	0x20000b58
 800f870:	200011d0 	.word	0x200011d0

0800f874 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f00c f8c4 	bl	801ba0c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800f884:	4b11      	ldr	r3, [pc, #68]	@ (800f8cc <RxWindowSetup+0x58>)
 800f886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f888:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f88a:	4b11      	ldr	r3, [pc, #68]	@ (800f8d0 <RxWindowSetup+0x5c>)
 800f88c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f890:	4a10      	ldr	r2, [pc, #64]	@ (800f8d4 <RxWindowSetup+0x60>)
 800f892:	6839      	ldr	r1, [r7, #0]
 800f894:	4618      	mov	r0, r3
 800f896:	f004 f913 	bl	8013ac0 <RegionRxConfig>
 800f89a:	4603      	mov	r3, r0
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d010      	beq.n	800f8c2 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800f8a0:	4b0d      	ldr	r3, [pc, #52]	@ (800f8d8 <RxWindowSetup+0x64>)
 800f8a2:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800f8a6:	4b0c      	ldr	r3, [pc, #48]	@ (800f8d8 <RxWindowSetup+0x64>)
 800f8a8:	f883 245e 	strb.w	r2, [r3, #1118]	@ 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800f8ac:	4b07      	ldr	r3, [pc, #28]	@ (800f8cc <RxWindowSetup+0x58>)
 800f8ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8b0:	4a07      	ldr	r2, [pc, #28]	@ (800f8d0 <RxWindowSetup+0x5c>)
 800f8b2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800f8b4:	4610      	mov	r0, r2
 800f8b6:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	7cda      	ldrb	r2, [r3, #19]
 800f8bc:	4b06      	ldr	r3, [pc, #24]	@ (800f8d8 <RxWindowSetup+0x64>)
 800f8be:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 800f8c2:	bf00      	nop
 800f8c4:	3708      	adds	r7, #8
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	0801d86c 	.word	0x0801d86c
 800f8d0:	20000a70 	.word	0x20000a70
 800f8d4:	20000984 	.word	0x20000984
 800f8d8:	20000568 	.word	0x20000568

0800f8dc <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800f8dc:	b590      	push	{r4, r7, lr}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f8e2:	4b1b      	ldr	r3, [pc, #108]	@ (800f950 <OpenContinuousRxCWindow+0x74>)
 800f8e4:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800f8e8:	4b19      	ldr	r3, [pc, #100]	@ (800f950 <OpenContinuousRxCWindow+0x74>)
 800f8ea:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f8ee:	b259      	sxtb	r1, r3
 800f8f0:	4b17      	ldr	r3, [pc, #92]	@ (800f950 <OpenContinuousRxCWindow+0x74>)
 800f8f2:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800f8f6:	4b16      	ldr	r3, [pc, #88]	@ (800f950 <OpenContinuousRxCWindow+0x74>)
 800f8f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8fa:	4c16      	ldr	r4, [pc, #88]	@ (800f954 <OpenContinuousRxCWindow+0x78>)
 800f8fc:	9400      	str	r4, [sp, #0]
 800f8fe:	f004 f8bc 	bl	8013a7a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f902:	4b15      	ldr	r3, [pc, #84]	@ (800f958 <OpenContinuousRxCWindow+0x7c>)
 800f904:	2202      	movs	r2, #2
 800f906:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f90a:	4b13      	ldr	r3, [pc, #76]	@ (800f958 <OpenContinuousRxCWindow+0x7c>)
 800f90c:	2201      	movs	r2, #1
 800f90e:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f912:	4b0f      	ldr	r3, [pc, #60]	@ (800f950 <OpenContinuousRxCWindow+0x74>)
 800f914:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f918:	4a10      	ldr	r2, [pc, #64]	@ (800f95c <OpenContinuousRxCWindow+0x80>)
 800f91a:	490e      	ldr	r1, [pc, #56]	@ (800f954 <OpenContinuousRxCWindow+0x78>)
 800f91c:	4618      	mov	r0, r3
 800f91e:	f004 f8cf 	bl	8013ac0 <RegionRxConfig>
 800f922:	4603      	mov	r3, r0
 800f924:	2b00      	cmp	r3, #0
 800f926:	d00f      	beq.n	800f948 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800f928:	4b0b      	ldr	r3, [pc, #44]	@ (800f958 <OpenContinuousRxCWindow+0x7c>)
 800f92a:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800f92e:	4b0a      	ldr	r3, [pc, #40]	@ (800f958 <OpenContinuousRxCWindow+0x7c>)
 800f930:	f883 245e 	strb.w	r2, [r3, #1118]	@ 0x45e
        Radio.Rx( 0 ); // Continuous mode
 800f934:	4b0a      	ldr	r3, [pc, #40]	@ (800f960 <OpenContinuousRxCWindow+0x84>)
 800f936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f938:	2000      	movs	r0, #0
 800f93a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800f93c:	4b06      	ldr	r3, [pc, #24]	@ (800f958 <OpenContinuousRxCWindow+0x7c>)
 800f93e:	f893 23f3 	ldrb.w	r2, [r3, #1011]	@ 0x3f3
 800f942:	4b05      	ldr	r3, [pc, #20]	@ (800f958 <OpenContinuousRxCWindow+0x7c>)
 800f944:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 800f948:	bf00      	nop
 800f94a:	3704      	adds	r7, #4
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd90      	pop	{r4, r7, pc}
 800f950:	20000a70 	.word	0x20000a70
 800f954:	20000948 	.word	0x20000948
 800f958:	20000568 	.word	0x20000568
 800f95c:	20000984 	.word	0x20000984
 800f960:	0801d86c 	.word	0x0801d86c

0800f964 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b088      	sub	sp, #32
 800f968:	af00      	add	r7, sp, #0
 800f96a:	60f8      	str	r0, [r7, #12]
 800f96c:	60b9      	str	r1, [r7, #8]
 800f96e:	603b      	str	r3, [r7, #0]
 800f970:	4613      	mov	r3, r2
 800f972:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800f974:	4b81      	ldr	r3, [pc, #516]	@ (800fb7c <PrepareFrame+0x218>)
 800f976:	2200      	movs	r2, #0
 800f978:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800f97a:	4b80      	ldr	r3, [pc, #512]	@ (800fb7c <PrepareFrame+0x218>)
 800f97c:	2200      	movs	r2, #0
 800f97e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    uint32_t fCntUp = 0;
 800f982:	2300      	movs	r3, #0
 800f984:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800f986:	2300      	movs	r3, #0
 800f988:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800f98a:	2300      	movs	r3, #0
 800f98c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d101      	bne.n	800f998 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800f994:	2300      	movs	r3, #0
 800f996:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800f998:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f99a:	461a      	mov	r2, r3
 800f99c:	6839      	ldr	r1, [r7, #0]
 800f99e:	4878      	ldr	r0, [pc, #480]	@ (800fb80 <PrepareFrame+0x21c>)
 800f9a0:	f007 fe9d 	bl	80176de <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800f9a4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f9a6:	b2da      	uxtb	r2, r3
 800f9a8:	4b74      	ldr	r3, [pc, #464]	@ (800fb7c <PrepareFrame+0x218>)
 800f9aa:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	781a      	ldrb	r2, [r3, #0]
 800f9b2:	4b72      	ldr	r3, [pc, #456]	@ (800fb7c <PrepareFrame+0x218>)
 800f9b4:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f9be:	b2db      	uxtb	r3, r3
 800f9c0:	2b07      	cmp	r3, #7
 800f9c2:	f000 80b9 	beq.w	800fb38 <PrepareFrame+0x1d4>
 800f9c6:	2b07      	cmp	r3, #7
 800f9c8:	f300 80ce 	bgt.w	800fb68 <PrepareFrame+0x204>
 800f9cc:	2b02      	cmp	r3, #2
 800f9ce:	d006      	beq.n	800f9de <PrepareFrame+0x7a>
 800f9d0:	2b04      	cmp	r3, #4
 800f9d2:	f040 80c9 	bne.w	800fb68 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800f9d6:	4b69      	ldr	r3, [pc, #420]	@ (800fb7c <PrepareFrame+0x218>)
 800f9d8:	2201      	movs	r2, #1
 800f9da:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800f9de:	4b67      	ldr	r3, [pc, #412]	@ (800fb7c <PrepareFrame+0x218>)
 800f9e0:	2204      	movs	r2, #4
 800f9e2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800f9e6:	4b65      	ldr	r3, [pc, #404]	@ (800fb7c <PrepareFrame+0x218>)
 800f9e8:	4a66      	ldr	r2, [pc, #408]	@ (800fb84 <PrepareFrame+0x220>)
 800f9ea:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f9ee:	4b63      	ldr	r3, [pc, #396]	@ (800fb7c <PrepareFrame+0x218>)
 800f9f0:	22ff      	movs	r2, #255	@ 0xff
 800f9f2:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	781a      	ldrb	r2, [r3, #0]
 800f9fa:	4b60      	ldr	r3, [pc, #384]	@ (800fb7c <PrepareFrame+0x218>)
 800f9fc:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800fa00:	4a5e      	ldr	r2, [pc, #376]	@ (800fb7c <PrepareFrame+0x218>)
 800fa02:	79fb      	ldrb	r3, [r7, #7]
 800fa04:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800fa08:	4b5f      	ldr	r3, [pc, #380]	@ (800fb88 <PrepareFrame+0x224>)
 800fa0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fa0e:	4a5b      	ldr	r2, [pc, #364]	@ (800fb7c <PrepareFrame+0x218>)
 800fa10:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	781a      	ldrb	r2, [r3, #0]
 800fa18:	4b58      	ldr	r3, [pc, #352]	@ (800fb7c <PrepareFrame+0x218>)
 800fa1a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800fa1e:	4b57      	ldr	r3, [pc, #348]	@ (800fb7c <PrepareFrame+0x218>)
 800fa20:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 800fa24:	4b55      	ldr	r3, [pc, #340]	@ (800fb7c <PrepareFrame+0x218>)
 800fa26:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800fa2a:	4b54      	ldr	r3, [pc, #336]	@ (800fb7c <PrepareFrame+0x218>)
 800fa2c:	4a54      	ldr	r2, [pc, #336]	@ (800fb80 <PrepareFrame+0x21c>)
 800fa2e:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800fa32:	f107 0318 	add.w	r3, r7, #24
 800fa36:	4618      	mov	r0, r3
 800fa38:	f003 f8cc 	bl	8012bd4 <LoRaMacCryptoGetFCntUp>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d001      	beq.n	800fa46 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800fa42:	2312      	movs	r3, #18
 800fa44:	e096      	b.n	800fb74 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800fa46:	69bb      	ldr	r3, [r7, #24]
 800fa48:	b29a      	uxth	r2, r3
 800fa4a:	4b4c      	ldr	r3, [pc, #304]	@ (800fb7c <PrepareFrame+0x218>)
 800fa4c:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 800fa50:	4b4a      	ldr	r3, [pc, #296]	@ (800fb7c <PrepareFrame+0x218>)
 800fa52:	2200      	movs	r2, #0
 800fa54:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 800fa58:	4b48      	ldr	r3, [pc, #288]	@ (800fb7c <PrepareFrame+0x218>)
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800fa60:	69bb      	ldr	r3, [r7, #24]
 800fa62:	4a46      	ldr	r2, [pc, #280]	@ (800fb7c <PrepareFrame+0x218>)
 800fa64:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800fa68:	f107 0314 	add.w	r3, r7, #20
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f002 fa7d 	bl	8011f6c <LoRaMacCommandsGetSizeSerializedCmds>
 800fa72:	4603      	mov	r3, r0
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d001      	beq.n	800fa7c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fa78:	2313      	movs	r3, #19
 800fa7a:	e07b      	b.n	800fb74 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d074      	beq.n	800fb6c <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800fa82:	4b41      	ldr	r3, [pc, #260]	@ (800fb88 <PrepareFrame+0x224>)
 800fa84:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7fe fd75 	bl	800e578 <GetMaxAppPayloadWithoutFOptsLength>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800fa92:	4b3a      	ldr	r3, [pc, #232]	@ (800fb7c <PrepareFrame+0x218>)
 800fa94:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d01d      	beq.n	800fad8 <PrepareFrame+0x174>
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	2b0f      	cmp	r3, #15
 800faa0:	d81a      	bhi.n	800fad8 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800faa2:	f107 0314 	add.w	r3, r7, #20
 800faa6:	4a39      	ldr	r2, [pc, #228]	@ (800fb8c <PrepareFrame+0x228>)
 800faa8:	4619      	mov	r1, r3
 800faaa:	200f      	movs	r0, #15
 800faac:	f002 fa74 	bl	8011f98 <LoRaMacCommandsSerializeCmds>
 800fab0:	4603      	mov	r3, r0
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d001      	beq.n	800faba <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fab6:	2313      	movs	r3, #19
 800fab8:	e05c      	b.n	800fb74 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	f003 030f 	and.w	r3, r3, #15
 800fac0:	b2d9      	uxtb	r1, r3
 800fac2:	68ba      	ldr	r2, [r7, #8]
 800fac4:	7813      	ldrb	r3, [r2, #0]
 800fac6:	f361 0303 	bfi	r3, r1, #0, #4
 800faca:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	781a      	ldrb	r2, [r3, #0]
 800fad0:	4b2a      	ldr	r3, [pc, #168]	@ (800fb7c <PrepareFrame+0x218>)
 800fad2:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800fad6:	e049      	b.n	800fb6c <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800fad8:	4b28      	ldr	r3, [pc, #160]	@ (800fb7c <PrepareFrame+0x218>)
 800fada:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d010      	beq.n	800fb04 <PrepareFrame+0x1a0>
 800fae2:	697b      	ldr	r3, [r7, #20]
 800fae4:	2b0f      	cmp	r3, #15
 800fae6:	d90d      	bls.n	800fb04 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800fae8:	7ffb      	ldrb	r3, [r7, #31]
 800faea:	f107 0114 	add.w	r1, r7, #20
 800faee:	4a28      	ldr	r2, [pc, #160]	@ (800fb90 <PrepareFrame+0x22c>)
 800faf0:	4618      	mov	r0, r3
 800faf2:	f002 fa51 	bl	8011f98 <LoRaMacCommandsSerializeCmds>
 800faf6:	4603      	mov	r3, r0
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d001      	beq.n	800fb00 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fafc:	2313      	movs	r3, #19
 800fafe:	e039      	b.n	800fb74 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800fb00:	230a      	movs	r3, #10
 800fb02:	e037      	b.n	800fb74 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800fb04:	7ffb      	ldrb	r3, [r7, #31]
 800fb06:	f107 0114 	add.w	r1, r7, #20
 800fb0a:	4a21      	ldr	r2, [pc, #132]	@ (800fb90 <PrepareFrame+0x22c>)
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f002 fa43 	bl	8011f98 <LoRaMacCommandsSerializeCmds>
 800fb12:	4603      	mov	r3, r0
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d001      	beq.n	800fb1c <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fb18:	2313      	movs	r3, #19
 800fb1a:	e02b      	b.n	800fb74 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800fb1c:	4b17      	ldr	r3, [pc, #92]	@ (800fb7c <PrepareFrame+0x218>)
 800fb1e:	2200      	movs	r2, #0
 800fb20:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800fb24:	4b15      	ldr	r3, [pc, #84]	@ (800fb7c <PrepareFrame+0x218>)
 800fb26:	4a1a      	ldr	r2, [pc, #104]	@ (800fb90 <PrepareFrame+0x22c>)
 800fb28:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	b2da      	uxtb	r2, r3
 800fb30:	4b12      	ldr	r3, [pc, #72]	@ (800fb7c <PrepareFrame+0x218>)
 800fb32:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 800fb36:	e019      	b.n	800fb6c <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d018      	beq.n	800fb70 <PrepareFrame+0x20c>
 800fb3e:	4b0f      	ldr	r3, [pc, #60]	@ (800fb7c <PrepareFrame+0x218>)
 800fb40:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d013      	beq.n	800fb70 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800fb48:	4812      	ldr	r0, [pc, #72]	@ (800fb94 <PrepareFrame+0x230>)
 800fb4a:	4b0c      	ldr	r3, [pc, #48]	@ (800fb7c <PrepareFrame+0x218>)
 800fb4c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fb50:	461a      	mov	r2, r3
 800fb52:	6839      	ldr	r1, [r7, #0]
 800fb54:	f007 fdc3 	bl	80176de <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800fb58:	4b08      	ldr	r3, [pc, #32]	@ (800fb7c <PrepareFrame+0x218>)
 800fb5a:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fb5e:	3301      	adds	r3, #1
 800fb60:	b29a      	uxth	r2, r3
 800fb62:	4b06      	ldr	r3, [pc, #24]	@ (800fb7c <PrepareFrame+0x218>)
 800fb64:	801a      	strh	r2, [r3, #0]
            }
            break;
 800fb66:	e003      	b.n	800fb70 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fb68:	2302      	movs	r3, #2
 800fb6a:	e003      	b.n	800fb74 <PrepareFrame+0x210>
            break;
 800fb6c:	bf00      	nop
 800fb6e:	e000      	b.n	800fb72 <PrepareFrame+0x20e>
            break;
 800fb70:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800fb72:	2300      	movs	r3, #0
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3720      	adds	r7, #32
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}
 800fb7c:	20000568 	.word	0x20000568
 800fb80:	200006a0 	.word	0x200006a0
 800fb84:	2000056a 	.word	0x2000056a
 800fb88:	20000a70 	.word	0x20000a70
 800fb8c:	20000680 	.word	0x20000680
 800fb90:	200009f0 	.word	0x200009f0
 800fb94:	2000056b 	.word	0x2000056b

0800fb98 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b08a      	sub	sp, #40	@ 0x28
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	4603      	mov	r3, r0
 800fba0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fba2:	2303      	movs	r3, #3
 800fba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 800fbac:	79fb      	ldrb	r3, [r7, #7]
 800fbae:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fbb0:	4b48      	ldr	r3, [pc, #288]	@ (800fcd4 <SendFrameOnChannel+0x13c>)
 800fbb2:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fbb6:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fbb8:	4b46      	ldr	r3, [pc, #280]	@ (800fcd4 <SendFrameOnChannel+0x13c>)
 800fbba:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800fbbe:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800fbc0:	4b44      	ldr	r3, [pc, #272]	@ (800fcd4 <SendFrameOnChannel+0x13c>)
 800fbc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbc6:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800fbc8:	4b42      	ldr	r3, [pc, #264]	@ (800fcd4 <SendFrameOnChannel+0x13c>)
 800fbca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fbce:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800fbd0:	4b41      	ldr	r3, [pc, #260]	@ (800fcd8 <SendFrameOnChannel+0x140>)
 800fbd2:	881b      	ldrh	r3, [r3, #0]
 800fbd4:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800fbd6:	4b3f      	ldr	r3, [pc, #252]	@ (800fcd4 <SendFrameOnChannel+0x13c>)
 800fbd8:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800fbdc:	f107 020f 	add.w	r2, r7, #15
 800fbe0:	f107 0110 	add.w	r1, r7, #16
 800fbe4:	4b3d      	ldr	r3, [pc, #244]	@ (800fcdc <SendFrameOnChannel+0x144>)
 800fbe6:	f003 ff89 	bl	8013afc <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fbea:	4b3b      	ldr	r3, [pc, #236]	@ (800fcd8 <SendFrameOnChannel+0x140>)
 800fbec:	2201      	movs	r2, #1
 800fbee:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fbf2:	4b38      	ldr	r3, [pc, #224]	@ (800fcd4 <SendFrameOnChannel+0x13c>)
 800fbf4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fbf8:	b2da      	uxtb	r2, r3
 800fbfa:	4b37      	ldr	r3, [pc, #220]	@ (800fcd8 <SendFrameOnChannel+0x140>)
 800fbfc:	f883 2436 	strb.w	r2, [r3, #1078]	@ 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 800fc00:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800fc04:	4b34      	ldr	r3, [pc, #208]	@ (800fcd8 <SendFrameOnChannel+0x140>)
 800fc06:	f883 2437 	strb.w	r2, [r3, #1079]	@ 0x437
    MacCtx.McpsConfirm.Channel = channel;
 800fc0a:	79fb      	ldrb	r3, [r7, #7]
 800fc0c:	4a32      	ldr	r2, [pc, #200]	@ (800fcd8 <SendFrameOnChannel+0x140>)
 800fc0e:	f8c2 3444 	str.w	r3, [r2, #1092]	@ 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800fc12:	4b31      	ldr	r3, [pc, #196]	@ (800fcd8 <SendFrameOnChannel+0x140>)
 800fc14:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800fc18:	4a2f      	ldr	r2, [pc, #188]	@ (800fcd8 <SendFrameOnChannel+0x140>)
 800fc1a:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800fc1e:	4b2e      	ldr	r3, [pc, #184]	@ (800fcd8 <SendFrameOnChannel+0x140>)
 800fc20:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800fc24:	4a2c      	ldr	r2, [pc, #176]	@ (800fcd8 <SendFrameOnChannel+0x140>)
 800fc26:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800fc2a:	f001 ff07 	bl	8011a3c <LoRaMacClassBIsBeaconModeActive>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d00b      	beq.n	800fc4c <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800fc34:	4b28      	ldr	r3, [pc, #160]	@ (800fcd8 <SendFrameOnChannel+0x140>)
 800fc36:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f001 ff69 	bl	8011b12 <LoRaMacClassBIsUplinkCollision>
 800fc40:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 800fc42:	6a3b      	ldr	r3, [r7, #32]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d001      	beq.n	800fc4c <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800fc48:	2310      	movs	r3, #16
 800fc4a:	e03e      	b.n	800fcca <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fc4c:	4b21      	ldr	r3, [pc, #132]	@ (800fcd4 <SendFrameOnChannel+0x13c>)
 800fc4e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fc52:	2b01      	cmp	r3, #1
 800fc54:	d101      	bne.n	800fc5a <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800fc56:	f001 ff66 	bl	8011b26 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800fc5a:	f001 ff00 	bl	8011a5e <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800fc5e:	4b1d      	ldr	r3, [pc, #116]	@ (800fcd4 <SendFrameOnChannel+0x13c>)
 800fc60:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fc64:	b2db      	uxtb	r3, r3
 800fc66:	4a1c      	ldr	r2, [pc, #112]	@ (800fcd8 <SendFrameOnChannel+0x140>)
 800fc68:	f892 2411 	ldrb.w	r2, [r2, #1041]	@ 0x411
 800fc6c:	4611      	mov	r1, r2
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7ff fc44 	bl	800f4fc <SecureFrame>
 800fc74:	4603      	mov	r3, r0
 800fc76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 800fc7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d002      	beq.n	800fc88 <SendFrameOnChannel+0xf0>
    {
        return status;
 800fc82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc86:	e020      	b.n	800fcca <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800fc88:	4b13      	ldr	r3, [pc, #76]	@ (800fcd8 <SendFrameOnChannel+0x140>)
 800fc8a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fc8e:	f043 0302 	orr.w	r3, r3, #2
 800fc92:	4a11      	ldr	r2, [pc, #68]	@ (800fcd8 <SendFrameOnChannel+0x140>)
 800fc94:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800fc98:	4b0f      	ldr	r3, [pc, #60]	@ (800fcd8 <SendFrameOnChannel+0x140>)
 800fc9a:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800fc9e:	f083 0301 	eor.w	r3, r3, #1
 800fca2:	b2db      	uxtb	r3, r3
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d007      	beq.n	800fcb8 <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 800fca8:	4b0b      	ldr	r3, [pc, #44]	@ (800fcd8 <SendFrameOnChannel+0x140>)
 800fcaa:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 800fcae:	3301      	adds	r3, #1
 800fcb0:	b2da      	uxtb	r2, r3
 800fcb2:	4b09      	ldr	r3, [pc, #36]	@ (800fcd8 <SendFrameOnChannel+0x140>)
 800fcb4:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800fcb8:	4b09      	ldr	r3, [pc, #36]	@ (800fce0 <SendFrameOnChannel+0x148>)
 800fcba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcbc:	4a06      	ldr	r2, [pc, #24]	@ (800fcd8 <SendFrameOnChannel+0x140>)
 800fcbe:	8812      	ldrh	r2, [r2, #0]
 800fcc0:	b2d2      	uxtb	r2, r2
 800fcc2:	4611      	mov	r1, r2
 800fcc4:	4807      	ldr	r0, [pc, #28]	@ (800fce4 <SendFrameOnChannel+0x14c>)
 800fcc6:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800fcc8:	2300      	movs	r3, #0
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3728      	adds	r7, #40	@ 0x28
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
 800fcd2:	bf00      	nop
 800fcd4:	20000a70 	.word	0x20000a70
 800fcd8:	20000568 	.word	0x20000568
 800fcdc:	2000097c 	.word	0x2000097c
 800fce0:	0801d86c 	.word	0x0801d86c
 800fce4:	2000056a 	.word	0x2000056a

0800fce8 <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b086      	sub	sp, #24
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	4603      	mov	r3, r0
 800fcf0:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 800fcf2:	4b16      	ldr	r3, [pc, #88]	@ (800fd4c <SetTxContinuousWave+0x64>)
 800fcf4:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 800fcf8:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fcfa:	4b15      	ldr	r3, [pc, #84]	@ (800fd50 <SetTxContinuousWave+0x68>)
 800fcfc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fd00:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fd02:	4b13      	ldr	r3, [pc, #76]	@ (800fd50 <SetTxContinuousWave+0x68>)
 800fd04:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800fd08:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800fd0a:	4b11      	ldr	r3, [pc, #68]	@ (800fd50 <SetTxContinuousWave+0x68>)
 800fd0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd10:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800fd12:	4b0f      	ldr	r3, [pc, #60]	@ (800fd50 <SetTxContinuousWave+0x68>)
 800fd14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fd18:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 800fd1a:	88fb      	ldrh	r3, [r7, #6]
 800fd1c:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800fd1e:	4b0c      	ldr	r3, [pc, #48]	@ (800fd50 <SetTxContinuousWave+0x68>)
 800fd20:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fd24:	f107 0208 	add.w	r2, r7, #8
 800fd28:	4611      	mov	r1, r2
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f003 ffe3 	bl	8013cf6 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800fd30:	4b06      	ldr	r3, [pc, #24]	@ (800fd4c <SetTxContinuousWave+0x64>)
 800fd32:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fd36:	f043 0302 	orr.w	r3, r3, #2
 800fd3a:	4a04      	ldr	r2, [pc, #16]	@ (800fd4c <SetTxContinuousWave+0x64>)
 800fd3c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 800fd40:	2300      	movs	r3, #0
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	3718      	adds	r7, #24
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
 800fd4a:	bf00      	nop
 800fd4c:	20000568 	.word	0x20000568
 800fd50:	20000a70 	.word	0x20000a70

0800fd54 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b082      	sub	sp, #8
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	6039      	str	r1, [r7, #0]
 800fd5e:	80fb      	strh	r3, [r7, #6]
 800fd60:	4613      	mov	r3, r2
 800fd62:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800fd64:	4b09      	ldr	r3, [pc, #36]	@ (800fd8c <SetTxContinuousWave1+0x38>)
 800fd66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd68:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800fd6c:	88fa      	ldrh	r2, [r7, #6]
 800fd6e:	6838      	ldr	r0, [r7, #0]
 800fd70:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800fd72:	4b07      	ldr	r3, [pc, #28]	@ (800fd90 <SetTxContinuousWave1+0x3c>)
 800fd74:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fd78:	f043 0302 	orr.w	r3, r3, #2
 800fd7c:	4a04      	ldr	r2, [pc, #16]	@ (800fd90 <SetTxContinuousWave1+0x3c>)
 800fd7e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 800fd82:	2300      	movs	r3, #0
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	3708      	adds	r7, #8
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	0801d86c 	.word	0x0801d86c
 800fd90:	20000568 	.word	0x20000568

0800fd94 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 800fd94:	b480      	push	{r7}
 800fd96:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 800fd98:	2300      	movs	r3, #0
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bc80      	pop	{r7}
 800fda0:	4770      	bx	lr

0800fda2 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800fda2:	b480      	push	{r7}
 800fda4:	b083      	sub	sp, #12
 800fda6:	af00      	add	r7, sp, #0
 800fda8:	6078      	str	r0, [r7, #4]
 800fdaa:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d002      	beq.n	800fdb8 <DetermineFrameType+0x16>
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d101      	bne.n	800fdbc <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fdb8:	2303      	movs	r3, #3
 800fdba:	e03b      	b.n	800fe34 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	7b1b      	ldrb	r3, [r3, #12]
 800fdc0:	f003 030f 	and.w	r3, r3, #15
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d008      	beq.n	800fddc <DetermineFrameType+0x3a>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d003      	beq.n	800fddc <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	701a      	strb	r2, [r3, #0]
 800fdda:	e02a      	b.n	800fe32 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d103      	bne.n	800fdee <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	2201      	movs	r2, #1
 800fdea:	701a      	strb	r2, [r3, #0]
 800fdec:	e021      	b.n	800fe32 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	7b1b      	ldrb	r3, [r3, #12]
 800fdf2:	f003 030f 	and.w	r3, r3, #15
 800fdf6:	b2db      	uxtb	r3, r3
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d108      	bne.n	800fe0e <DetermineFrameType+0x6c>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d103      	bne.n	800fe0e <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	2202      	movs	r2, #2
 800fe0a:	701a      	strb	r2, [r3, #0]
 800fe0c:	e011      	b.n	800fe32 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	7b1b      	ldrb	r3, [r3, #12]
 800fe12:	f003 030f 	and.w	r3, r3, #15
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d108      	bne.n	800fe2e <DetermineFrameType+0x8c>
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d003      	beq.n	800fe2e <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	2203      	movs	r2, #3
 800fe2a:	701a      	strb	r2, [r3, #0]
 800fe2c:	e001      	b.n	800fe32 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800fe2e:	2318      	movs	r3, #24
 800fe30:	e000      	b.n	800fe34 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800fe32:	2300      	movs	r3, #0
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	370c      	adds	r7, #12
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bc80      	pop	{r7}
 800fe3c:	4770      	bx	lr
	...

0800fe40 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 800fe40:	b480      	push	{r7}
 800fe42:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 800fe44:	4b12      	ldr	r3, [pc, #72]	@ (800fe90 <CheckRetransUnconfirmedUplink+0x50>)
 800fe46:	f893 240c 	ldrb.w	r2, [r3, #1036]	@ 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800fe4a:	4b12      	ldr	r3, [pc, #72]	@ (800fe94 <CheckRetransUnconfirmedUplink+0x54>)
 800fe4c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 800fe50:	429a      	cmp	r2, r3
 800fe52:	d301      	bcc.n	800fe58 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 800fe54:	2301      	movs	r3, #1
 800fe56:	e016      	b.n	800fe86 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800fe58:	4b0d      	ldr	r3, [pc, #52]	@ (800fe90 <CheckRetransUnconfirmedUplink+0x50>)
 800fe5a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800fe5e:	f003 0302 	and.w	r3, r3, #2
 800fe62:	b2db      	uxtb	r3, r3
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d00d      	beq.n	800fe84 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800fe68:	4b0a      	ldr	r3, [pc, #40]	@ (800fe94 <CheckRetransUnconfirmedUplink+0x54>)
 800fe6a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d101      	bne.n	800fe76 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 800fe72:	2301      	movs	r3, #1
 800fe74:	e007      	b.n	800fe86 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800fe76:	4b06      	ldr	r3, [pc, #24]	@ (800fe90 <CheckRetransUnconfirmedUplink+0x50>)
 800fe78:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d101      	bne.n	800fe84 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 800fe80:	2301      	movs	r3, #1
 800fe82:	e000      	b.n	800fe86 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 800fe84:	2300      	movs	r3, #0
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bc80      	pop	{r7}
 800fe8c:	4770      	bx	lr
 800fe8e:	bf00      	nop
 800fe90:	20000568 	.word	0x20000568
 800fe94:	20000a70 	.word	0x20000a70

0800fe98 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800fe98:	b480      	push	{r7}
 800fe9a:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 800fe9c:	4b0e      	ldr	r3, [pc, #56]	@ (800fed8 <CheckRetransConfirmedUplink+0x40>)
 800fe9e:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
        MacCtx.AckTimeoutRetries )
 800fea2:	4b0d      	ldr	r3, [pc, #52]	@ (800fed8 <CheckRetransConfirmedUplink+0x40>)
 800fea4:	f893 340d 	ldrb.w	r3, [r3, #1037]	@ 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d301      	bcc.n	800feb0 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 800feac:	2301      	movs	r3, #1
 800feae:	e00f      	b.n	800fed0 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800feb0:	4b09      	ldr	r3, [pc, #36]	@ (800fed8 <CheckRetransConfirmedUplink+0x40>)
 800feb2:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800feb6:	f003 0302 	and.w	r3, r3, #2
 800feba:	b2db      	uxtb	r3, r3
 800febc:	2b00      	cmp	r3, #0
 800febe:	d006      	beq.n	800fece <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800fec0:	4b05      	ldr	r3, [pc, #20]	@ (800fed8 <CheckRetransConfirmedUplink+0x40>)
 800fec2:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d001      	beq.n	800fece <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 800feca:	2301      	movs	r3, #1
 800fecc:	e000      	b.n	800fed0 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 800fece:	2300      	movs	r3, #0
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bc80      	pop	{r7}
 800fed6:	4770      	bx	lr
 800fed8:	20000568 	.word	0x20000568

0800fedc <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800fedc:	b480      	push	{r7}
 800fede:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800fee0:	4b1a      	ldr	r3, [pc, #104]	@ (800ff4c <StopRetransmission+0x70>)
 800fee2:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800fee6:	f003 0302 	and.w	r3, r3, #2
 800feea:	b2db      	uxtb	r3, r3
 800feec:	2b00      	cmp	r3, #0
 800feee:	d009      	beq.n	800ff04 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800fef0:	4b16      	ldr	r3, [pc, #88]	@ (800ff4c <StopRetransmission+0x70>)
 800fef2:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d00e      	beq.n	800ff18 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 800fefa:	4b14      	ldr	r3, [pc, #80]	@ (800ff4c <StopRetransmission+0x70>)
 800fefc:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ff00:	2b01      	cmp	r3, #1
 800ff02:	d009      	beq.n	800ff18 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800ff04:	4b12      	ldr	r3, [pc, #72]	@ (800ff50 <StopRetransmission+0x74>)
 800ff06:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d004      	beq.n	800ff18 <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 800ff0e:	4b10      	ldr	r3, [pc, #64]	@ (800ff50 <StopRetransmission+0x74>)
 800ff10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff12:	3301      	adds	r3, #1
 800ff14:	4a0e      	ldr	r2, [pc, #56]	@ (800ff50 <StopRetransmission+0x74>)
 800ff16:	6293      	str	r3, [r2, #40]	@ 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800ff18:	4b0c      	ldr	r3, [pc, #48]	@ (800ff4c <StopRetransmission+0x70>)
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
    MacCtx.NodeAckRequested = false;
 800ff20:	4b0a      	ldr	r3, [pc, #40]	@ (800ff4c <StopRetransmission+0x70>)
 800ff22:	2200      	movs	r2, #0
 800ff24:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 800ff28:	4b08      	ldr	r3, [pc, #32]	@ (800ff4c <StopRetransmission+0x70>)
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ff30:	4b06      	ldr	r3, [pc, #24]	@ (800ff4c <StopRetransmission+0x70>)
 800ff32:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ff36:	f023 0302 	bic.w	r3, r3, #2
 800ff3a:	4a04      	ldr	r2, [pc, #16]	@ (800ff4c <StopRetransmission+0x70>)
 800ff3c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 800ff40:	2301      	movs	r3, #1
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bc80      	pop	{r7}
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	20000568 	.word	0x20000568
 800ff50:	20000a70 	.word	0x20000a70

0800ff54 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ff58:	4b08      	ldr	r3, [pc, #32]	@ (800ff7c <OnMacProcessNotify+0x28>)
 800ff5a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d00a      	beq.n	800ff78 <OnMacProcessNotify+0x24>
 800ff62:	4b06      	ldr	r3, [pc, #24]	@ (800ff7c <OnMacProcessNotify+0x28>)
 800ff64:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ff68:	695b      	ldr	r3, [r3, #20]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d004      	beq.n	800ff78 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ff6e:	4b03      	ldr	r3, [pc, #12]	@ (800ff7c <OnMacProcessNotify+0x28>)
 800ff70:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ff74:	695b      	ldr	r3, [r3, #20]
 800ff76:	4798      	blx	r3
    }
}
 800ff78:	bf00      	nop
 800ff7a:	bd80      	pop	{r7, pc}
 800ff7c:	20000568 	.word	0x20000568

0800ff80 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	4603      	mov	r3, r0
 800ff88:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800ff8a:	4b0b      	ldr	r3, [pc, #44]	@ (800ffb8 <CallNvmDataChangeCallback+0x38>)
 800ff8c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d00c      	beq.n	800ffae <CallNvmDataChangeCallback+0x2e>
 800ff94:	4b08      	ldr	r3, [pc, #32]	@ (800ffb8 <CallNvmDataChangeCallback+0x38>)
 800ff96:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ff9a:	691b      	ldr	r3, [r3, #16]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d006      	beq.n	800ffae <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800ffa0:	4b05      	ldr	r3, [pc, #20]	@ (800ffb8 <CallNvmDataChangeCallback+0x38>)
 800ffa2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ffa6:	691b      	ldr	r3, [r3, #16]
 800ffa8:	88fa      	ldrh	r2, [r7, #6]
 800ffaa:	4610      	mov	r0, r2
 800ffac:	4798      	blx	r3
    }
}
 800ffae:	bf00      	nop
 800ffb0:	3708      	adds	r7, #8
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}
 800ffb6:	bf00      	nop
 800ffb8:	20000568 	.word	0x20000568

0800ffbc <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b084      	sub	sp, #16
 800ffc0:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800ffc2:	4b1b      	ldr	r3, [pc, #108]	@ (8010030 <AckTimeoutRetriesProcess+0x74>)
 800ffc4:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 800ffc8:	4b19      	ldr	r3, [pc, #100]	@ (8010030 <AckTimeoutRetriesProcess+0x74>)
 800ffca:	f893 340d 	ldrb.w	r3, [r3, #1037]	@ 0x40d
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d229      	bcs.n	8010026 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 800ffd2:	4b17      	ldr	r3, [pc, #92]	@ (8010030 <AckTimeoutRetriesProcess+0x74>)
 800ffd4:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 800ffd8:	3301      	adds	r3, #1
 800ffda:	b2da      	uxtb	r2, r3
 800ffdc:	4b14      	ldr	r3, [pc, #80]	@ (8010030 <AckTimeoutRetriesProcess+0x74>)
 800ffde:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800ffe2:	4b13      	ldr	r3, [pc, #76]	@ (8010030 <AckTimeoutRetriesProcess+0x74>)
 800ffe4:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 800ffe8:	f003 0301 	and.w	r3, r3, #1
 800ffec:	b2db      	uxtb	r3, r3
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d019      	beq.n	8010026 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800fff2:	2322      	movs	r3, #34	@ 0x22
 800fff4:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fff6:	4b0f      	ldr	r3, [pc, #60]	@ (8010034 <AckTimeoutRetriesProcess+0x78>)
 800fff8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800fffc:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fffe:	4b0d      	ldr	r3, [pc, #52]	@ (8010034 <AckTimeoutRetriesProcess+0x78>)
 8010000:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010004:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010006:	4b0b      	ldr	r3, [pc, #44]	@ (8010034 <AckTimeoutRetriesProcess+0x78>)
 8010008:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801000c:	f107 0208 	add.w	r2, r7, #8
 8010010:	4611      	mov	r1, r2
 8010012:	4618      	mov	r0, r3
 8010014:	f003 fc90 	bl	8013938 <RegionGetPhyParam>
 8010018:	4603      	mov	r3, r0
 801001a:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	b25a      	sxtb	r2, r3
 8010020:	4b04      	ldr	r3, [pc, #16]	@ (8010034 <AckTimeoutRetriesProcess+0x78>)
 8010022:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
    }
}
 8010026:	bf00      	nop
 8010028:	3710      	adds	r7, #16
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	20000568 	.word	0x20000568
 8010034:	20000a70 	.word	0x20000a70

08010038 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b084      	sub	sp, #16
 801003c:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 801003e:	4b14      	ldr	r3, [pc, #80]	@ (8010090 <AckTimeoutRetriesFinalize+0x58>)
 8010040:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 8010044:	f083 0301 	eor.w	r3, r3, #1
 8010048:	b2db      	uxtb	r3, r3
 801004a:	2b00      	cmp	r3, #0
 801004c:	d015      	beq.n	801007a <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801004e:	2302      	movs	r3, #2
 8010050:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8010052:	4b10      	ldr	r3, [pc, #64]	@ (8010094 <AckTimeoutRetriesFinalize+0x5c>)
 8010054:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8010056:	4b10      	ldr	r3, [pc, #64]	@ (8010098 <AckTimeoutRetriesFinalize+0x60>)
 8010058:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801005a:	4b10      	ldr	r3, [pc, #64]	@ (801009c <AckTimeoutRetriesFinalize+0x64>)
 801005c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010060:	1d3a      	adds	r2, r7, #4
 8010062:	4611      	mov	r1, r2
 8010064:	4618      	mov	r0, r3
 8010066:	f003 fc9e 	bl	80139a6 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 801006a:	4b09      	ldr	r3, [pc, #36]	@ (8010090 <AckTimeoutRetriesFinalize+0x58>)
 801006c:	2200      	movs	r2, #0
 801006e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 8010072:	4b07      	ldr	r3, [pc, #28]	@ (8010090 <AckTimeoutRetriesFinalize+0x58>)
 8010074:	2200      	movs	r2, #0
 8010076:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 801007a:	4b05      	ldr	r3, [pc, #20]	@ (8010090 <AckTimeoutRetriesFinalize+0x58>)
 801007c:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 8010080:	4b03      	ldr	r3, [pc, #12]	@ (8010090 <AckTimeoutRetriesFinalize+0x58>)
 8010082:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
}
 8010086:	bf00      	nop
 8010088:	3710      	adds	r7, #16
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}
 801008e:	bf00      	nop
 8010090:	20000568 	.word	0x20000568
 8010094:	20000c90 	.word	0x20000c90
 8010098:	20000d34 	.word	0x20000d34
 801009c:	20000a70 	.word	0x20000a70

080100a0 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80100a0:	b480      	push	{r7}
 80100a2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80100a4:	4b0b      	ldr	r3, [pc, #44]	@ (80100d4 <IsRequestPending+0x34>)
 80100a6:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80100aa:	f003 0304 	and.w	r3, r3, #4
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d107      	bne.n	80100c4 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80100b4:	4b07      	ldr	r3, [pc, #28]	@ (80100d4 <IsRequestPending+0x34>)
 80100b6:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80100ba:	f003 0301 	and.w	r3, r3, #1
 80100be:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d001      	beq.n	80100c8 <IsRequestPending+0x28>
    {
        return 1;
 80100c4:	2301      	movs	r3, #1
 80100c6:	e000      	b.n	80100ca <IsRequestPending+0x2a>
    }
    return 0;
 80100c8:	2300      	movs	r3, #0
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bc80      	pop	{r7}
 80100d0:	4770      	bx	lr
 80100d2:	bf00      	nop
 80100d4:	20000568 	.word	0x20000568

080100d8 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80100d8:	b590      	push	{r4, r7, lr}
 80100da:	b08f      	sub	sp, #60	@ 0x3c
 80100dc:	af02      	add	r7, sp, #8
 80100de:	6178      	str	r0, [r7, #20]
 80100e0:	6139      	str	r1, [r7, #16]
 80100e2:	4613      	mov	r3, r2
 80100e4:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d002      	beq.n	80100f2 <LoRaMacInitialization+0x1a>
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d101      	bne.n	80100f6 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80100f2:	2303      	movs	r3, #3
 80100f4:	e273      	b.n	80105de <LoRaMacInitialization+0x506>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d00b      	beq.n	8010116 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010102:	2b00      	cmp	r3, #0
 8010104:	d007      	beq.n	8010116 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801010a:	2b00      	cmp	r3, #0
 801010c:	d003      	beq.n	8010116 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010112:	2b00      	cmp	r3, #0
 8010114:	d101      	bne.n	801011a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010116:	2303      	movs	r3, #3
 8010118:	e261      	b.n	80105de <LoRaMacInitialization+0x506>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801011a:	7bfb      	ldrb	r3, [r7, #15]
 801011c:	4618      	mov	r0, r3
 801011e:	f003 fbf6 	bl	801390e <RegionIsActive>
 8010122:	4603      	mov	r3, r0
 8010124:	f083 0301 	eor.w	r3, r3, #1
 8010128:	b2db      	uxtb	r3, r3
 801012a:	2b00      	cmp	r3, #0
 801012c:	d001      	beq.n	8010132 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801012e:	2309      	movs	r3, #9
 8010130:	e255      	b.n	80105de <LoRaMacInitialization+0x506>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8010132:	6978      	ldr	r0, [r7, #20]
 8010134:	f002 f852 	bl	80121dc <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010138:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 801013c:	2100      	movs	r1, #0
 801013e:	48c7      	ldr	r0, [pc, #796]	@ (801045c <LoRaMacInitialization+0x384>)
 8010140:	f007 fb08 	bl	8017754 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010144:	f44f 62a1 	mov.w	r2, #1288	@ 0x508
 8010148:	2100      	movs	r1, #0
 801014a:	48c5      	ldr	r0, [pc, #788]	@ (8010460 <LoRaMacInitialization+0x388>)
 801014c:	f007 fb02 	bl	8017754 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010150:	4bc3      	ldr	r3, [pc, #780]	@ (8010460 <LoRaMacInitialization+0x388>)
 8010152:	2201      	movs	r2, #1
 8010154:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
    MacCtx.AckTimeoutRetries = 1;
 8010158:	4bc1      	ldr	r3, [pc, #772]	@ (8010460 <LoRaMacInitialization+0x388>)
 801015a:	2201      	movs	r2, #1
 801015c:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8010160:	4abe      	ldr	r2, [pc, #760]	@ (801045c <LoRaMacInitialization+0x384>)
 8010162:	7bfb      	ldrb	r3, [r7, #15]
 8010164:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010168:	4bbc      	ldr	r3, [pc, #752]	@ (801045c <LoRaMacInitialization+0x384>)
 801016a:	2200      	movs	r2, #0
 801016c:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8010170:	4bba      	ldr	r3, [pc, #744]	@ (801045c <LoRaMacInitialization+0x384>)
 8010172:	2200      	movs	r2, #0
 8010174:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010178:	4bb8      	ldr	r3, [pc, #736]	@ (801045c <LoRaMacInitialization+0x384>)
 801017a:	4aba      	ldr	r2, [pc, #744]	@ (8010464 <LoRaMacInitialization+0x38c>)
 801017c:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010180:	230f      	movs	r3, #15
 8010182:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010186:	4bb5      	ldr	r3, [pc, #724]	@ (801045c <LoRaMacInitialization+0x384>)
 8010188:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801018c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010190:	4611      	mov	r1, r2
 8010192:	4618      	mov	r0, r3
 8010194:	f003 fbd0 	bl	8013938 <RegionGetPhyParam>
 8010198:	4603      	mov	r3, r0
 801019a:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 801019c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801019e:	2b00      	cmp	r3, #0
 80101a0:	bf14      	ite	ne
 80101a2:	2301      	movne	r3, #1
 80101a4:	2300      	moveq	r3, #0
 80101a6:	b2da      	uxtb	r2, r3
 80101a8:	4bac      	ldr	r3, [pc, #688]	@ (801045c <LoRaMacInitialization+0x384>)
 80101aa:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80101ae:	230a      	movs	r3, #10
 80101b0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80101b4:	4ba9      	ldr	r3, [pc, #676]	@ (801045c <LoRaMacInitialization+0x384>)
 80101b6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80101ba:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80101be:	4611      	mov	r1, r2
 80101c0:	4618      	mov	r0, r3
 80101c2:	f003 fbb9 	bl	8013938 <RegionGetPhyParam>
 80101c6:	4603      	mov	r3, r0
 80101c8:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80101ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101cc:	b25a      	sxtb	r2, r3
 80101ce:	4ba3      	ldr	r3, [pc, #652]	@ (801045c <LoRaMacInitialization+0x384>)
 80101d0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80101d4:	2306      	movs	r3, #6
 80101d6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80101da:	4ba0      	ldr	r3, [pc, #640]	@ (801045c <LoRaMacInitialization+0x384>)
 80101dc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80101e0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80101e4:	4611      	mov	r1, r2
 80101e6:	4618      	mov	r0, r3
 80101e8:	f003 fba6 	bl	8013938 <RegionGetPhyParam>
 80101ec:	4603      	mov	r3, r0
 80101ee:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80101f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101f2:	b25a      	sxtb	r2, r3
 80101f4:	4b99      	ldr	r3, [pc, #612]	@ (801045c <LoRaMacInitialization+0x384>)
 80101f6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80101fa:	2310      	movs	r3, #16
 80101fc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010200:	4b96      	ldr	r3, [pc, #600]	@ (801045c <LoRaMacInitialization+0x384>)
 8010202:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010206:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801020a:	4611      	mov	r1, r2
 801020c:	4618      	mov	r0, r3
 801020e:	f003 fb93 	bl	8013938 <RegionGetPhyParam>
 8010212:	4603      	mov	r3, r0
 8010214:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010218:	4a90      	ldr	r2, [pc, #576]	@ (801045c <LoRaMacInitialization+0x384>)
 801021a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 801021e:	2311      	movs	r3, #17
 8010220:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010224:	4b8d      	ldr	r3, [pc, #564]	@ (801045c <LoRaMacInitialization+0x384>)
 8010226:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801022a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801022e:	4611      	mov	r1, r2
 8010230:	4618      	mov	r0, r3
 8010232:	f003 fb81 	bl	8013938 <RegionGetPhyParam>
 8010236:	4603      	mov	r3, r0
 8010238:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 801023a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801023c:	4a87      	ldr	r2, [pc, #540]	@ (801045c <LoRaMacInitialization+0x384>)
 801023e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010242:	2312      	movs	r3, #18
 8010244:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010248:	4b84      	ldr	r3, [pc, #528]	@ (801045c <LoRaMacInitialization+0x384>)
 801024a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801024e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010252:	4611      	mov	r1, r2
 8010254:	4618      	mov	r0, r3
 8010256:	f003 fb6f 	bl	8013938 <RegionGetPhyParam>
 801025a:	4603      	mov	r3, r0
 801025c:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 801025e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010260:	4a7e      	ldr	r2, [pc, #504]	@ (801045c <LoRaMacInitialization+0x384>)
 8010262:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010266:	2313      	movs	r3, #19
 8010268:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801026c:	4b7b      	ldr	r3, [pc, #492]	@ (801045c <LoRaMacInitialization+0x384>)
 801026e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010272:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010276:	4611      	mov	r1, r2
 8010278:	4618      	mov	r0, r3
 801027a:	f003 fb5d 	bl	8013938 <RegionGetPhyParam>
 801027e:	4603      	mov	r3, r0
 8010280:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010284:	4a75      	ldr	r2, [pc, #468]	@ (801045c <LoRaMacInitialization+0x384>)
 8010286:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 801028a:	2314      	movs	r3, #20
 801028c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010290:	4b72      	ldr	r3, [pc, #456]	@ (801045c <LoRaMacInitialization+0x384>)
 8010292:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010296:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801029a:	4611      	mov	r1, r2
 801029c:	4618      	mov	r0, r3
 801029e:	f003 fb4b 	bl	8013938 <RegionGetPhyParam>
 80102a2:	4603      	mov	r3, r0
 80102a4:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80102a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102a8:	4a6c      	ldr	r2, [pc, #432]	@ (801045c <LoRaMacInitialization+0x384>)
 80102aa:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80102ae:	2317      	movs	r3, #23
 80102b0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80102b4:	4b69      	ldr	r3, [pc, #420]	@ (801045c <LoRaMacInitialization+0x384>)
 80102b6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80102ba:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80102be:	4611      	mov	r1, r2
 80102c0:	4618      	mov	r0, r3
 80102c2:	f003 fb39 	bl	8013938 <RegionGetPhyParam>
 80102c6:	4603      	mov	r3, r0
 80102c8:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80102ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102cc:	b2da      	uxtb	r2, r3
 80102ce:	4b63      	ldr	r3, [pc, #396]	@ (801045c <LoRaMacInitialization+0x384>)
 80102d0:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80102d4:	2318      	movs	r3, #24
 80102d6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80102da:	4b60      	ldr	r3, [pc, #384]	@ (801045c <LoRaMacInitialization+0x384>)
 80102dc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80102e0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80102e4:	4611      	mov	r1, r2
 80102e6:	4618      	mov	r0, r3
 80102e8:	f003 fb26 	bl	8013938 <RegionGetPhyParam>
 80102ec:	4603      	mov	r3, r0
 80102ee:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80102f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f2:	4a5a      	ldr	r2, [pc, #360]	@ (801045c <LoRaMacInitialization+0x384>)
 80102f4:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80102f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102fa:	4a58      	ldr	r2, [pc, #352]	@ (801045c <LoRaMacInitialization+0x384>)
 80102fc:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010300:	2319      	movs	r3, #25
 8010302:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010306:	4b55      	ldr	r3, [pc, #340]	@ (801045c <LoRaMacInitialization+0x384>)
 8010308:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801030c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010310:	4611      	mov	r1, r2
 8010312:	4618      	mov	r0, r3
 8010314:	f003 fb10 	bl	8013938 <RegionGetPhyParam>
 8010318:	4603      	mov	r3, r0
 801031a:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 801031c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801031e:	b2da      	uxtb	r2, r3
 8010320:	4b4e      	ldr	r3, [pc, #312]	@ (801045c <LoRaMacInitialization+0x384>)
 8010322:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010328:	b2da      	uxtb	r2, r3
 801032a:	4b4c      	ldr	r3, [pc, #304]	@ (801045c <LoRaMacInitialization+0x384>)
 801032c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010330:	231e      	movs	r3, #30
 8010332:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010336:	4b49      	ldr	r3, [pc, #292]	@ (801045c <LoRaMacInitialization+0x384>)
 8010338:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801033c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010340:	4611      	mov	r1, r2
 8010342:	4618      	mov	r0, r3
 8010344:	f003 faf8 	bl	8013938 <RegionGetPhyParam>
 8010348:	4603      	mov	r3, r0
 801034a:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 801034c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801034e:	b2da      	uxtb	r2, r3
 8010350:	4b42      	ldr	r3, [pc, #264]	@ (801045c <LoRaMacInitialization+0x384>)
 8010352:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010356:	231f      	movs	r3, #31
 8010358:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801035c:	4b3f      	ldr	r3, [pc, #252]	@ (801045c <LoRaMacInitialization+0x384>)
 801035e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010362:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010366:	4611      	mov	r1, r2
 8010368:	4618      	mov	r0, r3
 801036a:	f003 fae5 	bl	8013938 <RegionGetPhyParam>
 801036e:	4603      	mov	r3, r0
 8010370:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010374:	b2da      	uxtb	r2, r3
 8010376:	4b39      	ldr	r3, [pc, #228]	@ (801045c <LoRaMacInitialization+0x384>)
 8010378:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 801037c:	2320      	movs	r3, #32
 801037e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010382:	4b36      	ldr	r3, [pc, #216]	@ (801045c <LoRaMacInitialization+0x384>)
 8010384:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010388:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801038c:	4611      	mov	r1, r2
 801038e:	4618      	mov	r0, r3
 8010390:	f003 fad2 	bl	8013938 <RegionGetPhyParam>
 8010394:	4603      	mov	r3, r0
 8010396:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801039a:	4a30      	ldr	r2, [pc, #192]	@ (801045c <LoRaMacInitialization+0x384>)
 801039c:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80103a0:	2321      	movs	r3, #33	@ 0x21
 80103a2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80103a6:	4b2d      	ldr	r3, [pc, #180]	@ (801045c <LoRaMacInitialization+0x384>)
 80103a8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80103ac:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80103b0:	4611      	mov	r1, r2
 80103b2:	4618      	mov	r0, r3
 80103b4:	f003 fac0 	bl	8013938 <RegionGetPhyParam>
 80103b8:	4603      	mov	r3, r0
 80103ba:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80103bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103be:	4a27      	ldr	r2, [pc, #156]	@ (801045c <LoRaMacInitialization+0x384>)
 80103c0:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80103c4:	230b      	movs	r3, #11
 80103c6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80103ca:	4b24      	ldr	r3, [pc, #144]	@ (801045c <LoRaMacInitialization+0x384>)
 80103cc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80103d0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80103d4:	4611      	mov	r1, r2
 80103d6:	4618      	mov	r0, r3
 80103d8:	f003 faae 	bl	8013938 <RegionGetPhyParam>
 80103dc:	4603      	mov	r3, r0
 80103de:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 80103e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103e2:	b29a      	uxth	r2, r3
 80103e4:	4b1d      	ldr	r3, [pc, #116]	@ (801045c <LoRaMacInitialization+0x384>)
 80103e6:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80103ea:	230c      	movs	r3, #12
 80103ec:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80103f0:	4b1a      	ldr	r3, [pc, #104]	@ (801045c <LoRaMacInitialization+0x384>)
 80103f2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80103f6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80103fa:	4611      	mov	r1, r2
 80103fc:	4618      	mov	r0, r3
 80103fe:	f003 fa9b 	bl	8013938 <RegionGetPhyParam>
 8010402:	4603      	mov	r3, r0
 8010404:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8010406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010408:	b29a      	uxth	r2, r3
 801040a:	4b14      	ldr	r3, [pc, #80]	@ (801045c <LoRaMacInitialization+0x384>)
 801040c:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010410:	4b12      	ldr	r3, [pc, #72]	@ (801045c <LoRaMacInitialization+0x384>)
 8010412:	2201      	movs	r2, #1
 8010414:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010418:	4b10      	ldr	r3, [pc, #64]	@ (801045c <LoRaMacInitialization+0x384>)
 801041a:	220a      	movs	r2, #10
 801041c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010420:	4b0e      	ldr	r3, [pc, #56]	@ (801045c <LoRaMacInitialization+0x384>)
 8010422:	2206      	movs	r2, #6
 8010424:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010428:	4b0c      	ldr	r3, [pc, #48]	@ (801045c <LoRaMacInitialization+0x384>)
 801042a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801042e:	4a0b      	ldr	r2, [pc, #44]	@ (801045c <LoRaMacInitialization+0x384>)
 8010430:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010432:	4b0a      	ldr	r3, [pc, #40]	@ (801045c <LoRaMacInitialization+0x384>)
 8010434:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8010438:	4b08      	ldr	r3, [pc, #32]	@ (801045c <LoRaMacInitialization+0x384>)
 801043a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 801043e:	4b07      	ldr	r3, [pc, #28]	@ (801045c <LoRaMacInitialization+0x384>)
 8010440:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010444:	4a05      	ldr	r2, [pc, #20]	@ (801045c <LoRaMacInitialization+0x384>)
 8010446:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010448:	4b04      	ldr	r3, [pc, #16]	@ (801045c <LoRaMacInitialization+0x384>)
 801044a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801044e:	4a03      	ldr	r2, [pc, #12]	@ (801045c <LoRaMacInitialization+0x384>)
 8010450:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010452:	4b02      	ldr	r3, [pc, #8]	@ (801045c <LoRaMacInitialization+0x384>)
 8010454:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010458:	e006      	b.n	8010468 <LoRaMacInitialization+0x390>
 801045a:	bf00      	nop
 801045c:	20000a70 	.word	0x20000a70
 8010460:	20000568 	.word	0x20000568
 8010464:	01000300 	.word	0x01000300
 8010468:	4a5f      	ldr	r2, [pc, #380]	@ (80105e8 <LoRaMacInitialization+0x510>)
 801046a:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 801046c:	4b5e      	ldr	r3, [pc, #376]	@ (80105e8 <LoRaMacInitialization+0x510>)
 801046e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010472:	4a5d      	ldr	r2, [pc, #372]	@ (80105e8 <LoRaMacInitialization+0x510>)
 8010474:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010476:	4b5c      	ldr	r3, [pc, #368]	@ (80105e8 <LoRaMacInitialization+0x510>)
 8010478:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801047c:	4a5a      	ldr	r2, [pc, #360]	@ (80105e8 <LoRaMacInitialization+0x510>)
 801047e:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010480:	4b59      	ldr	r3, [pc, #356]	@ (80105e8 <LoRaMacInitialization+0x510>)
 8010482:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 8010486:	4b58      	ldr	r3, [pc, #352]	@ (80105e8 <LoRaMacInitialization+0x510>)
 8010488:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 801048c:	2300      	movs	r3, #0
 801048e:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010492:	4b56      	ldr	r3, [pc, #344]	@ (80105ec <LoRaMacInitialization+0x514>)
 8010494:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010496:	4b56      	ldr	r3, [pc, #344]	@ (80105f0 <LoRaMacInitialization+0x518>)
 8010498:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801049a:	4b53      	ldr	r3, [pc, #332]	@ (80105e8 <LoRaMacInitialization+0x510>)
 801049c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80104a0:	f107 0218 	add.w	r2, r7, #24
 80104a4:	4611      	mov	r1, r2
 80104a6:	4618      	mov	r0, r3
 80104a8:	f003 fa7d 	bl	80139a6 <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80104ac:	4a51      	ldr	r2, [pc, #324]	@ (80105f4 <LoRaMacInitialization+0x51c>)
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 80104b4:	2000      	movs	r0, #0
 80104b6:	f7ff f8b7 	bl	800f628 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80104ba:	4b4b      	ldr	r3, [pc, #300]	@ (80105e8 <LoRaMacInitialization+0x510>)
 80104bc:	2201      	movs	r2, #1
 80104be:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 80104c2:	4a4c      	ldr	r2, [pc, #304]	@ (80105f4 <LoRaMacInitialization+0x51c>)
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 80104ca:	4b4a      	ldr	r3, [pc, #296]	@ (80105f4 <LoRaMacInitialization+0x51c>)
 80104cc:	2200      	movs	r2, #0
 80104ce:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 80104d2:	4b48      	ldr	r3, [pc, #288]	@ (80105f4 <LoRaMacInitialization+0x51c>)
 80104d4:	2201      	movs	r2, #1
 80104d6:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80104da:	4b43      	ldr	r3, [pc, #268]	@ (80105e8 <LoRaMacInitialization+0x510>)
 80104dc:	2200      	movs	r2, #0
 80104de:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80104e0:	4b41      	ldr	r3, [pc, #260]	@ (80105e8 <LoRaMacInitialization+0x510>)
 80104e2:	2200      	movs	r2, #0
 80104e4:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80104e6:	2300      	movs	r3, #0
 80104e8:	9300      	str	r3, [sp, #0]
 80104ea:	4b43      	ldr	r3, [pc, #268]	@ (80105f8 <LoRaMacInitialization+0x520>)
 80104ec:	2200      	movs	r2, #0
 80104ee:	f04f 31ff 	mov.w	r1, #4294967295
 80104f2:	4842      	ldr	r0, [pc, #264]	@ (80105fc <LoRaMacInitialization+0x524>)
 80104f4:	f00b f9e6 	bl	801b8c4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80104f8:	2300      	movs	r3, #0
 80104fa:	9300      	str	r3, [sp, #0]
 80104fc:	4b40      	ldr	r3, [pc, #256]	@ (8010600 <LoRaMacInitialization+0x528>)
 80104fe:	2200      	movs	r2, #0
 8010500:	f04f 31ff 	mov.w	r1, #4294967295
 8010504:	483f      	ldr	r0, [pc, #252]	@ (8010604 <LoRaMacInitialization+0x52c>)
 8010506:	f00b f9dd 	bl	801b8c4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 801050a:	2300      	movs	r3, #0
 801050c:	9300      	str	r3, [sp, #0]
 801050e:	4b3e      	ldr	r3, [pc, #248]	@ (8010608 <LoRaMacInitialization+0x530>)
 8010510:	2200      	movs	r2, #0
 8010512:	f04f 31ff 	mov.w	r1, #4294967295
 8010516:	483d      	ldr	r0, [pc, #244]	@ (801060c <LoRaMacInitialization+0x534>)
 8010518:	f00b f9d4 	bl	801b8c4 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 801051c:	2300      	movs	r3, #0
 801051e:	9300      	str	r3, [sp, #0]
 8010520:	4b3b      	ldr	r3, [pc, #236]	@ (8010610 <LoRaMacInitialization+0x538>)
 8010522:	2200      	movs	r2, #0
 8010524:	f04f 31ff 	mov.w	r1, #4294967295
 8010528:	483a      	ldr	r0, [pc, #232]	@ (8010614 <LoRaMacInitialization+0x53c>)
 801052a:	f00b f9cb 	bl	801b8c4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 801052e:	4c2e      	ldr	r4, [pc, #184]	@ (80105e8 <LoRaMacInitialization+0x510>)
 8010530:	463b      	mov	r3, r7
 8010532:	4618      	mov	r0, r3
 8010534:	f00a fd3c 	bl	801afb0 <SysTimeGetMcuTime>
 8010538:	f504 7390 	add.w	r3, r4, #288	@ 0x120
 801053c:	463a      	mov	r2, r7
 801053e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010542:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8010546:	4b2b      	ldr	r3, [pc, #172]	@ (80105f4 <LoRaMacInitialization+0x51c>)
 8010548:	4a33      	ldr	r2, [pc, #204]	@ (8010618 <LoRaMacInitialization+0x540>)
 801054a:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 801054e:	4b29      	ldr	r3, [pc, #164]	@ (80105f4 <LoRaMacInitialization+0x51c>)
 8010550:	4a32      	ldr	r2, [pc, #200]	@ (801061c <LoRaMacInitialization+0x544>)
 8010552:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8010556:	4b27      	ldr	r3, [pc, #156]	@ (80105f4 <LoRaMacInitialization+0x51c>)
 8010558:	4a31      	ldr	r2, [pc, #196]	@ (8010620 <LoRaMacInitialization+0x548>)
 801055a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 801055e:	4b25      	ldr	r3, [pc, #148]	@ (80105f4 <LoRaMacInitialization+0x51c>)
 8010560:	4a30      	ldr	r2, [pc, #192]	@ (8010624 <LoRaMacInitialization+0x54c>)
 8010562:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8010566:	4b23      	ldr	r3, [pc, #140]	@ (80105f4 <LoRaMacInitialization+0x51c>)
 8010568:	4a2f      	ldr	r2, [pc, #188]	@ (8010628 <LoRaMacInitialization+0x550>)
 801056a:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 801056e:	4b2f      	ldr	r3, [pc, #188]	@ (801062c <LoRaMacInitialization+0x554>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	482f      	ldr	r0, [pc, #188]	@ (8010630 <LoRaMacInitialization+0x558>)
 8010574:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8010576:	482f      	ldr	r0, [pc, #188]	@ (8010634 <LoRaMacInitialization+0x55c>)
 8010578:	f7fa fe30 	bl	800b1dc <SecureElementInit>
 801057c:	4603      	mov	r3, r0
 801057e:	2b00      	cmp	r3, #0
 8010580:	d001      	beq.n	8010586 <LoRaMacInitialization+0x4ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010582:	2311      	movs	r3, #17
 8010584:	e02b      	b.n	80105de <LoRaMacInitialization+0x506>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8010586:	4818      	ldr	r0, [pc, #96]	@ (80105e8 <LoRaMacInitialization+0x510>)
 8010588:	f002 fae8 	bl	8012b5c <LoRaMacCryptoInit>
 801058c:	4603      	mov	r3, r0
 801058e:	2b00      	cmp	r3, #0
 8010590:	d001      	beq.n	8010596 <LoRaMacInitialization+0x4be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010592:	2311      	movs	r3, #17
 8010594:	e023      	b.n	80105de <LoRaMacInitialization+0x506>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8010596:	f001 fbe3 	bl	8011d60 <LoRaMacCommandsInit>
 801059a:	4603      	mov	r3, r0
 801059c:	2b00      	cmp	r3, #0
 801059e:	d001      	beq.n	80105a4 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80105a0:	2313      	movs	r3, #19
 80105a2:	e01c      	b.n	80105de <LoRaMacInitialization+0x506>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80105a4:	4824      	ldr	r0, [pc, #144]	@ (8010638 <LoRaMacInitialization+0x560>)
 80105a6:	f002 fba3 	bl	8012cf0 <LoRaMacCryptoSetMulticastReference>
 80105aa:	4603      	mov	r3, r0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d001      	beq.n	80105b4 <LoRaMacInitialization+0x4dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80105b0:	2311      	movs	r3, #17
 80105b2:	e014      	b.n	80105de <LoRaMacInitialization+0x506>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80105b4:	4b1d      	ldr	r3, [pc, #116]	@ (801062c <LoRaMacInitialization+0x554>)
 80105b6:	695b      	ldr	r3, [r3, #20]
 80105b8:	4798      	blx	r3
 80105ba:	4603      	mov	r3, r0
 80105bc:	4618      	mov	r0, r3
 80105be:	f007 f869 	bl	8017694 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80105c2:	4b1a      	ldr	r3, [pc, #104]	@ (801062c <LoRaMacInitialization+0x554>)
 80105c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80105c6:	4a08      	ldr	r2, [pc, #32]	@ (80105e8 <LoRaMacInitialization+0x510>)
 80105c8:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 80105cc:	4610      	mov	r0, r2
 80105ce:	4798      	blx	r3
    Radio.Sleep( );
 80105d0:	4b16      	ldr	r3, [pc, #88]	@ (801062c <LoRaMacInitialization+0x554>)
 80105d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105d4:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80105d6:	2001      	movs	r0, #1
 80105d8:	f7fd fb32 	bl	800dc40 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80105dc:	2300      	movs	r3, #0
}
 80105de:	4618      	mov	r0, r3
 80105e0:	3734      	adds	r7, #52	@ 0x34
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd90      	pop	{r4, r7, pc}
 80105e6:	bf00      	nop
 80105e8:	20000a70 	.word	0x20000a70
 80105ec:	20000c90 	.word	0x20000c90
 80105f0:	20000d34 	.word	0x20000d34
 80105f4:	20000568 	.word	0x20000568
 80105f8:	0800e181 	.word	0x0800e181
 80105fc:	200008d0 	.word	0x200008d0
 8010600:	0800e1f5 	.word	0x0800e1f5
 8010604:	200008e8 	.word	0x200008e8
 8010608:	0800e261 	.word	0x0800e261
 801060c:	20000900 	.word	0x20000900
 8010610:	0800e2d5 	.word	0x0800e2d5
 8010614:	2000095c 	.word	0x2000095c
 8010618:	0800cd41 	.word	0x0800cd41
 801061c:	0800cd9d 	.word	0x0800cd9d
 8010620:	0800ce35 	.word	0x0800ce35
 8010624:	0800ce09 	.word	0x0800ce09
 8010628:	0800ce51 	.word	0x0800ce51
 801062c:	0801d86c 	.word	0x0801d86c
 8010630:	200008b4 	.word	0x200008b4
 8010634:	20000bb8 	.word	0x20000bb8
 8010638:	20000b58 	.word	0x20000b58

0801063c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 801063c:	b580      	push	{r7, lr}
 801063e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8010640:	4b04      	ldr	r3, [pc, #16]	@ (8010654 <LoRaMacStart+0x18>)
 8010642:	2200      	movs	r2, #0
 8010644:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 8010648:	f7fc fc18 	bl	800ce7c <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 801064c:	2300      	movs	r3, #0
}
 801064e:	4618      	mov	r0, r3
 8010650:	bd80      	pop	{r7, pc}
 8010652:	bf00      	nop
 8010654:	20000568 	.word	0x20000568

08010658 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8010658:	b580      	push	{r7, lr}
 801065a:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 801065c:	f7fd fac4 	bl	800dbe8 <LoRaMacIsBusy>
 8010660:	4603      	mov	r3, r0
 8010662:	f083 0301 	eor.w	r3, r3, #1
 8010666:	b2db      	uxtb	r3, r3
 8010668:	2b00      	cmp	r3, #0
 801066a:	d00d      	beq.n	8010688 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 801066c:	4b0b      	ldr	r3, [pc, #44]	@ (801069c <LoRaMacStop+0x44>)
 801066e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010672:	2b02      	cmp	r3, #2
 8010674:	d102      	bne.n	801067c <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8010676:	4b0a      	ldr	r3, [pc, #40]	@ (80106a0 <LoRaMacStop+0x48>)
 8010678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801067a:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 801067c:	4b09      	ldr	r3, [pc, #36]	@ (80106a4 <LoRaMacStop+0x4c>)
 801067e:	2201      	movs	r2, #1
 8010680:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 8010684:	2300      	movs	r3, #0
 8010686:	e007      	b.n	8010698 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8010688:	4b06      	ldr	r3, [pc, #24]	@ (80106a4 <LoRaMacStop+0x4c>)
 801068a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801068e:	2b01      	cmp	r3, #1
 8010690:	d101      	bne.n	8010696 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8010692:	2300      	movs	r3, #0
 8010694:	e000      	b.n	8010698 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8010696:	2301      	movs	r3, #1
}
 8010698:	4618      	mov	r0, r3
 801069a:	bd80      	pop	{r7, pc}
 801069c:	20000a70 	.word	0x20000a70
 80106a0:	0801d86c 	.word	0x0801d86c
 80106a4:	20000568 	.word	0x20000568

080106a8 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80106ac:	480d      	ldr	r0, [pc, #52]	@ (80106e4 <LoRaMacHalt+0x3c>)
 80106ae:	f00b f9ad 	bl	801ba0c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80106b2:	480d      	ldr	r0, [pc, #52]	@ (80106e8 <LoRaMacHalt+0x40>)
 80106b4:	f00b f9aa 	bl	801ba0c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80106b8:	480c      	ldr	r0, [pc, #48]	@ (80106ec <LoRaMacHalt+0x44>)
 80106ba:	f00b f9a7 	bl	801ba0c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 80106be:	480c      	ldr	r0, [pc, #48]	@ (80106f0 <LoRaMacHalt+0x48>)
 80106c0:	f00b f9a4 	bl	801ba0c <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80106c4:	f001 f9cb 	bl	8011a5e <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80106c8:	4b0a      	ldr	r3, [pc, #40]	@ (80106f4 <LoRaMacHalt+0x4c>)
 80106ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106cc:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80106ce:	4b0a      	ldr	r3, [pc, #40]	@ (80106f8 <LoRaMacHalt+0x50>)
 80106d0:	2200      	movs	r2, #0
 80106d2:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 80106d6:	4b08      	ldr	r3, [pc, #32]	@ (80106f8 <LoRaMacHalt+0x50>)
 80106d8:	2201      	movs	r2, #1
 80106da:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 80106de:	2300      	movs	r3, #0
}
 80106e0:	4618      	mov	r0, r3
 80106e2:	bd80      	pop	{r7, pc}
 80106e4:	200008d0 	.word	0x200008d0
 80106e8:	200008e8 	.word	0x200008e8
 80106ec:	20000900 	.word	0x20000900
 80106f0:	2000095c 	.word	0x2000095c
 80106f4:	0801d86c 	.word	0x0801d86c
 80106f8:	20000568 	.word	0x20000568

080106fc <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b08a      	sub	sp, #40	@ 0x28
 8010700:	af00      	add	r7, sp, #0
 8010702:	4603      	mov	r3, r0
 8010704:	6039      	str	r1, [r7, #0]
 8010706:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010708:	4b3e      	ldr	r3, [pc, #248]	@ (8010804 <LoRaMacQueryTxPossible+0x108>)
 801070a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801070c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801070e:	4b3d      	ldr	r3, [pc, #244]	@ (8010804 <LoRaMacQueryTxPossible+0x108>)
 8010710:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 8010714:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010716:	4b3b      	ldr	r3, [pc, #236]	@ (8010804 <LoRaMacQueryTxPossible+0x108>)
 8010718:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 801071c:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 801071e:	2300      	movs	r3, #0
 8010720:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d101      	bne.n	801072c <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010728:	2303      	movs	r3, #3
 801072a:	e066      	b.n	80107fa <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 801072c:	4b35      	ldr	r3, [pc, #212]	@ (8010804 <LoRaMacQueryTxPossible+0x108>)
 801072e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8010732:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8010734:	2300      	movs	r3, #0
 8010736:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010738:	4b32      	ldr	r3, [pc, #200]	@ (8010804 <LoRaMacQueryTxPossible+0x108>)
 801073a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801073e:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010740:	4b30      	ldr	r3, [pc, #192]	@ (8010804 <LoRaMacQueryTxPossible+0x108>)
 8010742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010744:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8010746:	4b2f      	ldr	r3, [pc, #188]	@ (8010804 <LoRaMacQueryTxPossible+0x108>)
 8010748:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801074c:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 801074e:	4b2d      	ldr	r3, [pc, #180]	@ (8010804 <LoRaMacQueryTxPossible+0x108>)
 8010750:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8010754:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010756:	4b2b      	ldr	r3, [pc, #172]	@ (8010804 <LoRaMacQueryTxPossible+0x108>)
 8010758:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801075c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010760:	4b28      	ldr	r3, [pc, #160]	@ (8010804 <LoRaMacQueryTxPossible+0x108>)
 8010762:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010766:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801076a:	4b26      	ldr	r3, [pc, #152]	@ (8010804 <LoRaMacQueryTxPossible+0x108>)
 801076c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010770:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010774:	4b23      	ldr	r3, [pc, #140]	@ (8010804 <LoRaMacQueryTxPossible+0x108>)
 8010776:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801077a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 801077e:	f107 0310 	add.w	r3, r7, #16
 8010782:	f107 020e 	add.w	r2, r7, #14
 8010786:	f107 010f 	add.w	r1, r7, #15
 801078a:	f107 0014 	add.w	r0, r7, #20
 801078e:	f001 f8d1 	bl	8011934 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010796:	4618      	mov	r0, r3
 8010798:	f7fd feee 	bl	800e578 <GetMaxAppPayloadWithoutFOptsLength>
 801079c:	4603      	mov	r3, r0
 801079e:	461a      	mov	r2, r3
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80107a4:	f107 0308 	add.w	r3, r7, #8
 80107a8:	4618      	mov	r0, r3
 80107aa:	f001 fbdf 	bl	8011f6c <LoRaMacCommandsGetSizeSerializedCmds>
 80107ae:	4603      	mov	r3, r0
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d001      	beq.n	80107b8 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80107b4:	2313      	movs	r3, #19
 80107b6:	e020      	b.n	80107fa <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	2b0f      	cmp	r3, #15
 80107bc:	d819      	bhi.n	80107f2 <LoRaMacQueryTxPossible+0xf6>
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	785b      	ldrb	r3, [r3, #1]
 80107c2:	461a      	mov	r2, r3
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d313      	bcc.n	80107f2 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	785a      	ldrb	r2, [r3, #1]
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	b2db      	uxtb	r3, r3
 80107d2:	1ad3      	subs	r3, r2, r3
 80107d4:	b2da      	uxtb	r2, r3
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	785b      	ldrb	r3, [r3, #1]
 80107de:	4619      	mov	r1, r3
 80107e0:	79fa      	ldrb	r2, [r7, #7]
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	4413      	add	r3, r2
 80107e6:	4299      	cmp	r1, r3
 80107e8:	d301      	bcc.n	80107ee <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 80107ea:	2300      	movs	r3, #0
 80107ec:	e005      	b.n	80107fa <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80107ee:	2308      	movs	r3, #8
 80107f0:	e003      	b.n	80107fa <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	2200      	movs	r2, #0
 80107f6:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80107f8:	2308      	movs	r3, #8
    }
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3728      	adds	r7, #40	@ 0x28
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	20000a70 	.word	0x20000a70

08010808 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8010808:	b590      	push	{r4, r7, lr}
 801080a:	b087      	sub	sp, #28
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010810:	2300      	movs	r3, #0
 8010812:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d101      	bne.n	801081e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801081a:	2303      	movs	r3, #3
 801081c:	e1a4      	b.n	8010b68 <LoRaMacMibGetRequestConfirm+0x360>
    }

    switch( mibGet->Type )
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	2b3f      	cmp	r3, #63	@ 0x3f
 8010824:	f200 8199 	bhi.w	8010b5a <LoRaMacMibGetRequestConfirm+0x352>
 8010828:	a201      	add	r2, pc, #4	@ (adr r2, 8010830 <LoRaMacMibGetRequestConfirm+0x28>)
 801082a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801082e:	bf00      	nop
 8010830:	08010931 	.word	0x08010931
 8010834:	0801093d 	.word	0x0801093d
 8010838:	08010949 	.word	0x08010949
 801083c:	08010955 	.word	0x08010955
 8010840:	08010961 	.word	0x08010961
 8010844:	0801096d 	.word	0x0801096d
 8010848:	08010979 	.word	0x08010979
 801084c:	08010b5b 	.word	0x08010b5b
 8010850:	08010b5b 	.word	0x08010b5b
 8010854:	08010b5b 	.word	0x08010b5b
 8010858:	08010b5b 	.word	0x08010b5b
 801085c:	08010b5b 	.word	0x08010b5b
 8010860:	08010b5b 	.word	0x08010b5b
 8010864:	08010b5b 	.word	0x08010b5b
 8010868:	08010b5b 	.word	0x08010b5b
 801086c:	0801098d 	.word	0x0801098d
 8010870:	08010999 	.word	0x08010999
 8010874:	080109a5 	.word	0x080109a5
 8010878:	080109c7 	.word	0x080109c7
 801087c:	080109d9 	.word	0x080109d9
 8010880:	080109eb 	.word	0x080109eb
 8010884:	080109fd 	.word	0x080109fd
 8010888:	08010a31 	.word	0x08010a31
 801088c:	08010a0f 	.word	0x08010a0f
 8010890:	08010a53 	.word	0x08010a53
 8010894:	08010a5f 	.word	0x08010a5f
 8010898:	08010a69 	.word	0x08010a69
 801089c:	08010a73 	.word	0x08010a73
 80108a0:	08010a7d 	.word	0x08010a7d
 80108a4:	08010a87 	.word	0x08010a87
 80108a8:	08010a91 	.word	0x08010a91
 80108ac:	08010a9d 	.word	0x08010a9d
 80108b0:	08010ab5 	.word	0x08010ab5
 80108b4:	08010aa9 	.word	0x08010aa9
 80108b8:	08010ac1 	.word	0x08010ac1
 80108bc:	08010acb 	.word	0x08010acb
 80108c0:	08010ad7 	.word	0x08010ad7
 80108c4:	08010af3 	.word	0x08010af3
 80108c8:	08010ae3 	.word	0x08010ae3
 80108cc:	08010aeb 	.word	0x08010aeb
 80108d0:	08010b5b 	.word	0x08010b5b
 80108d4:	08010aff 	.word	0x08010aff
 80108d8:	08010b5b 	.word	0x08010b5b
 80108dc:	08010b5b 	.word	0x08010b5b
 80108e0:	08010b5b 	.word	0x08010b5b
 80108e4:	08010b5b 	.word	0x08010b5b
 80108e8:	08010b5b 	.word	0x08010b5b
 80108ec:	08010b5b 	.word	0x08010b5b
 80108f0:	08010b5b 	.word	0x08010b5b
 80108f4:	08010b5b 	.word	0x08010b5b
 80108f8:	08010b5b 	.word	0x08010b5b
 80108fc:	08010b5b 	.word	0x08010b5b
 8010900:	08010b5b 	.word	0x08010b5b
 8010904:	08010b5b 	.word	0x08010b5b
 8010908:	08010b5b 	.word	0x08010b5b
 801090c:	08010b5b 	.word	0x08010b5b
 8010910:	08010b5b 	.word	0x08010b5b
 8010914:	08010b13 	.word	0x08010b13
 8010918:	08010b1f 	.word	0x08010b1f
 801091c:	08010b2b 	.word	0x08010b2b
 8010920:	08010b37 	.word	0x08010b37
 8010924:	08010b43 	.word	0x08010b43
 8010928:	08010b4f 	.word	0x08010b4f
 801092c:	08010b55 	.word	0x08010b55
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8010930:	4b8f      	ldr	r3, [pc, #572]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010932:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	711a      	strb	r2, [r3, #4]
            break;
 801093a:	e114      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801093c:	4b8c      	ldr	r3, [pc, #560]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 801093e:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	711a      	strb	r2, [r3, #4]
            break;
 8010946:	e10e      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	4618      	mov	r0, r3
 801094e:	f7fa ff1b 	bl	800b788 <SecureElementGetDevEui>
            break;
 8010952:	e108      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	685b      	ldr	r3, [r3, #4]
 8010958:	4618      	mov	r0, r3
 801095a:	f7fa ff45 	bl	800b7e8 <SecureElementGetJoinEui>
            break;
 801095e:	e102      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8010960:	4b83      	ldr	r3, [pc, #524]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010962:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	711a      	strb	r2, [r3, #4]
            break;
 801096a:	e0fc      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 801096c:	4b80      	ldr	r3, [pc, #512]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 801096e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	605a      	str	r2, [r3, #4]
            break;
 8010976:	e0f6      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8010978:	4b7d      	ldr	r3, [pc, #500]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 801097a:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	3304      	adds	r3, #4
 8010982:	4619      	mov	r1, r3
 8010984:	4610      	mov	r0, r2
 8010986:	f7fa ff61 	bl	800b84c <SecureElementGetDevAddr>
            break;
 801098a:	e0ec      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 801098c:	4b78      	ldr	r3, [pc, #480]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 801098e:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	711a      	strb	r2, [r3, #4]
            break;
 8010996:	e0e6      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010998:	4b75      	ldr	r3, [pc, #468]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 801099a:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	711a      	strb	r2, [r3, #4]
            break;
 80109a2:	e0e0      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80109a4:	231d      	movs	r3, #29
 80109a6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109a8:	4b71      	ldr	r3, [pc, #452]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 80109aa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80109ae:	f107 0210 	add.w	r2, r7, #16
 80109b2:	4611      	mov	r1, r2
 80109b4:	4618      	mov	r0, r3
 80109b6:	f002 ffbf 	bl	8013938 <RegionGetPhyParam>
 80109ba:	4603      	mov	r3, r0
 80109bc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80109be:	68fa      	ldr	r2, [r7, #12]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	605a      	str	r2, [r3, #4]
            break;
 80109c4:	e0cf      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	4a69      	ldr	r2, [pc, #420]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 80109ca:	3304      	adds	r3, #4
 80109cc:	326c      	adds	r2, #108	@ 0x6c
 80109ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80109d2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80109d6:	e0c6      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	4a65      	ldr	r2, [pc, #404]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 80109dc:	3304      	adds	r3, #4
 80109de:	32b4      	adds	r2, #180	@ 0xb4
 80109e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80109e4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80109e8:	e0bd      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	4a60      	ldr	r2, [pc, #384]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 80109ee:	3304      	adds	r3, #4
 80109f0:	3274      	adds	r2, #116	@ 0x74
 80109f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80109f6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80109fa:	e0b4      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	4a5c      	ldr	r2, [pc, #368]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a00:	3304      	adds	r3, #4
 8010a02:	32bc      	adds	r2, #188	@ 0xbc
 8010a04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a08:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010a0c:	e0ab      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8010a0e:	231b      	movs	r3, #27
 8010a10:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a12:	4b57      	ldr	r3, [pc, #348]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a14:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010a18:	f107 0210 	add.w	r2, r7, #16
 8010a1c:	4611      	mov	r1, r2
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f002 ff8a 	bl	8013938 <RegionGetPhyParam>
 8010a24:	4603      	mov	r3, r0
 8010a26:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8010a28:	68fa      	ldr	r2, [r7, #12]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	605a      	str	r2, [r3, #4]
            break;
 8010a2e:	e09a      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8010a30:	231a      	movs	r3, #26
 8010a32:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a34:	4b4e      	ldr	r3, [pc, #312]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a36:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010a3a:	f107 0210 	add.w	r2, r7, #16
 8010a3e:	4611      	mov	r1, r2
 8010a40:	4618      	mov	r0, r3
 8010a42:	f002 ff79 	bl	8013938 <RegionGetPhyParam>
 8010a46:	4603      	mov	r3, r0
 8010a48:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8010a4a:	68fa      	ldr	r2, [r7, #12]
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	605a      	str	r2, [r3, #4]
            break;
 8010a50:	e089      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010a52:	4b47      	ldr	r3, [pc, #284]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a54:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	711a      	strb	r2, [r3, #4]
            break;
 8010a5c:	e083      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8010a5e:	4b44      	ldr	r3, [pc, #272]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	605a      	str	r2, [r3, #4]
            break;
 8010a66:	e07e      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8010a68:	4b41      	ldr	r3, [pc, #260]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a6a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	605a      	str	r2, [r3, #4]
            break;
 8010a70:	e079      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8010a72:	4b3f      	ldr	r3, [pc, #252]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	605a      	str	r2, [r3, #4]
            break;
 8010a7a:	e074      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8010a7c:	4b3c      	ldr	r3, [pc, #240]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a7e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	605a      	str	r2, [r3, #4]
            break;
 8010a84:	e06f      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8010a86:	4b3a      	ldr	r3, [pc, #232]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a88:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	605a      	str	r2, [r3, #4]
            break;
 8010a8e:	e06a      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010a90:	4b37      	ldr	r3, [pc, #220]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a92:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	711a      	strb	r2, [r3, #4]
            break;
 8010a9a:	e064      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8010a9c:	4b34      	ldr	r3, [pc, #208]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a9e:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	711a      	strb	r2, [r3, #4]
            break;
 8010aa6:	e05e      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010aa8:	4b31      	ldr	r3, [pc, #196]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010aaa:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	711a      	strb	r2, [r3, #4]
            break;
 8010ab2:	e058      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010ab6:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	711a      	strb	r2, [r3, #4]
            break;
 8010abe:	e052      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8010ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010ac2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	605a      	str	r2, [r3, #4]
            break;
 8010ac8:	e04d      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8010aca:	4b29      	ldr	r3, [pc, #164]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010acc:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	711a      	strb	r2, [r3, #4]
            break;
 8010ad4:	e047      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010ad6:	4b26      	ldr	r3, [pc, #152]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010ad8:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	605a      	str	r2, [r3, #4]
            break;
 8010ae0:	e041      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	4a22      	ldr	r2, [pc, #136]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010ae6:	605a      	str	r2, [r3, #4]
            break;
 8010ae8:	e03d      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2200      	movs	r2, #0
 8010aee:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8010af0:	e039      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010af2:	4b1f      	ldr	r3, [pc, #124]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010af4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	605a      	str	r2, [r3, #4]
            break;
 8010afc:	e033      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	4a1b      	ldr	r2, [pc, #108]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b02:	f8d2 2128 	ldr.w	r2, [r2, #296]	@ 0x128
 8010b06:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8010b08:	687c      	ldr	r4, [r7, #4]
 8010b0a:	f003 f939 	bl	8013d80 <RegionGetVersion>
 8010b0e:	60a0      	str	r0, [r4, #8]
            break;
 8010b10:	e029      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8010b12:	4b17      	ldr	r3, [pc, #92]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b14:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	605a      	str	r2, [r3, #4]
            break;
 8010b1c:	e023      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8010b1e:	4b14      	ldr	r3, [pc, #80]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b20:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	809a      	strh	r2, [r3, #4]
            break;
 8010b28:	e01d      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8010b2a:	4b11      	ldr	r3, [pc, #68]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b2c:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	809a      	strh	r2, [r3, #4]
            break;
 8010b34:	e017      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8010b36:	4b0e      	ldr	r3, [pc, #56]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b38:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	809a      	strh	r2, [r3, #4]
            break;
 8010b40:	e011      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8010b42:	4b0b      	ldr	r3, [pc, #44]	@ (8010b70 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b44:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	809a      	strh	r2, [r3, #4]
            break;
 8010b4c:	e00b      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8010b4e:	2318      	movs	r3, #24
 8010b50:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8010b52:	e008      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8010b54:	2318      	movs	r3, #24
 8010b56:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8010b58:	e005      	b.n	8010b66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f000 ff96 	bl	8011a8c <LoRaMacClassBMibGetRequestConfirm>
 8010b60:	4603      	mov	r3, r0
 8010b62:	75fb      	strb	r3, [r7, #23]
            break;
 8010b64:	bf00      	nop
        }
    }
    return status;
 8010b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	371c      	adds	r7, #28
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd90      	pop	{r4, r7, pc}
 8010b70:	20000a70 	.word	0x20000a70

08010b74 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b086      	sub	sp, #24
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d101      	bne.n	8010b8a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010b86:	2303      	movs	r3, #3
 8010b88:	e382      	b.n	8011290 <LoRaMacMibSetRequestConfirm+0x71c>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8010b8a:	4bbb      	ldr	r3, [pc, #748]	@ (8010e78 <LoRaMacMibSetRequestConfirm+0x304>)
 8010b8c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010b90:	f003 0302 	and.w	r3, r3, #2
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d001      	beq.n	8010b9c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8010b98:	2301      	movs	r3, #1
 8010b9a:	e379      	b.n	8011290 <LoRaMacMibSetRequestConfirm+0x71c>
    }

    switch( mibSet->Type )
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	781b      	ldrb	r3, [r3, #0]
 8010ba0:	2b3f      	cmp	r3, #63	@ 0x3f
 8010ba2:	f200 8353 	bhi.w	801124c <LoRaMacMibSetRequestConfirm+0x6d8>
 8010ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8010bac <LoRaMacMibSetRequestConfirm+0x38>)
 8010ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bac:	08010cad 	.word	0x08010cad
 8010bb0:	08010cbd 	.word	0x08010cbd
 8010bb4:	08010cd7 	.word	0x08010cd7
 8010bb8:	08010cef 	.word	0x08010cef
 8010bbc:	08010d07 	.word	0x08010d07
 8010bc0:	08010d13 	.word	0x08010d13
 8010bc4:	08010d1f 	.word	0x08010d1f
 8010bc8:	08010d49 	.word	0x08010d49
 8010bcc:	08010d6f 	.word	0x08010d6f
 8010bd0:	08010d95 	.word	0x08010d95
 8010bd4:	08010dbb 	.word	0x08010dbb
 8010bd8:	08010de1 	.word	0x08010de1
 8010bdc:	08010e07 	.word	0x08010e07
 8010be0:	08010e2d 	.word	0x08010e2d
 8010be4:	08010e53 	.word	0x08010e53
 8010be8:	08010e81 	.word	0x08010e81
 8010bec:	08010ea1 	.word	0x08010ea1
 8010bf0:	0801124d 	.word	0x0801124d
 8010bf4:	08010ead 	.word	0x08010ead
 8010bf8:	08010f1d 	.word	0x08010f1d
 8010bfc:	08010f5d 	.word	0x08010f5d
 8010c00:	08010fbf 	.word	0x08010fbf
 8010c04:	0801102f 	.word	0x0801102f
 8010c08:	08010fff 	.word	0x08010fff
 8010c0c:	0801105f 	.word	0x0801105f
 8010c10:	08011081 	.word	0x08011081
 8010c14:	0801108b 	.word	0x0801108b
 8010c18:	08011095 	.word	0x08011095
 8010c1c:	0801109f 	.word	0x0801109f
 8010c20:	080110a9 	.word	0x080110a9
 8010c24:	080110b3 	.word	0x080110b3
 8010c28:	080110e5 	.word	0x080110e5
 8010c2c:	08011159 	.word	0x08011159
 8010c30:	0801111f 	.word	0x0801111f
 8010c34:	0801118b 	.word	0x0801118b
 8010c38:	080111a1 	.word	0x080111a1
 8010c3c:	080111b9 	.word	0x080111b9
 8010c40:	080111c5 	.word	0x080111c5
 8010c44:	080111d1 	.word	0x080111d1
 8010c48:	0801124d 	.word	0x0801124d
 8010c4c:	080111db 	.word	0x080111db
 8010c50:	0801124d 	.word	0x0801124d
 8010c54:	0801124d 	.word	0x0801124d
 8010c58:	0801124d 	.word	0x0801124d
 8010c5c:	0801124d 	.word	0x0801124d
 8010c60:	0801124d 	.word	0x0801124d
 8010c64:	0801124d 	.word	0x0801124d
 8010c68:	0801124d 	.word	0x0801124d
 8010c6c:	0801124d 	.word	0x0801124d
 8010c70:	0801124d 	.word	0x0801124d
 8010c74:	0801124d 	.word	0x0801124d
 8010c78:	0801124d 	.word	0x0801124d
 8010c7c:	0801124d 	.word	0x0801124d
 8010c80:	0801124d 	.word	0x0801124d
 8010c84:	0801124d 	.word	0x0801124d
 8010c88:	0801124d 	.word	0x0801124d
 8010c8c:	0801124d 	.word	0x0801124d
 8010c90:	08011205 	.word	0x08011205
 8010c94:	08011211 	.word	0x08011211
 8010c98:	0801121d 	.word	0x0801121d
 8010c9c:	08011229 	.word	0x08011229
 8010ca0:	08011235 	.word	0x08011235
 8010ca4:	08011241 	.word	0x08011241
 8010ca8:	08011247 	.word	0x08011247
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	791b      	ldrb	r3, [r3, #4]
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f7fd fb79 	bl	800e3a8 <SwitchClass>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	75fb      	strb	r3, [r7, #23]
            break;
 8010cba:	e2e8      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	791b      	ldrb	r3, [r3, #4]
 8010cc0:	2b02      	cmp	r3, #2
 8010cc2:	d005      	beq.n	8010cd0 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	791a      	ldrb	r2, [r3, #4]
 8010cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8010e7c <LoRaMacMibSetRequestConfirm+0x308>)
 8010cca:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010cce:	e2de      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010cd0:	2303      	movs	r3, #3
 8010cd2:	75fb      	strb	r3, [r7, #23]
            break;
 8010cd4:	e2db      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7fa fd3c 	bl	800b758 <SecureElementSetDevEui>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	f000 82b8 	beq.w	8011258 <LoRaMacMibSetRequestConfirm+0x6e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010ce8:	2303      	movs	r3, #3
 8010cea:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010cec:	e2b4      	b.n	8011258 <LoRaMacMibSetRequestConfirm+0x6e4>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	685b      	ldr	r3, [r3, #4]
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7fa fd60 	bl	800b7b8 <SecureElementSetJoinEui>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	f000 82ae 	beq.w	801125c <LoRaMacMibSetRequestConfirm+0x6e8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d00:	2303      	movs	r3, #3
 8010d02:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010d04:	e2aa      	b.n	801125c <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	791a      	ldrb	r2, [r3, #4]
 8010d0a:	4b5c      	ldr	r3, [pc, #368]	@ (8010e7c <LoRaMacMibSetRequestConfirm+0x308>)
 8010d0c:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 8010d10:	e2bd      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	4a59      	ldr	r2, [pc, #356]	@ (8010e7c <LoRaMacMibSetRequestConfirm+0x308>)
 8010d18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 8010d1c:	e2b7      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8010d1e:	4b57      	ldr	r3, [pc, #348]	@ (8010e7c <LoRaMacMibSetRequestConfirm+0x308>)
 8010d20:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	685b      	ldr	r3, [r3, #4]
 8010d28:	4619      	mov	r1, r3
 8010d2a:	4610      	mov	r0, r2
 8010d2c:	f7fa fd74 	bl	800b818 <SecureElementSetDevAddr>
 8010d30:	4603      	mov	r3, r0
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d002      	beq.n	8010d3c <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d36:	2303      	movs	r3, #3
 8010d38:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8010d3a:	e2a8      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	4a4e      	ldr	r2, [pc, #312]	@ (8010e7c <LoRaMacMibSetRequestConfirm+0x308>)
 8010d42:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 8010d46:	e2a2      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d00b      	beq.n	8010d68 <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	685b      	ldr	r3, [r3, #4]
 8010d54:	4619      	mov	r1, r3
 8010d56:	2000      	movs	r0, #0
 8010d58:	f001 fff4 	bl	8012d44 <LoRaMacCryptoSetKey>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	f000 827e 	beq.w	8011260 <LoRaMacMibSetRequestConfirm+0x6ec>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d64:	2311      	movs	r3, #17
 8010d66:	e293      	b.n	8011290 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d68:	2303      	movs	r3, #3
 8010d6a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010d6c:	e278      	b.n	8011260 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d00b      	beq.n	8010d8e <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	4619      	mov	r1, r3
 8010d7c:	2001      	movs	r0, #1
 8010d7e:	f001 ffe1 	bl	8012d44 <LoRaMacCryptoSetKey>
 8010d82:	4603      	mov	r3, r0
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	f000 826d 	beq.w	8011264 <LoRaMacMibSetRequestConfirm+0x6f0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d8a:	2311      	movs	r3, #17
 8010d8c:	e280      	b.n	8011290 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d8e:	2303      	movs	r3, #3
 8010d90:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010d92:	e267      	b.n	8011264 <LoRaMacMibSetRequestConfirm+0x6f0>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	685b      	ldr	r3, [r3, #4]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d00b      	beq.n	8010db4 <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	685b      	ldr	r3, [r3, #4]
 8010da0:	4619      	mov	r1, r3
 8010da2:	2008      	movs	r0, #8
 8010da4:	f001 ffce 	bl	8012d44 <LoRaMacCryptoSetKey>
 8010da8:	4603      	mov	r3, r0
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	f000 825c 	beq.w	8011268 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010db0:	2311      	movs	r3, #17
 8010db2:	e26d      	b.n	8011290 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010db4:	2303      	movs	r3, #3
 8010db6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010db8:	e256      	b.n	8011268 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	685b      	ldr	r3, [r3, #4]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d00b      	beq.n	8010dda <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	685b      	ldr	r3, [r3, #4]
 8010dc6:	4619      	mov	r1, r3
 8010dc8:	2009      	movs	r0, #9
 8010dca:	f001 ffbb 	bl	8012d44 <LoRaMacCryptoSetKey>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	f000 824b 	beq.w	801126c <LoRaMacMibSetRequestConfirm+0x6f8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010dd6:	2311      	movs	r3, #17
 8010dd8:	e25a      	b.n	8011290 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010dda:	2303      	movs	r3, #3
 8010ddc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010dde:	e245      	b.n	801126c <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d00b      	beq.n	8010e00 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	4619      	mov	r1, r3
 8010dee:	200c      	movs	r0, #12
 8010df0:	f001 ffa8 	bl	8012d44 <LoRaMacCryptoSetKey>
 8010df4:	4603      	mov	r3, r0
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	f000 823a 	beq.w	8011270 <LoRaMacMibSetRequestConfirm+0x6fc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010dfc:	2311      	movs	r3, #17
 8010dfe:	e247      	b.n	8011290 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e00:	2303      	movs	r3, #3
 8010e02:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010e04:	e234      	b.n	8011270 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	685b      	ldr	r3, [r3, #4]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d00b      	beq.n	8010e26 <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	4619      	mov	r1, r3
 8010e14:	200d      	movs	r0, #13
 8010e16:	f001 ff95 	bl	8012d44 <LoRaMacCryptoSetKey>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	f000 8229 	beq.w	8011274 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010e22:	2311      	movs	r3, #17
 8010e24:	e234      	b.n	8011290 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e26:	2303      	movs	r3, #3
 8010e28:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010e2a:	e223      	b.n	8011274 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	685b      	ldr	r3, [r3, #4]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d00b      	beq.n	8010e4c <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	685b      	ldr	r3, [r3, #4]
 8010e38:	4619      	mov	r1, r3
 8010e3a:	200e      	movs	r0, #14
 8010e3c:	f001 ff82 	bl	8012d44 <LoRaMacCryptoSetKey>
 8010e40:	4603      	mov	r3, r0
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	f000 8218 	beq.w	8011278 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010e48:	2311      	movs	r3, #17
 8010e4a:	e221      	b.n	8011290 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e4c:	2303      	movs	r3, #3
 8010e4e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010e50:	e212      	b.n	8011278 <LoRaMacMibSetRequestConfirm+0x704>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d00b      	beq.n	8010e72 <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	4619      	mov	r1, r3
 8010e60:	200f      	movs	r0, #15
 8010e62:	f001 ff6f 	bl	8012d44 <LoRaMacCryptoSetKey>
 8010e66:	4603      	mov	r3, r0
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	f000 8207 	beq.w	801127c <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010e6e:	2311      	movs	r3, #17
 8010e70:	e20e      	b.n	8011290 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e72:	2303      	movs	r3, #3
 8010e74:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010e76:	e201      	b.n	801127c <LoRaMacMibSetRequestConfirm+0x708>
 8010e78:	20000568 	.word	0x20000568
 8010e7c:	20000a70 	.word	0x20000a70
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	791a      	ldrb	r2, [r3, #4]
 8010e84:	4bb2      	ldr	r3, [pc, #712]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010e86:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010e8a:	4bb2      	ldr	r3, [pc, #712]	@ (8011154 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8010e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010e8e:	4ab0      	ldr	r2, [pc, #704]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010e90:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8010e94:	4610      	mov	r0, r2
 8010e96:	4798      	blx	r3
            Radio.Sleep( );
 8010e98:	4bae      	ldr	r3, [pc, #696]	@ (8011154 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8010e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e9c:	4798      	blx	r3
            break;
 8010e9e:	e1f6      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	791a      	ldrb	r2, [r3, #4]
 8010ea4:	4baa      	ldr	r3, [pc, #680]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010ea6:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 8010eaa:	e1f0      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	7a1b      	ldrb	r3, [r3, #8]
 8010eb0:	b25b      	sxtb	r3, r3
 8010eb2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010eb4:	4ba6      	ldr	r3, [pc, #664]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010eb6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8010eba:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8010ebc:	4ba4      	ldr	r3, [pc, #656]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010ebe:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010ec2:	f107 0108 	add.w	r1, r7, #8
 8010ec6:	2207      	movs	r2, #7
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f002 fd83 	bl	80139d4 <RegionVerify>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	f083 0301 	eor.w	r3, r3, #1
 8010ed4:	b2db      	uxtb	r3, r3
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d002      	beq.n	8010ee0 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010eda:	2303      	movs	r3, #3
 8010edc:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8010ede:	e1d6      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	685b      	ldr	r3, [r3, #4]
 8010ee4:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8010ee6:	4b9a      	ldr	r3, [pc, #616]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010ee8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010eec:	f107 0108 	add.w	r1, r7, #8
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f002 fd6e 	bl	80139d4 <RegionVerify>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	f083 0301 	eor.w	r3, r3, #1
 8010efe:	b2db      	uxtb	r3, r3
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d002      	beq.n	8010f0a <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010f04:	2303      	movs	r3, #3
 8010f06:	75fb      	strb	r3, [r7, #23]
            break;
 8010f08:	e1c1      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8010f0a:	4b91      	ldr	r3, [pc, #580]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010f0c:	687a      	ldr	r2, [r7, #4]
 8010f0e:	336c      	adds	r3, #108	@ 0x6c
 8010f10:	3204      	adds	r2, #4
 8010f12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f16:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010f1a:	e1b8      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	7a1b      	ldrb	r3, [r3, #8]
 8010f20:	b25b      	sxtb	r3, r3
 8010f22:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010f24:	4b8a      	ldr	r3, [pc, #552]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010f26:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8010f2a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010f2c:	4b88      	ldr	r3, [pc, #544]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010f2e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010f32:	f107 0108 	add.w	r1, r7, #8
 8010f36:	2207      	movs	r2, #7
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f002 fd4b 	bl	80139d4 <RegionVerify>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d008      	beq.n	8010f56 <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8010f44:	4b82      	ldr	r3, [pc, #520]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010f46:	687a      	ldr	r2, [r7, #4]
 8010f48:	33b4      	adds	r3, #180	@ 0xb4
 8010f4a:	3204      	adds	r2, #4
 8010f4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f50:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010f54:	e19b      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010f56:	2303      	movs	r3, #3
 8010f58:	75fb      	strb	r3, [r7, #23]
            break;
 8010f5a:	e198      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	7a1b      	ldrb	r3, [r3, #8]
 8010f60:	b25b      	sxtb	r3, r3
 8010f62:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010f64:	4b7a      	ldr	r3, [pc, #488]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010f66:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8010f6a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010f6c:	4b78      	ldr	r3, [pc, #480]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010f6e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010f72:	f107 0108 	add.w	r1, r7, #8
 8010f76:	2207      	movs	r2, #7
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f002 fd2b 	bl	80139d4 <RegionVerify>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d019      	beq.n	8010fb8 <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8010f84:	4b72      	ldr	r3, [pc, #456]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010f86:	687a      	ldr	r2, [r7, #4]
 8010f88:	3374      	adds	r3, #116	@ 0x74
 8010f8a:	3204      	adds	r2, #4
 8010f8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f90:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8010f94:	4b6e      	ldr	r3, [pc, #440]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010f96:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010f9a:	2b02      	cmp	r3, #2
 8010f9c:	f040 8170 	bne.w	8011280 <LoRaMacMibSetRequestConfirm+0x70c>
 8010fa0:	4b6b      	ldr	r3, [pc, #428]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010fa2:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	f000 816a 	beq.w	8011280 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8010fac:	4b69      	ldr	r3, [pc, #420]	@ (8011154 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8010fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fb0:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8010fb2:	f7fe fc93 	bl	800f8dc <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010fb6:	e163      	b.n	8011280 <LoRaMacMibSetRequestConfirm+0x70c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010fb8:	2303      	movs	r3, #3
 8010fba:	75fb      	strb	r3, [r7, #23]
            break;
 8010fbc:	e160      	b.n	8011280 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	7a1b      	ldrb	r3, [r3, #8]
 8010fc2:	b25b      	sxtb	r3, r3
 8010fc4:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010fc6:	4b62      	ldr	r3, [pc, #392]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010fc8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8010fcc:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010fce:	4b60      	ldr	r3, [pc, #384]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010fd0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010fd4:	f107 0108 	add.w	r1, r7, #8
 8010fd8:	2207      	movs	r2, #7
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f002 fcfa 	bl	80139d4 <RegionVerify>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d008      	beq.n	8010ff8 <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8010fe6:	4b5a      	ldr	r3, [pc, #360]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010fe8:	687a      	ldr	r2, [r7, #4]
 8010fea:	33bc      	adds	r3, #188	@ 0xbc
 8010fec:	3204      	adds	r2, #4
 8010fee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ff2:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010ff6:	e14a      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010ff8:	2303      	movs	r3, #3
 8010ffa:	75fb      	strb	r3, [r7, #23]
            break;
 8010ffc:	e147      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	685b      	ldr	r3, [r3, #4]
 8011002:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8011004:	2301      	movs	r3, #1
 8011006:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011008:	4b51      	ldr	r3, [pc, #324]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801100a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801100e:	f107 020c 	add.w	r2, r7, #12
 8011012:	4611      	mov	r1, r2
 8011014:	4618      	mov	r0, r3
 8011016:	f002 fd15 	bl	8013a44 <RegionChanMaskSet>
 801101a:	4603      	mov	r3, r0
 801101c:	f083 0301 	eor.w	r3, r3, #1
 8011020:	b2db      	uxtb	r3, r3
 8011022:	2b00      	cmp	r3, #0
 8011024:	f000 812e 	beq.w	8011284 <LoRaMacMibSetRequestConfirm+0x710>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011028:	2303      	movs	r3, #3
 801102a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801102c:	e12a      	b.n	8011284 <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8011034:	2300      	movs	r3, #0
 8011036:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011038:	4b45      	ldr	r3, [pc, #276]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801103a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801103e:	f107 020c 	add.w	r2, r7, #12
 8011042:	4611      	mov	r1, r2
 8011044:	4618      	mov	r0, r3
 8011046:	f002 fcfd 	bl	8013a44 <RegionChanMaskSet>
 801104a:	4603      	mov	r3, r0
 801104c:	f083 0301 	eor.w	r3, r3, #1
 8011050:	b2db      	uxtb	r3, r3
 8011052:	2b00      	cmp	r3, #0
 8011054:	f000 8118 	beq.w	8011288 <LoRaMacMibSetRequestConfirm+0x714>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011058:	2303      	movs	r3, #3
 801105a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801105c:	e114      	b.n	8011288 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	791b      	ldrb	r3, [r3, #4]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d009      	beq.n	801107a <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801106a:	2b0f      	cmp	r3, #15
 801106c:	d805      	bhi.n	801107a <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	791a      	ldrb	r2, [r3, #4]
 8011072:	4b37      	ldr	r3, [pc, #220]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011074:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011078:	e109      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801107a:	2303      	movs	r3, #3
 801107c:	75fb      	strb	r3, [r7, #23]
            break;
 801107e:	e106      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	4a32      	ldr	r2, [pc, #200]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011086:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8011088:	e101      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	4a30      	ldr	r2, [pc, #192]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011090:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 8011092:	e0fc      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	685b      	ldr	r3, [r3, #4]
 8011098:	4a2d      	ldr	r2, [pc, #180]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801109a:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 801109c:	e0f7      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	685b      	ldr	r3, [r3, #4]
 80110a2:	4a2b      	ldr	r2, [pc, #172]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80110a4:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 80110a6:	e0f2      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	685b      	ldr	r3, [r3, #4]
 80110ac:	4a28      	ldr	r2, [pc, #160]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80110ae:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 80110b0:	e0ed      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80110b8:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80110ba:	4b25      	ldr	r3, [pc, #148]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80110bc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80110c0:	f107 0108 	add.w	r1, r7, #8
 80110c4:	2206      	movs	r2, #6
 80110c6:	4618      	mov	r0, r3
 80110c8:	f002 fc84 	bl	80139d4 <RegionVerify>
 80110cc:	4603      	mov	r3, r0
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d005      	beq.n	80110de <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80110d2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80110d6:	4b1e      	ldr	r3, [pc, #120]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80110d8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80110dc:	e0d7      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80110de:	2303      	movs	r3, #3
 80110e0:	75fb      	strb	r3, [r7, #23]
            break;
 80110e2:	e0d4      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80110ea:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80110ec:	4b18      	ldr	r3, [pc, #96]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80110ee:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80110f2:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80110f4:	4b16      	ldr	r3, [pc, #88]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80110f6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80110fa:	f107 0108 	add.w	r1, r7, #8
 80110fe:	2205      	movs	r2, #5
 8011100:	4618      	mov	r0, r3
 8011102:	f002 fc67 	bl	80139d4 <RegionVerify>
 8011106:	4603      	mov	r3, r0
 8011108:	2b00      	cmp	r3, #0
 801110a:	d005      	beq.n	8011118 <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801110c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011110:	4b0f      	ldr	r3, [pc, #60]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011112:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011116:	e0ba      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011118:	2303      	movs	r3, #3
 801111a:	75fb      	strb	r3, [r7, #23]
            break;
 801111c:	e0b7      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011124:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011126:	4b0a      	ldr	r3, [pc, #40]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011128:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801112c:	f107 0108 	add.w	r1, r7, #8
 8011130:	220a      	movs	r2, #10
 8011132:	4618      	mov	r0, r3
 8011134:	f002 fc4e 	bl	80139d4 <RegionVerify>
 8011138:	4603      	mov	r3, r0
 801113a:	2b00      	cmp	r3, #0
 801113c:	d005      	beq.n	801114a <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 801113e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011142:	4b03      	ldr	r3, [pc, #12]	@ (8011150 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011144:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011148:	e0a1      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801114a:	2303      	movs	r3, #3
 801114c:	75fb      	strb	r3, [r7, #23]
            break;
 801114e:	e09e      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
 8011150:	20000a70 	.word	0x20000a70
 8011154:	0801d86c 	.word	0x0801d86c
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801115e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011160:	4b4d      	ldr	r3, [pc, #308]	@ (8011298 <LoRaMacMibSetRequestConfirm+0x724>)
 8011162:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011166:	f107 0108 	add.w	r1, r7, #8
 801116a:	2209      	movs	r2, #9
 801116c:	4618      	mov	r0, r3
 801116e:	f002 fc31 	bl	80139d4 <RegionVerify>
 8011172:	4603      	mov	r3, r0
 8011174:	2b00      	cmp	r3, #0
 8011176:	d005      	beq.n	8011184 <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011178:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801117c:	4b46      	ldr	r3, [pc, #280]	@ (8011298 <LoRaMacMibSetRequestConfirm+0x724>)
 801117e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011182:	e084      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011184:	2303      	movs	r3, #3
 8011186:	75fb      	strb	r3, [r7, #23]
            break;
 8011188:	e081      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	685b      	ldr	r3, [r3, #4]
 801118e:	4a42      	ldr	r2, [pc, #264]	@ (8011298 <LoRaMacMibSetRequestConfirm+0x724>)
 8011190:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8011194:	4b40      	ldr	r3, [pc, #256]	@ (8011298 <LoRaMacMibSetRequestConfirm+0x724>)
 8011196:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801119a:	4a3f      	ldr	r2, [pc, #252]	@ (8011298 <LoRaMacMibSetRequestConfirm+0x724>)
 801119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 801119e:	e076      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	791a      	ldrb	r2, [r3, #4]
 80111a4:	4b3c      	ldr	r3, [pc, #240]	@ (8011298 <LoRaMacMibSetRequestConfirm+0x724>)
 80111a6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 80111aa:	4b3b      	ldr	r3, [pc, #236]	@ (8011298 <LoRaMacMibSetRequestConfirm+0x724>)
 80111ac:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 80111b0:	4b39      	ldr	r3, [pc, #228]	@ (8011298 <LoRaMacMibSetRequestConfirm+0x724>)
 80111b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 80111b6:	e06a      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	685b      	ldr	r3, [r3, #4]
 80111bc:	4a36      	ldr	r2, [pc, #216]	@ (8011298 <LoRaMacMibSetRequestConfirm+0x724>)
 80111be:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 80111c2:	e064      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	685b      	ldr	r3, [r3, #4]
 80111c8:	4a33      	ldr	r2, [pc, #204]	@ (8011298 <LoRaMacMibSetRequestConfirm+0x724>)
 80111ca:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 80111ce:	e05e      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 80111d0:	f7fe fde0 	bl	800fd94 <RestoreNvmData>
 80111d4:	4603      	mov	r3, r0
 80111d6:	75fb      	strb	r3, [r7, #23]
            break;
 80111d8:	e059      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	799b      	ldrb	r3, [r3, #6]
 80111de:	2b01      	cmp	r3, #1
 80111e0:	d80d      	bhi.n	80111fe <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80111e2:	4a2d      	ldr	r2, [pc, #180]	@ (8011298 <LoRaMacMibSetRequestConfirm+0x724>)
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	685b      	ldr	r3, [r3, #4]
 80111e8:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6858      	ldr	r0, [r3, #4]
 80111f0:	f001 fce0 	bl	8012bb4 <LoRaMacCryptoSetLrWanVersion>
 80111f4:	4603      	mov	r3, r0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d048      	beq.n	801128c <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80111fa:	2311      	movs	r3, #17
 80111fc:	e048      	b.n	8011290 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80111fe:	2303      	movs	r3, #3
 8011200:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011202:	e043      	b.n	801128c <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	685b      	ldr	r3, [r3, #4]
 8011208:	4a23      	ldr	r2, [pc, #140]	@ (8011298 <LoRaMacMibSetRequestConfirm+0x724>)
 801120a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 801120e:	e03e      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	889a      	ldrh	r2, [r3, #4]
 8011214:	4b20      	ldr	r3, [pc, #128]	@ (8011298 <LoRaMacMibSetRequestConfirm+0x724>)
 8011216:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 801121a:	e038      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	889a      	ldrh	r2, [r3, #4]
 8011220:	4b1d      	ldr	r3, [pc, #116]	@ (8011298 <LoRaMacMibSetRequestConfirm+0x724>)
 8011222:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 8011226:	e032      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	889a      	ldrh	r2, [r3, #4]
 801122c:	4b1a      	ldr	r3, [pc, #104]	@ (8011298 <LoRaMacMibSetRequestConfirm+0x724>)
 801122e:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 8011232:	e02c      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	889a      	ldrh	r2, [r3, #4]
 8011238:	4b17      	ldr	r3, [pc, #92]	@ (8011298 <LoRaMacMibSetRequestConfirm+0x724>)
 801123a:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 801123e:	e026      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8011240:	2318      	movs	r3, #24
 8011242:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8011244:	e023      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8011246:	2318      	movs	r3, #24
 8011248:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801124a:	e020      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f000 fc27 	bl	8011aa0 <LoRaMacMibClassBSetRequestConfirm>
 8011252:	4603      	mov	r3, r0
 8011254:	75fb      	strb	r3, [r7, #23]
            break;
 8011256:	e01a      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011258:	bf00      	nop
 801125a:	e018      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801125c:	bf00      	nop
 801125e:	e016      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011260:	bf00      	nop
 8011262:	e014      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011264:	bf00      	nop
 8011266:	e012      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011268:	bf00      	nop
 801126a:	e010      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801126c:	bf00      	nop
 801126e:	e00e      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011270:	bf00      	nop
 8011272:	e00c      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011274:	bf00      	nop
 8011276:	e00a      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011278:	bf00      	nop
 801127a:	e008      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801127c:	bf00      	nop
 801127e:	e006      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011280:	bf00      	nop
 8011282:	e004      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011284:	bf00      	nop
 8011286:	e002      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011288:	bf00      	nop
 801128a:	e000      	b.n	801128e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801128c:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 801128e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011290:	4618      	mov	r0, r3
 8011292:	3718      	adds	r7, #24
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}
 8011298:	20000a70 	.word	0x20000a70

0801129c <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b086      	sub	sp, #24
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80112a4:	2302      	movs	r3, #2
 80112a6:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80112a8:	2300      	movs	r3, #0
 80112aa:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d101      	bne.n	80112b6 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80112b2:	2303      	movs	r3, #3
 80112b4:	e13a      	b.n	801152c <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80112b6:	f7fc fc97 	bl	800dbe8 <LoRaMacIsBusy>
 80112ba:	4603      	mov	r3, r0
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d001      	beq.n	80112c4 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80112c0:	2301      	movs	r3, #1
 80112c2:	e133      	b.n	801152c <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80112c4:	f001 f90c 	bl	80124e0 <LoRaMacConfirmQueueIsFull>
 80112c8:	4603      	mov	r3, r0
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d001      	beq.n	80112d2 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 80112ce:	2301      	movs	r3, #1
 80112d0:	e12c      	b.n	801152c <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80112d2:	f001 f8f9 	bl	80124c8 <LoRaMacConfirmQueueGetCnt>
 80112d6:	4603      	mov	r3, r0
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d104      	bne.n	80112e6 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80112dc:	2214      	movs	r2, #20
 80112de:	2100      	movs	r1, #0
 80112e0:	4894      	ldr	r0, [pc, #592]	@ (8011534 <LoRaMacMlmeRequest+0x298>)
 80112e2:	f006 fa37 	bl	8017754 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80112e6:	4b94      	ldr	r3, [pc, #592]	@ (8011538 <LoRaMacMlmeRequest+0x29c>)
 80112e8:	2201      	movs	r2, #1
 80112ea:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80112ee:	4a92      	ldr	r2, [pc, #584]	@ (8011538 <LoRaMacMlmeRequest+0x29c>)
 80112f0:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 80112f4:	f043 0304 	orr.w	r3, r3, #4
 80112f8:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    queueElement.Request = mlmeRequest->Type;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011302:	2301      	movs	r3, #1
 8011304:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8011306:	2300      	movs	r3, #0
 8011308:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	781b      	ldrb	r3, [r3, #0]
 801130e:	3b01      	subs	r3, #1
 8011310:	2b0d      	cmp	r3, #13
 8011312:	f200 80e1 	bhi.w	80114d8 <LoRaMacMlmeRequest+0x23c>
 8011316:	a201      	add	r2, pc, #4	@ (adr r2, 801131c <LoRaMacMlmeRequest+0x80>)
 8011318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801131c:	08011355 	.word	0x08011355
 8011320:	080114d9 	.word	0x080114d9
 8011324:	080114d9 	.word	0x080114d9
 8011328:	080114d9 	.word	0x080114d9
 801132c:	080113cd 	.word	0x080113cd
 8011330:	080113eb 	.word	0x080113eb
 8011334:	080113fb 	.word	0x080113fb
 8011338:	080114d9 	.word	0x080114d9
 801133c:	080114d9 	.word	0x080114d9
 8011340:	08011417 	.word	0x08011417
 8011344:	080114d9 	.word	0x080114d9
 8011348:	080114ad 	.word	0x080114ad
 801134c:	0801144d 	.word	0x0801144d
 8011350:	0801148f 	.word	0x0801148f
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011354:	4b78      	ldr	r3, [pc, #480]	@ (8011538 <LoRaMacMlmeRequest+0x29c>)
 8011356:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801135a:	f003 0320 	and.w	r3, r3, #32
 801135e:	2b00      	cmp	r3, #0
 8011360:	d001      	beq.n	8011366 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8011362:	2301      	movs	r3, #1
 8011364:	e0e2      	b.n	801152c <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 8011366:	2000      	movs	r0, #0
 8011368:	f7fe f95e 	bl	800f628 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 801136c:	4b73      	ldr	r3, [pc, #460]	@ (801153c <LoRaMacMlmeRequest+0x2a0>)
 801136e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	795b      	ldrb	r3, [r3, #5]
 8011376:	b25b      	sxtb	r3, r3
 8011378:	2200      	movs	r2, #0
 801137a:	4619      	mov	r1, r3
 801137c:	f002 fc72 	bl	8013c64 <RegionAlternateDr>
 8011380:	4603      	mov	r3, r0
 8011382:	461a      	mov	r2, r3
 8011384:	4b6d      	ldr	r3, [pc, #436]	@ (801153c <LoRaMacMlmeRequest+0x2a0>)
 8011386:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8011390:	4b6a      	ldr	r3, [pc, #424]	@ (801153c <LoRaMacMlmeRequest+0x2a0>)
 8011392:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011396:	2307      	movs	r3, #7
 8011398:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 801139a:	20ff      	movs	r0, #255	@ 0xff
 801139c:	f7fd fec2 	bl	800f124 <SendReJoinReq>
 80113a0:	4603      	mov	r3, r0
 80113a2:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 80113a4:	7dfb      	ldrb	r3, [r7, #23]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	f000 8098 	beq.w	80114dc <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80113ac:	4b63      	ldr	r3, [pc, #396]	@ (801153c <LoRaMacMlmeRequest+0x2a0>)
 80113ae:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	795b      	ldrb	r3, [r3, #5]
 80113b6:	b25b      	sxtb	r3, r3
 80113b8:	2201      	movs	r2, #1
 80113ba:	4619      	mov	r1, r3
 80113bc:	f002 fc52 	bl	8013c64 <RegionAlternateDr>
 80113c0:	4603      	mov	r3, r0
 80113c2:	461a      	mov	r2, r3
 80113c4:	4b5d      	ldr	r3, [pc, #372]	@ (801153c <LoRaMacMlmeRequest+0x2a0>)
 80113c6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80113ca:	e087      	b.n	80114dc <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80113cc:	2300      	movs	r3, #0
 80113ce:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80113d0:	f107 030c 	add.w	r3, r7, #12
 80113d4:	2200      	movs	r2, #0
 80113d6:	4619      	mov	r1, r3
 80113d8:	2002      	movs	r0, #2
 80113da:	f000 fcd1 	bl	8011d80 <LoRaMacCommandsAddCmd>
 80113de:	4603      	mov	r3, r0
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d07d      	beq.n	80114e0 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80113e4:	2313      	movs	r3, #19
 80113e6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80113e8:	e07a      	b.n	80114e0 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	889b      	ldrh	r3, [r3, #4]
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7fe fc7a 	bl	800fce8 <SetTxContinuousWave>
 80113f4:	4603      	mov	r3, r0
 80113f6:	75fb      	strb	r3, [r7, #23]
            break;
 80113f8:	e079      	b.n	80114ee <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	8898      	ldrh	r0, [r3, #4]
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6899      	ldr	r1, [r3, #8]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011408:	b2db      	uxtb	r3, r3
 801140a:	461a      	mov	r2, r3
 801140c:	f7fe fca2 	bl	800fd54 <SetTxContinuousWave1>
 8011410:	4603      	mov	r3, r0
 8011412:	75fb      	strb	r3, [r7, #23]
            break;
 8011414:	e06b      	b.n	80114ee <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011416:	2300      	movs	r3, #0
 8011418:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 801141a:	f107 0308 	add.w	r3, r7, #8
 801141e:	4619      	mov	r1, r3
 8011420:	200d      	movs	r0, #13
 8011422:	f000 fd2d 	bl	8011e80 <LoRaMacCommandsGetCmd>
 8011426:	4603      	mov	r3, r0
 8011428:	2b00      	cmp	r3, #0
 801142a:	d102      	bne.n	8011432 <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 801142c:	2300      	movs	r3, #0
 801142e:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8011430:	e058      	b.n	80114e4 <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011432:	f107 030c 	add.w	r3, r7, #12
 8011436:	2200      	movs	r2, #0
 8011438:	4619      	mov	r1, r3
 801143a:	200d      	movs	r0, #13
 801143c:	f000 fca0 	bl	8011d80 <LoRaMacCommandsAddCmd>
 8011440:	4603      	mov	r3, r0
 8011442:	2b00      	cmp	r3, #0
 8011444:	d04e      	beq.n	80114e4 <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011446:	2313      	movs	r3, #19
 8011448:	75fb      	strb	r3, [r7, #23]
            break;
 801144a:	e04b      	b.n	80114e4 <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 801144c:	4b3b      	ldr	r3, [pc, #236]	@ (801153c <LoRaMacMlmeRequest+0x2a0>)
 801144e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011452:	2b00      	cmp	r3, #0
 8011454:	d148      	bne.n	80114e8 <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	791b      	ldrb	r3, [r3, #4]
 801145a:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	791b      	ldrb	r3, [r3, #4]
 8011460:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8011464:	b2db      	uxtb	r3, r3
 8011466:	4618      	mov	r0, r3
 8011468:	f000 faef 	bl	8011a4a <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801146c:	7dbb      	ldrb	r3, [r7, #22]
 801146e:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8011470:	2300      	movs	r3, #0
 8011472:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8011474:	f107 030c 	add.w	r3, r7, #12
 8011478:	2201      	movs	r2, #1
 801147a:	4619      	mov	r1, r3
 801147c:	2010      	movs	r0, #16
 801147e:	f000 fc7f 	bl	8011d80 <LoRaMacCommandsAddCmd>
 8011482:	4603      	mov	r3, r0
 8011484:	2b00      	cmp	r3, #0
 8011486:	d02f      	beq.n	80114e8 <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011488:	2313      	movs	r3, #19
 801148a:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 801148c:	e02c      	b.n	80114e8 <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801148e:	2300      	movs	r3, #0
 8011490:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011492:	f107 030c 	add.w	r3, r7, #12
 8011496:	2200      	movs	r2, #0
 8011498:	4619      	mov	r1, r3
 801149a:	2012      	movs	r0, #18
 801149c:	f000 fc70 	bl	8011d80 <LoRaMacCommandsAddCmd>
 80114a0:	4603      	mov	r3, r0
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d022      	beq.n	80114ec <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80114a6:	2313      	movs	r3, #19
 80114a8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80114aa:	e01f      	b.n	80114ec <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80114ac:	2301      	movs	r3, #1
 80114ae:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80114b0:	f000 fa81 	bl	80119b6 <LoRaMacClassBIsAcquisitionInProgress>
 80114b4:	4603      	mov	r3, r0
 80114b6:	f083 0301 	eor.w	r3, r3, #1
 80114ba:	b2db      	uxtb	r3, r3
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d008      	beq.n	80114d2 <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80114c0:	2000      	movs	r0, #0
 80114c2:	f000 fa5a 	bl	801197a <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80114c6:	2000      	movs	r0, #0
 80114c8:	f000 fa7c 	bl	80119c4 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80114cc:	2300      	movs	r3, #0
 80114ce:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80114d0:	e00d      	b.n	80114ee <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 80114d2:	2301      	movs	r3, #1
 80114d4:	75fb      	strb	r3, [r7, #23]
            break;
 80114d6:	e00a      	b.n	80114ee <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 80114d8:	bf00      	nop
 80114da:	e008      	b.n	80114ee <LoRaMacMlmeRequest+0x252>
            break;
 80114dc:	bf00      	nop
 80114de:	e006      	b.n	80114ee <LoRaMacMlmeRequest+0x252>
            break;
 80114e0:	bf00      	nop
 80114e2:	e004      	b.n	80114ee <LoRaMacMlmeRequest+0x252>
            break;
 80114e4:	bf00      	nop
 80114e6:	e002      	b.n	80114ee <LoRaMacMlmeRequest+0x252>
            break;
 80114e8:	bf00      	nop
 80114ea:	e000      	b.n	80114ee <LoRaMacMlmeRequest+0x252>
            break;
 80114ec:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80114ee:	4b12      	ldr	r3, [pc, #72]	@ (8011538 <LoRaMacMlmeRequest+0x29c>)
 80114f0:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80114f8:	7dfb      	ldrb	r3, [r7, #23]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d010      	beq.n	8011520 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80114fe:	f000 ffe3 	bl	80124c8 <LoRaMacConfirmQueueGetCnt>
 8011502:	4603      	mov	r3, r0
 8011504:	2b00      	cmp	r3, #0
 8011506:	d110      	bne.n	801152a <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 8011508:	4b0b      	ldr	r3, [pc, #44]	@ (8011538 <LoRaMacMlmeRequest+0x29c>)
 801150a:	2200      	movs	r2, #0
 801150c:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011510:	4a09      	ldr	r2, [pc, #36]	@ (8011538 <LoRaMacMlmeRequest+0x29c>)
 8011512:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8011516:	f36f 0382 	bfc	r3, #2, #1
 801151a:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 801151e:	e004      	b.n	801152a <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8011520:	f107 0310 	add.w	r3, r7, #16
 8011524:	4618      	mov	r0, r3
 8011526:	f000 fe7b 	bl	8012220 <LoRaMacConfirmQueueAdd>
    }
    return status;
 801152a:	7dfb      	ldrb	r3, [r7, #23]
}
 801152c:	4618      	mov	r0, r3
 801152e:	3718      	adds	r7, #24
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}
 8011534:	200009b0 	.word	0x200009b0
 8011538:	20000568 	.word	0x20000568
 801153c:	20000a70 	.word	0x20000a70

08011540 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b08c      	sub	sp, #48	@ 0x30
 8011544:	af02      	add	r7, sp, #8
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	460b      	mov	r3, r1
 801154a:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801154c:	2302      	movs	r3, #2
 801154e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8011552:	2300      	movs	r3, #0
 8011554:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    void* fBuffer = NULL;
 8011558:	2300      	movs	r3, #0
 801155a:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 801155c:	2300      	movs	r3, #0
 801155e:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8011560:	2300      	movs	r3, #0
 8011562:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d101      	bne.n	801156e <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801156a:	2303      	movs	r3, #3
 801156c:	e0d4      	b.n	8011718 <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 801156e:	f7fc fb3b 	bl	800dbe8 <LoRaMacIsBusy>
 8011572:	4603      	mov	r3, r0
 8011574:	2b00      	cmp	r3, #0
 8011576:	d001      	beq.n	801157c <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8011578:	2301      	movs	r3, #1
 801157a:	e0cd      	b.n	8011718 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 801157c:	2300      	movs	r3, #0
 801157e:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011580:	2214      	movs	r2, #20
 8011582:	2100      	movs	r1, #0
 8011584:	4866      	ldr	r0, [pc, #408]	@ (8011720 <LoRaMacMcpsRequest+0x1e0>)
 8011586:	f006 f8e5 	bl	8017754 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801158a:	4b66      	ldr	r3, [pc, #408]	@ (8011724 <LoRaMacMcpsRequest+0x1e4>)
 801158c:	2201      	movs	r2, #1
 801158e:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011592:	4b64      	ldr	r3, [pc, #400]	@ (8011724 <LoRaMacMcpsRequest+0x1e4>)
 8011594:	2201      	movs	r2, #1
 8011596:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e

    switch( mcpsRequest->Type )
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	781b      	ldrb	r3, [r3, #0]
 801159e:	2b03      	cmp	r3, #3
 80115a0:	d03d      	beq.n	801161e <LoRaMacMcpsRequest+0xde>
 80115a2:	2b03      	cmp	r3, #3
 80115a4:	dc4f      	bgt.n	8011646 <LoRaMacMcpsRequest+0x106>
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d002      	beq.n	80115b0 <LoRaMacMcpsRequest+0x70>
 80115aa:	2b01      	cmp	r3, #1
 80115ac:	d019      	beq.n	80115e2 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80115ae:	e04a      	b.n	8011646 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 80115b0:	2301      	movs	r3, #1
 80115b2:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80115b4:	4b5b      	ldr	r3, [pc, #364]	@ (8011724 <LoRaMacMcpsRequest+0x1e4>)
 80115b6:	2201      	movs	r2, #1
 80115b8:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80115bc:	7b3b      	ldrb	r3, [r7, #12]
 80115be:	2202      	movs	r2, #2
 80115c0:	f362 1347 	bfi	r3, r2, #5, #3
 80115c4:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	791b      	ldrb	r3, [r3, #4]
 80115ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	689b      	ldr	r3, [r3, #8]
 80115d2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	899b      	ldrh	r3, [r3, #12]
 80115d8:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	7b9b      	ldrb	r3, [r3, #14]
 80115de:	777b      	strb	r3, [r7, #29]
            break;
 80115e0:	e032      	b.n	8011648 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80115e2:	2301      	movs	r3, #1
 80115e4:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	7bdb      	ldrb	r3, [r3, #15]
 80115ea:	2b08      	cmp	r3, #8
 80115ec:	bf28      	it	cs
 80115ee:	2308      	movcs	r3, #8
 80115f0:	b2da      	uxtb	r2, r3
 80115f2:	4b4c      	ldr	r3, [pc, #304]	@ (8011724 <LoRaMacMcpsRequest+0x1e4>)
 80115f4:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80115f8:	7b3b      	ldrb	r3, [r7, #12]
 80115fa:	2204      	movs	r2, #4
 80115fc:	f362 1347 	bfi	r3, r2, #5, #3
 8011600:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	791b      	ldrb	r3, [r3, #4]
 8011606:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	689b      	ldr	r3, [r3, #8]
 801160e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	899b      	ldrh	r3, [r3, #12]
 8011614:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	7b9b      	ldrb	r3, [r3, #14]
 801161a:	777b      	strb	r3, [r7, #29]
            break;
 801161c:	e014      	b.n	8011648 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 801161e:	2301      	movs	r3, #1
 8011620:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011622:	4b40      	ldr	r3, [pc, #256]	@ (8011724 <LoRaMacMcpsRequest+0x1e4>)
 8011624:	2201      	movs	r2, #1
 8011626:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801162a:	7b3b      	ldrb	r3, [r7, #12]
 801162c:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8011630:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	685b      	ldr	r3, [r3, #4]
 8011636:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	891b      	ldrh	r3, [r3, #8]
 801163c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	7a9b      	ldrb	r3, [r3, #10]
 8011642:	777b      	strb	r3, [r7, #29]
            break;
 8011644:	e000      	b.n	8011648 <LoRaMacMcpsRequest+0x108>
            break;
 8011646:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011648:	2302      	movs	r3, #2
 801164a:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801164c:	4b36      	ldr	r3, [pc, #216]	@ (8011728 <LoRaMacMcpsRequest+0x1e8>)
 801164e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011652:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011654:	4b34      	ldr	r3, [pc, #208]	@ (8011728 <LoRaMacMcpsRequest+0x1e8>)
 8011656:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801165a:	f107 0214 	add.w	r2, r7, #20
 801165e:	4611      	mov	r1, r2
 8011660:	4618      	mov	r0, r3
 8011662:	f002 f969 	bl	8013938 <RegionGetPhyParam>
 8011666:	4603      	mov	r3, r0
 8011668:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	b25b      	sxtb	r3, r3
 801166e:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011672:	4293      	cmp	r3, r2
 8011674:	bfb8      	it	lt
 8011676:	4613      	movlt	r3, r2
 8011678:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 801167a:	7f3b      	ldrb	r3, [r7, #28]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d044      	beq.n	801170a <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8011680:	4b29      	ldr	r3, [pc, #164]	@ (8011728 <LoRaMacMcpsRequest+0x1e8>)
 8011682:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8011686:	f083 0301 	eor.w	r3, r3, #1
 801168a:	b2db      	uxtb	r3, r3
 801168c:	2b00      	cmp	r3, #0
 801168e:	d019      	beq.n	80116c4 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8011690:	7f7b      	ldrb	r3, [r7, #29]
 8011692:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011694:	4b24      	ldr	r3, [pc, #144]	@ (8011728 <LoRaMacMcpsRequest+0x1e8>)
 8011696:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801169a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801169c:	4b22      	ldr	r3, [pc, #136]	@ (8011728 <LoRaMacMcpsRequest+0x1e8>)
 801169e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80116a2:	f107 0108 	add.w	r1, r7, #8
 80116a6:	2205      	movs	r2, #5
 80116a8:	4618      	mov	r0, r3
 80116aa:	f002 f993 	bl	80139d4 <RegionVerify>
 80116ae:	4603      	mov	r3, r0
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d005      	beq.n	80116c0 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80116b4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80116b8:	4b1b      	ldr	r3, [pc, #108]	@ (8011728 <LoRaMacMcpsRequest+0x1e8>)
 80116ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80116be:	e001      	b.n	80116c4 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80116c0:	2303      	movs	r3, #3
 80116c2:	e029      	b.n	8011718 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 80116c4:	8bfa      	ldrh	r2, [r7, #30]
 80116c6:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80116ca:	f107 000c 	add.w	r0, r7, #12
 80116ce:	78fb      	ldrb	r3, [r7, #3]
 80116d0:	9300      	str	r3, [sp, #0]
 80116d2:	4613      	mov	r3, r2
 80116d4:	6a3a      	ldr	r2, [r7, #32]
 80116d6:	f7fd fc47 	bl	800ef68 <Send>
 80116da:	4603      	mov	r3, r0
 80116dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if( status == LORAMAC_STATUS_OK )
 80116e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d10c      	bne.n	8011702 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	781a      	ldrb	r2, [r3, #0]
 80116ec:	4b0d      	ldr	r3, [pc, #52]	@ (8011724 <LoRaMacMcpsRequest+0x1e4>)
 80116ee:	f883 2434 	strb.w	r2, [r3, #1076]	@ 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80116f2:	4a0c      	ldr	r2, [pc, #48]	@ (8011724 <LoRaMacMcpsRequest+0x1e4>)
 80116f4:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 80116f8:	f043 0301 	orr.w	r3, r3, #1
 80116fc:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 8011700:	e003      	b.n	801170a <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8011702:	4b08      	ldr	r3, [pc, #32]	@ (8011724 <LoRaMacMcpsRequest+0x1e4>)
 8011704:	2200      	movs	r2, #0
 8011706:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801170a:	4b06      	ldr	r3, [pc, #24]	@ (8011724 <LoRaMacMcpsRequest+0x1e4>)
 801170c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	611a      	str	r2, [r3, #16]

    return status;
 8011714:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8011718:	4618      	mov	r0, r3
 801171a:	3728      	adds	r7, #40	@ 0x28
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}
 8011720:	2000099c 	.word	0x2000099c
 8011724:	20000568 	.word	0x20000568
 8011728:	20000a70 	.word	0x20000a70

0801172c <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b084      	sub	sp, #16
 8011730:	af00      	add	r7, sp, #0
 8011732:	4603      	mov	r3, r0
 8011734:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8011736:	79fb      	ldrb	r3, [r7, #7]
 8011738:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801173a:	4b0d      	ldr	r3, [pc, #52]	@ (8011770 <LoRaMacTestSetDutyCycleOn+0x44>)
 801173c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011740:	f107 010c 	add.w	r1, r7, #12
 8011744:	220f      	movs	r2, #15
 8011746:	4618      	mov	r0, r3
 8011748:	f002 f944 	bl	80139d4 <RegionVerify>
 801174c:	4603      	mov	r3, r0
 801174e:	2b00      	cmp	r3, #0
 8011750:	d00a      	beq.n	8011768 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8011752:	4a07      	ldr	r2, [pc, #28]	@ (8011770 <LoRaMacTestSetDutyCycleOn+0x44>)
 8011754:	79fb      	ldrb	r3, [r7, #7]
 8011756:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801175a:	4a06      	ldr	r2, [pc, #24]	@ (8011774 <LoRaMacTestSetDutyCycleOn+0x48>)
 801175c:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8011760:	f043 0320 	orr.w	r3, r3, #32
 8011764:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
}
 8011768:	bf00      	nop
 801176a:	3710      	adds	r7, #16
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}
 8011770:	20000a70 	.word	0x20000a70
 8011774:	20000568 	.word	0x20000568

08011778 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8011778:	b580      	push	{r7, lr}
 801177a:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 801177c:	f7fe ff6c 	bl	8010658 <LoRaMacStop>
 8011780:	4603      	mov	r3, r0
 8011782:	2b00      	cmp	r3, #0
 8011784:	d115      	bne.n	80117b2 <LoRaMacDeInitialization+0x3a>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8011786:	480c      	ldr	r0, [pc, #48]	@ (80117b8 <LoRaMacDeInitialization+0x40>)
 8011788:	f00a f940 	bl	801ba0c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 801178c:	480b      	ldr	r0, [pc, #44]	@ (80117bc <LoRaMacDeInitialization+0x44>)
 801178e:	f00a f93d 	bl	801ba0c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8011792:	480b      	ldr	r0, [pc, #44]	@ (80117c0 <LoRaMacDeInitialization+0x48>)
 8011794:	f00a f93a 	bl	801ba0c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8011798:	480a      	ldr	r0, [pc, #40]	@ (80117c4 <LoRaMacDeInitialization+0x4c>)
 801179a:	f00a f937 	bl	801ba0c <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 801179e:	f000 f95e 	bl	8011a5e <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 80117a2:	2000      	movs	r0, #0
 80117a4:	f7fd ff40 	bl	800f628 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 80117a8:	4b07      	ldr	r3, [pc, #28]	@ (80117c8 <LoRaMacDeInitialization+0x50>)
 80117aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117ac:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 80117ae:	2300      	movs	r3, #0
 80117b0:	e000      	b.n	80117b4 <LoRaMacDeInitialization+0x3c>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 80117b2:	2301      	movs	r3, #1
    }
}
 80117b4:	4618      	mov	r0, r3
 80117b6:	bd80      	pop	{r7, pc}
 80117b8:	200008d0 	.word	0x200008d0
 80117bc:	200008e8 	.word	0x200008e8
 80117c0:	20000900 	.word	0x20000900
 80117c4:	2000095c 	.word	0x2000095c
 80117c8:	0801d86c 	.word	0x0801d86c

080117cc <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b08c      	sub	sp, #48	@ 0x30
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	60f8      	str	r0, [r7, #12]
 80117d4:	60b9      	str	r1, [r7, #8]
 80117d6:	607a      	str	r2, [r7, #4]
 80117d8:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80117da:	2300      	movs	r3, #0
 80117dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	7c1b      	ldrb	r3, [r3, #16]
 80117e4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	7c5b      	ldrb	r3, [r3, #17]
 80117ec:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	689a      	ldr	r2, [r3, #8]
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	795b      	ldrb	r3, [r3, #5]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	f000 808b 	beq.w	8011918 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8011802:	2302      	movs	r3, #2
 8011804:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	7c9b      	ldrb	r3, [r3, #18]
 801180c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	7cdb      	ldrb	r3, [r3, #19]
 8011814:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8011818:	4611      	mov	r1, r2
 801181a:	4618      	mov	r0, r3
 801181c:	f002 f88c 	bl	8013938 <RegionGetPhyParam>
 8011820:	4603      	mov	r3, r0
 8011822:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8011824:	6a3b      	ldr	r3, [r7, #32]
 8011826:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        datarate = MAX( datarate, minTxDatarate );
 801182a:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 801182e:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8011832:	4293      	cmp	r3, r2
 8011834:	bfb8      	it	lt
 8011836:	4613      	movlt	r3, r2
 8011838:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        if( datarate == minTxDatarate )
 801183c:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8011840:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8011844:	429a      	cmp	r2, r3
 8011846:	d106      	bne.n	8011856 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	2200      	movs	r2, #0
 801184c:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 801184e:	2300      	movs	r3, #0
 8011850:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011854:	e060      	b.n	8011918 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	689b      	ldr	r3, [r3, #8]
 801185a:	68fa      	ldr	r2, [r7, #12]
 801185c:	8992      	ldrh	r2, [r2, #12]
 801185e:	4293      	cmp	r3, r2
 8011860:	d303      	bcc.n	801186a <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8011862:	2301      	movs	r3, #1
 8011864:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011868:	e002      	b.n	8011870 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 801186a:	2300      	movs	r3, #0
 801186c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	689b      	ldr	r3, [r3, #8]
 8011874:	68fa      	ldr	r2, [r7, #12]
 8011876:	8992      	ldrh	r2, [r2, #12]
 8011878:	4611      	mov	r1, r2
 801187a:	68fa      	ldr	r2, [r7, #12]
 801187c:	89d2      	ldrh	r2, [r2, #14]
 801187e:	440a      	add	r2, r1
 8011880:	4293      	cmp	r3, r2
 8011882:	d349      	bcc.n	8011918 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8011884:	2308      	movs	r3, #8
 8011886:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	7cdb      	ldrb	r3, [r3, #19]
 801188e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8011892:	4611      	mov	r1, r2
 8011894:	4618      	mov	r0, r3
 8011896:	f002 f84f 	bl	8013938 <RegionGetPhyParam>
 801189a:	4603      	mov	r3, r0
 801189c:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 801189e:	6a3b      	ldr	r3, [r7, #32]
 80118a0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	689b      	ldr	r3, [r3, #8]
 80118a8:	68fa      	ldr	r2, [r7, #12]
 80118aa:	89d2      	ldrh	r2, [r2, #14]
 80118ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80118b0:	fb01 f202 	mul.w	r2, r1, r2
 80118b4:	1a9b      	subs	r3, r3, r2
 80118b6:	2b01      	cmp	r3, #1
 80118b8:	d12e      	bne.n	8011918 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80118ba:	2322      	movs	r3, #34	@ 0x22
 80118bc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                    getPhy.Datarate = datarate;
 80118c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80118c4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	7c9b      	ldrb	r3, [r3, #18]
 80118cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	7cdb      	ldrb	r3, [r3, #19]
 80118d4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80118d8:	4611      	mov	r1, r2
 80118da:	4618      	mov	r0, r3
 80118dc:	f002 f82c 	bl	8013938 <RegionGetPhyParam>
 80118e0:	4603      	mov	r3, r0
 80118e2:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 80118e4:	6a3b      	ldr	r3, [r7, #32]
 80118e6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

                    if( datarate == minTxDatarate )
 80118ea:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 80118ee:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d110      	bne.n	8011918 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 80118f6:	2300      	movs	r3, #0
 80118f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        if( adrNext->UpdateChanMask == true )
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	791b      	ldrb	r3, [r3, #4]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d009      	beq.n	8011918 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011904:	2302      	movs	r3, #2
 8011906:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	7cdb      	ldrb	r3, [r3, #19]
 801190c:	f107 0214 	add.w	r2, r7, #20
 8011910:	4611      	mov	r1, r2
 8011912:	4618      	mov	r0, r3
 8011914:	f002 f847 	bl	80139a6 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8011918:	68bb      	ldr	r3, [r7, #8]
 801191a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 801191e:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8011926:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8011928:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801192c:	4618      	mov	r0, r3
 801192e:	3730      	adds	r7, #48	@ 0x30
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}

08011934 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b084      	sub	sp, #16
 8011938:	af00      	add	r7, sp, #0
 801193a:	60f8      	str	r0, [r7, #12]
 801193c:	60b9      	str	r1, [r7, #8]
 801193e:	607a      	str	r2, [r7, #4]
 8011940:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	789b      	ldrb	r3, [r3, #2]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d107      	bne.n	801195a <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	687a      	ldr	r2, [r7, #4]
 801194e:	68b9      	ldr	r1, [r7, #8]
 8011950:	68f8      	ldr	r0, [r7, #12]
 8011952:	f7ff ff3b 	bl	80117cc <CalcNextV10X>
 8011956:	4603      	mov	r3, r0
 8011958:	e000      	b.n	801195c <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 801195a:	2300      	movs	r3, #0
}
 801195c:	4618      	mov	r0, r3
 801195e:	3710      	adds	r7, #16
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}

08011964 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8011964:	b480      	push	{r7}
 8011966:	b085      	sub	sp, #20
 8011968:	af00      	add	r7, sp, #0
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011970:	bf00      	nop
 8011972:	3714      	adds	r7, #20
 8011974:	46bd      	mov	sp, r7
 8011976:	bc80      	pop	{r7}
 8011978:	4770      	bx	lr

0801197a <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801197a:	b480      	push	{r7}
 801197c:	b083      	sub	sp, #12
 801197e:	af00      	add	r7, sp, #0
 8011980:	4603      	mov	r3, r0
 8011982:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011984:	bf00      	nop
 8011986:	370c      	adds	r7, #12
 8011988:	46bd      	mov	sp, r7
 801198a:	bc80      	pop	{r7}
 801198c:	4770      	bx	lr

0801198e <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801198e:	b480      	push	{r7}
 8011990:	b083      	sub	sp, #12
 8011992:	af00      	add	r7, sp, #0
 8011994:	4603      	mov	r3, r0
 8011996:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011998:	bf00      	nop
 801199a:	370c      	adds	r7, #12
 801199c:	46bd      	mov	sp, r7
 801199e:	bc80      	pop	{r7}
 80119a0:	4770      	bx	lr

080119a2 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80119a2:	b480      	push	{r7}
 80119a4:	b083      	sub	sp, #12
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	4603      	mov	r3, r0
 80119aa:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80119ac:	bf00      	nop
 80119ae:	370c      	adds	r7, #12
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bc80      	pop	{r7}
 80119b4:	4770      	bx	lr

080119b6 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80119b6:	b480      	push	{r7}
 80119b8:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80119ba:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80119bc:	4618      	mov	r0, r3
 80119be:	46bd      	mov	sp, r7
 80119c0:	bc80      	pop	{r7}
 80119c2:	4770      	bx	lr

080119c4 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80119c4:	b480      	push	{r7}
 80119c6:	b083      	sub	sp, #12
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80119cc:	bf00      	nop
 80119ce:	370c      	adds	r7, #12
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bc80      	pop	{r7}
 80119d4:	4770      	bx	lr

080119d6 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80119d6:	b480      	push	{r7}
 80119d8:	b083      	sub	sp, #12
 80119da:	af00      	add	r7, sp, #0
 80119dc:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80119de:	bf00      	nop
 80119e0:	370c      	adds	r7, #12
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bc80      	pop	{r7}
 80119e6:	4770      	bx	lr

080119e8 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80119e8:	b480      	push	{r7}
 80119ea:	b083      	sub	sp, #12
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80119f0:	bf00      	nop
 80119f2:	370c      	adds	r7, #12
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bc80      	pop	{r7}
 80119f8:	4770      	bx	lr

080119fa <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80119fa:	b480      	push	{r7}
 80119fc:	b083      	sub	sp, #12
 80119fe:	af00      	add	r7, sp, #0
 8011a00:	6078      	str	r0, [r7, #4]
 8011a02:	460b      	mov	r3, r1
 8011a04:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8011a06:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	370c      	adds	r7, #12
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bc80      	pop	{r7}
 8011a10:	4770      	bx	lr

08011a12 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8011a12:	b480      	push	{r7}
 8011a14:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011a16:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	bc80      	pop	{r7}
 8011a1e:	4770      	bx	lr

08011a20 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8011a20:	b480      	push	{r7}
 8011a22:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011a24:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bc80      	pop	{r7}
 8011a2c:	4770      	bx	lr

08011a2e <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8011a2e:	b480      	push	{r7}
 8011a30:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011a32:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bc80      	pop	{r7}
 8011a3a:	4770      	bx	lr

08011a3c <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8011a3c:	b480      	push	{r7}
 8011a3e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011a40:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011a42:	4618      	mov	r0, r3
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bc80      	pop	{r7}
 8011a48:	4770      	bx	lr

08011a4a <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8011a4a:	b480      	push	{r7}
 8011a4c:	b083      	sub	sp, #12
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	4603      	mov	r3, r0
 8011a52:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011a54:	bf00      	nop
 8011a56:	370c      	adds	r7, #12
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bc80      	pop	{r7}
 8011a5c:	4770      	bx	lr

08011a5e <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8011a5e:	b480      	push	{r7}
 8011a60:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011a62:	bf00      	nop
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bc80      	pop	{r7}
 8011a68:	4770      	bx	lr

08011a6a <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8011a6a:	b480      	push	{r7}
 8011a6c:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011a6e:	bf00      	nop
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bc80      	pop	{r7}
 8011a74:	4770      	bx	lr

08011a76 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8011a76:	b480      	push	{r7}
 8011a78:	b083      	sub	sp, #12
 8011a7a:	af00      	add	r7, sp, #0
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011a80:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	370c      	adds	r7, #12
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bc80      	pop	{r7}
 8011a8a:	4770      	bx	lr

08011a8c <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b083      	sub	sp, #12
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011a94:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	370c      	adds	r7, #12
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bc80      	pop	{r7}
 8011a9e:	4770      	bx	lr

08011aa0 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b083      	sub	sp, #12
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011aa8:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	370c      	adds	r7, #12
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bc80      	pop	{r7}
 8011ab2:	4770      	bx	lr

08011ab4 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ab8:	bf00      	nop
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bc80      	pop	{r7}
 8011abe:	4770      	bx	lr

08011ac0 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b083      	sub	sp, #12
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	6039      	str	r1, [r7, #0]
 8011aca:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8011acc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	370c      	adds	r7, #12
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bc80      	pop	{r7}
 8011ad6:	4770      	bx	lr

08011ad8 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8011ad8:	b480      	push	{r7}
 8011ada:	b083      	sub	sp, #12
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	4603      	mov	r3, r0
 8011ae0:	603a      	str	r2, [r7, #0]
 8011ae2:	80fb      	strh	r3, [r7, #6]
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ae8:	bf00      	nop
 8011aea:	370c      	adds	r7, #12
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bc80      	pop	{r7}
 8011af0:	4770      	bx	lr

08011af2 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8011af2:	b480      	push	{r7}
 8011af4:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011af6:	bf00      	nop
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bc80      	pop	{r7}
 8011afc:	4770      	bx	lr

08011afe <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8011afe:	b480      	push	{r7}
 8011b00:	b083      	sub	sp, #12
 8011b02:	af00      	add	r7, sp, #0
 8011b04:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8011b06:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	370c      	adds	r7, #12
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bc80      	pop	{r7}
 8011b10:	4770      	bx	lr

08011b12 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8011b12:	b480      	push	{r7}
 8011b14:	b083      	sub	sp, #12
 8011b16:	af00      	add	r7, sp, #0
 8011b18:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8011b1a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	370c      	adds	r7, #12
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bc80      	pop	{r7}
 8011b24:	4770      	bx	lr

08011b26 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8011b26:	b480      	push	{r7}
 8011b28:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b2a:	bf00      	nop
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bc80      	pop	{r7}
 8011b30:	4770      	bx	lr

08011b32 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8011b32:	b480      	push	{r7}
 8011b34:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b36:	bf00      	nop
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bc80      	pop	{r7}
 8011b3c:	4770      	bx	lr

08011b3e <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8011b3e:	b480      	push	{r7}
 8011b40:	b085      	sub	sp, #20
 8011b42:	af00      	add	r7, sp, #0
 8011b44:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	81fb      	strh	r3, [r7, #14]
 8011b4e:	e00a      	b.n	8011b66 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8011b50:	89fb      	ldrh	r3, [r7, #14]
 8011b52:	68ba      	ldr	r2, [r7, #8]
 8011b54:	4413      	add	r3, r2
 8011b56:	781b      	ldrb	r3, [r3, #0]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d001      	beq.n	8011b60 <IsSlotFree+0x22>
        {
            return false;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	e006      	b.n	8011b6e <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011b60:	89fb      	ldrh	r3, [r7, #14]
 8011b62:	3301      	adds	r3, #1
 8011b64:	81fb      	strh	r3, [r7, #14]
 8011b66:	89fb      	ldrh	r3, [r7, #14]
 8011b68:	2b0f      	cmp	r3, #15
 8011b6a:	d9f1      	bls.n	8011b50 <IsSlotFree+0x12>
        }
    }
    return true;
 8011b6c:	2301      	movs	r3, #1
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3714      	adds	r7, #20
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bc80      	pop	{r7}
 8011b76:	4770      	bx	lr

08011b78 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8011b82:	e007      	b.n	8011b94 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8011b84:	79fb      	ldrb	r3, [r7, #7]
 8011b86:	3301      	adds	r3, #1
 8011b88:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8011b8a:	79fb      	ldrb	r3, [r7, #7]
 8011b8c:	2b0f      	cmp	r3, #15
 8011b8e:	d101      	bne.n	8011b94 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8011b90:	2300      	movs	r3, #0
 8011b92:	e012      	b.n	8011bba <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8011b94:	79fb      	ldrb	r3, [r7, #7]
 8011b96:	011b      	lsls	r3, r3, #4
 8011b98:	3308      	adds	r3, #8
 8011b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8011bc4 <MallocNewMacCommandSlot+0x4c>)
 8011b9c:	4413      	add	r3, r2
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7ff ffcd 	bl	8011b3e <IsSlotFree>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	f083 0301 	eor.w	r3, r3, #1
 8011baa:	b2db      	uxtb	r3, r3
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d1e9      	bne.n	8011b84 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8011bb0:	79fb      	ldrb	r3, [r7, #7]
 8011bb2:	011b      	lsls	r3, r3, #4
 8011bb4:	3308      	adds	r3, #8
 8011bb6:	4a03      	ldr	r2, [pc, #12]	@ (8011bc4 <MallocNewMacCommandSlot+0x4c>)
 8011bb8:	4413      	add	r3, r2
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3708      	adds	r7, #8
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}
 8011bc2:	bf00      	nop
 8011bc4:	20001200 	.word	0x20001200

08011bc8 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b082      	sub	sp, #8
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d101      	bne.n	8011bda <FreeMacCommandSlot+0x12>
    {
        return false;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	e005      	b.n	8011be6 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8011bda:	2210      	movs	r2, #16
 8011bdc:	2100      	movs	r1, #0
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f005 fdb8 	bl	8017754 <memset1>

    return true;
 8011be4:	2301      	movs	r3, #1
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	3708      	adds	r7, #8
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bd80      	pop	{r7, pc}

08011bee <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8011bee:	b480      	push	{r7}
 8011bf0:	b083      	sub	sp, #12
 8011bf2:	af00      	add	r7, sp, #0
 8011bf4:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d101      	bne.n	8011c00 <LinkedListInit+0x12>
    {
        return false;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	e006      	b.n	8011c0e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2200      	movs	r2, #0
 8011c04:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	605a      	str	r2, [r3, #4]

    return true;
 8011c0c:	2301      	movs	r3, #1
}
 8011c0e:	4618      	mov	r0, r3
 8011c10:	370c      	adds	r7, #12
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bc80      	pop	{r7}
 8011c16:	4770      	bx	lr

08011c18 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8011c18:	b480      	push	{r7}
 8011c1a:	b083      	sub	sp, #12
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
 8011c20:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d002      	beq.n	8011c2e <LinkedListAdd+0x16>
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d101      	bne.n	8011c32 <LinkedListAdd+0x1a>
    {
        return false;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	e015      	b.n	8011c5e <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d102      	bne.n	8011c40 <LinkedListAdd+0x28>
    {
        list->First = element;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	683a      	ldr	r2, [r7, #0]
 8011c3e:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	685b      	ldr	r3, [r3, #4]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d003      	beq.n	8011c50 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	685b      	ldr	r3, [r3, #4]
 8011c4c:	683a      	ldr	r2, [r7, #0]
 8011c4e:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	2200      	movs	r2, #0
 8011c54:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	683a      	ldr	r2, [r7, #0]
 8011c5a:	605a      	str	r2, [r3, #4]

    return true;
 8011c5c:	2301      	movs	r3, #1
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	370c      	adds	r7, #12
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bc80      	pop	{r7}
 8011c66:	4770      	bx	lr

08011c68 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8011c68:	b480      	push	{r7}
 8011c6a:	b085      	sub	sp, #20
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d002      	beq.n	8011c7e <LinkedListGetPrevious+0x16>
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d101      	bne.n	8011c82 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	e016      	b.n	8011cb0 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8011c88:	683a      	ldr	r2, [r7, #0]
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	429a      	cmp	r2, r3
 8011c8e:	d00c      	beq.n	8011caa <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8011c90:	e002      	b.n	8011c98 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d007      	beq.n	8011cae <LinkedListGetPrevious+0x46>
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	683a      	ldr	r2, [r7, #0]
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d1f4      	bne.n	8011c92 <LinkedListGetPrevious+0x2a>
 8011ca8:	e001      	b.n	8011cae <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8011caa:	2300      	movs	r3, #0
 8011cac:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8011cae:	68fb      	ldr	r3, [r7, #12]
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	3714      	adds	r7, #20
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bc80      	pop	{r7}
 8011cb8:	4770      	bx	lr

08011cba <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8011cba:	b580      	push	{r7, lr}
 8011cbc:	b084      	sub	sp, #16
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6078      	str	r0, [r7, #4]
 8011cc2:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d002      	beq.n	8011cd0 <LinkedListRemove+0x16>
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d101      	bne.n	8011cd4 <LinkedListRemove+0x1a>
    {
        return false;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	e020      	b.n	8011d16 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8011cd4:	6839      	ldr	r1, [r7, #0]
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f7ff ffc6 	bl	8011c68 <LinkedListGetPrevious>
 8011cdc:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	683a      	ldr	r2, [r7, #0]
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d103      	bne.n	8011cf0 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	681a      	ldr	r2, [r3, #0]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	685b      	ldr	r3, [r3, #4]
 8011cf4:	683a      	ldr	r2, [r7, #0]
 8011cf6:	429a      	cmp	r2, r3
 8011cf8:	d102      	bne.n	8011d00 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	68fa      	ldr	r2, [r7, #12]
 8011cfe:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d003      	beq.n	8011d0e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	681a      	ldr	r2, [r3, #0]
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	2200      	movs	r2, #0
 8011d12:	601a      	str	r2, [r3, #0]

    return true;
 8011d14:	2301      	movs	r3, #1
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	3710      	adds	r7, #16
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}

08011d1e <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8011d1e:	b480      	push	{r7}
 8011d20:	b083      	sub	sp, #12
 8011d22:	af00      	add	r7, sp, #0
 8011d24:	4603      	mov	r3, r0
 8011d26:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8011d28:	79fb      	ldrb	r3, [r7, #7]
 8011d2a:	2b05      	cmp	r3, #5
 8011d2c:	d004      	beq.n	8011d38 <IsSticky+0x1a>
 8011d2e:	2b05      	cmp	r3, #5
 8011d30:	db04      	blt.n	8011d3c <IsSticky+0x1e>
 8011d32:	3b08      	subs	r3, #8
 8011d34:	2b02      	cmp	r3, #2
 8011d36:	d801      	bhi.n	8011d3c <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8011d38:	2301      	movs	r3, #1
 8011d3a:	e000      	b.n	8011d3e <IsSticky+0x20>
        default:
            return false;
 8011d3c:	2300      	movs	r3, #0
    }
}
 8011d3e:	4618      	mov	r0, r3
 8011d40:	370c      	adds	r7, #12
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bc80      	pop	{r7}
 8011d46:	4770      	bx	lr

08011d48 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8011d48:	b480      	push	{r7}
 8011d4a:	b083      	sub	sp, #12
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	4603      	mov	r3, r0
 8011d50:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8011d52:	2300      	movs	r3, #0
    }
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	370c      	adds	r7, #12
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bc80      	pop	{r7}
 8011d5c:	4770      	bx	lr
	...

08011d60 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8011d64:	22fc      	movs	r2, #252	@ 0xfc
 8011d66:	2100      	movs	r1, #0
 8011d68:	4804      	ldr	r0, [pc, #16]	@ (8011d7c <LoRaMacCommandsInit+0x1c>)
 8011d6a:	f005 fcf3 	bl	8017754 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8011d6e:	4803      	ldr	r0, [pc, #12]	@ (8011d7c <LoRaMacCommandsInit+0x1c>)
 8011d70:	f7ff ff3d 	bl	8011bee <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8011d74:	2300      	movs	r3, #0
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	20001200 	.word	0x20001200

08011d80 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b086      	sub	sp, #24
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	4603      	mov	r3, r0
 8011d88:	60b9      	str	r1, [r7, #8]
 8011d8a:	607a      	str	r2, [r7, #4]
 8011d8c:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d101      	bne.n	8011d98 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011d94:	2301      	movs	r3, #1
 8011d96:	e03b      	b.n	8011e10 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8011d98:	f7ff feee 	bl	8011b78 <MallocNewMacCommandSlot>
 8011d9c:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8011d9e:	697b      	ldr	r3, [r7, #20]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d101      	bne.n	8011da8 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8011da4:	2302      	movs	r3, #2
 8011da6:	e033      	b.n	8011e10 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8011da8:	6979      	ldr	r1, [r7, #20]
 8011daa:	481b      	ldr	r0, [pc, #108]	@ (8011e18 <LoRaMacCommandsAddCmd+0x98>)
 8011dac:	f7ff ff34 	bl	8011c18 <LinkedListAdd>
 8011db0:	4603      	mov	r3, r0
 8011db2:	f083 0301 	eor.w	r3, r3, #1
 8011db6:	b2db      	uxtb	r3, r3
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d001      	beq.n	8011dc0 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8011dbc:	2305      	movs	r3, #5
 8011dbe:	e027      	b.n	8011e10 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	7bfa      	ldrb	r2, [r7, #15]
 8011dc4:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	687a      	ldr	r2, [r7, #4]
 8011dca:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8011dcc:	697b      	ldr	r3, [r7, #20]
 8011dce:	3305      	adds	r3, #5
 8011dd0:	687a      	ldr	r2, [r7, #4]
 8011dd2:	b292      	uxth	r2, r2
 8011dd4:	68b9      	ldr	r1, [r7, #8]
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f005 fc81 	bl	80176de <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8011ddc:	7bfb      	ldrb	r3, [r7, #15]
 8011dde:	4618      	mov	r0, r3
 8011de0:	f7ff ff9d 	bl	8011d1e <IsSticky>
 8011de4:	4603      	mov	r3, r0
 8011de6:	461a      	mov	r2, r3
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8011dec:	7bfb      	ldrb	r3, [r7, #15]
 8011dee:	4618      	mov	r0, r3
 8011df0:	f7ff ffaa 	bl	8011d48 <IsConfirmationRequired>
 8011df4:	4603      	mov	r3, r0
 8011df6:	461a      	mov	r2, r3
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8011dfc:	4b06      	ldr	r3, [pc, #24]	@ (8011e18 <LoRaMacCommandsAddCmd+0x98>)
 8011dfe:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	4413      	add	r3, r2
 8011e06:	3301      	adds	r3, #1
 8011e08:	4a03      	ldr	r2, [pc, #12]	@ (8011e18 <LoRaMacCommandsAddCmd+0x98>)
 8011e0a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8011e0e:	2300      	movs	r3, #0
}
 8011e10:	4618      	mov	r0, r3
 8011e12:	3718      	adds	r7, #24
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}
 8011e18:	20001200 	.word	0x20001200

08011e1c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b082      	sub	sp, #8
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d101      	bne.n	8011e2e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	e021      	b.n	8011e72 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8011e2e:	6879      	ldr	r1, [r7, #4]
 8011e30:	4812      	ldr	r0, [pc, #72]	@ (8011e7c <LoRaMacCommandsRemoveCmd+0x60>)
 8011e32:	f7ff ff42 	bl	8011cba <LinkedListRemove>
 8011e36:	4603      	mov	r3, r0
 8011e38:	f083 0301 	eor.w	r3, r3, #1
 8011e3c:	b2db      	uxtb	r3, r3
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d001      	beq.n	8011e46 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8011e42:	2303      	movs	r3, #3
 8011e44:	e015      	b.n	8011e72 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8011e46:	4b0d      	ldr	r3, [pc, #52]	@ (8011e7c <LoRaMacCommandsRemoveCmd+0x60>)
 8011e48:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	689b      	ldr	r3, [r3, #8]
 8011e50:	1ad3      	subs	r3, r2, r3
 8011e52:	3b01      	subs	r3, #1
 8011e54:	4a09      	ldr	r2, [pc, #36]	@ (8011e7c <LoRaMacCommandsRemoveCmd+0x60>)
 8011e56:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f7ff feb4 	bl	8011bc8 <FreeMacCommandSlot>
 8011e60:	4603      	mov	r3, r0
 8011e62:	f083 0301 	eor.w	r3, r3, #1
 8011e66:	b2db      	uxtb	r3, r3
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d001      	beq.n	8011e70 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8011e6c:	2305      	movs	r3, #5
 8011e6e:	e000      	b.n	8011e72 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011e70:	2300      	movs	r3, #0
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3708      	adds	r7, #8
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	20001200 	.word	0x20001200

08011e80 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8011e80:	b480      	push	{r7}
 8011e82:	b085      	sub	sp, #20
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	4603      	mov	r3, r0
 8011e88:	6039      	str	r1, [r7, #0]
 8011e8a:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8011e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8011ec8 <LoRaMacCommandsGetCmd+0x48>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8011e92:	e002      	b.n	8011e9a <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d004      	beq.n	8011eaa <LoRaMacCommandsGetCmd+0x2a>
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	791b      	ldrb	r3, [r3, #4]
 8011ea4:	79fa      	ldrb	r2, [r7, #7]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d1f4      	bne.n	8011e94 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	68fa      	ldr	r2, [r7, #12]
 8011eae:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d101      	bne.n	8011eba <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8011eb6:	2303      	movs	r3, #3
 8011eb8:	e000      	b.n	8011ebc <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8011eba:	2300      	movs	r3, #0
}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3714      	adds	r7, #20
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bc80      	pop	{r7}
 8011ec4:	4770      	bx	lr
 8011ec6:	bf00      	nop
 8011ec8:	20001200 	.word	0x20001200

08011ecc <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b082      	sub	sp, #8
 8011ed0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8011ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8011f10 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8011ed8:	e012      	b.n	8011f00 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	7b1b      	ldrb	r3, [r3, #12]
 8011ede:	f083 0301 	eor.w	r3, r3, #1
 8011ee2:	b2db      	uxtb	r3, r3
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d008      	beq.n	8011efa <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f7ff ff94 	bl	8011e1c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	607b      	str	r3, [r7, #4]
 8011ef8:	e002      	b.n	8011f00 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d1e9      	bne.n	8011eda <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011f06:	2300      	movs	r3, #0
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3708      	adds	r7, #8
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	20001200 	.word	0x20001200

08011f14 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8011f1a:	4b13      	ldr	r3, [pc, #76]	@ (8011f68 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8011f20:	e01a      	b.n	8011f58 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	791b      	ldrb	r3, [r3, #4]
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f7ff fef6 	bl	8011d1e <IsSticky>
 8011f32:	4603      	mov	r3, r0
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d00d      	beq.n	8011f54 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	791b      	ldrb	r3, [r3, #4]
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f7ff ff03 	bl	8011d48 <IsConfirmationRequired>
 8011f42:	4603      	mov	r3, r0
 8011f44:	f083 0301 	eor.w	r3, r3, #1
 8011f48:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d002      	beq.n	8011f54 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f7ff ff64 	bl	8011e1c <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d1e1      	bne.n	8011f22 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011f5e:	2300      	movs	r3, #0
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3708      	adds	r7, #8
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}
 8011f68:	20001200 	.word	0x20001200

08011f6c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b083      	sub	sp, #12
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d101      	bne.n	8011f7e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011f7a:	2301      	movs	r3, #1
 8011f7c:	e005      	b.n	8011f8a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8011f7e:	4b05      	ldr	r3, [pc, #20]	@ (8011f94 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8011f80:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8011f88:	2300      	movs	r3, #0
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	370c      	adds	r7, #12
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bc80      	pop	{r7}
 8011f92:	4770      	bx	lr
 8011f94:	20001200 	.word	0x20001200

08011f98 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b088      	sub	sp, #32
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	60b9      	str	r1, [r7, #8]
 8011fa2:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8011fa4:	4b25      	ldr	r3, [pc, #148]	@ (801203c <LoRaMacCommandsSerializeCmds+0xa4>)
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8011faa:	2300      	movs	r3, #0
 8011fac:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d002      	beq.n	8011fba <LoRaMacCommandsSerializeCmds+0x22>
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d126      	bne.n	8012008 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011fba:	2301      	movs	r3, #1
 8011fbc:	e039      	b.n	8012032 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8011fbe:	7efb      	ldrb	r3, [r7, #27]
 8011fc0:	68fa      	ldr	r2, [r7, #12]
 8011fc2:	1ad2      	subs	r2, r2, r3
 8011fc4:	69fb      	ldr	r3, [r7, #28]
 8011fc6:	689b      	ldr	r3, [r3, #8]
 8011fc8:	3301      	adds	r3, #1
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	d320      	bcc.n	8012010 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8011fce:	7efb      	ldrb	r3, [r7, #27]
 8011fd0:	1c5a      	adds	r2, r3, #1
 8011fd2:	76fa      	strb	r2, [r7, #27]
 8011fd4:	461a      	mov	r2, r3
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	4413      	add	r3, r2
 8011fda:	69fa      	ldr	r2, [r7, #28]
 8011fdc:	7912      	ldrb	r2, [r2, #4]
 8011fde:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8011fe0:	7efb      	ldrb	r3, [r7, #27]
 8011fe2:	687a      	ldr	r2, [r7, #4]
 8011fe4:	18d0      	adds	r0, r2, r3
 8011fe6:	69fb      	ldr	r3, [r7, #28]
 8011fe8:	1d59      	adds	r1, r3, #5
 8011fea:	69fb      	ldr	r3, [r7, #28]
 8011fec:	689b      	ldr	r3, [r3, #8]
 8011fee:	b29b      	uxth	r3, r3
 8011ff0:	461a      	mov	r2, r3
 8011ff2:	f005 fb74 	bl	80176de <memcpy1>
            itr += curElement->PayloadSize;
 8011ff6:	69fb      	ldr	r3, [r7, #28]
 8011ff8:	689b      	ldr	r3, [r3, #8]
 8011ffa:	b2da      	uxtb	r2, r3
 8011ffc:	7efb      	ldrb	r3, [r7, #27]
 8011ffe:	4413      	add	r3, r2
 8012000:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8012002:	69fb      	ldr	r3, [r7, #28]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012008:	69fb      	ldr	r3, [r7, #28]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d1d7      	bne.n	8011fbe <LoRaMacCommandsSerializeCmds+0x26>
 801200e:	e009      	b.n	8012024 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8012010:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8012012:	e007      	b.n	8012024 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8012014:	69fb      	ldr	r3, [r7, #28]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801201a:	69f8      	ldr	r0, [r7, #28]
 801201c:	f7ff fefe 	bl	8011e1c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012024:	69fb      	ldr	r3, [r7, #28]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d1f4      	bne.n	8012014 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801202a:	68b8      	ldr	r0, [r7, #8]
 801202c:	f7ff ff9e 	bl	8011f6c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8012030:	2300      	movs	r3, #0
}
 8012032:	4618      	mov	r0, r3
 8012034:	3720      	adds	r7, #32
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}
 801203a:	bf00      	nop
 801203c:	20001200 	.word	0x20001200

08012040 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012040:	b480      	push	{r7}
 8012042:	b085      	sub	sp, #20
 8012044:	af00      	add	r7, sp, #0
 8012046:	4603      	mov	r3, r0
 8012048:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801204a:	2300      	movs	r3, #0
 801204c:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 801204e:	79fb      	ldrb	r3, [r7, #7]
 8012050:	3b02      	subs	r3, #2
 8012052:	2b11      	cmp	r3, #17
 8012054:	d850      	bhi.n	80120f8 <LoRaMacCommandsGetCmdSize+0xb8>
 8012056:	a201      	add	r2, pc, #4	@ (adr r2, 801205c <LoRaMacCommandsGetCmdSize+0x1c>)
 8012058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801205c:	080120a5 	.word	0x080120a5
 8012060:	080120ab 	.word	0x080120ab
 8012064:	080120b1 	.word	0x080120b1
 8012068:	080120b7 	.word	0x080120b7
 801206c:	080120bd 	.word	0x080120bd
 8012070:	080120c3 	.word	0x080120c3
 8012074:	080120c9 	.word	0x080120c9
 8012078:	080120cf 	.word	0x080120cf
 801207c:	080120d5 	.word	0x080120d5
 8012080:	080120f9 	.word	0x080120f9
 8012084:	080120f9 	.word	0x080120f9
 8012088:	080120db 	.word	0x080120db
 801208c:	080120f9 	.word	0x080120f9
 8012090:	080120f9 	.word	0x080120f9
 8012094:	080120e1 	.word	0x080120e1
 8012098:	080120e7 	.word	0x080120e7
 801209c:	080120ed 	.word	0x080120ed
 80120a0:	080120f3 	.word	0x080120f3
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80120a4:	2303      	movs	r3, #3
 80120a6:	73fb      	strb	r3, [r7, #15]
            break;
 80120a8:	e027      	b.n	80120fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80120aa:	2305      	movs	r3, #5
 80120ac:	73fb      	strb	r3, [r7, #15]
            break;
 80120ae:	e024      	b.n	80120fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80120b0:	2302      	movs	r3, #2
 80120b2:	73fb      	strb	r3, [r7, #15]
            break;
 80120b4:	e021      	b.n	80120fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80120b6:	2305      	movs	r3, #5
 80120b8:	73fb      	strb	r3, [r7, #15]
            break;
 80120ba:	e01e      	b.n	80120fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80120bc:	2301      	movs	r3, #1
 80120be:	73fb      	strb	r3, [r7, #15]
            break;
 80120c0:	e01b      	b.n	80120fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80120c2:	2306      	movs	r3, #6
 80120c4:	73fb      	strb	r3, [r7, #15]
            break;
 80120c6:	e018      	b.n	80120fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80120c8:	2302      	movs	r3, #2
 80120ca:	73fb      	strb	r3, [r7, #15]
            break;
 80120cc:	e015      	b.n	80120fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80120ce:	2302      	movs	r3, #2
 80120d0:	73fb      	strb	r3, [r7, #15]
            break;
 80120d2:	e012      	b.n	80120fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80120d4:	2305      	movs	r3, #5
 80120d6:	73fb      	strb	r3, [r7, #15]
            break;
 80120d8:	e00f      	b.n	80120fa <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80120da:	2306      	movs	r3, #6
 80120dc:	73fb      	strb	r3, [r7, #15]
            break;
 80120de:	e00c      	b.n	80120fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80120e0:	2301      	movs	r3, #1
 80120e2:	73fb      	strb	r3, [r7, #15]
            break;
 80120e4:	e009      	b.n	80120fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80120e6:	2305      	movs	r3, #5
 80120e8:	73fb      	strb	r3, [r7, #15]
            break;
 80120ea:	e006      	b.n	80120fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80120ec:	2304      	movs	r3, #4
 80120ee:	73fb      	strb	r3, [r7, #15]
            break;
 80120f0:	e003      	b.n	80120fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80120f2:	2304      	movs	r3, #4
 80120f4:	73fb      	strb	r3, [r7, #15]
            break;
 80120f6:	e000      	b.n	80120fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80120f8:	bf00      	nop
        }
    }
    return cidSize;
 80120fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80120fc:	4618      	mov	r0, r3
 80120fe:	3714      	adds	r7, #20
 8012100:	46bd      	mov	sp, r7
 8012102:	bc80      	pop	{r7}
 8012104:	4770      	bx	lr
 8012106:	bf00      	nop

08012108 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012108:	b480      	push	{r7}
 801210a:	b083      	sub	sp, #12
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	4a07      	ldr	r2, [pc, #28]	@ (8012130 <IncreaseBufferPointer+0x28>)
 8012114:	4293      	cmp	r3, r2
 8012116:	d102      	bne.n	801211e <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012118:	4b06      	ldr	r3, [pc, #24]	@ (8012134 <IncreaseBufferPointer+0x2c>)
 801211a:	607b      	str	r3, [r7, #4]
 801211c:	e002      	b.n	8012124 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	3304      	adds	r3, #4
 8012122:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8012124:	687b      	ldr	r3, [r7, #4]
}
 8012126:	4618      	mov	r0, r3
 8012128:	370c      	adds	r7, #12
 801212a:	46bd      	mov	sp, r7
 801212c:	bc80      	pop	{r7}
 801212e:	4770      	bx	lr
 8012130:	20001318 	.word	0x20001318
 8012134:	20001308 	.word	0x20001308

08012138 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012138:	b480      	push	{r7}
 801213a:	b083      	sub	sp, #12
 801213c:	af00      	add	r7, sp, #0
 801213e:	4603      	mov	r3, r0
 8012140:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8012142:	79fb      	ldrb	r3, [r7, #7]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d101      	bne.n	801214c <IsListEmpty+0x14>
    {
        return true;
 8012148:	2301      	movs	r3, #1
 801214a:	e000      	b.n	801214e <IsListEmpty+0x16>
    }
    return false;
 801214c:	2300      	movs	r3, #0
}
 801214e:	4618      	mov	r0, r3
 8012150:	370c      	adds	r7, #12
 8012152:	46bd      	mov	sp, r7
 8012154:	bc80      	pop	{r7}
 8012156:	4770      	bx	lr

08012158 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012158:	b480      	push	{r7}
 801215a:	b083      	sub	sp, #12
 801215c:	af00      	add	r7, sp, #0
 801215e:	4603      	mov	r3, r0
 8012160:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8012162:	79fb      	ldrb	r3, [r7, #7]
 8012164:	2b04      	cmp	r3, #4
 8012166:	d901      	bls.n	801216c <IsListFull+0x14>
    {
        return true;
 8012168:	2301      	movs	r3, #1
 801216a:	e000      	b.n	801216e <IsListFull+0x16>
    }
    return false;
 801216c:	2300      	movs	r3, #0
}
 801216e:	4618      	mov	r0, r3
 8012170:	370c      	adds	r7, #12
 8012172:	46bd      	mov	sp, r7
 8012174:	bc80      	pop	{r7}
 8012176:	4770      	bx	lr

08012178 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b086      	sub	sp, #24
 801217c:	af00      	add	r7, sp, #0
 801217e:	4603      	mov	r3, r0
 8012180:	60b9      	str	r1, [r7, #8]
 8012182:	607a      	str	r2, [r7, #4]
 8012184:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8012186:	68bb      	ldr	r3, [r7, #8]
 8012188:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801218a:	4b13      	ldr	r3, [pc, #76]	@ (80121d8 <GetElement+0x60>)
 801218c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012190:	4618      	mov	r0, r3
 8012192:	f7ff ffd1 	bl	8012138 <IsListEmpty>
 8012196:	4603      	mov	r3, r0
 8012198:	2b00      	cmp	r3, #0
 801219a:	d001      	beq.n	80121a0 <GetElement+0x28>
    {
        return NULL;
 801219c:	2300      	movs	r3, #0
 801219e:	e017      	b.n	80121d0 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80121a0:	2300      	movs	r3, #0
 80121a2:	74fb      	strb	r3, [r7, #19]
 80121a4:	e00d      	b.n	80121c2 <GetElement+0x4a>
    {
        if( element->Request == request )
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	781b      	ldrb	r3, [r3, #0]
 80121aa:	7bfa      	ldrb	r2, [r7, #15]
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d101      	bne.n	80121b4 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	e00d      	b.n	80121d0 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80121b4:	6978      	ldr	r0, [r7, #20]
 80121b6:	f7ff ffa7 	bl	8012108 <IncreaseBufferPointer>
 80121ba:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80121bc:	7cfb      	ldrb	r3, [r7, #19]
 80121be:	3301      	adds	r3, #1
 80121c0:	74fb      	strb	r3, [r7, #19]
 80121c2:	4b05      	ldr	r3, [pc, #20]	@ (80121d8 <GetElement+0x60>)
 80121c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80121c8:	7cfa      	ldrb	r2, [r7, #19]
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d3eb      	bcc.n	80121a6 <GetElement+0x2e>
    }

    return NULL;
 80121ce:	2300      	movs	r3, #0
}
 80121d0:	4618      	mov	r0, r3
 80121d2:	3718      	adds	r7, #24
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}
 80121d8:	200012fc 	.word	0x200012fc

080121dc <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b082      	sub	sp, #8
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80121e4:	4a0c      	ldr	r2, [pc, #48]	@ (8012218 <LoRaMacConfirmQueueInit+0x3c>)
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80121ea:	4b0b      	ldr	r3, [pc, #44]	@ (8012218 <LoRaMacConfirmQueueInit+0x3c>)
 80121ec:	2200      	movs	r2, #0
 80121ee:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80121f2:	4b09      	ldr	r3, [pc, #36]	@ (8012218 <LoRaMacConfirmQueueInit+0x3c>)
 80121f4:	4a09      	ldr	r2, [pc, #36]	@ (801221c <LoRaMacConfirmQueueInit+0x40>)
 80121f6:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80121f8:	4b07      	ldr	r3, [pc, #28]	@ (8012218 <LoRaMacConfirmQueueInit+0x3c>)
 80121fa:	4a08      	ldr	r2, [pc, #32]	@ (801221c <LoRaMacConfirmQueueInit+0x40>)
 80121fc:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80121fe:	2214      	movs	r2, #20
 8012200:	21ff      	movs	r1, #255	@ 0xff
 8012202:	4806      	ldr	r0, [pc, #24]	@ (801221c <LoRaMacConfirmQueueInit+0x40>)
 8012204:	f005 faa6 	bl	8017754 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012208:	4b03      	ldr	r3, [pc, #12]	@ (8012218 <LoRaMacConfirmQueueInit+0x3c>)
 801220a:	2201      	movs	r2, #1
 801220c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8012210:	bf00      	nop
 8012212:	3708      	adds	r7, #8
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}
 8012218:	200012fc 	.word	0x200012fc
 801221c:	20001308 	.word	0x20001308

08012220 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012228:	4b19      	ldr	r3, [pc, #100]	@ (8012290 <LoRaMacConfirmQueueAdd+0x70>)
 801222a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801222e:	4618      	mov	r0, r3
 8012230:	f7ff ff92 	bl	8012158 <IsListFull>
 8012234:	4603      	mov	r3, r0
 8012236:	2b00      	cmp	r3, #0
 8012238:	d001      	beq.n	801223e <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801223a:	2300      	movs	r3, #0
 801223c:	e023      	b.n	8012286 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 801223e:	4b14      	ldr	r3, [pc, #80]	@ (8012290 <LoRaMacConfirmQueueAdd+0x70>)
 8012240:	689b      	ldr	r3, [r3, #8]
 8012242:	687a      	ldr	r2, [r7, #4]
 8012244:	7812      	ldrb	r2, [r2, #0]
 8012246:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012248:	4b11      	ldr	r3, [pc, #68]	@ (8012290 <LoRaMacConfirmQueueAdd+0x70>)
 801224a:	689b      	ldr	r3, [r3, #8]
 801224c:	687a      	ldr	r2, [r7, #4]
 801224e:	7852      	ldrb	r2, [r2, #1]
 8012250:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012252:	4b0f      	ldr	r3, [pc, #60]	@ (8012290 <LoRaMacConfirmQueueAdd+0x70>)
 8012254:	689b      	ldr	r3, [r3, #8]
 8012256:	687a      	ldr	r2, [r7, #4]
 8012258:	78d2      	ldrb	r2, [r2, #3]
 801225a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 801225c:	4b0c      	ldr	r3, [pc, #48]	@ (8012290 <LoRaMacConfirmQueueAdd+0x70>)
 801225e:	689b      	ldr	r3, [r3, #8]
 8012260:	2200      	movs	r2, #0
 8012262:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012264:	4b0a      	ldr	r3, [pc, #40]	@ (8012290 <LoRaMacConfirmQueueAdd+0x70>)
 8012266:	f893 3020 	ldrb.w	r3, [r3, #32]
 801226a:	3301      	adds	r3, #1
 801226c:	b2da      	uxtb	r2, r3
 801226e:	4b08      	ldr	r3, [pc, #32]	@ (8012290 <LoRaMacConfirmQueueAdd+0x70>)
 8012270:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012274:	4b06      	ldr	r3, [pc, #24]	@ (8012290 <LoRaMacConfirmQueueAdd+0x70>)
 8012276:	689b      	ldr	r3, [r3, #8]
 8012278:	4618      	mov	r0, r3
 801227a:	f7ff ff45 	bl	8012108 <IncreaseBufferPointer>
 801227e:	4603      	mov	r3, r0
 8012280:	4a03      	ldr	r2, [pc, #12]	@ (8012290 <LoRaMacConfirmQueueAdd+0x70>)
 8012282:	6093      	str	r3, [r2, #8]

    return true;
 8012284:	2301      	movs	r3, #1
}
 8012286:	4618      	mov	r0, r3
 8012288:	3708      	adds	r7, #8
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	200012fc 	.word	0x200012fc

08012294 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012294:	b580      	push	{r7, lr}
 8012296:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012298:	4b0e      	ldr	r3, [pc, #56]	@ (80122d4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801229a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801229e:	4618      	mov	r0, r3
 80122a0:	f7ff ff4a 	bl	8012138 <IsListEmpty>
 80122a4:	4603      	mov	r3, r0
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d001      	beq.n	80122ae <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 80122aa:	2300      	movs	r3, #0
 80122ac:	e010      	b.n	80122d0 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 80122ae:	4b09      	ldr	r3, [pc, #36]	@ (80122d4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80122b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80122b4:	3b01      	subs	r3, #1
 80122b6:	b2da      	uxtb	r2, r3
 80122b8:	4b06      	ldr	r3, [pc, #24]	@ (80122d4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80122ba:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80122be:	4b05      	ldr	r3, [pc, #20]	@ (80122d4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80122c0:	685b      	ldr	r3, [r3, #4]
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7ff ff20 	bl	8012108 <IncreaseBufferPointer>
 80122c8:	4603      	mov	r3, r0
 80122ca:	4a02      	ldr	r2, [pc, #8]	@ (80122d4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80122cc:	6053      	str	r3, [r2, #4]

    return true;
 80122ce:	2301      	movs	r3, #1
}
 80122d0:	4618      	mov	r0, r3
 80122d2:	bd80      	pop	{r7, pc}
 80122d4:	200012fc 	.word	0x200012fc

080122d8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b084      	sub	sp, #16
 80122dc:	af00      	add	r7, sp, #0
 80122de:	4603      	mov	r3, r0
 80122e0:	460a      	mov	r2, r1
 80122e2:	71fb      	strb	r3, [r7, #7]
 80122e4:	4613      	mov	r3, r2
 80122e6:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80122e8:	2300      	movs	r3, #0
 80122ea:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80122ec:	4b10      	ldr	r3, [pc, #64]	@ (8012330 <LoRaMacConfirmQueueSetStatus+0x58>)
 80122ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80122f2:	4618      	mov	r0, r3
 80122f4:	f7ff ff20 	bl	8012138 <IsListEmpty>
 80122f8:	4603      	mov	r3, r0
 80122fa:	f083 0301 	eor.w	r3, r3, #1
 80122fe:	b2db      	uxtb	r3, r3
 8012300:	2b00      	cmp	r3, #0
 8012302:	d011      	beq.n	8012328 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012304:	4b0a      	ldr	r3, [pc, #40]	@ (8012330 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012306:	6859      	ldr	r1, [r3, #4]
 8012308:	4b09      	ldr	r3, [pc, #36]	@ (8012330 <LoRaMacConfirmQueueSetStatus+0x58>)
 801230a:	689a      	ldr	r2, [r3, #8]
 801230c:	79bb      	ldrb	r3, [r7, #6]
 801230e:	4618      	mov	r0, r3
 8012310:	f7ff ff32 	bl	8012178 <GetElement>
 8012314:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d005      	beq.n	8012328 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	79fa      	ldrb	r2, [r7, #7]
 8012320:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	2201      	movs	r2, #1
 8012326:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012328:	bf00      	nop
 801232a:	3710      	adds	r7, #16
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	200012fc 	.word	0x200012fc

08012334 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b084      	sub	sp, #16
 8012338:	af00      	add	r7, sp, #0
 801233a:	4603      	mov	r3, r0
 801233c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 801233e:	2300      	movs	r3, #0
 8012340:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012342:	4b10      	ldr	r3, [pc, #64]	@ (8012384 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012348:	4618      	mov	r0, r3
 801234a:	f7ff fef5 	bl	8012138 <IsListEmpty>
 801234e:	4603      	mov	r3, r0
 8012350:	f083 0301 	eor.w	r3, r3, #1
 8012354:	b2db      	uxtb	r3, r3
 8012356:	2b00      	cmp	r3, #0
 8012358:	d00e      	beq.n	8012378 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801235a:	4b0a      	ldr	r3, [pc, #40]	@ (8012384 <LoRaMacConfirmQueueGetStatus+0x50>)
 801235c:	6859      	ldr	r1, [r3, #4]
 801235e:	4b09      	ldr	r3, [pc, #36]	@ (8012384 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012360:	689a      	ldr	r2, [r3, #8]
 8012362:	79fb      	ldrb	r3, [r7, #7]
 8012364:	4618      	mov	r0, r3
 8012366:	f7ff ff07 	bl	8012178 <GetElement>
 801236a:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d002      	beq.n	8012378 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	785b      	ldrb	r3, [r3, #1]
 8012376:	e000      	b.n	801237a <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012378:	2301      	movs	r3, #1
}
 801237a:	4618      	mov	r0, r3
 801237c:	3710      	adds	r7, #16
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}
 8012382:	bf00      	nop
 8012384:	200012fc 	.word	0x200012fc

08012388 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b084      	sub	sp, #16
 801238c:	af00      	add	r7, sp, #0
 801238e:	4603      	mov	r3, r0
 8012390:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8012392:	4b16      	ldr	r3, [pc, #88]	@ (80123ec <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8012398:	4a14      	ldr	r2, [pc, #80]	@ (80123ec <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801239a:	79fb      	ldrb	r3, [r7, #7]
 801239c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80123a0:	4b12      	ldr	r3, [pc, #72]	@ (80123ec <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80123a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7ff fec6 	bl	8012138 <IsListEmpty>
 80123ac:	4603      	mov	r3, r0
 80123ae:	f083 0301 	eor.w	r3, r3, #1
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d015      	beq.n	80123e4 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	79fa      	ldrb	r2, [r7, #7]
 80123bc:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	78db      	ldrb	r3, [r3, #3]
 80123c2:	f083 0301 	eor.w	r3, r3, #1
 80123c6:	b2db      	uxtb	r3, r3
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d002      	beq.n	80123d2 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	2201      	movs	r2, #1
 80123d0:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80123d2:	68f8      	ldr	r0, [r7, #12]
 80123d4:	f7ff fe98 	bl	8012108 <IncreaseBufferPointer>
 80123d8:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80123da:	4b04      	ldr	r3, [pc, #16]	@ (80123ec <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80123dc:	689b      	ldr	r3, [r3, #8]
 80123de:	68fa      	ldr	r2, [r7, #12]
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d1e9      	bne.n	80123b8 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80123e4:	bf00      	nop
 80123e6:	3710      	adds	r7, #16
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}
 80123ec:	200012fc 	.word	0x200012fc

080123f0 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b082      	sub	sp, #8
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	4603      	mov	r3, r0
 80123f8:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80123fa:	4b09      	ldr	r3, [pc, #36]	@ (8012420 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80123fc:	6859      	ldr	r1, [r3, #4]
 80123fe:	4b08      	ldr	r3, [pc, #32]	@ (8012420 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012400:	689a      	ldr	r2, [r3, #8]
 8012402:	79fb      	ldrb	r3, [r7, #7]
 8012404:	4618      	mov	r0, r3
 8012406:	f7ff feb7 	bl	8012178 <GetElement>
 801240a:	4603      	mov	r3, r0
 801240c:	2b00      	cmp	r3, #0
 801240e:	d001      	beq.n	8012414 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8012410:	2301      	movs	r3, #1
 8012412:	e000      	b.n	8012416 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8012414:	2300      	movs	r3, #0
}
 8012416:	4618      	mov	r0, r3
 8012418:	3708      	adds	r7, #8
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}
 801241e:	bf00      	nop
 8012420:	200012fc 	.word	0x200012fc

08012424 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b084      	sub	sp, #16
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 801242c:	4b25      	ldr	r3, [pc, #148]	@ (80124c4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801242e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012432:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8012434:	2300      	movs	r3, #0
 8012436:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8012438:	f107 0308 	add.w	r3, r7, #8
 801243c:	2204      	movs	r2, #4
 801243e:	2100      	movs	r1, #0
 8012440:	4618      	mov	r0, r3
 8012442:	f005 f987 	bl	8017754 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8012446:	2300      	movs	r3, #0
 8012448:	73fb      	strb	r3, [r7, #15]
 801244a:	e032      	b.n	80124b2 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 801244c:	4b1d      	ldr	r3, [pc, #116]	@ (80124c4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801244e:	685b      	ldr	r3, [r3, #4]
 8012450:	781a      	ldrb	r2, [r3, #0]
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8012456:	4b1b      	ldr	r3, [pc, #108]	@ (80124c4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012458:	685b      	ldr	r3, [r3, #4]
 801245a:	785a      	ldrb	r2, [r3, #1]
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8012460:	4b18      	ldr	r3, [pc, #96]	@ (80124c4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	789b      	ldrb	r3, [r3, #2]
 8012466:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8012468:	7b7b      	ldrb	r3, [r7, #13]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d005      	beq.n	801247a <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 801246e:	4b15      	ldr	r3, [pc, #84]	@ (80124c4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	689b      	ldr	r3, [r3, #8]
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	4798      	blx	r3
 8012478:	e00b      	b.n	8012492 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801247a:	4b12      	ldr	r3, [pc, #72]	@ (80124c4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801247c:	685b      	ldr	r3, [r3, #4]
 801247e:	781b      	ldrb	r3, [r3, #0]
 8012480:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012482:	4b10      	ldr	r3, [pc, #64]	@ (80124c4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012484:	685b      	ldr	r3, [r3, #4]
 8012486:	785b      	ldrb	r3, [r3, #1]
 8012488:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801248a:	4b0e      	ldr	r3, [pc, #56]	@ (80124c4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801248c:	685b      	ldr	r3, [r3, #4]
 801248e:	78db      	ldrb	r3, [r3, #3]
 8012490:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8012492:	f7ff feff 	bl	8012294 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8012496:	7b7b      	ldrb	r3, [r7, #13]
 8012498:	f083 0301 	eor.w	r3, r3, #1
 801249c:	b2db      	uxtb	r3, r3
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d004      	beq.n	80124ac <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80124a2:	f107 0308 	add.w	r3, r7, #8
 80124a6:	4618      	mov	r0, r3
 80124a8:	f7ff feba 	bl	8012220 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80124ac:	7bfb      	ldrb	r3, [r7, #15]
 80124ae:	3301      	adds	r3, #1
 80124b0:	73fb      	strb	r3, [r7, #15]
 80124b2:	7bfa      	ldrb	r2, [r7, #15]
 80124b4:	7bbb      	ldrb	r3, [r7, #14]
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d3c8      	bcc.n	801244c <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 80124ba:	bf00      	nop
 80124bc:	bf00      	nop
 80124be:	3710      	adds	r7, #16
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}
 80124c4:	200012fc 	.word	0x200012fc

080124c8 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80124c8:	b480      	push	{r7}
 80124ca:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80124cc:	4b03      	ldr	r3, [pc, #12]	@ (80124dc <LoRaMacConfirmQueueGetCnt+0x14>)
 80124ce:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bc80      	pop	{r7}
 80124d8:	4770      	bx	lr
 80124da:	bf00      	nop
 80124dc:	200012fc 	.word	0x200012fc

080124e0 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80124e4:	4b06      	ldr	r3, [pc, #24]	@ (8012500 <LoRaMacConfirmQueueIsFull+0x20>)
 80124e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7ff fe34 	bl	8012158 <IsListFull>
 80124f0:	4603      	mov	r3, r0
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d001      	beq.n	80124fa <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80124f6:	2301      	movs	r3, #1
 80124f8:	e000      	b.n	80124fc <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80124fa:	2300      	movs	r3, #0
    }
}
 80124fc:	4618      	mov	r0, r3
 80124fe:	bd80      	pop	{r7, pc}
 8012500:	200012fc 	.word	0x200012fc

08012504 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b08e      	sub	sp, #56	@ 0x38
 8012508:	af00      	add	r7, sp, #0
 801250a:	60f8      	str	r0, [r7, #12]
 801250c:	607b      	str	r3, [r7, #4]
 801250e:	460b      	mov	r3, r1
 8012510:	817b      	strh	r3, [r7, #10]
 8012512:	4613      	mov	r3, r2
 8012514:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d101      	bne.n	8012520 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801251c:	230a      	movs	r3, #10
 801251e:	e086      	b.n	801262e <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8012520:	2300      	movs	r3, #0
 8012522:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8012526:	2301      	movs	r3, #1
 8012528:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 801252a:	2300      	movs	r3, #0
 801252c:	623b      	str	r3, [r7, #32]
 801252e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012532:	2200      	movs	r2, #0
 8012534:	601a      	str	r2, [r3, #0]
 8012536:	605a      	str	r2, [r3, #4]
 8012538:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 801253a:	2300      	movs	r3, #0
 801253c:	613b      	str	r3, [r7, #16]
 801253e:	f107 0314 	add.w	r3, r7, #20
 8012542:	2200      	movs	r2, #0
 8012544:	601a      	str	r2, [r3, #0]
 8012546:	605a      	str	r2, [r3, #4]
 8012548:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 801254a:	2301      	movs	r3, #1
 801254c:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 801254e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8012552:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	b2db      	uxtb	r3, r3
 8012558:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	0a1b      	lsrs	r3, r3, #8
 801255e:	b2db      	uxtb	r3, r3
 8012560:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	0c1b      	lsrs	r3, r3, #16
 8012566:	b2db      	uxtb	r3, r3
 8012568:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	0e1b      	lsrs	r3, r3, #24
 801256e:	b2db      	uxtb	r3, r3
 8012570:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8012572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012574:	b2db      	uxtb	r3, r3
 8012576:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8012578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801257a:	0a1b      	lsrs	r3, r3, #8
 801257c:	b2db      	uxtb	r3, r3
 801257e:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012582:	0c1b      	lsrs	r3, r3, #16
 8012584:	b2db      	uxtb	r3, r3
 8012586:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8012588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801258a:	0e1b      	lsrs	r3, r3, #24
 801258c:	b2db      	uxtb	r3, r3
 801258e:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012590:	e048      	b.n	8012624 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8012592:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012594:	b2db      	uxtb	r3, r3
 8012596:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8012598:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801259a:	3301      	adds	r3, #1
 801259c:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801259e:	f107 0320 	add.w	r3, r7, #32
 80125a2:	7a7a      	ldrb	r2, [r7, #9]
 80125a4:	f107 0010 	add.w	r0, r7, #16
 80125a8:	2110      	movs	r1, #16
 80125aa:	f7f8 ff89 	bl	800b4c0 <SecureElementAesEncrypt>
 80125ae:	4603      	mov	r3, r0
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d001      	beq.n	80125b8 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80125b4:	230f      	movs	r3, #15
 80125b6:	e03a      	b.n	801262e <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80125b8:	2300      	movs	r3, #0
 80125ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80125be:	e01e      	b.n	80125fe <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80125c0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80125c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80125c8:	4413      	add	r3, r2
 80125ca:	461a      	mov	r2, r3
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	4413      	add	r3, r2
 80125d0:	7819      	ldrb	r1, [r3, #0]
 80125d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80125d6:	3338      	adds	r3, #56	@ 0x38
 80125d8:	443b      	add	r3, r7
 80125da:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80125de:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80125e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80125e6:	4403      	add	r3, r0
 80125e8:	4618      	mov	r0, r3
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	4403      	add	r3, r0
 80125ee:	404a      	eors	r2, r1
 80125f0:	b2d2      	uxtb	r2, r2
 80125f2:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80125f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80125f8:	3301      	adds	r3, #1
 80125fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80125fe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012602:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012606:	2a10      	cmp	r2, #16
 8012608:	bfa8      	it	ge
 801260a:	2210      	movge	r2, #16
 801260c:	b212      	sxth	r2, r2
 801260e:	4293      	cmp	r3, r2
 8012610:	dbd6      	blt.n	80125c0 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012612:	897b      	ldrh	r3, [r7, #10]
 8012614:	3b10      	subs	r3, #16
 8012616:	b29b      	uxth	r3, r3
 8012618:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801261a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801261e:	3310      	adds	r3, #16
 8012620:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8012624:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012628:	2b00      	cmp	r3, #0
 801262a:	dcb2      	bgt.n	8012592 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801262c:	2300      	movs	r3, #0
}
 801262e:	4618      	mov	r0, r3
 8012630:	3738      	adds	r7, #56	@ 0x38
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}

08012636 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8012636:	b490      	push	{r4, r7}
 8012638:	b082      	sub	sp, #8
 801263a:	af00      	add	r7, sp, #0
 801263c:	4604      	mov	r4, r0
 801263e:	4608      	mov	r0, r1
 8012640:	4611      	mov	r1, r2
 8012642:	461a      	mov	r2, r3
 8012644:	4623      	mov	r3, r4
 8012646:	80fb      	strh	r3, [r7, #6]
 8012648:	4603      	mov	r3, r0
 801264a:	717b      	strb	r3, [r7, #5]
 801264c:	460b      	mov	r3, r1
 801264e:	713b      	strb	r3, [r7, #4]
 8012650:	4613      	mov	r3, r2
 8012652:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8012654:	69bb      	ldr	r3, [r7, #24]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d101      	bne.n	801265e <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801265a:	230a      	movs	r3, #10
 801265c:	e04e      	b.n	80126fc <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 801265e:	69bb      	ldr	r3, [r7, #24]
 8012660:	2249      	movs	r2, #73	@ 0x49
 8012662:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8012664:	69bb      	ldr	r3, [r7, #24]
 8012666:	3301      	adds	r3, #1
 8012668:	2200      	movs	r2, #0
 801266a:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 801266c:	69bb      	ldr	r3, [r7, #24]
 801266e:	3302      	adds	r3, #2
 8012670:	2200      	movs	r2, #0
 8012672:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8012674:	69bb      	ldr	r3, [r7, #24]
 8012676:	3303      	adds	r3, #3
 8012678:	2200      	movs	r2, #0
 801267a:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 801267c:	69bb      	ldr	r3, [r7, #24]
 801267e:	3304      	adds	r3, #4
 8012680:	2200      	movs	r2, #0
 8012682:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8012684:	69bb      	ldr	r3, [r7, #24]
 8012686:	3305      	adds	r3, #5
 8012688:	78fa      	ldrb	r2, [r7, #3]
 801268a:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 801268c:	69bb      	ldr	r3, [r7, #24]
 801268e:	3306      	adds	r3, #6
 8012690:	693a      	ldr	r2, [r7, #16]
 8012692:	b2d2      	uxtb	r2, r2
 8012694:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8012696:	693b      	ldr	r3, [r7, #16]
 8012698:	0a1a      	lsrs	r2, r3, #8
 801269a:	69bb      	ldr	r3, [r7, #24]
 801269c:	3307      	adds	r3, #7
 801269e:	b2d2      	uxtb	r2, r2
 80126a0:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80126a2:	693b      	ldr	r3, [r7, #16]
 80126a4:	0c1a      	lsrs	r2, r3, #16
 80126a6:	69bb      	ldr	r3, [r7, #24]
 80126a8:	3308      	adds	r3, #8
 80126aa:	b2d2      	uxtb	r2, r2
 80126ac:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80126ae:	693b      	ldr	r3, [r7, #16]
 80126b0:	0e1a      	lsrs	r2, r3, #24
 80126b2:	69bb      	ldr	r3, [r7, #24]
 80126b4:	3309      	adds	r3, #9
 80126b6:	b2d2      	uxtb	r2, r2
 80126b8:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 80126ba:	69bb      	ldr	r3, [r7, #24]
 80126bc:	330a      	adds	r3, #10
 80126be:	697a      	ldr	r2, [r7, #20]
 80126c0:	b2d2      	uxtb	r2, r2
 80126c2:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	0a1a      	lsrs	r2, r3, #8
 80126c8:	69bb      	ldr	r3, [r7, #24]
 80126ca:	330b      	adds	r3, #11
 80126cc:	b2d2      	uxtb	r2, r2
 80126ce:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	0c1a      	lsrs	r2, r3, #16
 80126d4:	69bb      	ldr	r3, [r7, #24]
 80126d6:	330c      	adds	r3, #12
 80126d8:	b2d2      	uxtb	r2, r2
 80126da:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80126dc:	697b      	ldr	r3, [r7, #20]
 80126de:	0e1a      	lsrs	r2, r3, #24
 80126e0:	69bb      	ldr	r3, [r7, #24]
 80126e2:	330d      	adds	r3, #13
 80126e4:	b2d2      	uxtb	r2, r2
 80126e6:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80126e8:	69bb      	ldr	r3, [r7, #24]
 80126ea:	330e      	adds	r3, #14
 80126ec:	2200      	movs	r2, #0
 80126ee:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80126f0:	69bb      	ldr	r3, [r7, #24]
 80126f2:	330f      	adds	r3, #15
 80126f4:	88fa      	ldrh	r2, [r7, #6]
 80126f6:	b2d2      	uxtb	r2, r2
 80126f8:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80126fa:	2300      	movs	r3, #0
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	3708      	adds	r7, #8
 8012700:	46bd      	mov	sp, r7
 8012702:	bc90      	pop	{r4, r7}
 8012704:	4770      	bx	lr

08012706 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8012706:	b590      	push	{r4, r7, lr}
 8012708:	b08b      	sub	sp, #44	@ 0x2c
 801270a:	af04      	add	r7, sp, #16
 801270c:	6078      	str	r0, [r7, #4]
 801270e:	4608      	mov	r0, r1
 8012710:	4611      	mov	r1, r2
 8012712:	461a      	mov	r2, r3
 8012714:	4603      	mov	r3, r0
 8012716:	807b      	strh	r3, [r7, #2]
 8012718:	460b      	mov	r3, r1
 801271a:	707b      	strb	r3, [r7, #1]
 801271c:	4613      	mov	r3, r2
 801271e:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d002      	beq.n	801272c <ComputeCmacB0+0x26>
 8012726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012728:	2b00      	cmp	r3, #0
 801272a:	d101      	bne.n	8012730 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801272c:	230a      	movs	r3, #10
 801272e:	e024      	b.n	801277a <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012730:	887b      	ldrh	r3, [r7, #2]
 8012732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012736:	d901      	bls.n	801273c <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012738:	230e      	movs	r3, #14
 801273a:	e01e      	b.n	801277a <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801273c:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8012740:	783a      	ldrb	r2, [r7, #0]
 8012742:	7879      	ldrb	r1, [r7, #1]
 8012744:	8878      	ldrh	r0, [r7, #2]
 8012746:	f107 0308 	add.w	r3, r7, #8
 801274a:	9302      	str	r3, [sp, #8]
 801274c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801274e:	9301      	str	r3, [sp, #4]
 8012750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012752:	9300      	str	r3, [sp, #0]
 8012754:	4623      	mov	r3, r4
 8012756:	f7ff ff6e 	bl	8012636 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801275a:	887a      	ldrh	r2, [r7, #2]
 801275c:	7879      	ldrb	r1, [r7, #1]
 801275e:	f107 0008 	add.w	r0, r7, #8
 8012762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012764:	9300      	str	r3, [sp, #0]
 8012766:	460b      	mov	r3, r1
 8012768:	6879      	ldr	r1, [r7, #4]
 801276a:	f7f8 fe63 	bl	800b434 <SecureElementComputeAesCmac>
 801276e:	4603      	mov	r3, r0
 8012770:	2b00      	cmp	r3, #0
 8012772:	d001      	beq.n	8012778 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012774:	230f      	movs	r3, #15
 8012776:	e000      	b.n	801277a <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012778:	2300      	movs	r3, #0
}
 801277a:	4618      	mov	r0, r3
 801277c:	371c      	adds	r7, #28
 801277e:	46bd      	mov	sp, r7
 8012780:	bd90      	pop	{r4, r7, pc}

08012782 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8012782:	b590      	push	{r4, r7, lr}
 8012784:	b0cd      	sub	sp, #308	@ 0x134
 8012786:	af04      	add	r7, sp, #16
 8012788:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 801278c:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8012790:	6020      	str	r0, [r4, #0]
 8012792:	460c      	mov	r4, r1
 8012794:	4610      	mov	r0, r2
 8012796:	4619      	mov	r1, r3
 8012798:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801279c:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80127a0:	4622      	mov	r2, r4
 80127a2:	801a      	strh	r2, [r3, #0]
 80127a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80127a8:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80127ac:	4602      	mov	r2, r0
 80127ae:	701a      	strb	r2, [r3, #0]
 80127b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80127b4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80127b8:	460a      	mov	r2, r1
 80127ba:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80127bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80127c0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d101      	bne.n	80127ce <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80127ca:	230a      	movs	r3, #10
 80127cc:	e063      	b.n	8012896 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80127ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80127d2:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80127d6:	881b      	ldrh	r3, [r3, #0]
 80127d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80127dc:	d901      	bls.n	80127e2 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80127de:	230e      	movs	r3, #14
 80127e0:	e059      	b.n	8012896 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80127e2:	f107 030c 	add.w	r3, r7, #12
 80127e6:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80127ea:	2100      	movs	r1, #0
 80127ec:	4618      	mov	r0, r3
 80127ee:	f004 ffb1 	bl	8017754 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80127f2:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 80127f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80127fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80127fe:	781a      	ldrb	r2, [r3, #0]
 8012800:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012804:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8012808:	7819      	ldrb	r1, [r3, #0]
 801280a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801280e:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8012812:	8818      	ldrh	r0, [r3, #0]
 8012814:	f107 030c 	add.w	r3, r7, #12
 8012818:	9302      	str	r3, [sp, #8]
 801281a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801281e:	9301      	str	r3, [sp, #4]
 8012820:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012824:	9300      	str	r3, [sp, #0]
 8012826:	4623      	mov	r3, r4
 8012828:	f7ff ff05 	bl	8012636 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 801282c:	f107 030c 	add.w	r3, r7, #12
 8012830:	3310      	adds	r3, #16
 8012832:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8012836:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 801283a:	8812      	ldrh	r2, [r2, #0]
 801283c:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8012840:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8012844:	6809      	ldr	r1, [r1, #0]
 8012846:	4618      	mov	r0, r3
 8012848:	f004 ff49 	bl	80176de <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 801284c:	2306      	movs	r3, #6
 801284e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8012852:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012856:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801285a:	881b      	ldrh	r3, [r3, #0]
 801285c:	3310      	adds	r3, #16
 801285e:	4619      	mov	r1, r3
 8012860:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012864:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8012868:	781b      	ldrb	r3, [r3, #0]
 801286a:	f107 000c 	add.w	r0, r7, #12
 801286e:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8012872:	f7f8 fdf9 	bl	800b468 <SecureElementVerifyAesCmac>
 8012876:	4603      	mov	r3, r0
 8012878:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 801287c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8012880:	2b00      	cmp	r3, #0
 8012882:	d101      	bne.n	8012888 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8012884:	2300      	movs	r3, #0
 8012886:	e006      	b.n	8012896 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8012888:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 801288c:	2b01      	cmp	r3, #1
 801288e:	d101      	bne.n	8012894 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8012890:	2301      	movs	r3, #1
 8012892:	e000      	b.n	8012896 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012894:	230f      	movs	r3, #15
}
 8012896:	4618      	mov	r0, r3
 8012898:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 801289c:	46bd      	mov	sp, r7
 801289e:	bd90      	pop	{r4, r7, pc}

080128a0 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80128a0:	b480      	push	{r7}
 80128a2:	b085      	sub	sp, #20
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	4603      	mov	r3, r0
 80128a8:	6039      	str	r1, [r7, #0]
 80128aa:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80128ac:	2300      	movs	r3, #0
 80128ae:	73fb      	strb	r3, [r7, #15]
 80128b0:	e011      	b.n	80128d6 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80128b2:	7bfb      	ldrb	r3, [r7, #15]
 80128b4:	4a0c      	ldr	r2, [pc, #48]	@ (80128e8 <GetKeyAddrItem+0x48>)
 80128b6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80128ba:	79fa      	ldrb	r2, [r7, #7]
 80128bc:	429a      	cmp	r2, r3
 80128be:	d107      	bne.n	80128d0 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80128c0:	7bfb      	ldrb	r3, [r7, #15]
 80128c2:	009b      	lsls	r3, r3, #2
 80128c4:	4a08      	ldr	r2, [pc, #32]	@ (80128e8 <GetKeyAddrItem+0x48>)
 80128c6:	441a      	add	r2, r3
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80128cc:	2300      	movs	r3, #0
 80128ce:	e006      	b.n	80128de <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80128d0:	7bfb      	ldrb	r3, [r7, #15]
 80128d2:	3301      	adds	r3, #1
 80128d4:	73fb      	strb	r3, [r7, #15]
 80128d6:	7bfb      	ldrb	r3, [r7, #15]
 80128d8:	2b01      	cmp	r3, #1
 80128da:	d9ea      	bls.n	80128b2 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80128dc:	230c      	movs	r3, #12
}
 80128de:	4618      	mov	r0, r3
 80128e0:	3714      	adds	r7, #20
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bc80      	pop	{r7}
 80128e6:	4770      	bx	lr
 80128e8:	20000100 	.word	0x20000100

080128ec <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b088      	sub	sp, #32
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	60b9      	str	r1, [r7, #8]
 80128f4:	607a      	str	r2, [r7, #4]
 80128f6:	461a      	mov	r2, r3
 80128f8:	4603      	mov	r3, r0
 80128fa:	73fb      	strb	r3, [r7, #15]
 80128fc:	4613      	mov	r3, r2
 80128fe:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8012900:	2300      	movs	r3, #0
 8012902:	613b      	str	r3, [r7, #16]
 8012904:	f107 0314 	add.w	r3, r7, #20
 8012908:	2200      	movs	r2, #0
 801290a:	601a      	str	r2, [r3, #0]
 801290c:	605a      	str	r2, [r3, #4]
 801290e:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8012910:	7bfb      	ldrb	r3, [r7, #15]
 8012912:	2b08      	cmp	r3, #8
 8012914:	d002      	beq.n	801291c <DeriveSessionKey10x+0x30>
 8012916:	2b09      	cmp	r3, #9
 8012918:	d003      	beq.n	8012922 <DeriveSessionKey10x+0x36>
 801291a:	e005      	b.n	8012928 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 801291c:	2301      	movs	r3, #1
 801291e:	743b      	strb	r3, [r7, #16]
            break;
 8012920:	e004      	b.n	801292c <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8012922:	2302      	movs	r3, #2
 8012924:	743b      	strb	r3, [r7, #16]
            break;
 8012926:	e001      	b.n	801292c <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8012928:	230b      	movs	r3, #11
 801292a:	e02a      	b.n	8012982 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	b2db      	uxtb	r3, r3
 8012930:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8012932:	68bb      	ldr	r3, [r7, #8]
 8012934:	0a1b      	lsrs	r3, r3, #8
 8012936:	b2db      	uxtb	r3, r3
 8012938:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801293a:	68bb      	ldr	r3, [r7, #8]
 801293c:	0c1b      	lsrs	r3, r3, #16
 801293e:	b2db      	uxtb	r3, r3
 8012940:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	b2db      	uxtb	r3, r3
 8012946:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	0a1b      	lsrs	r3, r3, #8
 801294c:	b2db      	uxtb	r3, r3
 801294e:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	0c1b      	lsrs	r3, r3, #16
 8012954:	b2db      	uxtb	r3, r3
 8012956:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8012958:	89bb      	ldrh	r3, [r7, #12]
 801295a:	b2db      	uxtb	r3, r3
 801295c:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801295e:	89bb      	ldrh	r3, [r7, #12]
 8012960:	0a1b      	lsrs	r3, r3, #8
 8012962:	b29b      	uxth	r3, r3
 8012964:	b2db      	uxtb	r3, r3
 8012966:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8012968:	7bfa      	ldrb	r2, [r7, #15]
 801296a:	f107 0310 	add.w	r3, r7, #16
 801296e:	2101      	movs	r1, #1
 8012970:	4618      	mov	r0, r3
 8012972:	f7f8 fe25 	bl	800b5c0 <SecureElementDeriveAndStoreKey>
 8012976:	4603      	mov	r3, r0
 8012978:	2b00      	cmp	r3, #0
 801297a:	d001      	beq.n	8012980 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801297c:	230f      	movs	r3, #15
 801297e:	e000      	b.n	8012982 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012980:	2300      	movs	r3, #0
}
 8012982:	4618      	mov	r0, r3
 8012984:	3720      	adds	r7, #32
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}
	...

0801298c <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 801298c:	b480      	push	{r7}
 801298e:	b083      	sub	sp, #12
 8012990:	af00      	add	r7, sp, #0
 8012992:	4603      	mov	r3, r0
 8012994:	6039      	str	r1, [r7, #0]
 8012996:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d101      	bne.n	80129a2 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801299e:	230a      	movs	r3, #10
 80129a0:	e029      	b.n	80129f6 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 80129a2:	79fb      	ldrb	r3, [r7, #7]
 80129a4:	3b01      	subs	r3, #1
 80129a6:	2b03      	cmp	r3, #3
 80129a8:	d822      	bhi.n	80129f0 <GetLastFcntDown+0x64>
 80129aa:	a201      	add	r2, pc, #4	@ (adr r2, 80129b0 <GetLastFcntDown+0x24>)
 80129ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129b0:	080129c1 	.word	0x080129c1
 80129b4:	080129cd 	.word	0x080129cd
 80129b8:	080129d9 	.word	0x080129d9
 80129bc:	080129e5 	.word	0x080129e5
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80129c0:	4b0f      	ldr	r3, [pc, #60]	@ (8012a00 <GetLastFcntDown+0x74>)
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	691a      	ldr	r2, [r3, #16]
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	601a      	str	r2, [r3, #0]
            break;
 80129ca:	e013      	b.n	80129f4 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80129cc:	4b0c      	ldr	r3, [pc, #48]	@ (8012a00 <GetLastFcntDown+0x74>)
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	695a      	ldr	r2, [r3, #20]
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	601a      	str	r2, [r3, #0]
            break;
 80129d6:	e00d      	b.n	80129f4 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80129d8:	4b09      	ldr	r3, [pc, #36]	@ (8012a00 <GetLastFcntDown+0x74>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	699a      	ldr	r2, [r3, #24]
 80129de:	683b      	ldr	r3, [r7, #0]
 80129e0:	601a      	str	r2, [r3, #0]
            break;
 80129e2:	e007      	b.n	80129f4 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80129e4:	4b06      	ldr	r3, [pc, #24]	@ (8012a00 <GetLastFcntDown+0x74>)
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	69da      	ldr	r2, [r3, #28]
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	601a      	str	r2, [r3, #0]
            break;
 80129ee:	e001      	b.n	80129f4 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80129f0:	2305      	movs	r3, #5
 80129f2:	e000      	b.n	80129f6 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80129f4:	2300      	movs	r3, #0
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	370c      	adds	r7, #12
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bc80      	pop	{r7}
 80129fe:	4770      	bx	lr
 8012a00:	20001320 	.word	0x20001320

08012a04 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b084      	sub	sp, #16
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	6039      	str	r1, [r7, #0]
 8012a0e:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8012a10:	2300      	movs	r3, #0
 8012a12:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8012a14:	f107 020c 	add.w	r2, r7, #12
 8012a18:	79fb      	ldrb	r3, [r7, #7]
 8012a1a:	4611      	mov	r1, r2
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7ff ffb5 	bl	801298c <GetLastFcntDown>
 8012a22:	4603      	mov	r3, r0
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d001      	beq.n	8012a2c <CheckFCntDown+0x28>
    {
        return false;
 8012a28:	2300      	movs	r3, #0
 8012a2a:	e00a      	b.n	8012a42 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	683a      	ldr	r2, [r7, #0]
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d803      	bhi.n	8012a3c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8012a34:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8012a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a3a:	d101      	bne.n	8012a40 <CheckFCntDown+0x3c>
    {
        return true;
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	e000      	b.n	8012a42 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8012a40:	2300      	movs	r3, #0
    }
}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3710      	adds	r7, #16
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
	...

08012a4c <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012a4c:	b480      	push	{r7}
 8012a4e:	b083      	sub	sp, #12
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	4603      	mov	r3, r0
 8012a54:	6039      	str	r1, [r7, #0]
 8012a56:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8012a58:	79fb      	ldrb	r3, [r7, #7]
 8012a5a:	3b01      	subs	r3, #1
 8012a5c:	2b03      	cmp	r3, #3
 8012a5e:	d82b      	bhi.n	8012ab8 <UpdateFCntDown+0x6c>
 8012a60:	a201      	add	r2, pc, #4	@ (adr r2, 8012a68 <UpdateFCntDown+0x1c>)
 8012a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a66:	bf00      	nop
 8012a68:	08012a79 	.word	0x08012a79
 8012a6c:	08012a8b 	.word	0x08012a8b
 8012a70:	08012a9d 	.word	0x08012a9d
 8012a74:	08012aaf 	.word	0x08012aaf
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8012a78:	4b12      	ldr	r3, [pc, #72]	@ (8012ac4 <UpdateFCntDown+0x78>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	683a      	ldr	r2, [r7, #0]
 8012a7e:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8012a80:	4b10      	ldr	r3, [pc, #64]	@ (8012ac4 <UpdateFCntDown+0x78>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	683a      	ldr	r2, [r7, #0]
 8012a86:	621a      	str	r2, [r3, #32]
            break;
 8012a88:	e017      	b.n	8012aba <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8012a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8012ac4 <UpdateFCntDown+0x78>)
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	683a      	ldr	r2, [r7, #0]
 8012a90:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8012a92:	4b0c      	ldr	r3, [pc, #48]	@ (8012ac4 <UpdateFCntDown+0x78>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	683a      	ldr	r2, [r7, #0]
 8012a98:	621a      	str	r2, [r3, #32]
            break;
 8012a9a:	e00e      	b.n	8012aba <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8012a9c:	4b09      	ldr	r3, [pc, #36]	@ (8012ac4 <UpdateFCntDown+0x78>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	683a      	ldr	r2, [r7, #0]
 8012aa2:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8012aa4:	4b07      	ldr	r3, [pc, #28]	@ (8012ac4 <UpdateFCntDown+0x78>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	683a      	ldr	r2, [r7, #0]
 8012aaa:	621a      	str	r2, [r3, #32]
            break;
 8012aac:	e005      	b.n	8012aba <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8012aae:	4b05      	ldr	r3, [pc, #20]	@ (8012ac4 <UpdateFCntDown+0x78>)
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	683a      	ldr	r2, [r7, #0]
 8012ab4:	61da      	str	r2, [r3, #28]
            break;
 8012ab6:	e000      	b.n	8012aba <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8012ab8:	bf00      	nop
    }
}
 8012aba:	bf00      	nop
 8012abc:	370c      	adds	r7, #12
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bc80      	pop	{r7}
 8012ac2:	4770      	bx	lr
 8012ac4:	20001320 	.word	0x20001320

08012ac8 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b083      	sub	sp, #12
 8012acc:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8012ace:	4b18      	ldr	r3, [pc, #96]	@ (8012b30 <ResetFCnts+0x68>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8012ad6:	4b16      	ldr	r3, [pc, #88]	@ (8012b30 <ResetFCnts+0x68>)
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	f04f 32ff 	mov.w	r2, #4294967295
 8012ade:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8012ae0:	4b13      	ldr	r3, [pc, #76]	@ (8012b30 <ResetFCnts+0x68>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8012ae8:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8012aea:	4b11      	ldr	r3, [pc, #68]	@ (8012b30 <ResetFCnts+0x68>)
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	f04f 32ff 	mov.w	r2, #4294967295
 8012af2:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012af4:	4b0e      	ldr	r3, [pc, #56]	@ (8012b30 <ResetFCnts+0x68>)
 8012af6:	681a      	ldr	r2, [r3, #0]
 8012af8:	4b0d      	ldr	r3, [pc, #52]	@ (8012b30 <ResetFCnts+0x68>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	6992      	ldr	r2, [r2, #24]
 8012afe:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012b00:	2300      	movs	r3, #0
 8012b02:	607b      	str	r3, [r7, #4]
 8012b04:	e00b      	b.n	8012b1e <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8012b06:	4b0a      	ldr	r3, [pc, #40]	@ (8012b30 <ResetFCnts+0x68>)
 8012b08:	681a      	ldr	r2, [r3, #0]
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	3306      	adds	r3, #6
 8012b0e:	009b      	lsls	r3, r3, #2
 8012b10:	4413      	add	r3, r2
 8012b12:	f04f 32ff 	mov.w	r2, #4294967295
 8012b16:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	3301      	adds	r3, #1
 8012b1c:	607b      	str	r3, [r7, #4]
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	ddf0      	ble.n	8012b06 <ResetFCnts+0x3e>
    }
}
 8012b24:	bf00      	nop
 8012b26:	bf00      	nop
 8012b28:	370c      	adds	r7, #12
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bc80      	pop	{r7}
 8012b2e:	4770      	bx	lr
 8012b30:	20001320 	.word	0x20001320

08012b34 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8012b34:	b480      	push	{r7}
 8012b36:	b083      	sub	sp, #12
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8012b3c:	4b06      	ldr	r3, [pc, #24]	@ (8012b58 <IsJoinNonce10xOk+0x24>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	689b      	ldr	r3, [r3, #8]
 8012b42:	687a      	ldr	r2, [r7, #4]
 8012b44:	429a      	cmp	r2, r3
 8012b46:	bf8c      	ite	hi
 8012b48:	2301      	movhi	r3, #1
 8012b4a:	2300      	movls	r3, #0
 8012b4c:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	370c      	adds	r7, #12
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bc80      	pop	{r7}
 8012b56:	4770      	bx	lr
 8012b58:	20001320 	.word	0x20001320

08012b5c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b082      	sub	sp, #8
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d101      	bne.n	8012b6e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8012b6a:	2309      	movs	r3, #9
 8012b6c:	e01c      	b.n	8012ba8 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8012b6e:	4a10      	ldr	r2, [pc, #64]	@ (8012bb0 <LoRaMacCryptoInit+0x54>)
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8012b74:	4b0e      	ldr	r3, [pc, #56]	@ (8012bb0 <LoRaMacCryptoInit+0x54>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	2228      	movs	r2, #40	@ 0x28
 8012b7a:	2100      	movs	r1, #0
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f004 fde9 	bl	8017754 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8012b82:	4b0b      	ldr	r3, [pc, #44]	@ (8012bb0 <LoRaMacCryptoInit+0x54>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	2201      	movs	r2, #1
 8012b88:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8012b8a:	4b09      	ldr	r3, [pc, #36]	@ (8012bb0 <LoRaMacCryptoInit+0x54>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	2201      	movs	r2, #1
 8012b90:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8012b92:	4b07      	ldr	r3, [pc, #28]	@ (8012bb0 <LoRaMacCryptoInit+0x54>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	2201      	movs	r2, #1
 8012b98:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8012b9a:	4b05      	ldr	r3, [pc, #20]	@ (8012bb0 <LoRaMacCryptoInit+0x54>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8012ba2:	f7ff ff91 	bl	8012ac8 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8012ba6:	2300      	movs	r3, #0
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3708      	adds	r7, #8
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}
 8012bb0:	20001320 	.word	0x20001320

08012bb4 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8012bb4:	b480      	push	{r7}
 8012bb6:	b083      	sub	sp, #12
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8012bbc:	4b04      	ldr	r3, [pc, #16]	@ (8012bd0 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	687a      	ldr	r2, [r7, #4]
 8012bc2:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8012bc4:	2300      	movs	r3, #0
}
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	370c      	adds	r7, #12
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bc80      	pop	{r7}
 8012bce:	4770      	bx	lr
 8012bd0:	20001320 	.word	0x20001320

08012bd4 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8012bd4:	b480      	push	{r7}
 8012bd6:	b083      	sub	sp, #12
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d101      	bne.n	8012be6 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012be2:	230a      	movs	r3, #10
 8012be4:	e006      	b.n	8012bf4 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8012be6:	4b06      	ldr	r3, [pc, #24]	@ (8012c00 <LoRaMacCryptoGetFCntUp+0x2c>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	68db      	ldr	r3, [r3, #12]
 8012bec:	1c5a      	adds	r2, r3, #1
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012bf2:	2300      	movs	r3, #0
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	370c      	adds	r7, #12
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bc80      	pop	{r7}
 8012bfc:	4770      	bx	lr
 8012bfe:	bf00      	nop
 8012c00:	20001320 	.word	0x20001320

08012c04 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8012c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012c08:	b08a      	sub	sp, #40	@ 0x28
 8012c0a:	af00      	add	r7, sp, #0
 8012c0c:	613a      	str	r2, [r7, #16]
 8012c0e:	60fb      	str	r3, [r7, #12]
 8012c10:	4603      	mov	r3, r0
 8012c12:	75fb      	strb	r3, [r7, #23]
 8012c14:	460b      	mov	r3, r1
 8012c16:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8012c20:	2313      	movs	r3, #19
 8012c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if( currentDown == NULL )
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d101      	bne.n	8012c30 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012c2c:	230a      	movs	r3, #10
 8012c2e:	e057      	b.n	8012ce0 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8012c30:	f107 021c 	add.w	r2, r7, #28
 8012c34:	7dfb      	ldrb	r3, [r7, #23]
 8012c36:	4611      	mov	r1, r2
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7ff fea7 	bl	801298c <GetLastFcntDown>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8012c44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d002      	beq.n	8012c52 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8012c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012c50:	e046      	b.n	8012ce0 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8012c52:	69fb      	ldr	r3, [r7, #28]
 8012c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c58:	d103      	bne.n	8012c62 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	693a      	ldr	r2, [r7, #16]
 8012c5e:	601a      	str	r2, [r3, #0]
 8012c60:	e01e      	b.n	8012ca0 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8012c62:	69fb      	ldr	r3, [r7, #28]
 8012c64:	b29b      	uxth	r3, r3
 8012c66:	693a      	ldr	r2, [r7, #16]
 8012c68:	1ad3      	subs	r3, r2, r3
 8012c6a:	627b      	str	r3, [r7, #36]	@ 0x24

        if( fCntDiff > 0 )
 8012c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	dd05      	ble.n	8012c7e <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8012c72:	69fa      	ldr	r2, [r7, #28]
 8012c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c76:	441a      	add	r2, r3
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	601a      	str	r2, [r3, #0]
 8012c7c:	e010      	b.n	8012ca0 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8012c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d104      	bne.n	8012c8e <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8012c84:	69fa      	ldr	r2, [r7, #28]
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8012c8a:	2307      	movs	r3, #7
 8012c8c:	e028      	b.n	8012ce0 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8012c8e:	69fb      	ldr	r3, [r7, #28]
 8012c90:	0c1b      	lsrs	r3, r3, #16
 8012c92:	041b      	lsls	r3, r3, #16
 8012c94:	693a      	ldr	r2, [r7, #16]
 8012c96:	4413      	add	r3, r2
 8012c98:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8012ca0:	4b12      	ldr	r3, [pc, #72]	@ (8012cec <LoRaMacCryptoGetFCntDown+0xe8>)
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	789b      	ldrb	r3, [r3, #2]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d119      	bne.n	8012cde <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	2200      	movs	r2, #0
 8012cb0:	603b      	str	r3, [r7, #0]
 8012cb2:	607a      	str	r2, [r7, #4]
 8012cb4:	69fb      	ldr	r3, [r7, #28]
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	469a      	mov	sl, r3
 8012cba:	4693      	mov	fp, r2
 8012cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012cc0:	4611      	mov	r1, r2
 8012cc2:	ebb1 040a 	subs.w	r4, r1, sl
 8012cc6:	eb63 050b 	sbc.w	r5, r3, fp
 8012cca:	8abb      	ldrh	r3, [r7, #20]
 8012ccc:	2200      	movs	r2, #0
 8012cce:	4698      	mov	r8, r3
 8012cd0:	4691      	mov	r9, r2
 8012cd2:	4544      	cmp	r4, r8
 8012cd4:	eb75 0309 	sbcs.w	r3, r5, r9
 8012cd8:	db01      	blt.n	8012cde <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8012cda:	2308      	movs	r3, #8
 8012cdc:	e000      	b.n	8012ce0 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012cde:	2300      	movs	r3, #0
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3728      	adds	r7, #40	@ 0x28
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012cea:	bf00      	nop
 8012cec:	20001320 	.word	0x20001320

08012cf0 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8012cf0:	b480      	push	{r7}
 8012cf2:	b085      	sub	sp, #20
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d101      	bne.n	8012d02 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012cfe:	230a      	movs	r3, #10
 8012d00:	e019      	b.n	8012d36 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012d02:	2300      	movs	r3, #0
 8012d04:	60fb      	str	r3, [r7, #12]
 8012d06:	e012      	b.n	8012d2e <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8012d08:	4b0d      	ldr	r3, [pc, #52]	@ (8012d40 <LoRaMacCryptoSetMulticastReference+0x50>)
 8012d0a:	6819      	ldr	r1, [r3, #0]
 8012d0c:	68fa      	ldr	r2, [r7, #12]
 8012d0e:	4613      	mov	r3, r2
 8012d10:	005b      	lsls	r3, r3, #1
 8012d12:	4413      	add	r3, r2
 8012d14:	011b      	lsls	r3, r3, #4
 8012d16:	461a      	mov	r2, r3
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	4413      	add	r3, r2
 8012d1c:	68fa      	ldr	r2, [r7, #12]
 8012d1e:	3206      	adds	r2, #6
 8012d20:	0092      	lsls	r2, r2, #2
 8012d22:	440a      	add	r2, r1
 8012d24:	3204      	adds	r2, #4
 8012d26:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	3301      	adds	r3, #1
 8012d2c:	60fb      	str	r3, [r7, #12]
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	dde9      	ble.n	8012d08 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012d34:	2300      	movs	r3, #0
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	3714      	adds	r7, #20
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bc80      	pop	{r7}
 8012d3e:	4770      	bx	lr
 8012d40:	20001320 	.word	0x20001320

08012d44 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b082      	sub	sp, #8
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	6039      	str	r1, [r7, #0]
 8012d4e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8012d50:	79fb      	ldrb	r3, [r7, #7]
 8012d52:	6839      	ldr	r1, [r7, #0]
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7f8 fb0f 	bl	800b378 <SecureElementSetKey>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d001      	beq.n	8012d64 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012d60:	230f      	movs	r3, #15
 8012d62:	e021      	b.n	8012da8 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8012d64:	79fb      	ldrb	r3, [r7, #7]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d11d      	bne.n	8012da6 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8012d6a:	4b11      	ldr	r3, [pc, #68]	@ (8012db0 <LoRaMacCryptoSetKey+0x6c>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	789b      	ldrb	r3, [r3, #2]
 8012d70:	210b      	movs	r1, #11
 8012d72:	4618      	mov	r0, r3
 8012d74:	f000 fa5c 	bl	8013230 <LoRaMacCryptoDeriveLifeTimeKey>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d001      	beq.n	8012d82 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012d7e:	230f      	movs	r3, #15
 8012d80:	e012      	b.n	8012da8 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8012d82:	210c      	movs	r1, #12
 8012d84:	2000      	movs	r0, #0
 8012d86:	f000 fa53 	bl	8013230 <LoRaMacCryptoDeriveLifeTimeKey>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d001      	beq.n	8012d94 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012d90:	230f      	movs	r3, #15
 8012d92:	e009      	b.n	8012da8 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8012d94:	210a      	movs	r1, #10
 8012d96:	2000      	movs	r0, #0
 8012d98:	f000 fa4a 	bl	8013230 <LoRaMacCryptoDeriveLifeTimeKey>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d001      	beq.n	8012da6 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012da2:	230f      	movs	r3, #15
 8012da4:	e000      	b.n	8012da8 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012da6:	2300      	movs	r3, #0
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3708      	adds	r7, #8
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}
 8012db0:	20001320 	.word	0x20001320

08012db4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b086      	sub	sp, #24
 8012db8:	af02      	add	r7, sp, #8
 8012dba:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d101      	bne.n	8012dc6 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012dc2:	230a      	movs	r3, #10
 8012dc4:	e033      	b.n	8012e2e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8012dce:	f107 0308 	add.w	r3, r7, #8
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7f8 fcaa 	bl	800b72c <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8012dd8:	68ba      	ldr	r2, [r7, #8]
 8012dda:	4b17      	ldr	r3, [pc, #92]	@ (8012e38 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	b292      	uxth	r2, r2
 8012de0:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8012de2:	4b15      	ldr	r3, [pc, #84]	@ (8012e38 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	889a      	ldrh	r2, [r3, #4]
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012dec:	6878      	ldr	r0, [r7, #4]
 8012dee:	f000 fc17 	bl	8013620 <LoRaMacSerializerJoinRequest>
 8012df2:	4603      	mov	r3, r0
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d001      	beq.n	8012dfc <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012df8:	2311      	movs	r3, #17
 8012dfa:	e018      	b.n	8012e2e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	6819      	ldr	r1, [r3, #0]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	3318      	adds	r3, #24
 8012e04:	7bfa      	ldrb	r2, [r7, #15]
 8012e06:	9300      	str	r3, [sp, #0]
 8012e08:	4613      	mov	r3, r2
 8012e0a:	2213      	movs	r2, #19
 8012e0c:	2000      	movs	r0, #0
 8012e0e:	f7f8 fb11 	bl	800b434 <SecureElementComputeAesCmac>
 8012e12:	4603      	mov	r3, r0
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d001      	beq.n	8012e1c <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012e18:	230f      	movs	r3, #15
 8012e1a:	e008      	b.n	8012e2e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f000 fbff 	bl	8013620 <LoRaMacSerializerJoinRequest>
 8012e22:	4603      	mov	r3, r0
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d001      	beq.n	8012e2c <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012e28:	2311      	movs	r3, #17
 8012e2a:	e000      	b.n	8012e2e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012e2c:	2300      	movs	r3, #0
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3710      	adds	r7, #16
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
 8012e36:	bf00      	nop
 8012e38:	20001320 	.word	0x20001320

08012e3c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8012e3c:	b590      	push	{r4, r7, lr}
 8012e3e:	b097      	sub	sp, #92	@ 0x5c
 8012e40:	af04      	add	r7, sp, #16
 8012e42:	4603      	mov	r3, r0
 8012e44:	60b9      	str	r1, [r7, #8]
 8012e46:	607a      	str	r2, [r7, #4]
 8012e48:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d002      	beq.n	8012e56 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8012e50:	68bb      	ldr	r3, [r7, #8]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d101      	bne.n	8012e5a <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012e56:	230a      	movs	r3, #10
 8012e58:	e0d3      	b.n	8013002 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012e5a:	2313      	movs	r3, #19
 8012e5c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8012e60:	2300      	movs	r3, #0
 8012e62:	617b      	str	r3, [r7, #20]
 8012e64:	f107 0318 	add.w	r3, r7, #24
 8012e68:	221d      	movs	r2, #29
 8012e6a:	2100      	movs	r1, #0
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f009 fcc7 	bl	801c800 <memset>
    uint8_t versionMinor         = 0;
 8012e72:	2300      	movs	r3, #0
 8012e74:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8012e76:	4b65      	ldr	r3, [pc, #404]	@ (801300c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	889b      	ldrh	r3, [r3, #4]
 8012e7c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681c      	ldr	r4, [r3, #0]
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	791b      	ldrb	r3, [r3, #4]
 8012e88:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8012e8c:	7bf8      	ldrb	r0, [r7, #15]
 8012e8e:	f107 0213 	add.w	r2, r7, #19
 8012e92:	9202      	str	r2, [sp, #8]
 8012e94:	f107 0214 	add.w	r2, r7, #20
 8012e98:	9201      	str	r2, [sp, #4]
 8012e9a:	9300      	str	r3, [sp, #0]
 8012e9c:	4623      	mov	r3, r4
 8012e9e:	460a      	mov	r2, r1
 8012ea0:	68b9      	ldr	r1, [r7, #8]
 8012ea2:	f7f8 fbcd 	bl	800b640 <SecureElementProcessJoinAccept>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d001      	beq.n	8012eb0 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012eac:	230f      	movs	r3, #15
 8012eae:	e0a8      	b.n	8013002 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	6818      	ldr	r0, [r3, #0]
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	791b      	ldrb	r3, [r3, #4]
 8012eb8:	461a      	mov	r2, r3
 8012eba:	f107 0314 	add.w	r3, r7, #20
 8012ebe:	4619      	mov	r1, r3
 8012ec0:	f004 fc0d 	bl	80176de <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f000 f9ee 	bl	80132a6 <LoRaMacParserJoinAccept>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d001      	beq.n	8012ed4 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8012ed0:	2310      	movs	r3, #16
 8012ed2:	e096      	b.n	8013002 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	799b      	ldrb	r3, [r3, #6]
 8012ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	79db      	ldrb	r3, [r3, #7]
 8012ee4:	021b      	lsls	r3, r3, #8
 8012ee6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012ee8:	4313      	orrs	r3, r2
 8012eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	7a1b      	ldrb	r3, [r3, #8]
 8012ef0:	041b      	lsls	r3, r3, #16
 8012ef2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012ef4:	4313      	orrs	r3, r2
 8012ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8012ef8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012efa:	f7ff fe1b 	bl	8012b34 <IsJoinNonce10xOk>
 8012efe:	4603      	mov	r3, r0
 8012f00:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 8012f04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d010      	beq.n	8012f2e <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8012f0c:	4b3f      	ldr	r3, [pc, #252]	@ (801300c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012f12:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8012f14:	7cfb      	ldrb	r3, [r7, #19]
 8012f16:	210b      	movs	r1, #11
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f000 f989 	bl	8013230 <LoRaMacCryptoDeriveLifeTimeKey>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012f24:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d005      	beq.n	8012f38 <LoRaMacCryptoHandleJoinAccept+0xfc>
 8012f2c:	e001      	b.n	8012f32 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8012f2e:	2303      	movs	r3, #3
 8012f30:	e067      	b.n	8013002 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8012f32:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012f36:	e064      	b.n	8013002 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8012f38:	210c      	movs	r1, #12
 8012f3a:	2000      	movs	r0, #0
 8012f3c:	f000 f978 	bl	8013230 <LoRaMacCryptoDeriveLifeTimeKey>
 8012f40:	4603      	mov	r3, r0
 8012f42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012f46:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d002      	beq.n	8012f54 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8012f4e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012f52:	e056      	b.n	8013002 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8012f54:	210a      	movs	r1, #10
 8012f56:	2000      	movs	r0, #0
 8012f58:	f000 f96a 	bl	8013230 <LoRaMacCryptoDeriveLifeTimeKey>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012f62:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d002      	beq.n	8012f70 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 8012f6a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012f6e:	e048      	b.n	8013002 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	7a5b      	ldrb	r3, [r3, #9]
 8012f74:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	7a9b      	ldrb	r3, [r3, #10]
 8012f7a:	021b      	lsls	r3, r3, #8
 8012f7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012f7e:	4313      	orrs	r3, r2
 8012f80:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	7adb      	ldrb	r3, [r3, #11]
 8012f86:	041b      	lsls	r3, r3, #16
 8012f88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012f8a:	4313      	orrs	r3, r2
 8012f8c:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8012f8e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012f92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012f94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012f96:	2009      	movs	r0, #9
 8012f98:	f7ff fca8 	bl	80128ec <DeriveSessionKey10x>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012fa2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d002      	beq.n	8012fb0 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8012faa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012fae:	e028      	b.n	8013002 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8012fb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012fb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012fb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012fb8:	2008      	movs	r0, #8
 8012fba:	f7ff fc97 	bl	80128ec <DeriveSessionKey10x>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012fc4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d002      	beq.n	8012fd2 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8012fcc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012fd0:	e017      	b.n	8013002 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8012fd2:	4b0e      	ldr	r3, [pc, #56]	@ (801300c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	7cfa      	ldrb	r2, [r7, #19]
 8012fd8:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8012fda:	4b0c      	ldr	r3, [pc, #48]	@ (801300c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	2200      	movs	r2, #0
 8012fe0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8012fe2:	4b0a      	ldr	r3, [pc, #40]	@ (801300c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8012fea:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8012fec:	4b07      	ldr	r3, [pc, #28]	@ (801300c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ff4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8012ff6:	4b05      	ldr	r3, [pc, #20]	@ (801300c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8012ffe:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8013000:	2300      	movs	r3, #0
}
 8013002:	4618      	mov	r0, r3
 8013004:	374c      	adds	r7, #76	@ 0x4c
 8013006:	46bd      	mov	sp, r7
 8013008:	bd90      	pop	{r4, r7, pc}
 801300a:	bf00      	nop
 801300c:	20001320 	.word	0x20001320

08013010 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013010:	b590      	push	{r4, r7, lr}
 8013012:	b08b      	sub	sp, #44	@ 0x2c
 8013014:	af04      	add	r7, sp, #16
 8013016:	60f8      	str	r0, [r7, #12]
 8013018:	607b      	str	r3, [r7, #4]
 801301a:	460b      	mov	r3, r1
 801301c:	72fb      	strb	r3, [r7, #11]
 801301e:	4613      	mov	r3, r2
 8013020:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013022:	2313      	movs	r3, #19
 8013024:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013026:	2309      	movs	r3, #9
 8013028:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d101      	bne.n	8013034 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013030:	230a      	movs	r3, #10
 8013032:	e05e      	b.n	80130f2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8013034:	4b31      	ldr	r3, [pc, #196]	@ (80130fc <LoRaMacCryptoSecureMessage+0xec>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	68db      	ldr	r3, [r3, #12]
 801303a:	68fa      	ldr	r2, [r7, #12]
 801303c:	429a      	cmp	r2, r3
 801303e:	d201      	bcs.n	8013044 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013040:	2306      	movs	r3, #6
 8013042:	e056      	b.n	80130f2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	f893 3020 	ldrb.w	r3, [r3, #32]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d101      	bne.n	8013052 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801304e:	2308      	movs	r3, #8
 8013050:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8013052:	4b2a      	ldr	r3, [pc, #168]	@ (80130fc <LoRaMacCryptoSecureMessage+0xec>)
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	68db      	ldr	r3, [r3, #12]
 8013058:	68fa      	ldr	r2, [r7, #12]
 801305a:	429a      	cmp	r2, r3
 801305c:	d916      	bls.n	801308c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013068:	b219      	sxth	r1, r3
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	689c      	ldr	r4, [r3, #8]
 801306e:	7dfa      	ldrb	r2, [r7, #23]
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	9301      	str	r3, [sp, #4]
 8013074:	2300      	movs	r3, #0
 8013076:	9300      	str	r3, [sp, #0]
 8013078:	4623      	mov	r3, r4
 801307a:	f7ff fa43 	bl	8012504 <PayloadEncrypt>
 801307e:	4603      	mov	r3, r0
 8013080:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013082:	7dbb      	ldrb	r3, [r7, #22]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d001      	beq.n	801308c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8013088:	7dbb      	ldrb	r3, [r7, #22]
 801308a:	e032      	b.n	80130f2 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801308c:	6878      	ldr	r0, [r7, #4]
 801308e:	f000 fb49 	bl	8013724 <LoRaMacSerializerData>
 8013092:	4603      	mov	r3, r0
 8013094:	2b00      	cmp	r3, #0
 8013096:	d001      	beq.n	801309c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013098:	2311      	movs	r3, #17
 801309a:	e02a      	b.n	80130f2 <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801309c:	2308      	movs	r3, #8
 801309e:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	6818      	ldr	r0, [r3, #0]
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	791b      	ldrb	r3, [r3, #4]
 80130a8:	3b04      	subs	r3, #4
 80130aa:	b299      	uxth	r1, r3
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	689b      	ldr	r3, [r3, #8]
 80130b0:	687a      	ldr	r2, [r7, #4]
 80130b2:	322c      	adds	r2, #44	@ 0x2c
 80130b4:	7dfc      	ldrb	r4, [r7, #23]
 80130b6:	9203      	str	r2, [sp, #12]
 80130b8:	68fa      	ldr	r2, [r7, #12]
 80130ba:	9202      	str	r2, [sp, #8]
 80130bc:	9301      	str	r3, [sp, #4]
 80130be:	2300      	movs	r3, #0
 80130c0:	9300      	str	r3, [sp, #0]
 80130c2:	2300      	movs	r3, #0
 80130c4:	4622      	mov	r2, r4
 80130c6:	f7ff fb1e 	bl	8012706 <ComputeCmacB0>
 80130ca:	4603      	mov	r3, r0
 80130cc:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80130ce:	7dbb      	ldrb	r3, [r7, #22]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d001      	beq.n	80130d8 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 80130d4:	7dbb      	ldrb	r3, [r7, #22]
 80130d6:	e00c      	b.n	80130f2 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f000 fb23 	bl	8013724 <LoRaMacSerializerData>
 80130de:	4603      	mov	r3, r0
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d001      	beq.n	80130e8 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80130e4:	2311      	movs	r3, #17
 80130e6:	e004      	b.n	80130f2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80130e8:	4b04      	ldr	r3, [pc, #16]	@ (80130fc <LoRaMacCryptoSecureMessage+0xec>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	68fa      	ldr	r2, [r7, #12]
 80130ee:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80130f0:	2300      	movs	r3, #0
}
 80130f2:	4618      	mov	r0, r3
 80130f4:	371c      	adds	r7, #28
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd90      	pop	{r4, r7, pc}
 80130fa:	bf00      	nop
 80130fc:	20001320 	.word	0x20001320

08013100 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8013100:	b590      	push	{r4, r7, lr}
 8013102:	b08b      	sub	sp, #44	@ 0x2c
 8013104:	af04      	add	r7, sp, #16
 8013106:	60b9      	str	r1, [r7, #8]
 8013108:	607b      	str	r3, [r7, #4]
 801310a:	4603      	mov	r3, r0
 801310c:	73fb      	strb	r3, [r7, #15]
 801310e:	4613      	mov	r3, r2
 8013110:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8013112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013114:	2b00      	cmp	r3, #0
 8013116:	d101      	bne.n	801311c <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013118:	230a      	movs	r3, #10
 801311a:	e083      	b.n	8013224 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 801311c:	7bbb      	ldrb	r3, [r7, #14]
 801311e:	6879      	ldr	r1, [r7, #4]
 8013120:	4618      	mov	r0, r3
 8013122:	f7ff fc6f 	bl	8012a04 <CheckFCntDown>
 8013126:	4603      	mov	r3, r0
 8013128:	f083 0301 	eor.w	r3, r3, #1
 801312c:	b2db      	uxtb	r3, r3
 801312e:	2b00      	cmp	r3, #0
 8013130:	d001      	beq.n	8013136 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013132:	2306      	movs	r3, #6
 8013134:	e076      	b.n	8013224 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013136:	2313      	movs	r3, #19
 8013138:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801313a:	2309      	movs	r3, #9
 801313c:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801313e:	2308      	movs	r3, #8
 8013140:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013142:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013144:	f000 f97a 	bl	801343c <LoRaMacParserData>
 8013148:	4603      	mov	r3, r0
 801314a:	2b00      	cmp	r3, #0
 801314c:	d001      	beq.n	8013152 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801314e:	2310      	movs	r3, #16
 8013150:	e068      	b.n	8013224 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8013152:	f107 0210 	add.w	r2, r7, #16
 8013156:	7bfb      	ldrb	r3, [r7, #15]
 8013158:	4611      	mov	r1, r2
 801315a:	4618      	mov	r0, r3
 801315c:	f7ff fba0 	bl	80128a0 <GetKeyAddrItem>
 8013160:	4603      	mov	r3, r0
 8013162:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013164:	7d7b      	ldrb	r3, [r7, #21]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d001      	beq.n	801316e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801316a:	7d7b      	ldrb	r3, [r7, #21]
 801316c:	e05a      	b.n	8013224 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801316e:	693b      	ldr	r3, [r7, #16]
 8013170:	785b      	ldrb	r3, [r3, #1]
 8013172:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	789b      	ldrb	r3, [r3, #2]
 8013178:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801317a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801317c:	689b      	ldr	r3, [r3, #8]
 801317e:	68ba      	ldr	r2, [r7, #8]
 8013180:	429a      	cmp	r2, r3
 8013182:	d001      	beq.n	8013188 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8013184:	2302      	movs	r3, #2
 8013186:	e04d      	b.n	8013224 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8013188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801318a:	7b1b      	ldrb	r3, [r3, #12]
 801318c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013190:	b2db      	uxtb	r3, r3
 8013192:	2b00      	cmp	r3, #0
 8013194:	bf14      	ite	ne
 8013196:	2301      	movne	r3, #1
 8013198:	2300      	moveq	r3, #0
 801319a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801319c:	4b23      	ldr	r3, [pc, #140]	@ (801322c <LoRaMacCryptoUnsecureMessage+0x12c>)
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	789b      	ldrb	r3, [r3, #2]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d101      	bne.n	80131aa <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80131a6:	2300      	movs	r3, #0
 80131a8:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80131aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131ac:	6818      	ldr	r0, [r3, #0]
 80131ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131b0:	791b      	ldrb	r3, [r3, #4]
 80131b2:	3b04      	subs	r3, #4
 80131b4:	b299      	uxth	r1, r3
 80131b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131ba:	7dbc      	ldrb	r4, [r7, #22]
 80131bc:	7d3a      	ldrb	r2, [r7, #20]
 80131be:	9303      	str	r3, [sp, #12]
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	9302      	str	r3, [sp, #8]
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	9301      	str	r3, [sp, #4]
 80131c8:	2301      	movs	r3, #1
 80131ca:	9300      	str	r3, [sp, #0]
 80131cc:	4623      	mov	r3, r4
 80131ce:	f7ff fad8 	bl	8012782 <VerifyCmacB0>
 80131d2:	4603      	mov	r3, r0
 80131d4:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80131d6:	7d7b      	ldrb	r3, [r7, #21]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d001      	beq.n	80131e0 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 80131dc:	7d7b      	ldrb	r3, [r7, #21]
 80131de:	e021      	b.n	8013224 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80131e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d101      	bne.n	80131ee <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80131ea:	2308      	movs	r3, #8
 80131ec:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80131ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131f0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80131f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80131f8:	b219      	sxth	r1, r3
 80131fa:	7dfa      	ldrb	r2, [r7, #23]
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	9301      	str	r3, [sp, #4]
 8013200:	2301      	movs	r3, #1
 8013202:	9300      	str	r3, [sp, #0]
 8013204:	68bb      	ldr	r3, [r7, #8]
 8013206:	f7ff f97d 	bl	8012504 <PayloadEncrypt>
 801320a:	4603      	mov	r3, r0
 801320c:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801320e:	7d7b      	ldrb	r3, [r7, #21]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d001      	beq.n	8013218 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8013214:	7d7b      	ldrb	r3, [r7, #21]
 8013216:	e005      	b.n	8013224 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8013218:	7bbb      	ldrb	r3, [r7, #14]
 801321a:	6879      	ldr	r1, [r7, #4]
 801321c:	4618      	mov	r0, r3
 801321e:	f7ff fc15 	bl	8012a4c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013222:	2300      	movs	r3, #0
}
 8013224:	4618      	mov	r0, r3
 8013226:	371c      	adds	r7, #28
 8013228:	46bd      	mov	sp, r7
 801322a:	bd90      	pop	{r4, r7, pc}
 801322c:	20001320 	.word	0x20001320

08013230 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b088      	sub	sp, #32
 8013234:	af00      	add	r7, sp, #0
 8013236:	4603      	mov	r3, r0
 8013238:	460a      	mov	r2, r1
 801323a:	71fb      	strb	r3, [r7, #7]
 801323c:	4613      	mov	r3, r2
 801323e:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8013240:	2300      	movs	r3, #0
 8013242:	60fb      	str	r3, [r7, #12]
 8013244:	f107 0310 	add.w	r3, r7, #16
 8013248:	2200      	movs	r2, #0
 801324a:	601a      	str	r2, [r3, #0]
 801324c:	605a      	str	r2, [r3, #4]
 801324e:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8013250:	2300      	movs	r3, #0
 8013252:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8013254:	79bb      	ldrb	r3, [r7, #6]
 8013256:	2b0c      	cmp	r3, #12
 8013258:	d00b      	beq.n	8013272 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 801325a:	2b0c      	cmp	r3, #12
 801325c:	dc0f      	bgt.n	801327e <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 801325e:	2b0a      	cmp	r3, #10
 8013260:	d00a      	beq.n	8013278 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8013262:	2b0b      	cmp	r3, #11
 8013264:	d10b      	bne.n	801327e <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8013266:	79fb      	ldrb	r3, [r7, #7]
 8013268:	2b01      	cmp	r3, #1
 801326a:	d10a      	bne.n	8013282 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 801326c:	2320      	movs	r3, #32
 801326e:	733b      	strb	r3, [r7, #12]
            }
            break;
 8013270:	e007      	b.n	8013282 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8013272:	230b      	movs	r3, #11
 8013274:	77fb      	strb	r3, [r7, #31]
            break;
 8013276:	e005      	b.n	8013284 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8013278:	2330      	movs	r3, #48	@ 0x30
 801327a:	733b      	strb	r3, [r7, #12]
            break;
 801327c:	e002      	b.n	8013284 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801327e:	230b      	movs	r3, #11
 8013280:	e00d      	b.n	801329e <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8013282:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013284:	79ba      	ldrb	r2, [r7, #6]
 8013286:	7ff9      	ldrb	r1, [r7, #31]
 8013288:	f107 030c 	add.w	r3, r7, #12
 801328c:	4618      	mov	r0, r3
 801328e:	f7f8 f997 	bl	800b5c0 <SecureElementDeriveAndStoreKey>
 8013292:	4603      	mov	r3, r0
 8013294:	2b00      	cmp	r3, #0
 8013296:	d001      	beq.n	801329c <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013298:	230f      	movs	r3, #15
 801329a:	e000      	b.n	801329e <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801329c:	2300      	movs	r3, #0
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3720      	adds	r7, #32
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}

080132a6 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80132a6:	b580      	push	{r7, lr}
 80132a8:	b084      	sub	sp, #16
 80132aa:	af00      	add	r7, sp, #0
 80132ac:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d003      	beq.n	80132bc <LoRaMacParserJoinAccept+0x16>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d101      	bne.n	80132c0 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80132bc:	2302      	movs	r3, #2
 80132be:	e0b9      	b.n	8013434 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80132c0:	2300      	movs	r3, #0
 80132c2:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681a      	ldr	r2, [r3, #0]
 80132c8:	89fb      	ldrh	r3, [r7, #14]
 80132ca:	1c59      	adds	r1, r3, #1
 80132cc:	81f9      	strh	r1, [r7, #14]
 80132ce:	4413      	add	r3, r2
 80132d0:	781a      	ldrb	r2, [r3, #0]
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	1d98      	adds	r0, r3, #6
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	681a      	ldr	r2, [r3, #0]
 80132de:	89fb      	ldrh	r3, [r7, #14]
 80132e0:	4413      	add	r3, r2
 80132e2:	2203      	movs	r2, #3
 80132e4:	4619      	mov	r1, r3
 80132e6:	f004 f9fa 	bl	80176de <memcpy1>
    bufItr = bufItr + 3;
 80132ea:	89fb      	ldrh	r3, [r7, #14]
 80132ec:	3303      	adds	r3, #3
 80132ee:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	f103 0009 	add.w	r0, r3, #9
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	681a      	ldr	r2, [r3, #0]
 80132fa:	89fb      	ldrh	r3, [r7, #14]
 80132fc:	4413      	add	r3, r2
 80132fe:	2203      	movs	r2, #3
 8013300:	4619      	mov	r1, r3
 8013302:	f004 f9ec 	bl	80176de <memcpy1>
    bufItr = bufItr + 3;
 8013306:	89fb      	ldrh	r3, [r7, #14]
 8013308:	3303      	adds	r3, #3
 801330a:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	681a      	ldr	r2, [r3, #0]
 8013310:	89fb      	ldrh	r3, [r7, #14]
 8013312:	1c59      	adds	r1, r3, #1
 8013314:	81f9      	strh	r1, [r7, #14]
 8013316:	4413      	add	r3, r2
 8013318:	781b      	ldrb	r3, [r3, #0]
 801331a:	461a      	mov	r2, r3
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	681a      	ldr	r2, [r3, #0]
 8013324:	89fb      	ldrh	r3, [r7, #14]
 8013326:	1c59      	adds	r1, r3, #1
 8013328:	81f9      	strh	r1, [r7, #14]
 801332a:	4413      	add	r3, r2
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	021a      	lsls	r2, r3, #8
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	68db      	ldr	r3, [r3, #12]
 8013334:	431a      	orrs	r2, r3
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	681a      	ldr	r2, [r3, #0]
 801333e:	89fb      	ldrh	r3, [r7, #14]
 8013340:	1c59      	adds	r1, r3, #1
 8013342:	81f9      	strh	r1, [r7, #14]
 8013344:	4413      	add	r3, r2
 8013346:	781b      	ldrb	r3, [r3, #0]
 8013348:	041a      	lsls	r2, r3, #16
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	68db      	ldr	r3, [r3, #12]
 801334e:	431a      	orrs	r2, r3
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681a      	ldr	r2, [r3, #0]
 8013358:	89fb      	ldrh	r3, [r7, #14]
 801335a:	1c59      	adds	r1, r3, #1
 801335c:	81f9      	strh	r1, [r7, #14]
 801335e:	4413      	add	r3, r2
 8013360:	781b      	ldrb	r3, [r3, #0]
 8013362:	061a      	lsls	r2, r3, #24
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	68db      	ldr	r3, [r3, #12]
 8013368:	431a      	orrs	r2, r3
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	681a      	ldr	r2, [r3, #0]
 8013372:	89fb      	ldrh	r3, [r7, #14]
 8013374:	1c59      	adds	r1, r3, #1
 8013376:	81f9      	strh	r1, [r7, #14]
 8013378:	4413      	add	r3, r2
 801337a:	781a      	ldrb	r2, [r3, #0]
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	681a      	ldr	r2, [r3, #0]
 8013384:	89fb      	ldrh	r3, [r7, #14]
 8013386:	1c59      	adds	r1, r3, #1
 8013388:	81f9      	strh	r1, [r7, #14]
 801338a:	4413      	add	r3, r2
 801338c:	781a      	ldrb	r2, [r3, #0]
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	791b      	ldrb	r3, [r3, #4]
 8013396:	1f1a      	subs	r2, r3, #4
 8013398:	89fb      	ldrh	r3, [r7, #14]
 801339a:	1ad3      	subs	r3, r2, r3
 801339c:	2b10      	cmp	r3, #16
 801339e:	d10e      	bne.n	80133be <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f103 0012 	add.w	r0, r3, #18
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	681a      	ldr	r2, [r3, #0]
 80133aa:	89fb      	ldrh	r3, [r7, #14]
 80133ac:	4413      	add	r3, r2
 80133ae:	2210      	movs	r2, #16
 80133b0:	4619      	mov	r1, r3
 80133b2:	f004 f994 	bl	80176de <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80133b6:	89fb      	ldrh	r3, [r7, #14]
 80133b8:	3310      	adds	r3, #16
 80133ba:	81fb      	strh	r3, [r7, #14]
 80133bc:	e008      	b.n	80133d0 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	791b      	ldrb	r3, [r3, #4]
 80133c2:	1f1a      	subs	r2, r3, #4
 80133c4:	89fb      	ldrh	r3, [r7, #14]
 80133c6:	1ad3      	subs	r3, r2, r3
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	dd01      	ble.n	80133d0 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80133cc:	2301      	movs	r3, #1
 80133ce:	e031      	b.n	8013434 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	681a      	ldr	r2, [r3, #0]
 80133d4:	89fb      	ldrh	r3, [r7, #14]
 80133d6:	1c59      	adds	r1, r3, #1
 80133d8:	81f9      	strh	r1, [r7, #14]
 80133da:	4413      	add	r3, r2
 80133dc:	781b      	ldrb	r3, [r3, #0]
 80133de:	461a      	mov	r2, r3
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681a      	ldr	r2, [r3, #0]
 80133e8:	89fb      	ldrh	r3, [r7, #14]
 80133ea:	1c59      	adds	r1, r3, #1
 80133ec:	81f9      	strh	r1, [r7, #14]
 80133ee:	4413      	add	r3, r2
 80133f0:	781b      	ldrb	r3, [r3, #0]
 80133f2:	021a      	lsls	r2, r3, #8
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133f8:	431a      	orrs	r2, r3
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	681a      	ldr	r2, [r3, #0]
 8013402:	89fb      	ldrh	r3, [r7, #14]
 8013404:	1c59      	adds	r1, r3, #1
 8013406:	81f9      	strh	r1, [r7, #14]
 8013408:	4413      	add	r3, r2
 801340a:	781b      	ldrb	r3, [r3, #0]
 801340c:	041a      	lsls	r2, r3, #16
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013412:	431a      	orrs	r2, r3
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681a      	ldr	r2, [r3, #0]
 801341c:	89fb      	ldrh	r3, [r7, #14]
 801341e:	1c59      	adds	r1, r3, #1
 8013420:	81f9      	strh	r1, [r7, #14]
 8013422:	4413      	add	r3, r2
 8013424:	781b      	ldrb	r3, [r3, #0]
 8013426:	061a      	lsls	r2, r3, #24
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801342c:	431a      	orrs	r2, r3
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8013432:	2300      	movs	r3, #0
}
 8013434:	4618      	mov	r0, r3
 8013436:	3710      	adds	r7, #16
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}

0801343c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b084      	sub	sp, #16
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d003      	beq.n	8013452 <LoRaMacParserData+0x16>
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d101      	bne.n	8013456 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013452:	2302      	movs	r3, #2
 8013454:	e0e0      	b.n	8013618 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8013456:	2300      	movs	r3, #0
 8013458:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	681a      	ldr	r2, [r3, #0]
 801345e:	89fb      	ldrh	r3, [r7, #14]
 8013460:	1c59      	adds	r1, r3, #1
 8013462:	81f9      	strh	r1, [r7, #14]
 8013464:	4413      	add	r3, r2
 8013466:	781a      	ldrb	r2, [r3, #0]
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681a      	ldr	r2, [r3, #0]
 8013470:	89fb      	ldrh	r3, [r7, #14]
 8013472:	1c59      	adds	r1, r3, #1
 8013474:	81f9      	strh	r1, [r7, #14]
 8013476:	4413      	add	r3, r2
 8013478:	781b      	ldrb	r3, [r3, #0]
 801347a:	461a      	mov	r2, r3
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681a      	ldr	r2, [r3, #0]
 8013484:	89fb      	ldrh	r3, [r7, #14]
 8013486:	1c59      	adds	r1, r3, #1
 8013488:	81f9      	strh	r1, [r7, #14]
 801348a:	4413      	add	r3, r2
 801348c:	781b      	ldrb	r3, [r3, #0]
 801348e:	021a      	lsls	r2, r3, #8
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	689b      	ldr	r3, [r3, #8]
 8013494:	431a      	orrs	r2, r3
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681a      	ldr	r2, [r3, #0]
 801349e:	89fb      	ldrh	r3, [r7, #14]
 80134a0:	1c59      	adds	r1, r3, #1
 80134a2:	81f9      	strh	r1, [r7, #14]
 80134a4:	4413      	add	r3, r2
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	041a      	lsls	r2, r3, #16
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	689b      	ldr	r3, [r3, #8]
 80134ae:	431a      	orrs	r2, r3
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	681a      	ldr	r2, [r3, #0]
 80134b8:	89fb      	ldrh	r3, [r7, #14]
 80134ba:	1c59      	adds	r1, r3, #1
 80134bc:	81f9      	strh	r1, [r7, #14]
 80134be:	4413      	add	r3, r2
 80134c0:	781b      	ldrb	r3, [r3, #0]
 80134c2:	061a      	lsls	r2, r3, #24
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	689b      	ldr	r3, [r3, #8]
 80134c8:	431a      	orrs	r2, r3
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	681a      	ldr	r2, [r3, #0]
 80134d2:	89fb      	ldrh	r3, [r7, #14]
 80134d4:	1c59      	adds	r1, r3, #1
 80134d6:	81f9      	strh	r1, [r7, #14]
 80134d8:	4413      	add	r3, r2
 80134da:	781a      	ldrb	r2, [r3, #0]
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	681a      	ldr	r2, [r3, #0]
 80134e4:	89fb      	ldrh	r3, [r7, #14]
 80134e6:	1c59      	adds	r1, r3, #1
 80134e8:	81f9      	strh	r1, [r7, #14]
 80134ea:	4413      	add	r3, r2
 80134ec:	781b      	ldrb	r3, [r3, #0]
 80134ee:	461a      	mov	r2, r3
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681a      	ldr	r2, [r3, #0]
 80134f8:	89fb      	ldrh	r3, [r7, #14]
 80134fa:	1c59      	adds	r1, r3, #1
 80134fc:	81f9      	strh	r1, [r7, #14]
 80134fe:	4413      	add	r3, r2
 8013500:	781b      	ldrb	r3, [r3, #0]
 8013502:	0219      	lsls	r1, r3, #8
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	89db      	ldrh	r3, [r3, #14]
 8013508:	b21a      	sxth	r2, r3
 801350a:	b20b      	sxth	r3, r1
 801350c:	4313      	orrs	r3, r2
 801350e:	b21b      	sxth	r3, r3
 8013510:	b29a      	uxth	r2, r3
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	f103 0010 	add.w	r0, r3, #16
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	681a      	ldr	r2, [r3, #0]
 8013520:	89fb      	ldrh	r3, [r7, #14]
 8013522:	18d1      	adds	r1, r2, r3
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	7b1b      	ldrb	r3, [r3, #12]
 8013528:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801352c:	b2db      	uxtb	r3, r3
 801352e:	461a      	mov	r2, r3
 8013530:	f004 f8d5 	bl	80176de <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	7b1b      	ldrb	r3, [r3, #12]
 8013538:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801353c:	b2db      	uxtb	r3, r3
 801353e:	461a      	mov	r2, r3
 8013540:	89fb      	ldrh	r3, [r7, #14]
 8013542:	4413      	add	r3, r2
 8013544:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2200      	movs	r2, #0
 801354a:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	2200      	movs	r2, #0
 8013552:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	791b      	ldrb	r3, [r3, #4]
 801355a:	461a      	mov	r2, r3
 801355c:	89fb      	ldrh	r3, [r7, #14]
 801355e:	1ad3      	subs	r3, r2, r3
 8013560:	2b04      	cmp	r3, #4
 8013562:	dd27      	ble.n	80135b4 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681a      	ldr	r2, [r3, #0]
 8013568:	89fb      	ldrh	r3, [r7, #14]
 801356a:	1c59      	adds	r1, r3, #1
 801356c:	81f9      	strh	r1, [r7, #14]
 801356e:	4413      	add	r3, r2
 8013570:	781a      	ldrb	r2, [r3, #0]
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	791a      	ldrb	r2, [r3, #4]
 801357c:	89fb      	ldrh	r3, [r7, #14]
 801357e:	b2db      	uxtb	r3, r3
 8013580:	1ad3      	subs	r3, r2, r3
 8013582:	b2db      	uxtb	r3, r3
 8013584:	3b04      	subs	r3, #4
 8013586:	b2da      	uxtb	r2, r3
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	681a      	ldr	r2, [r3, #0]
 8013596:	89fb      	ldrh	r3, [r7, #14]
 8013598:	18d1      	adds	r1, r2, r3
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80135a0:	461a      	mov	r2, r3
 80135a2:	f004 f89c 	bl	80176de <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80135ac:	461a      	mov	r2, r3
 80135ae:	89fb      	ldrh	r3, [r7, #14]
 80135b0:	4413      	add	r3, r2
 80135b2:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681a      	ldr	r2, [r3, #0]
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	791b      	ldrb	r3, [r3, #4]
 80135bc:	3b04      	subs	r3, #4
 80135be:	4413      	add	r3, r2
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	461a      	mov	r2, r3
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	6819      	ldr	r1, [r3, #0]
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	791b      	ldrb	r3, [r3, #4]
 80135d4:	3b03      	subs	r3, #3
 80135d6:	440b      	add	r3, r1
 80135d8:	781b      	ldrb	r3, [r3, #0]
 80135da:	021b      	lsls	r3, r3, #8
 80135dc:	431a      	orrs	r2, r3
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	6819      	ldr	r1, [r3, #0]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	791b      	ldrb	r3, [r3, #4]
 80135ee:	3b02      	subs	r3, #2
 80135f0:	440b      	add	r3, r1
 80135f2:	781b      	ldrb	r3, [r3, #0]
 80135f4:	041b      	lsls	r3, r3, #16
 80135f6:	431a      	orrs	r2, r3
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	6819      	ldr	r1, [r3, #0]
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	791b      	ldrb	r3, [r3, #4]
 8013608:	3b01      	subs	r3, #1
 801360a:	440b      	add	r3, r1
 801360c:	781b      	ldrb	r3, [r3, #0]
 801360e:	061b      	lsls	r3, r3, #24
 8013610:	431a      	orrs	r2, r3
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8013616:	2300      	movs	r3, #0
}
 8013618:	4618      	mov	r0, r3
 801361a:	3710      	adds	r7, #16
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}

08013620 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b084      	sub	sp, #16
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d003      	beq.n	8013636 <LoRaMacSerializerJoinRequest+0x16>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d101      	bne.n	801363a <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013636:	2301      	movs	r3, #1
 8013638:	e070      	b.n	801371c <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 801363a:	2300      	movs	r3, #0
 801363c:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	791b      	ldrb	r3, [r3, #4]
 8013642:	2b16      	cmp	r3, #22
 8013644:	d801      	bhi.n	801364a <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013646:	2302      	movs	r3, #2
 8013648:	e068      	b.n	801371c <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	681a      	ldr	r2, [r3, #0]
 801364e:	89fb      	ldrh	r3, [r7, #14]
 8013650:	1c59      	adds	r1, r3, #1
 8013652:	81f9      	strh	r1, [r7, #14]
 8013654:	4413      	add	r3, r2
 8013656:	687a      	ldr	r2, [r7, #4]
 8013658:	7952      	ldrb	r2, [r2, #5]
 801365a:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	681a      	ldr	r2, [r3, #0]
 8013660:	89fb      	ldrh	r3, [r7, #14]
 8013662:	18d0      	adds	r0, r2, r3
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	3306      	adds	r3, #6
 8013668:	2208      	movs	r2, #8
 801366a:	4619      	mov	r1, r3
 801366c:	f004 f852 	bl	8017714 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013670:	89fb      	ldrh	r3, [r7, #14]
 8013672:	3308      	adds	r3, #8
 8013674:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	681a      	ldr	r2, [r3, #0]
 801367a:	89fb      	ldrh	r3, [r7, #14]
 801367c:	18d0      	adds	r0, r2, r3
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	330e      	adds	r3, #14
 8013682:	2208      	movs	r2, #8
 8013684:	4619      	mov	r1, r3
 8013686:	f004 f845 	bl	8017714 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 801368a:	89fb      	ldrh	r3, [r7, #14]
 801368c:	3308      	adds	r3, #8
 801368e:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	8ad9      	ldrh	r1, [r3, #22]
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	681a      	ldr	r2, [r3, #0]
 8013698:	89fb      	ldrh	r3, [r7, #14]
 801369a:	1c58      	adds	r0, r3, #1
 801369c:	81f8      	strh	r0, [r7, #14]
 801369e:	4413      	add	r3, r2
 80136a0:	b2ca      	uxtb	r2, r1
 80136a2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	8adb      	ldrh	r3, [r3, #22]
 80136a8:	0a1b      	lsrs	r3, r3, #8
 80136aa:	b299      	uxth	r1, r3
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	681a      	ldr	r2, [r3, #0]
 80136b0:	89fb      	ldrh	r3, [r7, #14]
 80136b2:	1c58      	adds	r0, r3, #1
 80136b4:	81f8      	strh	r0, [r7, #14]
 80136b6:	4413      	add	r3, r2
 80136b8:	b2ca      	uxtb	r2, r1
 80136ba:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	6999      	ldr	r1, [r3, #24]
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	681a      	ldr	r2, [r3, #0]
 80136c4:	89fb      	ldrh	r3, [r7, #14]
 80136c6:	1c58      	adds	r0, r3, #1
 80136c8:	81f8      	strh	r0, [r7, #14]
 80136ca:	4413      	add	r3, r2
 80136cc:	b2ca      	uxtb	r2, r1
 80136ce:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	699b      	ldr	r3, [r3, #24]
 80136d4:	0a19      	lsrs	r1, r3, #8
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	681a      	ldr	r2, [r3, #0]
 80136da:	89fb      	ldrh	r3, [r7, #14]
 80136dc:	1c58      	adds	r0, r3, #1
 80136de:	81f8      	strh	r0, [r7, #14]
 80136e0:	4413      	add	r3, r2
 80136e2:	b2ca      	uxtb	r2, r1
 80136e4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	699b      	ldr	r3, [r3, #24]
 80136ea:	0c19      	lsrs	r1, r3, #16
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	681a      	ldr	r2, [r3, #0]
 80136f0:	89fb      	ldrh	r3, [r7, #14]
 80136f2:	1c58      	adds	r0, r3, #1
 80136f4:	81f8      	strh	r0, [r7, #14]
 80136f6:	4413      	add	r3, r2
 80136f8:	b2ca      	uxtb	r2, r1
 80136fa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	699b      	ldr	r3, [r3, #24]
 8013700:	0e19      	lsrs	r1, r3, #24
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	681a      	ldr	r2, [r3, #0]
 8013706:	89fb      	ldrh	r3, [r7, #14]
 8013708:	1c58      	adds	r0, r3, #1
 801370a:	81f8      	strh	r0, [r7, #14]
 801370c:	4413      	add	r3, r2
 801370e:	b2ca      	uxtb	r2, r1
 8013710:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013712:	89fb      	ldrh	r3, [r7, #14]
 8013714:	b2da      	uxtb	r2, r3
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801371a:	2300      	movs	r3, #0
}
 801371c:	4618      	mov	r0, r3
 801371e:	3710      	adds	r7, #16
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}

08013724 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b084      	sub	sp, #16
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d003      	beq.n	801373a <LoRaMacSerializerData+0x16>
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d101      	bne.n	801373e <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801373a:	2301      	movs	r3, #1
 801373c:	e0e3      	b.n	8013906 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 801373e:	2300      	movs	r3, #0
 8013740:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8013742:	2308      	movs	r3, #8
 8013744:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	7b1b      	ldrb	r3, [r3, #12]
 801374a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801374e:	b2db      	uxtb	r3, r3
 8013750:	461a      	mov	r2, r3
 8013752:	89bb      	ldrh	r3, [r7, #12]
 8013754:	4413      	add	r3, r2
 8013756:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801375e:	2b00      	cmp	r3, #0
 8013760:	d002      	beq.n	8013768 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013762:	89bb      	ldrh	r3, [r7, #12]
 8013764:	3301      	adds	r3, #1
 8013766:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801376e:	461a      	mov	r2, r3
 8013770:	89bb      	ldrh	r3, [r7, #12]
 8013772:	4413      	add	r3, r2
 8013774:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8013776:	89bb      	ldrh	r3, [r7, #12]
 8013778:	3304      	adds	r3, #4
 801377a:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	791b      	ldrb	r3, [r3, #4]
 8013780:	461a      	mov	r2, r3
 8013782:	89bb      	ldrh	r3, [r7, #12]
 8013784:	4293      	cmp	r3, r2
 8013786:	d901      	bls.n	801378c <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013788:	2302      	movs	r3, #2
 801378a:	e0bc      	b.n	8013906 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	89fb      	ldrh	r3, [r7, #14]
 8013792:	1c59      	adds	r1, r3, #1
 8013794:	81f9      	strh	r1, [r7, #14]
 8013796:	4413      	add	r3, r2
 8013798:	687a      	ldr	r2, [r7, #4]
 801379a:	7952      	ldrb	r2, [r2, #5]
 801379c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	6899      	ldr	r1, [r3, #8]
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	681a      	ldr	r2, [r3, #0]
 80137a6:	89fb      	ldrh	r3, [r7, #14]
 80137a8:	1c58      	adds	r0, r3, #1
 80137aa:	81f8      	strh	r0, [r7, #14]
 80137ac:	4413      	add	r3, r2
 80137ae:	b2ca      	uxtb	r2, r1
 80137b0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	689b      	ldr	r3, [r3, #8]
 80137b6:	0a19      	lsrs	r1, r3, #8
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	681a      	ldr	r2, [r3, #0]
 80137bc:	89fb      	ldrh	r3, [r7, #14]
 80137be:	1c58      	adds	r0, r3, #1
 80137c0:	81f8      	strh	r0, [r7, #14]
 80137c2:	4413      	add	r3, r2
 80137c4:	b2ca      	uxtb	r2, r1
 80137c6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	689b      	ldr	r3, [r3, #8]
 80137cc:	0c19      	lsrs	r1, r3, #16
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681a      	ldr	r2, [r3, #0]
 80137d2:	89fb      	ldrh	r3, [r7, #14]
 80137d4:	1c58      	adds	r0, r3, #1
 80137d6:	81f8      	strh	r0, [r7, #14]
 80137d8:	4413      	add	r3, r2
 80137da:	b2ca      	uxtb	r2, r1
 80137dc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	689b      	ldr	r3, [r3, #8]
 80137e2:	0e19      	lsrs	r1, r3, #24
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	681a      	ldr	r2, [r3, #0]
 80137e8:	89fb      	ldrh	r3, [r7, #14]
 80137ea:	1c58      	adds	r0, r3, #1
 80137ec:	81f8      	strh	r0, [r7, #14]
 80137ee:	4413      	add	r3, r2
 80137f0:	b2ca      	uxtb	r2, r1
 80137f2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	681a      	ldr	r2, [r3, #0]
 80137f8:	89fb      	ldrh	r3, [r7, #14]
 80137fa:	1c59      	adds	r1, r3, #1
 80137fc:	81f9      	strh	r1, [r7, #14]
 80137fe:	4413      	add	r3, r2
 8013800:	687a      	ldr	r2, [r7, #4]
 8013802:	7b12      	ldrb	r2, [r2, #12]
 8013804:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	89d9      	ldrh	r1, [r3, #14]
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681a      	ldr	r2, [r3, #0]
 801380e:	89fb      	ldrh	r3, [r7, #14]
 8013810:	1c58      	adds	r0, r3, #1
 8013812:	81f8      	strh	r0, [r7, #14]
 8013814:	4413      	add	r3, r2
 8013816:	b2ca      	uxtb	r2, r1
 8013818:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	89db      	ldrh	r3, [r3, #14]
 801381e:	0a1b      	lsrs	r3, r3, #8
 8013820:	b299      	uxth	r1, r3
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	681a      	ldr	r2, [r3, #0]
 8013826:	89fb      	ldrh	r3, [r7, #14]
 8013828:	1c58      	adds	r0, r3, #1
 801382a:	81f8      	strh	r0, [r7, #14]
 801382c:	4413      	add	r3, r2
 801382e:	b2ca      	uxtb	r2, r1
 8013830:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	681a      	ldr	r2, [r3, #0]
 8013836:	89fb      	ldrh	r3, [r7, #14]
 8013838:	18d0      	adds	r0, r2, r3
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f103 0110 	add.w	r1, r3, #16
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	7b1b      	ldrb	r3, [r3, #12]
 8013844:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013848:	b2db      	uxtb	r3, r3
 801384a:	461a      	mov	r2, r3
 801384c:	f003 ff47 	bl	80176de <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	7b1b      	ldrb	r3, [r3, #12]
 8013854:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013858:	b2db      	uxtb	r3, r3
 801385a:	461a      	mov	r2, r3
 801385c:	89fb      	ldrh	r3, [r7, #14]
 801385e:	4413      	add	r3, r2
 8013860:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013868:	2b00      	cmp	r3, #0
 801386a:	d009      	beq.n	8013880 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681a      	ldr	r2, [r3, #0]
 8013870:	89fb      	ldrh	r3, [r7, #14]
 8013872:	1c59      	adds	r1, r3, #1
 8013874:	81f9      	strh	r1, [r7, #14]
 8013876:	4413      	add	r3, r2
 8013878:	687a      	ldr	r2, [r7, #4]
 801387a:	f892 2020 	ldrb.w	r2, [r2, #32]
 801387e:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681a      	ldr	r2, [r3, #0]
 8013884:	89fb      	ldrh	r3, [r7, #14]
 8013886:	18d0      	adds	r0, r2, r3
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013892:	461a      	mov	r2, r3
 8013894:	f003 ff23 	bl	80176de <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801389e:	461a      	mov	r2, r3
 80138a0:	89fb      	ldrh	r3, [r7, #14]
 80138a2:	4413      	add	r3, r2
 80138a4:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	681a      	ldr	r2, [r3, #0]
 80138ae:	89fb      	ldrh	r3, [r7, #14]
 80138b0:	1c58      	adds	r0, r3, #1
 80138b2:	81f8      	strh	r0, [r7, #14]
 80138b4:	4413      	add	r3, r2
 80138b6:	b2ca      	uxtb	r2, r1
 80138b8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138be:	0a19      	lsrs	r1, r3, #8
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	681a      	ldr	r2, [r3, #0]
 80138c4:	89fb      	ldrh	r3, [r7, #14]
 80138c6:	1c58      	adds	r0, r3, #1
 80138c8:	81f8      	strh	r0, [r7, #14]
 80138ca:	4413      	add	r3, r2
 80138cc:	b2ca      	uxtb	r2, r1
 80138ce:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138d4:	0c19      	lsrs	r1, r3, #16
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	681a      	ldr	r2, [r3, #0]
 80138da:	89fb      	ldrh	r3, [r7, #14]
 80138dc:	1c58      	adds	r0, r3, #1
 80138de:	81f8      	strh	r0, [r7, #14]
 80138e0:	4413      	add	r3, r2
 80138e2:	b2ca      	uxtb	r2, r1
 80138e4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138ea:	0e19      	lsrs	r1, r3, #24
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	681a      	ldr	r2, [r3, #0]
 80138f0:	89fb      	ldrh	r3, [r7, #14]
 80138f2:	1c58      	adds	r0, r3, #1
 80138f4:	81f8      	strh	r0, [r7, #14]
 80138f6:	4413      	add	r3, r2
 80138f8:	b2ca      	uxtb	r2, r1
 80138fa:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80138fc:	89fb      	ldrh	r3, [r7, #14]
 80138fe:	b2da      	uxtb	r2, r3
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013904:	2300      	movs	r3, #0
}
 8013906:	4618      	mov	r0, r3
 8013908:	3710      	adds	r7, #16
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}

0801390e <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 801390e:	b480      	push	{r7}
 8013910:	b083      	sub	sp, #12
 8013912:	af00      	add	r7, sp, #0
 8013914:	4603      	mov	r3, r0
 8013916:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013918:	79fb      	ldrb	r3, [r7, #7]
 801391a:	2b05      	cmp	r3, #5
 801391c:	d002      	beq.n	8013924 <RegionIsActive+0x16>
 801391e:	2b08      	cmp	r3, #8
 8013920:	d002      	beq.n	8013928 <RegionIsActive+0x1a>
 8013922:	e003      	b.n	801392c <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8013924:	2301      	movs	r3, #1
 8013926:	e002      	b.n	801392e <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8013928:	2301      	movs	r3, #1
 801392a:	e000      	b.n	801392e <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801392c:	2300      	movs	r3, #0
        }
    }
}
 801392e:	4618      	mov	r0, r3
 8013930:	370c      	adds	r7, #12
 8013932:	46bd      	mov	sp, r7
 8013934:	bc80      	pop	{r7}
 8013936:	4770      	bx	lr

08013938 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8013938:	b580      	push	{r7, lr}
 801393a:	b084      	sub	sp, #16
 801393c:	af00      	add	r7, sp, #0
 801393e:	4603      	mov	r3, r0
 8013940:	6039      	str	r1, [r7, #0]
 8013942:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8013944:	2300      	movs	r3, #0
 8013946:	60bb      	str	r3, [r7, #8]
    switch( region )
 8013948:	79fb      	ldrb	r3, [r7, #7]
 801394a:	2b05      	cmp	r3, #5
 801394c:	d002      	beq.n	8013954 <RegionGetPhyParam+0x1c>
 801394e:	2b08      	cmp	r3, #8
 8013950:	d006      	beq.n	8013960 <RegionGetPhyParam+0x28>
 8013952:	e00b      	b.n	801396c <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8013954:	6838      	ldr	r0, [r7, #0]
 8013956:	f001 fae7 	bl	8014f28 <RegionEU868GetPhyParam>
 801395a:	4603      	mov	r3, r0
 801395c:	60fb      	str	r3, [r7, #12]
 801395e:	e007      	b.n	8013970 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8013960:	6838      	ldr	r0, [r7, #0]
 8013962:	f002 fcbb 	bl	80162dc <RegionUS915GetPhyParam>
 8013966:	4603      	mov	r3, r0
 8013968:	60fb      	str	r3, [r7, #12]
 801396a:	e001      	b.n	8013970 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	4618      	mov	r0, r3
 8013974:	3710      	adds	r7, #16
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}

0801397a <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801397a:	b580      	push	{r7, lr}
 801397c:	b082      	sub	sp, #8
 801397e:	af00      	add	r7, sp, #0
 8013980:	4603      	mov	r3, r0
 8013982:	6039      	str	r1, [r7, #0]
 8013984:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013986:	79fb      	ldrb	r3, [r7, #7]
 8013988:	2b05      	cmp	r3, #5
 801398a:	d002      	beq.n	8013992 <RegionSetBandTxDone+0x18>
 801398c:	2b08      	cmp	r3, #8
 801398e:	d004      	beq.n	801399a <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8013990:	e006      	b.n	80139a0 <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 8013992:	6838      	ldr	r0, [r7, #0]
 8013994:	f001 fc14 	bl	80151c0 <RegionEU868SetBandTxDone>
 8013998:	e002      	b.n	80139a0 <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 801399a:	6838      	ldr	r0, [r7, #0]
 801399c:	f002 fe00 	bl	80165a0 <RegionUS915SetBandTxDone>
        }
    }
}
 80139a0:	3708      	adds	r7, #8
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}

080139a6 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80139a6:	b580      	push	{r7, lr}
 80139a8:	b082      	sub	sp, #8
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	4603      	mov	r3, r0
 80139ae:	6039      	str	r1, [r7, #0]
 80139b0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80139b2:	79fb      	ldrb	r3, [r7, #7]
 80139b4:	2b05      	cmp	r3, #5
 80139b6:	d002      	beq.n	80139be <RegionInitDefaults+0x18>
 80139b8:	2b08      	cmp	r3, #8
 80139ba:	d004      	beq.n	80139c6 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80139bc:	e006      	b.n	80139cc <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 80139be:	6838      	ldr	r0, [r7, #0]
 80139c0:	f001 fc2a 	bl	8015218 <RegionEU868InitDefaults>
 80139c4:	e002      	b.n	80139cc <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 80139c6:	6838      	ldr	r0, [r7, #0]
 80139c8:	f002 fe16 	bl	80165f8 <RegionUS915InitDefaults>
        }
    }
}
 80139cc:	bf00      	nop
 80139ce:	3708      	adds	r7, #8
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd80      	pop	{r7, pc}

080139d4 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b082      	sub	sp, #8
 80139d8:	af00      	add	r7, sp, #0
 80139da:	4603      	mov	r3, r0
 80139dc:	6039      	str	r1, [r7, #0]
 80139de:	71fb      	strb	r3, [r7, #7]
 80139e0:	4613      	mov	r3, r2
 80139e2:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80139e4:	79fb      	ldrb	r3, [r7, #7]
 80139e6:	2b05      	cmp	r3, #5
 80139e8:	d002      	beq.n	80139f0 <RegionVerify+0x1c>
 80139ea:	2b08      	cmp	r3, #8
 80139ec:	d007      	beq.n	80139fe <RegionVerify+0x2a>
 80139ee:	e00d      	b.n	8013a0c <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80139f0:	79bb      	ldrb	r3, [r7, #6]
 80139f2:	4619      	mov	r1, r3
 80139f4:	6838      	ldr	r0, [r7, #0]
 80139f6:	f001 fcad 	bl	8015354 <RegionEU868Verify>
 80139fa:	4603      	mov	r3, r0
 80139fc:	e007      	b.n	8013a0e <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 80139fe:	79bb      	ldrb	r3, [r7, #6]
 8013a00:	4619      	mov	r1, r3
 8013a02:	6838      	ldr	r0, [r7, #0]
 8013a04:	f002 ff2a 	bl	801685c <RegionUS915Verify>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	e000      	b.n	8013a0e <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 8013a0c:	2300      	movs	r3, #0
        }
    }
}
 8013a0e:	4618      	mov	r0, r3
 8013a10:	3708      	adds	r7, #8
 8013a12:	46bd      	mov	sp, r7
 8013a14:	bd80      	pop	{r7, pc}

08013a16 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8013a16:	b580      	push	{r7, lr}
 8013a18:	b082      	sub	sp, #8
 8013a1a:	af00      	add	r7, sp, #0
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	6039      	str	r1, [r7, #0]
 8013a20:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013a22:	79fb      	ldrb	r3, [r7, #7]
 8013a24:	2b05      	cmp	r3, #5
 8013a26:	d002      	beq.n	8013a2e <RegionApplyCFList+0x18>
 8013a28:	2b08      	cmp	r3, #8
 8013a2a:	d004      	beq.n	8013a36 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8013a2c:	e006      	b.n	8013a3c <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 8013a2e:	6838      	ldr	r0, [r7, #0]
 8013a30:	f001 fd0c 	bl	801544c <RegionEU868ApplyCFList>
 8013a34:	e002      	b.n	8013a3c <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 8013a36:	6838      	ldr	r0, [r7, #0]
 8013a38:	f002 ff78 	bl	801692c <RegionUS915ApplyCFList>
        }
    }
}
 8013a3c:	bf00      	nop
 8013a3e:	3708      	adds	r7, #8
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bd80      	pop	{r7, pc}

08013a44 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b082      	sub	sp, #8
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	6039      	str	r1, [r7, #0]
 8013a4e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013a50:	79fb      	ldrb	r3, [r7, #7]
 8013a52:	2b05      	cmp	r3, #5
 8013a54:	d002      	beq.n	8013a5c <RegionChanMaskSet+0x18>
 8013a56:	2b08      	cmp	r3, #8
 8013a58:	d005      	beq.n	8013a66 <RegionChanMaskSet+0x22>
 8013a5a:	e009      	b.n	8013a70 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8013a5c:	6838      	ldr	r0, [r7, #0]
 8013a5e:	f001 fd69 	bl	8015534 <RegionEU868ChanMaskSet>
 8013a62:	4603      	mov	r3, r0
 8013a64:	e005      	b.n	8013a72 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8013a66:	6838      	ldr	r0, [r7, #0]
 8013a68:	f002 ffd4 	bl	8016a14 <RegionUS915ChanMaskSet>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	e000      	b.n	8013a72 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8013a70:	2300      	movs	r3, #0
        }
    }
}
 8013a72:	4618      	mov	r0, r3
 8013a74:	3708      	adds	r7, #8
 8013a76:	46bd      	mov	sp, r7
 8013a78:	bd80      	pop	{r7, pc}

08013a7a <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013a7a:	b580      	push	{r7, lr}
 8013a7c:	b082      	sub	sp, #8
 8013a7e:	af00      	add	r7, sp, #0
 8013a80:	603b      	str	r3, [r7, #0]
 8013a82:	4603      	mov	r3, r0
 8013a84:	71fb      	strb	r3, [r7, #7]
 8013a86:	460b      	mov	r3, r1
 8013a88:	71bb      	strb	r3, [r7, #6]
 8013a8a:	4613      	mov	r3, r2
 8013a8c:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013a8e:	79fb      	ldrb	r3, [r7, #7]
 8013a90:	2b05      	cmp	r3, #5
 8013a92:	d002      	beq.n	8013a9a <RegionComputeRxWindowParameters+0x20>
 8013a94:	2b08      	cmp	r3, #8
 8013a96:	d008      	beq.n	8013aaa <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8013a98:	e00e      	b.n	8013ab8 <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8013a9a:	7979      	ldrb	r1, [r7, #5]
 8013a9c:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8013aa0:	693b      	ldr	r3, [r7, #16]
 8013aa2:	683a      	ldr	r2, [r7, #0]
 8013aa4:	f001 fd70 	bl	8015588 <RegionEU868ComputeRxWindowParameters>
 8013aa8:	e006      	b.n	8013ab8 <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8013aaa:	7979      	ldrb	r1, [r7, #5]
 8013aac:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8013ab0:	693b      	ldr	r3, [r7, #16]
 8013ab2:	683a      	ldr	r2, [r7, #0]
 8013ab4:	f003 f818 	bl	8016ae8 <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 8013ab8:	bf00      	nop
 8013aba:	3708      	adds	r7, #8
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}

08013ac0 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b084      	sub	sp, #16
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	60b9      	str	r1, [r7, #8]
 8013aca:	607a      	str	r2, [r7, #4]
 8013acc:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013ace:	7bfb      	ldrb	r3, [r7, #15]
 8013ad0:	2b05      	cmp	r3, #5
 8013ad2:	d002      	beq.n	8013ada <RegionRxConfig+0x1a>
 8013ad4:	2b08      	cmp	r3, #8
 8013ad6:	d006      	beq.n	8013ae6 <RegionRxConfig+0x26>
 8013ad8:	e00b      	b.n	8013af2 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8013ada:	6879      	ldr	r1, [r7, #4]
 8013adc:	68b8      	ldr	r0, [r7, #8]
 8013ade:	f001 fdad 	bl	801563c <RegionEU868RxConfig>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	e006      	b.n	8013af4 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8013ae6:	6879      	ldr	r1, [r7, #4]
 8013ae8:	68b8      	ldr	r0, [r7, #8]
 8013aea:	f003 f847 	bl	8016b7c <RegionUS915RxConfig>
 8013aee:	4603      	mov	r3, r0
 8013af0:	e000      	b.n	8013af4 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8013af2:	2300      	movs	r3, #0
        }
    }
}
 8013af4:	4618      	mov	r0, r3
 8013af6:	3710      	adds	r7, #16
 8013af8:	46bd      	mov	sp, r7
 8013afa:	bd80      	pop	{r7, pc}

08013afc <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b084      	sub	sp, #16
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	60b9      	str	r1, [r7, #8]
 8013b04:	607a      	str	r2, [r7, #4]
 8013b06:	603b      	str	r3, [r7, #0]
 8013b08:	4603      	mov	r3, r0
 8013b0a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013b0c:	7bfb      	ldrb	r3, [r7, #15]
 8013b0e:	2b05      	cmp	r3, #5
 8013b10:	d002      	beq.n	8013b18 <RegionTxConfig+0x1c>
 8013b12:	2b08      	cmp	r3, #8
 8013b14:	d007      	beq.n	8013b26 <RegionTxConfig+0x2a>
 8013b16:	e00d      	b.n	8013b34 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8013b18:	683a      	ldr	r2, [r7, #0]
 8013b1a:	6879      	ldr	r1, [r7, #4]
 8013b1c:	68b8      	ldr	r0, [r7, #8]
 8013b1e:	f001 fe5d 	bl	80157dc <RegionEU868TxConfig>
 8013b22:	4603      	mov	r3, r0
 8013b24:	e007      	b.n	8013b36 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8013b26:	683a      	ldr	r2, [r7, #0]
 8013b28:	6879      	ldr	r1, [r7, #4]
 8013b2a:	68b8      	ldr	r0, [r7, #8]
 8013b2c:	f003 f8aa 	bl	8016c84 <RegionUS915TxConfig>
 8013b30:	4603      	mov	r3, r0
 8013b32:	e000      	b.n	8013b36 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8013b34:	2300      	movs	r3, #0
        }
    }
}
 8013b36:	4618      	mov	r0, r3
 8013b38:	3710      	adds	r7, #16
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	bd80      	pop	{r7, pc}

08013b3e <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013b3e:	b580      	push	{r7, lr}
 8013b40:	b086      	sub	sp, #24
 8013b42:	af02      	add	r7, sp, #8
 8013b44:	60b9      	str	r1, [r7, #8]
 8013b46:	607a      	str	r2, [r7, #4]
 8013b48:	603b      	str	r3, [r7, #0]
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013b4e:	7bfb      	ldrb	r3, [r7, #15]
 8013b50:	2b05      	cmp	r3, #5
 8013b52:	d002      	beq.n	8013b5a <RegionLinkAdrReq+0x1c>
 8013b54:	2b08      	cmp	r3, #8
 8013b56:	d00a      	beq.n	8013b6e <RegionLinkAdrReq+0x30>
 8013b58:	e013      	b.n	8013b82 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8013b5a:	69fb      	ldr	r3, [r7, #28]
 8013b5c:	9300      	str	r3, [sp, #0]
 8013b5e:	69bb      	ldr	r3, [r7, #24]
 8013b60:	683a      	ldr	r2, [r7, #0]
 8013b62:	6879      	ldr	r1, [r7, #4]
 8013b64:	68b8      	ldr	r0, [r7, #8]
 8013b66:	f001 ff09 	bl	801597c <RegionEU868LinkAdrReq>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	e00a      	b.n	8013b84 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8013b6e:	69fb      	ldr	r3, [r7, #28]
 8013b70:	9300      	str	r3, [sp, #0]
 8013b72:	69bb      	ldr	r3, [r7, #24]
 8013b74:	683a      	ldr	r2, [r7, #0]
 8013b76:	6879      	ldr	r1, [r7, #4]
 8013b78:	68b8      	ldr	r0, [r7, #8]
 8013b7a:	f003 f92f 	bl	8016ddc <RegionUS915LinkAdrReq>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	e000      	b.n	8013b84 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8013b82:	2300      	movs	r3, #0
        }
    }
}
 8013b84:	4618      	mov	r0, r3
 8013b86:	3710      	adds	r7, #16
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd80      	pop	{r7, pc}

08013b8c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b082      	sub	sp, #8
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	4603      	mov	r3, r0
 8013b94:	6039      	str	r1, [r7, #0]
 8013b96:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013b98:	79fb      	ldrb	r3, [r7, #7]
 8013b9a:	2b05      	cmp	r3, #5
 8013b9c:	d002      	beq.n	8013ba4 <RegionRxParamSetupReq+0x18>
 8013b9e:	2b08      	cmp	r3, #8
 8013ba0:	d005      	beq.n	8013bae <RegionRxParamSetupReq+0x22>
 8013ba2:	e009      	b.n	8013bb8 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8013ba4:	6838      	ldr	r0, [r7, #0]
 8013ba6:	f002 f80b 	bl	8015bc0 <RegionEU868RxParamSetupReq>
 8013baa:	4603      	mov	r3, r0
 8013bac:	e005      	b.n	8013bba <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8013bae:	6838      	ldr	r0, [r7, #0]
 8013bb0:	f003 fb38 	bl	8017224 <RegionUS915RxParamSetupReq>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	e000      	b.n	8013bba <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013bb8:	2300      	movs	r3, #0
        }
    }
}
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3708      	adds	r7, #8
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}

08013bc2 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8013bc2:	b580      	push	{r7, lr}
 8013bc4:	b082      	sub	sp, #8
 8013bc6:	af00      	add	r7, sp, #0
 8013bc8:	4603      	mov	r3, r0
 8013bca:	6039      	str	r1, [r7, #0]
 8013bcc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013bce:	79fb      	ldrb	r3, [r7, #7]
 8013bd0:	2b05      	cmp	r3, #5
 8013bd2:	d002      	beq.n	8013bda <RegionNewChannelReq+0x18>
 8013bd4:	2b08      	cmp	r3, #8
 8013bd6:	d005      	beq.n	8013be4 <RegionNewChannelReq+0x22>
 8013bd8:	e009      	b.n	8013bee <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8013bda:	6838      	ldr	r0, [r7, #0]
 8013bdc:	f002 f82e 	bl	8015c3c <RegionEU868NewChannelReq>
 8013be0:	4603      	mov	r3, r0
 8013be2:	e005      	b.n	8013bf0 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8013be4:	6838      	ldr	r0, [r7, #0]
 8013be6:	f003 fb69 	bl	80172bc <RegionUS915NewChannelReq>
 8013bea:	4603      	mov	r3, r0
 8013bec:	e000      	b.n	8013bf0 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013bee:	2300      	movs	r3, #0
        }
    }
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3708      	adds	r7, #8
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}

08013bf8 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b082      	sub	sp, #8
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	4603      	mov	r3, r0
 8013c00:	6039      	str	r1, [r7, #0]
 8013c02:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013c04:	79fb      	ldrb	r3, [r7, #7]
 8013c06:	2b05      	cmp	r3, #5
 8013c08:	d002      	beq.n	8013c10 <RegionTxParamSetupReq+0x18>
 8013c0a:	2b08      	cmp	r3, #8
 8013c0c:	d005      	beq.n	8013c1a <RegionTxParamSetupReq+0x22>
 8013c0e:	e009      	b.n	8013c24 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8013c10:	6838      	ldr	r0, [r7, #0]
 8013c12:	f002 f871 	bl	8015cf8 <RegionEU868TxParamSetupReq>
 8013c16:	4603      	mov	r3, r0
 8013c18:	e005      	b.n	8013c26 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8013c1a:	6838      	ldr	r0, [r7, #0]
 8013c1c:	f003 fb59 	bl	80172d2 <RegionUS915TxParamSetupReq>
 8013c20:	4603      	mov	r3, r0
 8013c22:	e000      	b.n	8013c26 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013c24:	2300      	movs	r3, #0
        }
    }
}
 8013c26:	4618      	mov	r0, r3
 8013c28:	3708      	adds	r7, #8
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}

08013c2e <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8013c2e:	b580      	push	{r7, lr}
 8013c30:	b082      	sub	sp, #8
 8013c32:	af00      	add	r7, sp, #0
 8013c34:	4603      	mov	r3, r0
 8013c36:	6039      	str	r1, [r7, #0]
 8013c38:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013c3a:	79fb      	ldrb	r3, [r7, #7]
 8013c3c:	2b05      	cmp	r3, #5
 8013c3e:	d002      	beq.n	8013c46 <RegionDlChannelReq+0x18>
 8013c40:	2b08      	cmp	r3, #8
 8013c42:	d005      	beq.n	8013c50 <RegionDlChannelReq+0x22>
 8013c44:	e009      	b.n	8013c5a <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8013c46:	6838      	ldr	r0, [r7, #0]
 8013c48:	f002 f862 	bl	8015d10 <RegionEU868DlChannelReq>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	e005      	b.n	8013c5c <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8013c50:	6838      	ldr	r0, [r7, #0]
 8013c52:	f003 fb49 	bl	80172e8 <RegionUS915DlChannelReq>
 8013c56:	4603      	mov	r3, r0
 8013c58:	e000      	b.n	8013c5c <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013c5a:	2300      	movs	r3, #0
        }
    }
}
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	3708      	adds	r7, #8
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd80      	pop	{r7, pc}

08013c64 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	71fb      	strb	r3, [r7, #7]
 8013c6e:	460b      	mov	r3, r1
 8013c70:	71bb      	strb	r3, [r7, #6]
 8013c72:	4613      	mov	r3, r2
 8013c74:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013c76:	79fb      	ldrb	r3, [r7, #7]
 8013c78:	2b05      	cmp	r3, #5
 8013c7a:	d002      	beq.n	8013c82 <RegionAlternateDr+0x1e>
 8013c7c:	2b08      	cmp	r3, #8
 8013c7e:	d009      	beq.n	8013c94 <RegionAlternateDr+0x30>
 8013c80:	e011      	b.n	8013ca6 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8013c82:	797a      	ldrb	r2, [r7, #5]
 8013c84:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013c88:	4611      	mov	r1, r2
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f002 f88a 	bl	8015da4 <RegionEU868AlternateDr>
 8013c90:	4603      	mov	r3, r0
 8013c92:	e009      	b.n	8013ca8 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8013c94:	797a      	ldrb	r2, [r7, #5]
 8013c96:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013c9a:	4611      	mov	r1, r2
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f003 fb2f 	bl	8017300 <RegionUS915AlternateDr>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	e000      	b.n	8013ca8 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8013ca6:	2300      	movs	r3, #0
        }
    }
}
 8013ca8:	4618      	mov	r0, r3
 8013caa:	3708      	adds	r7, #8
 8013cac:	46bd      	mov	sp, r7
 8013cae:	bd80      	pop	{r7, pc}

08013cb0 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b084      	sub	sp, #16
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	60b9      	str	r1, [r7, #8]
 8013cb8:	607a      	str	r2, [r7, #4]
 8013cba:	603b      	str	r3, [r7, #0]
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013cc0:	7bfb      	ldrb	r3, [r7, #15]
 8013cc2:	2b05      	cmp	r3, #5
 8013cc4:	d002      	beq.n	8013ccc <RegionNextChannel+0x1c>
 8013cc6:	2b08      	cmp	r3, #8
 8013cc8:	d008      	beq.n	8013cdc <RegionNextChannel+0x2c>
 8013cca:	e00f      	b.n	8013cec <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8013ccc:	69bb      	ldr	r3, [r7, #24]
 8013cce:	683a      	ldr	r2, [r7, #0]
 8013cd0:	6879      	ldr	r1, [r7, #4]
 8013cd2:	68b8      	ldr	r0, [r7, #8]
 8013cd4:	f002 f876 	bl	8015dc4 <RegionEU868NextChannel>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	e008      	b.n	8013cee <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8013cdc:	69bb      	ldr	r3, [r7, #24]
 8013cde:	683a      	ldr	r2, [r7, #0]
 8013ce0:	6879      	ldr	r1, [r7, #4]
 8013ce2:	68b8      	ldr	r0, [r7, #8]
 8013ce4:	f003 fb48 	bl	8017378 <RegionUS915NextChannel>
 8013ce8:	4603      	mov	r3, r0
 8013cea:	e000      	b.n	8013cee <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013cec:	2309      	movs	r3, #9
        }
    }
}
 8013cee:	4618      	mov	r0, r3
 8013cf0:	3710      	adds	r7, #16
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd80      	pop	{r7, pc}

08013cf6 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8013cf6:	b580      	push	{r7, lr}
 8013cf8:	b082      	sub	sp, #8
 8013cfa:	af00      	add	r7, sp, #0
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	6039      	str	r1, [r7, #0]
 8013d00:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013d02:	79fb      	ldrb	r3, [r7, #7]
 8013d04:	2b05      	cmp	r3, #5
 8013d06:	d002      	beq.n	8013d0e <RegionSetContinuousWave+0x18>
 8013d08:	2b08      	cmp	r3, #8
 8013d0a:	d004      	beq.n	8013d16 <RegionSetContinuousWave+0x20>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8013d0c:	e006      	b.n	8013d1c <RegionSetContinuousWave+0x26>
        EU868_SET_CONTINUOUS_WAVE( );
 8013d0e:	6838      	ldr	r0, [r7, #0]
 8013d10:	f002 f9d2 	bl	80160b8 <RegionEU868SetContinuousWave>
 8013d14:	e002      	b.n	8013d1c <RegionSetContinuousWave+0x26>
        US915_SET_CONTINUOUS_WAVE( );
 8013d16:	6838      	ldr	r0, [r7, #0]
 8013d18:	f003 fc22 	bl	8017560 <RegionUS915SetContinuousWave>
        }
    }
}
 8013d1c:	bf00      	nop
 8013d1e:	3708      	adds	r7, #8
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd80      	pop	{r7, pc}

08013d24 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8013d24:	b590      	push	{r4, r7, lr}
 8013d26:	b083      	sub	sp, #12
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	4604      	mov	r4, r0
 8013d2c:	4608      	mov	r0, r1
 8013d2e:	4611      	mov	r1, r2
 8013d30:	461a      	mov	r2, r3
 8013d32:	4623      	mov	r3, r4
 8013d34:	71fb      	strb	r3, [r7, #7]
 8013d36:	4603      	mov	r3, r0
 8013d38:	71bb      	strb	r3, [r7, #6]
 8013d3a:	460b      	mov	r3, r1
 8013d3c:	717b      	strb	r3, [r7, #5]
 8013d3e:	4613      	mov	r3, r2
 8013d40:	713b      	strb	r3, [r7, #4]
    switch( region )
 8013d42:	79fb      	ldrb	r3, [r7, #7]
 8013d44:	2b05      	cmp	r3, #5
 8013d46:	d002      	beq.n	8013d4e <RegionApplyDrOffset+0x2a>
 8013d48:	2b08      	cmp	r3, #8
 8013d4a:	d00a      	beq.n	8013d62 <RegionApplyDrOffset+0x3e>
 8013d4c:	e013      	b.n	8013d76 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8013d4e:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8013d52:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013d56:	79bb      	ldrb	r3, [r7, #6]
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f002 f9fb 	bl	8016154 <RegionEU868ApplyDrOffset>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	e00a      	b.n	8013d78 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8013d62:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8013d66:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013d6a:	79bb      	ldrb	r3, [r7, #6]
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f003 fc4d 	bl	801760c <RegionUS915ApplyDrOffset>
 8013d72:	4603      	mov	r3, r0
 8013d74:	e000      	b.n	8013d78 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8013d76:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8013d78:	4618      	mov	r0, r3
 8013d7a:	370c      	adds	r7, #12
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd90      	pop	{r4, r7, pc}

08013d80 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8013d80:	b480      	push	{r7}
 8013d82:	b083      	sub	sp, #12
 8013d84:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8013d86:	4b04      	ldr	r3, [pc, #16]	@ (8013d98 <RegionGetVersion+0x18>)
 8013d88:	607b      	str	r3, [r7, #4]

    return version;
 8013d8a:	687b      	ldr	r3, [r7, #4]
}
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	370c      	adds	r7, #12
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bc80      	pop	{r7}
 8013d94:	4770      	bx	lr
 8013d96:	bf00      	nop
 8013d98:	01010003 	.word	0x01010003

08013d9c <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8013d9c:	b480      	push	{r7}
 8013d9e:	b087      	sub	sp, #28
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	4603      	mov	r3, r0
 8013da4:	60b9      	str	r1, [r7, #8]
 8013da6:	607a      	str	r2, [r7, #4]
 8013da8:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d002      	beq.n	8013db6 <FindAvailable125kHzChannels+0x1a>
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d101      	bne.n	8013dba <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013db6:	2303      	movs	r3, #3
 8013db8:	e021      	b.n	8013dfe <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	75fb      	strb	r3, [r7, #23]
 8013dc4:	e017      	b.n	8013df6 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8013dc6:	89fa      	ldrh	r2, [r7, #14]
 8013dc8:	7dfb      	ldrb	r3, [r7, #23]
 8013dca:	fa42 f303 	asr.w	r3, r2, r3
 8013dce:	f003 0301 	and.w	r3, r3, #1
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d00c      	beq.n	8013df0 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	781b      	ldrb	r3, [r3, #0]
 8013dda:	461a      	mov	r2, r3
 8013ddc:	68bb      	ldr	r3, [r7, #8]
 8013dde:	4413      	add	r3, r2
 8013de0:	7dfa      	ldrb	r2, [r7, #23]
 8013de2:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	781b      	ldrb	r3, [r3, #0]
 8013de8:	3301      	adds	r3, #1
 8013dea:	b2da      	uxtb	r2, r3
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8013df0:	7dfb      	ldrb	r3, [r7, #23]
 8013df2:	3301      	adds	r3, #1
 8013df4:	75fb      	strb	r3, [r7, #23]
 8013df6:	7dfb      	ldrb	r3, [r7, #23]
 8013df8:	2b07      	cmp	r3, #7
 8013dfa:	d9e4      	bls.n	8013dc6 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8013dfc:	2300      	movs	r3, #0
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	371c      	adds	r7, #28
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bc80      	pop	{r7}
 8013e06:	4770      	bx	lr

08013e08 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8013e08:	b590      	push	{r4, r7, lr}
 8013e0a:	b089      	sub	sp, #36	@ 0x24
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	60f8      	str	r0, [r7, #12]
 8013e10:	60b9      	str	r1, [r7, #8]
 8013e12:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8013e14:	2300      	movs	r3, #0
 8013e16:	617b      	str	r3, [r7, #20]
 8013e18:	2300      	movs	r3, #0
 8013e1a:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d005      	beq.n	8013e32 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8013e26:	68bb      	ldr	r3, [r7, #8]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d002      	beq.n	8013e32 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d101      	bne.n	8013e36 <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013e32:	2303      	movs	r3, #3
 8013e34:	e055      	b.n	8013ee2 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8013e36:	68bb      	ldr	r3, [r7, #8]
 8013e38:	781b      	ldrb	r3, [r3, #0]
 8013e3a:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8013e3c:	7f7b      	ldrb	r3, [r7, #29]
 8013e3e:	085b      	lsrs	r3, r3, #1
 8013e40:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8013e42:	7f7b      	ldrb	r3, [r7, #29]
 8013e44:	f003 0301 	and.w	r3, r3, #1
 8013e48:	b2db      	uxtb	r3, r3
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d107      	bne.n	8013e5e <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8013e4e:	7f3b      	ldrb	r3, [r7, #28]
 8013e50:	005b      	lsls	r3, r3, #1
 8013e52:	68fa      	ldr	r2, [r7, #12]
 8013e54:	4413      	add	r3, r2
 8013e56:	881b      	ldrh	r3, [r3, #0]
 8013e58:	b2db      	uxtb	r3, r3
 8013e5a:	83fb      	strh	r3, [r7, #30]
 8013e5c:	e006      	b.n	8013e6c <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8013e5e:	7f3b      	ldrb	r3, [r7, #28]
 8013e60:	005b      	lsls	r3, r3, #1
 8013e62:	68fa      	ldr	r2, [r7, #12]
 8013e64:	4413      	add	r3, r2
 8013e66:	881b      	ldrh	r3, [r3, #0]
 8013e68:	0a1b      	lsrs	r3, r3, #8
 8013e6a:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8013e6c:	f107 0213 	add.w	r2, r7, #19
 8013e70:	f107 0114 	add.w	r1, r7, #20
 8013e74:	8bfb      	ldrh	r3, [r7, #30]
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7ff ff90 	bl	8013d9c <FindAvailable125kHzChannels>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	2b03      	cmp	r3, #3
 8013e80:	d101      	bne.n	8013e86 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013e82:	2303      	movs	r3, #3
 8013e84:	e02d      	b.n	8013ee2 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 8013e86:	7cfb      	ldrb	r3, [r7, #19]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d011      	beq.n	8013eb0 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8013e8c:	7f7b      	ldrb	r3, [r7, #29]
 8013e8e:	00db      	lsls	r3, r3, #3
 8013e90:	b2dc      	uxtb	r4, r3
 8013e92:	7cfb      	ldrb	r3, [r7, #19]
 8013e94:	3b01      	subs	r3, #1
 8013e96:	4619      	mov	r1, r3
 8013e98:	2000      	movs	r0, #0
 8013e9a:	f003 fc09 	bl	80176b0 <randr>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	3320      	adds	r3, #32
 8013ea2:	443b      	add	r3, r7
 8013ea4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8013ea8:	4423      	add	r3, r4
 8013eaa:	b2da      	uxtb	r2, r3
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8013eb0:	7f7b      	ldrb	r3, [r7, #29]
 8013eb2:	3301      	adds	r3, #1
 8013eb4:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8013eb6:	7f7b      	ldrb	r3, [r7, #29]
 8013eb8:	2b07      	cmp	r3, #7
 8013eba:	d901      	bls.n	8013ec0 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8013ec0:	7cfb      	ldrb	r3, [r7, #19]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d104      	bne.n	8013ed0 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	781b      	ldrb	r3, [r3, #0]
 8013eca:	7f7a      	ldrb	r2, [r7, #29]
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d1b5      	bne.n	8013e3c <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8013ed0:	7cfb      	ldrb	r3, [r7, #19]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d004      	beq.n	8013ee0 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	7f7a      	ldrb	r2, [r7, #29]
 8013eda:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8013edc:	2300      	movs	r3, #0
 8013ede:	e000      	b.n	8013ee2 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8013ee0:	2303      	movs	r3, #3
}
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	3724      	adds	r7, #36	@ 0x24
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd90      	pop	{r4, r7, pc}

08013eea <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8013eea:	b480      	push	{r7}
 8013eec:	b085      	sub	sp, #20
 8013eee:	af00      	add	r7, sp, #0
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	60b9      	str	r1, [r7, #8]
 8013ef4:	607a      	str	r2, [r7, #4]
 8013ef6:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8013ef8:	7bfb      	ldrb	r3, [r7, #15]
 8013efa:	687a      	ldr	r2, [r7, #4]
 8013efc:	fb03 f202 	mul.w	r2, r3, r2
 8013f00:	68bb      	ldr	r3, [r7, #8]
 8013f02:	4413      	add	r3, r2
}
 8013f04:	4618      	mov	r0, r3
 8013f06:	3714      	adds	r7, #20
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bc80      	pop	{r7}
 8013f0c:	4770      	bx	lr

08013f0e <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8013f0e:	b480      	push	{r7}
 8013f10:	b087      	sub	sp, #28
 8013f12:	af00      	add	r7, sp, #0
 8013f14:	60f8      	str	r0, [r7, #12]
 8013f16:	4608      	mov	r0, r1
 8013f18:	4639      	mov	r1, r7
 8013f1a:	e881 000c 	stmia.w	r1, {r2, r3}
 8013f1e:	4603      	mov	r3, r0
 8013f20:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	881b      	ldrh	r3, [r3, #0]
 8013f26:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8013f28:	7afb      	ldrb	r3, [r7, #11]
 8013f2a:	f083 0301 	eor.w	r3, r3, #1
 8013f2e:	b2db      	uxtb	r3, r3
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d01b      	beq.n	8013f6c <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8013f34:	f242 7310 	movw	r3, #10000	@ 0x2710
 8013f38:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8013f3a:	683b      	ldr	r3, [r7, #0]
 8013f3c:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8013f40:	d202      	bcs.n	8013f48 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8013f42:	2364      	movs	r3, #100	@ 0x64
 8013f44:	82bb      	strh	r3, [r7, #20]
 8013f46:	e00b      	b.n	8013f60 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8013f48:	683b      	ldr	r3, [r7, #0]
 8013f4a:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8013f4e:	4293      	cmp	r3, r2
 8013f50:	d803      	bhi.n	8013f5a <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8013f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013f56:	82bb      	strh	r3, [r7, #20]
 8013f58:	e002      	b.n	8013f60 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8013f5a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8013f5e:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8013f60:	8aba      	ldrh	r2, [r7, #20]
 8013f62:	8afb      	ldrh	r3, [r7, #22]
 8013f64:	4293      	cmp	r3, r2
 8013f66:	bf38      	it	cc
 8013f68:	4613      	movcc	r3, r2
 8013f6a:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8013f6c:	8afb      	ldrh	r3, [r7, #22]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d101      	bne.n	8013f76 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8013f72:	2301      	movs	r3, #1
 8013f74:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8013f76:	8afb      	ldrh	r3, [r7, #22]
}
 8013f78:	4618      	mov	r0, r3
 8013f7a:	371c      	adds	r7, #28
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bc80      	pop	{r7}
 8013f80:	4770      	bx	lr
	...

08013f84 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b08e      	sub	sp, #56	@ 0x38
 8013f88:	af02      	add	r7, sp, #8
 8013f8a:	60f8      	str	r0, [r7, #12]
 8013f8c:	4608      	mov	r0, r1
 8013f8e:	4639      	mov	r1, r7
 8013f90:	e881 000c 	stmia.w	r1, {r2, r3}
 8013f94:	4603      	mov	r3, r0
 8013f96:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	881b      	ldrh	r3, [r3, #0]
 8013f9c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8013f9e:	4b4b      	ldr	r3, [pc, #300]	@ (80140cc <SetMaxTimeCredits+0x148>)
 8013fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8013fa2:	463b      	mov	r3, r7
 8013fa4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013fa8:	f007 f822 	bl	801aff0 <SysTimeToMs>
 8013fac:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 8013fae:	f107 0314 	add.w	r3, r7, #20
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	601a      	str	r2, [r3, #0]
 8013fb6:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8013fb8:	7af9      	ldrb	r1, [r7, #11]
 8013fba:	463b      	mov	r3, r7
 8013fbc:	cb0c      	ldmia	r3, {r2, r3}
 8013fbe:	68f8      	ldr	r0, [r7, #12]
 8013fc0:	f7ff ffa5 	bl	8013f0e <GetDutyCycle>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 8013fc8:	7afb      	ldrb	r3, [r7, #11]
 8013fca:	f083 0301 	eor.w	r3, r3, #1
 8013fce:	b2db      	uxtb	r3, r3
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d062      	beq.n	801409a <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8013fd4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013fd6:	2b64      	cmp	r3, #100	@ 0x64
 8013fd8:	d105      	bne.n	8013fe6 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8013fda:	4b3c      	ldr	r3, [pc, #240]	@ (80140cc <SetMaxTimeCredits+0x148>)
 8013fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013fe2:	609a      	str	r2, [r3, #8]
 8013fe4:	e00b      	b.n	8013ffe <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8013fe6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013fe8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013fec:	d105      	bne.n	8013ffa <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8013fee:	4b38      	ldr	r3, [pc, #224]	@ (80140d0 <SetMaxTimeCredits+0x14c>)
 8013ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013ff6:	609a      	str	r2, [r3, #8]
 8013ff8:	e001      	b.n	8013ffe <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8013ffa:	4b36      	ldr	r3, [pc, #216]	@ (80140d4 <SetMaxTimeCredits+0x150>)
 8013ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	689a      	ldr	r2, [r3, #8]
 8014002:	f107 031c 	add.w	r3, r7, #28
 8014006:	4611      	mov	r1, r2
 8014008:	4618      	mov	r0, r3
 801400a:	f007 f819 	bl	801b040 <SysTimeFromMs>
 801400e:	f107 0014 	add.w	r0, r7, #20
 8014012:	6a3b      	ldr	r3, [r7, #32]
 8014014:	9300      	str	r3, [sp, #0]
 8014016:	69fb      	ldr	r3, [r7, #28]
 8014018:	463a      	mov	r2, r7
 801401a:	ca06      	ldmia	r2, {r1, r2}
 801401c:	f006 ff29 	bl	801ae72 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014020:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8014024:	f083 0301 	eor.w	r3, r3, #1
 8014028:	b2db      	uxtb	r3, r3
 801402a:	2b00      	cmp	r3, #0
 801402c:	d006      	beq.n	801403c <SetMaxTimeCredits+0xb8>
 801402e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8014032:	f083 0301 	eor.w	r3, r3, #1
 8014036:	b2db      	uxtb	r3, r3
 8014038:	2b00      	cmp	r3, #0
 801403a:	d108      	bne.n	801404e <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014042:	429a      	cmp	r2, r3
 8014044:	d103      	bne.n	801404e <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8014046:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8014048:	4a23      	ldr	r2, [pc, #140]	@ (80140d8 <SetMaxTimeCredits+0x154>)
 801404a:	4293      	cmp	r3, r2
 801404c:	d92f      	bls.n	80140ae <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014052:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	4a21      	ldr	r2, [pc, #132]	@ (80140dc <SetMaxTimeCredits+0x158>)
 8014058:	4293      	cmp	r3, r2
 801405a:	d928      	bls.n	80140ae <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8014062:	3b30      	subs	r3, #48	@ 0x30
 8014064:	4a1e      	ldr	r2, [pc, #120]	@ (80140e0 <SetMaxTimeCredits+0x15c>)
 8014066:	fba2 2303 	umull	r2, r3, r2, r3
 801406a:	0c1b      	lsrs	r3, r3, #16
 801406c:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801406e:	697b      	ldr	r3, [r7, #20]
 8014070:	4a1c      	ldr	r2, [pc, #112]	@ (80140e4 <SetMaxTimeCredits+0x160>)
 8014072:	fb02 f303 	mul.w	r3, r2, r3
 8014076:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014078:	697b      	ldr	r3, [r7, #20]
 801407a:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 801407e:	3330      	adds	r3, #48	@ 0x30
 8014080:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8014082:	2300      	movs	r3, #0
 8014084:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8014086:	f107 0314 	add.w	r3, r7, #20
 801408a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801408e:	f006 ffaf 	bl	801aff0 <SysTimeToMs>
 8014092:	4602      	mov	r2, r0
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	609a      	str	r2, [r3, #8]
 8014098:	e009      	b.n	80140ae <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801409a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801409e:	f083 0301 	eor.w	r3, r3, #1
 80140a2:	b2db      	uxtb	r3, r3
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d002      	beq.n	80140ae <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80140ac:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	685b      	ldr	r3, [r3, #4]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d102      	bne.n	80140bc <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80140ba:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80140c0:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80140c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 80140c4:	4618      	mov	r0, r3
 80140c6:	3730      	adds	r7, #48	@ 0x30
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}
 80140cc:	001b7740 	.word	0x001b7740
 80140d0:	0112a880 	.word	0x0112a880
 80140d4:	02932e00 	.word	0x02932e00
 80140d8:	0001517f 	.word	0x0001517f
 80140dc:	0001ec2f 	.word	0x0001ec2f
 80140e0:	c22e4507 	.word	0xc22e4507
 80140e4:	00015180 	.word	0x00015180

080140e8 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b086      	sub	sp, #24
 80140ec:	af02      	add	r7, sp, #8
 80140ee:	6078      	str	r0, [r7, #4]
 80140f0:	4608      	mov	r0, r1
 80140f2:	4611      	mov	r1, r2
 80140f4:	461a      	mov	r2, r3
 80140f6:	4603      	mov	r3, r0
 80140f8:	70fb      	strb	r3, [r7, #3]
 80140fa:	460b      	mov	r3, r1
 80140fc:	70bb      	strb	r3, [r7, #2]
 80140fe:	4613      	mov	r3, r2
 8014100:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8014102:	78f9      	ldrb	r1, [r7, #3]
 8014104:	787b      	ldrb	r3, [r7, #1]
 8014106:	9301      	str	r3, [sp, #4]
 8014108:	78bb      	ldrb	r3, [r7, #2]
 801410a:	9300      	str	r3, [sp, #0]
 801410c:	f107 0318 	add.w	r3, r7, #24
 8014110:	cb0c      	ldmia	r3, {r2, r3}
 8014112:	6878      	ldr	r0, [r7, #4]
 8014114:	f7ff ff36 	bl	8013f84 <SetMaxTimeCredits>
 8014118:	4603      	mov	r3, r0
 801411a:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 801411c:	78fb      	ldrb	r3, [r7, #3]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d00a      	beq.n	8014138 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	685b      	ldr	r3, [r3, #4]
 8014126:	4618      	mov	r0, r3
 8014128:	f007 fd9c 	bl	801bc64 <UTIL_TIMER_GetElapsedTime>
 801412c:	4602      	mov	r2, r0
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	68db      	ldr	r3, [r3, #12]
 8014132:	441a      	add	r2, r3
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	68da      	ldr	r2, [r3, #12]
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	691b      	ldr	r3, [r3, #16]
 8014140:	429a      	cmp	r2, r3
 8014142:	d903      	bls.n	801414c <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	691a      	ldr	r2, [r3, #16]
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	6a3a      	ldr	r2, [r7, #32]
 8014150:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8014152:	89fb      	ldrh	r3, [r7, #14]
}
 8014154:	4618      	mov	r0, r3
 8014156:	3710      	adds	r7, #16
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}

0801415c <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 801415c:	b480      	push	{r7}
 801415e:	b085      	sub	sp, #20
 8014160:	af00      	add	r7, sp, #0
 8014162:	4603      	mov	r3, r0
 8014164:	460a      	mov	r2, r1
 8014166:	80fb      	strh	r3, [r7, #6]
 8014168:	4613      	mov	r3, r2
 801416a:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 801416c:	2300      	movs	r3, #0
 801416e:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8014170:	2300      	movs	r3, #0
 8014172:	73bb      	strb	r3, [r7, #14]
 8014174:	e011      	b.n	801419a <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8014176:	88fa      	ldrh	r2, [r7, #6]
 8014178:	7bbb      	ldrb	r3, [r7, #14]
 801417a:	2101      	movs	r1, #1
 801417c:	fa01 f303 	lsl.w	r3, r1, r3
 8014180:	401a      	ands	r2, r3
 8014182:	7bbb      	ldrb	r3, [r7, #14]
 8014184:	2101      	movs	r1, #1
 8014186:	fa01 f303 	lsl.w	r3, r1, r3
 801418a:	429a      	cmp	r2, r3
 801418c:	d102      	bne.n	8014194 <CountChannels+0x38>
        {
            nbActiveBits++;
 801418e:	7bfb      	ldrb	r3, [r7, #15]
 8014190:	3301      	adds	r3, #1
 8014192:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8014194:	7bbb      	ldrb	r3, [r7, #14]
 8014196:	3301      	adds	r3, #1
 8014198:	73bb      	strb	r3, [r7, #14]
 801419a:	7bba      	ldrb	r2, [r7, #14]
 801419c:	797b      	ldrb	r3, [r7, #5]
 801419e:	429a      	cmp	r2, r3
 80141a0:	d3e9      	bcc.n	8014176 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80141a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80141a4:	4618      	mov	r0, r3
 80141a6:	3714      	adds	r7, #20
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bc80      	pop	{r7}
 80141ac:	4770      	bx	lr

080141ae <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80141ae:	b580      	push	{r7, lr}
 80141b0:	b084      	sub	sp, #16
 80141b2:	af00      	add	r7, sp, #0
 80141b4:	6039      	str	r1, [r7, #0]
 80141b6:	4611      	mov	r1, r2
 80141b8:	461a      	mov	r2, r3
 80141ba:	4603      	mov	r3, r0
 80141bc:	71fb      	strb	r3, [r7, #7]
 80141be:	460b      	mov	r3, r1
 80141c0:	71bb      	strb	r3, [r7, #6]
 80141c2:	4613      	mov	r3, r2
 80141c4:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80141c6:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80141ca:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80141ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80141d2:	4618      	mov	r0, r3
 80141d4:	f000 f85d 	bl	8014292 <RegionCommonValueInRange>
 80141d8:	4603      	mov	r3, r0
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d101      	bne.n	80141e2 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80141de:	2300      	movs	r3, #0
 80141e0:	e053      	b.n	801428a <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80141e2:	2300      	movs	r3, #0
 80141e4:	73fb      	strb	r3, [r7, #15]
 80141e6:	2300      	movs	r3, #0
 80141e8:	73bb      	strb	r3, [r7, #14]
 80141ea:	e049      	b.n	8014280 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80141ec:	2300      	movs	r3, #0
 80141ee:	737b      	strb	r3, [r7, #13]
 80141f0:	e03d      	b.n	801426e <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80141f2:	7bbb      	ldrb	r3, [r7, #14]
 80141f4:	005b      	lsls	r3, r3, #1
 80141f6:	683a      	ldr	r2, [r7, #0]
 80141f8:	4413      	add	r3, r2
 80141fa:	881b      	ldrh	r3, [r3, #0]
 80141fc:	461a      	mov	r2, r3
 80141fe:	7b7b      	ldrb	r3, [r7, #13]
 8014200:	fa42 f303 	asr.w	r3, r2, r3
 8014204:	f003 0301 	and.w	r3, r3, #1
 8014208:	2b00      	cmp	r3, #0
 801420a:	d02d      	beq.n	8014268 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801420c:	7bfa      	ldrb	r2, [r7, #15]
 801420e:	7b7b      	ldrb	r3, [r7, #13]
 8014210:	4413      	add	r3, r2
 8014212:	461a      	mov	r2, r3
 8014214:	4613      	mov	r3, r2
 8014216:	005b      	lsls	r3, r3, #1
 8014218:	4413      	add	r3, r2
 801421a:	009b      	lsls	r3, r3, #2
 801421c:	461a      	mov	r2, r3
 801421e:	69fb      	ldr	r3, [r7, #28]
 8014220:	4413      	add	r3, r2
 8014222:	7a1b      	ldrb	r3, [r3, #8]
 8014224:	f343 0303 	sbfx	r3, r3, #0, #4
 8014228:	b25b      	sxtb	r3, r3
 801422a:	f003 030f 	and.w	r3, r3, #15
 801422e:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8014230:	7bfa      	ldrb	r2, [r7, #15]
 8014232:	7b7b      	ldrb	r3, [r7, #13]
 8014234:	4413      	add	r3, r2
 8014236:	461a      	mov	r2, r3
 8014238:	4613      	mov	r3, r2
 801423a:	005b      	lsls	r3, r3, #1
 801423c:	4413      	add	r3, r2
 801423e:	009b      	lsls	r3, r3, #2
 8014240:	461a      	mov	r2, r3
 8014242:	69fb      	ldr	r3, [r7, #28]
 8014244:	4413      	add	r3, r2
 8014246:	7a1b      	ldrb	r3, [r3, #8]
 8014248:	f343 1303 	sbfx	r3, r3, #4, #4
 801424c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801424e:	f003 030f 	and.w	r3, r3, #15
 8014252:	b25a      	sxtb	r2, r3
 8014254:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014258:	4618      	mov	r0, r3
 801425a:	f000 f81a 	bl	8014292 <RegionCommonValueInRange>
 801425e:	4603      	mov	r3, r0
 8014260:	2b01      	cmp	r3, #1
 8014262:	d101      	bne.n	8014268 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014264:	2301      	movs	r3, #1
 8014266:	e010      	b.n	801428a <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8014268:	7b7b      	ldrb	r3, [r7, #13]
 801426a:	3301      	adds	r3, #1
 801426c:	737b      	strb	r3, [r7, #13]
 801426e:	7b7b      	ldrb	r3, [r7, #13]
 8014270:	2b0f      	cmp	r3, #15
 8014272:	d9be      	bls.n	80141f2 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014274:	7bfb      	ldrb	r3, [r7, #15]
 8014276:	3310      	adds	r3, #16
 8014278:	73fb      	strb	r3, [r7, #15]
 801427a:	7bbb      	ldrb	r3, [r7, #14]
 801427c:	3301      	adds	r3, #1
 801427e:	73bb      	strb	r3, [r7, #14]
 8014280:	7bfa      	ldrb	r2, [r7, #15]
 8014282:	79fb      	ldrb	r3, [r7, #7]
 8014284:	429a      	cmp	r2, r3
 8014286:	d3b1      	bcc.n	80141ec <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8014288:	2300      	movs	r3, #0
}
 801428a:	4618      	mov	r0, r3
 801428c:	3710      	adds	r7, #16
 801428e:	46bd      	mov	sp, r7
 8014290:	bd80      	pop	{r7, pc}

08014292 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8014292:	b480      	push	{r7}
 8014294:	b083      	sub	sp, #12
 8014296:	af00      	add	r7, sp, #0
 8014298:	4603      	mov	r3, r0
 801429a:	71fb      	strb	r3, [r7, #7]
 801429c:	460b      	mov	r3, r1
 801429e:	71bb      	strb	r3, [r7, #6]
 80142a0:	4613      	mov	r3, r2
 80142a2:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80142a4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80142a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80142ac:	429a      	cmp	r2, r3
 80142ae:	db07      	blt.n	80142c0 <RegionCommonValueInRange+0x2e>
 80142b0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80142b4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80142b8:	429a      	cmp	r2, r3
 80142ba:	dc01      	bgt.n	80142c0 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80142bc:	2301      	movs	r3, #1
 80142be:	e000      	b.n	80142c2 <RegionCommonValueInRange+0x30>
    }
    return 0;
 80142c0:	2300      	movs	r3, #0
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	370c      	adds	r7, #12
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bc80      	pop	{r7}
 80142ca:	4770      	bx	lr

080142cc <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80142cc:	b480      	push	{r7}
 80142ce:	b085      	sub	sp, #20
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
 80142d4:	460b      	mov	r3, r1
 80142d6:	70fb      	strb	r3, [r7, #3]
 80142d8:	4613      	mov	r3, r2
 80142da:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80142dc:	78fb      	ldrb	r3, [r7, #3]
 80142de:	091b      	lsrs	r3, r3, #4
 80142e0:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80142e2:	78bb      	ldrb	r3, [r7, #2]
 80142e4:	091b      	lsrs	r3, r3, #4
 80142e6:	b2db      	uxtb	r3, r3
 80142e8:	7bfa      	ldrb	r2, [r7, #15]
 80142ea:	429a      	cmp	r2, r3
 80142ec:	d803      	bhi.n	80142f6 <RegionCommonChanDisable+0x2a>
 80142ee:	78fa      	ldrb	r2, [r7, #3]
 80142f0:	78bb      	ldrb	r3, [r7, #2]
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d301      	bcc.n	80142fa <RegionCommonChanDisable+0x2e>
    {
        return false;
 80142f6:	2300      	movs	r3, #0
 80142f8:	e017      	b.n	801432a <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80142fa:	7bfb      	ldrb	r3, [r7, #15]
 80142fc:	005b      	lsls	r3, r3, #1
 80142fe:	687a      	ldr	r2, [r7, #4]
 8014300:	4413      	add	r3, r2
 8014302:	881b      	ldrh	r3, [r3, #0]
 8014304:	b21a      	sxth	r2, r3
 8014306:	78fb      	ldrb	r3, [r7, #3]
 8014308:	f003 030f 	and.w	r3, r3, #15
 801430c:	2101      	movs	r1, #1
 801430e:	fa01 f303 	lsl.w	r3, r1, r3
 8014312:	b21b      	sxth	r3, r3
 8014314:	43db      	mvns	r3, r3
 8014316:	b21b      	sxth	r3, r3
 8014318:	4013      	ands	r3, r2
 801431a:	b219      	sxth	r1, r3
 801431c:	7bfb      	ldrb	r3, [r7, #15]
 801431e:	005b      	lsls	r3, r3, #1
 8014320:	687a      	ldr	r2, [r7, #4]
 8014322:	4413      	add	r3, r2
 8014324:	b28a      	uxth	r2, r1
 8014326:	801a      	strh	r2, [r3, #0]

    return true;
 8014328:	2301      	movs	r3, #1
}
 801432a:	4618      	mov	r0, r3
 801432c:	3714      	adds	r7, #20
 801432e:	46bd      	mov	sp, r7
 8014330:	bc80      	pop	{r7}
 8014332:	4770      	bx	lr

08014334 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b084      	sub	sp, #16
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
 801433c:	460b      	mov	r3, r1
 801433e:	70fb      	strb	r3, [r7, #3]
 8014340:	4613      	mov	r3, r2
 8014342:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8014344:	2300      	movs	r3, #0
 8014346:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d101      	bne.n	8014352 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801434e:	2300      	movs	r3, #0
 8014350:	e018      	b.n	8014384 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014352:	78fb      	ldrb	r3, [r7, #3]
 8014354:	73bb      	strb	r3, [r7, #14]
 8014356:	e010      	b.n	801437a <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8014358:	7bbb      	ldrb	r3, [r7, #14]
 801435a:	005b      	lsls	r3, r3, #1
 801435c:	687a      	ldr	r2, [r7, #4]
 801435e:	4413      	add	r3, r2
 8014360:	881b      	ldrh	r3, [r3, #0]
 8014362:	2110      	movs	r1, #16
 8014364:	4618      	mov	r0, r3
 8014366:	f7ff fef9 	bl	801415c <CountChannels>
 801436a:	4603      	mov	r3, r0
 801436c:	461a      	mov	r2, r3
 801436e:	7bfb      	ldrb	r3, [r7, #15]
 8014370:	4413      	add	r3, r2
 8014372:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014374:	7bbb      	ldrb	r3, [r7, #14]
 8014376:	3301      	adds	r3, #1
 8014378:	73bb      	strb	r3, [r7, #14]
 801437a:	7bba      	ldrb	r2, [r7, #14]
 801437c:	78bb      	ldrb	r3, [r7, #2]
 801437e:	429a      	cmp	r2, r3
 8014380:	d3ea      	bcc.n	8014358 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8014382:	7bfb      	ldrb	r3, [r7, #15]
}
 8014384:	4618      	mov	r0, r3
 8014386:	3710      	adds	r7, #16
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}

0801438c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 801438c:	b480      	push	{r7}
 801438e:	b087      	sub	sp, #28
 8014390:	af00      	add	r7, sp, #0
 8014392:	60f8      	str	r0, [r7, #12]
 8014394:	60b9      	str	r1, [r7, #8]
 8014396:	4613      	mov	r3, r2
 8014398:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d016      	beq.n	80143ce <RegionCommonChanMaskCopy+0x42>
 80143a0:	68bb      	ldr	r3, [r7, #8]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d013      	beq.n	80143ce <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80143a6:	2300      	movs	r3, #0
 80143a8:	75fb      	strb	r3, [r7, #23]
 80143aa:	e00c      	b.n	80143c6 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80143ac:	7dfb      	ldrb	r3, [r7, #23]
 80143ae:	005b      	lsls	r3, r3, #1
 80143b0:	68ba      	ldr	r2, [r7, #8]
 80143b2:	441a      	add	r2, r3
 80143b4:	7dfb      	ldrb	r3, [r7, #23]
 80143b6:	005b      	lsls	r3, r3, #1
 80143b8:	68f9      	ldr	r1, [r7, #12]
 80143ba:	440b      	add	r3, r1
 80143bc:	8812      	ldrh	r2, [r2, #0]
 80143be:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80143c0:	7dfb      	ldrb	r3, [r7, #23]
 80143c2:	3301      	adds	r3, #1
 80143c4:	75fb      	strb	r3, [r7, #23]
 80143c6:	7dfa      	ldrb	r2, [r7, #23]
 80143c8:	79fb      	ldrb	r3, [r7, #7]
 80143ca:	429a      	cmp	r2, r3
 80143cc:	d3ee      	bcc.n	80143ac <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80143ce:	bf00      	nop
 80143d0:	371c      	adds	r7, #28
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bc80      	pop	{r7}
 80143d6:	4770      	bx	lr

080143d8 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80143d8:	b082      	sub	sp, #8
 80143da:	b580      	push	{r7, lr}
 80143dc:	b086      	sub	sp, #24
 80143de:	af00      	add	r7, sp, #0
 80143e0:	60f8      	str	r0, [r7, #12]
 80143e2:	60b9      	str	r1, [r7, #8]
 80143e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80143e6:	4613      	mov	r3, r2
 80143e8:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80143ea:	79f9      	ldrb	r1, [r7, #7]
 80143ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80143f0:	cb0c      	ldmia	r3, {r2, r3}
 80143f2:	68f8      	ldr	r0, [r7, #12]
 80143f4:	f7ff fd8b 	bl	8013f0e <GetDutyCycle>
 80143f8:	4603      	mov	r3, r0
 80143fa:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	68da      	ldr	r2, [r3, #12]
 8014400:	8afb      	ldrh	r3, [r7, #22]
 8014402:	68b9      	ldr	r1, [r7, #8]
 8014404:	fb01 f303 	mul.w	r3, r1, r3
 8014408:	429a      	cmp	r2, r3
 801440a:	d909      	bls.n	8014420 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	68da      	ldr	r2, [r3, #12]
 8014410:	8afb      	ldrh	r3, [r7, #22]
 8014412:	68b9      	ldr	r1, [r7, #8]
 8014414:	fb01 f303 	mul.w	r3, r1, r3
 8014418:	1ad2      	subs	r2, r2, r3
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801441e:	e002      	b.n	8014426 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	2200      	movs	r2, #0
 8014424:	60da      	str	r2, [r3, #12]
}
 8014426:	bf00      	nop
 8014428:	3718      	adds	r7, #24
 801442a:	46bd      	mov	sp, r7
 801442c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014430:	b002      	add	sp, #8
 8014432:	4770      	bx	lr

08014434 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8014434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014436:	b08f      	sub	sp, #60	@ 0x3c
 8014438:	af04      	add	r7, sp, #16
 801443a:	6039      	str	r1, [r7, #0]
 801443c:	4611      	mov	r1, r2
 801443e:	461a      	mov	r2, r3
 8014440:	4603      	mov	r3, r0
 8014442:	71fb      	strb	r3, [r7, #7]
 8014444:	460b      	mov	r3, r1
 8014446:	71bb      	strb	r3, [r7, #6]
 8014448:	4613      	mov	r3, r2
 801444a:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 801444c:	f04f 33ff 	mov.w	r3, #4294967295
 8014450:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8014452:	f007 fbf5 	bl	801bc40 <UTIL_TIMER_GetCurrentTime>
 8014456:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8014458:	2300      	movs	r3, #0
 801445a:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 801445c:	2301      	movs	r3, #1
 801445e:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8014460:	2300      	movs	r3, #0
 8014462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8014466:	2300      	movs	r3, #0
 8014468:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801446c:	e0ba      	b.n	80145e4 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801446e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014472:	4613      	mov	r3, r2
 8014474:	005b      	lsls	r3, r3, #1
 8014476:	4413      	add	r3, r2
 8014478:	00db      	lsls	r3, r3, #3
 801447a:	461a      	mov	r2, r3
 801447c:	683b      	ldr	r3, [r7, #0]
 801447e:	189c      	adds	r4, r3, r2
 8014480:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8014484:	797a      	ldrb	r2, [r7, #5]
 8014486:	79fd      	ldrb	r5, [r7, #7]
 8014488:	69fb      	ldr	r3, [r7, #28]
 801448a:	9302      	str	r3, [sp, #8]
 801448c:	46ec      	mov	ip, sp
 801448e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8014492:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014496:	e88c 0003 	stmia.w	ip, {r0, r1}
 801449a:	4633      	mov	r3, r6
 801449c:	4629      	mov	r1, r5
 801449e:	4620      	mov	r0, r4
 80144a0:	f7ff fe22 	bl	80140e8 <UpdateTimeCredits>
 80144a4:	4603      	mov	r3, r0
 80144a6:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80144a8:	8afa      	ldrh	r2, [r7, #22]
 80144aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80144ac:	fb02 f303 	mul.w	r3, r2, r3
 80144b0:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80144b2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80144b6:	4613      	mov	r3, r2
 80144b8:	005b      	lsls	r3, r3, #1
 80144ba:	4413      	add	r3, r2
 80144bc:	00db      	lsls	r3, r3, #3
 80144be:	461a      	mov	r2, r3
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	4413      	add	r3, r2
 80144c4:	68db      	ldr	r3, [r3, #12]
 80144c6:	69ba      	ldr	r2, [r7, #24]
 80144c8:	429a      	cmp	r2, r3
 80144ca:	d908      	bls.n	80144de <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80144cc:	797b      	ldrb	r3, [r7, #5]
 80144ce:	f083 0301 	eor.w	r3, r3, #1
 80144d2:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d013      	beq.n	8014500 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80144d8:	79fb      	ldrb	r3, [r7, #7]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d010      	beq.n	8014500 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80144de:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80144e2:	4613      	mov	r3, r2
 80144e4:	005b      	lsls	r3, r3, #1
 80144e6:	4413      	add	r3, r2
 80144e8:	00db      	lsls	r3, r3, #3
 80144ea:	461a      	mov	r2, r3
 80144ec:	683b      	ldr	r3, [r7, #0]
 80144ee:	4413      	add	r3, r2
 80144f0:	2201      	movs	r2, #1
 80144f2:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80144f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80144f8:	3301      	adds	r3, #1
 80144fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80144fe:	e06c      	b.n	80145da <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8014500:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014504:	4613      	mov	r3, r2
 8014506:	005b      	lsls	r3, r3, #1
 8014508:	4413      	add	r3, r2
 801450a:	00db      	lsls	r3, r3, #3
 801450c:	461a      	mov	r2, r3
 801450e:	683b      	ldr	r3, [r7, #0]
 8014510:	4413      	add	r3, r2
 8014512:	2200      	movs	r2, #0
 8014514:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8014516:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801451a:	4613      	mov	r3, r2
 801451c:	005b      	lsls	r3, r3, #1
 801451e:	4413      	add	r3, r2
 8014520:	00db      	lsls	r3, r3, #3
 8014522:	461a      	mov	r2, r3
 8014524:	683b      	ldr	r3, [r7, #0]
 8014526:	4413      	add	r3, r2
 8014528:	691b      	ldr	r3, [r3, #16]
 801452a:	69ba      	ldr	r2, [r7, #24]
 801452c:	429a      	cmp	r2, r3
 801452e:	d815      	bhi.n	801455c <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8014530:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014534:	4613      	mov	r3, r2
 8014536:	005b      	lsls	r3, r3, #1
 8014538:	4413      	add	r3, r2
 801453a:	00db      	lsls	r3, r3, #3
 801453c:	461a      	mov	r2, r3
 801453e:	683b      	ldr	r3, [r7, #0]
 8014540:	4413      	add	r3, r2
 8014542:	68db      	ldr	r3, [r3, #12]
 8014544:	69ba      	ldr	r2, [r7, #24]
 8014546:	1ad3      	subs	r3, r2, r3
 8014548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801454a:	4293      	cmp	r3, r2
 801454c:	bf28      	it	cs
 801454e:	4613      	movcs	r3, r2
 8014550:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8014552:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014556:	3301      	adds	r3, #1
 8014558:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 801455c:	79fb      	ldrb	r3, [r7, #7]
 801455e:	f083 0301 	eor.w	r3, r3, #1
 8014562:	b2db      	uxtb	r3, r3
 8014564:	2b00      	cmp	r3, #0
 8014566:	d038      	beq.n	80145da <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8014568:	2300      	movs	r3, #0
 801456a:	60fb      	str	r3, [r7, #12]
 801456c:	2300      	movs	r3, #0
 801456e:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014570:	8afb      	ldrh	r3, [r7, #22]
 8014572:	2b64      	cmp	r3, #100	@ 0x64
 8014574:	d103      	bne.n	801457e <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8014576:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 801457a:	60fb      	str	r3, [r7, #12]
 801457c:	e009      	b.n	8014592 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801457e:	8afb      	ldrh	r3, [r7, #22]
 8014580:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8014584:	d103      	bne.n	801458e <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8014586:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 801458a:	60fb      	str	r3, [r7, #12]
 801458c:	e001      	b.n	8014592 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801458e:	4b1e      	ldr	r3, [pc, #120]	@ (8014608 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014590:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014592:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014594:	4a1c      	ldr	r2, [pc, #112]	@ (8014608 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014596:	4293      	cmp	r3, r2
 8014598:	d90e      	bls.n	80145b8 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801459a:	68fa      	ldr	r2, [r7, #12]
 801459c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801459e:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 80145a2:	3b30      	subs	r3, #48	@ 0x30
 80145a4:	4919      	ldr	r1, [pc, #100]	@ (801460c <RegionCommonUpdateBandTimeOff+0x1d8>)
 80145a6:	fba1 1303 	umull	r1, r3, r1, r3
 80145aa:	0c1b      	lsrs	r3, r3, #16
 80145ac:	3301      	adds	r3, #1
 80145ae:	4918      	ldr	r1, [pc, #96]	@ (8014610 <RegionCommonUpdateBandTimeOff+0x1dc>)
 80145b0:	fb01 f303 	mul.w	r3, r1, r3
 80145b4:	4413      	add	r3, r2
 80145b6:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80145b8:	f107 000c 	add.w	r0, r7, #12
 80145bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80145be:	9300      	str	r3, [sp, #0]
 80145c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145c2:	f107 020c 	add.w	r2, r7, #12
 80145c6:	ca06      	ldmia	r2, {r1, r2}
 80145c8:	f006 fc53 	bl	801ae72 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80145cc:	f107 030c 	add.w	r3, r7, #12
 80145d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80145d4:	f006 fd0c 	bl	801aff0 <SysTimeToMs>
 80145d8:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80145da:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80145de:	3301      	adds	r3, #1
 80145e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80145e4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80145e8:	79bb      	ldrb	r3, [r7, #6]
 80145ea:	429a      	cmp	r2, r3
 80145ec:	f4ff af3f 	bcc.w	801446e <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80145f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d102      	bne.n	80145fe <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80145f8:	f04f 33ff 	mov.w	r3, #4294967295
 80145fc:	e000      	b.n	8014600 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80145fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014600:	4618      	mov	r0, r3
 8014602:	372c      	adds	r7, #44	@ 0x2c
 8014604:	46bd      	mov	sp, r7
 8014606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014608:	0001ec30 	.word	0x0001ec30
 801460c:	c22e4507 	.word	0xc22e4507
 8014610:	00015180 	.word	0x00015180

08014614 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014614:	b480      	push	{r7}
 8014616:	b085      	sub	sp, #20
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
 801461c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801461e:	2300      	movs	r3, #0
 8014620:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	781b      	ldrb	r3, [r3, #0]
 8014626:	2b03      	cmp	r3, #3
 8014628:	d13f      	bne.n	80146aa <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	3301      	adds	r3, #1
 801462e:	781b      	ldrb	r3, [r3, #0]
 8014630:	b25a      	sxtb	r2, r3
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8014636:	683b      	ldr	r3, [r7, #0]
 8014638:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801463c:	f003 030f 	and.w	r3, r3, #15
 8014640:	b25a      	sxtb	r2, r3
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8014646:	683b      	ldr	r3, [r7, #0]
 8014648:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801464c:	b2db      	uxtb	r3, r3
 801464e:	091b      	lsrs	r3, r3, #4
 8014650:	b2db      	uxtb	r3, r3
 8014652:	b25a      	sxtb	r2, r3
 8014654:	683b      	ldr	r3, [r7, #0]
 8014656:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	3302      	adds	r3, #2
 801465c:	781b      	ldrb	r3, [r3, #0]
 801465e:	461a      	mov	r2, r3
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	889b      	ldrh	r3, [r3, #4]
 8014668:	b21a      	sxth	r2, r3
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	3303      	adds	r3, #3
 801466e:	781b      	ldrb	r3, [r3, #0]
 8014670:	021b      	lsls	r3, r3, #8
 8014672:	b21b      	sxth	r3, r3
 8014674:	4313      	orrs	r3, r2
 8014676:	b21b      	sxth	r3, r3
 8014678:	b29a      	uxth	r2, r3
 801467a:	683b      	ldr	r3, [r7, #0]
 801467c:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	791a      	ldrb	r2, [r3, #4]
 8014682:	683b      	ldr	r3, [r7, #0]
 8014684:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8014686:	683b      	ldr	r3, [r7, #0]
 8014688:	781b      	ldrb	r3, [r3, #0]
 801468a:	091b      	lsrs	r3, r3, #4
 801468c:	b2db      	uxtb	r3, r3
 801468e:	f003 0307 	and.w	r3, r3, #7
 8014692:	b2da      	uxtb	r2, r3
 8014694:	683b      	ldr	r3, [r7, #0]
 8014696:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	781b      	ldrb	r3, [r3, #0]
 801469c:	f003 030f 	and.w	r3, r3, #15
 80146a0:	b2da      	uxtb	r2, r3
 80146a2:	683b      	ldr	r3, [r7, #0]
 80146a4:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80146a6:	2305      	movs	r3, #5
 80146a8:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80146aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80146ac:	4618      	mov	r0, r3
 80146ae:	3714      	adds	r7, #20
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bc80      	pop	{r7}
 80146b4:	4770      	bx	lr

080146b6 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80146b6:	b5b0      	push	{r4, r5, r7, lr}
 80146b8:	b088      	sub	sp, #32
 80146ba:	af02      	add	r7, sp, #8
 80146bc:	60f8      	str	r0, [r7, #12]
 80146be:	60b9      	str	r1, [r7, #8]
 80146c0:	607a      	str	r2, [r7, #4]
 80146c2:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	791b      	ldrb	r3, [r3, #4]
 80146c8:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	799b      	ldrb	r3, [r3, #6]
 80146ce:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	79db      	ldrb	r3, [r3, #7]
 80146d4:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	7a1b      	ldrb	r3, [r3, #8]
 80146da:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	795b      	ldrb	r3, [r3, #5]
 80146e0:	f083 0301 	eor.w	r3, r3, #1
 80146e4:	b2db      	uxtb	r3, r3
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d008      	beq.n	80146fc <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	7adb      	ldrb	r3, [r3, #11]
 80146ee:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	7a5b      	ldrb	r3, [r3, #9]
 80146f4:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	7a9b      	ldrb	r3, [r3, #10]
 80146fa:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80146fc:	7dfb      	ldrb	r3, [r7, #23]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d04a      	beq.n	8014798 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8014702:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8014706:	2b0f      	cmp	r3, #15
 8014708:	d103      	bne.n	8014712 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	7a5b      	ldrb	r3, [r3, #9]
 801470e:	75bb      	strb	r3, [r7, #22]
 8014710:	e01d      	b.n	801474e <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	7b18      	ldrb	r0, [r3, #12]
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	6919      	ldr	r1, [r3, #16]
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8014726:	68fa      	ldr	r2, [r7, #12]
 8014728:	6992      	ldr	r2, [r2, #24]
 801472a:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801472e:	9201      	str	r2, [sp, #4]
 8014730:	9300      	str	r3, [sp, #0]
 8014732:	462b      	mov	r3, r5
 8014734:	4622      	mov	r2, r4
 8014736:	f7ff fd3a 	bl	80141ae <RegionCommonChanVerifyDr>
 801473a:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801473c:	f083 0301 	eor.w	r3, r3, #1
 8014740:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014742:	2b00      	cmp	r3, #0
 8014744:	d003      	beq.n	801474e <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8014746:	7dfb      	ldrb	r3, [r7, #23]
 8014748:	f023 0302 	bic.w	r3, r3, #2
 801474c:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801474e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8014752:	2b0f      	cmp	r3, #15
 8014754:	d103      	bne.n	801475e <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	7a9b      	ldrb	r3, [r3, #10]
 801475a:	757b      	strb	r3, [r7, #21]
 801475c:	e01c      	b.n	8014798 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801476a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801476e:	4618      	mov	r0, r3
 8014770:	f7ff fd8f 	bl	8014292 <RegionCommonValueInRange>
 8014774:	4603      	mov	r3, r0
 8014776:	2b00      	cmp	r3, #0
 8014778:	d10e      	bne.n	8014798 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8014780:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8014784:	429a      	cmp	r2, r3
 8014786:	da03      	bge.n	8014790 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	7f5b      	ldrb	r3, [r3, #29]
 801478c:	757b      	strb	r3, [r7, #21]
 801478e:	e003      	b.n	8014798 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8014790:	7dfb      	ldrb	r3, [r7, #23]
 8014792:	f023 0304 	bic.w	r3, r3, #4
 8014796:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8014798:	7dfb      	ldrb	r3, [r7, #23]
 801479a:	2b07      	cmp	r3, #7
 801479c:	d105      	bne.n	80147aa <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801479e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d101      	bne.n	80147aa <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80147a6:	2301      	movs	r3, #1
 80147a8:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80147aa:	68bb      	ldr	r3, [r7, #8]
 80147ac:	7dba      	ldrb	r2, [r7, #22]
 80147ae:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	7d7a      	ldrb	r2, [r7, #21]
 80147b4:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80147b6:	7d3a      	ldrb	r2, [r7, #20]
 80147b8:	683b      	ldr	r3, [r7, #0]
 80147ba:	701a      	strb	r2, [r3, #0]

    return status;
 80147bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80147be:	4618      	mov	r0, r3
 80147c0:	3718      	adds	r7, #24
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080147c8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80147c8:	b480      	push	{r7}
 80147ca:	b083      	sub	sp, #12
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	4603      	mov	r3, r0
 80147d0:	6039      	str	r1, [r7, #0]
 80147d2:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80147d4:	79fb      	ldrb	r3, [r7, #7]
 80147d6:	4a06      	ldr	r2, [pc, #24]	@ (80147f0 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80147d8:	fa02 f303 	lsl.w	r3, r2, r3
 80147dc:	461a      	mov	r2, r3
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	370c      	adds	r7, #12
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bc80      	pop	{r7}
 80147ec:	4770      	bx	lr
 80147ee:	bf00      	nop
 80147f0:	000f4240 	.word	0x000f4240

080147f4 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80147f4:	b480      	push	{r7}
 80147f6:	b083      	sub	sp, #12
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	4603      	mov	r3, r0
 80147fc:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80147fe:	79fb      	ldrb	r3, [r7, #7]
 8014800:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8014804:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014808:	4618      	mov	r0, r3
 801480a:	370c      	adds	r7, #12
 801480c:	46bd      	mov	sp, r7
 801480e:	bc80      	pop	{r7}
 8014810:	4770      	bx	lr
	...

08014814 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8014814:	b480      	push	{r7}
 8014816:	b085      	sub	sp, #20
 8014818:	af00      	add	r7, sp, #0
 801481a:	60f8      	str	r0, [r7, #12]
 801481c:	607a      	str	r2, [r7, #4]
 801481e:	603b      	str	r3, [r7, #0]
 8014820:	460b      	mov	r3, r1
 8014822:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8014824:	7afa      	ldrb	r2, [r7, #11]
 8014826:	7afb      	ldrb	r3, [r7, #11]
 8014828:	3b04      	subs	r3, #4
 801482a:	4619      	mov	r1, r3
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	fb03 f101 	mul.w	r1, r3, r1
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8014838:	fb00 f303 	mul.w	r3, r0, r3
 801483c:	440b      	add	r3, r1
 801483e:	005b      	lsls	r3, r3, #1
 8014840:	2b00      	cmp	r3, #0
 8014842:	d013      	beq.n	801486c <RegionCommonComputeRxWindowParameters+0x58>
 8014844:	7afb      	ldrb	r3, [r7, #11]
 8014846:	3b04      	subs	r3, #4
 8014848:	4619      	mov	r1, r3
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	fb03 f101 	mul.w	r1, r3, r1
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8014856:	fb00 f303 	mul.w	r3, r0, r3
 801485a:	440b      	add	r3, r1
 801485c:	0059      	lsls	r1, r3, #1
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	440b      	add	r3, r1
 8014862:	1e59      	subs	r1, r3, #1
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	fbb1 f3f3 	udiv	r3, r1, r3
 801486a:	e00f      	b.n	801488c <RegionCommonComputeRxWindowParameters+0x78>
 801486c:	7afb      	ldrb	r3, [r7, #11]
 801486e:	3b04      	subs	r3, #4
 8014870:	4619      	mov	r1, r3
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	fb03 f101 	mul.w	r1, r3, r1
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801487e:	fb00 f303 	mul.w	r3, r0, r3
 8014882:	440b      	add	r3, r1
 8014884:	0059      	lsls	r1, r3, #1
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	fbb1 f3f3 	udiv	r3, r1, r3
 801488c:	429a      	cmp	r2, r3
 801488e:	bf38      	it	cc
 8014890:	461a      	movcc	r2, r3
 8014892:	69bb      	ldr	r3, [r7, #24]
 8014894:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	009b      	lsls	r3, r3, #2
 801489a:	4619      	mov	r1, r3
 801489c:	69bb      	ldr	r3, [r7, #24]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	68fa      	ldr	r2, [r7, #12]
 80148a2:	fb02 f303 	mul.w	r3, r2, r3
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d007      	beq.n	80148ba <RegionCommonComputeRxWindowParameters+0xa6>
 80148aa:	69bb      	ldr	r3, [r7, #24]
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	68fa      	ldr	r2, [r7, #12]
 80148b0:	fb02 f303 	mul.w	r3, r2, r3
 80148b4:	3301      	adds	r3, #1
 80148b6:	085b      	lsrs	r3, r3, #1
 80148b8:	e005      	b.n	80148c6 <RegionCommonComputeRxWindowParameters+0xb2>
 80148ba:	69bb      	ldr	r3, [r7, #24]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	68fa      	ldr	r2, [r7, #12]
 80148c0:	fb02 f303 	mul.w	r3, r2, r3
 80148c4:	085b      	lsrs	r3, r3, #1
 80148c6:	1acb      	subs	r3, r1, r3
 80148c8:	683a      	ldr	r2, [r7, #0]
 80148ca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80148ce:	fb01 f202 	mul.w	r2, r1, r2
 80148d2:	1a9b      	subs	r3, r3, r2
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	dd27      	ble.n	8014928 <RegionCommonComputeRxWindowParameters+0x114>
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	009b      	lsls	r3, r3, #2
 80148dc:	4619      	mov	r1, r3
 80148de:	69bb      	ldr	r3, [r7, #24]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	68fa      	ldr	r2, [r7, #12]
 80148e4:	fb02 f303 	mul.w	r3, r2, r3
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d007      	beq.n	80148fc <RegionCommonComputeRxWindowParameters+0xe8>
 80148ec:	69bb      	ldr	r3, [r7, #24]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	68fa      	ldr	r2, [r7, #12]
 80148f2:	fb02 f303 	mul.w	r3, r2, r3
 80148f6:	3301      	adds	r3, #1
 80148f8:	085b      	lsrs	r3, r3, #1
 80148fa:	e005      	b.n	8014908 <RegionCommonComputeRxWindowParameters+0xf4>
 80148fc:	69bb      	ldr	r3, [r7, #24]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	68fa      	ldr	r2, [r7, #12]
 8014902:	fb02 f303 	mul.w	r3, r2, r3
 8014906:	085b      	lsrs	r3, r3, #1
 8014908:	1acb      	subs	r3, r1, r3
 801490a:	683a      	ldr	r2, [r7, #0]
 801490c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014910:	fb01 f202 	mul.w	r2, r1, r2
 8014914:	1a9b      	subs	r3, r3, r2
 8014916:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 801491a:	4a19      	ldr	r2, [pc, #100]	@ (8014980 <RegionCommonComputeRxWindowParameters+0x16c>)
 801491c:	fb82 1203 	smull	r1, r2, r2, r3
 8014920:	1192      	asrs	r2, r2, #6
 8014922:	17db      	asrs	r3, r3, #31
 8014924:	1ad3      	subs	r3, r2, r3
 8014926:	e024      	b.n	8014972 <RegionCommonComputeRxWindowParameters+0x15e>
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	009b      	lsls	r3, r3, #2
 801492c:	4619      	mov	r1, r3
 801492e:	69bb      	ldr	r3, [r7, #24]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	68fa      	ldr	r2, [r7, #12]
 8014934:	fb02 f303 	mul.w	r3, r2, r3
 8014938:	2b00      	cmp	r3, #0
 801493a:	d007      	beq.n	801494c <RegionCommonComputeRxWindowParameters+0x138>
 801493c:	69bb      	ldr	r3, [r7, #24]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	68fa      	ldr	r2, [r7, #12]
 8014942:	fb02 f303 	mul.w	r3, r2, r3
 8014946:	3301      	adds	r3, #1
 8014948:	085b      	lsrs	r3, r3, #1
 801494a:	e005      	b.n	8014958 <RegionCommonComputeRxWindowParameters+0x144>
 801494c:	69bb      	ldr	r3, [r7, #24]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	68fa      	ldr	r2, [r7, #12]
 8014952:	fb02 f303 	mul.w	r3, r2, r3
 8014956:	085b      	lsrs	r3, r3, #1
 8014958:	1acb      	subs	r3, r1, r3
 801495a:	683a      	ldr	r2, [r7, #0]
 801495c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014960:	fb01 f202 	mul.w	r2, r1, r2
 8014964:	1a9b      	subs	r3, r3, r2
 8014966:	4a06      	ldr	r2, [pc, #24]	@ (8014980 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014968:	fb82 1203 	smull	r1, r2, r2, r3
 801496c:	1192      	asrs	r2, r2, #6
 801496e:	17db      	asrs	r3, r3, #31
 8014970:	1ad3      	subs	r3, r2, r3
 8014972:	69fa      	ldr	r2, [r7, #28]
 8014974:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8014976:	bf00      	nop
 8014978:	3714      	adds	r7, #20
 801497a:	46bd      	mov	sp, r7
 801497c:	bc80      	pop	{r7}
 801497e:	4770      	bx	lr
 8014980:	10624dd3 	.word	0x10624dd3

08014984 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b086      	sub	sp, #24
 8014988:	af00      	add	r7, sp, #0
 801498a:	4603      	mov	r3, r0
 801498c:	60b9      	str	r1, [r7, #8]
 801498e:	607a      	str	r2, [r7, #4]
 8014990:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014992:	2300      	movs	r3, #0
 8014994:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801499a:	005b      	lsls	r3, r3, #1
 801499c:	4618      	mov	r0, r3
 801499e:	f7eb ff15 	bl	80007cc <__aeabi_ui2f>
 80149a2:	4603      	mov	r3, r0
 80149a4:	4619      	mov	r1, r3
 80149a6:	68b8      	ldr	r0, [r7, #8]
 80149a8:	f7eb fe5e 	bl	8000668 <__aeabi_fsub>
 80149ac:	4603      	mov	r3, r0
 80149ae:	6879      	ldr	r1, [r7, #4]
 80149b0:	4618      	mov	r0, r3
 80149b2:	f7eb fe59 	bl	8000668 <__aeabi_fsub>
 80149b6:	4603      	mov	r3, r0
 80149b8:	4618      	mov	r0, r3
 80149ba:	f7eb fd49 	bl	8000450 <__aeabi_f2d>
 80149be:	4602      	mov	r2, r0
 80149c0:	460b      	mov	r3, r1
 80149c2:	4610      	mov	r0, r2
 80149c4:	4619      	mov	r1, r3
 80149c6:	f007 fca3 	bl	801c310 <floor>
 80149ca:	4602      	mov	r2, r0
 80149cc:	460b      	mov	r3, r1
 80149ce:	4610      	mov	r0, r2
 80149d0:	4619      	mov	r1, r3
 80149d2:	f7eb fe1d 	bl	8000610 <__aeabi_d2iz>
 80149d6:	4603      	mov	r3, r0
 80149d8:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80149da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80149de:	4618      	mov	r0, r3
 80149e0:	3718      	adds	r7, #24
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}

080149e6 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80149e6:	b590      	push	{r4, r7, lr}
 80149e8:	b087      	sub	sp, #28
 80149ea:	af00      	add	r7, sp, #0
 80149ec:	60f8      	str	r0, [r7, #12]
 80149ee:	60b9      	str	r1, [r7, #8]
 80149f0:	607a      	str	r2, [r7, #4]
 80149f2:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80149f4:	2300      	movs	r3, #0
 80149f6:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80149f8:	2300      	movs	r3, #0
 80149fa:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80149fc:	2300      	movs	r3, #0
 80149fe:	757b      	strb	r3, [r7, #21]
 8014a00:	2300      	movs	r3, #0
 8014a02:	753b      	strb	r3, [r7, #20]
 8014a04:	e09c      	b.n	8014b40 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014a06:	2300      	movs	r3, #0
 8014a08:	74fb      	strb	r3, [r7, #19]
 8014a0a:	e08f      	b.n	8014b2c <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	685a      	ldr	r2, [r3, #4]
 8014a10:	7d3b      	ldrb	r3, [r7, #20]
 8014a12:	005b      	lsls	r3, r3, #1
 8014a14:	4413      	add	r3, r2
 8014a16:	881b      	ldrh	r3, [r3, #0]
 8014a18:	461a      	mov	r2, r3
 8014a1a:	7cfb      	ldrb	r3, [r7, #19]
 8014a1c:	fa42 f303 	asr.w	r3, r2, r3
 8014a20:	f003 0301 	and.w	r3, r3, #1
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d07e      	beq.n	8014b26 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	689a      	ldr	r2, [r3, #8]
 8014a2c:	7d79      	ldrb	r1, [r7, #21]
 8014a2e:	7cfb      	ldrb	r3, [r7, #19]
 8014a30:	440b      	add	r3, r1
 8014a32:	4619      	mov	r1, r3
 8014a34:	460b      	mov	r3, r1
 8014a36:	005b      	lsls	r3, r3, #1
 8014a38:	440b      	add	r3, r1
 8014a3a:	009b      	lsls	r3, r3, #2
 8014a3c:	4413      	add	r3, r2
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d06b      	beq.n	8014b1c <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	781b      	ldrb	r3, [r3, #0]
 8014a48:	f083 0301 	eor.w	r3, r3, #1
 8014a4c:	b2db      	uxtb	r3, r3
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d011      	beq.n	8014a76 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d00d      	beq.n	8014a76 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	695a      	ldr	r2, [r3, #20]
 8014a5e:	7d3b      	ldrb	r3, [r7, #20]
 8014a60:	005b      	lsls	r3, r3, #1
 8014a62:	4413      	add	r3, r2
 8014a64:	881b      	ldrh	r3, [r3, #0]
 8014a66:	461a      	mov	r2, r3
 8014a68:	7cfb      	ldrb	r3, [r7, #19]
 8014a6a:	fa42 f303 	asr.w	r3, r2, r3
 8014a6e:	f003 0301 	and.w	r3, r3, #1
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d054      	beq.n	8014b20 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	785b      	ldrb	r3, [r3, #1]
 8014a7a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	689a      	ldr	r2, [r3, #8]
 8014a80:	7d79      	ldrb	r1, [r7, #21]
 8014a82:	7cfb      	ldrb	r3, [r7, #19]
 8014a84:	440b      	add	r3, r1
 8014a86:	4619      	mov	r1, r3
 8014a88:	460b      	mov	r3, r1
 8014a8a:	005b      	lsls	r3, r3, #1
 8014a8c:	440b      	add	r3, r1
 8014a8e:	009b      	lsls	r3, r3, #2
 8014a90:	4413      	add	r3, r2
 8014a92:	7a1b      	ldrb	r3, [r3, #8]
 8014a94:	f343 0303 	sbfx	r3, r3, #0, #4
 8014a98:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014a9a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	689a      	ldr	r2, [r3, #8]
 8014aa0:	7d79      	ldrb	r1, [r7, #21]
 8014aa2:	7cfb      	ldrb	r3, [r7, #19]
 8014aa4:	440b      	add	r3, r1
 8014aa6:	4619      	mov	r1, r3
 8014aa8:	460b      	mov	r3, r1
 8014aaa:	005b      	lsls	r3, r3, #1
 8014aac:	440b      	add	r3, r1
 8014aae:	009b      	lsls	r3, r3, #2
 8014ab0:	4413      	add	r3, r2
 8014ab2:	7a1b      	ldrb	r3, [r3, #8]
 8014ab4:	f343 1303 	sbfx	r3, r3, #4, #4
 8014ab8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014aba:	461a      	mov	r2, r3
 8014abc:	4621      	mov	r1, r4
 8014abe:	f7ff fbe8 	bl	8014292 <RegionCommonValueInRange>
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d02d      	beq.n	8014b24 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	68da      	ldr	r2, [r3, #12]
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	6899      	ldr	r1, [r3, #8]
 8014ad0:	7d78      	ldrb	r0, [r7, #21]
 8014ad2:	7cfb      	ldrb	r3, [r7, #19]
 8014ad4:	4403      	add	r3, r0
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	4603      	mov	r3, r0
 8014ada:	005b      	lsls	r3, r3, #1
 8014adc:	4403      	add	r3, r0
 8014ade:	009b      	lsls	r3, r3, #2
 8014ae0:	440b      	add	r3, r1
 8014ae2:	7a5b      	ldrb	r3, [r3, #9]
 8014ae4:	4619      	mov	r1, r3
 8014ae6:	460b      	mov	r3, r1
 8014ae8:	005b      	lsls	r3, r3, #1
 8014aea:	440b      	add	r3, r1
 8014aec:	00db      	lsls	r3, r3, #3
 8014aee:	4413      	add	r3, r2
 8014af0:	7d1b      	ldrb	r3, [r3, #20]
 8014af2:	f083 0301 	eor.w	r3, r3, #1
 8014af6:	b2db      	uxtb	r3, r3
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d003      	beq.n	8014b04 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8014afc:	7dbb      	ldrb	r3, [r7, #22]
 8014afe:	3301      	adds	r3, #1
 8014b00:	75bb      	strb	r3, [r7, #22]
                    continue;
 8014b02:	e010      	b.n	8014b26 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8014b04:	7dfb      	ldrb	r3, [r7, #23]
 8014b06:	1c5a      	adds	r2, r3, #1
 8014b08:	75fa      	strb	r2, [r7, #23]
 8014b0a:	461a      	mov	r2, r3
 8014b0c:	68bb      	ldr	r3, [r7, #8]
 8014b0e:	4413      	add	r3, r2
 8014b10:	7d79      	ldrb	r1, [r7, #21]
 8014b12:	7cfa      	ldrb	r2, [r7, #19]
 8014b14:	440a      	add	r2, r1
 8014b16:	b2d2      	uxtb	r2, r2
 8014b18:	701a      	strb	r2, [r3, #0]
 8014b1a:	e004      	b.n	8014b26 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014b1c:	bf00      	nop
 8014b1e:	e002      	b.n	8014b26 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8014b20:	bf00      	nop
 8014b22:	e000      	b.n	8014b26 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014b24:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8014b26:	7cfb      	ldrb	r3, [r7, #19]
 8014b28:	3301      	adds	r3, #1
 8014b2a:	74fb      	strb	r3, [r7, #19]
 8014b2c:	7cfb      	ldrb	r3, [r7, #19]
 8014b2e:	2b0f      	cmp	r3, #15
 8014b30:	f67f af6c 	bls.w	8014a0c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014b34:	7d7b      	ldrb	r3, [r7, #21]
 8014b36:	3310      	adds	r3, #16
 8014b38:	757b      	strb	r3, [r7, #21]
 8014b3a:	7d3b      	ldrb	r3, [r7, #20]
 8014b3c:	3301      	adds	r3, #1
 8014b3e:	753b      	strb	r3, [r7, #20]
 8014b40:	7d7b      	ldrb	r3, [r7, #21]
 8014b42:	b29a      	uxth	r2, r3
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	8a1b      	ldrh	r3, [r3, #16]
 8014b48:	429a      	cmp	r2, r3
 8014b4a:	f4ff af5c 	bcc.w	8014a06 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	7dfa      	ldrb	r2, [r7, #23]
 8014b52:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8014b54:	683b      	ldr	r3, [r7, #0]
 8014b56:	7dba      	ldrb	r2, [r7, #22]
 8014b58:	701a      	strb	r2, [r3, #0]
}
 8014b5a:	bf00      	nop
 8014b5c:	371c      	adds	r7, #28
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd90      	pop	{r4, r7, pc}

08014b62 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8014b62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b64:	b08b      	sub	sp, #44	@ 0x2c
 8014b66:	af04      	add	r7, sp, #16
 8014b68:	60f8      	str	r0, [r7, #12]
 8014b6a:	60b9      	str	r1, [r7, #8]
 8014b6c:	607a      	str	r2, [r7, #4]
 8014b6e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	685b      	ldr	r3, [r3, #4]
 8014b74:	4618      	mov	r0, r3
 8014b76:	f007 f875 	bl	801bc64 <UTIL_TIMER_GetElapsedTime>
 8014b7a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	681a      	ldr	r2, [r3, #0]
 8014b80:	697b      	ldr	r3, [r7, #20]
 8014b82:	1ad2      	subs	r2, r2, r3
 8014b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b86:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8014b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b8a:	2201      	movs	r2, #1
 8014b8c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8014b8e:	683b      	ldr	r3, [r7, #0]
 8014b90:	2200      	movs	r2, #0
 8014b92:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	685b      	ldr	r3, [r3, #4]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d004      	beq.n	8014ba6 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014ba0:	697a      	ldr	r2, [r7, #20]
 8014ba2:	429a      	cmp	r2, r3
 8014ba4:	d32b      	bcc.n	8014bfe <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8014ba6:	68bb      	ldr	r3, [r7, #8]
 8014ba8:	2200      	movs	r2, #0
 8014baa:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	69db      	ldr	r3, [r3, #28]
 8014bb0:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014bb6:	68dd      	ldr	r5, [r3, #12]
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	7a5e      	ldrb	r6, [r3, #9]
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	f893 c008 	ldrb.w	ip, [r3, #8]
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	7d1b      	ldrb	r3, [r3, #20]
 8014bc6:	68fa      	ldr	r2, [r7, #12]
 8014bc8:	6992      	ldr	r2, [r2, #24]
 8014bca:	9203      	str	r2, [sp, #12]
 8014bcc:	68fa      	ldr	r2, [r7, #12]
 8014bce:	f10d 0e04 	add.w	lr, sp, #4
 8014bd2:	320c      	adds	r2, #12
 8014bd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014bd8:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014bdc:	9300      	str	r3, [sp, #0]
 8014bde:	4663      	mov	r3, ip
 8014be0:	4632      	mov	r2, r6
 8014be2:	4629      	mov	r1, r5
 8014be4:	4620      	mov	r0, r4
 8014be6:	f7ff fc25 	bl	8014434 <RegionCommonUpdateBandTimeOff>
 8014bea:	4602      	mov	r2, r0
 8014bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bee:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	69d8      	ldr	r0, [r3, #28]
 8014bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bf6:	683a      	ldr	r2, [r7, #0]
 8014bf8:	6879      	ldr	r1, [r7, #4]
 8014bfa:	f7ff fef4 	bl	80149e6 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	781b      	ldrb	r3, [r3, #0]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d004      	beq.n	8014c10 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8014c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c08:	2200      	movs	r2, #0
 8014c0a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	e006      	b.n	8014c1e <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8014c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c12:	781b      	ldrb	r3, [r3, #0]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d001      	beq.n	8014c1c <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8014c18:	230b      	movs	r3, #11
 8014c1a:	e000      	b.n	8014c1e <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8014c1c:	230c      	movs	r3, #12
    }
}
 8014c1e:	4618      	mov	r0, r3
 8014c20:	371c      	adds	r7, #28
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014c26 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8014c26:	b5b0      	push	{r4, r5, r7, lr}
 8014c28:	b086      	sub	sp, #24
 8014c2a:	af02      	add	r7, sp, #8
 8014c2c:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	781b      	ldrb	r3, [r3, #0]
 8014c32:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	f993 2000 	ldrsb.w	r2, [r3]
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	d103      	bne.n	8014c4c <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014c4a:	e026      	b.n	8014c9a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8014c4c:	7bfb      	ldrb	r3, [r7, #15]
 8014c4e:	3b01      	subs	r3, #1
 8014c50:	b2db      	uxtb	r3, r3
 8014c52:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014c5a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014c5e:	429a      	cmp	r2, r3
 8014c60:	d019      	beq.n	8014c96 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	78d8      	ldrb	r0, [r3, #3]
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	6859      	ldr	r1, [r3, #4]
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014c76:	687a      	ldr	r2, [r7, #4]
 8014c78:	6892      	ldr	r2, [r2, #8]
 8014c7a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8014c7e:	9201      	str	r2, [sp, #4]
 8014c80:	9300      	str	r3, [sp, #0]
 8014c82:	462b      	mov	r3, r5
 8014c84:	4622      	mov	r2, r4
 8014c86:	f7ff fa92 	bl	80141ae <RegionCommonChanVerifyDr>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	f083 0301 	eor.w	r3, r3, #1
 8014c90:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d1da      	bne.n	8014c4c <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8014c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	3710      	adds	r7, #16
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	bdb0      	pop	{r4, r5, r7, pc}

08014ca2 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8014ca2:	b480      	push	{r7}
 8014ca4:	b083      	sub	sp, #12
 8014ca6:	af00      	add	r7, sp, #0
 8014ca8:	4603      	mov	r3, r0
 8014caa:	460a      	mov	r2, r1
 8014cac:	71fb      	strb	r3, [r7, #7]
 8014cae:	4613      	mov	r3, r2
 8014cb0:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8014cb2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014cba:	4293      	cmp	r3, r2
 8014cbc:	bfb8      	it	lt
 8014cbe:	4613      	movlt	r3, r2
 8014cc0:	b25b      	sxtb	r3, r3
}
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	370c      	adds	r7, #12
 8014cc6:	46bd      	mov	sp, r7
 8014cc8:	bc80      	pop	{r7}
 8014cca:	4770      	bx	lr

08014ccc <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8014ccc:	b480      	push	{r7}
 8014cce:	b083      	sub	sp, #12
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	6078      	str	r0, [r7, #4]
 8014cd4:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	009b      	lsls	r3, r3, #2
 8014cda:	683a      	ldr	r2, [r7, #0]
 8014cdc:	4413      	add	r3, r2
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	4a07      	ldr	r2, [pc, #28]	@ (8014d00 <RegionCommonGetBandwidth+0x34>)
 8014ce2:	4293      	cmp	r3, r2
 8014ce4:	d004      	beq.n	8014cf0 <RegionCommonGetBandwidth+0x24>
 8014ce6:	4a07      	ldr	r2, [pc, #28]	@ (8014d04 <RegionCommonGetBandwidth+0x38>)
 8014ce8:	4293      	cmp	r3, r2
 8014cea:	d003      	beq.n	8014cf4 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8014cec:	2300      	movs	r3, #0
 8014cee:	e002      	b.n	8014cf6 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	e000      	b.n	8014cf6 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8014cf4:	2302      	movs	r3, #2
    }
}
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	370c      	adds	r7, #12
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	bc80      	pop	{r7}
 8014cfe:	4770      	bx	lr
 8014d00:	0003d090 	.word	0x0003d090
 8014d04:	0007a120 	.word	0x0007a120

08014d08 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b086      	sub	sp, #24
 8014d0c:	af04      	add	r7, sp, #16
 8014d0e:	4603      	mov	r3, r0
 8014d10:	6039      	str	r1, [r7, #0]
 8014d12:	71fb      	strb	r3, [r7, #7]
 8014d14:	4613      	mov	r3, r2
 8014d16:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8014d18:	79fb      	ldrb	r3, [r7, #7]
 8014d1a:	2b05      	cmp	r3, #5
 8014d1c:	d810      	bhi.n	8014d40 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8014d1e:	79fb      	ldrb	r3, [r7, #7]
 8014d20:	4a0f      	ldr	r2, [pc, #60]	@ (8014d60 <RegionCommonRxConfigPrint+0x58>)
 8014d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014d26:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014d2a:	9202      	str	r2, [sp, #8]
 8014d2c:	683a      	ldr	r2, [r7, #0]
 8014d2e:	9201      	str	r2, [sp, #4]
 8014d30:	9300      	str	r3, [sp, #0]
 8014d32:	4b0c      	ldr	r3, [pc, #48]	@ (8014d64 <RegionCommonRxConfigPrint+0x5c>)
 8014d34:	2201      	movs	r2, #1
 8014d36:	2100      	movs	r1, #0
 8014d38:	2002      	movs	r0, #2
 8014d3a:	f007 f871 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8014d3e:	e00a      	b.n	8014d56 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014d40:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014d44:	9301      	str	r3, [sp, #4]
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	9300      	str	r3, [sp, #0]
 8014d4a:	4b07      	ldr	r3, [pc, #28]	@ (8014d68 <RegionCommonRxConfigPrint+0x60>)
 8014d4c:	2201      	movs	r2, #1
 8014d4e:	2100      	movs	r1, #0
 8014d50:	2002      	movs	r0, #2
 8014d52:	f007 f865 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
}
 8014d56:	bf00      	nop
 8014d58:	3708      	adds	r7, #8
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	bd80      	pop	{r7, pc}
 8014d5e:	bf00      	nop
 8014d60:	20000108 	.word	0x20000108
 8014d64:	0801d188 	.word	0x0801d188
 8014d68:	0801d1a8 	.word	0x0801d1a8

08014d6c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b084      	sub	sp, #16
 8014d70:	af02      	add	r7, sp, #8
 8014d72:	6078      	str	r0, [r7, #4]
 8014d74:	460b      	mov	r3, r1
 8014d76:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014d7c:	9301      	str	r3, [sp, #4]
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	9300      	str	r3, [sp, #0]
 8014d82:	4b05      	ldr	r3, [pc, #20]	@ (8014d98 <RegionCommonTxConfigPrint+0x2c>)
 8014d84:	2201      	movs	r2, #1
 8014d86:	2100      	movs	r1, #0
 8014d88:	2002      	movs	r0, #2
 8014d8a:	f007 f849 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
}
 8014d8e:	bf00      	nop
 8014d90:	3708      	adds	r7, #8
 8014d92:	46bd      	mov	sp, r7
 8014d94:	bd80      	pop	{r7, pc}
 8014d96:	bf00      	nop
 8014d98:	0801d1c4 	.word	0x0801d1c4

08014d9c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b082      	sub	sp, #8
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
 8014da4:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014da6:	4b2d      	ldr	r3, [pc, #180]	@ (8014e5c <VerifyRfFreq+0xc0>)
 8014da8:	6a1b      	ldr	r3, [r3, #32]
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	4798      	blx	r3
 8014dae:	4603      	mov	r3, r0
 8014db0:	f083 0301 	eor.w	r3, r3, #1
 8014db4:	b2db      	uxtb	r3, r3
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d001      	beq.n	8014dbe <VerifyRfFreq+0x22>
    {
        return false;
 8014dba:	2300      	movs	r3, #0
 8014dbc:	e04a      	b.n	8014e54 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	4a27      	ldr	r2, [pc, #156]	@ (8014e60 <VerifyRfFreq+0xc4>)
 8014dc2:	4293      	cmp	r3, r2
 8014dc4:	d307      	bcc.n	8014dd6 <VerifyRfFreq+0x3a>
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	4a26      	ldr	r2, [pc, #152]	@ (8014e64 <VerifyRfFreq+0xc8>)
 8014dca:	4293      	cmp	r3, r2
 8014dcc:	d803      	bhi.n	8014dd6 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8014dce:	683b      	ldr	r3, [r7, #0]
 8014dd0:	2202      	movs	r2, #2
 8014dd2:	701a      	strb	r2, [r3, #0]
 8014dd4:	e03d      	b.n	8014e52 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	4a22      	ldr	r2, [pc, #136]	@ (8014e64 <VerifyRfFreq+0xc8>)
 8014dda:	4293      	cmp	r3, r2
 8014ddc:	d907      	bls.n	8014dee <VerifyRfFreq+0x52>
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	4a21      	ldr	r2, [pc, #132]	@ (8014e68 <VerifyRfFreq+0xcc>)
 8014de2:	4293      	cmp	r3, r2
 8014de4:	d803      	bhi.n	8014dee <VerifyRfFreq+0x52>
    {
        *band = 0;
 8014de6:	683b      	ldr	r3, [r7, #0]
 8014de8:	2200      	movs	r2, #0
 8014dea:	701a      	strb	r2, [r3, #0]
 8014dec:	e031      	b.n	8014e52 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	4a1d      	ldr	r2, [pc, #116]	@ (8014e68 <VerifyRfFreq+0xcc>)
 8014df2:	4293      	cmp	r3, r2
 8014df4:	d907      	bls.n	8014e06 <VerifyRfFreq+0x6a>
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	4a1c      	ldr	r2, [pc, #112]	@ (8014e6c <VerifyRfFreq+0xd0>)
 8014dfa:	4293      	cmp	r3, r2
 8014dfc:	d803      	bhi.n	8014e06 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8014dfe:	683b      	ldr	r3, [r7, #0]
 8014e00:	2201      	movs	r2, #1
 8014e02:	701a      	strb	r2, [r3, #0]
 8014e04:	e025      	b.n	8014e52 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	4a19      	ldr	r2, [pc, #100]	@ (8014e70 <VerifyRfFreq+0xd4>)
 8014e0a:	4293      	cmp	r3, r2
 8014e0c:	d907      	bls.n	8014e1e <VerifyRfFreq+0x82>
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	4a18      	ldr	r2, [pc, #96]	@ (8014e74 <VerifyRfFreq+0xd8>)
 8014e12:	4293      	cmp	r3, r2
 8014e14:	d803      	bhi.n	8014e1e <VerifyRfFreq+0x82>
    {
        *band = 5;
 8014e16:	683b      	ldr	r3, [r7, #0]
 8014e18:	2205      	movs	r2, #5
 8014e1a:	701a      	strb	r2, [r3, #0]
 8014e1c:	e019      	b.n	8014e52 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	4a15      	ldr	r2, [pc, #84]	@ (8014e78 <VerifyRfFreq+0xdc>)
 8014e22:	4293      	cmp	r3, r2
 8014e24:	d907      	bls.n	8014e36 <VerifyRfFreq+0x9a>
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	4a14      	ldr	r2, [pc, #80]	@ (8014e7c <VerifyRfFreq+0xe0>)
 8014e2a:	4293      	cmp	r3, r2
 8014e2c:	d803      	bhi.n	8014e36 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8014e2e:	683b      	ldr	r3, [r7, #0]
 8014e30:	2203      	movs	r2, #3
 8014e32:	701a      	strb	r2, [r3, #0]
 8014e34:	e00d      	b.n	8014e52 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	4a11      	ldr	r2, [pc, #68]	@ (8014e80 <VerifyRfFreq+0xe4>)
 8014e3a:	4293      	cmp	r3, r2
 8014e3c:	d307      	bcc.n	8014e4e <VerifyRfFreq+0xb2>
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	4a10      	ldr	r2, [pc, #64]	@ (8014e84 <VerifyRfFreq+0xe8>)
 8014e42:	4293      	cmp	r3, r2
 8014e44:	d803      	bhi.n	8014e4e <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	2204      	movs	r2, #4
 8014e4a:	701a      	strb	r2, [r3, #0]
 8014e4c:	e001      	b.n	8014e52 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8014e4e:	2300      	movs	r3, #0
 8014e50:	e000      	b.n	8014e54 <VerifyRfFreq+0xb8>
    }
    return true;
 8014e52:	2301      	movs	r3, #1
}
 8014e54:	4618      	mov	r0, r3
 8014e56:	3708      	adds	r7, #8
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	bd80      	pop	{r7, pc}
 8014e5c:	0801d86c 	.word	0x0801d86c
 8014e60:	337055c0 	.word	0x337055c0
 8014e64:	338eda3f 	.word	0x338eda3f
 8014e68:	33bca100 	.word	0x33bca100
 8014e6c:	33c5c8c0 	.word	0x33c5c8c0
 8014e70:	33c74f5f 	.word	0x33c74f5f
 8014e74:	33cef080 	.word	0x33cef080
 8014e78:	33d1fdbf 	.word	0x33d1fdbf
 8014e7c:	33d5ce50 	.word	0x33d5ce50
 8014e80:	33d691a0 	.word	0x33d691a0
 8014e84:	33db2580 	.word	0x33db2580

08014e88 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8014e88:	b590      	push	{r4, r7, lr}
 8014e8a:	b08b      	sub	sp, #44	@ 0x2c
 8014e8c:	af04      	add	r7, sp, #16
 8014e8e:	4603      	mov	r3, r0
 8014e90:	460a      	mov	r2, r1
 8014e92:	71fb      	strb	r3, [r7, #7]
 8014e94:	4613      	mov	r3, r2
 8014e96:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8014e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8014f1c <GetTimeOnAir+0x94>)
 8014e9e:	5cd3      	ldrb	r3, [r2, r3]
 8014ea0:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8014ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ea6:	491e      	ldr	r1, [pc, #120]	@ (8014f20 <GetTimeOnAir+0x98>)
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	f7ff ff0f 	bl	8014ccc <RegionCommonGetBandwidth>
 8014eae:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8014eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014eb8:	2b07      	cmp	r3, #7
 8014eba:	d118      	bne.n	8014eee <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8014ebc:	4b19      	ldr	r3, [pc, #100]	@ (8014f24 <GetTimeOnAir+0x9c>)
 8014ebe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014ec0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014ec4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014ec8:	fb02 f303 	mul.w	r3, r2, r3
 8014ecc:	4619      	mov	r1, r3
 8014ece:	88bb      	ldrh	r3, [r7, #4]
 8014ed0:	b2db      	uxtb	r3, r3
 8014ed2:	2201      	movs	r2, #1
 8014ed4:	9203      	str	r2, [sp, #12]
 8014ed6:	9302      	str	r3, [sp, #8]
 8014ed8:	2300      	movs	r3, #0
 8014eda:	9301      	str	r3, [sp, #4]
 8014edc:	2305      	movs	r3, #5
 8014ede:	9300      	str	r3, [sp, #0]
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	460a      	mov	r2, r1
 8014ee4:	68f9      	ldr	r1, [r7, #12]
 8014ee6:	2000      	movs	r0, #0
 8014ee8:	47a0      	blx	r4
 8014eea:	6178      	str	r0, [r7, #20]
 8014eec:	e011      	b.n	8014f12 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8014eee:	4b0d      	ldr	r3, [pc, #52]	@ (8014f24 <GetTimeOnAir+0x9c>)
 8014ef0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014ef2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014ef6:	88bb      	ldrh	r3, [r7, #4]
 8014ef8:	b2db      	uxtb	r3, r3
 8014efa:	2101      	movs	r1, #1
 8014efc:	9103      	str	r1, [sp, #12]
 8014efe:	9302      	str	r3, [sp, #8]
 8014f00:	2300      	movs	r3, #0
 8014f02:	9301      	str	r3, [sp, #4]
 8014f04:	2308      	movs	r3, #8
 8014f06:	9300      	str	r3, [sp, #0]
 8014f08:	2301      	movs	r3, #1
 8014f0a:	68f9      	ldr	r1, [r7, #12]
 8014f0c:	2001      	movs	r0, #1
 8014f0e:	47a0      	blx	r4
 8014f10:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8014f12:	697b      	ldr	r3, [r7, #20]
}
 8014f14:	4618      	mov	r0, r3
 8014f16:	371c      	adds	r7, #28
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	bd90      	pop	{r4, r7, pc}
 8014f1c:	0801d7b0 	.word	0x0801d7b0
 8014f20:	0801d7b8 	.word	0x0801d7b8
 8014f24:	0801d86c 	.word	0x0801d86c

08014f28 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b088      	sub	sp, #32
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014f30:	2300      	movs	r3, #0
 8014f32:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	781b      	ldrb	r3, [r3, #0]
 8014f38:	3b01      	subs	r3, #1
 8014f3a:	2b38      	cmp	r3, #56	@ 0x38
 8014f3c:	f200 8128 	bhi.w	8015190 <RegionEU868GetPhyParam+0x268>
 8014f40:	a201      	add	r2, pc, #4	@ (adr r2, 8014f48 <RegionEU868GetPhyParam+0x20>)
 8014f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f46:	bf00      	nop
 8014f48:	0801502d 	.word	0x0801502d
 8014f4c:	08015033 	.word	0x08015033
 8014f50:	08015191 	.word	0x08015191
 8014f54:	08015191 	.word	0x08015191
 8014f58:	08015191 	.word	0x08015191
 8014f5c:	08015039 	.word	0x08015039
 8014f60:	08015191 	.word	0x08015191
 8014f64:	08015073 	.word	0x08015073
 8014f68:	08015191 	.word	0x08015191
 8014f6c:	08015079 	.word	0x08015079
 8014f70:	0801507f 	.word	0x0801507f
 8014f74:	08015085 	.word	0x08015085
 8014f78:	0801508b 	.word	0x0801508b
 8014f7c:	0801509b 	.word	0x0801509b
 8014f80:	080150ab 	.word	0x080150ab
 8014f84:	080150b1 	.word	0x080150b1
 8014f88:	080150b9 	.word	0x080150b9
 8014f8c:	080150c1 	.word	0x080150c1
 8014f90:	080150c9 	.word	0x080150c9
 8014f94:	080150d1 	.word	0x080150d1
 8014f98:	080150d9 	.word	0x080150d9
 8014f9c:	080150e1 	.word	0x080150e1
 8014fa0:	080150f5 	.word	0x080150f5
 8014fa4:	080150fb 	.word	0x080150fb
 8014fa8:	08015101 	.word	0x08015101
 8014fac:	08015107 	.word	0x08015107
 8014fb0:	08015113 	.word	0x08015113
 8014fb4:	0801511f 	.word	0x0801511f
 8014fb8:	08015125 	.word	0x08015125
 8014fbc:	0801512d 	.word	0x0801512d
 8014fc0:	08015133 	.word	0x08015133
 8014fc4:	08015139 	.word	0x08015139
 8014fc8:	08015141 	.word	0x08015141
 8014fcc:	0801503f 	.word	0x0801503f
 8014fd0:	08015191 	.word	0x08015191
 8014fd4:	08015191 	.word	0x08015191
 8014fd8:	08015191 	.word	0x08015191
 8014fdc:	08015191 	.word	0x08015191
 8014fe0:	08015191 	.word	0x08015191
 8014fe4:	08015191 	.word	0x08015191
 8014fe8:	08015191 	.word	0x08015191
 8014fec:	08015191 	.word	0x08015191
 8014ff0:	08015191 	.word	0x08015191
 8014ff4:	08015191 	.word	0x08015191
 8014ff8:	08015191 	.word	0x08015191
 8014ffc:	08015191 	.word	0x08015191
 8015000:	08015191 	.word	0x08015191
 8015004:	08015147 	.word	0x08015147
 8015008:	0801514d 	.word	0x0801514d
 801500c:	0801515b 	.word	0x0801515b
 8015010:	08015191 	.word	0x08015191
 8015014:	08015191 	.word	0x08015191
 8015018:	08015161 	.word	0x08015161
 801501c:	08015167 	.word	0x08015167
 8015020:	08015191 	.word	0x08015191
 8015024:	0801516d 	.word	0x0801516d
 8015028:	0801517d 	.word	0x0801517d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 801502c:	2300      	movs	r3, #0
 801502e:	61bb      	str	r3, [r7, #24]
            break;
 8015030:	e0af      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8015032:	2300      	movs	r3, #0
 8015034:	61bb      	str	r3, [r7, #24]
            break;
 8015036:	e0ac      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8015038:	2300      	movs	r3, #0
 801503a:	61bb      	str	r3, [r7, #24]
            break;
 801503c:	e0a9      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015044:	733b      	strb	r3, [r7, #12]
 8015046:	2307      	movs	r3, #7
 8015048:	737b      	strb	r3, [r7, #13]
 801504a:	2300      	movs	r3, #0
 801504c:	73bb      	strb	r3, [r7, #14]
 801504e:	2310      	movs	r3, #16
 8015050:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8015052:	4b53      	ldr	r3, [pc, #332]	@ (80151a0 <RegionEU868GetPhyParam+0x278>)
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801505a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801505c:	4b50      	ldr	r3, [pc, #320]	@ (80151a0 <RegionEU868GetPhyParam+0x278>)
 801505e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015060:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8015062:	f107 030c 	add.w	r3, r7, #12
 8015066:	4618      	mov	r0, r3
 8015068:	f7ff fddd 	bl	8014c26 <RegionCommonGetNextLowerTxDr>
 801506c:	4603      	mov	r3, r0
 801506e:	61bb      	str	r3, [r7, #24]
            break;
 8015070:	e08f      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8015072:	2300      	movs	r3, #0
 8015074:	61bb      	str	r3, [r7, #24]
            break;
 8015076:	e08c      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8015078:	2300      	movs	r3, #0
 801507a:	61bb      	str	r3, [r7, #24]
            break;
 801507c:	e089      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801507e:	2340      	movs	r3, #64	@ 0x40
 8015080:	61bb      	str	r3, [r7, #24]
            break;
 8015082:	e086      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8015084:	2320      	movs	r3, #32
 8015086:	61bb      	str	r3, [r7, #24]
            break;
 8015088:	e083      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015090:	461a      	mov	r2, r3
 8015092:	4b44      	ldr	r3, [pc, #272]	@ (80151a4 <RegionEU868GetPhyParam+0x27c>)
 8015094:	5c9b      	ldrb	r3, [r3, r2]
 8015096:	61bb      	str	r3, [r7, #24]
            break;
 8015098:	e07b      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80150a0:	461a      	mov	r2, r3
 80150a2:	4b41      	ldr	r3, [pc, #260]	@ (80151a8 <RegionEU868GetPhyParam+0x280>)
 80150a4:	5c9b      	ldrb	r3, [r3, r2]
 80150a6:	61bb      	str	r3, [r7, #24]
            break;
 80150a8:	e073      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80150aa:	2301      	movs	r3, #1
 80150ac:	61bb      	str	r3, [r7, #24]
            break;
 80150ae:	e070      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80150b0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80150b4:	61bb      	str	r3, [r7, #24]
            break;
 80150b6:	e06c      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80150b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80150bc:	61bb      	str	r3, [r7, #24]
            break;
 80150be:	e068      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80150c0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80150c4:	61bb      	str	r3, [r7, #24]
            break;
 80150c6:	e064      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80150c8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80150cc:	61bb      	str	r3, [r7, #24]
            break;
 80150ce:	e060      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80150d0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80150d4:	61bb      	str	r3, [r7, #24]
            break;
 80150d6:	e05c      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80150d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80150dc:	61bb      	str	r3, [r7, #24]
            break;
 80150de:	e058      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80150e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80150e4:	4831      	ldr	r0, [pc, #196]	@ (80151ac <RegionEU868GetPhyParam+0x284>)
 80150e6:	f002 fae3 	bl	80176b0 <randr>
 80150ea:	4603      	mov	r3, r0
 80150ec:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80150f0:	61bb      	str	r3, [r7, #24]
            break;
 80150f2:	e04e      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80150f4:	2300      	movs	r3, #0
 80150f6:	61bb      	str	r3, [r7, #24]
            break;
 80150f8:	e04b      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80150fa:	4b2d      	ldr	r3, [pc, #180]	@ (80151b0 <RegionEU868GetPhyParam+0x288>)
 80150fc:	61bb      	str	r3, [r7, #24]
            break;
 80150fe:	e048      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8015100:	2300      	movs	r3, #0
 8015102:	61bb      	str	r3, [r7, #24]
            break;
 8015104:	e045      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015106:	4b26      	ldr	r3, [pc, #152]	@ (80151a0 <RegionEU868GetPhyParam+0x278>)
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801510e:	61bb      	str	r3, [r7, #24]
            break;
 8015110:	e03f      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8015112:	4b23      	ldr	r3, [pc, #140]	@ (80151a0 <RegionEU868GetPhyParam+0x278>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 801511a:	61bb      	str	r3, [r7, #24]
            break;
 801511c:	e039      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801511e:	2310      	movs	r3, #16
 8015120:	61bb      	str	r3, [r7, #24]
            break;
 8015122:	e036      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015124:	4b1e      	ldr	r3, [pc, #120]	@ (80151a0 <RegionEU868GetPhyParam+0x278>)
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	61bb      	str	r3, [r7, #24]
            break;
 801512a:	e032      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 801512c:	2300      	movs	r3, #0
 801512e:	61bb      	str	r3, [r7, #24]
            break;
 8015130:	e02f      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8015132:	2300      	movs	r3, #0
 8015134:	61bb      	str	r3, [r7, #24]
            break;
 8015136:	e02c      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8015138:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 801513c:	61bb      	str	r3, [r7, #24]
            break;
 801513e:	e028      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8015140:	4b1c      	ldr	r3, [pc, #112]	@ (80151b4 <RegionEU868GetPhyParam+0x28c>)
 8015142:	61bb      	str	r3, [r7, #24]
            break;
 8015144:	e025      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8015146:	4b1a      	ldr	r3, [pc, #104]	@ (80151b0 <RegionEU868GetPhyParam+0x288>)
 8015148:	61bb      	str	r3, [r7, #24]
            break;
 801514a:	e022      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801514c:	2311      	movs	r3, #17
 801514e:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8015150:	2302      	movs	r3, #2
 8015152:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8015154:	2300      	movs	r3, #0
 8015156:	76bb      	strb	r3, [r7, #26]
            break;
 8015158:	e01b      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801515a:	2303      	movs	r3, #3
 801515c:	61bb      	str	r3, [r7, #24]
            break;
 801515e:	e018      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8015160:	4b13      	ldr	r3, [pc, #76]	@ (80151b0 <RegionEU868GetPhyParam+0x288>)
 8015162:	61bb      	str	r3, [r7, #24]
            break;
 8015164:	e015      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8015166:	2303      	movs	r3, #3
 8015168:	61bb      	str	r3, [r7, #24]
            break;
 801516a:	e012      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015172:	461a      	mov	r2, r3
 8015174:	4b10      	ldr	r3, [pc, #64]	@ (80151b8 <RegionEU868GetPhyParam+0x290>)
 8015176:	5c9b      	ldrb	r3, [r3, r2]
 8015178:	61bb      	str	r3, [r7, #24]
            break;
 801517a:	e00a      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015182:	490e      	ldr	r1, [pc, #56]	@ (80151bc <RegionEU868GetPhyParam+0x294>)
 8015184:	4618      	mov	r0, r3
 8015186:	f7ff fda1 	bl	8014ccc <RegionCommonGetBandwidth>
 801518a:	4603      	mov	r3, r0
 801518c:	61bb      	str	r3, [r7, #24]
            break;
 801518e:	e000      	b.n	8015192 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8015190:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8015192:	69bb      	ldr	r3, [r7, #24]
 8015194:	61fb      	str	r3, [r7, #28]
 8015196:	69fb      	ldr	r3, [r7, #28]
}
 8015198:	4618      	mov	r0, r3
 801519a:	3720      	adds	r7, #32
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}
 80151a0:	20001328 	.word	0x20001328
 80151a4:	0801d7d8 	.word	0x0801d7d8
 80151a8:	0801d7e0 	.word	0x0801d7e0
 80151ac:	fffffc18 	.word	0xfffffc18
 80151b0:	33d3e608 	.word	0x33d3e608
 80151b4:	4009999a 	.word	0x4009999a
 80151b8:	0801d7b0 	.word	0x0801d7b0
 80151bc:	0801d7b8 	.word	0x0801d7b8

080151c0 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80151c0:	b590      	push	{r4, r7, lr}
 80151c2:	b085      	sub	sp, #20
 80151c4:	af02      	add	r7, sp, #8
 80151c6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80151c8:	4b11      	ldr	r3, [pc, #68]	@ (8015210 <RegionEU868SetBandTxDone+0x50>)
 80151ca:	681a      	ldr	r2, [r3, #0]
 80151cc:	4b11      	ldr	r3, [pc, #68]	@ (8015214 <RegionEU868SetBandTxDone+0x54>)
 80151ce:	6819      	ldr	r1, [r3, #0]
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	781b      	ldrb	r3, [r3, #0]
 80151d4:	4618      	mov	r0, r3
 80151d6:	4603      	mov	r3, r0
 80151d8:	005b      	lsls	r3, r3, #1
 80151da:	4403      	add	r3, r0
 80151dc:	009b      	lsls	r3, r3, #2
 80151de:	440b      	add	r3, r1
 80151e0:	3309      	adds	r3, #9
 80151e2:	781b      	ldrb	r3, [r3, #0]
 80151e4:	4619      	mov	r1, r3
 80151e6:	460b      	mov	r3, r1
 80151e8:	005b      	lsls	r3, r3, #1
 80151ea:	440b      	add	r3, r1
 80151ec:	00db      	lsls	r3, r3, #3
 80151ee:	18d0      	adds	r0, r2, r3
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	6899      	ldr	r1, [r3, #8]
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	785c      	ldrb	r4, [r3, #1]
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	691a      	ldr	r2, [r3, #16]
 80151fc:	9200      	str	r2, [sp, #0]
 80151fe:	68db      	ldr	r3, [r3, #12]
 8015200:	4622      	mov	r2, r4
 8015202:	f7ff f8e9 	bl	80143d8 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8015206:	bf00      	nop
 8015208:	370c      	adds	r7, #12
 801520a:	46bd      	mov	sp, r7
 801520c:	bd90      	pop	{r4, r7, pc}
 801520e:	bf00      	nop
 8015210:	20001324 	.word	0x20001324
 8015214:	20001328 	.word	0x20001328

08015218 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8015218:	b580      	push	{r7, lr}
 801521a:	b0b0      	sub	sp, #192	@ 0xc0
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8015220:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015224:	2290      	movs	r2, #144	@ 0x90
 8015226:	2100      	movs	r1, #0
 8015228:	4618      	mov	r0, r3
 801522a:	f007 fae9 	bl	801c800 <memset>
 801522e:	2364      	movs	r3, #100	@ 0x64
 8015230:	863b      	strh	r3, [r7, #48]	@ 0x30
 8015232:	2364      	movs	r3, #100	@ 0x64
 8015234:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8015238:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801523c:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8015240:	230a      	movs	r3, #10
 8015242:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8015246:	2364      	movs	r3, #100	@ 0x64
 8015248:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 801524c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015250:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	7a1b      	ldrb	r3, [r3, #8]
 8015258:	2b02      	cmp	r3, #2
 801525a:	d05e      	beq.n	801531a <RegionEU868InitDefaults+0x102>
 801525c:	2b02      	cmp	r3, #2
 801525e:	dc6b      	bgt.n	8015338 <RegionEU868InitDefaults+0x120>
 8015260:	2b00      	cmp	r3, #0
 8015262:	d002      	beq.n	801526a <RegionEU868InitDefaults+0x52>
 8015264:	2b01      	cmp	r3, #1
 8015266:	d03f      	beq.n	80152e8 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015268:	e066      	b.n	8015338 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d063      	beq.n	801533a <RegionEU868InitDefaults+0x122>
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	685b      	ldr	r3, [r3, #4]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d05f      	beq.n	801533a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	4a30      	ldr	r2, [pc, #192]	@ (8015340 <RegionEU868InitDefaults+0x128>)
 8015280:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	685b      	ldr	r3, [r3, #4]
 8015286:	4a2f      	ldr	r2, [pc, #188]	@ (8015344 <RegionEU868InitDefaults+0x12c>)
 8015288:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801528a:	4b2d      	ldr	r3, [pc, #180]	@ (8015340 <RegionEU868InitDefaults+0x128>)
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	4618      	mov	r0, r3
 8015290:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015294:	2290      	movs	r2, #144	@ 0x90
 8015296:	4619      	mov	r1, r3
 8015298:	f002 fa21 	bl	80176de <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801529c:	4b29      	ldr	r3, [pc, #164]	@ (8015344 <RegionEU868InitDefaults+0x12c>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	4a29      	ldr	r2, [pc, #164]	@ (8015348 <RegionEU868InitDefaults+0x130>)
 80152a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80152a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80152a8:	4b26      	ldr	r3, [pc, #152]	@ (8015344 <RegionEU868InitDefaults+0x12c>)
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	4a27      	ldr	r2, [pc, #156]	@ (801534c <RegionEU868InitDefaults+0x134>)
 80152ae:	330c      	adds	r3, #12
 80152b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80152b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80152b6:	4b23      	ldr	r3, [pc, #140]	@ (8015344 <RegionEU868InitDefaults+0x12c>)
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	4a25      	ldr	r2, [pc, #148]	@ (8015350 <RegionEU868InitDefaults+0x138>)
 80152bc:	3318      	adds	r3, #24
 80152be:	ca07      	ldmia	r2, {r0, r1, r2}
 80152c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80152c4:	4b1f      	ldr	r3, [pc, #124]	@ (8015344 <RegionEU868InitDefaults+0x12c>)
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	2207      	movs	r2, #7
 80152ca:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80152ce:	4b1d      	ldr	r3, [pc, #116]	@ (8015344 <RegionEU868InitDefaults+0x12c>)
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 80152d6:	4b1b      	ldr	r3, [pc, #108]	@ (8015344 <RegionEU868InitDefaults+0x12c>)
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 80152de:	2201      	movs	r2, #1
 80152e0:	4619      	mov	r1, r3
 80152e2:	f7ff f853 	bl	801438c <RegionCommonChanMaskCopy>
 80152e6:	e028      	b.n	801533a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80152e8:	4b16      	ldr	r3, [pc, #88]	@ (8015344 <RegionEU868InitDefaults+0x12c>)
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	2200      	movs	r2, #0
 80152ee:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80152f0:	4b14      	ldr	r3, [pc, #80]	@ (8015344 <RegionEU868InitDefaults+0x12c>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	2200      	movs	r2, #0
 80152f6:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80152f8:	4b12      	ldr	r3, [pc, #72]	@ (8015344 <RegionEU868InitDefaults+0x12c>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	2200      	movs	r2, #0
 80152fe:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015300:	4b10      	ldr	r3, [pc, #64]	@ (8015344 <RegionEU868InitDefaults+0x12c>)
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8015308:	4b0e      	ldr	r3, [pc, #56]	@ (8015344 <RegionEU868InitDefaults+0x12c>)
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8015310:	2201      	movs	r2, #1
 8015312:	4619      	mov	r1, r3
 8015314:	f7ff f83a 	bl	801438c <RegionCommonChanMaskCopy>
            break;
 8015318:	e00f      	b.n	801533a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801531a:	4b0a      	ldr	r3, [pc, #40]	@ (8015344 <RegionEU868InitDefaults+0x12c>)
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	@ 0x480
 8015322:	4b08      	ldr	r3, [pc, #32]	@ (8015344 <RegionEU868InitDefaults+0x12c>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	@ 0x48c
 801532a:	4b06      	ldr	r3, [pc, #24]	@ (8015344 <RegionEU868InitDefaults+0x12c>)
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	430a      	orrs	r2, r1
 8015330:	b292      	uxth	r2, r2
 8015332:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
            break;
 8015336:	e000      	b.n	801533a <RegionEU868InitDefaults+0x122>
            break;
 8015338:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801533a:	37c0      	adds	r7, #192	@ 0xc0
 801533c:	46bd      	mov	sp, r7
 801533e:	bd80      	pop	{r7, pc}
 8015340:	20001324 	.word	0x20001324
 8015344:	20001328 	.word	0x20001328
 8015348:	0801d1e0 	.word	0x0801d1e0
 801534c:	0801d1ec 	.word	0x0801d1ec
 8015350:	0801d1f8 	.word	0x0801d1f8

08015354 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b084      	sub	sp, #16
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
 801535c:	460b      	mov	r3, r1
 801535e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8015360:	78fb      	ldrb	r3, [r7, #3]
 8015362:	2b0f      	cmp	r3, #15
 8015364:	d86c      	bhi.n	8015440 <RegionEU868Verify+0xec>
 8015366:	a201      	add	r2, pc, #4	@ (adr r2, 801536c <RegionEU868Verify+0x18>)
 8015368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801536c:	080153ad 	.word	0x080153ad
 8015370:	08015441 	.word	0x08015441
 8015374:	08015441 	.word	0x08015441
 8015378:	08015441 	.word	0x08015441
 801537c:	08015441 	.word	0x08015441
 8015380:	080153c5 	.word	0x080153c5
 8015384:	080153e3 	.word	0x080153e3
 8015388:	08015401 	.word	0x08015401
 801538c:	08015441 	.word	0x08015441
 8015390:	0801541f 	.word	0x0801541f
 8015394:	0801541f 	.word	0x0801541f
 8015398:	08015441 	.word	0x08015441
 801539c:	08015441 	.word	0x08015441
 80153a0:	08015441 	.word	0x08015441
 80153a4:	08015441 	.word	0x08015441
 80153a8:	0801543d 	.word	0x0801543d
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80153ac:	2300      	movs	r3, #0
 80153ae:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	f107 020f 	add.w	r2, r7, #15
 80153b8:	4611      	mov	r1, r2
 80153ba:	4618      	mov	r0, r3
 80153bc:	f7ff fcee 	bl	8014d9c <VerifyRfFreq>
 80153c0:	4603      	mov	r3, r0
 80153c2:	e03e      	b.n	8015442 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	f993 3000 	ldrsb.w	r3, [r3]
 80153ca:	2207      	movs	r2, #7
 80153cc:	2100      	movs	r1, #0
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7fe ff5f 	bl	8014292 <RegionCommonValueInRange>
 80153d4:	4603      	mov	r3, r0
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	bf14      	ite	ne
 80153da:	2301      	movne	r3, #1
 80153dc:	2300      	moveq	r3, #0
 80153de:	b2db      	uxtb	r3, r3
 80153e0:	e02f      	b.n	8015442 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	f993 3000 	ldrsb.w	r3, [r3]
 80153e8:	2205      	movs	r2, #5
 80153ea:	2100      	movs	r1, #0
 80153ec:	4618      	mov	r0, r3
 80153ee:	f7fe ff50 	bl	8014292 <RegionCommonValueInRange>
 80153f2:	4603      	mov	r3, r0
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	bf14      	ite	ne
 80153f8:	2301      	movne	r3, #1
 80153fa:	2300      	moveq	r3, #0
 80153fc:	b2db      	uxtb	r3, r3
 80153fe:	e020      	b.n	8015442 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	f993 3000 	ldrsb.w	r3, [r3]
 8015406:	2207      	movs	r2, #7
 8015408:	2100      	movs	r1, #0
 801540a:	4618      	mov	r0, r3
 801540c:	f7fe ff41 	bl	8014292 <RegionCommonValueInRange>
 8015410:	4603      	mov	r3, r0
 8015412:	2b00      	cmp	r3, #0
 8015414:	bf14      	ite	ne
 8015416:	2301      	movne	r3, #1
 8015418:	2300      	moveq	r3, #0
 801541a:	b2db      	uxtb	r3, r3
 801541c:	e011      	b.n	8015442 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	f993 3000 	ldrsb.w	r3, [r3]
 8015424:	2207      	movs	r2, #7
 8015426:	2100      	movs	r1, #0
 8015428:	4618      	mov	r0, r3
 801542a:	f7fe ff32 	bl	8014292 <RegionCommonValueInRange>
 801542e:	4603      	mov	r3, r0
 8015430:	2b00      	cmp	r3, #0
 8015432:	bf14      	ite	ne
 8015434:	2301      	movne	r3, #1
 8015436:	2300      	moveq	r3, #0
 8015438:	b2db      	uxtb	r3, r3
 801543a:	e002      	b.n	8015442 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801543c:	2301      	movs	r3, #1
 801543e:	e000      	b.n	8015442 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8015440:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8015442:	4618      	mov	r0, r3
 8015444:	3710      	adds	r7, #16
 8015446:	46bd      	mov	sp, r7
 8015448:	bd80      	pop	{r7, pc}
 801544a:	bf00      	nop

0801544c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b08a      	sub	sp, #40	@ 0x28
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015454:	2350      	movs	r3, #80	@ 0x50
 8015456:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	791b      	ldrb	r3, [r3, #4]
 801545e:	2b10      	cmp	r3, #16
 8015460:	d162      	bne.n	8015528 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	330f      	adds	r3, #15
 8015468:	781b      	ldrb	r3, [r3, #0]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d15e      	bne.n	801552c <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801546e:	2300      	movs	r3, #0
 8015470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015474:	2303      	movs	r3, #3
 8015476:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801547a:	e050      	b.n	801551e <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 801547c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015480:	2b07      	cmp	r3, #7
 8015482:	d824      	bhi.n	80154ce <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	681a      	ldr	r2, [r3, #0]
 8015488:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801548c:	4413      	add	r3, r2
 801548e:	781b      	ldrb	r3, [r3, #0]
 8015490:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8015492:	69ba      	ldr	r2, [r7, #24]
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	6819      	ldr	r1, [r3, #0]
 8015498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801549c:	3301      	adds	r3, #1
 801549e:	440b      	add	r3, r1
 80154a0:	781b      	ldrb	r3, [r3, #0]
 80154a2:	021b      	lsls	r3, r3, #8
 80154a4:	4313      	orrs	r3, r2
 80154a6:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80154a8:	69ba      	ldr	r2, [r7, #24]
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	6819      	ldr	r1, [r3, #0]
 80154ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80154b2:	3302      	adds	r3, #2
 80154b4:	440b      	add	r3, r1
 80154b6:	781b      	ldrb	r3, [r3, #0]
 80154b8:	041b      	lsls	r3, r3, #16
 80154ba:	4313      	orrs	r3, r2
 80154bc:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80154be:	69bb      	ldr	r3, [r7, #24]
 80154c0:	2264      	movs	r2, #100	@ 0x64
 80154c2:	fb02 f303 	mul.w	r3, r2, r3
 80154c6:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80154c8:	2300      	movs	r3, #0
 80154ca:	61fb      	str	r3, [r7, #28]
 80154cc:	e006      	b.n	80154dc <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80154ce:	2300      	movs	r3, #0
 80154d0:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80154d2:	2300      	movs	r3, #0
 80154d4:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80154d8:	2300      	movs	r3, #0
 80154da:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80154dc:	69bb      	ldr	r3, [r7, #24]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d00b      	beq.n	80154fa <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80154e2:	f107 0318 	add.w	r3, r7, #24
 80154e6:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80154e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80154ec:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80154ee:	f107 0310 	add.w	r3, r7, #16
 80154f2:	4618      	mov	r0, r3
 80154f4:	f000 fd14 	bl	8015f20 <RegionEU868ChannelAdd>
 80154f8:	e007      	b.n	801550a <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80154fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80154fe:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8015500:	f107 030c 	add.w	r3, r7, #12
 8015504:	4618      	mov	r0, r3
 8015506:	f000 fdad 	bl	8016064 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801550a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801550e:	3303      	adds	r3, #3
 8015510:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015514:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015518:	3301      	adds	r3, #1
 801551a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801551e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015522:	2b0f      	cmp	r3, #15
 8015524:	d9aa      	bls.n	801547c <RegionEU868ApplyCFList+0x30>
 8015526:	e002      	b.n	801552e <RegionEU868ApplyCFList+0xe2>
        return;
 8015528:	bf00      	nop
 801552a:	e000      	b.n	801552e <RegionEU868ApplyCFList+0xe2>
        return;
 801552c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801552e:	3728      	adds	r7, #40	@ 0x28
 8015530:	46bd      	mov	sp, r7
 8015532:	bd80      	pop	{r7, pc}

08015534 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b082      	sub	sp, #8
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	791b      	ldrb	r3, [r3, #4]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d002      	beq.n	801554a <RegionEU868ChanMaskSet+0x16>
 8015544:	2b01      	cmp	r3, #1
 8015546:	d00b      	beq.n	8015560 <RegionEU868ChanMaskSet+0x2c>
 8015548:	e015      	b.n	8015576 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801554a:	4b0e      	ldr	r3, [pc, #56]	@ (8015584 <RegionEU868ChanMaskSet+0x50>)
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	2201      	movs	r2, #1
 8015558:	4619      	mov	r1, r3
 801555a:	f7fe ff17 	bl	801438c <RegionCommonChanMaskCopy>
            break;
 801555e:	e00c      	b.n	801557a <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015560:	4b08      	ldr	r3, [pc, #32]	@ (8015584 <RegionEU868ChanMaskSet+0x50>)
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	f203 408c 	addw	r0, r3, #1164	@ 0x48c
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	2201      	movs	r2, #1
 801556e:	4619      	mov	r1, r3
 8015570:	f7fe ff0c 	bl	801438c <RegionCommonChanMaskCopy>
            break;
 8015574:	e001      	b.n	801557a <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8015576:	2300      	movs	r3, #0
 8015578:	e000      	b.n	801557c <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801557a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801557c:	4618      	mov	r0, r3
 801557e:	3708      	adds	r7, #8
 8015580:	46bd      	mov	sp, r7
 8015582:	bd80      	pop	{r7, pc}
 8015584:	20001328 	.word	0x20001328

08015588 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015588:	b580      	push	{r7, lr}
 801558a:	b088      	sub	sp, #32
 801558c:	af02      	add	r7, sp, #8
 801558e:	60ba      	str	r2, [r7, #8]
 8015590:	607b      	str	r3, [r7, #4]
 8015592:	4603      	mov	r3, r0
 8015594:	73fb      	strb	r3, [r7, #15]
 8015596:	460b      	mov	r3, r1
 8015598:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801559a:	2300      	movs	r3, #0
 801559c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801559e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80155a2:	2b07      	cmp	r3, #7
 80155a4:	bfa8      	it	ge
 80155a6:	2307      	movge	r3, #7
 80155a8:	b25a      	sxtb	r2, r3
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80155b4:	491e      	ldr	r1, [pc, #120]	@ (8015630 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80155b6:	4618      	mov	r0, r3
 80155b8:	f7ff fb88 	bl	8014ccc <RegionCommonGetBandwidth>
 80155bc:	4603      	mov	r3, r0
 80155be:	b2da      	uxtb	r2, r3
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80155ca:	2b07      	cmp	r3, #7
 80155cc:	d10a      	bne.n	80155e4 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80155d4:	461a      	mov	r2, r3
 80155d6:	4b17      	ldr	r3, [pc, #92]	@ (8015634 <RegionEU868ComputeRxWindowParameters+0xac>)
 80155d8:	5c9b      	ldrb	r3, [r3, r2]
 80155da:	4618      	mov	r0, r3
 80155dc:	f7ff f90a 	bl	80147f4 <RegionCommonComputeSymbolTimeFsk>
 80155e0:	6178      	str	r0, [r7, #20]
 80155e2:	e011      	b.n	8015608 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80155ea:	461a      	mov	r2, r3
 80155ec:	4b11      	ldr	r3, [pc, #68]	@ (8015634 <RegionEU868ComputeRxWindowParameters+0xac>)
 80155ee:	5c9a      	ldrb	r2, [r3, r2]
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80155f6:	4619      	mov	r1, r3
 80155f8:	4b0d      	ldr	r3, [pc, #52]	@ (8015630 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80155fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80155fe:	4619      	mov	r1, r3
 8015600:	4610      	mov	r0, r2
 8015602:	f7ff f8e1 	bl	80147c8 <RegionCommonComputeSymbolTimeLoRa>
 8015606:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015608:	4b0b      	ldr	r3, [pc, #44]	@ (8015638 <RegionEU868ComputeRxWindowParameters+0xb0>)
 801560a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801560c:	4798      	blx	r3
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	3308      	adds	r3, #8
 8015612:	687a      	ldr	r2, [r7, #4]
 8015614:	320c      	adds	r2, #12
 8015616:	7bb9      	ldrb	r1, [r7, #14]
 8015618:	9201      	str	r2, [sp, #4]
 801561a:	9300      	str	r3, [sp, #0]
 801561c:	4603      	mov	r3, r0
 801561e:	68ba      	ldr	r2, [r7, #8]
 8015620:	6978      	ldr	r0, [r7, #20]
 8015622:	f7ff f8f7 	bl	8014814 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8015626:	bf00      	nop
 8015628:	3718      	adds	r7, #24
 801562a:	46bd      	mov	sp, r7
 801562c:	bd80      	pop	{r7, pc}
 801562e:	bf00      	nop
 8015630:	0801d7b8 	.word	0x0801d7b8
 8015634:	0801d7b0 	.word	0x0801d7b0
 8015638:	0801d86c 	.word	0x0801d86c

0801563c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801563c:	b5b0      	push	{r4, r5, r7, lr}
 801563e:	b090      	sub	sp, #64	@ 0x40
 8015640:	af0a      	add	r7, sp, #40	@ 0x28
 8015642:	6078      	str	r0, [r7, #4]
 8015644:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	785b      	ldrb	r3, [r3, #1]
 801564a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801564c:	2300      	movs	r3, #0
 801564e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8015650:	2300      	movs	r3, #0
 8015652:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	685b      	ldr	r3, [r3, #4]
 8015658:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801565a:	4b5a      	ldr	r3, [pc, #360]	@ (80157c4 <RegionEU868RxConfig+0x188>)
 801565c:	685b      	ldr	r3, [r3, #4]
 801565e:	4798      	blx	r3
 8015660:	4603      	mov	r3, r0
 8015662:	2b00      	cmp	r3, #0
 8015664:	d001      	beq.n	801566a <RegionEU868RxConfig+0x2e>
    {
        return false;
 8015666:	2300      	movs	r3, #0
 8015668:	e0a8      	b.n	80157bc <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	7cdb      	ldrb	r3, [r3, #19]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d126      	bne.n	80156c0 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8015672:	4b55      	ldr	r3, [pc, #340]	@ (80157c8 <RegionEU868RxConfig+0x18c>)
 8015674:	681a      	ldr	r2, [r3, #0]
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	781b      	ldrb	r3, [r3, #0]
 801567a:	4619      	mov	r1, r3
 801567c:	460b      	mov	r3, r1
 801567e:	005b      	lsls	r3, r3, #1
 8015680:	440b      	add	r3, r1
 8015682:	009b      	lsls	r3, r3, #2
 8015684:	4413      	add	r3, r2
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801568a:	4b4f      	ldr	r3, [pc, #316]	@ (80157c8 <RegionEU868RxConfig+0x18c>)
 801568c:	681a      	ldr	r2, [r3, #0]
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	781b      	ldrb	r3, [r3, #0]
 8015692:	4619      	mov	r1, r3
 8015694:	460b      	mov	r3, r1
 8015696:	005b      	lsls	r3, r3, #1
 8015698:	440b      	add	r3, r1
 801569a:	009b      	lsls	r3, r3, #2
 801569c:	4413      	add	r3, r2
 801569e:	3304      	adds	r3, #4
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d00c      	beq.n	80156c0 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80156a6:	4b48      	ldr	r3, [pc, #288]	@ (80157c8 <RegionEU868RxConfig+0x18c>)
 80156a8:	681a      	ldr	r2, [r3, #0]
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	781b      	ldrb	r3, [r3, #0]
 80156ae:	4619      	mov	r1, r3
 80156b0:	460b      	mov	r3, r1
 80156b2:	005b      	lsls	r3, r3, #1
 80156b4:	440b      	add	r3, r1
 80156b6:	009b      	lsls	r3, r3, #2
 80156b8:	4413      	add	r3, r2
 80156ba:	3304      	adds	r3, #4
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80156c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156c4:	4a41      	ldr	r2, [pc, #260]	@ (80157cc <RegionEU868RxConfig+0x190>)
 80156c6:	5cd3      	ldrb	r3, [r2, r3]
 80156c8:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80156ca:	4b3e      	ldr	r3, [pc, #248]	@ (80157c4 <RegionEU868RxConfig+0x188>)
 80156cc:	68db      	ldr	r3, [r3, #12]
 80156ce:	6938      	ldr	r0, [r7, #16]
 80156d0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80156d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156d6:	2b07      	cmp	r3, #7
 80156d8:	d128      	bne.n	801572c <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80156da:	2300      	movs	r3, #0
 80156dc:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80156de:	4b39      	ldr	r3, [pc, #228]	@ (80157c4 <RegionEU868RxConfig+0x188>)
 80156e0:	699c      	ldr	r4, [r3, #24]
 80156e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80156e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80156ea:	fb02 f303 	mul.w	r3, r2, r3
 80156ee:	4619      	mov	r1, r3
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	689b      	ldr	r3, [r3, #8]
 80156f4:	b29b      	uxth	r3, r3
 80156f6:	687a      	ldr	r2, [r7, #4]
 80156f8:	7c92      	ldrb	r2, [r2, #18]
 80156fa:	7df8      	ldrb	r0, [r7, #23]
 80156fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80156fe:	2200      	movs	r2, #0
 8015700:	9208      	str	r2, [sp, #32]
 8015702:	2200      	movs	r2, #0
 8015704:	9207      	str	r2, [sp, #28]
 8015706:	2200      	movs	r2, #0
 8015708:	9206      	str	r2, [sp, #24]
 801570a:	2201      	movs	r2, #1
 801570c:	9205      	str	r2, [sp, #20]
 801570e:	2200      	movs	r2, #0
 8015710:	9204      	str	r2, [sp, #16]
 8015712:	2200      	movs	r2, #0
 8015714:	9203      	str	r2, [sp, #12]
 8015716:	9302      	str	r3, [sp, #8]
 8015718:	2305      	movs	r3, #5
 801571a:	9301      	str	r3, [sp, #4]
 801571c:	4b2c      	ldr	r3, [pc, #176]	@ (80157d0 <RegionEU868RxConfig+0x194>)
 801571e:	9300      	str	r3, [sp, #0]
 8015720:	2300      	movs	r3, #0
 8015722:	460a      	mov	r2, r1
 8015724:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8015728:	47a0      	blx	r4
 801572a:	e024      	b.n	8015776 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 801572c:	2301      	movs	r3, #1
 801572e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8015730:	4b24      	ldr	r3, [pc, #144]	@ (80157c4 <RegionEU868RxConfig+0x188>)
 8015732:	699c      	ldr	r4, [r3, #24]
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	789b      	ldrb	r3, [r3, #2]
 8015738:	461d      	mov	r5, r3
 801573a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	689b      	ldr	r3, [r3, #8]
 8015742:	b29b      	uxth	r3, r3
 8015744:	687a      	ldr	r2, [r7, #4]
 8015746:	7c92      	ldrb	r2, [r2, #18]
 8015748:	7df8      	ldrb	r0, [r7, #23]
 801574a:	9209      	str	r2, [sp, #36]	@ 0x24
 801574c:	2201      	movs	r2, #1
 801574e:	9208      	str	r2, [sp, #32]
 8015750:	2200      	movs	r2, #0
 8015752:	9207      	str	r2, [sp, #28]
 8015754:	2200      	movs	r2, #0
 8015756:	9206      	str	r2, [sp, #24]
 8015758:	2200      	movs	r2, #0
 801575a:	9205      	str	r2, [sp, #20]
 801575c:	2200      	movs	r2, #0
 801575e:	9204      	str	r2, [sp, #16]
 8015760:	2200      	movs	r2, #0
 8015762:	9203      	str	r2, [sp, #12]
 8015764:	9302      	str	r3, [sp, #8]
 8015766:	2308      	movs	r3, #8
 8015768:	9301      	str	r3, [sp, #4]
 801576a:	2300      	movs	r3, #0
 801576c:	9300      	str	r3, [sp, #0]
 801576e:	2301      	movs	r3, #1
 8015770:	460a      	mov	r2, r1
 8015772:	4629      	mov	r1, r5
 8015774:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	7c5b      	ldrb	r3, [r3, #17]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d005      	beq.n	801578a <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801577e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015782:	4a14      	ldr	r2, [pc, #80]	@ (80157d4 <RegionEU868RxConfig+0x198>)
 8015784:	5cd3      	ldrb	r3, [r2, r3]
 8015786:	75bb      	strb	r3, [r7, #22]
 8015788:	e004      	b.n	8015794 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801578a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801578e:	4a12      	ldr	r2, [pc, #72]	@ (80157d8 <RegionEU868RxConfig+0x19c>)
 8015790:	5cd3      	ldrb	r3, [r2, r3]
 8015792:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015794:	4b0b      	ldr	r3, [pc, #44]	@ (80157c4 <RegionEU868RxConfig+0x188>)
 8015796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015798:	7dba      	ldrb	r2, [r7, #22]
 801579a:	320d      	adds	r2, #13
 801579c:	b2d1      	uxtb	r1, r2
 801579e:	7dfa      	ldrb	r2, [r7, #23]
 80157a0:	4610      	mov	r0, r2
 80157a2:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	7cdb      	ldrb	r3, [r3, #19]
 80157a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80157ac:	6939      	ldr	r1, [r7, #16]
 80157ae:	4618      	mov	r0, r3
 80157b0:	f7ff faaa 	bl	8014d08 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	7bfa      	ldrb	r2, [r7, #15]
 80157b8:	701a      	strb	r2, [r3, #0]
    return true;
 80157ba:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80157bc:	4618      	mov	r0, r3
 80157be:	3718      	adds	r7, #24
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bdb0      	pop	{r4, r5, r7, pc}
 80157c4:	0801d86c 	.word	0x0801d86c
 80157c8:	20001328 	.word	0x20001328
 80157cc:	0801d7b0 	.word	0x0801d7b0
 80157d0:	00014585 	.word	0x00014585
 80157d4:	0801d7e0 	.word	0x0801d7e0
 80157d8:	0801d7d8 	.word	0x0801d7d8

080157dc <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80157dc:	b590      	push	{r4, r7, lr}
 80157de:	b093      	sub	sp, #76	@ 0x4c
 80157e0:	af0a      	add	r7, sp, #40	@ 0x28
 80157e2:	60f8      	str	r0, [r7, #12]
 80157e4:	60b9      	str	r1, [r7, #8]
 80157e6:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80157ee:	461a      	mov	r2, r3
 80157f0:	4b5d      	ldr	r3, [pc, #372]	@ (8015968 <RegionEU868TxConfig+0x18c>)
 80157f2:	5c9b      	ldrb	r3, [r3, r2]
 80157f4:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80157fc:	4b5b      	ldr	r3, [pc, #364]	@ (801596c <RegionEU868TxConfig+0x190>)
 80157fe:	681a      	ldr	r2, [r3, #0]
 8015800:	4b5b      	ldr	r3, [pc, #364]	@ (8015970 <RegionEU868TxConfig+0x194>)
 8015802:	6819      	ldr	r1, [r3, #0]
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	781b      	ldrb	r3, [r3, #0]
 8015808:	461c      	mov	r4, r3
 801580a:	4623      	mov	r3, r4
 801580c:	005b      	lsls	r3, r3, #1
 801580e:	4423      	add	r3, r4
 8015810:	009b      	lsls	r3, r3, #2
 8015812:	440b      	add	r3, r1
 8015814:	3309      	adds	r3, #9
 8015816:	781b      	ldrb	r3, [r3, #0]
 8015818:	4619      	mov	r1, r3
 801581a:	460b      	mov	r3, r1
 801581c:	005b      	lsls	r3, r3, #1
 801581e:	440b      	add	r3, r1
 8015820:	00db      	lsls	r3, r3, #3
 8015822:	4413      	add	r3, r2
 8015824:	3302      	adds	r3, #2
 8015826:	f993 3000 	ldrsb.w	r3, [r3]
 801582a:	4619      	mov	r1, r3
 801582c:	f7ff fa39 	bl	8014ca2 <RegionCommonLimitTxPower>
 8015830:	4603      	mov	r3, r0
 8015832:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801583a:	494e      	ldr	r1, [pc, #312]	@ (8015974 <RegionEU868TxConfig+0x198>)
 801583c:	4618      	mov	r0, r3
 801583e:	f7ff fa45 	bl	8014ccc <RegionCommonGetBandwidth>
 8015842:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8015844:	2300      	movs	r3, #0
 8015846:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	6859      	ldr	r1, [r3, #4]
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	689a      	ldr	r2, [r3, #8]
 8015850:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015854:	4618      	mov	r0, r3
 8015856:	f7ff f895 	bl	8014984 <RegionCommonComputeTxPower>
 801585a:	4603      	mov	r3, r0
 801585c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801585e:	4b46      	ldr	r3, [pc, #280]	@ (8015978 <RegionEU868TxConfig+0x19c>)
 8015860:	68da      	ldr	r2, [r3, #12]
 8015862:	4b43      	ldr	r3, [pc, #268]	@ (8015970 <RegionEU868TxConfig+0x194>)
 8015864:	6819      	ldr	r1, [r3, #0]
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	781b      	ldrb	r3, [r3, #0]
 801586a:	4618      	mov	r0, r3
 801586c:	4603      	mov	r3, r0
 801586e:	005b      	lsls	r3, r3, #1
 8015870:	4403      	add	r3, r0
 8015872:	009b      	lsls	r3, r3, #2
 8015874:	440b      	add	r3, r1
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	4618      	mov	r0, r3
 801587a:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015882:	2b07      	cmp	r3, #7
 8015884:	d124      	bne.n	80158d0 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8015886:	2300      	movs	r3, #0
 8015888:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801588a:	4b3b      	ldr	r3, [pc, #236]	@ (8015978 <RegionEU868TxConfig+0x19c>)
 801588c:	69dc      	ldr	r4, [r3, #28]
 801588e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015892:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015896:	fb02 f303 	mul.w	r3, r2, r3
 801589a:	461a      	mov	r2, r3
 801589c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80158a0:	7ff8      	ldrb	r0, [r7, #31]
 80158a2:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80158a6:	9308      	str	r3, [sp, #32]
 80158a8:	2300      	movs	r3, #0
 80158aa:	9307      	str	r3, [sp, #28]
 80158ac:	2300      	movs	r3, #0
 80158ae:	9306      	str	r3, [sp, #24]
 80158b0:	2300      	movs	r3, #0
 80158b2:	9305      	str	r3, [sp, #20]
 80158b4:	2301      	movs	r3, #1
 80158b6:	9304      	str	r3, [sp, #16]
 80158b8:	2300      	movs	r3, #0
 80158ba:	9303      	str	r3, [sp, #12]
 80158bc:	2305      	movs	r3, #5
 80158be:	9302      	str	r3, [sp, #8]
 80158c0:	2300      	movs	r3, #0
 80158c2:	9301      	str	r3, [sp, #4]
 80158c4:	9200      	str	r2, [sp, #0]
 80158c6:	69bb      	ldr	r3, [r7, #24]
 80158c8:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80158cc:	47a0      	blx	r4
 80158ce:	e01d      	b.n	801590c <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 80158d0:	2301      	movs	r3, #1
 80158d2:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80158d4:	4b28      	ldr	r3, [pc, #160]	@ (8015978 <RegionEU868TxConfig+0x19c>)
 80158d6:	69dc      	ldr	r4, [r3, #28]
 80158d8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80158dc:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80158e0:	7ff8      	ldrb	r0, [r7, #31]
 80158e2:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80158e6:	9208      	str	r2, [sp, #32]
 80158e8:	2200      	movs	r2, #0
 80158ea:	9207      	str	r2, [sp, #28]
 80158ec:	2200      	movs	r2, #0
 80158ee:	9206      	str	r2, [sp, #24]
 80158f0:	2200      	movs	r2, #0
 80158f2:	9205      	str	r2, [sp, #20]
 80158f4:	2201      	movs	r2, #1
 80158f6:	9204      	str	r2, [sp, #16]
 80158f8:	2200      	movs	r2, #0
 80158fa:	9203      	str	r2, [sp, #12]
 80158fc:	2208      	movs	r2, #8
 80158fe:	9202      	str	r2, [sp, #8]
 8015900:	2201      	movs	r2, #1
 8015902:	9201      	str	r2, [sp, #4]
 8015904:	9300      	str	r3, [sp, #0]
 8015906:	69bb      	ldr	r3, [r7, #24]
 8015908:	2200      	movs	r2, #0
 801590a:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801590c:	4b18      	ldr	r3, [pc, #96]	@ (8015970 <RegionEU868TxConfig+0x194>)
 801590e:	681a      	ldr	r2, [r3, #0]
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	781b      	ldrb	r3, [r3, #0]
 8015914:	4619      	mov	r1, r3
 8015916:	460b      	mov	r3, r1
 8015918:	005b      	lsls	r3, r3, #1
 801591a:	440b      	add	r3, r1
 801591c:	009b      	lsls	r3, r3, #2
 801591e:	4413      	add	r3, r2
 8015920:	681a      	ldr	r2, [r3, #0]
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015928:	4619      	mov	r1, r3
 801592a:	4610      	mov	r0, r2
 801592c:	f7ff fa1e 	bl	8014d6c <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	899b      	ldrh	r3, [r3, #12]
 801593a:	4619      	mov	r1, r3
 801593c:	4610      	mov	r0, r2
 801593e:	f7ff faa3 	bl	8014e88 <GetTimeOnAir>
 8015942:	4602      	mov	r2, r0
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015948:	4b0b      	ldr	r3, [pc, #44]	@ (8015978 <RegionEU868TxConfig+0x19c>)
 801594a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801594c:	68fa      	ldr	r2, [r7, #12]
 801594e:	8992      	ldrh	r2, [r2, #12]
 8015950:	b2d1      	uxtb	r1, r2
 8015952:	7ffa      	ldrb	r2, [r7, #31]
 8015954:	4610      	mov	r0, r2
 8015956:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015958:	68bb      	ldr	r3, [r7, #8]
 801595a:	7f7a      	ldrb	r2, [r7, #29]
 801595c:	701a      	strb	r2, [r3, #0]
    return true;
 801595e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015960:	4618      	mov	r0, r3
 8015962:	3724      	adds	r7, #36	@ 0x24
 8015964:	46bd      	mov	sp, r7
 8015966:	bd90      	pop	{r4, r7, pc}
 8015968:	0801d7b0 	.word	0x0801d7b0
 801596c:	20001324 	.word	0x20001324
 8015970:	20001328 	.word	0x20001328
 8015974:	0801d7b8 	.word	0x0801d7b8
 8015978:	0801d86c 	.word	0x0801d86c

0801597c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801597c:	b590      	push	{r4, r7, lr}
 801597e:	b093      	sub	sp, #76	@ 0x4c
 8015980:	af00      	add	r7, sp, #0
 8015982:	60f8      	str	r0, [r7, #12]
 8015984:	60b9      	str	r1, [r7, #8]
 8015986:	607a      	str	r2, [r7, #4]
 8015988:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801598a:	2307      	movs	r3, #7
 801598c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015990:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015994:	2200      	movs	r2, #0
 8015996:	601a      	str	r2, [r3, #0]
 8015998:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801599a:	2300      	movs	r3, #0
 801599c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 80159a0:	2300      	movs	r3, #0
 80159a2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 80159a6:	2300      	movs	r3, #0
 80159a8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80159aa:	e085      	b.n	8015ab8 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	685a      	ldr	r2, [r3, #4]
 80159b0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80159b4:	4413      	add	r3, r2
 80159b6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80159ba:	4611      	mov	r1, r2
 80159bc:	4618      	mov	r0, r3
 80159be:	f7fe fe29 	bl	8014614 <RegionCommonParseLinkAdrReq>
 80159c2:	4603      	mov	r3, r0
 80159c4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 80159c8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d07b      	beq.n	8015ac8 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80159d0:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80159d4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80159d8:	4413      	add	r3, r2
 80159da:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80159de:	2307      	movs	r3, #7
 80159e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80159e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80159e8:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80159ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d109      	bne.n	8015a06 <RegionEU868LinkAdrReq+0x8a>
 80159f2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d106      	bne.n	8015a06 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80159f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80159fc:	f023 0301 	bic.w	r3, r3, #1
 8015a00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015a04:	e058      	b.n	8015ab8 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015a06:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d003      	beq.n	8015a16 <RegionEU868LinkAdrReq+0x9a>
 8015a0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015a12:	2b05      	cmp	r3, #5
 8015a14:	d903      	bls.n	8015a1e <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015a16:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015a1a:	2b06      	cmp	r3, #6
 8015a1c:	d906      	bls.n	8015a2c <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015a1e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015a22:	f023 0301 	bic.w	r3, r3, #1
 8015a26:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015a2a:	e045      	b.n	8015ab8 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015a32:	e03d      	b.n	8015ab0 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015a34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015a38:	2b06      	cmp	r3, #6
 8015a3a:	d118      	bne.n	8015a6e <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015a3c:	4b5f      	ldr	r3, [pc, #380]	@ (8015bbc <RegionEU868LinkAdrReq+0x240>)
 8015a3e:	6819      	ldr	r1, [r3, #0]
 8015a40:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8015a44:	4613      	mov	r3, r2
 8015a46:	005b      	lsls	r3, r3, #1
 8015a48:	4413      	add	r3, r2
 8015a4a:	009b      	lsls	r3, r3, #2
 8015a4c:	440b      	add	r3, r1
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d028      	beq.n	8015aa6 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015a54:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015a58:	2201      	movs	r2, #1
 8015a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8015a5e:	b21a      	sxth	r2, r3
 8015a60:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015a62:	b21b      	sxth	r3, r3
 8015a64:	4313      	orrs	r3, r2
 8015a66:	b21b      	sxth	r3, r3
 8015a68:	b29b      	uxth	r3, r3
 8015a6a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8015a6c:	e01b      	b.n	8015aa6 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015a6e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015a70:	461a      	mov	r2, r3
 8015a72:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015a76:	fa42 f303 	asr.w	r3, r2, r3
 8015a7a:	f003 0301 	and.w	r3, r3, #1
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d011      	beq.n	8015aa6 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015a82:	4b4e      	ldr	r3, [pc, #312]	@ (8015bbc <RegionEU868LinkAdrReq+0x240>)
 8015a84:	6819      	ldr	r1, [r3, #0]
 8015a86:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8015a8a:	4613      	mov	r3, r2
 8015a8c:	005b      	lsls	r3, r3, #1
 8015a8e:	4413      	add	r3, r2
 8015a90:	009b      	lsls	r3, r3, #2
 8015a92:	440b      	add	r3, r1
 8015a94:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d105      	bne.n	8015aa6 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015a9a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015a9e:	f023 0301 	bic.w	r3, r3, #1
 8015aa2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015aa6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015aaa:	3301      	adds	r3, #1
 8015aac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015ab0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015ab4:	2b0f      	cmp	r3, #15
 8015ab6:	d9bd      	bls.n	8015a34 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	7a1b      	ldrb	r3, [r3, #8]
 8015abc:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015ac0:	429a      	cmp	r2, r3
 8015ac2:	f4ff af73 	bcc.w	80159ac <RegionEU868LinkAdrReq+0x30>
 8015ac6:	e000      	b.n	8015aca <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015ac8:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015aca:	2302      	movs	r3, #2
 8015acc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	7a5b      	ldrb	r3, [r3, #9]
 8015ad4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8015ad8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015adc:	4618      	mov	r0, r3
 8015ade:	f7ff fa23 	bl	8014f28 <RegionEU868GetPhyParam>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8015ae6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015aea:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	7a9b      	ldrb	r3, [r3, #10]
 8015af0:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015af2:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8015af6:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015af8:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8015afc:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015afe:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8015b02:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015b0a:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015b12:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	7b5b      	ldrb	r3, [r3, #13]
 8015b18:	b25b      	sxtb	r3, r3
 8015b1a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8015b1c:	2310      	movs	r3, #16
 8015b1e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015b20:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8015b24:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b28:	b25b      	sxtb	r3, r3
 8015b2a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8015b2e:	2307      	movs	r3, #7
 8015b30:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015b34:	4b21      	ldr	r3, [pc, #132]	@ (8015bbc <RegionEU868LinkAdrReq+0x240>)
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8015b3a:	2307      	movs	r3, #7
 8015b3c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8015b40:	2300      	movs	r3, #0
 8015b42:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015b4c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8015b50:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015b54:	1c9a      	adds	r2, r3, #2
 8015b56:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015b5a:	1c59      	adds	r1, r3, #1
 8015b5c:	f107 0010 	add.w	r0, r7, #16
 8015b60:	4623      	mov	r3, r4
 8015b62:	f7fe fda8 	bl	80146b6 <RegionCommonLinkAdrReqVerifyParams>
 8015b66:	4603      	mov	r3, r0
 8015b68:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015b6c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015b70:	2b07      	cmp	r3, #7
 8015b72:	d10d      	bne.n	8015b90 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015b74:	4b11      	ldr	r3, [pc, #68]	@ (8015bbc <RegionEU868LinkAdrReq+0x240>)
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8015b7c:	220c      	movs	r2, #12
 8015b7e:	2100      	movs	r1, #0
 8015b80:	4618      	mov	r0, r3
 8015b82:	f001 fde7 	bl	8017754 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8015b86:	4b0d      	ldr	r3, [pc, #52]	@ (8015bbc <RegionEU868LinkAdrReq+0x240>)
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015b8c:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015b90:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8015b94:	68bb      	ldr	r3, [r7, #8]
 8015b96:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015b98:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015ba0:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8015ba4:	683b      	ldr	r3, [r7, #0]
 8015ba6:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015ba8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015baa:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015bae:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8015bb0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	374c      	adds	r7, #76	@ 0x4c
 8015bb8:	46bd      	mov	sp, r7
 8015bba:	bd90      	pop	{r4, r7, pc}
 8015bbc:	20001328 	.word	0x20001328

08015bc0 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b084      	sub	sp, #16
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015bc8:	2307      	movs	r3, #7
 8015bca:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015bcc:	2300      	movs	r3, #0
 8015bce:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	685b      	ldr	r3, [r3, #4]
 8015bd4:	f107 020e 	add.w	r2, r7, #14
 8015bd8:	4611      	mov	r1, r2
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f7ff f8de 	bl	8014d9c <VerifyRfFreq>
 8015be0:	4603      	mov	r3, r0
 8015be2:	f083 0301 	eor.w	r3, r3, #1
 8015be6:	b2db      	uxtb	r3, r3
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d003      	beq.n	8015bf4 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8015bec:	7bfb      	ldrb	r3, [r7, #15]
 8015bee:	f023 0301 	bic.w	r3, r3, #1
 8015bf2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	f993 3000 	ldrsb.w	r3, [r3]
 8015bfa:	2207      	movs	r2, #7
 8015bfc:	2100      	movs	r1, #0
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f7fe fb47 	bl	8014292 <RegionCommonValueInRange>
 8015c04:	4603      	mov	r3, r0
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d103      	bne.n	8015c12 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8015c0a:	7bfb      	ldrb	r3, [r7, #15]
 8015c0c:	f023 0302 	bic.w	r3, r3, #2
 8015c10:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015c18:	2205      	movs	r2, #5
 8015c1a:	2100      	movs	r1, #0
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	f7fe fb38 	bl	8014292 <RegionCommonValueInRange>
 8015c22:	4603      	mov	r3, r0
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d103      	bne.n	8015c30 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015c28:	7bfb      	ldrb	r3, [r7, #15]
 8015c2a:	f023 0304 	bic.w	r3, r3, #4
 8015c2e:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8015c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c32:	4618      	mov	r0, r3
 8015c34:	3710      	adds	r7, #16
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bd80      	pop	{r7, pc}
	...

08015c3c <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b086      	sub	sp, #24
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015c44:	2303      	movs	r3, #3
 8015c46:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d114      	bne.n	8015c7c <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015c58:	b2db      	uxtb	r3, r3
 8015c5a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8015c5c:	f107 0308 	add.w	r3, r7, #8
 8015c60:	4618      	mov	r0, r3
 8015c62:	f000 f9ff 	bl	8016064 <RegionEU868ChannelsRemove>
 8015c66:	4603      	mov	r3, r0
 8015c68:	f083 0301 	eor.w	r3, r3, #1
 8015c6c:	b2db      	uxtb	r3, r3
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d03b      	beq.n	8015cea <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8015c72:	7dfb      	ldrb	r3, [r7, #23]
 8015c74:	f023 0303 	bic.w	r3, r3, #3
 8015c78:	75fb      	strb	r3, [r7, #23]
 8015c7a:	e036      	b.n	8015cea <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015c88:	b2db      	uxtb	r3, r3
 8015c8a:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8015c8c:	f107 030c 	add.w	r3, r7, #12
 8015c90:	4618      	mov	r0, r3
 8015c92:	f000 f945 	bl	8015f20 <RegionEU868ChannelAdd>
 8015c96:	4603      	mov	r3, r0
 8015c98:	2b06      	cmp	r3, #6
 8015c9a:	d820      	bhi.n	8015cde <RegionEU868NewChannelReq+0xa2>
 8015c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8015ca4 <RegionEU868NewChannelReq+0x68>)
 8015c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ca2:	bf00      	nop
 8015ca4:	08015ce9 	.word	0x08015ce9
 8015ca8:	08015cdf 	.word	0x08015cdf
 8015cac:	08015cdf 	.word	0x08015cdf
 8015cb0:	08015cdf 	.word	0x08015cdf
 8015cb4:	08015cc1 	.word	0x08015cc1
 8015cb8:	08015ccb 	.word	0x08015ccb
 8015cbc:	08015cd5 	.word	0x08015cd5
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015cc0:	7dfb      	ldrb	r3, [r7, #23]
 8015cc2:	f023 0301 	bic.w	r3, r3, #1
 8015cc6:	75fb      	strb	r3, [r7, #23]
                break;
 8015cc8:	e00f      	b.n	8015cea <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015cca:	7dfb      	ldrb	r3, [r7, #23]
 8015ccc:	f023 0302 	bic.w	r3, r3, #2
 8015cd0:	75fb      	strb	r3, [r7, #23]
                break;
 8015cd2:	e00a      	b.n	8015cea <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015cd4:	7dfb      	ldrb	r3, [r7, #23]
 8015cd6:	f023 0303 	bic.w	r3, r3, #3
 8015cda:	75fb      	strb	r3, [r7, #23]
                break;
 8015cdc:	e005      	b.n	8015cea <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015cde:	7dfb      	ldrb	r3, [r7, #23]
 8015ce0:	f023 0303 	bic.w	r3, r3, #3
 8015ce4:	75fb      	strb	r3, [r7, #23]
                break;
 8015ce6:	e000      	b.n	8015cea <RegionEU868NewChannelReq+0xae>
                break;
 8015ce8:	bf00      	nop
            }
        }
    }

    return status;
 8015cea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015cee:	4618      	mov	r0, r3
 8015cf0:	3718      	adds	r7, #24
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	bd80      	pop	{r7, pc}
 8015cf6:	bf00      	nop

08015cf8 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015cf8:	b480      	push	{r7}
 8015cfa:	b083      	sub	sp, #12
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015d00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015d04:	4618      	mov	r0, r3
 8015d06:	370c      	adds	r7, #12
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	bc80      	pop	{r7}
 8015d0c:	4770      	bx	lr
	...

08015d10 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b084      	sub	sp, #16
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015d18:	2303      	movs	r3, #3
 8015d1a:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	781b      	ldrb	r3, [r3, #0]
 8015d24:	2b0f      	cmp	r3, #15
 8015d26:	d901      	bls.n	8015d2c <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8015d28:	2300      	movs	r3, #0
 8015d2a:	e035      	b.n	8015d98 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	685b      	ldr	r3, [r3, #4]
 8015d30:	f107 020e 	add.w	r2, r7, #14
 8015d34:	4611      	mov	r1, r2
 8015d36:	4618      	mov	r0, r3
 8015d38:	f7ff f830 	bl	8014d9c <VerifyRfFreq>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	f083 0301 	eor.w	r3, r3, #1
 8015d42:	b2db      	uxtb	r3, r3
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d003      	beq.n	8015d50 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8015d48:	7bfb      	ldrb	r3, [r7, #15]
 8015d4a:	f023 0301 	bic.w	r3, r3, #1
 8015d4e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015d50:	4b13      	ldr	r3, [pc, #76]	@ (8015da0 <RegionEU868DlChannelReq+0x90>)
 8015d52:	681a      	ldr	r2, [r3, #0]
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	781b      	ldrb	r3, [r3, #0]
 8015d58:	4619      	mov	r1, r3
 8015d5a:	460b      	mov	r3, r1
 8015d5c:	005b      	lsls	r3, r3, #1
 8015d5e:	440b      	add	r3, r1
 8015d60:	009b      	lsls	r3, r3, #2
 8015d62:	4413      	add	r3, r2
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d103      	bne.n	8015d72 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8015d6a:	7bfb      	ldrb	r3, [r7, #15]
 8015d6c:	f023 0302 	bic.w	r3, r3, #2
 8015d70:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8015d72:	7bfb      	ldrb	r3, [r7, #15]
 8015d74:	2b03      	cmp	r3, #3
 8015d76:	d10d      	bne.n	8015d94 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015d78:	4b09      	ldr	r3, [pc, #36]	@ (8015da0 <RegionEU868DlChannelReq+0x90>)
 8015d7a:	6819      	ldr	r1, [r3, #0]
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	781b      	ldrb	r3, [r3, #0]
 8015d80:	4618      	mov	r0, r3
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	685a      	ldr	r2, [r3, #4]
 8015d86:	4603      	mov	r3, r0
 8015d88:	005b      	lsls	r3, r3, #1
 8015d8a:	4403      	add	r3, r0
 8015d8c:	009b      	lsls	r3, r3, #2
 8015d8e:	440b      	add	r3, r1
 8015d90:	3304      	adds	r3, #4
 8015d92:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8015d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015d98:	4618      	mov	r0, r3
 8015d9a:	3710      	adds	r7, #16
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd80      	pop	{r7, pc}
 8015da0:	20001328 	.word	0x20001328

08015da4 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015da4:	b480      	push	{r7}
 8015da6:	b083      	sub	sp, #12
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	4603      	mov	r3, r0
 8015dac:	460a      	mov	r2, r1
 8015dae:	71fb      	strb	r3, [r7, #7]
 8015db0:	4613      	mov	r3, r2
 8015db2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8015db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8015db8:	4618      	mov	r0, r3
 8015dba:	370c      	adds	r7, #12
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bc80      	pop	{r7}
 8015dc0:	4770      	bx	lr
	...

08015dc4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	b09a      	sub	sp, #104	@ 0x68
 8015dc8:	af02      	add	r7, sp, #8
 8015dca:	60f8      	str	r0, [r7, #12]
 8015dcc:	60b9      	str	r1, [r7, #8]
 8015dce:	607a      	str	r2, [r7, #4]
 8015dd0:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015dd8:	2300      	movs	r3, #0
 8015dda:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8015dde:	2300      	movs	r3, #0
 8015de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015de2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8015de6:	2200      	movs	r2, #0
 8015de8:	601a      	str	r2, [r3, #0]
 8015dea:	605a      	str	r2, [r3, #4]
 8015dec:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015dee:	230c      	movs	r3, #12
 8015df0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8015df4:	2307      	movs	r3, #7
 8015df6:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015df8:	4b47      	ldr	r3, [pc, #284]	@ (8015f18 <RegionEU868NextChannel+0x154>)
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8015e00:	2201      	movs	r2, #1
 8015e02:	2100      	movs	r1, #0
 8015e04:	4618      	mov	r0, r3
 8015e06:	f7fe fa95 	bl	8014334 <RegionCommonCountChannels>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d10a      	bne.n	8015e26 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015e10:	4b41      	ldr	r3, [pc, #260]	@ (8015f18 <RegionEU868NextChannel+0x154>)
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 8015e18:	4b3f      	ldr	r3, [pc, #252]	@ (8015f18 <RegionEU868NextChannel+0x154>)
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	f042 0207 	orr.w	r2, r2, #7
 8015e20:	b292      	uxth	r2, r2
 8015e22:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	7a5b      	ldrb	r3, [r3, #9]
 8015e2a:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015e32:	b2db      	uxtb	r3, r3
 8015e34:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015e36:	4b38      	ldr	r3, [pc, #224]	@ (8015f18 <RegionEU868NextChannel+0x154>)
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8015e3e:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8015e40:	4b35      	ldr	r3, [pc, #212]	@ (8015f18 <RegionEU868NextChannel+0x154>)
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8015e46:	4b35      	ldr	r3, [pc, #212]	@ (8015f1c <RegionEU868NextChannel+0x158>)
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8015e4c:	2310      	movs	r3, #16
 8015e4e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8015e50:	f107 0312 	add.w	r3, r7, #18
 8015e54:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	685b      	ldr	r3, [r3, #4]
 8015e60:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	7a9b      	ldrb	r3, [r3, #10]
 8015e66:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8015e6a:	2306      	movs	r3, #6
 8015e6c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8015e70:	68fa      	ldr	r2, [r7, #12]
 8015e72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015e76:	320c      	adds	r2, #12
 8015e78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e7c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	7d1b      	ldrb	r3, [r3, #20]
 8015e84:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	8adb      	ldrh	r3, [r3, #22]
 8015e92:	4619      	mov	r1, r3
 8015e94:	4610      	mov	r0, r2
 8015e96:	f7fe fff7 	bl	8014e88 <GetTimeOnAir>
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8015e9e:	f107 0314 	add.w	r3, r7, #20
 8015ea2:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8015ea4:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8015ea8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8015eac:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	9301      	str	r3, [sp, #4]
 8015eb4:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8015eb8:	9300      	str	r3, [sp, #0]
 8015eba:	460b      	mov	r3, r1
 8015ebc:	6839      	ldr	r1, [r7, #0]
 8015ebe:	f7fe fe50 	bl	8014b62 <RegionCommonIdentifyChannels>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8015ec8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d10e      	bne.n	8015eee <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015ed0:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8015ed4:	3b01      	subs	r3, #1
 8015ed6:	4619      	mov	r1, r3
 8015ed8:	2000      	movs	r0, #0
 8015eda:	f001 fbe9 	bl	80176b0 <randr>
 8015ede:	4603      	mov	r3, r0
 8015ee0:	3360      	adds	r3, #96	@ 0x60
 8015ee2:	443b      	add	r3, r7
 8015ee4:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8015ee8:	68bb      	ldr	r3, [r7, #8]
 8015eea:	701a      	strb	r2, [r3, #0]
 8015eec:	e00e      	b.n	8015f0c <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8015eee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015ef2:	2b0c      	cmp	r3, #12
 8015ef4:	d10a      	bne.n	8015f0c <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015ef6:	4b08      	ldr	r3, [pc, #32]	@ (8015f18 <RegionEU868NextChannel+0x154>)
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 8015efe:	4b06      	ldr	r3, [pc, #24]	@ (8015f18 <RegionEU868NextChannel+0x154>)
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	f042 0207 	orr.w	r2, r2, #7
 8015f06:	b292      	uxth	r2, r2
 8015f08:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }
    return status;
 8015f0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8015f10:	4618      	mov	r0, r3
 8015f12:	3760      	adds	r7, #96	@ 0x60
 8015f14:	46bd      	mov	sp, r7
 8015f16:	bd80      	pop	{r7, pc}
 8015f18:	20001328 	.word	0x20001328
 8015f1c:	20001324 	.word	0x20001324

08015f20 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b084      	sub	sp, #16
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015f28:	2300      	movs	r3, #0
 8015f2a:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8015f30:	2300      	movs	r3, #0
 8015f32:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	791b      	ldrb	r3, [r3, #4]
 8015f38:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8015f3a:	7b7b      	ldrb	r3, [r7, #13]
 8015f3c:	2b02      	cmp	r3, #2
 8015f3e:	d801      	bhi.n	8015f44 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015f40:	2306      	movs	r3, #6
 8015f42:	e089      	b.n	8016058 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8015f44:	7b7b      	ldrb	r3, [r7, #13]
 8015f46:	2b0f      	cmp	r3, #15
 8015f48:	d901      	bls.n	8015f4e <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015f4a:	2303      	movs	r3, #3
 8015f4c:	e084      	b.n	8016058 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	7a1b      	ldrb	r3, [r3, #8]
 8015f54:	f343 0303 	sbfx	r3, r3, #0, #4
 8015f58:	b25b      	sxtb	r3, r3
 8015f5a:	2207      	movs	r2, #7
 8015f5c:	2100      	movs	r1, #0
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f7fe f997 	bl	8014292 <RegionCommonValueInRange>
 8015f64:	4603      	mov	r3, r0
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d101      	bne.n	8015f6e <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8015f6a:	2301      	movs	r3, #1
 8015f6c:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	7a1b      	ldrb	r3, [r3, #8]
 8015f74:	f343 1303 	sbfx	r3, r3, #4, #4
 8015f78:	b25b      	sxtb	r3, r3
 8015f7a:	2207      	movs	r2, #7
 8015f7c:	2100      	movs	r1, #0
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f7fe f987 	bl	8014292 <RegionCommonValueInRange>
 8015f84:	4603      	mov	r3, r0
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d101      	bne.n	8015f8e <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8015f8a:	2301      	movs	r3, #1
 8015f8c:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	7a1b      	ldrb	r3, [r3, #8]
 8015f94:	f343 0303 	sbfx	r3, r3, #0, #4
 8015f98:	b25a      	sxtb	r2, r3
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	7a1b      	ldrb	r3, [r3, #8]
 8015fa0:	f343 1303 	sbfx	r3, r3, #4, #4
 8015fa4:	b25b      	sxtb	r3, r3
 8015fa6:	429a      	cmp	r2, r3
 8015fa8:	dd01      	ble.n	8015fae <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8015faa:	2301      	movs	r3, #1
 8015fac:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8015fae:	7bbb      	ldrb	r3, [r7, #14]
 8015fb0:	f083 0301 	eor.w	r3, r3, #1
 8015fb4:	b2db      	uxtb	r3, r3
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d010      	beq.n	8015fdc <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	f107 020c 	add.w	r2, r7, #12
 8015fc4:	4611      	mov	r1, r2
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f7fe fee8 	bl	8014d9c <VerifyRfFreq>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	f083 0301 	eor.w	r3, r3, #1
 8015fd2:	b2db      	uxtb	r3, r3
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d001      	beq.n	8015fdc <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8015fd8:	2301      	movs	r3, #1
 8015fda:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8015fdc:	7bfb      	ldrb	r3, [r7, #15]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d004      	beq.n	8015fec <RegionEU868ChannelAdd+0xcc>
 8015fe2:	7bbb      	ldrb	r3, [r7, #14]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d001      	beq.n	8015fec <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015fe8:	2306      	movs	r3, #6
 8015fea:	e035      	b.n	8016058 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8015fec:	7bfb      	ldrb	r3, [r7, #15]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d001      	beq.n	8015ff6 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8015ff2:	2305      	movs	r3, #5
 8015ff4:	e030      	b.n	8016058 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8015ff6:	7bbb      	ldrb	r3, [r7, #14]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d001      	beq.n	8016000 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8015ffc:	2304      	movs	r3, #4
 8015ffe:	e02b      	b.n	8016058 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8016000:	4b17      	ldr	r3, [pc, #92]	@ (8016060 <RegionEU868ChannelAdd+0x140>)
 8016002:	6819      	ldr	r1, [r3, #0]
 8016004:	7b7a      	ldrb	r2, [r7, #13]
 8016006:	4613      	mov	r3, r2
 8016008:	005b      	lsls	r3, r3, #1
 801600a:	4413      	add	r3, r2
 801600c:	009b      	lsls	r3, r3, #2
 801600e:	18c8      	adds	r0, r1, r3
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	220c      	movs	r2, #12
 8016016:	4619      	mov	r1, r3
 8016018:	f001 fb61 	bl	80176de <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801601c:	4b10      	ldr	r3, [pc, #64]	@ (8016060 <RegionEU868ChannelAdd+0x140>)
 801601e:	6819      	ldr	r1, [r3, #0]
 8016020:	7b7a      	ldrb	r2, [r7, #13]
 8016022:	7b38      	ldrb	r0, [r7, #12]
 8016024:	4613      	mov	r3, r2
 8016026:	005b      	lsls	r3, r3, #1
 8016028:	4413      	add	r3, r2
 801602a:	009b      	lsls	r3, r3, #2
 801602c:	440b      	add	r3, r1
 801602e:	3309      	adds	r3, #9
 8016030:	4602      	mov	r2, r0
 8016032:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8016034:	4b0a      	ldr	r3, [pc, #40]	@ (8016060 <RegionEU868ChannelAdd+0x140>)
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	@ 0x480
 801603c:	b21a      	sxth	r2, r3
 801603e:	7b7b      	ldrb	r3, [r7, #13]
 8016040:	2101      	movs	r1, #1
 8016042:	fa01 f303 	lsl.w	r3, r1, r3
 8016046:	b21b      	sxth	r3, r3
 8016048:	4313      	orrs	r3, r2
 801604a:	b21a      	sxth	r2, r3
 801604c:	4b04      	ldr	r3, [pc, #16]	@ (8016060 <RegionEU868ChannelAdd+0x140>)
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	b292      	uxth	r2, r2
 8016052:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    return LORAMAC_STATUS_OK;
 8016056:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8016058:	4618      	mov	r0, r3
 801605a:	3710      	adds	r7, #16
 801605c:	46bd      	mov	sp, r7
 801605e:	bd80      	pop	{r7, pc}
 8016060:	20001328 	.word	0x20001328

08016064 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b086      	sub	sp, #24
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	781b      	ldrb	r3, [r3, #0]
 8016070:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016072:	7dfb      	ldrb	r3, [r7, #23]
 8016074:	2b02      	cmp	r3, #2
 8016076:	d801      	bhi.n	801607c <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8016078:	2300      	movs	r3, #0
 801607a:	e016      	b.n	80160aa <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801607c:	4b0d      	ldr	r3, [pc, #52]	@ (80160b4 <RegionEU868ChannelsRemove+0x50>)
 801607e:	6819      	ldr	r1, [r3, #0]
 8016080:	7dfa      	ldrb	r2, [r7, #23]
 8016082:	4613      	mov	r3, r2
 8016084:	005b      	lsls	r3, r3, #1
 8016086:	4413      	add	r3, r2
 8016088:	009b      	lsls	r3, r3, #2
 801608a:	440b      	add	r3, r1
 801608c:	461a      	mov	r2, r3
 801608e:	2300      	movs	r3, #0
 8016090:	6013      	str	r3, [r2, #0]
 8016092:	6053      	str	r3, [r2, #4]
 8016094:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8016096:	4b07      	ldr	r3, [pc, #28]	@ (80160b4 <RegionEU868ChannelsRemove+0x50>)
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801609e:	7df9      	ldrb	r1, [r7, #23]
 80160a0:	2210      	movs	r2, #16
 80160a2:	4618      	mov	r0, r3
 80160a4:	f7fe f912 	bl	80142cc <RegionCommonChanDisable>
 80160a8:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 80160aa:	4618      	mov	r0, r3
 80160ac:	3718      	adds	r7, #24
 80160ae:	46bd      	mov	sp, r7
 80160b0:	bd80      	pop	{r7, pc}
 80160b2:	bf00      	nop
 80160b4:	20001328 	.word	0x20001328

080160b8 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80160b8:	b590      	push	{r4, r7, lr}
 80160ba:	b085      	sub	sp, #20
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80160c6:	4b20      	ldr	r3, [pc, #128]	@ (8016148 <RegionEU868SetContinuousWave+0x90>)
 80160c8:	681a      	ldr	r2, [r3, #0]
 80160ca:	4b20      	ldr	r3, [pc, #128]	@ (801614c <RegionEU868SetContinuousWave+0x94>)
 80160cc:	6819      	ldr	r1, [r3, #0]
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	781b      	ldrb	r3, [r3, #0]
 80160d2:	461c      	mov	r4, r3
 80160d4:	4623      	mov	r3, r4
 80160d6:	005b      	lsls	r3, r3, #1
 80160d8:	4423      	add	r3, r4
 80160da:	009b      	lsls	r3, r3, #2
 80160dc:	440b      	add	r3, r1
 80160de:	3309      	adds	r3, #9
 80160e0:	781b      	ldrb	r3, [r3, #0]
 80160e2:	4619      	mov	r1, r3
 80160e4:	460b      	mov	r3, r1
 80160e6:	005b      	lsls	r3, r3, #1
 80160e8:	440b      	add	r3, r1
 80160ea:	00db      	lsls	r3, r3, #3
 80160ec:	4413      	add	r3, r2
 80160ee:	3302      	adds	r3, #2
 80160f0:	f993 3000 	ldrsb.w	r3, [r3]
 80160f4:	4619      	mov	r1, r3
 80160f6:	f7fe fdd4 	bl	8014ca2 <RegionCommonLimitTxPower>
 80160fa:	4603      	mov	r3, r0
 80160fc:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80160fe:	2300      	movs	r3, #0
 8016100:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8016102:	4b12      	ldr	r3, [pc, #72]	@ (801614c <RegionEU868SetContinuousWave+0x94>)
 8016104:	681a      	ldr	r2, [r3, #0]
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	781b      	ldrb	r3, [r3, #0]
 801610a:	4619      	mov	r1, r3
 801610c:	460b      	mov	r3, r1
 801610e:	005b      	lsls	r3, r3, #1
 8016110:	440b      	add	r3, r1
 8016112:	009b      	lsls	r3, r3, #2
 8016114:	4413      	add	r3, r2
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	6859      	ldr	r1, [r3, #4]
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	689a      	ldr	r2, [r3, #8]
 8016122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016126:	4618      	mov	r0, r3
 8016128:	f7fe fc2c 	bl	8014984 <RegionCommonComputeTxPower>
 801612c:	4603      	mov	r3, r0
 801612e:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8016130:	4b07      	ldr	r3, [pc, #28]	@ (8016150 <RegionEU868SetContinuousWave+0x98>)
 8016132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016134:	687a      	ldr	r2, [r7, #4]
 8016136:	8992      	ldrh	r2, [r2, #12]
 8016138:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801613c:	68b8      	ldr	r0, [r7, #8]
 801613e:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8016140:	bf00      	nop
 8016142:	3714      	adds	r7, #20
 8016144:	46bd      	mov	sp, r7
 8016146:	bd90      	pop	{r4, r7, pc}
 8016148:	20001324 	.word	0x20001324
 801614c:	20001328 	.word	0x20001328
 8016150:	0801d86c 	.word	0x0801d86c

08016154 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016154:	b480      	push	{r7}
 8016156:	b085      	sub	sp, #20
 8016158:	af00      	add	r7, sp, #0
 801615a:	4603      	mov	r3, r0
 801615c:	71fb      	strb	r3, [r7, #7]
 801615e:	460b      	mov	r3, r1
 8016160:	71bb      	strb	r3, [r7, #6]
 8016162:	4613      	mov	r3, r2
 8016164:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8016166:	79ba      	ldrb	r2, [r7, #6]
 8016168:	797b      	ldrb	r3, [r7, #5]
 801616a:	1ad3      	subs	r3, r2, r3
 801616c:	b2db      	uxtb	r3, r3
 801616e:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8016170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016174:	2b00      	cmp	r3, #0
 8016176:	da01      	bge.n	801617c <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8016178:	2300      	movs	r3, #0
 801617a:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801617c:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801617e:	4618      	mov	r0, r3
 8016180:	3714      	adds	r7, #20
 8016182:	46bd      	mov	sp, r7
 8016184:	bc80      	pop	{r7}
 8016186:	4770      	bx	lr

08016188 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b084      	sub	sp, #16
 801618c:	af00      	add	r7, sp, #0
 801618e:	603b      	str	r3, [r7, #0]
 8016190:	4603      	mov	r3, r0
 8016192:	71fb      	strb	r3, [r7, #7]
 8016194:	460b      	mov	r3, r1
 8016196:	71bb      	strb	r3, [r7, #6]
 8016198:	4613      	mov	r3, r2
 801619a:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 801619c:	79fb      	ldrb	r3, [r7, #7]
 801619e:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 80161a0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80161a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80161a8:	4611      	mov	r1, r2
 80161aa:	4618      	mov	r0, r3
 80161ac:	f7fe fd79 	bl	8014ca2 <RegionCommonLimitTxPower>
 80161b0:	4603      	mov	r3, r0
 80161b2:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 80161b4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80161b8:	2b04      	cmp	r3, #4
 80161ba:	d106      	bne.n	80161ca <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 80161bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80161c0:	2b02      	cmp	r3, #2
 80161c2:	bfb8      	it	lt
 80161c4:	2302      	movlt	r3, #2
 80161c6:	73fb      	strb	r3, [r7, #15]
 80161c8:	e00d      	b.n	80161e6 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 80161ca:	2204      	movs	r2, #4
 80161cc:	2100      	movs	r1, #0
 80161ce:	6838      	ldr	r0, [r7, #0]
 80161d0:	f7fe f8b0 	bl	8014334 <RegionCommonCountChannels>
 80161d4:	4603      	mov	r3, r0
 80161d6:	2b31      	cmp	r3, #49	@ 0x31
 80161d8:	d805      	bhi.n	80161e6 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 80161da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80161de:	2b05      	cmp	r3, #5
 80161e0:	bfb8      	it	lt
 80161e2:	2305      	movlt	r3, #5
 80161e4:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 80161e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80161ea:	4618      	mov	r0, r3
 80161ec:	3710      	adds	r7, #16
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}
	...

080161f4 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b082      	sub	sp, #8
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80161fc:	4b18      	ldr	r3, [pc, #96]	@ (8016260 <VerifyRfFreq+0x6c>)
 80161fe:	6a1b      	ldr	r3, [r3, #32]
 8016200:	6878      	ldr	r0, [r7, #4]
 8016202:	4798      	blx	r3
 8016204:	4603      	mov	r3, r0
 8016206:	f083 0301 	eor.w	r3, r3, #1
 801620a:	b2db      	uxtb	r3, r3
 801620c:	2b00      	cmp	r3, #0
 801620e:	d001      	beq.n	8016214 <VerifyRfFreq+0x20>
    {
        return false;
 8016210:	2300      	movs	r3, #0
 8016212:	e021      	b.n	8016258 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	4a13      	ldr	r2, [pc, #76]	@ (8016264 <VerifyRfFreq+0x70>)
 8016218:	4293      	cmp	r3, r2
 801621a:	d910      	bls.n	801623e <VerifyRfFreq+0x4a>
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	4a12      	ldr	r2, [pc, #72]	@ (8016268 <VerifyRfFreq+0x74>)
 8016220:	4293      	cmp	r3, r2
 8016222:	d80c      	bhi.n	801623e <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8016224:	687a      	ldr	r2, [r7, #4]
 8016226:	4b11      	ldr	r3, [pc, #68]	@ (801626c <VerifyRfFreq+0x78>)
 8016228:	4413      	add	r3, r2
 801622a:	4a11      	ldr	r2, [pc, #68]	@ (8016270 <VerifyRfFreq+0x7c>)
 801622c:	fba2 1203 	umull	r1, r2, r2, r3
 8016230:	0c92      	lsrs	r2, r2, #18
 8016232:	4910      	ldr	r1, [pc, #64]	@ (8016274 <VerifyRfFreq+0x80>)
 8016234:	fb01 f202 	mul.w	r2, r1, r2
 8016238:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801623a:	2a00      	cmp	r2, #0
 801623c:	d001      	beq.n	8016242 <VerifyRfFreq+0x4e>
    {
        return false;
 801623e:	2300      	movs	r3, #0
 8016240:	e00a      	b.n	8016258 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	4a0c      	ldr	r2, [pc, #48]	@ (8016278 <VerifyRfFreq+0x84>)
 8016246:	4293      	cmp	r3, r2
 8016248:	d903      	bls.n	8016252 <VerifyRfFreq+0x5e>
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	4a06      	ldr	r2, [pc, #24]	@ (8016268 <VerifyRfFreq+0x74>)
 801624e:	4293      	cmp	r3, r2
 8016250:	d901      	bls.n	8016256 <VerifyRfFreq+0x62>
    {
        return false;
 8016252:	2300      	movs	r3, #0
 8016254:	e000      	b.n	8016258 <VerifyRfFreq+0x64>
    }
    return true;
 8016256:	2301      	movs	r3, #1
}
 8016258:	4618      	mov	r0, r3
 801625a:	3708      	adds	r7, #8
 801625c:	46bd      	mov	sp, r7
 801625e:	bd80      	pop	{r7, pc}
 8016260:	0801d86c 	.word	0x0801d86c
 8016264:	3708709f 	.word	0x3708709f
 8016268:	374886e0 	.word	0x374886e0
 801626c:	c8f78f60 	.word	0xc8f78f60
 8016270:	6fd91d85 	.word	0x6fd91d85
 8016274:	000927c0 	.word	0x000927c0
 8016278:	35c8015f 	.word	0x35c8015f

0801627c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801627c:	b590      	push	{r4, r7, lr}
 801627e:	b089      	sub	sp, #36	@ 0x24
 8016280:	af04      	add	r7, sp, #16
 8016282:	4603      	mov	r3, r0
 8016284:	460a      	mov	r2, r1
 8016286:	71fb      	strb	r3, [r7, #7]
 8016288:	4613      	mov	r3, r2
 801628a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 801628c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016290:	4a0f      	ldr	r2, [pc, #60]	@ (80162d0 <GetTimeOnAir+0x54>)
 8016292:	5cd3      	ldrb	r3, [r2, r3]
 8016294:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8016296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801629a:	490e      	ldr	r1, [pc, #56]	@ (80162d4 <GetTimeOnAir+0x58>)
 801629c:	4618      	mov	r0, r3
 801629e:	f7fe fd15 	bl	8014ccc <RegionCommonGetBandwidth>
 80162a2:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80162a4:	4b0c      	ldr	r3, [pc, #48]	@ (80162d8 <GetTimeOnAir+0x5c>)
 80162a6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80162a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80162ac:	88bb      	ldrh	r3, [r7, #4]
 80162ae:	b2db      	uxtb	r3, r3
 80162b0:	2101      	movs	r1, #1
 80162b2:	9103      	str	r1, [sp, #12]
 80162b4:	9302      	str	r3, [sp, #8]
 80162b6:	2300      	movs	r3, #0
 80162b8:	9301      	str	r3, [sp, #4]
 80162ba:	2308      	movs	r3, #8
 80162bc:	9300      	str	r3, [sp, #0]
 80162be:	2301      	movs	r3, #1
 80162c0:	68b9      	ldr	r1, [r7, #8]
 80162c2:	2001      	movs	r0, #1
 80162c4:	47a0      	blx	r4
 80162c6:	4603      	mov	r3, r0
}
 80162c8:	4618      	mov	r0, r3
 80162ca:	3714      	adds	r7, #20
 80162cc:	46bd      	mov	sp, r7
 80162ce:	bd90      	pop	{r4, r7, pc}
 80162d0:	0801d7e8 	.word	0x0801d7e8
 80162d4:	0801d7f8 	.word	0x0801d7f8
 80162d8:	0801d86c 	.word	0x0801d86c

080162dc <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b088      	sub	sp, #32
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80162e4:	2300      	movs	r3, #0
 80162e6:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	781b      	ldrb	r3, [r3, #0]
 80162ec:	3b01      	subs	r3, #1
 80162ee:	2b38      	cmp	r3, #56	@ 0x38
 80162f0:	f200 813c 	bhi.w	801656c <RegionUS915GetPhyParam+0x290>
 80162f4:	a201      	add	r2, pc, #4	@ (adr r2, 80162fc <RegionUS915GetPhyParam+0x20>)
 80162f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162fa:	bf00      	nop
 80162fc:	080163e1 	.word	0x080163e1
 8016300:	080163e7 	.word	0x080163e7
 8016304:	0801656d 	.word	0x0801656d
 8016308:	0801656d 	.word	0x0801656d
 801630c:	0801656d 	.word	0x0801656d
 8016310:	080163ed 	.word	0x080163ed
 8016314:	0801656d 	.word	0x0801656d
 8016318:	08016427 	.word	0x08016427
 801631c:	0801656d 	.word	0x0801656d
 8016320:	0801642d 	.word	0x0801642d
 8016324:	08016433 	.word	0x08016433
 8016328:	08016439 	.word	0x08016439
 801632c:	0801643f 	.word	0x0801643f
 8016330:	0801644f 	.word	0x0801644f
 8016334:	0801645f 	.word	0x0801645f
 8016338:	08016465 	.word	0x08016465
 801633c:	0801646d 	.word	0x0801646d
 8016340:	08016475 	.word	0x08016475
 8016344:	0801647d 	.word	0x0801647d
 8016348:	08016485 	.word	0x08016485
 801634c:	0801648d 	.word	0x0801648d
 8016350:	08016495 	.word	0x08016495
 8016354:	080164a9 	.word	0x080164a9
 8016358:	080164af 	.word	0x080164af
 801635c:	080164b5 	.word	0x080164b5
 8016360:	080164bb 	.word	0x080164bb
 8016364:	080164c7 	.word	0x080164c7
 8016368:	080164d3 	.word	0x080164d3
 801636c:	080164d9 	.word	0x080164d9
 8016370:	080164e1 	.word	0x080164e1
 8016374:	080164e7 	.word	0x080164e7
 8016378:	080164ed 	.word	0x080164ed
 801637c:	080164f3 	.word	0x080164f3
 8016380:	080163f3 	.word	0x080163f3
 8016384:	0801656d 	.word	0x0801656d
 8016388:	0801656d 	.word	0x0801656d
 801638c:	0801656d 	.word	0x0801656d
 8016390:	0801656d 	.word	0x0801656d
 8016394:	0801656d 	.word	0x0801656d
 8016398:	0801656d 	.word	0x0801656d
 801639c:	0801656d 	.word	0x0801656d
 80163a0:	0801656d 	.word	0x0801656d
 80163a4:	0801656d 	.word	0x0801656d
 80163a8:	0801656d 	.word	0x0801656d
 80163ac:	0801656d 	.word	0x0801656d
 80163b0:	0801656d 	.word	0x0801656d
 80163b4:	0801656d 	.word	0x0801656d
 80163b8:	080164fb 	.word	0x080164fb
 80163bc:	0801650f 	.word	0x0801650f
 80163c0:	0801651d 	.word	0x0801651d
 80163c4:	08016523 	.word	0x08016523
 80163c8:	0801656d 	.word	0x0801656d
 80163cc:	08016529 	.word	0x08016529
 80163d0:	0801653d 	.word	0x0801653d
 80163d4:	08016543 	.word	0x08016543
 80163d8:	08016549 	.word	0x08016549
 80163dc:	08016559 	.word	0x08016559
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 80163e0:	2308      	movs	r3, #8
 80163e2:	61bb      	str	r3, [r7, #24]
            break;
 80163e4:	e0c3      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 80163e6:	2300      	movs	r3, #0
 80163e8:	61bb      	str	r3, [r7, #24]
            break;
 80163ea:	e0c0      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 80163ec:	2300      	movs	r3, #0
 80163ee:	61bb      	str	r3, [r7, #24]
            break;
 80163f0:	e0bd      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80163f8:	733b      	strb	r3, [r7, #12]
 80163fa:	2304      	movs	r3, #4
 80163fc:	737b      	strb	r3, [r7, #13]
 80163fe:	2300      	movs	r3, #0
 8016400:	73bb      	strb	r3, [r7, #14]
 8016402:	2348      	movs	r3, #72	@ 0x48
 8016404:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8016406:	4b5d      	ldr	r3, [pc, #372]	@ (801657c <RegionUS915GetPhyParam+0x2a0>)
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801640e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8016410:	4b5a      	ldr	r3, [pc, #360]	@ (801657c <RegionUS915GetPhyParam+0x2a0>)
 8016412:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016414:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8016416:	f107 030c 	add.w	r3, r7, #12
 801641a:	4618      	mov	r0, r3
 801641c:	f7fe fc03 	bl	8014c26 <RegionCommonGetNextLowerTxDr>
 8016420:	4603      	mov	r3, r0
 8016422:	61bb      	str	r3, [r7, #24]
            break;
 8016424:	e0a3      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8016426:	2300      	movs	r3, #0
 8016428:	61bb      	str	r3, [r7, #24]
            break;
 801642a:	e0a0      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 801642c:	2300      	movs	r3, #0
 801642e:	61bb      	str	r3, [r7, #24]
            break;
 8016430:	e09d      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8016432:	2340      	movs	r3, #64	@ 0x40
 8016434:	61bb      	str	r3, [r7, #24]
            break;
 8016436:	e09a      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8016438:	2320      	movs	r3, #32
 801643a:	61bb      	str	r3, [r7, #24]
            break;
 801643c:	e097      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016444:	461a      	mov	r2, r3
 8016446:	4b4e      	ldr	r3, [pc, #312]	@ (8016580 <RegionUS915GetPhyParam+0x2a4>)
 8016448:	5c9b      	ldrb	r3, [r3, r2]
 801644a:	61bb      	str	r3, [r7, #24]
            break;
 801644c:	e08f      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016454:	461a      	mov	r2, r3
 8016456:	4b4b      	ldr	r3, [pc, #300]	@ (8016584 <RegionUS915GetPhyParam+0x2a8>)
 8016458:	5c9b      	ldrb	r3, [r3, r2]
 801645a:	61bb      	str	r3, [r7, #24]
            break;
 801645c:	e087      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801645e:	2300      	movs	r3, #0
 8016460:	61bb      	str	r3, [r7, #24]
            break;
 8016462:	e084      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8016464:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8016468:	61bb      	str	r3, [r7, #24]
            break;
 801646a:	e080      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801646c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016470:	61bb      	str	r3, [r7, #24]
            break;
 8016472:	e07c      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8016474:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8016478:	61bb      	str	r3, [r7, #24]
            break;
 801647a:	e078      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801647c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8016480:	61bb      	str	r3, [r7, #24]
            break;
 8016482:	e074      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8016484:	f241 7370 	movw	r3, #6000	@ 0x1770
 8016488:	61bb      	str	r3, [r7, #24]
            break;
 801648a:	e070      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801648c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8016490:	61bb      	str	r3, [r7, #24]
            break;
 8016492:	e06c      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8016494:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016498:	483b      	ldr	r0, [pc, #236]	@ (8016588 <RegionUS915GetPhyParam+0x2ac>)
 801649a:	f001 f909 	bl	80176b0 <randr>
 801649e:	4603      	mov	r3, r0
 80164a0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80164a4:	61bb      	str	r3, [r7, #24]
            break;
 80164a6:	e062      	b.n	801656e <RegionUS915GetPhyParam+0x292>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80164a8:	2300      	movs	r3, #0
 80164aa:	61bb      	str	r3, [r7, #24]
            break;
 80164ac:	e05f      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 80164ae:	4b37      	ldr	r3, [pc, #220]	@ (801658c <RegionUS915GetPhyParam+0x2b0>)
 80164b0:	61bb      	str	r3, [r7, #24]
            break;
 80164b2:	e05c      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 80164b4:	2308      	movs	r3, #8
 80164b6:	61bb      	str	r3, [r7, #24]
            break;
 80164b8:	e059      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80164ba:	4b30      	ldr	r3, [pc, #192]	@ (801657c <RegionUS915GetPhyParam+0x2a0>)
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80164c2:	61bb      	str	r3, [r7, #24]
            break;
 80164c4:	e053      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80164c6:	4b2d      	ldr	r3, [pc, #180]	@ (801657c <RegionUS915GetPhyParam+0x2a0>)
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 80164ce:	61bb      	str	r3, [r7, #24]
            break;
 80164d0:	e04d      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 80164d2:	2348      	movs	r3, #72	@ 0x48
 80164d4:	61bb      	str	r3, [r7, #24]
            break;
 80164d6:	e04a      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80164d8:	4b28      	ldr	r3, [pc, #160]	@ (801657c <RegionUS915GetPhyParam+0x2a0>)
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	61bb      	str	r3, [r7, #24]
            break;
 80164de:	e046      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 80164e0:	2300      	movs	r3, #0
 80164e2:	61bb      	str	r3, [r7, #24]
            break;
 80164e4:	e043      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80164e6:	2300      	movs	r3, #0
 80164e8:	61bb      	str	r3, [r7, #24]
            break;
 80164ea:	e040      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 80164ec:	4b28      	ldr	r3, [pc, #160]	@ (8016590 <RegionUS915GetPhyParam+0x2b4>)
 80164ee:	61bb      	str	r3, [r7, #24]
            break;
 80164f0:	e03d      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 80164f2:	f04f 0300 	mov.w	r3, #0
 80164f6:	61bb      	str	r3, [r7, #24]
            break;
 80164f8:	e039      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	791b      	ldrb	r3, [r3, #4]
 80164fe:	4a25      	ldr	r2, [pc, #148]	@ (8016594 <RegionUS915GetPhyParam+0x2b8>)
 8016500:	4922      	ldr	r1, [pc, #136]	@ (801658c <RegionUS915GetPhyParam+0x2b0>)
 8016502:	4618      	mov	r0, r3
 8016504:	f7fd fcf1 	bl	8013eea <RegionBaseUSCalcDownlinkFrequency>
 8016508:	4603      	mov	r3, r0
 801650a:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801650c:	e02f      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801650e:	2317      	movs	r3, #23
 8016510:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8016512:	2305      	movs	r3, #5
 8016514:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8016516:	2303      	movs	r3, #3
 8016518:	76bb      	strb	r3, [r7, #26]
            break;
 801651a:	e028      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801651c:	2308      	movs	r3, #8
 801651e:	61bb      	str	r3, [r7, #24]
            break;
 8016520:	e025      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8016522:	2308      	movs	r3, #8
 8016524:	61bb      	str	r3, [r7, #24]
            break;
 8016526:	e022      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	791b      	ldrb	r3, [r3, #4]
 801652c:	4a19      	ldr	r2, [pc, #100]	@ (8016594 <RegionUS915GetPhyParam+0x2b8>)
 801652e:	4917      	ldr	r1, [pc, #92]	@ (801658c <RegionUS915GetPhyParam+0x2b0>)
 8016530:	4618      	mov	r0, r3
 8016532:	f7fd fcda 	bl	8013eea <RegionBaseUSCalcDownlinkFrequency>
 8016536:	4603      	mov	r3, r0
 8016538:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801653a:	e018      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801653c:	2308      	movs	r3, #8
 801653e:	61bb      	str	r3, [r7, #24]
            break;
 8016540:	e015      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8016542:	2308      	movs	r3, #8
 8016544:	61bb      	str	r3, [r7, #24]
            break;
 8016546:	e012      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801654e:	461a      	mov	r2, r3
 8016550:	4b11      	ldr	r3, [pc, #68]	@ (8016598 <RegionUS915GetPhyParam+0x2bc>)
 8016552:	5c9b      	ldrb	r3, [r3, r2]
 8016554:	61bb      	str	r3, [r7, #24]
            break;
 8016556:	e00a      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801655e:	490f      	ldr	r1, [pc, #60]	@ (801659c <RegionUS915GetPhyParam+0x2c0>)
 8016560:	4618      	mov	r0, r3
 8016562:	f7fe fbb3 	bl	8014ccc <RegionCommonGetBandwidth>
 8016566:	4603      	mov	r3, r0
 8016568:	61bb      	str	r3, [r7, #24]
            break;
 801656a:	e000      	b.n	801656e <RegionUS915GetPhyParam+0x292>
        }
        default:
        {
            break;
 801656c:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 801656e:	69bb      	ldr	r3, [r7, #24]
 8016570:	61fb      	str	r3, [r7, #28]
 8016572:	69fb      	ldr	r3, [r7, #28]
}
 8016574:	4618      	mov	r0, r3
 8016576:	3720      	adds	r7, #32
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}
 801657c:	20001330 	.word	0x20001330
 8016580:	0801d84c 	.word	0x0801d84c
 8016584:	0801d85c 	.word	0x0801d85c
 8016588:	fffffc18 	.word	0xfffffc18
 801658c:	370870a0 	.word	0x370870a0
 8016590:	4200999a 	.word	0x4200999a
 8016594:	000927c0 	.word	0x000927c0
 8016598:	0801d7e8 	.word	0x0801d7e8
 801659c:	0801d7f8 	.word	0x0801d7f8

080165a0 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80165a0:	b590      	push	{r4, r7, lr}
 80165a2:	b085      	sub	sp, #20
 80165a4:	af02      	add	r7, sp, #8
 80165a6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80165a8:	4b11      	ldr	r3, [pc, #68]	@ (80165f0 <RegionUS915SetBandTxDone+0x50>)
 80165aa:	681a      	ldr	r2, [r3, #0]
 80165ac:	4b11      	ldr	r3, [pc, #68]	@ (80165f4 <RegionUS915SetBandTxDone+0x54>)
 80165ae:	6819      	ldr	r1, [r3, #0]
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	781b      	ldrb	r3, [r3, #0]
 80165b4:	4618      	mov	r0, r3
 80165b6:	4603      	mov	r3, r0
 80165b8:	005b      	lsls	r3, r3, #1
 80165ba:	4403      	add	r3, r0
 80165bc:	009b      	lsls	r3, r3, #2
 80165be:	440b      	add	r3, r1
 80165c0:	3309      	adds	r3, #9
 80165c2:	781b      	ldrb	r3, [r3, #0]
 80165c4:	4619      	mov	r1, r3
 80165c6:	460b      	mov	r3, r1
 80165c8:	005b      	lsls	r3, r3, #1
 80165ca:	440b      	add	r3, r1
 80165cc:	00db      	lsls	r3, r3, #3
 80165ce:	18d0      	adds	r0, r2, r3
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	6899      	ldr	r1, [r3, #8]
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	785c      	ldrb	r4, [r3, #1]
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	691a      	ldr	r2, [r3, #16]
 80165dc:	9200      	str	r2, [sp, #0]
 80165de:	68db      	ldr	r3, [r3, #12]
 80165e0:	4622      	mov	r2, r4
 80165e2:	f7fd fef9 	bl	80143d8 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 80165e6:	bf00      	nop
 80165e8:	370c      	adds	r7, #12
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd90      	pop	{r4, r7, pc}
 80165ee:	bf00      	nop
 80165f0:	2000132c 	.word	0x2000132c
 80165f4:	20001330 	.word	0x20001330

080165f8 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b08a      	sub	sp, #40	@ 0x28
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8016600:	2301      	movs	r3, #1
 8016602:	81bb      	strh	r3, [r7, #12]
 8016604:	2300      	movs	r3, #0
 8016606:	73bb      	strb	r3, [r7, #14]
 8016608:	2300      	movs	r3, #0
 801660a:	613b      	str	r3, [r7, #16]
 801660c:	2300      	movs	r3, #0
 801660e:	617b      	str	r3, [r7, #20]
 8016610:	2300      	movs	r3, #0
 8016612:	61bb      	str	r3, [r7, #24]
 8016614:	2300      	movs	r3, #0
 8016616:	61fb      	str	r3, [r7, #28]
 8016618:	2300      	movs	r3, #0
 801661a:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	7a1b      	ldrb	r3, [r3, #8]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d007      	beq.n	8016636 <RegionUS915InitDefaults+0x3e>
 8016626:	2b00      	cmp	r3, #0
 8016628:	f2c0 8106 	blt.w	8016838 <RegionUS915InitDefaults+0x240>
 801662c:	3b01      	subs	r3, #1
 801662e:	2b01      	cmp	r3, #1
 8016630:	f200 8102 	bhi.w	8016838 <RegionUS915InitDefaults+0x240>
 8016634:	e0ce      	b.n	80167d4 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	2b00      	cmp	r3, #0
 801663c:	f000 80fe 	beq.w	801683c <RegionUS915InitDefaults+0x244>
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	685b      	ldr	r3, [r3, #4]
 8016644:	2b00      	cmp	r3, #0
 8016646:	f000 80f9 	beq.w	801683c <RegionUS915InitDefaults+0x244>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	4a7d      	ldr	r2, [pc, #500]	@ (8016844 <RegionUS915InitDefaults+0x24c>)
 8016650:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	685b      	ldr	r3, [r3, #4]
 8016656:	4a7c      	ldr	r2, [pc, #496]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 8016658:	6013      	str	r3, [r2, #0]

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801665a:	4b7a      	ldr	r3, [pc, #488]	@ (8016844 <RegionUS915InitDefaults+0x24c>)
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	2200      	movs	r2, #0
 8016660:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8016664:	4b77      	ldr	r3, [pc, #476]	@ (8016844 <RegionUS915InitDefaults+0x24c>)
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	2200      	movs	r2, #0
 801666a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801666e:	4b75      	ldr	r3, [pc, #468]	@ (8016844 <RegionUS915InitDefaults+0x24c>)
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	4618      	mov	r0, r3
 8016674:	f107 030c 	add.w	r3, r7, #12
 8016678:	2218      	movs	r2, #24
 801667a:	4619      	mov	r1, r3
 801667c:	f001 f82f 	bl	80176de <memcpy1>
            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8016680:	2300      	movs	r3, #0
 8016682:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016686:	e02e      	b.n	80166e6 <RegionUS915InitDefaults+0xee>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8016688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801668c:	4a6f      	ldr	r2, [pc, #444]	@ (801684c <RegionUS915InitDefaults+0x254>)
 801668e:	fb03 f202 	mul.w	r2, r3, r2
 8016692:	4b6f      	ldr	r3, [pc, #444]	@ (8016850 <RegionUS915InitDefaults+0x258>)
 8016694:	4413      	add	r3, r2
 8016696:	4a6c      	ldr	r2, [pc, #432]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 8016698:	6811      	ldr	r1, [r2, #0]
 801669a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801669e:	4618      	mov	r0, r3
 80166a0:	4613      	mov	r3, r2
 80166a2:	005b      	lsls	r3, r3, #1
 80166a4:	4413      	add	r3, r2
 80166a6:	009b      	lsls	r3, r3, #2
 80166a8:	440b      	add	r3, r1
 80166aa:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 80166ac:	4b66      	ldr	r3, [pc, #408]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 80166ae:	6819      	ldr	r1, [r3, #0]
 80166b0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80166b4:	4613      	mov	r3, r2
 80166b6:	005b      	lsls	r3, r3, #1
 80166b8:	4413      	add	r3, r2
 80166ba:	009b      	lsls	r3, r3, #2
 80166bc:	440b      	add	r3, r1
 80166be:	3308      	adds	r3, #8
 80166c0:	2230      	movs	r2, #48	@ 0x30
 80166c2:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80166c4:	4b60      	ldr	r3, [pc, #384]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 80166c6:	6819      	ldr	r1, [r3, #0]
 80166c8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80166cc:	4613      	mov	r3, r2
 80166ce:	005b      	lsls	r3, r3, #1
 80166d0:	4413      	add	r3, r2
 80166d2:	009b      	lsls	r3, r3, #2
 80166d4:	440b      	add	r3, r1
 80166d6:	3309      	adds	r3, #9
 80166d8:	2200      	movs	r2, #0
 80166da:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80166dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80166e0:	3301      	adds	r3, #1
 80166e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80166e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80166ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80166ec:	d9cc      	bls.n	8016688 <RegionUS915InitDefaults+0x90>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80166ee:	2340      	movs	r3, #64	@ 0x40
 80166f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80166f4:	e02f      	b.n	8016756 <RegionUS915InitDefaults+0x15e>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 80166f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80166fa:	3b40      	subs	r3, #64	@ 0x40
 80166fc:	4a55      	ldr	r2, [pc, #340]	@ (8016854 <RegionUS915InitDefaults+0x25c>)
 80166fe:	fb03 f202 	mul.w	r2, r3, r2
 8016702:	4b55      	ldr	r3, [pc, #340]	@ (8016858 <RegionUS915InitDefaults+0x260>)
 8016704:	4413      	add	r3, r2
 8016706:	4a50      	ldr	r2, [pc, #320]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 8016708:	6811      	ldr	r1, [r2, #0]
 801670a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801670e:	4618      	mov	r0, r3
 8016710:	4613      	mov	r3, r2
 8016712:	005b      	lsls	r3, r3, #1
 8016714:	4413      	add	r3, r2
 8016716:	009b      	lsls	r3, r3, #2
 8016718:	440b      	add	r3, r1
 801671a:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801671c:	4b4a      	ldr	r3, [pc, #296]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 801671e:	6819      	ldr	r1, [r3, #0]
 8016720:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8016724:	4613      	mov	r3, r2
 8016726:	005b      	lsls	r3, r3, #1
 8016728:	4413      	add	r3, r2
 801672a:	009b      	lsls	r3, r3, #2
 801672c:	440b      	add	r3, r1
 801672e:	3308      	adds	r3, #8
 8016730:	2244      	movs	r2, #68	@ 0x44
 8016732:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8016734:	4b44      	ldr	r3, [pc, #272]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 8016736:	6819      	ldr	r1, [r3, #0]
 8016738:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801673c:	4613      	mov	r3, r2
 801673e:	005b      	lsls	r3, r3, #1
 8016740:	4413      	add	r3, r2
 8016742:	009b      	lsls	r3, r3, #2
 8016744:	440b      	add	r3, r1
 8016746:	3309      	adds	r3, #9
 8016748:	2200      	movs	r2, #0
 801674a:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801674c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016750:	3301      	adds	r3, #1
 8016752:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016756:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801675a:	2b47      	cmp	r3, #71	@ 0x47
 801675c:	d9cb      	bls.n	80166f6 <RegionUS915InitDefaults+0xfe>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801675e:	4b3a      	ldr	r3, [pc, #232]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016766:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801676a:	4b37      	ldr	r3, [pc, #220]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016772:	f8a3 248e 	strh.w	r2, [r3, #1166]	@ 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8016776:	4b34      	ldr	r3, [pc, #208]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801677e:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8016782:	4b31      	ldr	r3, [pc, #196]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801678a:	f8a3 2492 	strh.w	r2, [r3, #1170]	@ 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801678e:	4b2e      	ldr	r3, [pc, #184]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	22ff      	movs	r2, #255	@ 0xff
 8016794:	f8a3 2494 	strh.w	r2, [r3, #1172]	@ 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8016798:	4b2b      	ldr	r3, [pc, #172]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	2200      	movs	r2, #0
 801679e:	f8a3 2496 	strh.w	r2, [r3, #1174]	@ 0x496
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80167a2:	4b29      	ldr	r3, [pc, #164]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 80167aa:	4b27      	ldr	r3, [pc, #156]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 80167b2:	2206      	movs	r2, #6
 80167b4:	4619      	mov	r1, r3
 80167b6:	f7fd fde9 	bl	801438c <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80167ba:	4b22      	ldr	r3, [pc, #136]	@ (8016844 <RegionUS915InitDefaults+0x24c>)
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80167c2:	4b21      	ldr	r3, [pc, #132]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80167ca:	2206      	movs	r2, #6
 80167cc:	4619      	mov	r1, r3
 80167ce:	f7fd fddd 	bl	801438c <RegionCommonChanMaskCopy>
            break;
 80167d2:	e034      	b.n	801683e <RegionUS915InitDefaults+0x246>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80167d4:	4b1c      	ldr	r3, [pc, #112]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 80167dc:	4b1a      	ldr	r3, [pc, #104]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 80167e4:	2206      	movs	r2, #6
 80167e6:	4619      	mov	r1, r3
 80167e8:	f7fd fdd0 	bl	801438c <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80167ec:	2300      	movs	r3, #0
 80167ee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80167f2:	e01c      	b.n	801682e <RegionUS915InitDefaults+0x236>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80167f4:	4b13      	ldr	r3, [pc, #76]	@ (8016844 <RegionUS915InitDefaults+0x24c>)
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80167fc:	3248      	adds	r2, #72	@ 0x48
 80167fe:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8016802:	4b11      	ldr	r3, [pc, #68]	@ (8016848 <RegionUS915InitDefaults+0x250>)
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 801680a:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 801680e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8016812:	4b0c      	ldr	r3, [pc, #48]	@ (8016844 <RegionUS915InitDefaults+0x24c>)
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 801681a:	4001      	ands	r1, r0
 801681c:	b289      	uxth	r1, r1
 801681e:	3248      	adds	r2, #72	@ 0x48
 8016820:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8016824:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8016828:	3301      	adds	r3, #1
 801682a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801682e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8016832:	2b05      	cmp	r3, #5
 8016834:	d9de      	bls.n	80167f4 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 8016836:	e002      	b.n	801683e <RegionUS915InitDefaults+0x246>
        }
        default:
        {
            break;
 8016838:	bf00      	nop
 801683a:	e000      	b.n	801683e <RegionUS915InitDefaults+0x246>
                return;
 801683c:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 801683e:	3728      	adds	r7, #40	@ 0x28
 8016840:	46bd      	mov	sp, r7
 8016842:	bd80      	pop	{r7, pc}
 8016844:	2000132c 	.word	0x2000132c
 8016848:	20001330 	.word	0x20001330
 801684c:	00030d40 	.word	0x00030d40
 8016850:	35c80160 	.word	0x35c80160
 8016854:	00186a00 	.word	0x00186a00
 8016858:	35d2afc0 	.word	0x35d2afc0

0801685c <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801685c:	b580      	push	{r7, lr}
 801685e:	b082      	sub	sp, #8
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
 8016864:	460b      	mov	r3, r1
 8016866:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 8016868:	78fb      	ldrb	r3, [r7, #3]
 801686a:	2b0f      	cmp	r3, #15
 801686c:	d858      	bhi.n	8016920 <RegionUS915Verify+0xc4>
 801686e:	a201      	add	r2, pc, #4	@ (adr r2, 8016874 <RegionUS915Verify+0x18>)
 8016870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016874:	080168b5 	.word	0x080168b5
 8016878:	08016921 	.word	0x08016921
 801687c:	08016921 	.word	0x08016921
 8016880:	08016921 	.word	0x08016921
 8016884:	08016921 	.word	0x08016921
 8016888:	080168c3 	.word	0x080168c3
 801688c:	080168c3 	.word	0x080168c3
 8016890:	080168e1 	.word	0x080168e1
 8016894:	08016921 	.word	0x08016921
 8016898:	080168ff 	.word	0x080168ff
 801689c:	080168ff 	.word	0x080168ff
 80168a0:	08016921 	.word	0x08016921
 80168a4:	08016921 	.word	0x08016921
 80168a8:	08016921 	.word	0x08016921
 80168ac:	08016921 	.word	0x08016921
 80168b0:	0801691d 	.word	0x0801691d
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	4618      	mov	r0, r3
 80168ba:	f7ff fc9b 	bl	80161f4 <VerifyRfFreq>
 80168be:	4603      	mov	r3, r0
 80168c0:	e02f      	b.n	8016922 <RegionUS915Verify+0xc6>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	f993 3000 	ldrsb.w	r3, [r3]
 80168c8:	2204      	movs	r2, #4
 80168ca:	2100      	movs	r1, #0
 80168cc:	4618      	mov	r0, r3
 80168ce:	f7fd fce0 	bl	8014292 <RegionCommonValueInRange>
 80168d2:	4603      	mov	r3, r0
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	bf14      	ite	ne
 80168d8:	2301      	movne	r3, #1
 80168da:	2300      	moveq	r3, #0
 80168dc:	b2db      	uxtb	r3, r3
 80168de:	e020      	b.n	8016922 <RegionUS915Verify+0xc6>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	f993 3000 	ldrsb.w	r3, [r3]
 80168e6:	220d      	movs	r2, #13
 80168e8:	2108      	movs	r1, #8
 80168ea:	4618      	mov	r0, r3
 80168ec:	f7fd fcd1 	bl	8014292 <RegionCommonValueInRange>
 80168f0:	4603      	mov	r3, r0
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	bf14      	ite	ne
 80168f6:	2301      	movne	r3, #1
 80168f8:	2300      	moveq	r3, #0
 80168fa:	b2db      	uxtb	r3, r3
 80168fc:	e011      	b.n	8016922 <RegionUS915Verify+0xc6>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	f993 3000 	ldrsb.w	r3, [r3]
 8016904:	220e      	movs	r2, #14
 8016906:	2100      	movs	r1, #0
 8016908:	4618      	mov	r0, r3
 801690a:	f7fd fcc2 	bl	8014292 <RegionCommonValueInRange>
 801690e:	4603      	mov	r3, r0
 8016910:	2b00      	cmp	r3, #0
 8016912:	bf14      	ite	ne
 8016914:	2301      	movne	r3, #1
 8016916:	2300      	moveq	r3, #0
 8016918:	b2db      	uxtb	r3, r3
 801691a:	e002      	b.n	8016922 <RegionUS915Verify+0xc6>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 801691c:	2300      	movs	r3, #0
 801691e:	e000      	b.n	8016922 <RegionUS915Verify+0xc6>
        }
        default:
            return false;
 8016920:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8016922:	4618      	mov	r0, r3
 8016924:	3708      	adds	r7, #8
 8016926:	46bd      	mov	sp, r7
 8016928:	bd80      	pop	{r7, pc}
 801692a:	bf00      	nop

0801692c <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801692c:	b480      	push	{r7}
 801692e:	b085      	sub	sp, #20
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	791b      	ldrb	r3, [r3, #4]
 8016938:	2b10      	cmp	r3, #16
 801693a:	d160      	bne.n	80169fe <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	330f      	adds	r3, #15
 8016942:	781b      	ldrb	r3, [r3, #0]
 8016944:	2b01      	cmp	r3, #1
 8016946:	d15c      	bne.n	8016a02 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8016948:	2300      	movs	r3, #0
 801694a:	73fb      	strb	r3, [r7, #15]
 801694c:	2300      	movs	r3, #0
 801694e:	73bb      	strb	r3, [r7, #14]
 8016950:	e051      	b.n	80169f6 <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	681a      	ldr	r2, [r3, #0]
 8016956:	7bbb      	ldrb	r3, [r7, #14]
 8016958:	4413      	add	r3, r2
 801695a:	7819      	ldrb	r1, [r3, #0]
 801695c:	4b2b      	ldr	r3, [pc, #172]	@ (8016a0c <RegionUS915ApplyCFList+0xe0>)
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	7bfa      	ldrb	r2, [r7, #15]
 8016962:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016966:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801696a:	4b28      	ldr	r3, [pc, #160]	@ (8016a0c <RegionUS915ApplyCFList+0xe0>)
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	7bfa      	ldrb	r2, [r7, #15]
 8016970:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016974:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	681a      	ldr	r2, [r3, #0]
 801697c:	7bbb      	ldrb	r3, [r7, #14]
 801697e:	3301      	adds	r3, #1
 8016980:	4413      	add	r3, r2
 8016982:	781b      	ldrb	r3, [r3, #0]
 8016984:	021b      	lsls	r3, r3, #8
 8016986:	b299      	uxth	r1, r3
 8016988:	4b20      	ldr	r3, [pc, #128]	@ (8016a0c <RegionUS915ApplyCFList+0xe0>)
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	7bfa      	ldrb	r2, [r7, #15]
 801698e:	4301      	orrs	r1, r0
 8016990:	b289      	uxth	r1, r1
 8016992:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016996:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801699a:	7bfb      	ldrb	r3, [r7, #15]
 801699c:	2b04      	cmp	r3, #4
 801699e:	d10f      	bne.n	80169c0 <RegionUS915ApplyCFList+0x94>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 80169a0:	4b1a      	ldr	r3, [pc, #104]	@ (8016a0c <RegionUS915ApplyCFList+0xe0>)
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	7bfa      	ldrb	r2, [r7, #15]
 80169a6:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 80169aa:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80169ae:	4b17      	ldr	r3, [pc, #92]	@ (8016a0c <RegionUS915ApplyCFList+0xe0>)
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	7bfa      	ldrb	r2, [r7, #15]
 80169b4:	b2c9      	uxtb	r1, r1
 80169b6:	b289      	uxth	r1, r1
 80169b8:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 80169bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 80169c0:	4b13      	ldr	r3, [pc, #76]	@ (8016a10 <RegionUS915ApplyCFList+0xe4>)
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	7bfa      	ldrb	r2, [r7, #15]
 80169c6:	3248      	adds	r2, #72	@ 0x48
 80169c8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80169cc:	4b0f      	ldr	r3, [pc, #60]	@ (8016a0c <RegionUS915ApplyCFList+0xe0>)
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	7bfa      	ldrb	r2, [r7, #15]
 80169d2:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 80169d6:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80169da:	4b0d      	ldr	r3, [pc, #52]	@ (8016a10 <RegionUS915ApplyCFList+0xe4>)
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	7bfa      	ldrb	r2, [r7, #15]
 80169e0:	4001      	ands	r1, r0
 80169e2:	b289      	uxth	r1, r1
 80169e4:	3248      	adds	r2, #72	@ 0x48
 80169e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80169ea:	7bfb      	ldrb	r3, [r7, #15]
 80169ec:	3301      	adds	r3, #1
 80169ee:	73fb      	strb	r3, [r7, #15]
 80169f0:	7bbb      	ldrb	r3, [r7, #14]
 80169f2:	3302      	adds	r3, #2
 80169f4:	73bb      	strb	r3, [r7, #14]
 80169f6:	7bfb      	ldrb	r3, [r7, #15]
 80169f8:	2b04      	cmp	r3, #4
 80169fa:	d9aa      	bls.n	8016952 <RegionUS915ApplyCFList+0x26>
 80169fc:	e002      	b.n	8016a04 <RegionUS915ApplyCFList+0xd8>
        return;
 80169fe:	bf00      	nop
 8016a00:	e000      	b.n	8016a04 <RegionUS915ApplyCFList+0xd8>
        return;
 8016a02:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8016a04:	3714      	adds	r7, #20
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bc80      	pop	{r7}
 8016a0a:	4770      	bx	lr
 8016a0c:	20001330 	.word	0x20001330
 8016a10:	2000132c 	.word	0x2000132c

08016a14 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b084      	sub	sp, #16
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	2204      	movs	r2, #4
 8016a22:	2100      	movs	r1, #0
 8016a24:	4618      	mov	r0, r3
 8016a26:	f7fd fc85 	bl	8014334 <RegionCommonCountChannels>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 8016a2e:	7bbb      	ldrb	r3, [r7, #14]
 8016a30:	2b01      	cmp	r3, #1
 8016a32:	d804      	bhi.n	8016a3e <RegionUS915ChanMaskSet+0x2a>
 8016a34:	7bbb      	ldrb	r3, [r7, #14]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d001      	beq.n	8016a3e <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	e04c      	b.n	8016ad8 <RegionUS915ChanMaskSet+0xc4>
    }

    switch( chanMaskSet->ChannelsMaskType )
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	791b      	ldrb	r3, [r3, #4]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d002      	beq.n	8016a4c <RegionUS915ChanMaskSet+0x38>
 8016a46:	2b01      	cmp	r3, #1
 8016a48:	d038      	beq.n	8016abc <RegionUS915ChanMaskSet+0xa8>
 8016a4a:	e042      	b.n	8016ad2 <RegionUS915ChanMaskSet+0xbe>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016a4c:	4b24      	ldr	r3, [pc, #144]	@ (8016ae0 <RegionUS915ChanMaskSet+0xcc>)
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	2206      	movs	r2, #6
 8016a5a:	4619      	mov	r1, r3
 8016a5c:	f7fd fc96 	bl	801438c <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8016a60:	4b1f      	ldr	r3, [pc, #124]	@ (8016ae0 <RegionUS915ChanMaskSet+0xcc>)
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	f8b3 2494 	ldrh.w	r2, [r3, #1172]	@ 0x494
 8016a68:	4b1d      	ldr	r3, [pc, #116]	@ (8016ae0 <RegionUS915ChanMaskSet+0xcc>)
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	b2d2      	uxtb	r2, r2
 8016a6e:	b292      	uxth	r2, r2
 8016a70:	f8a3 2494 	strh.w	r2, [r3, #1172]	@ 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8016a74:	4b1a      	ldr	r3, [pc, #104]	@ (8016ae0 <RegionUS915ChanMaskSet+0xcc>)
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	2200      	movs	r2, #0
 8016a7a:	f8a3 2496 	strh.w	r2, [r3, #1174]	@ 0x496

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8016a7e:	2300      	movs	r3, #0
 8016a80:	73fb      	strb	r3, [r7, #15]
 8016a82:	e017      	b.n	8016ab4 <RegionUS915ChanMaskSet+0xa0>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8016a84:	4b17      	ldr	r3, [pc, #92]	@ (8016ae4 <RegionUS915ChanMaskSet+0xd0>)
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	7bfa      	ldrb	r2, [r7, #15]
 8016a8a:	3248      	adds	r2, #72	@ 0x48
 8016a8c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8016a90:	4b13      	ldr	r3, [pc, #76]	@ (8016ae0 <RegionUS915ChanMaskSet+0xcc>)
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	7bfa      	ldrb	r2, [r7, #15]
 8016a96:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016a9a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8016a9e:	4b11      	ldr	r3, [pc, #68]	@ (8016ae4 <RegionUS915ChanMaskSet+0xd0>)
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	7bfa      	ldrb	r2, [r7, #15]
 8016aa4:	4001      	ands	r1, r0
 8016aa6:	b289      	uxth	r1, r1
 8016aa8:	3248      	adds	r2, #72	@ 0x48
 8016aaa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8016aae:	7bfb      	ldrb	r3, [r7, #15]
 8016ab0:	3301      	adds	r3, #1
 8016ab2:	73fb      	strb	r3, [r7, #15]
 8016ab4:	7bfb      	ldrb	r3, [r7, #15]
 8016ab6:	2b05      	cmp	r3, #5
 8016ab8:	d9e4      	bls.n	8016a84 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8016aba:	e00c      	b.n	8016ad6 <RegionUS915ChanMaskSet+0xc2>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016abc:	4b08      	ldr	r3, [pc, #32]	@ (8016ae0 <RegionUS915ChanMaskSet+0xcc>)
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	f203 408c 	addw	r0, r3, #1164	@ 0x48c
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	2206      	movs	r2, #6
 8016aca:	4619      	mov	r1, r3
 8016acc:	f7fd fc5e 	bl	801438c <RegionCommonChanMaskCopy>
            break;
 8016ad0:	e001      	b.n	8016ad6 <RegionUS915ChanMaskSet+0xc2>
        }
        default:
            return false;
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	e000      	b.n	8016ad8 <RegionUS915ChanMaskSet+0xc4>
    }
    return true;
 8016ad6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8016ad8:	4618      	mov	r0, r3
 8016ada:	3710      	adds	r7, #16
 8016adc:	46bd      	mov	sp, r7
 8016ade:	bd80      	pop	{r7, pc}
 8016ae0:	20001330 	.word	0x20001330
 8016ae4:	2000132c 	.word	0x2000132c

08016ae8 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b088      	sub	sp, #32
 8016aec:	af02      	add	r7, sp, #8
 8016aee:	60ba      	str	r2, [r7, #8]
 8016af0:	607b      	str	r3, [r7, #4]
 8016af2:	4603      	mov	r3, r0
 8016af4:	73fb      	strb	r3, [r7, #15]
 8016af6:	460b      	mov	r3, r1
 8016af8:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 8016afa:	2300      	movs	r3, #0
 8016afc:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8016afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b02:	2b0d      	cmp	r3, #13
 8016b04:	bfa8      	it	ge
 8016b06:	230d      	movge	r3, #13
 8016b08:	b25a      	sxtb	r2, r3
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016b14:	4916      	ldr	r1, [pc, #88]	@ (8016b70 <RegionUS915ComputeRxWindowParameters+0x88>)
 8016b16:	4618      	mov	r0, r3
 8016b18:	f7fe f8d8 	bl	8014ccc <RegionCommonGetBandwidth>
 8016b1c:	4603      	mov	r3, r0
 8016b1e:	b2da      	uxtb	r2, r3
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016b2a:	461a      	mov	r2, r3
 8016b2c:	4b11      	ldr	r3, [pc, #68]	@ (8016b74 <RegionUS915ComputeRxWindowParameters+0x8c>)
 8016b2e:	5c9a      	ldrb	r2, [r3, r2]
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016b36:	4619      	mov	r1, r3
 8016b38:	4b0d      	ldr	r3, [pc, #52]	@ (8016b70 <RegionUS915ComputeRxWindowParameters+0x88>)
 8016b3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016b3e:	4619      	mov	r1, r3
 8016b40:	4610      	mov	r0, r2
 8016b42:	f7fd fe41 	bl	80147c8 <RegionCommonComputeSymbolTimeLoRa>
 8016b46:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016b48:	4b0b      	ldr	r3, [pc, #44]	@ (8016b78 <RegionUS915ComputeRxWindowParameters+0x90>)
 8016b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016b4c:	4798      	blx	r3
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	3308      	adds	r3, #8
 8016b52:	687a      	ldr	r2, [r7, #4]
 8016b54:	320c      	adds	r2, #12
 8016b56:	7bb9      	ldrb	r1, [r7, #14]
 8016b58:	9201      	str	r2, [sp, #4]
 8016b5a:	9300      	str	r3, [sp, #0]
 8016b5c:	4603      	mov	r3, r0
 8016b5e:	68ba      	ldr	r2, [r7, #8]
 8016b60:	6978      	ldr	r0, [r7, #20]
 8016b62:	f7fd fe57 	bl	8014814 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8016b66:	bf00      	nop
 8016b68:	3718      	adds	r7, #24
 8016b6a:	46bd      	mov	sp, r7
 8016b6c:	bd80      	pop	{r7, pc}
 8016b6e:	bf00      	nop
 8016b70:	0801d7f8 	.word	0x0801d7f8
 8016b74:	0801d7e8 	.word	0x0801d7e8
 8016b78:	0801d86c 	.word	0x0801d86c

08016b7c <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016b7c:	b590      	push	{r4, r7, lr}
 8016b7e:	b091      	sub	sp, #68	@ 0x44
 8016b80:	af0a      	add	r7, sp, #40	@ 0x28
 8016b82:	6078      	str	r0, [r7, #4]
 8016b84:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	785b      	ldrb	r3, [r3, #1]
 8016b8a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8016b90:	2300      	movs	r3, #0
 8016b92:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	685b      	ldr	r3, [r3, #4]
 8016b98:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8016b9a:	4b34      	ldr	r3, [pc, #208]	@ (8016c6c <RegionUS915RxConfig+0xf0>)
 8016b9c:	685b      	ldr	r3, [r3, #4]
 8016b9e:	4798      	blx	r3
 8016ba0:	4603      	mov	r3, r0
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d001      	beq.n	8016baa <RegionUS915RxConfig+0x2e>
    {
        return false;
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	e05c      	b.n	8016c64 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	7cdb      	ldrb	r3, [r3, #19]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d109      	bne.n	8016bc6 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	781b      	ldrb	r3, [r3, #0]
 8016bb6:	f003 0307 	and.w	r3, r3, #7
 8016bba:	4a2d      	ldr	r2, [pc, #180]	@ (8016c70 <RegionUS915RxConfig+0xf4>)
 8016bbc:	fb03 f202 	mul.w	r2, r3, r2
 8016bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8016c74 <RegionUS915RxConfig+0xf8>)
 8016bc2:	4413      	add	r3, r2
 8016bc4:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8016bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016bca:	4a2b      	ldr	r2, [pc, #172]	@ (8016c78 <RegionUS915RxConfig+0xfc>)
 8016bcc:	5cd3      	ldrb	r3, [r2, r3]
 8016bce:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8016bd0:	4b26      	ldr	r3, [pc, #152]	@ (8016c6c <RegionUS915RxConfig+0xf0>)
 8016bd2:	68db      	ldr	r3, [r3, #12]
 8016bd4:	6938      	ldr	r0, [r7, #16]
 8016bd6:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016bd8:	4b24      	ldr	r3, [pc, #144]	@ (8016c6c <RegionUS915RxConfig+0xf0>)
 8016bda:	699c      	ldr	r4, [r3, #24]
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	789b      	ldrb	r3, [r3, #2]
 8016be0:	4618      	mov	r0, r3
 8016be2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	689b      	ldr	r3, [r3, #8]
 8016bea:	b29b      	uxth	r3, r3
 8016bec:	687a      	ldr	r2, [r7, #4]
 8016bee:	7c92      	ldrb	r2, [r2, #18]
 8016bf0:	9209      	str	r2, [sp, #36]	@ 0x24
 8016bf2:	2201      	movs	r2, #1
 8016bf4:	9208      	str	r2, [sp, #32]
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	9207      	str	r2, [sp, #28]
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	9206      	str	r2, [sp, #24]
 8016bfe:	2200      	movs	r2, #0
 8016c00:	9205      	str	r2, [sp, #20]
 8016c02:	2200      	movs	r2, #0
 8016c04:	9204      	str	r2, [sp, #16]
 8016c06:	2200      	movs	r2, #0
 8016c08:	9203      	str	r2, [sp, #12]
 8016c0a:	9302      	str	r3, [sp, #8]
 8016c0c:	2308      	movs	r3, #8
 8016c0e:	9301      	str	r3, [sp, #4]
 8016c10:	2300      	movs	r3, #0
 8016c12:	9300      	str	r3, [sp, #0]
 8016c14:	2301      	movs	r3, #1
 8016c16:	460a      	mov	r2, r1
 8016c18:	4601      	mov	r1, r0
 8016c1a:	2001      	movs	r0, #1
 8016c1c:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	7c5b      	ldrb	r3, [r3, #17]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d005      	beq.n	8016c32 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8016c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c2a:	4a14      	ldr	r2, [pc, #80]	@ (8016c7c <RegionUS915RxConfig+0x100>)
 8016c2c:	5cd3      	ldrb	r3, [r2, r3]
 8016c2e:	75fb      	strb	r3, [r7, #23]
 8016c30:	e004      	b.n	8016c3c <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8016c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c36:	4a12      	ldr	r2, [pc, #72]	@ (8016c80 <RegionUS915RxConfig+0x104>)
 8016c38:	5cd3      	ldrb	r3, [r2, r3]
 8016c3a:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8016c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8016c6c <RegionUS915RxConfig+0xf0>)
 8016c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016c40:	7dfa      	ldrb	r2, [r7, #23]
 8016c42:	320d      	adds	r2, #13
 8016c44:	b2d2      	uxtb	r2, r2
 8016c46:	4611      	mov	r1, r2
 8016c48:	2001      	movs	r0, #1
 8016c4a:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	7cdb      	ldrb	r3, [r3, #19]
 8016c50:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016c54:	6939      	ldr	r1, [r7, #16]
 8016c56:	4618      	mov	r0, r3
 8016c58:	f7fe f856 	bl	8014d08 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8016c5c:	683b      	ldr	r3, [r7, #0]
 8016c5e:	7bfa      	ldrb	r2, [r7, #15]
 8016c60:	701a      	strb	r2, [r3, #0]
    return true;
 8016c62:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8016c64:	4618      	mov	r0, r3
 8016c66:	371c      	adds	r7, #28
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd90      	pop	{r4, r7, pc}
 8016c6c:	0801d86c 	.word	0x0801d86c
 8016c70:	000927c0 	.word	0x000927c0
 8016c74:	370870a0 	.word	0x370870a0
 8016c78:	0801d7e8 	.word	0x0801d7e8
 8016c7c:	0801d85c 	.word	0x0801d85c
 8016c80:	0801d84c 	.word	0x0801d84c

08016c84 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016c84:	b590      	push	{r4, r7, lr}
 8016c86:	b093      	sub	sp, #76	@ 0x4c
 8016c88:	af0a      	add	r7, sp, #40	@ 0x28
 8016c8a:	60f8      	str	r0, [r7, #12]
 8016c8c:	60b9      	str	r1, [r7, #8]
 8016c8e:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016c96:	461a      	mov	r2, r3
 8016c98:	4b4a      	ldr	r3, [pc, #296]	@ (8016dc4 <RegionUS915TxConfig+0x140>)
 8016c9a:	5c9b      	ldrb	r3, [r3, r2]
 8016c9c:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016ca4:	4b48      	ldr	r3, [pc, #288]	@ (8016dc8 <RegionUS915TxConfig+0x144>)
 8016ca6:	681a      	ldr	r2, [r3, #0]
 8016ca8:	4b48      	ldr	r3, [pc, #288]	@ (8016dcc <RegionUS915TxConfig+0x148>)
 8016caa:	6819      	ldr	r1, [r3, #0]
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	781b      	ldrb	r3, [r3, #0]
 8016cb0:	461c      	mov	r4, r3
 8016cb2:	4623      	mov	r3, r4
 8016cb4:	005b      	lsls	r3, r3, #1
 8016cb6:	4423      	add	r3, r4
 8016cb8:	009b      	lsls	r3, r3, #2
 8016cba:	440b      	add	r3, r1
 8016cbc:	3309      	adds	r3, #9
 8016cbe:	781b      	ldrb	r3, [r3, #0]
 8016cc0:	4619      	mov	r1, r3
 8016cc2:	460b      	mov	r3, r1
 8016cc4:	005b      	lsls	r3, r3, #1
 8016cc6:	440b      	add	r3, r1
 8016cc8:	00db      	lsls	r3, r3, #3
 8016cca:	4413      	add	r3, r2
 8016ccc:	3302      	adds	r3, #2
 8016cce:	f993 1000 	ldrsb.w	r1, [r3]
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8016cd8:	4b3c      	ldr	r3, [pc, #240]	@ (8016dcc <RegionUS915TxConfig+0x148>)
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8016ce0:	f7ff fa52 	bl	8016188 <LimitTxPower>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	77bb      	strb	r3, [r7, #30]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016cee:	4938      	ldr	r1, [pc, #224]	@ (8016dd0 <RegionUS915TxConfig+0x14c>)
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	f7fd ffeb 	bl	8014ccc <RegionCommonGetBandwidth>
 8016cf6:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8016cfc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016d00:	f04f 0200 	mov.w	r2, #0
 8016d04:	4933      	ldr	r1, [pc, #204]	@ (8016dd4 <RegionUS915TxConfig+0x150>)
 8016d06:	4618      	mov	r0, r3
 8016d08:	f7fd fe3c 	bl	8014984 <RegionCommonComputeTxPower>
 8016d0c:	4603      	mov	r3, r0
 8016d0e:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8016d10:	4b31      	ldr	r3, [pc, #196]	@ (8016dd8 <RegionUS915TxConfig+0x154>)
 8016d12:	68da      	ldr	r2, [r3, #12]
 8016d14:	4b2d      	ldr	r3, [pc, #180]	@ (8016dcc <RegionUS915TxConfig+0x148>)
 8016d16:	6819      	ldr	r1, [r3, #0]
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	781b      	ldrb	r3, [r3, #0]
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	4603      	mov	r3, r0
 8016d20:	005b      	lsls	r3, r3, #1
 8016d22:	4403      	add	r3, r0
 8016d24:	009b      	lsls	r3, r3, #2
 8016d26:	440b      	add	r3, r1
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8016d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8016dd8 <RegionUS915TxConfig+0x154>)
 8016d30:	69dc      	ldr	r4, [r3, #28]
 8016d32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016d36:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016d3a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8016d3e:	9208      	str	r2, [sp, #32]
 8016d40:	2200      	movs	r2, #0
 8016d42:	9207      	str	r2, [sp, #28]
 8016d44:	2200      	movs	r2, #0
 8016d46:	9206      	str	r2, [sp, #24]
 8016d48:	2200      	movs	r2, #0
 8016d4a:	9205      	str	r2, [sp, #20]
 8016d4c:	2201      	movs	r2, #1
 8016d4e:	9204      	str	r2, [sp, #16]
 8016d50:	2200      	movs	r2, #0
 8016d52:	9203      	str	r2, [sp, #12]
 8016d54:	2208      	movs	r2, #8
 8016d56:	9202      	str	r2, [sp, #8]
 8016d58:	2201      	movs	r2, #1
 8016d5a:	9201      	str	r2, [sp, #4]
 8016d5c:	9300      	str	r3, [sp, #0]
 8016d5e:	69bb      	ldr	r3, [r7, #24]
 8016d60:	2200      	movs	r2, #0
 8016d62:	2001      	movs	r0, #1
 8016d64:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8016d66:	4b19      	ldr	r3, [pc, #100]	@ (8016dcc <RegionUS915TxConfig+0x148>)
 8016d68:	681a      	ldr	r2, [r3, #0]
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	781b      	ldrb	r3, [r3, #0]
 8016d6e:	4619      	mov	r1, r3
 8016d70:	460b      	mov	r3, r1
 8016d72:	005b      	lsls	r3, r3, #1
 8016d74:	440b      	add	r3, r1
 8016d76:	009b      	lsls	r3, r3, #2
 8016d78:	4413      	add	r3, r2
 8016d7a:	681a      	ldr	r2, [r3, #0]
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016d82:	4619      	mov	r1, r3
 8016d84:	4610      	mov	r0, r2
 8016d86:	f7fd fff1 	bl	8014d6c <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8016d8a:	4b13      	ldr	r3, [pc, #76]	@ (8016dd8 <RegionUS915TxConfig+0x154>)
 8016d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016d8e:	68fa      	ldr	r2, [r7, #12]
 8016d90:	8992      	ldrh	r2, [r2, #12]
 8016d92:	b2d2      	uxtb	r2, r2
 8016d94:	4611      	mov	r1, r2
 8016d96:	2001      	movs	r0, #1
 8016d98:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	899b      	ldrh	r3, [r3, #12]
 8016da4:	4619      	mov	r1, r3
 8016da6:	4610      	mov	r0, r2
 8016da8:	f7ff fa68 	bl	801627c <GetTimeOnAir>
 8016dac:	4602      	mov	r2, r0
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8016db2:	68bb      	ldr	r3, [r7, #8]
 8016db4:	7fba      	ldrb	r2, [r7, #30]
 8016db6:	701a      	strb	r2, [r3, #0]
    return true;
 8016db8:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8016dba:	4618      	mov	r0, r3
 8016dbc:	3724      	adds	r7, #36	@ 0x24
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	bd90      	pop	{r4, r7, pc}
 8016dc2:	bf00      	nop
 8016dc4:	0801d7e8 	.word	0x0801d7e8
 8016dc8:	2000132c 	.word	0x2000132c
 8016dcc:	20001330 	.word	0x20001330
 8016dd0:	0801d7f8 	.word	0x0801d7f8
 8016dd4:	41f00000 	.word	0x41f00000
 8016dd8:	0801d86c 	.word	0x0801d86c

08016ddc <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016ddc:	b590      	push	{r4, r7, lr}
 8016dde:	b097      	sub	sp, #92	@ 0x5c
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	60f8      	str	r0, [r7, #12]
 8016de4:	60b9      	str	r1, [r7, #8]
 8016de6:	607a      	str	r2, [r7, #4]
 8016de8:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8016dea:	2307      	movs	r3, #7
 8016dec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8016df0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8016df4:	2200      	movs	r2, #0
 8016df6:	601a      	str	r2, [r3, #0]
 8016df8:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    uint8_t bytesProcessed = 0;
 8016e00:	2300      	movs	r3, #0
 8016e02:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 8016e06:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	601a      	str	r2, [r3, #0]
 8016e0e:	605a      	str	r2, [r3, #4]
 8016e10:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8016e12:	4b97      	ldr	r3, [pc, #604]	@ (8017070 <RegionUS915LinkAdrReq+0x294>)
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	f503 6190 	add.w	r1, r3, #1152	@ 0x480
 8016e1a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8016e1e:	2206      	movs	r2, #6
 8016e20:	4618      	mov	r0, r3
 8016e22:	f7fd fab3 	bl	801438c <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016e26:	e11b      	b.n	8017060 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	685a      	ldr	r2, [r3, #4]
 8016e2c:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8016e30:	4413      	add	r3, r2
 8016e32:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8016e36:	4611      	mov	r1, r2
 8016e38:	4618      	mov	r0, r3
 8016e3a:	f7fd fbeb 	bl	8014614 <RegionCommonParseLinkAdrReq>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        if( nextIndex == 0 )
 8016e44:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	f000 8113 	beq.w	8017074 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016e4e:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8016e52:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8016e56:	4413      	add	r3, r2
 8016e58:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016e5c:	2307      	movs	r3, #7
 8016e5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 8016e62:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8016e66:	2b06      	cmp	r3, #6
 8016e68:	d116      	bne.n	8016e98 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8016e6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016e6e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0xFFFF;
 8016e72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016e76:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0xFFFF;
 8016e7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016e7e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0xFFFF;
 8016e82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016e86:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8016e8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8016e8e:	b2db      	uxtb	r3, r3
 8016e90:	b29b      	uxth	r3, r3
 8016e92:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8016e96:	e0e3      	b.n	8017060 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8016e98:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8016e9c:	2b07      	cmp	r3, #7
 8016e9e:	d112      	bne.n	8016ec6 <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0x0000;
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0x0000;
 8016eac:	2300      	movs	r3, #0
 8016eae:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0x0000;
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8016eb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8016ebc:	b2db      	uxtb	r3, r3
 8016ebe:	b29b      	uxth	r3, r3
 8016ec0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8016ec4:	e0cc      	b.n	8017060 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8016ec6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8016eca:	2b05      	cmp	r3, #5
 8016ecc:	f040 80bf 	bne.w	801704e <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8016ed0:	2301      	movs	r3, #1
 8016ed2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8016edc:	2300      	movs	r3, #0
 8016ede:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8016ee2:	e0ae      	b.n	8017042 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8016ee4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8016ee8:	b2da      	uxtb	r2, r3
 8016eea:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8016eee:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8016ef6:	4013      	ands	r3, r2
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d04d      	beq.n	8016f98 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8016efc:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016f00:	f003 0301 	and.w	r3, r3, #1
 8016f04:	b2db      	uxtb	r3, r3
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d120      	bne.n	8016f4c <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 8016f0a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016f0e:	005b      	lsls	r3, r3, #1
 8016f10:	3358      	adds	r3, #88	@ 0x58
 8016f12:	443b      	add	r3, r7
 8016f14:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8016f18:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016f1c:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 8016f20:	b292      	uxth	r2, r2
 8016f22:	005b      	lsls	r3, r3, #1
 8016f24:	3358      	adds	r3, #88	@ 0x58
 8016f26:	443b      	add	r3, r7
 8016f28:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8016f2c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8016f30:	b21a      	sxth	r2, r3
 8016f32:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8016f36:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8016f3e:	b21b      	sxth	r3, r3
 8016f40:	4313      	orrs	r3, r2
 8016f42:	b21b      	sxth	r3, r3
 8016f44:	b29b      	uxth	r3, r3
 8016f46:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8016f4a:	e075      	b.n	8017038 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8016f4c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016f50:	005b      	lsls	r3, r3, #1
 8016f52:	3358      	adds	r3, #88	@ 0x58
 8016f54:	443b      	add	r3, r7
 8016f56:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8016f5a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016f5e:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 8016f62:	b292      	uxth	r2, r2
 8016f64:	005b      	lsls	r3, r3, #1
 8016f66:	3358      	adds	r3, #88	@ 0x58
 8016f68:	443b      	add	r3, r7
 8016f6a:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8016f6e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8016f72:	b21a      	sxth	r2, r3
 8016f74:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8016f78:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8016f80:	b21b      	sxth	r3, r3
 8016f82:	4313      	orrs	r3, r2
 8016f84:	b21b      	sxth	r3, r3
 8016f86:	b29b      	uxth	r3, r3
 8016f88:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8016f8c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016f90:	3301      	adds	r3, #1
 8016f92:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8016f96:	e04f      	b.n	8017038 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 8016f98:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016f9c:	f003 0301 	and.w	r3, r3, #1
 8016fa0:	b2db      	uxtb	r3, r3
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d122      	bne.n	8016fec <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 8016fa6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016faa:	005b      	lsls	r3, r3, #1
 8016fac:	3358      	adds	r3, #88	@ 0x58
 8016fae:	443b      	add	r3, r7
 8016fb0:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8016fb4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016fb8:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8016fbc:	b292      	uxth	r2, r2
 8016fbe:	005b      	lsls	r3, r3, #1
 8016fc0:	3358      	adds	r3, #88	@ 0x58
 8016fc2:	443b      	add	r3, r7
 8016fc4:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8016fc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8016fcc:	b21a      	sxth	r2, r3
 8016fce:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8016fd2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8016fda:	b21b      	sxth	r3, r3
 8016fdc:	43db      	mvns	r3, r3
 8016fde:	b21b      	sxth	r3, r3
 8016fe0:	4013      	ands	r3, r2
 8016fe2:	b21b      	sxth	r3, r3
 8016fe4:	b29b      	uxth	r3, r3
 8016fe6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8016fea:	e025      	b.n	8017038 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8016fec:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016ff0:	005b      	lsls	r3, r3, #1
 8016ff2:	3358      	adds	r3, #88	@ 0x58
 8016ff4:	443b      	add	r3, r7
 8016ff6:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8016ffa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016ffe:	b2d2      	uxtb	r2, r2
 8017000:	b292      	uxth	r2, r2
 8017002:	005b      	lsls	r3, r3, #1
 8017004:	3358      	adds	r3, #88	@ 0x58
 8017006:	443b      	add	r3, r7
 8017008:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801700c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8017010:	b21a      	sxth	r2, r3
 8017012:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8017016:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801701a:	fa01 f303 	lsl.w	r3, r1, r3
 801701e:	b21b      	sxth	r3, r3
 8017020:	43db      	mvns	r3, r3
 8017022:	b21b      	sxth	r3, r3
 8017024:	4013      	ands	r3, r2
 8017026:	b21b      	sxth	r3, r3
 8017028:	b29b      	uxth	r3, r3
 801702a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801702e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8017032:	3301      	adds	r3, #1
 8017034:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8017038:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801703c:	3301      	adds	r3, #1
 801703e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8017042:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017046:	2b07      	cmp	r3, #7
 8017048:	f67f af4c 	bls.w	8016ee4 <RegionUS915LinkAdrReq+0x108>
 801704c:	e008      	b.n	8017060 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801704e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8017052:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8017056:	005b      	lsls	r3, r3, #1
 8017058:	3358      	adds	r3, #88	@ 0x58
 801705a:	443b      	add	r3, r7
 801705c:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	7a1b      	ldrb	r3, [r3, #8]
 8017064:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8017068:	429a      	cmp	r2, r3
 801706a:	f4ff aedd 	bcc.w	8016e28 <RegionUS915LinkAdrReq+0x4c>
 801706e:	e002      	b.n	8017076 <RegionUS915LinkAdrReq+0x29a>
 8017070:	20001330 	.word	0x20001330
            break; // break loop, since no more request has been found
 8017074:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8017076:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 801707a:	2b03      	cmp	r3, #3
 801707c:	dc0f      	bgt.n	801709e <RegionUS915LinkAdrReq+0x2c2>
 801707e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8017082:	2204      	movs	r2, #4
 8017084:	2100      	movs	r1, #0
 8017086:	4618      	mov	r0, r3
 8017088:	f7fd f954 	bl	8014334 <RegionCommonCountChannels>
 801708c:	4603      	mov	r3, r0
 801708e:	2b01      	cmp	r3, #1
 8017090:	d805      	bhi.n	801709e <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8017092:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8017096:	f023 0301 	bic.w	r3, r3, #1
 801709a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801709e:	2302      	movs	r3, #2
 80170a0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	7a5b      	ldrb	r3, [r3, #9]
 80170a8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 80170ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80170b0:	4618      	mov	r0, r3
 80170b2:	f7ff f913 	bl	80162dc <RegionUS915GetPhyParam>
 80170b6:	4603      	mov	r3, r0
 80170b8:	637b      	str	r3, [r7, #52]	@ 0x34

    linkAdrVerifyParams.Status = status;
 80170ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80170be:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	7a9b      	ldrb	r3, [r3, #10]
 80170c4:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80170c6:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80170ca:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80170cc:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 80170d0:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80170d2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80170d6:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80170de:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80170e6:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	7b5b      	ldrb	r3, [r3, #13]
 80170ec:	b25b      	sxtb	r3, r3
 80170ee:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 80170f0:	2348      	movs	r3, #72	@ 0x48
 80170f2:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 80170f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80170fa:	627b      	str	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80170fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170fe:	b25b      	sxtb	r3, r3
 8017100:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8017104:	2304      	movs	r3, #4
 8017106:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801710a:	4b44      	ldr	r3, [pc, #272]	@ (801721c <RegionUS915LinkAdrReq+0x440>)
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8017110:	230e      	movs	r3, #14
 8017112:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8017116:	2300      	movs	r3, #0
 8017118:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8017122:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8017126:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801712a:	1c9a      	adds	r2, r3, #2
 801712c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8017130:	1c59      	adds	r1, r3, #1
 8017132:	f107 0014 	add.w	r0, r7, #20
 8017136:	4623      	mov	r3, r4
 8017138:	f7fd fabd 	bl	80146b6 <RegionCommonLinkAdrReqVerifyParams>
 801713c:	4603      	mov	r3, r0
 801713e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8017142:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8017146:	2b07      	cmp	r3, #7
 8017148:	d151      	bne.n	80171ee <RegionUS915LinkAdrReq+0x412>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801714a:	4b34      	ldr	r3, [pc, #208]	@ (801721c <RegionUS915LinkAdrReq+0x440>)
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8017152:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8017156:	2206      	movs	r2, #6
 8017158:	4618      	mov	r0, r3
 801715a:	f7fd f917 	bl	801438c <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801715e:	4b30      	ldr	r3, [pc, #192]	@ (8017220 <RegionUS915LinkAdrReq+0x444>)
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	f8b3 1090 	ldrh.w	r1, [r3, #144]	@ 0x90
 8017166:	4b2d      	ldr	r3, [pc, #180]	@ (801721c <RegionUS915LinkAdrReq+0x440>)
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 801716e:	4b2c      	ldr	r3, [pc, #176]	@ (8017220 <RegionUS915LinkAdrReq+0x444>)
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	400a      	ands	r2, r1
 8017174:	b292      	uxth	r2, r2
 8017176:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801717a:	4b29      	ldr	r3, [pc, #164]	@ (8017220 <RegionUS915LinkAdrReq+0x444>)
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	f8b3 1092 	ldrh.w	r1, [r3, #146]	@ 0x92
 8017182:	4b26      	ldr	r3, [pc, #152]	@ (801721c <RegionUS915LinkAdrReq+0x440>)
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	f8b3 2482 	ldrh.w	r2, [r3, #1154]	@ 0x482
 801718a:	4b25      	ldr	r3, [pc, #148]	@ (8017220 <RegionUS915LinkAdrReq+0x444>)
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	400a      	ands	r2, r1
 8017190:	b292      	uxth	r2, r2
 8017192:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8017196:	4b22      	ldr	r3, [pc, #136]	@ (8017220 <RegionUS915LinkAdrReq+0x444>)
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	f8b3 1094 	ldrh.w	r1, [r3, #148]	@ 0x94
 801719e:	4b1f      	ldr	r3, [pc, #124]	@ (801721c <RegionUS915LinkAdrReq+0x440>)
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	f8b3 2484 	ldrh.w	r2, [r3, #1156]	@ 0x484
 80171a6:	4b1e      	ldr	r3, [pc, #120]	@ (8017220 <RegionUS915LinkAdrReq+0x444>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	400a      	ands	r2, r1
 80171ac:	b292      	uxth	r2, r2
 80171ae:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 80171b2:	4b1b      	ldr	r3, [pc, #108]	@ (8017220 <RegionUS915LinkAdrReq+0x444>)
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	f8b3 1096 	ldrh.w	r1, [r3, #150]	@ 0x96
 80171ba:	4b18      	ldr	r3, [pc, #96]	@ (801721c <RegionUS915LinkAdrReq+0x440>)
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	f8b3 2486 	ldrh.w	r2, [r3, #1158]	@ 0x486
 80171c2:	4b17      	ldr	r3, [pc, #92]	@ (8017220 <RegionUS915LinkAdrReq+0x444>)
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	400a      	ands	r2, r1
 80171c8:	b292      	uxth	r2, r2
 80171ca:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 80171ce:	4b13      	ldr	r3, [pc, #76]	@ (801721c <RegionUS915LinkAdrReq+0x440>)
 80171d0:	681a      	ldr	r2, [r3, #0]
 80171d2:	4b13      	ldr	r3, [pc, #76]	@ (8017220 <RegionUS915LinkAdrReq+0x444>)
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	@ 0x488
 80171da:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 80171de:	4b0f      	ldr	r3, [pc, #60]	@ (801721c <RegionUS915LinkAdrReq+0x440>)
 80171e0:	681a      	ldr	r2, [r3, #0]
 80171e2:	4b0f      	ldr	r3, [pc, #60]	@ (8017220 <RegionUS915LinkAdrReq+0x444>)
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	f8b2 248a 	ldrh.w	r2, [r2, #1162]	@ 0x48a
 80171ea:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80171ee:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 80171f2:	68bb      	ldr	r3, [r7, #8]
 80171f4:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80171f6:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80171fe:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017206:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017208:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 801720c:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 801720e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8017212:	4618      	mov	r0, r3
 8017214:	375c      	adds	r7, #92	@ 0x5c
 8017216:	46bd      	mov	sp, r7
 8017218:	bd90      	pop	{r4, r7, pc}
 801721a:	bf00      	nop
 801721c:	20001330 	.word	0x20001330
 8017220:	2000132c 	.word	0x2000132c

08017224 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017224:	b580      	push	{r7, lr}
 8017226:	b084      	sub	sp, #16
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801722c:	2307      	movs	r3, #7
 801722e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	685b      	ldr	r3, [r3, #4]
 8017234:	4618      	mov	r0, r3
 8017236:	f7fe ffdd 	bl	80161f4 <VerifyRfFreq>
 801723a:	4603      	mov	r3, r0
 801723c:	f083 0301 	eor.w	r3, r3, #1
 8017240:	b2db      	uxtb	r3, r3
 8017242:	2b00      	cmp	r3, #0
 8017244:	d003      	beq.n	801724e <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8017246:	7bfb      	ldrb	r3, [r7, #15]
 8017248:	f023 0301 	bic.w	r3, r3, #1
 801724c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	f993 3000 	ldrsb.w	r3, [r3]
 8017254:	220d      	movs	r2, #13
 8017256:	2108      	movs	r1, #8
 8017258:	4618      	mov	r0, r3
 801725a:	f7fd f81a 	bl	8014292 <RegionCommonValueInRange>
 801725e:	4603      	mov	r3, r0
 8017260:	2b00      	cmp	r3, #0
 8017262:	d103      	bne.n	801726c <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8017264:	7bfb      	ldrb	r3, [r7, #15]
 8017266:	f023 0302 	bic.w	r3, r3, #2
 801726a:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	f993 3000 	ldrsb.w	r3, [r3]
 8017272:	2207      	movs	r2, #7
 8017274:	2105      	movs	r1, #5
 8017276:	4618      	mov	r0, r3
 8017278:	f7fd f80b 	bl	8014292 <RegionCommonValueInRange>
 801727c:	4603      	mov	r3, r0
 801727e:	2b01      	cmp	r3, #1
 8017280:	d004      	beq.n	801728c <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8017288:	2b0d      	cmp	r3, #13
 801728a:	dd03      	ble.n	8017294 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 801728c:	7bfb      	ldrb	r3, [r7, #15]
 801728e:	f023 0302 	bic.w	r3, r3, #2
 8017292:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801729a:	2203      	movs	r2, #3
 801729c:	2100      	movs	r1, #0
 801729e:	4618      	mov	r0, r3
 80172a0:	f7fc fff7 	bl	8014292 <RegionCommonValueInRange>
 80172a4:	4603      	mov	r3, r0
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d103      	bne.n	80172b2 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80172aa:	7bfb      	ldrb	r3, [r7, #15]
 80172ac:	f023 0304 	bic.w	r3, r3, #4
 80172b0:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 80172b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80172b4:	4618      	mov	r0, r3
 80172b6:	3710      	adds	r7, #16
 80172b8:	46bd      	mov	sp, r7
 80172ba:	bd80      	pop	{r7, pc}

080172bc <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80172bc:	b480      	push	{r7}
 80172be:	b083      	sub	sp, #12
 80172c0:	af00      	add	r7, sp, #0
 80172c2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80172c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80172c8:	4618      	mov	r0, r3
 80172ca:	370c      	adds	r7, #12
 80172cc:	46bd      	mov	sp, r7
 80172ce:	bc80      	pop	{r7}
 80172d0:	4770      	bx	lr

080172d2 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80172d2:	b480      	push	{r7}
 80172d4:	b083      	sub	sp, #12
 80172d6:	af00      	add	r7, sp, #0
 80172d8:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80172da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80172de:	4618      	mov	r0, r3
 80172e0:	370c      	adds	r7, #12
 80172e2:	46bd      	mov	sp, r7
 80172e4:	bc80      	pop	{r7}
 80172e6:	4770      	bx	lr

080172e8 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80172e8:	b480      	push	{r7}
 80172ea:	b083      	sub	sp, #12
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80172f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80172f4:	4618      	mov	r0, r3
 80172f6:	370c      	adds	r7, #12
 80172f8:	46bd      	mov	sp, r7
 80172fa:	bc80      	pop	{r7}
 80172fc:	4770      	bx	lr
	...

08017300 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8017300:	b480      	push	{r7}
 8017302:	b083      	sub	sp, #12
 8017304:	af00      	add	r7, sp, #0
 8017306:	4603      	mov	r3, r0
 8017308:	460a      	mov	r2, r1
 801730a:	71fb      	strb	r3, [r7, #7]
 801730c:	4613      	mov	r3, r2
 801730e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8017310:	79bb      	ldrb	r3, [r7, #6]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d108      	bne.n	8017328 <RegionUS915AlternateDr+0x28>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8017316:	4b16      	ldr	r3, [pc, #88]	@ (8017370 <RegionUS915AlternateDr+0x70>)
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 801731e:	3201      	adds	r2, #1
 8017320:	b2d2      	uxtb	r2, r2
 8017322:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
 8017326:	e007      	b.n	8017338 <RegionUS915AlternateDr+0x38>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8017328:	4b11      	ldr	r3, [pc, #68]	@ (8017370 <RegionUS915AlternateDr+0x70>)
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8017330:	3a01      	subs	r2, #1
 8017332:	b2d2      	uxtb	r2, r2
 8017334:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8017338:	4b0d      	ldr	r3, [pc, #52]	@ (8017370 <RegionUS915AlternateDr+0x70>)
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8017340:	4b0c      	ldr	r3, [pc, #48]	@ (8017374 <RegionUS915AlternateDr+0x74>)
 8017342:	fba3 1302 	umull	r1, r3, r3, r2
 8017346:	0859      	lsrs	r1, r3, #1
 8017348:	460b      	mov	r3, r1
 801734a:	00db      	lsls	r3, r3, #3
 801734c:	440b      	add	r3, r1
 801734e:	1ad3      	subs	r3, r2, r3
 8017350:	b2db      	uxtb	r3, r3
 8017352:	2b00      	cmp	r3, #0
 8017354:	d102      	bne.n	801735c <RegionUS915AlternateDr+0x5c>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8017356:	2304      	movs	r3, #4
 8017358:	71fb      	strb	r3, [r7, #7]
 801735a:	e001      	b.n	8017360 <RegionUS915AlternateDr+0x60>
    }
    else
    {
        currentDr = DR_0;
 801735c:	2300      	movs	r3, #0
 801735e:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8017360:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8017364:	4618      	mov	r0, r3
 8017366:	370c      	adds	r7, #12
 8017368:	46bd      	mov	sp, r7
 801736a:	bc80      	pop	{r7}
 801736c:	4770      	bx	lr
 801736e:	bf00      	nop
 8017370:	2000132c 	.word	0x2000132c
 8017374:	38e38e39 	.word	0x38e38e39

08017378 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b0a8      	sub	sp, #160	@ 0xa0
 801737c:	af02      	add	r7, sp, #8
 801737e:	60f8      	str	r0, [r7, #12]
 8017380:	60b9      	str	r1, [r7, #8]
 8017382:	607a      	str	r2, [r7, #4]
 8017384:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8017386:	2300      	movs	r3, #0
 8017388:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
    uint8_t nbRestrictedChannels = 0;
 801738c:	2300      	movs	r3, #0
 801738e:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8017392:	2300      	movs	r3, #0
 8017394:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017396:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801739a:	2244      	movs	r2, #68	@ 0x44
 801739c:	2100      	movs	r1, #0
 801739e:	4618      	mov	r0, r3
 80173a0:	f005 fa2e 	bl	801c800 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80173a4:	230c      	movs	r3, #12
 80173a6:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 80173aa:	4b6b      	ldr	r3, [pc, #428]	@ (8017558 <RegionUS915NextChannel+0x1e0>)
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	3390      	adds	r3, #144	@ 0x90
 80173b0:	2204      	movs	r2, #4
 80173b2:	2100      	movs	r1, #0
 80173b4:	4618      	mov	r0, r3
 80173b6:	f7fc ffbd 	bl	8014334 <RegionCommonCountChannels>
 80173ba:	4603      	mov	r3, r0
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d110      	bne.n	80173e2 <RegionUS915NextChannel+0x6a>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 80173c0:	4b65      	ldr	r3, [pc, #404]	@ (8017558 <RegionUS915NextChannel+0x1e0>)
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80173c8:	4b64      	ldr	r3, [pc, #400]	@ (801755c <RegionUS915NextChannel+0x1e4>)
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80173d0:	2204      	movs	r2, #4
 80173d2:	4619      	mov	r1, r3
 80173d4:	f7fc ffda 	bl	801438c <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80173d8:	4b5f      	ldr	r3, [pc, #380]	@ (8017558 <RegionUS915NextChannel+0x1e0>)
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	2200      	movs	r2, #0
 80173de:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80173e8:	2b03      	cmp	r3, #3
 80173ea:	dd0e      	ble.n	801740a <RegionUS915NextChannel+0x92>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 80173ec:	4b5a      	ldr	r3, [pc, #360]	@ (8017558 <RegionUS915NextChannel+0x1e0>)
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 80173f4:	b2db      	uxtb	r3, r3
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d107      	bne.n	801740a <RegionUS915NextChannel+0x92>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 80173fa:	4b58      	ldr	r3, [pc, #352]	@ (801755c <RegionUS915NextChannel+0x1e4>)
 80173fc:	681a      	ldr	r2, [r3, #0]
 80173fe:	4b56      	ldr	r3, [pc, #344]	@ (8017558 <RegionUS915NextChannel+0x1e0>)
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	@ 0x488
 8017406:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	7a5b      	ldrb	r3, [r3, #9]
 801740e:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017416:	b2db      	uxtb	r3, r3
 8017418:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801741a:	4b4f      	ldr	r3, [pc, #316]	@ (8017558 <RegionUS915NextChannel+0x1e0>)
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	3390      	adds	r3, #144	@ 0x90
 8017420:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8017422:	4b4e      	ldr	r3, [pc, #312]	@ (801755c <RegionUS915NextChannel+0x1e4>)
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8017428:	4b4b      	ldr	r3, [pc, #300]	@ (8017558 <RegionUS915NextChannel+0x1e0>)
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801742e:	2348      	movs	r3, #72	@ 0x48
 8017430:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = NULL;
 8017432:	2300      	movs	r3, #0
 8017434:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	685b      	ldr	r3, [r3, #4]
 8017440:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	7a9b      	ldrb	r3, [r3, #10]
 8017446:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 801744a:	2301      	movs	r3, #1
 801744c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8017450:	68fa      	ldr	r2, [r7, #12]
 8017452:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8017456:	320c      	adds	r2, #12
 8017458:	e892 0003 	ldmia.w	r2, {r0, r1}
 801745c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	7d1b      	ldrb	r3, [r3, #20]
 8017464:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	8adb      	ldrh	r3, [r3, #22]
 8017472:	4619      	mov	r1, r3
 8017474:	4610      	mov	r0, r2
 8017476:	f7fe ff01 	bl	801627c <GetTimeOnAir>
 801747a:	4603      	mov	r3, r0
 801747c:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801747e:	f107 0314 	add.w	r3, r7, #20
 8017482:	64bb      	str	r3, [r7, #72]	@ 0x48
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8017484:	f107 0195 	add.w	r1, r7, #149	@ 0x95
 8017488:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801748c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	9301      	str	r3, [sp, #4]
 8017494:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8017498:	9300      	str	r3, [sp, #0]
 801749a:	460b      	mov	r3, r1
 801749c:	6839      	ldr	r1, [r7, #0]
 801749e:	f7fd fb60 	bl	8014b62 <RegionCommonIdentifyChannels>
 80174a2:	4603      	mov	r3, r0
 80174a4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80174a8:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d14d      	bne.n	801754c <RegionUS915NextChannel+0x1d4>
    {
        if( nextChanParams->Joined == true )
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	7a5b      	ldrb	r3, [r3, #9]
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d00e      	beq.n	80174d6 <RegionUS915NextChannel+0x15e>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80174b8:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80174bc:	3b01      	subs	r3, #1
 80174be:	4619      	mov	r1, r3
 80174c0:	2000      	movs	r0, #0
 80174c2:	f000 f8f5 	bl	80176b0 <randr>
 80174c6:	4603      	mov	r3, r0
 80174c8:	3398      	adds	r3, #152	@ 0x98
 80174ca:	443b      	add	r3, r7
 80174cc:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 80174d0:	68bb      	ldr	r3, [r7, #8]
 80174d2:	701a      	strb	r2, [r3, #0]
 80174d4:	e030      	b.n	8017538 <RegionUS915NextChannel+0x1c0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d10f      	bne.n	8017500 <RegionUS915NextChannel+0x188>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 80174e0:	4b1d      	ldr	r3, [pc, #116]	@ (8017558 <RegionUS915NextChannel+0x1e0>)
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	f103 0090 	add.w	r0, r3, #144	@ 0x90
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 80174e8:	4b1b      	ldr	r3, [pc, #108]	@ (8017558 <RegionUS915NextChannel+0x1e0>)
 80174ea:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 80174ec:	339c      	adds	r3, #156	@ 0x9c
 80174ee:	68ba      	ldr	r2, [r7, #8]
 80174f0:	4619      	mov	r1, r3
 80174f2:	f7fc fc89 	bl	8013e08 <RegionBaseUSComputeNext125kHzJoinChannel>
 80174f6:	4603      	mov	r3, r0
 80174f8:	2b03      	cmp	r3, #3
 80174fa:	d11d      	bne.n	8017538 <RegionUS915NextChannel+0x1c0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 80174fc:	2303      	movs	r3, #3
 80174fe:	e027      	b.n	8017550 <RegionUS915NextChannel+0x1d8>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8017500:	2300      	movs	r3, #0
 8017502:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8017506:	e004      	b.n	8017512 <RegionUS915NextChannel+0x19a>
                {
                    i++;
 8017508:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801750c:	3301      	adds	r3, #1
 801750e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8017512:	4b11      	ldr	r3, [pc, #68]	@ (8017558 <RegionUS915NextChannel+0x1e0>)
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 801751a:	b2da      	uxtb	r2, r3
 801751c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8017520:	fa42 f303 	asr.w	r3, r2, r3
 8017524:	f003 0301 	and.w	r3, r3, #1
 8017528:	2b00      	cmp	r3, #0
 801752a:	d0ed      	beq.n	8017508 <RegionUS915NextChannel+0x190>
                }
                *channel = 64 + i;
 801752c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8017530:	3340      	adds	r3, #64	@ 0x40
 8017532:	b2da      	uxtb	r2, r3
 8017534:	68bb      	ldr	r3, [r7, #8]
 8017536:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8017538:	4b07      	ldr	r3, [pc, #28]	@ (8017558 <RegionUS915NextChannel+0x1e0>)
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8017540:	68bb      	ldr	r3, [r7, #8]
 8017542:	781b      	ldrb	r3, [r3, #0]
 8017544:	2248      	movs	r2, #72	@ 0x48
 8017546:	4619      	mov	r1, r3
 8017548:	f7fc fec0 	bl	80142cc <RegionCommonChanDisable>
    }
    return status;
 801754c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8017550:	4618      	mov	r0, r3
 8017552:	3798      	adds	r7, #152	@ 0x98
 8017554:	46bd      	mov	sp, r7
 8017556:	bd80      	pop	{r7, pc}
 8017558:	2000132c 	.word	0x2000132c
 801755c:	20001330 	.word	0x20001330

08017560 <RegionUS915SetContinuousWave>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8017560:	b590      	push	{r4, r7, lr}
 8017562:	b085      	sub	sp, #20
 8017564:	af00      	add	r7, sp, #0
 8017566:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801756e:	4b23      	ldr	r3, [pc, #140]	@ (80175fc <RegionUS915SetContinuousWave+0x9c>)
 8017570:	681a      	ldr	r2, [r3, #0]
 8017572:	4b23      	ldr	r3, [pc, #140]	@ (8017600 <RegionUS915SetContinuousWave+0xa0>)
 8017574:	6819      	ldr	r1, [r3, #0]
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	781b      	ldrb	r3, [r3, #0]
 801757a:	461c      	mov	r4, r3
 801757c:	4623      	mov	r3, r4
 801757e:	005b      	lsls	r3, r3, #1
 8017580:	4423      	add	r3, r4
 8017582:	009b      	lsls	r3, r3, #2
 8017584:	440b      	add	r3, r1
 8017586:	3309      	adds	r3, #9
 8017588:	781b      	ldrb	r3, [r3, #0]
 801758a:	4619      	mov	r1, r3
 801758c:	460b      	mov	r3, r1
 801758e:	005b      	lsls	r3, r3, #1
 8017590:	440b      	add	r3, r1
 8017592:	00db      	lsls	r3, r3, #3
 8017594:	4413      	add	r3, r2
 8017596:	3302      	adds	r3, #2
 8017598:	f993 1000 	ldrsb.w	r1, [r3]
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80175a2:	4b17      	ldr	r3, [pc, #92]	@ (8017600 <RegionUS915SetContinuousWave+0xa0>)
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80175aa:	f7fe fded 	bl	8016188 <LimitTxPower>
 80175ae:	4603      	mov	r3, r0
 80175b0:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80175b2:	2300      	movs	r3, #0
 80175b4:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80175b6:	4b12      	ldr	r3, [pc, #72]	@ (8017600 <RegionUS915SetContinuousWave+0xa0>)
 80175b8:	681a      	ldr	r2, [r3, #0]
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	781b      	ldrb	r3, [r3, #0]
 80175be:	4619      	mov	r1, r3
 80175c0:	460b      	mov	r3, r1
 80175c2:	005b      	lsls	r3, r3, #1
 80175c4:	440b      	add	r3, r1
 80175c6:	009b      	lsls	r3, r3, #2
 80175c8:	4413      	add	r3, r2
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 80175ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80175d2:	f04f 0200 	mov.w	r2, #0
 80175d6:	490b      	ldr	r1, [pc, #44]	@ (8017604 <RegionUS915SetContinuousWave+0xa4>)
 80175d8:	4618      	mov	r0, r3
 80175da:	f7fd f9d3 	bl	8014984 <RegionCommonComputeTxPower>
 80175de:	4603      	mov	r3, r0
 80175e0:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80175e2:	4b09      	ldr	r3, [pc, #36]	@ (8017608 <RegionUS915SetContinuousWave+0xa8>)
 80175e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80175e6:	687a      	ldr	r2, [r7, #4]
 80175e8:	8992      	ldrh	r2, [r2, #12]
 80175ea:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80175ee:	68b8      	ldr	r0, [r7, #8]
 80175f0:	4798      	blx	r3
#endif /* REGION_US915 */
}
 80175f2:	bf00      	nop
 80175f4:	3714      	adds	r7, #20
 80175f6:	46bd      	mov	sp, r7
 80175f8:	bd90      	pop	{r4, r7, pc}
 80175fa:	bf00      	nop
 80175fc:	2000132c 	.word	0x2000132c
 8017600:	20001330 	.word	0x20001330
 8017604:	41f00000 	.word	0x41f00000
 8017608:	0801d86c 	.word	0x0801d86c

0801760c <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801760c:	b480      	push	{r7}
 801760e:	b085      	sub	sp, #20
 8017610:	af00      	add	r7, sp, #0
 8017612:	4603      	mov	r3, r0
 8017614:	71fb      	strb	r3, [r7, #7]
 8017616:	460b      	mov	r3, r1
 8017618:	71bb      	strb	r3, [r7, #6]
 801761a:	4613      	mov	r3, r2
 801761c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801761e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017622:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017626:	4909      	ldr	r1, [pc, #36]	@ (801764c <RegionUS915ApplyDrOffset+0x40>)
 8017628:	0092      	lsls	r2, r2, #2
 801762a:	440a      	add	r2, r1
 801762c:	4413      	add	r3, r2
 801762e:	781b      	ldrb	r3, [r3, #0]
 8017630:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8017632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017636:	2b00      	cmp	r3, #0
 8017638:	da01      	bge.n	801763e <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801763a:	2300      	movs	r3, #0
 801763c:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801763e:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8017640:	4618      	mov	r0, r3
 8017642:	3714      	adds	r7, #20
 8017644:	46bd      	mov	sp, r7
 8017646:	bc80      	pop	{r7}
 8017648:	4770      	bx	lr
 801764a:	bf00      	nop
 801764c:	0801d838 	.word	0x0801d838

08017650 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8017650:	b480      	push	{r7}
 8017652:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8017654:	4b0d      	ldr	r3, [pc, #52]	@ (801768c <rand1+0x3c>)
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	4a0d      	ldr	r2, [pc, #52]	@ (8017690 <rand1+0x40>)
 801765a:	fb02 f303 	mul.w	r3, r2, r3
 801765e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017662:	3339      	adds	r3, #57	@ 0x39
 8017664:	4a09      	ldr	r2, [pc, #36]	@ (801768c <rand1+0x3c>)
 8017666:	6013      	str	r3, [r2, #0]
 8017668:	4b08      	ldr	r3, [pc, #32]	@ (801768c <rand1+0x3c>)
 801766a:	681a      	ldr	r2, [r3, #0]
 801766c:	2303      	movs	r3, #3
 801766e:	fba3 1302 	umull	r1, r3, r3, r2
 8017672:	1ad1      	subs	r1, r2, r3
 8017674:	0849      	lsrs	r1, r1, #1
 8017676:	440b      	add	r3, r1
 8017678:	0f99      	lsrs	r1, r3, #30
 801767a:	460b      	mov	r3, r1
 801767c:	07db      	lsls	r3, r3, #31
 801767e:	1a5b      	subs	r3, r3, r1
 8017680:	1ad1      	subs	r1, r2, r3
 8017682:	460b      	mov	r3, r1
}
 8017684:	4618      	mov	r0, r3
 8017686:	46bd      	mov	sp, r7
 8017688:	bc80      	pop	{r7}
 801768a:	4770      	bx	lr
 801768c:	20000120 	.word	0x20000120
 8017690:	41c64e6d 	.word	0x41c64e6d

08017694 <srand1>:

void srand1( uint32_t seed )
{
 8017694:	b480      	push	{r7}
 8017696:	b083      	sub	sp, #12
 8017698:	af00      	add	r7, sp, #0
 801769a:	6078      	str	r0, [r7, #4]
    next = seed;
 801769c:	4a03      	ldr	r2, [pc, #12]	@ (80176ac <srand1+0x18>)
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	6013      	str	r3, [r2, #0]
}
 80176a2:	bf00      	nop
 80176a4:	370c      	adds	r7, #12
 80176a6:	46bd      	mov	sp, r7
 80176a8:	bc80      	pop	{r7}
 80176aa:	4770      	bx	lr
 80176ac:	20000120 	.word	0x20000120

080176b0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b082      	sub	sp, #8
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
 80176b8:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80176ba:	f7ff ffc9 	bl	8017650 <rand1>
 80176be:	4602      	mov	r2, r0
 80176c0:	6839      	ldr	r1, [r7, #0]
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	1acb      	subs	r3, r1, r3
 80176c6:	3301      	adds	r3, #1
 80176c8:	fb92 f1f3 	sdiv	r1, r2, r3
 80176cc:	fb01 f303 	mul.w	r3, r1, r3
 80176d0:	1ad2      	subs	r2, r2, r3
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	4413      	add	r3, r2
}
 80176d6:	4618      	mov	r0, r3
 80176d8:	3708      	adds	r7, #8
 80176da:	46bd      	mov	sp, r7
 80176dc:	bd80      	pop	{r7, pc}

080176de <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80176de:	b480      	push	{r7}
 80176e0:	b085      	sub	sp, #20
 80176e2:	af00      	add	r7, sp, #0
 80176e4:	60f8      	str	r0, [r7, #12]
 80176e6:	60b9      	str	r1, [r7, #8]
 80176e8:	4613      	mov	r3, r2
 80176ea:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80176ec:	e007      	b.n	80176fe <memcpy1+0x20>
    {
        *dst++ = *src++;
 80176ee:	68ba      	ldr	r2, [r7, #8]
 80176f0:	1c53      	adds	r3, r2, #1
 80176f2:	60bb      	str	r3, [r7, #8]
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	1c59      	adds	r1, r3, #1
 80176f8:	60f9      	str	r1, [r7, #12]
 80176fa:	7812      	ldrb	r2, [r2, #0]
 80176fc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80176fe:	88fb      	ldrh	r3, [r7, #6]
 8017700:	1e5a      	subs	r2, r3, #1
 8017702:	80fa      	strh	r2, [r7, #6]
 8017704:	2b00      	cmp	r3, #0
 8017706:	d1f2      	bne.n	80176ee <memcpy1+0x10>
    }
}
 8017708:	bf00      	nop
 801770a:	bf00      	nop
 801770c:	3714      	adds	r7, #20
 801770e:	46bd      	mov	sp, r7
 8017710:	bc80      	pop	{r7}
 8017712:	4770      	bx	lr

08017714 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8017714:	b480      	push	{r7}
 8017716:	b085      	sub	sp, #20
 8017718:	af00      	add	r7, sp, #0
 801771a:	60f8      	str	r0, [r7, #12]
 801771c:	60b9      	str	r1, [r7, #8]
 801771e:	4613      	mov	r3, r2
 8017720:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8017722:	88fb      	ldrh	r3, [r7, #6]
 8017724:	3b01      	subs	r3, #1
 8017726:	68fa      	ldr	r2, [r7, #12]
 8017728:	4413      	add	r3, r2
 801772a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801772c:	e007      	b.n	801773e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801772e:	68ba      	ldr	r2, [r7, #8]
 8017730:	1c53      	adds	r3, r2, #1
 8017732:	60bb      	str	r3, [r7, #8]
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	1e59      	subs	r1, r3, #1
 8017738:	60f9      	str	r1, [r7, #12]
 801773a:	7812      	ldrb	r2, [r2, #0]
 801773c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801773e:	88fb      	ldrh	r3, [r7, #6]
 8017740:	1e5a      	subs	r2, r3, #1
 8017742:	80fa      	strh	r2, [r7, #6]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d1f2      	bne.n	801772e <memcpyr+0x1a>
    }
}
 8017748:	bf00      	nop
 801774a:	bf00      	nop
 801774c:	3714      	adds	r7, #20
 801774e:	46bd      	mov	sp, r7
 8017750:	bc80      	pop	{r7}
 8017752:	4770      	bx	lr

08017754 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8017754:	b480      	push	{r7}
 8017756:	b083      	sub	sp, #12
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
 801775c:	460b      	mov	r3, r1
 801775e:	70fb      	strb	r3, [r7, #3]
 8017760:	4613      	mov	r3, r2
 8017762:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8017764:	e004      	b.n	8017770 <memset1+0x1c>
    {
        *dst++ = value;
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	1c5a      	adds	r2, r3, #1
 801776a:	607a      	str	r2, [r7, #4]
 801776c:	78fa      	ldrb	r2, [r7, #3]
 801776e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017770:	883b      	ldrh	r3, [r7, #0]
 8017772:	1e5a      	subs	r2, r3, #1
 8017774:	803a      	strh	r2, [r7, #0]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d1f5      	bne.n	8017766 <memset1+0x12>
    }
}
 801777a:	bf00      	nop
 801777c:	bf00      	nop
 801777e:	370c      	adds	r7, #12
 8017780:	46bd      	mov	sp, r7
 8017782:	bc80      	pop	{r7}
 8017784:	4770      	bx	lr
	...

08017788 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8017788:	b480      	push	{r7}
 801778a:	b085      	sub	sp, #20
 801778c:	af00      	add	r7, sp, #0
 801778e:	6078      	str	r0, [r7, #4]
 8017790:	460b      	mov	r3, r1
 8017792:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8017794:	f04f 33ff 	mov.w	r3, #4294967295
 8017798:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	2b00      	cmp	r3, #0
 801779e:	d101      	bne.n	80177a4 <Crc32+0x1c>
    {
        return 0;
 80177a0:	2300      	movs	r3, #0
 80177a2:	e026      	b.n	80177f2 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 80177a4:	2300      	movs	r3, #0
 80177a6:	817b      	strh	r3, [r7, #10]
 80177a8:	e01d      	b.n	80177e6 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 80177aa:	897b      	ldrh	r3, [r7, #10]
 80177ac:	687a      	ldr	r2, [r7, #4]
 80177ae:	4413      	add	r3, r2
 80177b0:	781b      	ldrb	r3, [r3, #0]
 80177b2:	461a      	mov	r2, r3
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	4053      	eors	r3, r2
 80177b8:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80177ba:	2300      	movs	r3, #0
 80177bc:	813b      	strh	r3, [r7, #8]
 80177be:	e00c      	b.n	80177da <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	085a      	lsrs	r2, r3, #1
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	f003 0301 	and.w	r3, r3, #1
 80177ca:	425b      	negs	r3, r3
 80177cc:	490b      	ldr	r1, [pc, #44]	@ (80177fc <Crc32+0x74>)
 80177ce:	400b      	ands	r3, r1
 80177d0:	4053      	eors	r3, r2
 80177d2:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80177d4:	893b      	ldrh	r3, [r7, #8]
 80177d6:	3301      	adds	r3, #1
 80177d8:	813b      	strh	r3, [r7, #8]
 80177da:	893b      	ldrh	r3, [r7, #8]
 80177dc:	2b07      	cmp	r3, #7
 80177de:	d9ef      	bls.n	80177c0 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 80177e0:	897b      	ldrh	r3, [r7, #10]
 80177e2:	3301      	adds	r3, #1
 80177e4:	817b      	strh	r3, [r7, #10]
 80177e6:	897a      	ldrh	r2, [r7, #10]
 80177e8:	887b      	ldrh	r3, [r7, #2]
 80177ea:	429a      	cmp	r2, r3
 80177ec:	d3dd      	bcc.n	80177aa <Crc32+0x22>
        }
    }

    return ~crc;
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	43db      	mvns	r3, r3
}
 80177f2:	4618      	mov	r0, r3
 80177f4:	3714      	adds	r7, #20
 80177f6:	46bd      	mov	sp, r7
 80177f8:	bc80      	pop	{r7}
 80177fa:	4770      	bx	lr
 80177fc:	edb88320 	.word	0xedb88320

08017800 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b084      	sub	sp, #16
 8017804:	af02      	add	r7, sp, #8
 8017806:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8017808:	4a24      	ldr	r2, [pc, #144]	@ (801789c <RadioInit+0x9c>)
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801780e:	4b24      	ldr	r3, [pc, #144]	@ (80178a0 <RadioInit+0xa0>)
 8017810:	2200      	movs	r2, #0
 8017812:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8017814:	4b22      	ldr	r3, [pc, #136]	@ (80178a0 <RadioInit+0xa0>)
 8017816:	2200      	movs	r2, #0
 8017818:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801781a:	4b21      	ldr	r3, [pc, #132]	@ (80178a0 <RadioInit+0xa0>)
 801781c:	2200      	movs	r2, #0
 801781e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017820:	4b1f      	ldr	r3, [pc, #124]	@ (80178a0 <RadioInit+0xa0>)
 8017822:	2200      	movs	r2, #0
 8017824:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8017826:	481f      	ldr	r0, [pc, #124]	@ (80178a4 <RadioInit+0xa4>)
 8017828:	f001 ffc0 	bl	80197ac <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801782c:	4b1c      	ldr	r3, [pc, #112]	@ (80178a0 <RadioInit+0xa0>)
 801782e:	2200      	movs	r2, #0
 8017830:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8017832:	4b1b      	ldr	r3, [pc, #108]	@ (80178a0 <RadioInit+0xa0>)
 8017834:	2200      	movs	r2, #0
 8017836:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8017838:	f002 fa54 	bl	8019ce4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801783c:	2100      	movs	r1, #0
 801783e:	2000      	movs	r0, #0
 8017840:	f002 fe20 	bl	801a484 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8017844:	2204      	movs	r2, #4
 8017846:	2100      	movs	r1, #0
 8017848:	2001      	movs	r0, #1
 801784a:	f002 fbdd 	bl	801a008 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801784e:	2300      	movs	r3, #0
 8017850:	2200      	movs	r2, #0
 8017852:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017856:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801785a:	f002 fb0d 	bl	8019e78 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801785e:	f000 fe99 	bl	8018594 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8017862:	2300      	movs	r3, #0
 8017864:	9300      	str	r3, [sp, #0]
 8017866:	4b10      	ldr	r3, [pc, #64]	@ (80178a8 <RadioInit+0xa8>)
 8017868:	2200      	movs	r2, #0
 801786a:	f04f 31ff 	mov.w	r1, #4294967295
 801786e:	480f      	ldr	r0, [pc, #60]	@ (80178ac <RadioInit+0xac>)
 8017870:	f004 f828 	bl	801b8c4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8017874:	2300      	movs	r3, #0
 8017876:	9300      	str	r3, [sp, #0]
 8017878:	4b0d      	ldr	r3, [pc, #52]	@ (80178b0 <RadioInit+0xb0>)
 801787a:	2200      	movs	r2, #0
 801787c:	f04f 31ff 	mov.w	r1, #4294967295
 8017880:	480c      	ldr	r0, [pc, #48]	@ (80178b4 <RadioInit+0xb4>)
 8017882:	f004 f81f 	bl	801b8c4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8017886:	4809      	ldr	r0, [pc, #36]	@ (80178ac <RadioInit+0xac>)
 8017888:	f004 f8c0 	bl	801ba0c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801788c:	4809      	ldr	r0, [pc, #36]	@ (80178b4 <RadioInit+0xb4>)
 801788e:	f004 f8bd 	bl	801ba0c <UTIL_TIMER_Stop>
}
 8017892:	bf00      	nop
 8017894:	3708      	adds	r7, #8
 8017896:	46bd      	mov	sp, r7
 8017898:	bd80      	pop	{r7, pc}
 801789a:	bf00      	nop
 801789c:	20001434 	.word	0x20001434
 80178a0:	20001438 	.word	0x20001438
 80178a4:	08018989 	.word	0x08018989
 80178a8:	08018911 	.word	0x08018911
 80178ac:	20001494 	.word	0x20001494
 80178b0:	08018925 	.word	0x08018925
 80178b4:	200014ac 	.word	0x200014ac

080178b8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80178b8:	b580      	push	{r7, lr}
 80178ba:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80178bc:	f001 ffbe 	bl	801983c <SUBGRF_GetOperatingMode>
 80178c0:	4603      	mov	r3, r0
 80178c2:	2b07      	cmp	r3, #7
 80178c4:	d00a      	beq.n	80178dc <RadioGetStatus+0x24>
 80178c6:	2b07      	cmp	r3, #7
 80178c8:	dc0a      	bgt.n	80178e0 <RadioGetStatus+0x28>
 80178ca:	2b04      	cmp	r3, #4
 80178cc:	d002      	beq.n	80178d4 <RadioGetStatus+0x1c>
 80178ce:	2b05      	cmp	r3, #5
 80178d0:	d002      	beq.n	80178d8 <RadioGetStatus+0x20>
 80178d2:	e005      	b.n	80178e0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80178d4:	2302      	movs	r3, #2
 80178d6:	e004      	b.n	80178e2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80178d8:	2301      	movs	r3, #1
 80178da:	e002      	b.n	80178e2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80178dc:	2303      	movs	r3, #3
 80178de:	e000      	b.n	80178e2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80178e0:	2300      	movs	r3, #0
    }
}
 80178e2:	4618      	mov	r0, r3
 80178e4:	bd80      	pop	{r7, pc}
	...

080178e8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b082      	sub	sp, #8
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	4603      	mov	r3, r0
 80178f0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80178f2:	4a2a      	ldr	r2, [pc, #168]	@ (801799c <RadioSetModem+0xb4>)
 80178f4:	79fb      	ldrb	r3, [r7, #7]
 80178f6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80178f8:	79fb      	ldrb	r3, [r7, #7]
 80178fa:	4618      	mov	r0, r3
 80178fc:	f003 f995 	bl	801ac2a <RFW_SetRadioModem>
    switch( modem )
 8017900:	79fb      	ldrb	r3, [r7, #7]
 8017902:	2b05      	cmp	r3, #5
 8017904:	d80e      	bhi.n	8017924 <RadioSetModem+0x3c>
 8017906:	a201      	add	r2, pc, #4	@ (adr r2, 801790c <RadioSetModem+0x24>)
 8017908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801790c:	08017933 	.word	0x08017933
 8017910:	08017941 	.word	0x08017941
 8017914:	08017925 	.word	0x08017925
 8017918:	08017967 	.word	0x08017967
 801791c:	08017975 	.word	0x08017975
 8017920:	08017983 	.word	0x08017983
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8017924:	2003      	movs	r0, #3
 8017926:	f002 fb49 	bl	8019fbc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801792a:	4b1c      	ldr	r3, [pc, #112]	@ (801799c <RadioSetModem+0xb4>)
 801792c:	2200      	movs	r2, #0
 801792e:	735a      	strb	r2, [r3, #13]
        break;
 8017930:	e02f      	b.n	8017992 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017932:	2000      	movs	r0, #0
 8017934:	f002 fb42 	bl	8019fbc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017938:	4b18      	ldr	r3, [pc, #96]	@ (801799c <RadioSetModem+0xb4>)
 801793a:	2200      	movs	r2, #0
 801793c:	735a      	strb	r2, [r3, #13]
        break;
 801793e:	e028      	b.n	8017992 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8017940:	2001      	movs	r0, #1
 8017942:	f002 fb3b 	bl	8019fbc <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8017946:	4b15      	ldr	r3, [pc, #84]	@ (801799c <RadioSetModem+0xb4>)
 8017948:	7b5a      	ldrb	r2, [r3, #13]
 801794a:	4b14      	ldr	r3, [pc, #80]	@ (801799c <RadioSetModem+0xb4>)
 801794c:	7b1b      	ldrb	r3, [r3, #12]
 801794e:	429a      	cmp	r2, r3
 8017950:	d01e      	beq.n	8017990 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8017952:	4b12      	ldr	r3, [pc, #72]	@ (801799c <RadioSetModem+0xb4>)
 8017954:	7b1a      	ldrb	r2, [r3, #12]
 8017956:	4b11      	ldr	r3, [pc, #68]	@ (801799c <RadioSetModem+0xb4>)
 8017958:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801795a:	4b10      	ldr	r3, [pc, #64]	@ (801799c <RadioSetModem+0xb4>)
 801795c:	7b5b      	ldrb	r3, [r3, #13]
 801795e:	4618      	mov	r0, r3
 8017960:	f000 ffa0 	bl	80188a4 <RadioSetPublicNetwork>
        }
        break;
 8017964:	e014      	b.n	8017990 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017966:	2002      	movs	r0, #2
 8017968:	f002 fb28 	bl	8019fbc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801796c:	4b0b      	ldr	r3, [pc, #44]	@ (801799c <RadioSetModem+0xb4>)
 801796e:	2200      	movs	r2, #0
 8017970:	735a      	strb	r2, [r3, #13]
        break;
 8017972:	e00e      	b.n	8017992 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017974:	2002      	movs	r0, #2
 8017976:	f002 fb21 	bl	8019fbc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801797a:	4b08      	ldr	r3, [pc, #32]	@ (801799c <RadioSetModem+0xb4>)
 801797c:	2200      	movs	r2, #0
 801797e:	735a      	strb	r2, [r3, #13]
        break;
 8017980:	e007      	b.n	8017992 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017982:	2000      	movs	r0, #0
 8017984:	f002 fb1a 	bl	8019fbc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017988:	4b04      	ldr	r3, [pc, #16]	@ (801799c <RadioSetModem+0xb4>)
 801798a:	2200      	movs	r2, #0
 801798c:	735a      	strb	r2, [r3, #13]
        break;
 801798e:	e000      	b.n	8017992 <RadioSetModem+0xaa>
        break;
 8017990:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8017992:	bf00      	nop
 8017994:	3708      	adds	r7, #8
 8017996:	46bd      	mov	sp, r7
 8017998:	bd80      	pop	{r7, pc}
 801799a:	bf00      	nop
 801799c:	20001438 	.word	0x20001438

080179a0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b082      	sub	sp, #8
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80179a8:	6878      	ldr	r0, [r7, #4]
 80179aa:	f002 fac1 	bl	8019f30 <SUBGRF_SetRfFrequency>
}
 80179ae:	bf00      	nop
 80179b0:	3708      	adds	r7, #8
 80179b2:	46bd      	mov	sp, r7
 80179b4:	bd80      	pop	{r7, pc}

080179b6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80179b6:	b580      	push	{r7, lr}
 80179b8:	b090      	sub	sp, #64	@ 0x40
 80179ba:	af0a      	add	r7, sp, #40	@ 0x28
 80179bc:	60f8      	str	r0, [r7, #12]
 80179be:	60b9      	str	r1, [r7, #8]
 80179c0:	603b      	str	r3, [r7, #0]
 80179c2:	4613      	mov	r3, r2
 80179c4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80179c6:	2301      	movs	r3, #1
 80179c8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80179ca:	2300      	movs	r3, #0
 80179cc:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80179ce:	2300      	movs	r3, #0
 80179d0:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 80179d2:	f000 fdf2 	bl	80185ba <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80179d6:	2000      	movs	r0, #0
 80179d8:	f7ff ff86 	bl	80178e8 <RadioSetModem>

    RadioSetChannel( freq );
 80179dc:	68f8      	ldr	r0, [r7, #12]
 80179de:	f7ff ffdf 	bl	80179a0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80179e2:	2301      	movs	r3, #1
 80179e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80179e6:	2300      	movs	r3, #0
 80179e8:	9308      	str	r3, [sp, #32]
 80179ea:	2300      	movs	r3, #0
 80179ec:	9307      	str	r3, [sp, #28]
 80179ee:	2300      	movs	r3, #0
 80179f0:	9306      	str	r3, [sp, #24]
 80179f2:	2300      	movs	r3, #0
 80179f4:	9305      	str	r3, [sp, #20]
 80179f6:	2300      	movs	r3, #0
 80179f8:	9304      	str	r3, [sp, #16]
 80179fa:	2300      	movs	r3, #0
 80179fc:	9303      	str	r3, [sp, #12]
 80179fe:	2300      	movs	r3, #0
 8017a00:	9302      	str	r3, [sp, #8]
 8017a02:	2303      	movs	r3, #3
 8017a04:	9301      	str	r3, [sp, #4]
 8017a06:	68bb      	ldr	r3, [r7, #8]
 8017a08:	9300      	str	r3, [sp, #0]
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8017a10:	68b9      	ldr	r1, [r7, #8]
 8017a12:	2000      	movs	r0, #0
 8017a14:	f000 f83c 	bl	8017a90 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8017a18:	2000      	movs	r0, #0
 8017a1a:	f000 fdd5 	bl	80185c8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8017a1e:	f000 ff6f 	bl	8018900 <RadioGetWakeupTime>
 8017a22:	4603      	mov	r3, r0
 8017a24:	4618      	mov	r0, r3
 8017a26:	f7ea f8e7 	bl	8001bf8 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8017a2a:	f004 f909 	bl	801bc40 <UTIL_TIMER_GetCurrentTime>
 8017a2e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017a30:	e00d      	b.n	8017a4e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8017a32:	2000      	movs	r0, #0
 8017a34:	f000 feb6 	bl	80187a4 <RadioRssi>
 8017a38:	4603      	mov	r3, r0
 8017a3a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8017a3c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017a40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017a44:	429a      	cmp	r2, r3
 8017a46:	dd02      	ble.n	8017a4e <RadioIsChannelFree+0x98>
        {
            status = false;
 8017a48:	2300      	movs	r3, #0
 8017a4a:	75fb      	strb	r3, [r7, #23]
            break;
 8017a4c:	e006      	b.n	8017a5c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017a4e:	6938      	ldr	r0, [r7, #16]
 8017a50:	f004 f908 	bl	801bc64 <UTIL_TIMER_GetElapsedTime>
 8017a54:	4602      	mov	r2, r0
 8017a56:	683b      	ldr	r3, [r7, #0]
 8017a58:	4293      	cmp	r3, r2
 8017a5a:	d8ea      	bhi.n	8017a32 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8017a5c:	f000 fdad 	bl	80185ba <RadioStandby>

    return status;
 8017a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8017a62:	4618      	mov	r0, r3
 8017a64:	3718      	adds	r7, #24
 8017a66:	46bd      	mov	sp, r7
 8017a68:	bd80      	pop	{r7, pc}

08017a6a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8017a6a:	b580      	push	{r7, lr}
 8017a6c:	b082      	sub	sp, #8
 8017a6e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8017a70:	2300      	movs	r3, #0
 8017a72:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017a74:	2300      	movs	r3, #0
 8017a76:	2200      	movs	r2, #0
 8017a78:	2100      	movs	r1, #0
 8017a7a:	2000      	movs	r0, #0
 8017a7c:	f002 f9fc 	bl	8019e78 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8017a80:	f001 ffad 	bl	80199de <SUBGRF_GetRandom>
 8017a84:	6078      	str	r0, [r7, #4]

    return rnd;
 8017a86:	687b      	ldr	r3, [r7, #4]
}
 8017a88:	4618      	mov	r0, r3
 8017a8a:	3708      	adds	r7, #8
 8017a8c:	46bd      	mov	sp, r7
 8017a8e:	bd80      	pop	{r7, pc}

08017a90 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b08a      	sub	sp, #40	@ 0x28
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	60b9      	str	r1, [r7, #8]
 8017a98:	607a      	str	r2, [r7, #4]
 8017a9a:	461a      	mov	r2, r3
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	73fb      	strb	r3, [r7, #15]
 8017aa0:	4613      	mov	r3, r2
 8017aa2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8017aa4:	4ab9      	ldr	r2, [pc, #740]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017aa6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017aaa:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8017aac:	f003 f87b 	bl	801aba6 <RFW_DeInit>
    if( rxContinuous == true )
 8017ab0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d001      	beq.n	8017abc <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8017ab8:	2300      	movs	r3, #0
 8017aba:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8017abc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d004      	beq.n	8017ace <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8017ac4:	4ab2      	ldr	r2, [pc, #712]	@ (8017d90 <RadioSetRxConfig+0x300>)
 8017ac6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8017aca:	7013      	strb	r3, [r2, #0]
 8017acc:	e002      	b.n	8017ad4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8017ace:	4bb0      	ldr	r3, [pc, #704]	@ (8017d90 <RadioSetRxConfig+0x300>)
 8017ad0:	22ff      	movs	r2, #255	@ 0xff
 8017ad2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8017ad4:	7bfb      	ldrb	r3, [r7, #15]
 8017ad6:	2b05      	cmp	r3, #5
 8017ad8:	d009      	beq.n	8017aee <RadioSetRxConfig+0x5e>
 8017ada:	2b05      	cmp	r3, #5
 8017adc:	f300 81d7 	bgt.w	8017e8e <RadioSetRxConfig+0x3fe>
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	f000 80bf 	beq.w	8017c64 <RadioSetRxConfig+0x1d4>
 8017ae6:	2b01      	cmp	r3, #1
 8017ae8:	f000 8124 	beq.w	8017d34 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8017aec:	e1cf      	b.n	8017e8e <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8017aee:	2001      	movs	r0, #1
 8017af0:	f002 f8ba 	bl	8019c68 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017af4:	4ba5      	ldr	r3, [pc, #660]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017af6:	2200      	movs	r2, #0
 8017af8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017afc:	4aa3      	ldr	r2, [pc, #652]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8017b02:	4ba2      	ldr	r3, [pc, #648]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017b04:	2209      	movs	r2, #9
 8017b06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8017b0a:	4ba0      	ldr	r3, [pc, #640]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017b0c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8017b10:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017b12:	68b8      	ldr	r0, [r7, #8]
 8017b14:	f002 ff7a 	bl	801aa0c <SUBGRF_GetFskBandwidthRegValue>
 8017b18:	4603      	mov	r3, r0
 8017b1a:	461a      	mov	r2, r3
 8017b1c:	4b9b      	ldr	r3, [pc, #620]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017b1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017b22:	4b9a      	ldr	r3, [pc, #616]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017b24:	2200      	movs	r2, #0
 8017b26:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017b28:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017b2a:	00db      	lsls	r3, r3, #3
 8017b2c:	b29a      	uxth	r2, r3
 8017b2e:	4b97      	ldr	r3, [pc, #604]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017b30:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8017b32:	4b96      	ldr	r3, [pc, #600]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017b34:	2200      	movs	r2, #0
 8017b36:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8017b38:	4b94      	ldr	r3, [pc, #592]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017b3a:	2210      	movs	r2, #16
 8017b3c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017b3e:	4b93      	ldr	r3, [pc, #588]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017b40:	2200      	movs	r2, #0
 8017b42:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8017b44:	4b91      	ldr	r3, [pc, #580]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017b46:	2200      	movs	r2, #0
 8017b48:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017b4a:	4b91      	ldr	r3, [pc, #580]	@ (8017d90 <RadioSetRxConfig+0x300>)
 8017b4c:	781a      	ldrb	r2, [r3, #0]
 8017b4e:	4b8f      	ldr	r3, [pc, #572]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017b50:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017b52:	4b8e      	ldr	r3, [pc, #568]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017b54:	2201      	movs	r2, #1
 8017b56:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8017b58:	4b8c      	ldr	r3, [pc, #560]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017b5a:	2200      	movs	r2, #0
 8017b5c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8017b5e:	2005      	movs	r0, #5
 8017b60:	f7ff fec2 	bl	80178e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017b64:	488b      	ldr	r0, [pc, #556]	@ (8017d94 <RadioSetRxConfig+0x304>)
 8017b66:	f002 fb1d 	bl	801a1a4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017b6a:	488b      	ldr	r0, [pc, #556]	@ (8017d98 <RadioSetRxConfig+0x308>)
 8017b6c:	f002 fbec 	bl	801a348 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017b70:	4a8a      	ldr	r2, [pc, #552]	@ (8017d9c <RadioSetRxConfig+0x30c>)
 8017b72:	f107 031c 	add.w	r3, r7, #28
 8017b76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017b7a:	e883 0003 	stmia.w	r3, {r0, r1}
 8017b7e:	f107 031c 	add.w	r3, r7, #28
 8017b82:	4618      	mov	r0, r3
 8017b84:	f001 fea9 	bl	80198da <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017b88:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017b8c:	f001 fef4 	bl	8019978 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8017b90:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8017b94:	f000 fe24 	bl	80187e0 <RadioRead>
 8017b98:	4603      	mov	r3, r0
 8017b9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8017b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ba2:	f023 0310 	bic.w	r3, r3, #16
 8017ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8017baa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017bae:	4619      	mov	r1, r3
 8017bb0:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8017bb4:	f000 fe02 	bl	80187bc <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8017bb8:	2104      	movs	r1, #4
 8017bba:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8017bbe:	f000 fdfd 	bl	80187bc <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8017bc2:	f640 009b 	movw	r0, #2203	@ 0x89b
 8017bc6:	f000 fe0b 	bl	80187e0 <RadioRead>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017bd4:	f023 031c 	bic.w	r3, r3, #28
 8017bd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8017bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017be0:	f043 0308 	orr.w	r3, r3, #8
 8017be4:	b2db      	uxtb	r3, r3
 8017be6:	4619      	mov	r1, r3
 8017be8:	f640 009b 	movw	r0, #2203	@ 0x89b
 8017bec:	f000 fde6 	bl	80187bc <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8017bf0:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8017bf4:	f000 fdf4 	bl	80187e0 <RadioRead>
 8017bf8:	4603      	mov	r3, r0
 8017bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017c02:	f023 0318 	bic.w	r3, r3, #24
 8017c06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8017c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017c0e:	f043 0318 	orr.w	r3, r3, #24
 8017c12:	b2db      	uxtb	r3, r3
 8017c14:	4619      	mov	r1, r3
 8017c16:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8017c1a:	f000 fdcf 	bl	80187bc <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8017c1e:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8017c22:	f000 fddd 	bl	80187e0 <RadioRead>
 8017c26:	4603      	mov	r3, r0
 8017c28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8017c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017c34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8017c38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017c3c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8017c40:	b2db      	uxtb	r3, r3
 8017c42:	4619      	mov	r1, r3
 8017c44:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8017c48:	f000 fdb8 	bl	80187bc <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017c4c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017c4e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017c52:	fb02 f303 	mul.w	r3, r2, r3
 8017c56:	461a      	mov	r2, r3
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8017c5e:	4a4b      	ldr	r2, [pc, #300]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017c60:	6093      	str	r3, [r2, #8]
            break;
 8017c62:	e115      	b.n	8017e90 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017c64:	2000      	movs	r0, #0
 8017c66:	f001 ffff 	bl	8019c68 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017c6a:	4b48      	ldr	r3, [pc, #288]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017c72:	4a46      	ldr	r2, [pc, #280]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017c78:	4b44      	ldr	r3, [pc, #272]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017c7a:	220b      	movs	r2, #11
 8017c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017c80:	68b8      	ldr	r0, [r7, #8]
 8017c82:	f002 fec3 	bl	801aa0c <SUBGRF_GetFskBandwidthRegValue>
 8017c86:	4603      	mov	r3, r0
 8017c88:	461a      	mov	r2, r3
 8017c8a:	4b40      	ldr	r3, [pc, #256]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017c8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017c90:	4b3e      	ldr	r3, [pc, #248]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017c92:	2200      	movs	r2, #0
 8017c94:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017c96:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017c98:	00db      	lsls	r3, r3, #3
 8017c9a:	b29a      	uxth	r2, r3
 8017c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017c9e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017ca2:	2204      	movs	r2, #4
 8017ca4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8017ca6:	4b39      	ldr	r3, [pc, #228]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017ca8:	2218      	movs	r2, #24
 8017caa:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017cac:	4b37      	ldr	r3, [pc, #220]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017cae:	2200      	movs	r2, #0
 8017cb0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017cb2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017cb6:	f083 0301 	eor.w	r3, r3, #1
 8017cba:	b2db      	uxtb	r3, r3
 8017cbc:	461a      	mov	r2, r3
 8017cbe:	4b33      	ldr	r3, [pc, #204]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017cc0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017cc2:	4b33      	ldr	r3, [pc, #204]	@ (8017d90 <RadioSetRxConfig+0x300>)
 8017cc4:	781a      	ldrb	r2, [r3, #0]
 8017cc6:	4b31      	ldr	r3, [pc, #196]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017cc8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8017cca:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d003      	beq.n	8017cda <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017cd4:	22f2      	movs	r2, #242	@ 0xf2
 8017cd6:	75da      	strb	r2, [r3, #23]
 8017cd8:	e002      	b.n	8017ce0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017cda:	4b2c      	ldr	r3, [pc, #176]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017cdc:	2201      	movs	r2, #1
 8017cde:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017ce2:	2201      	movs	r2, #1
 8017ce4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017ce6:	f000 fc68 	bl	80185ba <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8017cea:	2000      	movs	r0, #0
 8017cec:	f7ff fdfc 	bl	80178e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017cf0:	4828      	ldr	r0, [pc, #160]	@ (8017d94 <RadioSetRxConfig+0x304>)
 8017cf2:	f002 fa57 	bl	801a1a4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017cf6:	4828      	ldr	r0, [pc, #160]	@ (8017d98 <RadioSetRxConfig+0x308>)
 8017cf8:	f002 fb26 	bl	801a348 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017cfc:	4a28      	ldr	r2, [pc, #160]	@ (8017da0 <RadioSetRxConfig+0x310>)
 8017cfe:	f107 0314 	add.w	r3, r7, #20
 8017d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017d06:	e883 0003 	stmia.w	r3, {r0, r1}
 8017d0a:	f107 0314 	add.w	r3, r7, #20
 8017d0e:	4618      	mov	r0, r3
 8017d10:	f001 fde3 	bl	80198da <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017d14:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017d18:	f001 fe2e 	bl	8019978 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017d1c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017d1e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017d22:	fb02 f303 	mul.w	r3, r2, r3
 8017d26:	461a      	mov	r2, r3
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8017d2e:	4a17      	ldr	r2, [pc, #92]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017d30:	6093      	str	r3, [r2, #8]
            break;
 8017d32:	e0ad      	b.n	8017e90 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017d34:	2000      	movs	r0, #0
 8017d36:	f001 ff97 	bl	8019c68 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017d3a:	4b14      	ldr	r3, [pc, #80]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017d3c:	2201      	movs	r2, #1
 8017d3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	b2da      	uxtb	r2, r3
 8017d46:	4b11      	ldr	r3, [pc, #68]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017d48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8017d4c:	4a15      	ldr	r2, [pc, #84]	@ (8017da4 <RadioSetRxConfig+0x314>)
 8017d4e:	68bb      	ldr	r3, [r7, #8]
 8017d50:	4413      	add	r3, r2
 8017d52:	781a      	ldrb	r2, [r3, #0]
 8017d54:	4b0d      	ldr	r3, [pc, #52]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017d56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8017d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017d5c:	7bbb      	ldrb	r3, [r7, #14]
 8017d5e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017d62:	68bb      	ldr	r3, [r7, #8]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d105      	bne.n	8017d74 <RadioSetRxConfig+0x2e4>
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	2b0b      	cmp	r3, #11
 8017d6c:	d008      	beq.n	8017d80 <RadioSetRxConfig+0x2f0>
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	2b0c      	cmp	r3, #12
 8017d72:	d005      	beq.n	8017d80 <RadioSetRxConfig+0x2f0>
 8017d74:	68bb      	ldr	r3, [r7, #8]
 8017d76:	2b01      	cmp	r3, #1
 8017d78:	d116      	bne.n	8017da8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	2b0c      	cmp	r3, #12
 8017d7e:	d113      	bne.n	8017da8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017d80:	4b02      	ldr	r3, [pc, #8]	@ (8017d8c <RadioSetRxConfig+0x2fc>)
 8017d82:	2201      	movs	r2, #1
 8017d84:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017d88:	e012      	b.n	8017db0 <RadioSetRxConfig+0x320>
 8017d8a:	bf00      	nop
 8017d8c:	20001438 	.word	0x20001438
 8017d90:	20000124 	.word	0x20000124
 8017d94:	20001470 	.word	0x20001470
 8017d98:	20001446 	.word	0x20001446
 8017d9c:	0801d204 	.word	0x0801d204
 8017da0:	0801d20c 	.word	0x0801d20c
 8017da4:	0801d8f8 	.word	0x0801d8f8
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017da8:	4b3b      	ldr	r3, [pc, #236]	@ (8017e98 <RadioSetRxConfig+0x408>)
 8017daa:	2200      	movs	r2, #0
 8017dac:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017db0:	4b39      	ldr	r3, [pc, #228]	@ (8017e98 <RadioSetRxConfig+0x408>)
 8017db2:	2201      	movs	r2, #1
 8017db4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017db6:	4b38      	ldr	r3, [pc, #224]	@ (8017e98 <RadioSetRxConfig+0x408>)
 8017db8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017dbc:	2b05      	cmp	r3, #5
 8017dbe:	d004      	beq.n	8017dca <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017dc0:	4b35      	ldr	r3, [pc, #212]	@ (8017e98 <RadioSetRxConfig+0x408>)
 8017dc2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017dc6:	2b06      	cmp	r3, #6
 8017dc8:	d10a      	bne.n	8017de0 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8017dca:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017dcc:	2b0b      	cmp	r3, #11
 8017dce:	d803      	bhi.n	8017dd8 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017dd0:	4b31      	ldr	r3, [pc, #196]	@ (8017e98 <RadioSetRxConfig+0x408>)
 8017dd2:	220c      	movs	r2, #12
 8017dd4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017dd6:	e006      	b.n	8017de6 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017dd8:	4a2f      	ldr	r2, [pc, #188]	@ (8017e98 <RadioSetRxConfig+0x408>)
 8017dda:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017ddc:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017dde:	e002      	b.n	8017de6 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017de0:	4a2d      	ldr	r2, [pc, #180]	@ (8017e98 <RadioSetRxConfig+0x408>)
 8017de2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017de4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017de6:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8017dea:	4b2b      	ldr	r3, [pc, #172]	@ (8017e98 <RadioSetRxConfig+0x408>)
 8017dec:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017dee:	4b2b      	ldr	r3, [pc, #172]	@ (8017e9c <RadioSetRxConfig+0x40c>)
 8017df0:	781a      	ldrb	r2, [r3, #0]
 8017df2:	4b29      	ldr	r3, [pc, #164]	@ (8017e98 <RadioSetRxConfig+0x408>)
 8017df4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017df6:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8017dfa:	4b27      	ldr	r3, [pc, #156]	@ (8017e98 <RadioSetRxConfig+0x408>)
 8017dfc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017e00:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8017e04:	4b24      	ldr	r3, [pc, #144]	@ (8017e98 <RadioSetRxConfig+0x408>)
 8017e06:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8017e0a:	f000 fbd6 	bl	80185ba <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017e0e:	2001      	movs	r0, #1
 8017e10:	f7ff fd6a 	bl	80178e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017e14:	4822      	ldr	r0, [pc, #136]	@ (8017ea0 <RadioSetRxConfig+0x410>)
 8017e16:	f002 f9c5 	bl	801a1a4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e1a:	4822      	ldr	r0, [pc, #136]	@ (8017ea4 <RadioSetRxConfig+0x414>)
 8017e1c:	f002 fa94 	bl	801a348 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017e20:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017e22:	b2db      	uxtb	r3, r3
 8017e24:	4618      	mov	r0, r3
 8017e26:	f001 ff2e 	bl	8019c86 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8017e2a:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8017e2e:	f002 fbe7 	bl	801a600 <SUBGRF_ReadRegister>
 8017e32:	4603      	mov	r3, r0
 8017e34:	f003 0301 	and.w	r3, r3, #1
 8017e38:	b2db      	uxtb	r3, r3
 8017e3a:	4619      	mov	r1, r3
 8017e3c:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8017e40:	f002 fbca 	bl	801a5d8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8017e44:	4b14      	ldr	r3, [pc, #80]	@ (8017e98 <RadioSetRxConfig+0x408>)
 8017e46:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8017e4a:	2b01      	cmp	r3, #1
 8017e4c:	d10d      	bne.n	8017e6a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8017e4e:	f240 7036 	movw	r0, #1846	@ 0x736
 8017e52:	f002 fbd5 	bl	801a600 <SUBGRF_ReadRegister>
 8017e56:	4603      	mov	r3, r0
 8017e58:	f023 0304 	bic.w	r3, r3, #4
 8017e5c:	b2db      	uxtb	r3, r3
 8017e5e:	4619      	mov	r1, r3
 8017e60:	f240 7036 	movw	r0, #1846	@ 0x736
 8017e64:	f002 fbb8 	bl	801a5d8 <SUBGRF_WriteRegister>
 8017e68:	e00c      	b.n	8017e84 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8017e6a:	f240 7036 	movw	r0, #1846	@ 0x736
 8017e6e:	f002 fbc7 	bl	801a600 <SUBGRF_ReadRegister>
 8017e72:	4603      	mov	r3, r0
 8017e74:	f043 0304 	orr.w	r3, r3, #4
 8017e78:	b2db      	uxtb	r3, r3
 8017e7a:	4619      	mov	r1, r3
 8017e7c:	f240 7036 	movw	r0, #1846	@ 0x736
 8017e80:	f002 fbaa 	bl	801a5d8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8017e84:	4b04      	ldr	r3, [pc, #16]	@ (8017e98 <RadioSetRxConfig+0x408>)
 8017e86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017e8a:	609a      	str	r2, [r3, #8]
            break;
 8017e8c:	e000      	b.n	8017e90 <RadioSetRxConfig+0x400>
            break;
 8017e8e:	bf00      	nop
    }
}
 8017e90:	bf00      	nop
 8017e92:	3728      	adds	r7, #40	@ 0x28
 8017e94:	46bd      	mov	sp, r7
 8017e96:	bd80      	pop	{r7, pc}
 8017e98:	20001438 	.word	0x20001438
 8017e9c:	20000124 	.word	0x20000124
 8017ea0:	20001470 	.word	0x20001470
 8017ea4:	20001446 	.word	0x20001446

08017ea8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8017ea8:	b580      	push	{r7, lr}
 8017eaa:	b086      	sub	sp, #24
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	60ba      	str	r2, [r7, #8]
 8017eb0:	607b      	str	r3, [r7, #4]
 8017eb2:	4603      	mov	r3, r0
 8017eb4:	73fb      	strb	r3, [r7, #15]
 8017eb6:	460b      	mov	r3, r1
 8017eb8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8017eba:	f002 fe74 	bl	801aba6 <RFW_DeInit>
    switch( modem )
 8017ebe:	7bfb      	ldrb	r3, [r7, #15]
 8017ec0:	2b04      	cmp	r3, #4
 8017ec2:	f000 80c7 	beq.w	8018054 <RadioSetTxConfig+0x1ac>
 8017ec6:	2b04      	cmp	r3, #4
 8017ec8:	f300 80d6 	bgt.w	8018078 <RadioSetTxConfig+0x1d0>
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d002      	beq.n	8017ed6 <RadioSetTxConfig+0x2e>
 8017ed0:	2b01      	cmp	r3, #1
 8017ed2:	d059      	beq.n	8017f88 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017ed4:	e0d0      	b.n	8018078 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017ed6:	4b77      	ldr	r3, [pc, #476]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017ed8:	2200      	movs	r2, #0
 8017eda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017ede:	4a75      	ldr	r2, [pc, #468]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017ee0:	6a3b      	ldr	r3, [r7, #32]
 8017ee2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017ee4:	4b73      	ldr	r3, [pc, #460]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017ee6:	220b      	movs	r2, #11
 8017ee8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017eec:	6878      	ldr	r0, [r7, #4]
 8017eee:	f002 fd8d 	bl	801aa0c <SUBGRF_GetFskBandwidthRegValue>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	461a      	mov	r2, r3
 8017ef6:	4b6f      	ldr	r3, [pc, #444]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017ef8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8017efc:	4a6d      	ldr	r2, [pc, #436]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017efe:	68bb      	ldr	r3, [r7, #8]
 8017f00:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017f02:	4b6c      	ldr	r3, [pc, #432]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017f04:	2200      	movs	r2, #0
 8017f06:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017f08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017f0a:	00db      	lsls	r3, r3, #3
 8017f0c:	b29a      	uxth	r2, r3
 8017f0e:	4b69      	ldr	r3, [pc, #420]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017f10:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017f12:	4b68      	ldr	r3, [pc, #416]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017f14:	2204      	movs	r2, #4
 8017f16:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8017f18:	4b66      	ldr	r3, [pc, #408]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017f1a:	2218      	movs	r2, #24
 8017f1c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017f1e:	4b65      	ldr	r3, [pc, #404]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017f20:	2200      	movs	r2, #0
 8017f22:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017f24:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017f28:	f083 0301 	eor.w	r3, r3, #1
 8017f2c:	b2db      	uxtb	r3, r3
 8017f2e:	461a      	mov	r2, r3
 8017f30:	4b60      	ldr	r3, [pc, #384]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017f32:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8017f34:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d003      	beq.n	8017f44 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017f3c:	4b5d      	ldr	r3, [pc, #372]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017f3e:	22f2      	movs	r2, #242	@ 0xf2
 8017f40:	75da      	strb	r2, [r3, #23]
 8017f42:	e002      	b.n	8017f4a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017f44:	4b5b      	ldr	r3, [pc, #364]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017f46:	2201      	movs	r2, #1
 8017f48:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017f4a:	4b5a      	ldr	r3, [pc, #360]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017f4c:	2201      	movs	r2, #1
 8017f4e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017f50:	f000 fb33 	bl	80185ba <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8017f54:	2000      	movs	r0, #0
 8017f56:	f7ff fcc7 	bl	80178e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017f5a:	4857      	ldr	r0, [pc, #348]	@ (80180b8 <RadioSetTxConfig+0x210>)
 8017f5c:	f002 f922 	bl	801a1a4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017f60:	4856      	ldr	r0, [pc, #344]	@ (80180bc <RadioSetTxConfig+0x214>)
 8017f62:	f002 f9f1 	bl	801a348 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017f66:	4a56      	ldr	r2, [pc, #344]	@ (80180c0 <RadioSetTxConfig+0x218>)
 8017f68:	f107 0310 	add.w	r3, r7, #16
 8017f6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017f70:	e883 0003 	stmia.w	r3, {r0, r1}
 8017f74:	f107 0310 	add.w	r3, r7, #16
 8017f78:	4618      	mov	r0, r3
 8017f7a:	f001 fcae 	bl	80198da <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017f7e:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017f82:	f001 fcf9 	bl	8019978 <SUBGRF_SetWhiteningSeed>
            break;
 8017f86:	e078      	b.n	801807a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017f88:	4b4a      	ldr	r3, [pc, #296]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017f8a:	2201      	movs	r2, #1
 8017f8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8017f90:	6a3b      	ldr	r3, [r7, #32]
 8017f92:	b2da      	uxtb	r2, r3
 8017f94:	4b47      	ldr	r3, [pc, #284]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017f96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8017f9a:	4a4a      	ldr	r2, [pc, #296]	@ (80180c4 <RadioSetTxConfig+0x21c>)
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	4413      	add	r3, r2
 8017fa0:	781a      	ldrb	r2, [r3, #0]
 8017fa2:	4b44      	ldr	r3, [pc, #272]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017fa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8017fa8:	4a42      	ldr	r2, [pc, #264]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017faa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017fae:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d105      	bne.n	8017fc4 <RadioSetTxConfig+0x11c>
 8017fb8:	6a3b      	ldr	r3, [r7, #32]
 8017fba:	2b0b      	cmp	r3, #11
 8017fbc:	d008      	beq.n	8017fd0 <RadioSetTxConfig+0x128>
 8017fbe:	6a3b      	ldr	r3, [r7, #32]
 8017fc0:	2b0c      	cmp	r3, #12
 8017fc2:	d005      	beq.n	8017fd0 <RadioSetTxConfig+0x128>
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	2b01      	cmp	r3, #1
 8017fc8:	d107      	bne.n	8017fda <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017fca:	6a3b      	ldr	r3, [r7, #32]
 8017fcc:	2b0c      	cmp	r3, #12
 8017fce:	d104      	bne.n	8017fda <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017fd0:	4b38      	ldr	r3, [pc, #224]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017fd2:	2201      	movs	r2, #1
 8017fd4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017fd8:	e003      	b.n	8017fe2 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017fda:	4b36      	ldr	r3, [pc, #216]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017fdc:	2200      	movs	r2, #0
 8017fde:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017fe2:	4b34      	ldr	r3, [pc, #208]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017fe4:	2201      	movs	r2, #1
 8017fe6:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017fe8:	4b32      	ldr	r3, [pc, #200]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017fea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017fee:	2b05      	cmp	r3, #5
 8017ff0:	d004      	beq.n	8017ffc <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017ff2:	4b30      	ldr	r3, [pc, #192]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8017ff4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017ff8:	2b06      	cmp	r3, #6
 8017ffa:	d10a      	bne.n	8018012 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8017ffc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017ffe:	2b0b      	cmp	r3, #11
 8018000:	d803      	bhi.n	801800a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018002:	4b2c      	ldr	r3, [pc, #176]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8018004:	220c      	movs	r2, #12
 8018006:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018008:	e006      	b.n	8018018 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801800a:	4a2a      	ldr	r2, [pc, #168]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 801800c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801800e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018010:	e002      	b.n	8018018 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018012:	4a28      	ldr	r2, [pc, #160]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8018014:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018016:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018018:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801801c:	4b25      	ldr	r3, [pc, #148]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 801801e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018020:	4b29      	ldr	r3, [pc, #164]	@ (80180c8 <RadioSetTxConfig+0x220>)
 8018022:	781a      	ldrb	r2, [r3, #0]
 8018024:	4b23      	ldr	r3, [pc, #140]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8018026:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018028:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801802c:	4b21      	ldr	r3, [pc, #132]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 801802e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018032:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018036:	4b1f      	ldr	r3, [pc, #124]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8018038:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 801803c:	f000 fabd 	bl	80185ba <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018040:	2001      	movs	r0, #1
 8018042:	f7ff fc51 	bl	80178e8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018046:	481c      	ldr	r0, [pc, #112]	@ (80180b8 <RadioSetTxConfig+0x210>)
 8018048:	f002 f8ac 	bl	801a1a4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801804c:	481b      	ldr	r0, [pc, #108]	@ (80180bc <RadioSetTxConfig+0x214>)
 801804e:	f002 f97b 	bl	801a348 <SUBGRF_SetPacketParams>
            break;
 8018052:	e012      	b.n	801807a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8018054:	2004      	movs	r0, #4
 8018056:	f7ff fc47 	bl	80178e8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801805a:	4b16      	ldr	r3, [pc, #88]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 801805c:	2202      	movs	r2, #2
 801805e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8018062:	4a14      	ldr	r2, [pc, #80]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 8018064:	6a3b      	ldr	r3, [r7, #32]
 8018066:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018068:	4b12      	ldr	r3, [pc, #72]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 801806a:	2216      	movs	r2, #22
 801806c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018070:	4811      	ldr	r0, [pc, #68]	@ (80180b8 <RadioSetTxConfig+0x210>)
 8018072:	f002 f897 	bl	801a1a4 <SUBGRF_SetModulationParams>
            break;
 8018076:	e000      	b.n	801807a <RadioSetTxConfig+0x1d2>
            break;
 8018078:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801807a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801807e:	4618      	mov	r0, r3
 8018080:	f002 fbc6 	bl	801a810 <SUBGRF_SetRfTxPower>
 8018084:	4603      	mov	r3, r0
 8018086:	461a      	mov	r2, r3
 8018088:	4b0a      	ldr	r3, [pc, #40]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 801808a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801808e:	210e      	movs	r1, #14
 8018090:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018094:	f002 faa0 	bl	801a5d8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8018098:	4b06      	ldr	r3, [pc, #24]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 801809a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801809e:	4618      	mov	r0, r3
 80180a0:	f002 fd95 	bl	801abce <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80180a4:	4a03      	ldr	r2, [pc, #12]	@ (80180b4 <RadioSetTxConfig+0x20c>)
 80180a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80180a8:	6053      	str	r3, [r2, #4]
}
 80180aa:	bf00      	nop
 80180ac:	3718      	adds	r7, #24
 80180ae:	46bd      	mov	sp, r7
 80180b0:	bd80      	pop	{r7, pc}
 80180b2:	bf00      	nop
 80180b4:	20001438 	.word	0x20001438
 80180b8:	20001470 	.word	0x20001470
 80180bc:	20001446 	.word	0x20001446
 80180c0:	0801d20c 	.word	0x0801d20c
 80180c4:	0801d8f8 	.word	0x0801d8f8
 80180c8:	20000124 	.word	0x20000124

080180cc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80180cc:	b480      	push	{r7}
 80180ce:	b083      	sub	sp, #12
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
    return true;
 80180d4:	2301      	movs	r3, #1
}
 80180d6:	4618      	mov	r0, r3
 80180d8:	370c      	adds	r7, #12
 80180da:	46bd      	mov	sp, r7
 80180dc:	bc80      	pop	{r7}
 80180de:	4770      	bx	lr

080180e0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80180e0:	b480      	push	{r7}
 80180e2:	b085      	sub	sp, #20
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	4603      	mov	r3, r0
 80180e8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80180ea:	2300      	movs	r3, #0
 80180ec:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80180ee:	79fb      	ldrb	r3, [r7, #7]
 80180f0:	2b0a      	cmp	r3, #10
 80180f2:	d83e      	bhi.n	8018172 <RadioGetLoRaBandwidthInHz+0x92>
 80180f4:	a201      	add	r2, pc, #4	@ (adr r2, 80180fc <RadioGetLoRaBandwidthInHz+0x1c>)
 80180f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180fa:	bf00      	nop
 80180fc:	08018129 	.word	0x08018129
 8018100:	08018139 	.word	0x08018139
 8018104:	08018149 	.word	0x08018149
 8018108:	08018159 	.word	0x08018159
 801810c:	08018161 	.word	0x08018161
 8018110:	08018167 	.word	0x08018167
 8018114:	0801816d 	.word	0x0801816d
 8018118:	08018173 	.word	0x08018173
 801811c:	08018131 	.word	0x08018131
 8018120:	08018141 	.word	0x08018141
 8018124:	08018151 	.word	0x08018151
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8018128:	f641 6384 	movw	r3, #7812	@ 0x1e84
 801812c:	60fb      	str	r3, [r7, #12]
        break;
 801812e:	e020      	b.n	8018172 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8018130:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8018134:	60fb      	str	r3, [r7, #12]
        break;
 8018136:	e01c      	b.n	8018172 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8018138:	f643 5309 	movw	r3, #15625	@ 0x3d09
 801813c:	60fb      	str	r3, [r7, #12]
        break;
 801813e:	e018      	b.n	8018172 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8018140:	f245 1361 	movw	r3, #20833	@ 0x5161
 8018144:	60fb      	str	r3, [r7, #12]
        break;
 8018146:	e014      	b.n	8018172 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8018148:	f647 2312 	movw	r3, #31250	@ 0x7a12
 801814c:	60fb      	str	r3, [r7, #12]
        break;
 801814e:	e010      	b.n	8018172 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8018150:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8018154:	60fb      	str	r3, [r7, #12]
        break;
 8018156:	e00c      	b.n	8018172 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8018158:	f24f 4324 	movw	r3, #62500	@ 0xf424
 801815c:	60fb      	str	r3, [r7, #12]
        break;
 801815e:	e008      	b.n	8018172 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8018160:	4b07      	ldr	r3, [pc, #28]	@ (8018180 <RadioGetLoRaBandwidthInHz+0xa0>)
 8018162:	60fb      	str	r3, [r7, #12]
        break;
 8018164:	e005      	b.n	8018172 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8018166:	4b07      	ldr	r3, [pc, #28]	@ (8018184 <RadioGetLoRaBandwidthInHz+0xa4>)
 8018168:	60fb      	str	r3, [r7, #12]
        break;
 801816a:	e002      	b.n	8018172 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801816c:	4b06      	ldr	r3, [pc, #24]	@ (8018188 <RadioGetLoRaBandwidthInHz+0xa8>)
 801816e:	60fb      	str	r3, [r7, #12]
        break;
 8018170:	bf00      	nop
    }

    return bandwidthInHz;
 8018172:	68fb      	ldr	r3, [r7, #12]
}
 8018174:	4618      	mov	r0, r3
 8018176:	3714      	adds	r7, #20
 8018178:	46bd      	mov	sp, r7
 801817a:	bc80      	pop	{r7}
 801817c:	4770      	bx	lr
 801817e:	bf00      	nop
 8018180:	0001e848 	.word	0x0001e848
 8018184:	0003d090 	.word	0x0003d090
 8018188:	0007a120 	.word	0x0007a120

0801818c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801818c:	b480      	push	{r7}
 801818e:	b083      	sub	sp, #12
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
 8018194:	4608      	mov	r0, r1
 8018196:	4611      	mov	r1, r2
 8018198:	461a      	mov	r2, r3
 801819a:	4603      	mov	r3, r0
 801819c:	70fb      	strb	r3, [r7, #3]
 801819e:	460b      	mov	r3, r1
 80181a0:	803b      	strh	r3, [r7, #0]
 80181a2:	4613      	mov	r3, r2
 80181a4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80181a6:	883b      	ldrh	r3, [r7, #0]
 80181a8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80181aa:	78ba      	ldrb	r2, [r7, #2]
 80181ac:	f082 0201 	eor.w	r2, r2, #1
 80181b0:	b2d2      	uxtb	r2, r2
 80181b2:	2a00      	cmp	r2, #0
 80181b4:	d001      	beq.n	80181ba <RadioGetGfskTimeOnAirNumerator+0x2e>
 80181b6:	2208      	movs	r2, #8
 80181b8:	e000      	b.n	80181bc <RadioGetGfskTimeOnAirNumerator+0x30>
 80181ba:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80181bc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80181be:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80181c2:	7c3b      	ldrb	r3, [r7, #16]
 80181c4:	7d39      	ldrb	r1, [r7, #20]
 80181c6:	2900      	cmp	r1, #0
 80181c8:	d001      	beq.n	80181ce <RadioGetGfskTimeOnAirNumerator+0x42>
 80181ca:	2102      	movs	r1, #2
 80181cc:	e000      	b.n	80181d0 <RadioGetGfskTimeOnAirNumerator+0x44>
 80181ce:	2100      	movs	r1, #0
 80181d0:	440b      	add	r3, r1
 80181d2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80181d4:	4413      	add	r3, r2
}
 80181d6:	4618      	mov	r0, r3
 80181d8:	370c      	adds	r7, #12
 80181da:	46bd      	mov	sp, r7
 80181dc:	bc80      	pop	{r7}
 80181de:	4770      	bx	lr

080181e0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80181e0:	b480      	push	{r7}
 80181e2:	b08b      	sub	sp, #44	@ 0x2c
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	60f8      	str	r0, [r7, #12]
 80181e8:	60b9      	str	r1, [r7, #8]
 80181ea:	4611      	mov	r1, r2
 80181ec:	461a      	mov	r2, r3
 80181ee:	460b      	mov	r3, r1
 80181f0:	71fb      	strb	r3, [r7, #7]
 80181f2:	4613      	mov	r3, r2
 80181f4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80181f6:	79fb      	ldrb	r3, [r7, #7]
 80181f8:	3304      	adds	r3, #4
 80181fa:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80181fc:	2300      	movs	r3, #0
 80181fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8018202:	68bb      	ldr	r3, [r7, #8]
 8018204:	2b05      	cmp	r3, #5
 8018206:	d002      	beq.n	801820e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8018208:	68bb      	ldr	r3, [r7, #8]
 801820a:	2b06      	cmp	r3, #6
 801820c:	d104      	bne.n	8018218 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801820e:	88bb      	ldrh	r3, [r7, #4]
 8018210:	2b0b      	cmp	r3, #11
 8018212:	d801      	bhi.n	8018218 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8018214:	230c      	movs	r3, #12
 8018216:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	2b00      	cmp	r3, #0
 801821c:	d105      	bne.n	801822a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801821e:	68bb      	ldr	r3, [r7, #8]
 8018220:	2b0b      	cmp	r3, #11
 8018222:	d008      	beq.n	8018236 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018224:	68bb      	ldr	r3, [r7, #8]
 8018226:	2b0c      	cmp	r3, #12
 8018228:	d005      	beq.n	8018236 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	2b01      	cmp	r3, #1
 801822e:	d105      	bne.n	801823c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018230:	68bb      	ldr	r3, [r7, #8]
 8018232:	2b0c      	cmp	r3, #12
 8018234:	d102      	bne.n	801823c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8018236:	2301      	movs	r3, #1
 8018238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801823c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8018240:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8018242:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8018246:	2a00      	cmp	r2, #0
 8018248:	d001      	beq.n	801824e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801824a:	2210      	movs	r2, #16
 801824c:	e000      	b.n	8018250 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801824e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018250:	4413      	add	r3, r2
 8018252:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8018254:	68bb      	ldr	r3, [r7, #8]
 8018256:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8018258:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801825a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801825e:	2a00      	cmp	r2, #0
 8018260:	d001      	beq.n	8018266 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8018262:	2200      	movs	r2, #0
 8018264:	e000      	b.n	8018268 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8018266:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8018268:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801826a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801826c:	68bb      	ldr	r3, [r7, #8]
 801826e:	2b06      	cmp	r3, #6
 8018270:	d803      	bhi.n	801827a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8018272:	68bb      	ldr	r3, [r7, #8]
 8018274:	009b      	lsls	r3, r3, #2
 8018276:	623b      	str	r3, [r7, #32]
 8018278:	e00e      	b.n	8018298 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801827a:	69fb      	ldr	r3, [r7, #28]
 801827c:	3308      	adds	r3, #8
 801827e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8018280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018284:	2b00      	cmp	r3, #0
 8018286:	d004      	beq.n	8018292 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8018288:	68bb      	ldr	r3, [r7, #8]
 801828a:	3b02      	subs	r3, #2
 801828c:	009b      	lsls	r3, r3, #2
 801828e:	623b      	str	r3, [r7, #32]
 8018290:	e002      	b.n	8018298 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8018292:	68bb      	ldr	r3, [r7, #8]
 8018294:	009b      	lsls	r3, r3, #2
 8018296:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8018298:	69fb      	ldr	r3, [r7, #28]
 801829a:	2b00      	cmp	r3, #0
 801829c:	da01      	bge.n	80182a2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801829e:	2300      	movs	r3, #0
 80182a0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80182a2:	69fa      	ldr	r2, [r7, #28]
 80182a4:	6a3b      	ldr	r3, [r7, #32]
 80182a6:	4413      	add	r3, r2
 80182a8:	1e5a      	subs	r2, r3, #1
 80182aa:	6a3b      	ldr	r3, [r7, #32]
 80182ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80182b0:	697a      	ldr	r2, [r7, #20]
 80182b2:	fb03 f202 	mul.w	r2, r3, r2
 80182b6:	88bb      	ldrh	r3, [r7, #4]
 80182b8:	4413      	add	r3, r2
    int32_t intermediate =
 80182ba:	330c      	adds	r3, #12
 80182bc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80182be:	68bb      	ldr	r3, [r7, #8]
 80182c0:	2b06      	cmp	r3, #6
 80182c2:	d802      	bhi.n	80182ca <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80182c4:	69bb      	ldr	r3, [r7, #24]
 80182c6:	3302      	adds	r3, #2
 80182c8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80182ca:	69bb      	ldr	r3, [r7, #24]
 80182cc:	009b      	lsls	r3, r3, #2
 80182ce:	1c5a      	adds	r2, r3, #1
 80182d0:	68bb      	ldr	r3, [r7, #8]
 80182d2:	3b02      	subs	r3, #2
 80182d4:	fa02 f303 	lsl.w	r3, r2, r3
}
 80182d8:	4618      	mov	r0, r3
 80182da:	372c      	adds	r7, #44	@ 0x2c
 80182dc:	46bd      	mov	sp, r7
 80182de:	bc80      	pop	{r7}
 80182e0:	4770      	bx	lr
	...

080182e4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b08a      	sub	sp, #40	@ 0x28
 80182e8:	af04      	add	r7, sp, #16
 80182ea:	60b9      	str	r1, [r7, #8]
 80182ec:	607a      	str	r2, [r7, #4]
 80182ee:	461a      	mov	r2, r3
 80182f0:	4603      	mov	r3, r0
 80182f2:	73fb      	strb	r3, [r7, #15]
 80182f4:	4613      	mov	r3, r2
 80182f6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80182f8:	2300      	movs	r3, #0
 80182fa:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80182fc:	2301      	movs	r3, #1
 80182fe:	613b      	str	r3, [r7, #16]

    switch( modem )
 8018300:	7bfb      	ldrb	r3, [r7, #15]
 8018302:	2b00      	cmp	r3, #0
 8018304:	d002      	beq.n	801830c <RadioTimeOnAir+0x28>
 8018306:	2b01      	cmp	r3, #1
 8018308:	d017      	beq.n	801833a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801830a:	e035      	b.n	8018378 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801830c:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8018310:	8c3a      	ldrh	r2, [r7, #32]
 8018312:	7bb9      	ldrb	r1, [r7, #14]
 8018314:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018318:	9301      	str	r3, [sp, #4]
 801831a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801831e:	9300      	str	r3, [sp, #0]
 8018320:	4603      	mov	r3, r0
 8018322:	6878      	ldr	r0, [r7, #4]
 8018324:	f7ff ff32 	bl	801818c <RadioGetGfskTimeOnAirNumerator>
 8018328:	4603      	mov	r3, r0
 801832a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801832e:	fb02 f303 	mul.w	r3, r2, r3
 8018332:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	613b      	str	r3, [r7, #16]
        break;
 8018338:	e01e      	b.n	8018378 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801833a:	8c39      	ldrh	r1, [r7, #32]
 801833c:	7bba      	ldrb	r2, [r7, #14]
 801833e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018342:	9302      	str	r3, [sp, #8]
 8018344:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018348:	9301      	str	r3, [sp, #4]
 801834a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801834e:	9300      	str	r3, [sp, #0]
 8018350:	460b      	mov	r3, r1
 8018352:	6879      	ldr	r1, [r7, #4]
 8018354:	68b8      	ldr	r0, [r7, #8]
 8018356:	f7ff ff43 	bl	80181e0 <RadioGetLoRaTimeOnAirNumerator>
 801835a:	4603      	mov	r3, r0
 801835c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018360:	fb02 f303 	mul.w	r3, r2, r3
 8018364:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8018366:	4a0a      	ldr	r2, [pc, #40]	@ (8018390 <RadioTimeOnAir+0xac>)
 8018368:	68bb      	ldr	r3, [r7, #8]
 801836a:	4413      	add	r3, r2
 801836c:	781b      	ldrb	r3, [r3, #0]
 801836e:	4618      	mov	r0, r3
 8018370:	f7ff feb6 	bl	80180e0 <RadioGetLoRaBandwidthInHz>
 8018374:	6138      	str	r0, [r7, #16]
        break;
 8018376:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8018378:	697a      	ldr	r2, [r7, #20]
 801837a:	693b      	ldr	r3, [r7, #16]
 801837c:	4413      	add	r3, r2
 801837e:	1e5a      	subs	r2, r3, #1
 8018380:	693b      	ldr	r3, [r7, #16]
 8018382:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018386:	4618      	mov	r0, r3
 8018388:	3718      	adds	r7, #24
 801838a:	46bd      	mov	sp, r7
 801838c:	bd80      	pop	{r7, pc}
 801838e:	bf00      	nop
 8018390:	0801d8f8 	.word	0x0801d8f8

08018394 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8018394:	b580      	push	{r7, lr}
 8018396:	b084      	sub	sp, #16
 8018398:	af00      	add	r7, sp, #0
 801839a:	6078      	str	r0, [r7, #4]
 801839c:	460b      	mov	r3, r1
 801839e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80183a0:	2300      	movs	r3, #0
 80183a2:	2200      	movs	r2, #0
 80183a4:	f240 2101 	movw	r1, #513	@ 0x201
 80183a8:	f240 2001 	movw	r0, #513	@ 0x201
 80183ac:	f001 fd64 	bl	8019e78 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80183b0:	4b73      	ldr	r3, [pc, #460]	@ (8018580 <RadioSend+0x1ec>)
 80183b2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80183b6:	2101      	movs	r1, #1
 80183b8:	4618      	mov	r0, r3
 80183ba:	f002 fa01 	bl	801a7c0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80183be:	4b70      	ldr	r3, [pc, #448]	@ (8018580 <RadioSend+0x1ec>)
 80183c0:	781b      	ldrb	r3, [r3, #0]
 80183c2:	2b01      	cmp	r3, #1
 80183c4:	d112      	bne.n	80183ec <RadioSend+0x58>
 80183c6:	4b6e      	ldr	r3, [pc, #440]	@ (8018580 <RadioSend+0x1ec>)
 80183c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80183cc:	2b06      	cmp	r3, #6
 80183ce:	d10d      	bne.n	80183ec <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80183d0:	f640 0089 	movw	r0, #2185	@ 0x889
 80183d4:	f002 f914 	bl	801a600 <SUBGRF_ReadRegister>
 80183d8:	4603      	mov	r3, r0
 80183da:	f023 0304 	bic.w	r3, r3, #4
 80183de:	b2db      	uxtb	r3, r3
 80183e0:	4619      	mov	r1, r3
 80183e2:	f640 0089 	movw	r0, #2185	@ 0x889
 80183e6:	f002 f8f7 	bl	801a5d8 <SUBGRF_WriteRegister>
 80183ea:	e00c      	b.n	8018406 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80183ec:	f640 0089 	movw	r0, #2185	@ 0x889
 80183f0:	f002 f906 	bl	801a600 <SUBGRF_ReadRegister>
 80183f4:	4603      	mov	r3, r0
 80183f6:	f043 0304 	orr.w	r3, r3, #4
 80183fa:	b2db      	uxtb	r3, r3
 80183fc:	4619      	mov	r1, r3
 80183fe:	f640 0089 	movw	r0, #2185	@ 0x889
 8018402:	f002 f8e9 	bl	801a5d8 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8018406:	4b5e      	ldr	r3, [pc, #376]	@ (8018580 <RadioSend+0x1ec>)
 8018408:	781b      	ldrb	r3, [r3, #0]
 801840a:	2b04      	cmp	r3, #4
 801840c:	f200 80a8 	bhi.w	8018560 <RadioSend+0x1cc>
 8018410:	a201      	add	r2, pc, #4	@ (adr r2, 8018418 <RadioSend+0x84>)
 8018412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018416:	bf00      	nop
 8018418:	08018447 	.word	0x08018447
 801841c:	0801842d 	.word	0x0801842d
 8018420:	08018447 	.word	0x08018447
 8018424:	080184a9 	.word	0x080184a9
 8018428:	080184c9 	.word	0x080184c9
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801842c:	4a54      	ldr	r2, [pc, #336]	@ (8018580 <RadioSend+0x1ec>)
 801842e:	78fb      	ldrb	r3, [r7, #3]
 8018430:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018432:	4854      	ldr	r0, [pc, #336]	@ (8018584 <RadioSend+0x1f0>)
 8018434:	f001 ff88 	bl	801a348 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018438:	78fb      	ldrb	r3, [r7, #3]
 801843a:	2200      	movs	r2, #0
 801843c:	4619      	mov	r1, r3
 801843e:	6878      	ldr	r0, [r7, #4]
 8018440:	f001 fa38 	bl	80198b4 <SUBGRF_SendPayload>
            break;
 8018444:	e08d      	b.n	8018562 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8018446:	f002 fbb4 	bl	801abb2 <RFW_Is_Init>
 801844a:	4603      	mov	r3, r0
 801844c:	2b01      	cmp	r3, #1
 801844e:	d11e      	bne.n	801848e <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8018450:	f107 020d 	add.w	r2, r7, #13
 8018454:	78fb      	ldrb	r3, [r7, #3]
 8018456:	4619      	mov	r1, r3
 8018458:	6878      	ldr	r0, [r7, #4]
 801845a:	f002 fbc2 	bl	801abe2 <RFW_TransmitInit>
 801845e:	4603      	mov	r3, r0
 8018460:	2b00      	cmp	r3, #0
 8018462:	d10c      	bne.n	801847e <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8018464:	7b7a      	ldrb	r2, [r7, #13]
 8018466:	4b46      	ldr	r3, [pc, #280]	@ (8018580 <RadioSend+0x1ec>)
 8018468:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801846a:	4846      	ldr	r0, [pc, #280]	@ (8018584 <RadioSend+0x1f0>)
 801846c:	f001 ff6c 	bl	801a348 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8018470:	7b7b      	ldrb	r3, [r7, #13]
 8018472:	2200      	movs	r2, #0
 8018474:	4619      	mov	r1, r3
 8018476:	6878      	ldr	r0, [r7, #4]
 8018478:	f001 fa1c 	bl	80198b4 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801847c:	e071      	b.n	8018562 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801847e:	4b42      	ldr	r3, [pc, #264]	@ (8018588 <RadioSend+0x1f4>)
 8018480:	2201      	movs	r2, #1
 8018482:	2100      	movs	r1, #0
 8018484:	2002      	movs	r0, #2
 8018486:	f003 fccb 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801848a:	2303      	movs	r3, #3
 801848c:	e073      	b.n	8018576 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801848e:	4a3c      	ldr	r2, [pc, #240]	@ (8018580 <RadioSend+0x1ec>)
 8018490:	78fb      	ldrb	r3, [r7, #3]
 8018492:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018494:	483b      	ldr	r0, [pc, #236]	@ (8018584 <RadioSend+0x1f0>)
 8018496:	f001 ff57 	bl	801a348 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801849a:	78fb      	ldrb	r3, [r7, #3]
 801849c:	2200      	movs	r2, #0
 801849e:	4619      	mov	r1, r3
 80184a0:	6878      	ldr	r0, [r7, #4]
 80184a2:	f001 fa07 	bl	80198b4 <SUBGRF_SendPayload>
            break;
 80184a6:	e05c      	b.n	8018562 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80184a8:	4b35      	ldr	r3, [pc, #212]	@ (8018580 <RadioSend+0x1ec>)
 80184aa:	2202      	movs	r2, #2
 80184ac:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80184ae:	4a34      	ldr	r2, [pc, #208]	@ (8018580 <RadioSend+0x1ec>)
 80184b0:	78fb      	ldrb	r3, [r7, #3]
 80184b2:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80184b4:	4833      	ldr	r0, [pc, #204]	@ (8018584 <RadioSend+0x1f0>)
 80184b6:	f001 ff47 	bl	801a348 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80184ba:	78fb      	ldrb	r3, [r7, #3]
 80184bc:	2200      	movs	r2, #0
 80184be:	4619      	mov	r1, r3
 80184c0:	6878      	ldr	r0, [r7, #4]
 80184c2:	f001 f9f7 	bl	80198b4 <SUBGRF_SendPayload>
            break;
 80184c6:	e04c      	b.n	8018562 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80184c8:	78fb      	ldrb	r3, [r7, #3]
 80184ca:	461a      	mov	r2, r3
 80184cc:	6879      	ldr	r1, [r7, #4]
 80184ce:	482f      	ldr	r0, [pc, #188]	@ (801858c <RadioSend+0x1f8>)
 80184d0:	f000 fcca 	bl	8018e68 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80184d4:	4b2a      	ldr	r3, [pc, #168]	@ (8018580 <RadioSend+0x1ec>)
 80184d6:	2202      	movs	r2, #2
 80184d8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80184da:	78fb      	ldrb	r3, [r7, #3]
 80184dc:	3301      	adds	r3, #1
 80184de:	b2da      	uxtb	r2, r3
 80184e0:	4b27      	ldr	r3, [pc, #156]	@ (8018580 <RadioSend+0x1ec>)
 80184e2:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80184e4:	4827      	ldr	r0, [pc, #156]	@ (8018584 <RadioSend+0x1f0>)
 80184e6:	f001 ff2f 	bl	801a348 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 80184ea:	2100      	movs	r1, #0
 80184ec:	20f1      	movs	r0, #241	@ 0xf1
 80184ee:	f000 f965 	bl	80187bc <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 80184f2:	2100      	movs	r1, #0
 80184f4:	20f0      	movs	r0, #240	@ 0xf0
 80184f6:	f000 f961 	bl	80187bc <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80184fa:	4b21      	ldr	r3, [pc, #132]	@ (8018580 <RadioSend+0x1ec>)
 80184fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80184fe:	2b64      	cmp	r3, #100	@ 0x64
 8018500:	d108      	bne.n	8018514 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8018502:	2170      	movs	r1, #112	@ 0x70
 8018504:	20f3      	movs	r0, #243	@ 0xf3
 8018506:	f000 f959 	bl	80187bc <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801850a:	211d      	movs	r1, #29
 801850c:	20f2      	movs	r0, #242	@ 0xf2
 801850e:	f000 f955 	bl	80187bc <RadioWrite>
 8018512:	e007      	b.n	8018524 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8018514:	21e1      	movs	r1, #225	@ 0xe1
 8018516:	20f3      	movs	r0, #243	@ 0xf3
 8018518:	f000 f950 	bl	80187bc <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801851c:	2104      	movs	r1, #4
 801851e:	20f2      	movs	r0, #242	@ 0xf2
 8018520:	f000 f94c 	bl	80187bc <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8018524:	78fb      	ldrb	r3, [r7, #3]
 8018526:	b29b      	uxth	r3, r3
 8018528:	00db      	lsls	r3, r3, #3
 801852a:	b29b      	uxth	r3, r3
 801852c:	3302      	adds	r3, #2
 801852e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8018530:	89fb      	ldrh	r3, [r7, #14]
 8018532:	0a1b      	lsrs	r3, r3, #8
 8018534:	b29b      	uxth	r3, r3
 8018536:	b2db      	uxtb	r3, r3
 8018538:	4619      	mov	r1, r3
 801853a:	20f4      	movs	r0, #244	@ 0xf4
 801853c:	f000 f93e 	bl	80187bc <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8018540:	89fb      	ldrh	r3, [r7, #14]
 8018542:	b2db      	uxtb	r3, r3
 8018544:	4619      	mov	r1, r3
 8018546:	20f5      	movs	r0, #245	@ 0xf5
 8018548:	f000 f938 	bl	80187bc <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801854c:	78fb      	ldrb	r3, [r7, #3]
 801854e:	3301      	adds	r3, #1
 8018550:	b2db      	uxtb	r3, r3
 8018552:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8018556:	4619      	mov	r1, r3
 8018558:	480c      	ldr	r0, [pc, #48]	@ (801858c <RadioSend+0x1f8>)
 801855a:	f001 f9ab 	bl	80198b4 <SUBGRF_SendPayload>
            break;
 801855e:	e000      	b.n	8018562 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018560:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8018562:	4b07      	ldr	r3, [pc, #28]	@ (8018580 <RadioSend+0x1ec>)
 8018564:	685b      	ldr	r3, [r3, #4]
 8018566:	4619      	mov	r1, r3
 8018568:	4809      	ldr	r0, [pc, #36]	@ (8018590 <RadioSend+0x1fc>)
 801856a:	f003 fabf 	bl	801baec <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801856e:	4808      	ldr	r0, [pc, #32]	@ (8018590 <RadioSend+0x1fc>)
 8018570:	f003 f9de 	bl	801b930 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8018574:	2300      	movs	r3, #0
}
 8018576:	4618      	mov	r0, r3
 8018578:	3710      	adds	r7, #16
 801857a:	46bd      	mov	sp, r7
 801857c:	bd80      	pop	{r7, pc}
 801857e:	bf00      	nop
 8018580:	20001438 	.word	0x20001438
 8018584:	20001446 	.word	0x20001446
 8018588:	0801d214 	.word	0x0801d214
 801858c:	20001334 	.word	0x20001334
 8018590:	20001494 	.word	0x20001494

08018594 <RadioSleep>:

static void RadioSleep( void )
{
 8018594:	b580      	push	{r7, lr}
 8018596:	b082      	sub	sp, #8
 8018598:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801859a:	2300      	movs	r3, #0
 801859c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801859e:	793b      	ldrb	r3, [r7, #4]
 80185a0:	f043 0304 	orr.w	r3, r3, #4
 80185a4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80185a6:	7938      	ldrb	r0, [r7, #4]
 80185a8:	f001 fa60 	bl	8019a6c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80185ac:	2002      	movs	r0, #2
 80185ae:	f7e9 fb23 	bl	8001bf8 <HAL_Delay>
}
 80185b2:	bf00      	nop
 80185b4:	3708      	adds	r7, #8
 80185b6:	46bd      	mov	sp, r7
 80185b8:	bd80      	pop	{r7, pc}

080185ba <RadioStandby>:

static void RadioStandby( void )
{
 80185ba:	b580      	push	{r7, lr}
 80185bc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80185be:	2000      	movs	r0, #0
 80185c0:	f001 fa86 	bl	8019ad0 <SUBGRF_SetStandby>
}
 80185c4:	bf00      	nop
 80185c6:	bd80      	pop	{r7, pc}

080185c8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b082      	sub	sp, #8
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 80185d0:	f002 faef 	bl	801abb2 <RFW_Is_Init>
 80185d4:	4603      	mov	r3, r0
 80185d6:	2b01      	cmp	r3, #1
 80185d8:	d102      	bne.n	80185e0 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80185da:	f002 fb12 	bl	801ac02 <RFW_ReceiveInit>
 80185de:	e007      	b.n	80185f0 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80185e0:	2300      	movs	r3, #0
 80185e2:	2200      	movs	r2, #0
 80185e4:	f240 2162 	movw	r1, #610	@ 0x262
 80185e8:	f240 2062 	movw	r0, #610	@ 0x262
 80185ec:	f001 fc44 	bl	8019e78 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d006      	beq.n	8018604 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80185f6:	6879      	ldr	r1, [r7, #4]
 80185f8:	4811      	ldr	r0, [pc, #68]	@ (8018640 <RadioRx+0x78>)
 80185fa:	f003 fa77 	bl	801baec <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80185fe:	4810      	ldr	r0, [pc, #64]	@ (8018640 <RadioRx+0x78>)
 8018600:	f003 f996 	bl	801b930 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018604:	4b0f      	ldr	r3, [pc, #60]	@ (8018644 <RadioRx+0x7c>)
 8018606:	2200      	movs	r2, #0
 8018608:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801860a:	4b0e      	ldr	r3, [pc, #56]	@ (8018644 <RadioRx+0x7c>)
 801860c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018610:	2100      	movs	r1, #0
 8018612:	4618      	mov	r0, r3
 8018614:	f002 f8d4 	bl	801a7c0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8018618:	4b0a      	ldr	r3, [pc, #40]	@ (8018644 <RadioRx+0x7c>)
 801861a:	785b      	ldrb	r3, [r3, #1]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d004      	beq.n	801862a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018620:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018624:	f001 fa90 	bl	8019b48 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8018628:	e005      	b.n	8018636 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801862a:	4b06      	ldr	r3, [pc, #24]	@ (8018644 <RadioRx+0x7c>)
 801862c:	689b      	ldr	r3, [r3, #8]
 801862e:	019b      	lsls	r3, r3, #6
 8018630:	4618      	mov	r0, r3
 8018632:	f001 fa89 	bl	8019b48 <SUBGRF_SetRx>
}
 8018636:	bf00      	nop
 8018638:	3708      	adds	r7, #8
 801863a:	46bd      	mov	sp, r7
 801863c:	bd80      	pop	{r7, pc}
 801863e:	bf00      	nop
 8018640:	200014ac 	.word	0x200014ac
 8018644:	20001438 	.word	0x20001438

08018648 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8018648:	b580      	push	{r7, lr}
 801864a:	b082      	sub	sp, #8
 801864c:	af00      	add	r7, sp, #0
 801864e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8018650:	f002 faaf 	bl	801abb2 <RFW_Is_Init>
 8018654:	4603      	mov	r3, r0
 8018656:	2b01      	cmp	r3, #1
 8018658:	d102      	bne.n	8018660 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801865a:	f002 fad2 	bl	801ac02 <RFW_ReceiveInit>
 801865e:	e007      	b.n	8018670 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018660:	2300      	movs	r3, #0
 8018662:	2200      	movs	r2, #0
 8018664:	f240 2162 	movw	r1, #610	@ 0x262
 8018668:	f240 2062 	movw	r0, #610	@ 0x262
 801866c:	f001 fc04 	bl	8019e78 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	2b00      	cmp	r3, #0
 8018674:	d006      	beq.n	8018684 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8018676:	6879      	ldr	r1, [r7, #4]
 8018678:	4811      	ldr	r0, [pc, #68]	@ (80186c0 <RadioRxBoosted+0x78>)
 801867a:	f003 fa37 	bl	801baec <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801867e:	4810      	ldr	r0, [pc, #64]	@ (80186c0 <RadioRxBoosted+0x78>)
 8018680:	f003 f956 	bl	801b930 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018684:	4b0f      	ldr	r3, [pc, #60]	@ (80186c4 <RadioRxBoosted+0x7c>)
 8018686:	2200      	movs	r2, #0
 8018688:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801868a:	4b0e      	ldr	r3, [pc, #56]	@ (80186c4 <RadioRxBoosted+0x7c>)
 801868c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018690:	2100      	movs	r1, #0
 8018692:	4618      	mov	r0, r3
 8018694:	f002 f894 	bl	801a7c0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8018698:	4b0a      	ldr	r3, [pc, #40]	@ (80186c4 <RadioRxBoosted+0x7c>)
 801869a:	785b      	ldrb	r3, [r3, #1]
 801869c:	2b00      	cmp	r3, #0
 801869e:	d004      	beq.n	80186aa <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80186a0:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80186a4:	f001 fa70 	bl	8019b88 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80186a8:	e005      	b.n	80186b6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80186aa:	4b06      	ldr	r3, [pc, #24]	@ (80186c4 <RadioRxBoosted+0x7c>)
 80186ac:	689b      	ldr	r3, [r3, #8]
 80186ae:	019b      	lsls	r3, r3, #6
 80186b0:	4618      	mov	r0, r3
 80186b2:	f001 fa69 	bl	8019b88 <SUBGRF_SetRxBoosted>
}
 80186b6:	bf00      	nop
 80186b8:	3708      	adds	r7, #8
 80186ba:	46bd      	mov	sp, r7
 80186bc:	bd80      	pop	{r7, pc}
 80186be:	bf00      	nop
 80186c0:	200014ac 	.word	0x200014ac
 80186c4:	20001438 	.word	0x20001438

080186c8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80186c8:	b580      	push	{r7, lr}
 80186ca:	b082      	sub	sp, #8
 80186cc:	af00      	add	r7, sp, #0
 80186ce:	6078      	str	r0, [r7, #4]
 80186d0:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	005a      	lsls	r2, r3, #1
 80186d6:	683b      	ldr	r3, [r7, #0]
 80186d8:	4413      	add	r3, r2
 80186da:	4a0c      	ldr	r2, [pc, #48]	@ (801870c <RadioSetRxDutyCycle+0x44>)
 80186dc:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80186de:	2300      	movs	r3, #0
 80186e0:	2200      	movs	r2, #0
 80186e2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80186e6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80186ea:	f001 fbc5 	bl	8019e78 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80186ee:	4b07      	ldr	r3, [pc, #28]	@ (801870c <RadioSetRxDutyCycle+0x44>)
 80186f0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80186f4:	2100      	movs	r1, #0
 80186f6:	4618      	mov	r0, r3
 80186f8:	f002 f862 	bl	801a7c0 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80186fc:	6839      	ldr	r1, [r7, #0]
 80186fe:	6878      	ldr	r0, [r7, #4]
 8018700:	f001 fa66 	bl	8019bd0 <SUBGRF_SetRxDutyCycle>
}
 8018704:	bf00      	nop
 8018706:	3708      	adds	r7, #8
 8018708:	46bd      	mov	sp, r7
 801870a:	bd80      	pop	{r7, pc}
 801870c:	20001438 	.word	0x20001438

08018710 <RadioStartCad>:

static void RadioStartCad( void )
{
 8018710:	b580      	push	{r7, lr}
 8018712:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018714:	4b09      	ldr	r3, [pc, #36]	@ (801873c <RadioStartCad+0x2c>)
 8018716:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801871a:	2100      	movs	r1, #0
 801871c:	4618      	mov	r0, r3
 801871e:	f002 f84f 	bl	801a7c0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8018722:	2300      	movs	r3, #0
 8018724:	2200      	movs	r2, #0
 8018726:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 801872a:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801872e:	f001 fba3 	bl	8019e78 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8018732:	f001 fa79 	bl	8019c28 <SUBGRF_SetCad>
}
 8018736:	bf00      	nop
 8018738:	bd80      	pop	{r7, pc}
 801873a:	bf00      	nop
 801873c:	20001438 	.word	0x20001438

08018740 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8018740:	b580      	push	{r7, lr}
 8018742:	b084      	sub	sp, #16
 8018744:	af00      	add	r7, sp, #0
 8018746:	6078      	str	r0, [r7, #4]
 8018748:	460b      	mov	r3, r1
 801874a:	70fb      	strb	r3, [r7, #3]
 801874c:	4613      	mov	r3, r2
 801874e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8018750:	883b      	ldrh	r3, [r7, #0]
 8018752:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018756:	fb02 f303 	mul.w	r3, r2, r3
 801875a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801875c:	6878      	ldr	r0, [r7, #4]
 801875e:	f001 fbe7 	bl	8019f30 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8018762:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018766:	4618      	mov	r0, r3
 8018768:	f002 f852 	bl	801a810 <SUBGRF_SetRfTxPower>
 801876c:	4603      	mov	r3, r0
 801876e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018770:	210e      	movs	r1, #14
 8018772:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018776:	f001 ff2f 	bl	801a5d8 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801877a:	7afb      	ldrb	r3, [r7, #11]
 801877c:	2101      	movs	r1, #1
 801877e:	4618      	mov	r0, r3
 8018780:	f002 f81e 	bl	801a7c0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8018784:	f001 fa5e 	bl	8019c44 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8018788:	68f9      	ldr	r1, [r7, #12]
 801878a:	4805      	ldr	r0, [pc, #20]	@ (80187a0 <RadioSetTxContinuousWave+0x60>)
 801878c:	f003 f9ae 	bl	801baec <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8018790:	4803      	ldr	r0, [pc, #12]	@ (80187a0 <RadioSetTxContinuousWave+0x60>)
 8018792:	f003 f8cd 	bl	801b930 <UTIL_TIMER_Start>
}
 8018796:	bf00      	nop
 8018798:	3710      	adds	r7, #16
 801879a:	46bd      	mov	sp, r7
 801879c:	bd80      	pop	{r7, pc}
 801879e:	bf00      	nop
 80187a0:	20001494 	.word	0x20001494

080187a4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80187a4:	b580      	push	{r7, lr}
 80187a6:	b082      	sub	sp, #8
 80187a8:	af00      	add	r7, sp, #0
 80187aa:	4603      	mov	r3, r0
 80187ac:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80187ae:	f001 fe80 	bl	801a4b2 <SUBGRF_GetRssiInst>
 80187b2:	4603      	mov	r3, r0
}
 80187b4:	4618      	mov	r0, r3
 80187b6:	3708      	adds	r7, #8
 80187b8:	46bd      	mov	sp, r7
 80187ba:	bd80      	pop	{r7, pc}

080187bc <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80187bc:	b580      	push	{r7, lr}
 80187be:	b082      	sub	sp, #8
 80187c0:	af00      	add	r7, sp, #0
 80187c2:	4603      	mov	r3, r0
 80187c4:	460a      	mov	r2, r1
 80187c6:	80fb      	strh	r3, [r7, #6]
 80187c8:	4613      	mov	r3, r2
 80187ca:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80187cc:	797a      	ldrb	r2, [r7, #5]
 80187ce:	88fb      	ldrh	r3, [r7, #6]
 80187d0:	4611      	mov	r1, r2
 80187d2:	4618      	mov	r0, r3
 80187d4:	f001 ff00 	bl	801a5d8 <SUBGRF_WriteRegister>
}
 80187d8:	bf00      	nop
 80187da:	3708      	adds	r7, #8
 80187dc:	46bd      	mov	sp, r7
 80187de:	bd80      	pop	{r7, pc}

080187e0 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80187e0:	b580      	push	{r7, lr}
 80187e2:	b082      	sub	sp, #8
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	4603      	mov	r3, r0
 80187e8:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80187ea:	88fb      	ldrh	r3, [r7, #6]
 80187ec:	4618      	mov	r0, r3
 80187ee:	f001 ff07 	bl	801a600 <SUBGRF_ReadRegister>
 80187f2:	4603      	mov	r3, r0
}
 80187f4:	4618      	mov	r0, r3
 80187f6:	3708      	adds	r7, #8
 80187f8:	46bd      	mov	sp, r7
 80187fa:	bd80      	pop	{r7, pc}

080187fc <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b082      	sub	sp, #8
 8018800:	af00      	add	r7, sp, #0
 8018802:	4603      	mov	r3, r0
 8018804:	6039      	str	r1, [r7, #0]
 8018806:	80fb      	strh	r3, [r7, #6]
 8018808:	4613      	mov	r3, r2
 801880a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801880c:	797b      	ldrb	r3, [r7, #5]
 801880e:	b29a      	uxth	r2, r3
 8018810:	88fb      	ldrh	r3, [r7, #6]
 8018812:	6839      	ldr	r1, [r7, #0]
 8018814:	4618      	mov	r0, r3
 8018816:	f001 ff07 	bl	801a628 <SUBGRF_WriteRegisters>
}
 801881a:	bf00      	nop
 801881c:	3708      	adds	r7, #8
 801881e:	46bd      	mov	sp, r7
 8018820:	bd80      	pop	{r7, pc}

08018822 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018822:	b580      	push	{r7, lr}
 8018824:	b082      	sub	sp, #8
 8018826:	af00      	add	r7, sp, #0
 8018828:	4603      	mov	r3, r0
 801882a:	6039      	str	r1, [r7, #0]
 801882c:	80fb      	strh	r3, [r7, #6]
 801882e:	4613      	mov	r3, r2
 8018830:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8018832:	797b      	ldrb	r3, [r7, #5]
 8018834:	b29a      	uxth	r2, r3
 8018836:	88fb      	ldrh	r3, [r7, #6]
 8018838:	6839      	ldr	r1, [r7, #0]
 801883a:	4618      	mov	r0, r3
 801883c:	f001 ff16 	bl	801a66c <SUBGRF_ReadRegisters>
}
 8018840:	bf00      	nop
 8018842:	3708      	adds	r7, #8
 8018844:	46bd      	mov	sp, r7
 8018846:	bd80      	pop	{r7, pc}

08018848 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8018848:	b580      	push	{r7, lr}
 801884a:	b082      	sub	sp, #8
 801884c:	af00      	add	r7, sp, #0
 801884e:	4603      	mov	r3, r0
 8018850:	460a      	mov	r2, r1
 8018852:	71fb      	strb	r3, [r7, #7]
 8018854:	4613      	mov	r3, r2
 8018856:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8018858:	79fb      	ldrb	r3, [r7, #7]
 801885a:	2b01      	cmp	r3, #1
 801885c:	d10a      	bne.n	8018874 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801885e:	4a0e      	ldr	r2, [pc, #56]	@ (8018898 <RadioSetMaxPayloadLength+0x50>)
 8018860:	79bb      	ldrb	r3, [r7, #6]
 8018862:	7013      	strb	r3, [r2, #0]
 8018864:	4b0c      	ldr	r3, [pc, #48]	@ (8018898 <RadioSetMaxPayloadLength+0x50>)
 8018866:	781a      	ldrb	r2, [r3, #0]
 8018868:	4b0c      	ldr	r3, [pc, #48]	@ (801889c <RadioSetMaxPayloadLength+0x54>)
 801886a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801886c:	480c      	ldr	r0, [pc, #48]	@ (80188a0 <RadioSetMaxPayloadLength+0x58>)
 801886e:	f001 fd6b 	bl	801a348 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8018872:	e00d      	b.n	8018890 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8018874:	4b09      	ldr	r3, [pc, #36]	@ (801889c <RadioSetMaxPayloadLength+0x54>)
 8018876:	7d5b      	ldrb	r3, [r3, #21]
 8018878:	2b01      	cmp	r3, #1
 801887a:	d109      	bne.n	8018890 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801887c:	4a06      	ldr	r2, [pc, #24]	@ (8018898 <RadioSetMaxPayloadLength+0x50>)
 801887e:	79bb      	ldrb	r3, [r7, #6]
 8018880:	7013      	strb	r3, [r2, #0]
 8018882:	4b05      	ldr	r3, [pc, #20]	@ (8018898 <RadioSetMaxPayloadLength+0x50>)
 8018884:	781a      	ldrb	r2, [r3, #0]
 8018886:	4b05      	ldr	r3, [pc, #20]	@ (801889c <RadioSetMaxPayloadLength+0x54>)
 8018888:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801888a:	4805      	ldr	r0, [pc, #20]	@ (80188a0 <RadioSetMaxPayloadLength+0x58>)
 801888c:	f001 fd5c 	bl	801a348 <SUBGRF_SetPacketParams>
}
 8018890:	bf00      	nop
 8018892:	3708      	adds	r7, #8
 8018894:	46bd      	mov	sp, r7
 8018896:	bd80      	pop	{r7, pc}
 8018898:	20000124 	.word	0x20000124
 801889c:	20001438 	.word	0x20001438
 80188a0:	20001446 	.word	0x20001446

080188a4 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80188a4:	b580      	push	{r7, lr}
 80188a6:	b082      	sub	sp, #8
 80188a8:	af00      	add	r7, sp, #0
 80188aa:	4603      	mov	r3, r0
 80188ac:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80188ae:	4a13      	ldr	r2, [pc, #76]	@ (80188fc <RadioSetPublicNetwork+0x58>)
 80188b0:	79fb      	ldrb	r3, [r7, #7]
 80188b2:	7313      	strb	r3, [r2, #12]
 80188b4:	4b11      	ldr	r3, [pc, #68]	@ (80188fc <RadioSetPublicNetwork+0x58>)
 80188b6:	7b1a      	ldrb	r2, [r3, #12]
 80188b8:	4b10      	ldr	r3, [pc, #64]	@ (80188fc <RadioSetPublicNetwork+0x58>)
 80188ba:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80188bc:	2001      	movs	r0, #1
 80188be:	f7ff f813 	bl	80178e8 <RadioSetModem>
    if( enable == true )
 80188c2:	79fb      	ldrb	r3, [r7, #7]
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d00a      	beq.n	80188de <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80188c8:	2134      	movs	r1, #52	@ 0x34
 80188ca:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80188ce:	f001 fe83 	bl	801a5d8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80188d2:	2144      	movs	r1, #68	@ 0x44
 80188d4:	f240 7041 	movw	r0, #1857	@ 0x741
 80188d8:	f001 fe7e 	bl	801a5d8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80188dc:	e009      	b.n	80188f2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80188de:	2114      	movs	r1, #20
 80188e0:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80188e4:	f001 fe78 	bl	801a5d8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80188e8:	2124      	movs	r1, #36	@ 0x24
 80188ea:	f240 7041 	movw	r0, #1857	@ 0x741
 80188ee:	f001 fe73 	bl	801a5d8 <SUBGRF_WriteRegister>
}
 80188f2:	bf00      	nop
 80188f4:	3708      	adds	r7, #8
 80188f6:	46bd      	mov	sp, r7
 80188f8:	bd80      	pop	{r7, pc}
 80188fa:	bf00      	nop
 80188fc:	20001438 	.word	0x20001438

08018900 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8018900:	b580      	push	{r7, lr}
 8018902:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8018904:	f001 ffb8 	bl	801a878 <SUBGRF_GetRadioWakeUpTime>
 8018908:	4603      	mov	r3, r0
 801890a:	3303      	adds	r3, #3
}
 801890c:	4618      	mov	r0, r3
 801890e:	bd80      	pop	{r7, pc}

08018910 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8018910:	b580      	push	{r7, lr}
 8018912:	b082      	sub	sp, #8
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8018918:	f000 f80e 	bl	8018938 <RadioOnTxTimeoutProcess>
}
 801891c:	bf00      	nop
 801891e:	3708      	adds	r7, #8
 8018920:	46bd      	mov	sp, r7
 8018922:	bd80      	pop	{r7, pc}

08018924 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8018924:	b580      	push	{r7, lr}
 8018926:	b082      	sub	sp, #8
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801892c:	f000 f818 	bl	8018960 <RadioOnRxTimeoutProcess>
}
 8018930:	bf00      	nop
 8018932:	3708      	adds	r7, #8
 8018934:	46bd      	mov	sp, r7
 8018936:	bd80      	pop	{r7, pc}

08018938 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8018938:	b580      	push	{r7, lr}
 801893a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801893c:	4b07      	ldr	r3, [pc, #28]	@ (801895c <RadioOnTxTimeoutProcess+0x24>)
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d008      	beq.n	8018956 <RadioOnTxTimeoutProcess+0x1e>
 8018944:	4b05      	ldr	r3, [pc, #20]	@ (801895c <RadioOnTxTimeoutProcess+0x24>)
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	685b      	ldr	r3, [r3, #4]
 801894a:	2b00      	cmp	r3, #0
 801894c:	d003      	beq.n	8018956 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801894e:	4b03      	ldr	r3, [pc, #12]	@ (801895c <RadioOnTxTimeoutProcess+0x24>)
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	685b      	ldr	r3, [r3, #4]
 8018954:	4798      	blx	r3
    }
}
 8018956:	bf00      	nop
 8018958:	bd80      	pop	{r7, pc}
 801895a:	bf00      	nop
 801895c:	20001434 	.word	0x20001434

08018960 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8018960:	b580      	push	{r7, lr}
 8018962:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018964:	4b07      	ldr	r3, [pc, #28]	@ (8018984 <RadioOnRxTimeoutProcess+0x24>)
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	2b00      	cmp	r3, #0
 801896a:	d008      	beq.n	801897e <RadioOnRxTimeoutProcess+0x1e>
 801896c:	4b05      	ldr	r3, [pc, #20]	@ (8018984 <RadioOnRxTimeoutProcess+0x24>)
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	68db      	ldr	r3, [r3, #12]
 8018972:	2b00      	cmp	r3, #0
 8018974:	d003      	beq.n	801897e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8018976:	4b03      	ldr	r3, [pc, #12]	@ (8018984 <RadioOnRxTimeoutProcess+0x24>)
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	68db      	ldr	r3, [r3, #12]
 801897c:	4798      	blx	r3
    }
}
 801897e:	bf00      	nop
 8018980:	bd80      	pop	{r7, pc}
 8018982:	bf00      	nop
 8018984:	20001434 	.word	0x20001434

08018988 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8018988:	b580      	push	{r7, lr}
 801898a:	b082      	sub	sp, #8
 801898c:	af00      	add	r7, sp, #0
 801898e:	4603      	mov	r3, r0
 8018990:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8018992:	4a05      	ldr	r2, [pc, #20]	@ (80189a8 <RadioOnDioIrq+0x20>)
 8018994:	88fb      	ldrh	r3, [r7, #6]
 8018996:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 801899a:	f000 f807 	bl	80189ac <RadioIrqProcess>
}
 801899e:	bf00      	nop
 80189a0:	3708      	adds	r7, #8
 80189a2:	46bd      	mov	sp, r7
 80189a4:	bd80      	pop	{r7, pc}
 80189a6:	bf00      	nop
 80189a8:	20001438 	.word	0x20001438

080189ac <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80189ac:	b5b0      	push	{r4, r5, r7, lr}
 80189ae:	b082      	sub	sp, #8
 80189b0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80189b2:	2300      	movs	r3, #0
 80189b4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80189b6:	2300      	movs	r3, #0
 80189b8:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80189ba:	4ba8      	ldr	r3, [pc, #672]	@ (8018c5c <RadioIrqProcess+0x2b0>)
 80189bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80189c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80189c4:	f000 810d 	beq.w	8018be2 <RadioIrqProcess+0x236>
 80189c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80189cc:	f300 81e8 	bgt.w	8018da0 <RadioIrqProcess+0x3f4>
 80189d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80189d4:	f000 80f1 	beq.w	8018bba <RadioIrqProcess+0x20e>
 80189d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80189dc:	f300 81e0 	bgt.w	8018da0 <RadioIrqProcess+0x3f4>
 80189e0:	2b80      	cmp	r3, #128	@ 0x80
 80189e2:	f000 80d6 	beq.w	8018b92 <RadioIrqProcess+0x1e6>
 80189e6:	2b80      	cmp	r3, #128	@ 0x80
 80189e8:	f300 81da 	bgt.w	8018da0 <RadioIrqProcess+0x3f4>
 80189ec:	2b20      	cmp	r3, #32
 80189ee:	dc49      	bgt.n	8018a84 <RadioIrqProcess+0xd8>
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	f340 81d5 	ble.w	8018da0 <RadioIrqProcess+0x3f4>
 80189f6:	3b01      	subs	r3, #1
 80189f8:	2b1f      	cmp	r3, #31
 80189fa:	f200 81d1 	bhi.w	8018da0 <RadioIrqProcess+0x3f4>
 80189fe:	a201      	add	r2, pc, #4	@ (adr r2, 8018a04 <RadioIrqProcess+0x58>)
 8018a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a04:	08018a8d 	.word	0x08018a8d
 8018a08:	08018ac7 	.word	0x08018ac7
 8018a0c:	08018da1 	.word	0x08018da1
 8018a10:	08018c7d 	.word	0x08018c7d
 8018a14:	08018da1 	.word	0x08018da1
 8018a18:	08018da1 	.word	0x08018da1
 8018a1c:	08018da1 	.word	0x08018da1
 8018a20:	08018cf9 	.word	0x08018cf9
 8018a24:	08018da1 	.word	0x08018da1
 8018a28:	08018da1 	.word	0x08018da1
 8018a2c:	08018da1 	.word	0x08018da1
 8018a30:	08018da1 	.word	0x08018da1
 8018a34:	08018da1 	.word	0x08018da1
 8018a38:	08018da1 	.word	0x08018da1
 8018a3c:	08018da1 	.word	0x08018da1
 8018a40:	08018d15 	.word	0x08018d15
 8018a44:	08018da1 	.word	0x08018da1
 8018a48:	08018da1 	.word	0x08018da1
 8018a4c:	08018da1 	.word	0x08018da1
 8018a50:	08018da1 	.word	0x08018da1
 8018a54:	08018da1 	.word	0x08018da1
 8018a58:	08018da1 	.word	0x08018da1
 8018a5c:	08018da1 	.word	0x08018da1
 8018a60:	08018da1 	.word	0x08018da1
 8018a64:	08018da1 	.word	0x08018da1
 8018a68:	08018da1 	.word	0x08018da1
 8018a6c:	08018da1 	.word	0x08018da1
 8018a70:	08018da1 	.word	0x08018da1
 8018a74:	08018da1 	.word	0x08018da1
 8018a78:	08018da1 	.word	0x08018da1
 8018a7c:	08018da1 	.word	0x08018da1
 8018a80:	08018d23 	.word	0x08018d23
 8018a84:	2b40      	cmp	r3, #64	@ 0x40
 8018a86:	f000 816d 	beq.w	8018d64 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8018a8a:	e189      	b.n	8018da0 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8018a8c:	4874      	ldr	r0, [pc, #464]	@ (8018c60 <RadioIrqProcess+0x2b4>)
 8018a8e:	f002 ffbd 	bl	801ba0c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8018a92:	2000      	movs	r0, #0
 8018a94:	f001 f81c 	bl	8019ad0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8018a98:	f002 f892 	bl	801abc0 <RFW_Is_LongPacketModeEnabled>
 8018a9c:	4603      	mov	r3, r0
 8018a9e:	2b01      	cmp	r3, #1
 8018aa0:	d101      	bne.n	8018aa6 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8018aa2:	f002 f8b6 	bl	801ac12 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8018aa6:	4b6f      	ldr	r3, [pc, #444]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	f000 817a 	beq.w	8018da4 <RadioIrqProcess+0x3f8>
 8018ab0:	4b6c      	ldr	r3, [pc, #432]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	f000 8174 	beq.w	8018da4 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8018abc:	4b69      	ldr	r3, [pc, #420]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	4798      	blx	r3
        break;
 8018ac4:	e16e      	b.n	8018da4 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8018ac6:	4868      	ldr	r0, [pc, #416]	@ (8018c68 <RadioIrqProcess+0x2bc>)
 8018ac8:	f002 ffa0 	bl	801ba0c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018acc:	4b63      	ldr	r3, [pc, #396]	@ (8018c5c <RadioIrqProcess+0x2b0>)
 8018ace:	785b      	ldrb	r3, [r3, #1]
 8018ad0:	f083 0301 	eor.w	r3, r3, #1
 8018ad4:	b2db      	uxtb	r3, r3
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d014      	beq.n	8018b04 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8018ada:	2000      	movs	r0, #0
 8018adc:	f000 fff8 	bl	8019ad0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8018ae0:	2100      	movs	r1, #0
 8018ae2:	f640 1002 	movw	r0, #2306	@ 0x902
 8018ae6:	f001 fd77 	bl	801a5d8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8018aea:	f640 1044 	movw	r0, #2372	@ 0x944
 8018aee:	f001 fd87 	bl	801a600 <SUBGRF_ReadRegister>
 8018af2:	4603      	mov	r3, r0
 8018af4:	f043 0302 	orr.w	r3, r3, #2
 8018af8:	b2db      	uxtb	r3, r3
 8018afa:	4619      	mov	r1, r3
 8018afc:	f640 1044 	movw	r0, #2372	@ 0x944
 8018b00:	f001 fd6a 	bl	801a5d8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8018b04:	1dfb      	adds	r3, r7, #7
 8018b06:	22ff      	movs	r2, #255	@ 0xff
 8018b08:	4619      	mov	r1, r3
 8018b0a:	4858      	ldr	r0, [pc, #352]	@ (8018c6c <RadioIrqProcess+0x2c0>)
 8018b0c:	f000 feb0 	bl	8019870 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8018b10:	4857      	ldr	r0, [pc, #348]	@ (8018c70 <RadioIrqProcess+0x2c4>)
 8018b12:	f001 fd0f 	bl	801a534 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8018b16:	4b53      	ldr	r3, [pc, #332]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	f000 8144 	beq.w	8018da8 <RadioIrqProcess+0x3fc>
 8018b20:	4b50      	ldr	r3, [pc, #320]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	689b      	ldr	r3, [r3, #8]
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	f000 813e 	beq.w	8018da8 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8018b2c:	4b4b      	ldr	r3, [pc, #300]	@ (8018c5c <RadioIrqProcess+0x2b0>)
 8018b2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8018b32:	2b01      	cmp	r3, #1
 8018b34:	d10e      	bne.n	8018b54 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8018b36:	4b4b      	ldr	r3, [pc, #300]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	689c      	ldr	r4, [r3, #8]
 8018b3c:	79fb      	ldrb	r3, [r7, #7]
 8018b3e:	4619      	mov	r1, r3
 8018b40:	4b46      	ldr	r3, [pc, #280]	@ (8018c5c <RadioIrqProcess+0x2b0>)
 8018b42:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8018b46:	461a      	mov	r2, r3
 8018b48:	4b44      	ldr	r3, [pc, #272]	@ (8018c5c <RadioIrqProcess+0x2b0>)
 8018b4a:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8018b4e:	4847      	ldr	r0, [pc, #284]	@ (8018c6c <RadioIrqProcess+0x2c0>)
 8018b50:	47a0      	blx	r4
                break;
 8018b52:	e01d      	b.n	8018b90 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8018b54:	4b41      	ldr	r3, [pc, #260]	@ (8018c5c <RadioIrqProcess+0x2b0>)
 8018b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018b58:	463a      	mov	r2, r7
 8018b5a:	4611      	mov	r1, r2
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	f001 ff7d 	bl	801aa5c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8018b62:	4b40      	ldr	r3, [pc, #256]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	689c      	ldr	r4, [r3, #8]
 8018b68:	79fb      	ldrb	r3, [r7, #7]
 8018b6a:	4619      	mov	r1, r3
 8018b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8018c5c <RadioIrqProcess+0x2b0>)
 8018b6e:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8018b72:	4618      	mov	r0, r3
 8018b74:	683b      	ldr	r3, [r7, #0]
 8018b76:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8018b7a:	4a3e      	ldr	r2, [pc, #248]	@ (8018c74 <RadioIrqProcess+0x2c8>)
 8018b7c:	fb82 5203 	smull	r5, r2, r2, r3
 8018b80:	1192      	asrs	r2, r2, #6
 8018b82:	17db      	asrs	r3, r3, #31
 8018b84:	1ad3      	subs	r3, r2, r3
 8018b86:	b25b      	sxtb	r3, r3
 8018b88:	4602      	mov	r2, r0
 8018b8a:	4838      	ldr	r0, [pc, #224]	@ (8018c6c <RadioIrqProcess+0x2c0>)
 8018b8c:	47a0      	blx	r4
                break;
 8018b8e:	bf00      	nop
        break;
 8018b90:	e10a      	b.n	8018da8 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8018b92:	2000      	movs	r0, #0
 8018b94:	f000 ff9c 	bl	8019ad0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018b98:	4b32      	ldr	r3, [pc, #200]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	f000 8105 	beq.w	8018dac <RadioIrqProcess+0x400>
 8018ba2:	4b30      	ldr	r3, [pc, #192]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	699b      	ldr	r3, [r3, #24]
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	f000 80ff 	beq.w	8018dac <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8018bae:	4b2d      	ldr	r3, [pc, #180]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	699b      	ldr	r3, [r3, #24]
 8018bb4:	2000      	movs	r0, #0
 8018bb6:	4798      	blx	r3
        break;
 8018bb8:	e0f8      	b.n	8018dac <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8018bba:	2000      	movs	r0, #0
 8018bbc:	f000 ff88 	bl	8019ad0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018bc0:	4b28      	ldr	r3, [pc, #160]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	f000 80f3 	beq.w	8018db0 <RadioIrqProcess+0x404>
 8018bca:	4b26      	ldr	r3, [pc, #152]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	699b      	ldr	r3, [r3, #24]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	f000 80ed 	beq.w	8018db0 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8018bd6:	4b23      	ldr	r3, [pc, #140]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	699b      	ldr	r3, [r3, #24]
 8018bdc:	2001      	movs	r0, #1
 8018bde:	4798      	blx	r3
        break;
 8018be0:	e0e6      	b.n	8018db0 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8018be2:	4b25      	ldr	r3, [pc, #148]	@ (8018c78 <RadioIrqProcess+0x2cc>)
 8018be4:	2201      	movs	r2, #1
 8018be6:	2100      	movs	r1, #0
 8018be8:	2002      	movs	r0, #2
 8018bea:	f003 f919 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8018bee:	f000 fe25 	bl	801983c <SUBGRF_GetOperatingMode>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	2b04      	cmp	r3, #4
 8018bf6:	d115      	bne.n	8018c24 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8018bf8:	4819      	ldr	r0, [pc, #100]	@ (8018c60 <RadioIrqProcess+0x2b4>)
 8018bfa:	f002 ff07 	bl	801ba0c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018bfe:	2000      	movs	r0, #0
 8018c00:	f000 ff66 	bl	8019ad0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018c04:	4b17      	ldr	r3, [pc, #92]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	f000 80d3 	beq.w	8018db4 <RadioIrqProcess+0x408>
 8018c0e:	4b15      	ldr	r3, [pc, #84]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	685b      	ldr	r3, [r3, #4]
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	f000 80cd 	beq.w	8018db4 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8018c1a:	4b12      	ldr	r3, [pc, #72]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	685b      	ldr	r3, [r3, #4]
 8018c20:	4798      	blx	r3
        break;
 8018c22:	e0c7      	b.n	8018db4 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8018c24:	f000 fe0a 	bl	801983c <SUBGRF_GetOperatingMode>
 8018c28:	4603      	mov	r3, r0
 8018c2a:	2b05      	cmp	r3, #5
 8018c2c:	f040 80c2 	bne.w	8018db4 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8018c30:	480d      	ldr	r0, [pc, #52]	@ (8018c68 <RadioIrqProcess+0x2bc>)
 8018c32:	f002 feeb 	bl	801ba0c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018c36:	2000      	movs	r0, #0
 8018c38:	f000 ff4a 	bl	8019ad0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018c3c:	4b09      	ldr	r3, [pc, #36]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	f000 80b7 	beq.w	8018db4 <RadioIrqProcess+0x408>
 8018c46:	4b07      	ldr	r3, [pc, #28]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	68db      	ldr	r3, [r3, #12]
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	f000 80b1 	beq.w	8018db4 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8018c52:	4b04      	ldr	r3, [pc, #16]	@ (8018c64 <RadioIrqProcess+0x2b8>)
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	68db      	ldr	r3, [r3, #12]
 8018c58:	4798      	blx	r3
        break;
 8018c5a:	e0ab      	b.n	8018db4 <RadioIrqProcess+0x408>
 8018c5c:	20001438 	.word	0x20001438
 8018c60:	20001494 	.word	0x20001494
 8018c64:	20001434 	.word	0x20001434
 8018c68:	200014ac 	.word	0x200014ac
 8018c6c:	20001334 	.word	0x20001334
 8018c70:	2000145c 	.word	0x2000145c
 8018c74:	10624dd3 	.word	0x10624dd3
 8018c78:	0801d22c 	.word	0x0801d22c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8018c7c:	4b54      	ldr	r3, [pc, #336]	@ (8018dd0 <RadioIrqProcess+0x424>)
 8018c7e:	2201      	movs	r2, #1
 8018c80:	2100      	movs	r1, #0
 8018c82:	2002      	movs	r0, #2
 8018c84:	f003 f8cc 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8018c88:	4b52      	ldr	r3, [pc, #328]	@ (8018dd4 <RadioIrqProcess+0x428>)
 8018c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	f000 8093 	beq.w	8018db8 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8018c92:	4a51      	ldr	r2, [pc, #324]	@ (8018dd8 <RadioIrqProcess+0x42c>)
 8018c94:	4b4f      	ldr	r3, [pc, #316]	@ (8018dd4 <RadioIrqProcess+0x428>)
 8018c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018c98:	0c1b      	lsrs	r3, r3, #16
 8018c9a:	b2db      	uxtb	r3, r3
 8018c9c:	4619      	mov	r1, r3
 8018c9e:	f640 1003 	movw	r0, #2307	@ 0x903
 8018ca2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8018ca4:	4a4c      	ldr	r2, [pc, #304]	@ (8018dd8 <RadioIrqProcess+0x42c>)
 8018ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8018dd4 <RadioIrqProcess+0x428>)
 8018ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018caa:	0a1b      	lsrs	r3, r3, #8
 8018cac:	b2db      	uxtb	r3, r3
 8018cae:	4619      	mov	r1, r3
 8018cb0:	f640 1004 	movw	r0, #2308	@ 0x904
 8018cb4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8018cb6:	4a48      	ldr	r2, [pc, #288]	@ (8018dd8 <RadioIrqProcess+0x42c>)
 8018cb8:	4b46      	ldr	r3, [pc, #280]	@ (8018dd4 <RadioIrqProcess+0x428>)
 8018cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018cbc:	b2db      	uxtb	r3, r3
 8018cbe:	4619      	mov	r1, r3
 8018cc0:	f640 1005 	movw	r0, #2309	@ 0x905
 8018cc4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8018cc6:	4c44      	ldr	r4, [pc, #272]	@ (8018dd8 <RadioIrqProcess+0x42c>)
 8018cc8:	4b44      	ldr	r3, [pc, #272]	@ (8018ddc <RadioIrqProcess+0x430>)
 8018cca:	f640 1002 	movw	r0, #2306	@ 0x902
 8018cce:	4798      	blx	r3
 8018cd0:	4603      	mov	r3, r0
 8018cd2:	f043 0301 	orr.w	r3, r3, #1
 8018cd6:	b2db      	uxtb	r3, r3
 8018cd8:	4619      	mov	r1, r3
 8018cda:	f640 1002 	movw	r0, #2306	@ 0x902
 8018cde:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8018ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8018dd4 <RadioIrqProcess+0x428>)
 8018ce2:	2200      	movs	r2, #0
 8018ce4:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	2200      	movs	r2, #0
 8018cea:	f240 2162 	movw	r1, #610	@ 0x262
 8018cee:	f240 2062 	movw	r0, #610	@ 0x262
 8018cf2:	f001 f8c1 	bl	8019e78 <SUBGRF_SetDioIrqParams>
        break;
 8018cf6:	e05f      	b.n	8018db8 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8018cf8:	4b39      	ldr	r3, [pc, #228]	@ (8018de0 <RadioIrqProcess+0x434>)
 8018cfa:	2201      	movs	r2, #1
 8018cfc:	2100      	movs	r1, #0
 8018cfe:	2002      	movs	r0, #2
 8018d00:	f003 f88e 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8018d04:	f001 ff55 	bl	801abb2 <RFW_Is_Init>
 8018d08:	4603      	mov	r3, r0
 8018d0a:	2b01      	cmp	r3, #1
 8018d0c:	d156      	bne.n	8018dbc <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8018d0e:	f001 ff86 	bl	801ac1e <RFW_ReceivePayload>
        break;
 8018d12:	e053      	b.n	8018dbc <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8018d14:	4b33      	ldr	r3, [pc, #204]	@ (8018de4 <RadioIrqProcess+0x438>)
 8018d16:	2201      	movs	r2, #1
 8018d18:	2100      	movs	r1, #0
 8018d1a:	2002      	movs	r0, #2
 8018d1c:	f003 f880 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018d20:	e051      	b.n	8018dc6 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8018d22:	4831      	ldr	r0, [pc, #196]	@ (8018de8 <RadioIrqProcess+0x43c>)
 8018d24:	f002 fe72 	bl	801ba0c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018d28:	4b2a      	ldr	r3, [pc, #168]	@ (8018dd4 <RadioIrqProcess+0x428>)
 8018d2a:	785b      	ldrb	r3, [r3, #1]
 8018d2c:	f083 0301 	eor.w	r3, r3, #1
 8018d30:	b2db      	uxtb	r3, r3
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d002      	beq.n	8018d3c <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8018d36:	2000      	movs	r0, #0
 8018d38:	f000 feca 	bl	8019ad0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8018dec <RadioIrqProcess+0x440>)
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d03d      	beq.n	8018dc0 <RadioIrqProcess+0x414>
 8018d44:	4b29      	ldr	r3, [pc, #164]	@ (8018dec <RadioIrqProcess+0x440>)
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	68db      	ldr	r3, [r3, #12]
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d038      	beq.n	8018dc0 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8018d4e:	4b27      	ldr	r3, [pc, #156]	@ (8018dec <RadioIrqProcess+0x440>)
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	68db      	ldr	r3, [r3, #12]
 8018d54:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8018d56:	4b26      	ldr	r3, [pc, #152]	@ (8018df0 <RadioIrqProcess+0x444>)
 8018d58:	2201      	movs	r2, #1
 8018d5a:	2100      	movs	r1, #0
 8018d5c:	2002      	movs	r0, #2
 8018d5e:	f003 f85f 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018d62:	e02d      	b.n	8018dc0 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8018d64:	4b23      	ldr	r3, [pc, #140]	@ (8018df4 <RadioIrqProcess+0x448>)
 8018d66:	2201      	movs	r2, #1
 8018d68:	2100      	movs	r1, #0
 8018d6a:	2002      	movs	r0, #2
 8018d6c:	f003 f858 	bl	801be20 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8018d70:	4b18      	ldr	r3, [pc, #96]	@ (8018dd4 <RadioIrqProcess+0x428>)
 8018d72:	785b      	ldrb	r3, [r3, #1]
 8018d74:	f083 0301 	eor.w	r3, r3, #1
 8018d78:	b2db      	uxtb	r3, r3
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d002      	beq.n	8018d84 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8018d7e:	2000      	movs	r0, #0
 8018d80:	f000 fea6 	bl	8019ad0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8018d84:	4b19      	ldr	r3, [pc, #100]	@ (8018dec <RadioIrqProcess+0x440>)
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d01b      	beq.n	8018dc4 <RadioIrqProcess+0x418>
 8018d8c:	4b17      	ldr	r3, [pc, #92]	@ (8018dec <RadioIrqProcess+0x440>)
 8018d8e:	681b      	ldr	r3, [r3, #0]
 8018d90:	691b      	ldr	r3, [r3, #16]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d016      	beq.n	8018dc4 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 8018d96:	4b15      	ldr	r3, [pc, #84]	@ (8018dec <RadioIrqProcess+0x440>)
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	691b      	ldr	r3, [r3, #16]
 8018d9c:	4798      	blx	r3
        break;
 8018d9e:	e011      	b.n	8018dc4 <RadioIrqProcess+0x418>
        break;
 8018da0:	bf00      	nop
 8018da2:	e010      	b.n	8018dc6 <RadioIrqProcess+0x41a>
        break;
 8018da4:	bf00      	nop
 8018da6:	e00e      	b.n	8018dc6 <RadioIrqProcess+0x41a>
        break;
 8018da8:	bf00      	nop
 8018daa:	e00c      	b.n	8018dc6 <RadioIrqProcess+0x41a>
        break;
 8018dac:	bf00      	nop
 8018dae:	e00a      	b.n	8018dc6 <RadioIrqProcess+0x41a>
        break;
 8018db0:	bf00      	nop
 8018db2:	e008      	b.n	8018dc6 <RadioIrqProcess+0x41a>
        break;
 8018db4:	bf00      	nop
 8018db6:	e006      	b.n	8018dc6 <RadioIrqProcess+0x41a>
        break;
 8018db8:	bf00      	nop
 8018dba:	e004      	b.n	8018dc6 <RadioIrqProcess+0x41a>
        break;
 8018dbc:	bf00      	nop
 8018dbe:	e002      	b.n	8018dc6 <RadioIrqProcess+0x41a>
        break;
 8018dc0:	bf00      	nop
 8018dc2:	e000      	b.n	8018dc6 <RadioIrqProcess+0x41a>
        break;
 8018dc4:	bf00      	nop
    }
}
 8018dc6:	bf00      	nop
 8018dc8:	3708      	adds	r7, #8
 8018dca:	46bd      	mov	sp, r7
 8018dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8018dce:	bf00      	nop
 8018dd0:	0801d240 	.word	0x0801d240
 8018dd4:	20001438 	.word	0x20001438
 8018dd8:	080187bd 	.word	0x080187bd
 8018ddc:	080187e1 	.word	0x080187e1
 8018de0:	0801d24c 	.word	0x0801d24c
 8018de4:	0801d258 	.word	0x0801d258
 8018de8:	200014ac 	.word	0x200014ac
 8018dec:	20001434 	.word	0x20001434
 8018df0:	0801d264 	.word	0x0801d264
 8018df4:	0801d270 	.word	0x0801d270

08018df8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8018df8:	b580      	push	{r7, lr}
 8018dfa:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018dfc:	4b09      	ldr	r3, [pc, #36]	@ (8018e24 <RadioTxPrbs+0x2c>)
 8018dfe:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018e02:	2101      	movs	r1, #1
 8018e04:	4618      	mov	r0, r3
 8018e06:	f001 fcdb 	bl	801a7c0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8018e0a:	4b07      	ldr	r3, [pc, #28]	@ (8018e28 <RadioTxPrbs+0x30>)
 8018e0c:	212d      	movs	r1, #45	@ 0x2d
 8018e0e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018e12:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8018e14:	f000 ff1f 	bl	8019c56 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8018e18:	4804      	ldr	r0, [pc, #16]	@ (8018e2c <RadioTxPrbs+0x34>)
 8018e1a:	f000 fe75 	bl	8019b08 <SUBGRF_SetTx>
}
 8018e1e:	bf00      	nop
 8018e20:	bd80      	pop	{r7, pc}
 8018e22:	bf00      	nop
 8018e24:	20001438 	.word	0x20001438
 8018e28:	080187bd 	.word	0x080187bd
 8018e2c:	000fffff 	.word	0x000fffff

08018e30 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b084      	sub	sp, #16
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	4603      	mov	r3, r0
 8018e38:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8018e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018e3e:	4618      	mov	r0, r3
 8018e40:	f001 fce6 	bl	801a810 <SUBGRF_SetRfTxPower>
 8018e44:	4603      	mov	r3, r0
 8018e46:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018e48:	210e      	movs	r1, #14
 8018e4a:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018e4e:	f001 fbc3 	bl	801a5d8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8018e52:	7bfb      	ldrb	r3, [r7, #15]
 8018e54:	2101      	movs	r1, #1
 8018e56:	4618      	mov	r0, r3
 8018e58:	f001 fcb2 	bl	801a7c0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8018e5c:	f000 fef2 	bl	8019c44 <SUBGRF_SetTxContinuousWave>
}
 8018e60:	bf00      	nop
 8018e62:	3710      	adds	r7, #16
 8018e64:	46bd      	mov	sp, r7
 8018e66:	bd80      	pop	{r7, pc}

08018e68 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8018e68:	b480      	push	{r7}
 8018e6a:	b089      	sub	sp, #36	@ 0x24
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	60f8      	str	r0, [r7, #12]
 8018e70:	60b9      	str	r1, [r7, #8]
 8018e72:	4613      	mov	r3, r2
 8018e74:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8018e76:	2300      	movs	r3, #0
 8018e78:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8018e7a:	2300      	movs	r3, #0
 8018e7c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8018e7e:	2300      	movs	r3, #0
 8018e80:	61bb      	str	r3, [r7, #24]
 8018e82:	e011      	b.n	8018ea8 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8018e84:	69bb      	ldr	r3, [r7, #24]
 8018e86:	68ba      	ldr	r2, [r7, #8]
 8018e88:	4413      	add	r3, r2
 8018e8a:	781a      	ldrb	r2, [r3, #0]
 8018e8c:	69bb      	ldr	r3, [r7, #24]
 8018e8e:	68b9      	ldr	r1, [r7, #8]
 8018e90:	440b      	add	r3, r1
 8018e92:	43d2      	mvns	r2, r2
 8018e94:	b2d2      	uxtb	r2, r2
 8018e96:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8018e98:	69bb      	ldr	r3, [r7, #24]
 8018e9a:	68fa      	ldr	r2, [r7, #12]
 8018e9c:	4413      	add	r3, r2
 8018e9e:	2200      	movs	r2, #0
 8018ea0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8018ea2:	69bb      	ldr	r3, [r7, #24]
 8018ea4:	3301      	adds	r3, #1
 8018ea6:	61bb      	str	r3, [r7, #24]
 8018ea8:	79fb      	ldrb	r3, [r7, #7]
 8018eaa:	69ba      	ldr	r2, [r7, #24]
 8018eac:	429a      	cmp	r2, r3
 8018eae:	dbe9      	blt.n	8018e84 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8018eb0:	2300      	movs	r3, #0
 8018eb2:	61bb      	str	r3, [r7, #24]
 8018eb4:	e049      	b.n	8018f4a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8018eb6:	69bb      	ldr	r3, [r7, #24]
 8018eb8:	425a      	negs	r2, r3
 8018eba:	f003 0307 	and.w	r3, r3, #7
 8018ebe:	f002 0207 	and.w	r2, r2, #7
 8018ec2:	bf58      	it	pl
 8018ec4:	4253      	negpl	r3, r2
 8018ec6:	b2db      	uxtb	r3, r3
 8018ec8:	f1c3 0307 	rsb	r3, r3, #7
 8018ecc:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8018ece:	69bb      	ldr	r3, [r7, #24]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	da00      	bge.n	8018ed6 <payload_integration+0x6e>
 8018ed4:	3307      	adds	r3, #7
 8018ed6:	10db      	asrs	r3, r3, #3
 8018ed8:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8018eda:	69bb      	ldr	r3, [r7, #24]
 8018edc:	3301      	adds	r3, #1
 8018ede:	425a      	negs	r2, r3
 8018ee0:	f003 0307 	and.w	r3, r3, #7
 8018ee4:	f002 0207 	and.w	r2, r2, #7
 8018ee8:	bf58      	it	pl
 8018eea:	4253      	negpl	r3, r2
 8018eec:	b2db      	uxtb	r3, r3
 8018eee:	f1c3 0307 	rsb	r3, r3, #7
 8018ef2:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8018ef4:	69bb      	ldr	r3, [r7, #24]
 8018ef6:	3301      	adds	r3, #1
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	da00      	bge.n	8018efe <payload_integration+0x96>
 8018efc:	3307      	adds	r3, #7
 8018efe:	10db      	asrs	r3, r3, #3
 8018f00:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8018f02:	7dbb      	ldrb	r3, [r7, #22]
 8018f04:	68ba      	ldr	r2, [r7, #8]
 8018f06:	4413      	add	r3, r2
 8018f08:	781b      	ldrb	r3, [r3, #0]
 8018f0a:	461a      	mov	r2, r3
 8018f0c:	7dfb      	ldrb	r3, [r7, #23]
 8018f0e:	fa42 f303 	asr.w	r3, r2, r3
 8018f12:	b2db      	uxtb	r3, r3
 8018f14:	f003 0301 	and.w	r3, r3, #1
 8018f18:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8018f1a:	7ffa      	ldrb	r2, [r7, #31]
 8018f1c:	7cfb      	ldrb	r3, [r7, #19]
 8018f1e:	4053      	eors	r3, r2
 8018f20:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8018f22:	7d3b      	ldrb	r3, [r7, #20]
 8018f24:	68fa      	ldr	r2, [r7, #12]
 8018f26:	4413      	add	r3, r2
 8018f28:	781b      	ldrb	r3, [r3, #0]
 8018f2a:	b25a      	sxtb	r2, r3
 8018f2c:	7ff9      	ldrb	r1, [r7, #31]
 8018f2e:	7d7b      	ldrb	r3, [r7, #21]
 8018f30:	fa01 f303 	lsl.w	r3, r1, r3
 8018f34:	b25b      	sxtb	r3, r3
 8018f36:	4313      	orrs	r3, r2
 8018f38:	b259      	sxtb	r1, r3
 8018f3a:	7d3b      	ldrb	r3, [r7, #20]
 8018f3c:	68fa      	ldr	r2, [r7, #12]
 8018f3e:	4413      	add	r3, r2
 8018f40:	b2ca      	uxtb	r2, r1
 8018f42:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8018f44:	69bb      	ldr	r3, [r7, #24]
 8018f46:	3301      	adds	r3, #1
 8018f48:	61bb      	str	r3, [r7, #24]
 8018f4a:	79fb      	ldrb	r3, [r7, #7]
 8018f4c:	00db      	lsls	r3, r3, #3
 8018f4e:	69ba      	ldr	r2, [r7, #24]
 8018f50:	429a      	cmp	r2, r3
 8018f52:	dbb0      	blt.n	8018eb6 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8018f54:	7ffb      	ldrb	r3, [r7, #31]
 8018f56:	01db      	lsls	r3, r3, #7
 8018f58:	b25a      	sxtb	r2, r3
 8018f5a:	7ffb      	ldrb	r3, [r7, #31]
 8018f5c:	019b      	lsls	r3, r3, #6
 8018f5e:	b25b      	sxtb	r3, r3
 8018f60:	4313      	orrs	r3, r2
 8018f62:	b25b      	sxtb	r3, r3
 8018f64:	7ffa      	ldrb	r2, [r7, #31]
 8018f66:	2a00      	cmp	r2, #0
 8018f68:	d101      	bne.n	8018f6e <payload_integration+0x106>
 8018f6a:	2220      	movs	r2, #32
 8018f6c:	e000      	b.n	8018f70 <payload_integration+0x108>
 8018f6e:	2200      	movs	r2, #0
 8018f70:	4313      	orrs	r3, r2
 8018f72:	b259      	sxtb	r1, r3
 8018f74:	79fb      	ldrb	r3, [r7, #7]
 8018f76:	68fa      	ldr	r2, [r7, #12]
 8018f78:	4413      	add	r3, r2
 8018f7a:	b2ca      	uxtb	r2, r1
 8018f7c:	701a      	strb	r2, [r3, #0]
}
 8018f7e:	bf00      	nop
 8018f80:	3724      	adds	r7, #36	@ 0x24
 8018f82:	46bd      	mov	sp, r7
 8018f84:	bc80      	pop	{r7}
 8018f86:	4770      	bx	lr

08018f88 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8018f88:	b580      	push	{r7, lr}
 8018f8a:	b08c      	sub	sp, #48	@ 0x30
 8018f8c:	af00      	add	r7, sp, #0
 8018f8e:	60b9      	str	r1, [r7, #8]
 8018f90:	607a      	str	r2, [r7, #4]
 8018f92:	603b      	str	r3, [r7, #0]
 8018f94:	4603      	mov	r3, r0
 8018f96:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8018f98:	2300      	movs	r3, #0
 8018f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8018f9c:	2300      	movs	r3, #0
 8018f9e:	623b      	str	r3, [r7, #32]
 8018fa0:	2300      	movs	r3, #0
 8018fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8018fa4:	f001 fdff 	bl	801aba6 <RFW_DeInit>

    if( rxContinuous != 0 )
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d001      	beq.n	8018fb2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8018fae:	2300      	movs	r3, #0
 8018fb0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	bf14      	ite	ne
 8018fb8:	2301      	movne	r3, #1
 8018fba:	2300      	moveq	r3, #0
 8018fbc:	b2da      	uxtb	r2, r3
 8018fbe:	4ba3      	ldr	r3, [pc, #652]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 8018fc0:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8018fc2:	7bfb      	ldrb	r3, [r7, #15]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d003      	beq.n	8018fd0 <RadioSetRxGenericConfig+0x48>
 8018fc8:	2b01      	cmp	r3, #1
 8018fca:	f000 80dc 	beq.w	8019186 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8018fce:	e194      	b.n	80192fa <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8018fd0:	68bb      	ldr	r3, [r7, #8]
 8018fd2:	689b      	ldr	r3, [r3, #8]
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d003      	beq.n	8018fe0 <RadioSetRxGenericConfig+0x58>
 8018fd8:	68bb      	ldr	r3, [r7, #8]
 8018fda:	68db      	ldr	r3, [r3, #12]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d102      	bne.n	8018fe6 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8018fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8018fe4:	e18a      	b.n	80192fc <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8018fe6:	68bb      	ldr	r3, [r7, #8]
 8018fe8:	7f9b      	ldrb	r3, [r3, #30]
 8018fea:	2b08      	cmp	r3, #8
 8018fec:	d902      	bls.n	8018ff4 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8018fee:	f04f 33ff 	mov.w	r3, #4294967295
 8018ff2:	e183      	b.n	80192fc <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8018ff4:	68bb      	ldr	r3, [r7, #8]
 8018ff6:	6919      	ldr	r1, [r3, #16]
 8018ff8:	68bb      	ldr	r3, [r7, #8]
 8018ffa:	7f9b      	ldrb	r3, [r3, #30]
 8018ffc:	461a      	mov	r2, r3
 8018ffe:	f107 0320 	add.w	r3, r7, #32
 8019002:	4618      	mov	r0, r3
 8019004:	f001 fec2 	bl	801ad8c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019008:	68bb      	ldr	r3, [r7, #8]
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	2b00      	cmp	r3, #0
 801900e:	bf14      	ite	ne
 8019010:	2301      	movne	r3, #1
 8019012:	2300      	moveq	r3, #0
 8019014:	b2db      	uxtb	r3, r3
 8019016:	4618      	mov	r0, r3
 8019018:	f000 fe26 	bl	8019c68 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801901c:	4b8b      	ldr	r3, [pc, #556]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 801901e:	2200      	movs	r2, #0
 8019020:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019024:	68bb      	ldr	r3, [r7, #8]
 8019026:	689b      	ldr	r3, [r3, #8]
 8019028:	4a88      	ldr	r2, [pc, #544]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 801902a:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801902c:	68bb      	ldr	r3, [r7, #8]
 801902e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8019032:	4b86      	ldr	r3, [pc, #536]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 8019034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8019038:	68bb      	ldr	r3, [r7, #8]
 801903a:	685b      	ldr	r3, [r3, #4]
 801903c:	4618      	mov	r0, r3
 801903e:	f001 fce5 	bl	801aa0c <SUBGRF_GetFskBandwidthRegValue>
 8019042:	4603      	mov	r3, r0
 8019044:	461a      	mov	r2, r3
 8019046:	4b81      	ldr	r3, [pc, #516]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 8019048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801904c:	4b7f      	ldr	r3, [pc, #508]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 801904e:	2200      	movs	r2, #0
 8019050:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8019052:	68bb      	ldr	r3, [r7, #8]
 8019054:	68db      	ldr	r3, [r3, #12]
 8019056:	b29b      	uxth	r3, r3
 8019058:	00db      	lsls	r3, r3, #3
 801905a:	b29a      	uxth	r2, r3
 801905c:	4b7b      	ldr	r3, [pc, #492]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 801905e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8019060:	68bb      	ldr	r3, [r7, #8]
 8019062:	7fda      	ldrb	r2, [r3, #31]
 8019064:	4b79      	ldr	r3, [pc, #484]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 8019066:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019068:	68bb      	ldr	r3, [r7, #8]
 801906a:	7f9b      	ldrb	r3, [r3, #30]
 801906c:	00db      	lsls	r3, r3, #3
 801906e:	b2da      	uxtb	r2, r3
 8019070:	4b76      	ldr	r3, [pc, #472]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 8019072:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8019074:	68bb      	ldr	r3, [r7, #8]
 8019076:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 801907a:	4b74      	ldr	r3, [pc, #464]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 801907c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801907e:	68bb      	ldr	r3, [r7, #8]
 8019080:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8019084:	2b00      	cmp	r3, #0
 8019086:	d105      	bne.n	8019094 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8019088:	68bb      	ldr	r3, [r7, #8]
 801908a:	695b      	ldr	r3, [r3, #20]
 801908c:	b2da      	uxtb	r2, r3
 801908e:	4b6f      	ldr	r3, [pc, #444]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 8019090:	759a      	strb	r2, [r3, #22]
 8019092:	e00b      	b.n	80190ac <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8019094:	68bb      	ldr	r3, [r7, #8]
 8019096:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801909a:	2b02      	cmp	r3, #2
 801909c:	d103      	bne.n	80190a6 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801909e:	4b6b      	ldr	r3, [pc, #428]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 80190a0:	22ff      	movs	r2, #255	@ 0xff
 80190a2:	759a      	strb	r2, [r3, #22]
 80190a4:	e002      	b.n	80190ac <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80190a6:	4b69      	ldr	r3, [pc, #420]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 80190a8:	22ff      	movs	r2, #255	@ 0xff
 80190aa:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80190ac:	68bb      	ldr	r3, [r7, #8]
 80190ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80190b2:	2b02      	cmp	r3, #2
 80190b4:	d004      	beq.n	80190c0 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80190b6:	68bb      	ldr	r3, [r7, #8]
 80190b8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80190bc:	2b02      	cmp	r3, #2
 80190be:	d12d      	bne.n	801911c <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80190c0:	68bb      	ldr	r3, [r7, #8]
 80190c2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80190c6:	2bf1      	cmp	r3, #241	@ 0xf1
 80190c8:	d00c      	beq.n	80190e4 <RadioSetRxGenericConfig+0x15c>
 80190ca:	68bb      	ldr	r3, [r7, #8]
 80190cc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80190d0:	2bf2      	cmp	r3, #242	@ 0xf2
 80190d2:	d007      	beq.n	80190e4 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80190d4:	68bb      	ldr	r3, [r7, #8]
 80190d6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80190da:	2b01      	cmp	r3, #1
 80190dc:	d002      	beq.n	80190e4 <RadioSetRxGenericConfig+0x15c>
                return -1;
 80190de:	f04f 33ff 	mov.w	r3, #4294967295
 80190e2:	e10b      	b.n	80192fc <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 80190e4:	2300      	movs	r3, #0
 80190e6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 80190e8:	68bb      	ldr	r3, [r7, #8]
 80190ea:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80190ec:	4b58      	ldr	r3, [pc, #352]	@ (8019250 <RadioSetRxGenericConfig+0x2c8>)
 80190ee:	6819      	ldr	r1, [r3, #0]
 80190f0:	f107 0314 	add.w	r3, r7, #20
 80190f4:	4a57      	ldr	r2, [pc, #348]	@ (8019254 <RadioSetRxGenericConfig+0x2cc>)
 80190f6:	4618      	mov	r0, r3
 80190f8:	f001 fd48 	bl	801ab8c <RFW_Init>
 80190fc:	4603      	mov	r3, r0
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d002      	beq.n	8019108 <RadioSetRxGenericConfig+0x180>
                return -1;
 8019102:	f04f 33ff 	mov.w	r3, #4294967295
 8019106:	e0f9      	b.n	80192fc <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019108:	4b50      	ldr	r3, [pc, #320]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 801910a:	2200      	movs	r2, #0
 801910c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801910e:	4b4f      	ldr	r3, [pc, #316]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 8019110:	2201      	movs	r2, #1
 8019112:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019114:	4b4d      	ldr	r3, [pc, #308]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 8019116:	2200      	movs	r2, #0
 8019118:	755a      	strb	r2, [r3, #21]
        {
 801911a:	e00e      	b.n	801913a <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801911c:	68bb      	ldr	r3, [r7, #8]
 801911e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8019122:	4b4a      	ldr	r3, [pc, #296]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 8019124:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019126:	68bb      	ldr	r3, [r7, #8]
 8019128:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 801912c:	4b47      	ldr	r3, [pc, #284]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 801912e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8019130:	68bb      	ldr	r3, [r7, #8]
 8019132:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8019136:	4b45      	ldr	r3, [pc, #276]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 8019138:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801913a:	f7ff fa3e 	bl	80185ba <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801913e:	2000      	movs	r0, #0
 8019140:	f7fe fbd2 	bl	80178e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019144:	4844      	ldr	r0, [pc, #272]	@ (8019258 <RadioSetRxGenericConfig+0x2d0>)
 8019146:	f001 f82d 	bl	801a1a4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801914a:	4844      	ldr	r0, [pc, #272]	@ (801925c <RadioSetRxGenericConfig+0x2d4>)
 801914c:	f001 f8fc 	bl	801a348 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019150:	f107 0320 	add.w	r3, r7, #32
 8019154:	4618      	mov	r0, r3
 8019156:	f000 fbc0 	bl	80198da <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801915a:	68bb      	ldr	r3, [r7, #8]
 801915c:	8b9b      	ldrh	r3, [r3, #28]
 801915e:	4618      	mov	r0, r3
 8019160:	f000 fc0a 	bl	8019978 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8019164:	68bb      	ldr	r3, [r7, #8]
 8019166:	8b1b      	ldrh	r3, [r3, #24]
 8019168:	4618      	mov	r0, r3
 801916a:	f000 fbe5 	bl	8019938 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801916e:	683b      	ldr	r3, [r7, #0]
 8019170:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8019174:	fb03 f202 	mul.w	r2, r3, r2
 8019178:	68bb      	ldr	r3, [r7, #8]
 801917a:	689b      	ldr	r3, [r3, #8]
 801917c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019180:	4a32      	ldr	r2, [pc, #200]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 8019182:	6093      	str	r3, [r2, #8]
        break;
 8019184:	e0b9      	b.n	80192fa <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8019186:	68bb      	ldr	r3, [r7, #8]
 8019188:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801918a:	2b00      	cmp	r3, #0
 801918c:	d102      	bne.n	8019194 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801918e:	f04f 33ff 	mov.w	r3, #4294967295
 8019192:	e0b3      	b.n	80192fc <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8019194:	68bb      	ldr	r3, [r7, #8]
 8019196:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801919a:	2b01      	cmp	r3, #1
 801919c:	d104      	bne.n	80191a8 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801919e:	68bb      	ldr	r3, [r7, #8]
 80191a0:	695b      	ldr	r3, [r3, #20]
 80191a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80191a6:	e002      	b.n	80191ae <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 80191a8:	23ff      	movs	r3, #255	@ 0xff
 80191aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80191ae:	68bb      	ldr	r3, [r7, #8]
 80191b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	bf14      	ite	ne
 80191b6:	2301      	movne	r3, #1
 80191b8:	2300      	moveq	r3, #0
 80191ba:	b2db      	uxtb	r3, r3
 80191bc:	4618      	mov	r0, r3
 80191be:	f000 fd53 	bl	8019c68 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80191c2:	683b      	ldr	r3, [r7, #0]
 80191c4:	b2db      	uxtb	r3, r3
 80191c6:	4618      	mov	r0, r3
 80191c8:	f000 fd5d 	bl	8019c86 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80191cc:	4b1f      	ldr	r3, [pc, #124]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 80191ce:	2201      	movs	r2, #1
 80191d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80191d4:	68bb      	ldr	r3, [r7, #8]
 80191d6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80191da:	4b1c      	ldr	r3, [pc, #112]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 80191dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80191e0:	68bb      	ldr	r3, [r7, #8]
 80191e2:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80191e6:	4b19      	ldr	r3, [pc, #100]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 80191e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80191ec:	68bb      	ldr	r3, [r7, #8]
 80191ee:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80191f2:	4b16      	ldr	r3, [pc, #88]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 80191f4:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 80191f8:	68bb      	ldr	r3, [r7, #8]
 80191fa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80191fe:	2b02      	cmp	r3, #2
 8019200:	d010      	beq.n	8019224 <RadioSetRxGenericConfig+0x29c>
 8019202:	2b02      	cmp	r3, #2
 8019204:	dc2c      	bgt.n	8019260 <RadioSetRxGenericConfig+0x2d8>
 8019206:	2b00      	cmp	r3, #0
 8019208:	d002      	beq.n	8019210 <RadioSetRxGenericConfig+0x288>
 801920a:	2b01      	cmp	r3, #1
 801920c:	d005      	beq.n	801921a <RadioSetRxGenericConfig+0x292>
            break;
 801920e:	e027      	b.n	8019260 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019210:	4b0e      	ldr	r3, [pc, #56]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 8019212:	2200      	movs	r2, #0
 8019214:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019218:	e023      	b.n	8019262 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801921a:	4b0c      	ldr	r3, [pc, #48]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 801921c:	2201      	movs	r2, #1
 801921e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019222:	e01e      	b.n	8019262 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019224:	68bb      	ldr	r3, [r7, #8]
 8019226:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801922a:	2b0b      	cmp	r3, #11
 801922c:	d004      	beq.n	8019238 <RadioSetRxGenericConfig+0x2b0>
 801922e:	68bb      	ldr	r3, [r7, #8]
 8019230:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019234:	2b0c      	cmp	r3, #12
 8019236:	d104      	bne.n	8019242 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019238:	4b04      	ldr	r3, [pc, #16]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 801923a:	2201      	movs	r2, #1
 801923c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019240:	e00f      	b.n	8019262 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019242:	4b02      	ldr	r3, [pc, #8]	@ (801924c <RadioSetRxGenericConfig+0x2c4>)
 8019244:	2200      	movs	r2, #0
 8019246:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801924a:	e00a      	b.n	8019262 <RadioSetRxGenericConfig+0x2da>
 801924c:	20001438 	.word	0x20001438
 8019250:	20001434 	.word	0x20001434
 8019254:	200014ac 	.word	0x200014ac
 8019258:	20001470 	.word	0x20001470
 801925c:	20001446 	.word	0x20001446
            break;
 8019260:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019262:	4b28      	ldr	r3, [pc, #160]	@ (8019304 <RadioSetRxGenericConfig+0x37c>)
 8019264:	2201      	movs	r2, #1
 8019266:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019268:	68bb      	ldr	r3, [r7, #8]
 801926a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 801926c:	4b25      	ldr	r3, [pc, #148]	@ (8019304 <RadioSetRxGenericConfig+0x37c>)
 801926e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8019270:	68bb      	ldr	r3, [r7, #8]
 8019272:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8019276:	4b23      	ldr	r3, [pc, #140]	@ (8019304 <RadioSetRxGenericConfig+0x37c>)
 8019278:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801927a:	4a22      	ldr	r2, [pc, #136]	@ (8019304 <RadioSetRxGenericConfig+0x37c>)
 801927c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019280:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019282:	68bb      	ldr	r3, [r7, #8]
 8019284:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8019288:	4b1e      	ldr	r3, [pc, #120]	@ (8019304 <RadioSetRxGenericConfig+0x37c>)
 801928a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801928e:	68bb      	ldr	r3, [r7, #8]
 8019290:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8019294:	4b1b      	ldr	r3, [pc, #108]	@ (8019304 <RadioSetRxGenericConfig+0x37c>)
 8019296:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 801929a:	f7ff f98e 	bl	80185ba <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801929e:	2001      	movs	r0, #1
 80192a0:	f7fe fb22 	bl	80178e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80192a4:	4818      	ldr	r0, [pc, #96]	@ (8019308 <RadioSetRxGenericConfig+0x380>)
 80192a6:	f000 ff7d 	bl	801a1a4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80192aa:	4818      	ldr	r0, [pc, #96]	@ (801930c <RadioSetRxGenericConfig+0x384>)
 80192ac:	f001 f84c 	bl	801a348 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80192b0:	4b14      	ldr	r3, [pc, #80]	@ (8019304 <RadioSetRxGenericConfig+0x37c>)
 80192b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80192b6:	2b01      	cmp	r3, #1
 80192b8:	d10d      	bne.n	80192d6 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80192ba:	f240 7036 	movw	r0, #1846	@ 0x736
 80192be:	f001 f99f 	bl	801a600 <SUBGRF_ReadRegister>
 80192c2:	4603      	mov	r3, r0
 80192c4:	f023 0304 	bic.w	r3, r3, #4
 80192c8:	b2db      	uxtb	r3, r3
 80192ca:	4619      	mov	r1, r3
 80192cc:	f240 7036 	movw	r0, #1846	@ 0x736
 80192d0:	f001 f982 	bl	801a5d8 <SUBGRF_WriteRegister>
 80192d4:	e00c      	b.n	80192f0 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80192d6:	f240 7036 	movw	r0, #1846	@ 0x736
 80192da:	f001 f991 	bl	801a600 <SUBGRF_ReadRegister>
 80192de:	4603      	mov	r3, r0
 80192e0:	f043 0304 	orr.w	r3, r3, #4
 80192e4:	b2db      	uxtb	r3, r3
 80192e6:	4619      	mov	r1, r3
 80192e8:	f240 7036 	movw	r0, #1846	@ 0x736
 80192ec:	f001 f974 	bl	801a5d8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80192f0:	4b04      	ldr	r3, [pc, #16]	@ (8019304 <RadioSetRxGenericConfig+0x37c>)
 80192f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80192f6:	609a      	str	r2, [r3, #8]
        break;
 80192f8:	bf00      	nop
    }
    return status;
 80192fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80192fc:	4618      	mov	r0, r3
 80192fe:	3730      	adds	r7, #48	@ 0x30
 8019300:	46bd      	mov	sp, r7
 8019302:	bd80      	pop	{r7, pc}
 8019304:	20001438 	.word	0x20001438
 8019308:	20001470 	.word	0x20001470
 801930c:	20001446 	.word	0x20001446

08019310 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b08e      	sub	sp, #56	@ 0x38
 8019314:	af00      	add	r7, sp, #0
 8019316:	60b9      	str	r1, [r7, #8]
 8019318:	607b      	str	r3, [r7, #4]
 801931a:	4603      	mov	r3, r0
 801931c:	73fb      	strb	r3, [r7, #15]
 801931e:	4613      	mov	r3, r2
 8019320:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8019322:	2300      	movs	r3, #0
 8019324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019326:	2300      	movs	r3, #0
 8019328:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801932a:	f001 fc3c 	bl	801aba6 <RFW_DeInit>
    switch( modem )
 801932e:	7bfb      	ldrb	r3, [r7, #15]
 8019330:	2b03      	cmp	r3, #3
 8019332:	f200 8204 	bhi.w	801973e <RadioSetTxGenericConfig+0x42e>
 8019336:	a201      	add	r2, pc, #4	@ (adr r2, 801933c <RadioSetTxGenericConfig+0x2c>)
 8019338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801933c:	080194c1 	.word	0x080194c1
 8019340:	08019609 	.word	0x08019609
 8019344:	08019701 	.word	0x08019701
 8019348:	0801934d 	.word	0x0801934d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801934c:	68bb      	ldr	r3, [r7, #8]
 801934e:	7c9b      	ldrb	r3, [r3, #18]
 8019350:	2b08      	cmp	r3, #8
 8019352:	d902      	bls.n	801935a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8019354:	f04f 33ff 	mov.w	r3, #4294967295
 8019358:	e206      	b.n	8019768 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801935a:	68bb      	ldr	r3, [r7, #8]
 801935c:	6899      	ldr	r1, [r3, #8]
 801935e:	68bb      	ldr	r3, [r7, #8]
 8019360:	7c9b      	ldrb	r3, [r3, #18]
 8019362:	461a      	mov	r2, r3
 8019364:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019368:	4618      	mov	r0, r3
 801936a:	f001 fd0f 	bl	801ad8c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801936e:	68bb      	ldr	r3, [r7, #8]
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d102      	bne.n	801937c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8019376:	f04f 33ff 	mov.w	r3, #4294967295
 801937a:	e1f5      	b.n	8019768 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801937c:	68bb      	ldr	r3, [r7, #8]
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	f242 7210 	movw	r2, #10000	@ 0x2710
 8019384:	4293      	cmp	r3, r2
 8019386:	d813      	bhi.n	80193b0 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8019388:	2302      	movs	r3, #2
 801938a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801938e:	4b99      	ldr	r3, [pc, #612]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 8019390:	2203      	movs	r2, #3
 8019392:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8019394:	4b97      	ldr	r3, [pc, #604]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 8019396:	2203      	movs	r2, #3
 8019398:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801939c:	68bb      	ldr	r3, [r7, #8]
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	4a94      	ldr	r2, [pc, #592]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 80193a2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80193a4:	68bb      	ldr	r3, [r7, #8]
 80193a6:	7cda      	ldrb	r2, [r3, #19]
 80193a8:	4b92      	ldr	r3, [pc, #584]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 80193aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80193ae:	e017      	b.n	80193e0 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 80193b0:	2300      	movs	r3, #0
 80193b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80193b6:	4b8f      	ldr	r3, [pc, #572]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 80193b8:	2200      	movs	r2, #0
 80193ba:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80193bc:	4b8d      	ldr	r3, [pc, #564]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 80193be:	2200      	movs	r2, #0
 80193c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80193c4:	68bb      	ldr	r3, [r7, #8]
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	4a8a      	ldr	r2, [pc, #552]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 80193ca:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80193cc:	68bb      	ldr	r3, [r7, #8]
 80193ce:	7cda      	ldrb	r2, [r3, #19]
 80193d0:	4b88      	ldr	r3, [pc, #544]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 80193d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 80193d6:	68bb      	ldr	r3, [r7, #8]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	089b      	lsrs	r3, r3, #2
 80193dc:	4a85      	ldr	r2, [pc, #532]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 80193de:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 80193e0:	68bb      	ldr	r3, [r7, #8]
 80193e2:	685b      	ldr	r3, [r3, #4]
 80193e4:	b29b      	uxth	r3, r3
 80193e6:	00db      	lsls	r3, r3, #3
 80193e8:	b29a      	uxth	r2, r3
 80193ea:	4b82      	ldr	r3, [pc, #520]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 80193ec:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80193ee:	4b81      	ldr	r3, [pc, #516]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 80193f0:	2204      	movs	r2, #4
 80193f2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 80193f4:	68bb      	ldr	r3, [r7, #8]
 80193f6:	7c9b      	ldrb	r3, [r3, #18]
 80193f8:	00db      	lsls	r3, r3, #3
 80193fa:	b2da      	uxtb	r2, r3
 80193fc:	4b7d      	ldr	r3, [pc, #500]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 80193fe:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019400:	4b7c      	ldr	r3, [pc, #496]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 8019402:	2200      	movs	r2, #0
 8019404:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8019406:	68bb      	ldr	r3, [r7, #8]
 8019408:	7d9b      	ldrb	r3, [r3, #22]
 801940a:	2b02      	cmp	r3, #2
 801940c:	d003      	beq.n	8019416 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801940e:	68bb      	ldr	r3, [r7, #8]
 8019410:	7d1b      	ldrb	r3, [r3, #20]
 8019412:	2b02      	cmp	r3, #2
 8019414:	d12b      	bne.n	801946e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8019416:	68bb      	ldr	r3, [r7, #8]
 8019418:	7d5b      	ldrb	r3, [r3, #21]
 801941a:	2bf1      	cmp	r3, #241	@ 0xf1
 801941c:	d00a      	beq.n	8019434 <RadioSetTxGenericConfig+0x124>
 801941e:	68bb      	ldr	r3, [r7, #8]
 8019420:	7d5b      	ldrb	r3, [r3, #21]
 8019422:	2bf2      	cmp	r3, #242	@ 0xf2
 8019424:	d006      	beq.n	8019434 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019426:	68bb      	ldr	r3, [r7, #8]
 8019428:	7d5b      	ldrb	r3, [r3, #21]
 801942a:	2b01      	cmp	r3, #1
 801942c:	d002      	beq.n	8019434 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801942e:	f04f 33ff 	mov.w	r3, #4294967295
 8019432:	e199      	b.n	8019768 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8019434:	68bb      	ldr	r3, [r7, #8]
 8019436:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8019438:	2301      	movs	r3, #1
 801943a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801943e:	4b6e      	ldr	r3, [pc, #440]	@ (80195f8 <RadioSetTxGenericConfig+0x2e8>)
 8019440:	6819      	ldr	r1, [r3, #0]
 8019442:	f107 0320 	add.w	r3, r7, #32
 8019446:	4a6d      	ldr	r2, [pc, #436]	@ (80195fc <RadioSetTxGenericConfig+0x2ec>)
 8019448:	4618      	mov	r0, r3
 801944a:	f001 fb9f 	bl	801ab8c <RFW_Init>
 801944e:	4603      	mov	r3, r0
 8019450:	2b00      	cmp	r3, #0
 8019452:	d002      	beq.n	801945a <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8019454:	f04f 33ff 	mov.w	r3, #4294967295
 8019458:	e186      	b.n	8019768 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801945a:	4b66      	ldr	r3, [pc, #408]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 801945c:	2200      	movs	r2, #0
 801945e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8019460:	4b64      	ldr	r3, [pc, #400]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 8019462:	2201      	movs	r2, #1
 8019464:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019466:	4b63      	ldr	r3, [pc, #396]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 8019468:	2200      	movs	r2, #0
 801946a:	755a      	strb	r2, [r3, #21]
        {
 801946c:	e00b      	b.n	8019486 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801946e:	68bb      	ldr	r3, [r7, #8]
 8019470:	7d5a      	ldrb	r2, [r3, #21]
 8019472:	4b60      	ldr	r3, [pc, #384]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 8019474:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8019476:	68bb      	ldr	r3, [r7, #8]
 8019478:	7d9a      	ldrb	r2, [r3, #22]
 801947a:	4b5e      	ldr	r3, [pc, #376]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 801947c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801947e:	68bb      	ldr	r3, [r7, #8]
 8019480:	7d1a      	ldrb	r2, [r3, #20]
 8019482:	4b5c      	ldr	r3, [pc, #368]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 8019484:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8019486:	f7ff f898 	bl	80185ba <RadioStandby>
        RadioSetModem( radio_modem );
 801948a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801948e:	4618      	mov	r0, r3
 8019490:	f7fe fa2a 	bl	80178e8 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019494:	485a      	ldr	r0, [pc, #360]	@ (8019600 <RadioSetTxGenericConfig+0x2f0>)
 8019496:	f000 fe85 	bl	801a1a4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801949a:	485a      	ldr	r0, [pc, #360]	@ (8019604 <RadioSetTxGenericConfig+0x2f4>)
 801949c:	f000 ff54 	bl	801a348 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80194a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80194a4:	4618      	mov	r0, r3
 80194a6:	f000 fa18 	bl	80198da <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80194aa:	68bb      	ldr	r3, [r7, #8]
 80194ac:	8a1b      	ldrh	r3, [r3, #16]
 80194ae:	4618      	mov	r0, r3
 80194b0:	f000 fa62 	bl	8019978 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 80194b4:	68bb      	ldr	r3, [r7, #8]
 80194b6:	899b      	ldrh	r3, [r3, #12]
 80194b8:	4618      	mov	r0, r3
 80194ba:	f000 fa3d 	bl	8019938 <SUBGRF_SetCrcPolynomial>
        break;
 80194be:	e13f      	b.n	8019740 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 80194c0:	68bb      	ldr	r3, [r7, #8]
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d102      	bne.n	80194ce <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 80194c8:	f04f 33ff 	mov.w	r3, #4294967295
 80194cc:	e14c      	b.n	8019768 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 80194ce:	68bb      	ldr	r3, [r7, #8]
 80194d0:	7c9b      	ldrb	r3, [r3, #18]
 80194d2:	2b08      	cmp	r3, #8
 80194d4:	d902      	bls.n	80194dc <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 80194d6:	f04f 33ff 	mov.w	r3, #4294967295
 80194da:	e145      	b.n	8019768 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80194dc:	68bb      	ldr	r3, [r7, #8]
 80194de:	6899      	ldr	r1, [r3, #8]
 80194e0:	68bb      	ldr	r3, [r7, #8]
 80194e2:	7c9b      	ldrb	r3, [r3, #18]
 80194e4:	461a      	mov	r2, r3
 80194e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80194ea:	4618      	mov	r0, r3
 80194ec:	f001 fc4e 	bl	801ad8c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80194f0:	4b40      	ldr	r3, [pc, #256]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 80194f2:	2200      	movs	r2, #0
 80194f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80194f8:	68bb      	ldr	r3, [r7, #8]
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	4a3d      	ldr	r2, [pc, #244]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 80194fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8019500:	68bb      	ldr	r3, [r7, #8]
 8019502:	7cda      	ldrb	r2, [r3, #19]
 8019504:	4b3b      	ldr	r3, [pc, #236]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 8019506:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801950a:	68bb      	ldr	r3, [r7, #8]
 801950c:	699b      	ldr	r3, [r3, #24]
 801950e:	4a39      	ldr	r2, [pc, #228]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 8019510:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019512:	4b38      	ldr	r3, [pc, #224]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 8019514:	2200      	movs	r2, #0
 8019516:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8019518:	68bb      	ldr	r3, [r7, #8]
 801951a:	685b      	ldr	r3, [r3, #4]
 801951c:	b29b      	uxth	r3, r3
 801951e:	00db      	lsls	r3, r3, #3
 8019520:	b29a      	uxth	r2, r3
 8019522:	4b34      	ldr	r3, [pc, #208]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 8019524:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8019526:	4b33      	ldr	r3, [pc, #204]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 8019528:	2204      	movs	r2, #4
 801952a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801952c:	68bb      	ldr	r3, [r7, #8]
 801952e:	7c9b      	ldrb	r3, [r3, #18]
 8019530:	00db      	lsls	r3, r3, #3
 8019532:	b2da      	uxtb	r2, r3
 8019534:	4b2f      	ldr	r3, [pc, #188]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 8019536:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019538:	4b2e      	ldr	r3, [pc, #184]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 801953a:	2200      	movs	r2, #0
 801953c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801953e:	68bb      	ldr	r3, [r7, #8]
 8019540:	7d9b      	ldrb	r3, [r3, #22]
 8019542:	2b02      	cmp	r3, #2
 8019544:	d003      	beq.n	801954e <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019546:	68bb      	ldr	r3, [r7, #8]
 8019548:	7d1b      	ldrb	r3, [r3, #20]
 801954a:	2b02      	cmp	r3, #2
 801954c:	d12a      	bne.n	80195a4 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801954e:	68bb      	ldr	r3, [r7, #8]
 8019550:	7d5b      	ldrb	r3, [r3, #21]
 8019552:	2bf1      	cmp	r3, #241	@ 0xf1
 8019554:	d00a      	beq.n	801956c <RadioSetTxGenericConfig+0x25c>
 8019556:	68bb      	ldr	r3, [r7, #8]
 8019558:	7d5b      	ldrb	r3, [r3, #21]
 801955a:	2bf2      	cmp	r3, #242	@ 0xf2
 801955c:	d006      	beq.n	801956c <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801955e:	68bb      	ldr	r3, [r7, #8]
 8019560:	7d5b      	ldrb	r3, [r3, #21]
 8019562:	2b01      	cmp	r3, #1
 8019564:	d002      	beq.n	801956c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8019566:	f04f 33ff 	mov.w	r3, #4294967295
 801956a:	e0fd      	b.n	8019768 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801956c:	2301      	movs	r3, #1
 801956e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8019570:	68bb      	ldr	r3, [r7, #8]
 8019572:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8019574:	4b20      	ldr	r3, [pc, #128]	@ (80195f8 <RadioSetTxGenericConfig+0x2e8>)
 8019576:	6819      	ldr	r1, [r3, #0]
 8019578:	f107 0314 	add.w	r3, r7, #20
 801957c:	4a1f      	ldr	r2, [pc, #124]	@ (80195fc <RadioSetTxGenericConfig+0x2ec>)
 801957e:	4618      	mov	r0, r3
 8019580:	f001 fb04 	bl	801ab8c <RFW_Init>
 8019584:	4603      	mov	r3, r0
 8019586:	2b00      	cmp	r3, #0
 8019588:	d002      	beq.n	8019590 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801958a:	f04f 33ff 	mov.w	r3, #4294967295
 801958e:	e0eb      	b.n	8019768 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019590:	4b18      	ldr	r3, [pc, #96]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 8019592:	2200      	movs	r2, #0
 8019594:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8019596:	4b17      	ldr	r3, [pc, #92]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 8019598:	2201      	movs	r2, #1
 801959a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801959c:	4b15      	ldr	r3, [pc, #84]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 801959e:	2200      	movs	r2, #0
 80195a0:	755a      	strb	r2, [r3, #21]
        {
 80195a2:	e00b      	b.n	80195bc <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80195a4:	68bb      	ldr	r3, [r7, #8]
 80195a6:	7d5a      	ldrb	r2, [r3, #21]
 80195a8:	4b12      	ldr	r3, [pc, #72]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 80195aa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80195ac:	68bb      	ldr	r3, [r7, #8]
 80195ae:	7d9a      	ldrb	r2, [r3, #22]
 80195b0:	4b10      	ldr	r3, [pc, #64]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 80195b2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80195b4:	68bb      	ldr	r3, [r7, #8]
 80195b6:	7d1a      	ldrb	r2, [r3, #20]
 80195b8:	4b0e      	ldr	r3, [pc, #56]	@ (80195f4 <RadioSetTxGenericConfig+0x2e4>)
 80195ba:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80195bc:	f7fe fffd 	bl	80185ba <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80195c0:	2000      	movs	r0, #0
 80195c2:	f7fe f991 	bl	80178e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80195c6:	480e      	ldr	r0, [pc, #56]	@ (8019600 <RadioSetTxGenericConfig+0x2f0>)
 80195c8:	f000 fdec 	bl	801a1a4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80195cc:	480d      	ldr	r0, [pc, #52]	@ (8019604 <RadioSetTxGenericConfig+0x2f4>)
 80195ce:	f000 febb 	bl	801a348 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80195d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80195d6:	4618      	mov	r0, r3
 80195d8:	f000 f97f 	bl	80198da <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80195dc:	68bb      	ldr	r3, [r7, #8]
 80195de:	8a1b      	ldrh	r3, [r3, #16]
 80195e0:	4618      	mov	r0, r3
 80195e2:	f000 f9c9 	bl	8019978 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80195e6:	68bb      	ldr	r3, [r7, #8]
 80195e8:	899b      	ldrh	r3, [r3, #12]
 80195ea:	4618      	mov	r0, r3
 80195ec:	f000 f9a4 	bl	8019938 <SUBGRF_SetCrcPolynomial>
        break;
 80195f0:	e0a6      	b.n	8019740 <RadioSetTxGenericConfig+0x430>
 80195f2:	bf00      	nop
 80195f4:	20001438 	.word	0x20001438
 80195f8:	20001434 	.word	0x20001434
 80195fc:	20001494 	.word	0x20001494
 8019600:	20001470 	.word	0x20001470
 8019604:	20001446 	.word	0x20001446
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019608:	4b59      	ldr	r3, [pc, #356]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 801960a:	2201      	movs	r2, #1
 801960c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019610:	68bb      	ldr	r3, [r7, #8]
 8019612:	781a      	ldrb	r2, [r3, #0]
 8019614:	4b56      	ldr	r3, [pc, #344]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 8019616:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801961a:	68bb      	ldr	r3, [r7, #8]
 801961c:	785a      	ldrb	r2, [r3, #1]
 801961e:	4b54      	ldr	r3, [pc, #336]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 8019620:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019624:	68bb      	ldr	r3, [r7, #8]
 8019626:	789a      	ldrb	r2, [r3, #2]
 8019628:	4b51      	ldr	r3, [pc, #324]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 801962a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801962e:	68bb      	ldr	r3, [r7, #8]
 8019630:	78db      	ldrb	r3, [r3, #3]
 8019632:	2b02      	cmp	r3, #2
 8019634:	d010      	beq.n	8019658 <RadioSetTxGenericConfig+0x348>
 8019636:	2b02      	cmp	r3, #2
 8019638:	dc20      	bgt.n	801967c <RadioSetTxGenericConfig+0x36c>
 801963a:	2b00      	cmp	r3, #0
 801963c:	d002      	beq.n	8019644 <RadioSetTxGenericConfig+0x334>
 801963e:	2b01      	cmp	r3, #1
 8019640:	d005      	beq.n	801964e <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8019642:	e01b      	b.n	801967c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019644:	4b4a      	ldr	r3, [pc, #296]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 8019646:	2200      	movs	r2, #0
 8019648:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801964c:	e017      	b.n	801967e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801964e:	4b48      	ldr	r3, [pc, #288]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 8019650:	2201      	movs	r2, #1
 8019652:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019656:	e012      	b.n	801967e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019658:	68bb      	ldr	r3, [r7, #8]
 801965a:	781b      	ldrb	r3, [r3, #0]
 801965c:	2b0b      	cmp	r3, #11
 801965e:	d003      	beq.n	8019668 <RadioSetTxGenericConfig+0x358>
 8019660:	68bb      	ldr	r3, [r7, #8]
 8019662:	781b      	ldrb	r3, [r3, #0]
 8019664:	2b0c      	cmp	r3, #12
 8019666:	d104      	bne.n	8019672 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019668:	4b41      	ldr	r3, [pc, #260]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 801966a:	2201      	movs	r2, #1
 801966c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019670:	e005      	b.n	801967e <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019672:	4b3f      	ldr	r3, [pc, #252]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 8019674:	2200      	movs	r2, #0
 8019676:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801967a:	e000      	b.n	801967e <RadioSetTxGenericConfig+0x36e>
            break;
 801967c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801967e:	4b3c      	ldr	r3, [pc, #240]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 8019680:	2201      	movs	r2, #1
 8019682:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019684:	68bb      	ldr	r3, [r7, #8]
 8019686:	889a      	ldrh	r2, [r3, #4]
 8019688:	4b39      	ldr	r3, [pc, #228]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 801968a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801968c:	68bb      	ldr	r3, [r7, #8]
 801968e:	799a      	ldrb	r2, [r3, #6]
 8019690:	4b37      	ldr	r3, [pc, #220]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 8019692:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019694:	68bb      	ldr	r3, [r7, #8]
 8019696:	79da      	ldrb	r2, [r3, #7]
 8019698:	4b35      	ldr	r3, [pc, #212]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 801969a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801969e:	68bb      	ldr	r3, [r7, #8]
 80196a0:	7a1a      	ldrb	r2, [r3, #8]
 80196a2:	4b33      	ldr	r3, [pc, #204]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 80196a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 80196a8:	f7fe ff87 	bl	80185ba <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80196ac:	2001      	movs	r0, #1
 80196ae:	f7fe f91b 	bl	80178e8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80196b2:	4830      	ldr	r0, [pc, #192]	@ (8019774 <RadioSetTxGenericConfig+0x464>)
 80196b4:	f000 fd76 	bl	801a1a4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80196b8:	482f      	ldr	r0, [pc, #188]	@ (8019778 <RadioSetTxGenericConfig+0x468>)
 80196ba:	f000 fe45 	bl	801a348 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80196be:	4b2c      	ldr	r3, [pc, #176]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 80196c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80196c4:	2b06      	cmp	r3, #6
 80196c6:	d10d      	bne.n	80196e4 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80196c8:	f640 0089 	movw	r0, #2185	@ 0x889
 80196cc:	f000 ff98 	bl	801a600 <SUBGRF_ReadRegister>
 80196d0:	4603      	mov	r3, r0
 80196d2:	f023 0304 	bic.w	r3, r3, #4
 80196d6:	b2db      	uxtb	r3, r3
 80196d8:	4619      	mov	r1, r3
 80196da:	f640 0089 	movw	r0, #2185	@ 0x889
 80196de:	f000 ff7b 	bl	801a5d8 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 80196e2:	e02d      	b.n	8019740 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80196e4:	f640 0089 	movw	r0, #2185	@ 0x889
 80196e8:	f000 ff8a 	bl	801a600 <SUBGRF_ReadRegister>
 80196ec:	4603      	mov	r3, r0
 80196ee:	f043 0304 	orr.w	r3, r3, #4
 80196f2:	b2db      	uxtb	r3, r3
 80196f4:	4619      	mov	r1, r3
 80196f6:	f640 0089 	movw	r0, #2185	@ 0x889
 80196fa:	f000 ff6d 	bl	801a5d8 <SUBGRF_WriteRegister>
        break;
 80196fe:	e01f      	b.n	8019740 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8019700:	68bb      	ldr	r3, [r7, #8]
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	2b00      	cmp	r3, #0
 8019706:	d004      	beq.n	8019712 <RadioSetTxGenericConfig+0x402>
 8019708:	68bb      	ldr	r3, [r7, #8]
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019710:	d902      	bls.n	8019718 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8019712:	f04f 33ff 	mov.w	r3, #4294967295
 8019716:	e027      	b.n	8019768 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8019718:	2003      	movs	r0, #3
 801971a:	f7fe f8e5 	bl	80178e8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801971e:	4b14      	ldr	r3, [pc, #80]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 8019720:	2202      	movs	r2, #2
 8019722:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8019726:	68bb      	ldr	r3, [r7, #8]
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	4a11      	ldr	r2, [pc, #68]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 801972c:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801972e:	4b10      	ldr	r3, [pc, #64]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 8019730:	2216      	movs	r2, #22
 8019732:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019736:	480f      	ldr	r0, [pc, #60]	@ (8019774 <RadioSetTxGenericConfig+0x464>)
 8019738:	f000 fd34 	bl	801a1a4 <SUBGRF_SetModulationParams>
        break;
 801973c:	e000      	b.n	8019740 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801973e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019744:	4618      	mov	r0, r3
 8019746:	f001 f863 	bl	801a810 <SUBGRF_SetRfTxPower>
 801974a:	4603      	mov	r3, r0
 801974c:	461a      	mov	r2, r3
 801974e:	4b08      	ldr	r3, [pc, #32]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 8019750:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8019754:	4b06      	ldr	r3, [pc, #24]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 8019756:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801975a:	4618      	mov	r0, r3
 801975c:	f001 fa37 	bl	801abce <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8019760:	4a03      	ldr	r2, [pc, #12]	@ (8019770 <RadioSetTxGenericConfig+0x460>)
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	6053      	str	r3, [r2, #4]
    return 0;
 8019766:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8019768:	4618      	mov	r0, r3
 801976a:	3738      	adds	r7, #56	@ 0x38
 801976c:	46bd      	mov	sp, r7
 801976e:	bd80      	pop	{r7, pc}
 8019770:	20001438 	.word	0x20001438
 8019774:	20001470 	.word	0x20001470
 8019778:	20001446 	.word	0x20001446

0801977c <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801977c:	b480      	push	{r7}
 801977e:	b085      	sub	sp, #20
 8019780:	af00      	add	r7, sp, #0
 8019782:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8019784:	2301      	movs	r3, #1
 8019786:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8019788:	7bfb      	ldrb	r3, [r7, #15]
}
 801978a:	4618      	mov	r0, r3
 801978c:	3714      	adds	r7, #20
 801978e:	46bd      	mov	sp, r7
 8019790:	bc80      	pop	{r7}
 8019792:	4770      	bx	lr

08019794 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8019794:	b480      	push	{r7}
 8019796:	b083      	sub	sp, #12
 8019798:	af00      	add	r7, sp, #0
 801979a:	6078      	str	r0, [r7, #4]
 801979c:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801979e:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 80197a0:	4618      	mov	r0, r3
 80197a2:	370c      	adds	r7, #12
 80197a4:	46bd      	mov	sp, r7
 80197a6:	bc80      	pop	{r7}
 80197a8:	4770      	bx	lr
	...

080197ac <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80197ac:	b580      	push	{r7, lr}
 80197ae:	b084      	sub	sp, #16
 80197b0:	af00      	add	r7, sp, #0
 80197b2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d002      	beq.n	80197c0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80197ba:	4a1d      	ldr	r2, [pc, #116]	@ (8019830 <SUBGRF_Init+0x84>)
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80197c0:	f7e8 f856 	bl	8001870 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80197c4:	2002      	movs	r0, #2
 80197c6:	f001 f8ff 	bl	801a9c8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80197ca:	4b1a      	ldr	r3, [pc, #104]	@ (8019834 <SUBGRF_Init+0x88>)
 80197cc:	2200      	movs	r2, #0
 80197ce:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80197d0:	2000      	movs	r0, #0
 80197d2:	f000 f97d 	bl	8019ad0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80197d6:	f7f0 fb7a 	bl	8009ece <RBI_IsTCXO>
 80197da:	4603      	mov	r3, r0
 80197dc:	2b01      	cmp	r3, #1
 80197de:	d10e      	bne.n	80197fe <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80197e0:	2140      	movs	r1, #64	@ 0x40
 80197e2:	2001      	movs	r0, #1
 80197e4:	f000 fb82 	bl	8019eec <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80197e8:	2100      	movs	r1, #0
 80197ea:	f640 1011 	movw	r0, #2321	@ 0x911
 80197ee:	f000 fef3 	bl	801a5d8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80197f2:	237f      	movs	r3, #127	@ 0x7f
 80197f4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80197f6:	7b38      	ldrb	r0, [r7, #12]
 80197f8:	f000 fa8b 	bl	8019d12 <SUBGRF_Calibrate>
 80197fc:	e009      	b.n	8019812 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80197fe:	2120      	movs	r1, #32
 8019800:	f640 1011 	movw	r0, #2321	@ 0x911
 8019804:	f000 fee8 	bl	801a5d8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8019808:	2120      	movs	r1, #32
 801980a:	f640 1012 	movw	r0, #2322	@ 0x912
 801980e:	f000 fee3 	bl	801a5d8 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019812:	210e      	movs	r1, #14
 8019814:	f640 101f 	movw	r0, #2335	@ 0x91f
 8019818:	f000 fede 	bl	801a5d8 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801981c:	f7f0 fb34 	bl	8009e88 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8019820:	4b05      	ldr	r3, [pc, #20]	@ (8019838 <SUBGRF_Init+0x8c>)
 8019822:	2201      	movs	r2, #1
 8019824:	701a      	strb	r2, [r3, #0]
}
 8019826:	bf00      	nop
 8019828:	3710      	adds	r7, #16
 801982a:	46bd      	mov	sp, r7
 801982c:	bd80      	pop	{r7, pc}
 801982e:	bf00      	nop
 8019830:	200014d0 	.word	0x200014d0
 8019834:	200014cc 	.word	0x200014cc
 8019838:	200014c4 	.word	0x200014c4

0801983c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801983c:	b480      	push	{r7}
 801983e:	af00      	add	r7, sp, #0
    return OperatingMode;
 8019840:	4b02      	ldr	r3, [pc, #8]	@ (801984c <SUBGRF_GetOperatingMode+0x10>)
 8019842:	781b      	ldrb	r3, [r3, #0]
}
 8019844:	4618      	mov	r0, r3
 8019846:	46bd      	mov	sp, r7
 8019848:	bc80      	pop	{r7}
 801984a:	4770      	bx	lr
 801984c:	200014c4 	.word	0x200014c4

08019850 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8019850:	b580      	push	{r7, lr}
 8019852:	b082      	sub	sp, #8
 8019854:	af00      	add	r7, sp, #0
 8019856:	6078      	str	r0, [r7, #4]
 8019858:	460b      	mov	r3, r1
 801985a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801985c:	78fb      	ldrb	r3, [r7, #3]
 801985e:	461a      	mov	r2, r3
 8019860:	6879      	ldr	r1, [r7, #4]
 8019862:	2000      	movs	r0, #0
 8019864:	f000 ff24 	bl	801a6b0 <SUBGRF_WriteBuffer>
}
 8019868:	bf00      	nop
 801986a:	3708      	adds	r7, #8
 801986c:	46bd      	mov	sp, r7
 801986e:	bd80      	pop	{r7, pc}

08019870 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8019870:	b580      	push	{r7, lr}
 8019872:	b086      	sub	sp, #24
 8019874:	af00      	add	r7, sp, #0
 8019876:	60f8      	str	r0, [r7, #12]
 8019878:	60b9      	str	r1, [r7, #8]
 801987a:	4613      	mov	r3, r2
 801987c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801987e:	2300      	movs	r3, #0
 8019880:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8019882:	f107 0317 	add.w	r3, r7, #23
 8019886:	4619      	mov	r1, r3
 8019888:	68b8      	ldr	r0, [r7, #8]
 801988a:	f000 fe27 	bl	801a4dc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801988e:	68bb      	ldr	r3, [r7, #8]
 8019890:	781b      	ldrb	r3, [r3, #0]
 8019892:	79fa      	ldrb	r2, [r7, #7]
 8019894:	429a      	cmp	r2, r3
 8019896:	d201      	bcs.n	801989c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8019898:	2301      	movs	r3, #1
 801989a:	e007      	b.n	80198ac <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801989c:	7df8      	ldrb	r0, [r7, #23]
 801989e:	68bb      	ldr	r3, [r7, #8]
 80198a0:	781b      	ldrb	r3, [r3, #0]
 80198a2:	461a      	mov	r2, r3
 80198a4:	68f9      	ldr	r1, [r7, #12]
 80198a6:	f000 ff25 	bl	801a6f4 <SUBGRF_ReadBuffer>

    return 0;
 80198aa:	2300      	movs	r3, #0
}
 80198ac:	4618      	mov	r0, r3
 80198ae:	3718      	adds	r7, #24
 80198b0:	46bd      	mov	sp, r7
 80198b2:	bd80      	pop	{r7, pc}

080198b4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80198b4:	b580      	push	{r7, lr}
 80198b6:	b084      	sub	sp, #16
 80198b8:	af00      	add	r7, sp, #0
 80198ba:	60f8      	str	r0, [r7, #12]
 80198bc:	460b      	mov	r3, r1
 80198be:	607a      	str	r2, [r7, #4]
 80198c0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80198c2:	7afb      	ldrb	r3, [r7, #11]
 80198c4:	4619      	mov	r1, r3
 80198c6:	68f8      	ldr	r0, [r7, #12]
 80198c8:	f7ff ffc2 	bl	8019850 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80198cc:	6878      	ldr	r0, [r7, #4]
 80198ce:	f000 f91b 	bl	8019b08 <SUBGRF_SetTx>
}
 80198d2:	bf00      	nop
 80198d4:	3710      	adds	r7, #16
 80198d6:	46bd      	mov	sp, r7
 80198d8:	bd80      	pop	{r7, pc}

080198da <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80198da:	b580      	push	{r7, lr}
 80198dc:	b082      	sub	sp, #8
 80198de:	af00      	add	r7, sp, #0
 80198e0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80198e2:	2208      	movs	r2, #8
 80198e4:	6879      	ldr	r1, [r7, #4]
 80198e6:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 80198ea:	f000 fe9d 	bl	801a628 <SUBGRF_WriteRegisters>
    return 0;
 80198ee:	2300      	movs	r3, #0
}
 80198f0:	4618      	mov	r0, r3
 80198f2:	3708      	adds	r7, #8
 80198f4:	46bd      	mov	sp, r7
 80198f6:	bd80      	pop	{r7, pc}

080198f8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80198f8:	b580      	push	{r7, lr}
 80198fa:	b084      	sub	sp, #16
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	4603      	mov	r3, r0
 8019900:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8019902:	88fb      	ldrh	r3, [r7, #6]
 8019904:	0a1b      	lsrs	r3, r3, #8
 8019906:	b29b      	uxth	r3, r3
 8019908:	b2db      	uxtb	r3, r3
 801990a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801990c:	88fb      	ldrh	r3, [r7, #6]
 801990e:	b2db      	uxtb	r3, r3
 8019910:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019912:	f000 fb6f 	bl	8019ff4 <SUBGRF_GetPacketType>
 8019916:	4603      	mov	r3, r0
 8019918:	2b00      	cmp	r3, #0
 801991a:	d108      	bne.n	801992e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801991c:	f107 030c 	add.w	r3, r7, #12
 8019920:	2202      	movs	r2, #2
 8019922:	4619      	mov	r1, r3
 8019924:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8019928:	f000 fe7e 	bl	801a628 <SUBGRF_WriteRegisters>
            break;
 801992c:	e000      	b.n	8019930 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801992e:	bf00      	nop
    }
}
 8019930:	bf00      	nop
 8019932:	3710      	adds	r7, #16
 8019934:	46bd      	mov	sp, r7
 8019936:	bd80      	pop	{r7, pc}

08019938 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8019938:	b580      	push	{r7, lr}
 801993a:	b084      	sub	sp, #16
 801993c:	af00      	add	r7, sp, #0
 801993e:	4603      	mov	r3, r0
 8019940:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8019942:	88fb      	ldrh	r3, [r7, #6]
 8019944:	0a1b      	lsrs	r3, r3, #8
 8019946:	b29b      	uxth	r3, r3
 8019948:	b2db      	uxtb	r3, r3
 801994a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801994c:	88fb      	ldrh	r3, [r7, #6]
 801994e:	b2db      	uxtb	r3, r3
 8019950:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019952:	f000 fb4f 	bl	8019ff4 <SUBGRF_GetPacketType>
 8019956:	4603      	mov	r3, r0
 8019958:	2b00      	cmp	r3, #0
 801995a:	d108      	bne.n	801996e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801995c:	f107 030c 	add.w	r3, r7, #12
 8019960:	2202      	movs	r2, #2
 8019962:	4619      	mov	r1, r3
 8019964:	f240 60be 	movw	r0, #1726	@ 0x6be
 8019968:	f000 fe5e 	bl	801a628 <SUBGRF_WriteRegisters>
            break;
 801996c:	e000      	b.n	8019970 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801996e:	bf00      	nop
    }
}
 8019970:	bf00      	nop
 8019972:	3710      	adds	r7, #16
 8019974:	46bd      	mov	sp, r7
 8019976:	bd80      	pop	{r7, pc}

08019978 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8019978:	b580      	push	{r7, lr}
 801997a:	b084      	sub	sp, #16
 801997c:	af00      	add	r7, sp, #0
 801997e:	4603      	mov	r3, r0
 8019980:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8019982:	2300      	movs	r3, #0
 8019984:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8019986:	f000 fb35 	bl	8019ff4 <SUBGRF_GetPacketType>
 801998a:	4603      	mov	r3, r0
 801998c:	2b00      	cmp	r3, #0
 801998e:	d121      	bne.n	80199d4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8019990:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019994:	f000 fe34 	bl	801a600 <SUBGRF_ReadRegister>
 8019998:	4603      	mov	r3, r0
 801999a:	f023 0301 	bic.w	r3, r3, #1
 801999e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80199a0:	88fb      	ldrh	r3, [r7, #6]
 80199a2:	0a1b      	lsrs	r3, r3, #8
 80199a4:	b29b      	uxth	r3, r3
 80199a6:	b25b      	sxtb	r3, r3
 80199a8:	f003 0301 	and.w	r3, r3, #1
 80199ac:	b25a      	sxtb	r2, r3
 80199ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80199b2:	4313      	orrs	r3, r2
 80199b4:	b25b      	sxtb	r3, r3
 80199b6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80199b8:	7bfb      	ldrb	r3, [r7, #15]
 80199ba:	4619      	mov	r1, r3
 80199bc:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80199c0:	f000 fe0a 	bl	801a5d8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80199c4:	88fb      	ldrh	r3, [r7, #6]
 80199c6:	b2db      	uxtb	r3, r3
 80199c8:	4619      	mov	r1, r3
 80199ca:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 80199ce:	f000 fe03 	bl	801a5d8 <SUBGRF_WriteRegister>
            break;
 80199d2:	e000      	b.n	80199d6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80199d4:	bf00      	nop
    }
}
 80199d6:	bf00      	nop
 80199d8:	3710      	adds	r7, #16
 80199da:	46bd      	mov	sp, r7
 80199dc:	bd80      	pop	{r7, pc}

080199de <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80199de:	b580      	push	{r7, lr}
 80199e0:	b082      	sub	sp, #8
 80199e2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80199e4:	2300      	movs	r3, #0
 80199e6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80199e8:	2300      	movs	r3, #0
 80199ea:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80199ec:	2300      	movs	r3, #0
 80199ee:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80199f0:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80199f4:	f000 fe04 	bl	801a600 <SUBGRF_ReadRegister>
 80199f8:	4603      	mov	r3, r0
 80199fa:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80199fc:	79fb      	ldrb	r3, [r7, #7]
 80199fe:	f023 0301 	bic.w	r3, r3, #1
 8019a02:	b2db      	uxtb	r3, r3
 8019a04:	4619      	mov	r1, r3
 8019a06:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019a0a:	f000 fde5 	bl	801a5d8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8019a0e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019a12:	f000 fdf5 	bl	801a600 <SUBGRF_ReadRegister>
 8019a16:	4603      	mov	r3, r0
 8019a18:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8019a1a:	79bb      	ldrb	r3, [r7, #6]
 8019a1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019a20:	b2db      	uxtb	r3, r3
 8019a22:	4619      	mov	r1, r3
 8019a24:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019a28:	f000 fdd6 	bl	801a5d8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019a2c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019a30:	f000 f88a 	bl	8019b48 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8019a34:	463b      	mov	r3, r7
 8019a36:	2204      	movs	r2, #4
 8019a38:	4619      	mov	r1, r3
 8019a3a:	f640 0019 	movw	r0, #2073	@ 0x819
 8019a3e:	f000 fe15 	bl	801a66c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8019a42:	2000      	movs	r0, #0
 8019a44:	f000 f844 	bl	8019ad0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8019a48:	79fb      	ldrb	r3, [r7, #7]
 8019a4a:	4619      	mov	r1, r3
 8019a4c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019a50:	f000 fdc2 	bl	801a5d8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8019a54:	79bb      	ldrb	r3, [r7, #6]
 8019a56:	4619      	mov	r1, r3
 8019a58:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019a5c:	f000 fdbc 	bl	801a5d8 <SUBGRF_WriteRegister>

    return number;
 8019a60:	683b      	ldr	r3, [r7, #0]
}
 8019a62:	4618      	mov	r0, r3
 8019a64:	3708      	adds	r7, #8
 8019a66:	46bd      	mov	sp, r7
 8019a68:	bd80      	pop	{r7, pc}
	...

08019a6c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8019a6c:	b580      	push	{r7, lr}
 8019a6e:	b084      	sub	sp, #16
 8019a70:	af00      	add	r7, sp, #0
 8019a72:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8019a74:	2000      	movs	r0, #0
 8019a76:	f7f0 fa12 	bl	8009e9e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019a7a:	2002      	movs	r0, #2
 8019a7c:	f000 ffa4 	bl	801a9c8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019a80:	793b      	ldrb	r3, [r7, #4]
 8019a82:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019a86:	b2db      	uxtb	r3, r3
 8019a88:	009b      	lsls	r3, r3, #2
 8019a8a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019a8c:	793b      	ldrb	r3, [r7, #4]
 8019a8e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019a92:	b2db      	uxtb	r3, r3
 8019a94:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019a96:	b25b      	sxtb	r3, r3
 8019a98:	4313      	orrs	r3, r2
 8019a9a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8019a9c:	793b      	ldrb	r3, [r7, #4]
 8019a9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019aa2:	b2db      	uxtb	r3, r3
 8019aa4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019aa6:	4313      	orrs	r3, r2
 8019aa8:	b25b      	sxtb	r3, r3
 8019aaa:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019aac:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8019aae:	f107 030f 	add.w	r3, r7, #15
 8019ab2:	2201      	movs	r2, #1
 8019ab4:	4619      	mov	r1, r3
 8019ab6:	2084      	movs	r0, #132	@ 0x84
 8019ab8:	f000 fe3e 	bl	801a738 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8019abc:	4b03      	ldr	r3, [pc, #12]	@ (8019acc <SUBGRF_SetSleep+0x60>)
 8019abe:	2200      	movs	r2, #0
 8019ac0:	701a      	strb	r2, [r3, #0]
}
 8019ac2:	bf00      	nop
 8019ac4:	3710      	adds	r7, #16
 8019ac6:	46bd      	mov	sp, r7
 8019ac8:	bd80      	pop	{r7, pc}
 8019aca:	bf00      	nop
 8019acc:	200014c4 	.word	0x200014c4

08019ad0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8019ad0:	b580      	push	{r7, lr}
 8019ad2:	b082      	sub	sp, #8
 8019ad4:	af00      	add	r7, sp, #0
 8019ad6:	4603      	mov	r3, r0
 8019ad8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8019ada:	1dfb      	adds	r3, r7, #7
 8019adc:	2201      	movs	r2, #1
 8019ade:	4619      	mov	r1, r3
 8019ae0:	2080      	movs	r0, #128	@ 0x80
 8019ae2:	f000 fe29 	bl	801a738 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8019ae6:	79fb      	ldrb	r3, [r7, #7]
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d103      	bne.n	8019af4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8019aec:	4b05      	ldr	r3, [pc, #20]	@ (8019b04 <SUBGRF_SetStandby+0x34>)
 8019aee:	2201      	movs	r2, #1
 8019af0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8019af2:	e002      	b.n	8019afa <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8019af4:	4b03      	ldr	r3, [pc, #12]	@ (8019b04 <SUBGRF_SetStandby+0x34>)
 8019af6:	2202      	movs	r2, #2
 8019af8:	701a      	strb	r2, [r3, #0]
}
 8019afa:	bf00      	nop
 8019afc:	3708      	adds	r7, #8
 8019afe:	46bd      	mov	sp, r7
 8019b00:	bd80      	pop	{r7, pc}
 8019b02:	bf00      	nop
 8019b04:	200014c4 	.word	0x200014c4

08019b08 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8019b08:	b580      	push	{r7, lr}
 8019b0a:	b084      	sub	sp, #16
 8019b0c:	af00      	add	r7, sp, #0
 8019b0e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8019b10:	4b0c      	ldr	r3, [pc, #48]	@ (8019b44 <SUBGRF_SetTx+0x3c>)
 8019b12:	2204      	movs	r2, #4
 8019b14:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	0c1b      	lsrs	r3, r3, #16
 8019b1a:	b2db      	uxtb	r3, r3
 8019b1c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	0a1b      	lsrs	r3, r3, #8
 8019b22:	b2db      	uxtb	r3, r3
 8019b24:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	b2db      	uxtb	r3, r3
 8019b2a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8019b2c:	f107 030c 	add.w	r3, r7, #12
 8019b30:	2203      	movs	r2, #3
 8019b32:	4619      	mov	r1, r3
 8019b34:	2083      	movs	r0, #131	@ 0x83
 8019b36:	f000 fdff 	bl	801a738 <SUBGRF_WriteCommand>
}
 8019b3a:	bf00      	nop
 8019b3c:	3710      	adds	r7, #16
 8019b3e:	46bd      	mov	sp, r7
 8019b40:	bd80      	pop	{r7, pc}
 8019b42:	bf00      	nop
 8019b44:	200014c4 	.word	0x200014c4

08019b48 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8019b48:	b580      	push	{r7, lr}
 8019b4a:	b084      	sub	sp, #16
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019b50:	4b0c      	ldr	r3, [pc, #48]	@ (8019b84 <SUBGRF_SetRx+0x3c>)
 8019b52:	2205      	movs	r2, #5
 8019b54:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	0c1b      	lsrs	r3, r3, #16
 8019b5a:	b2db      	uxtb	r3, r3
 8019b5c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	0a1b      	lsrs	r3, r3, #8
 8019b62:	b2db      	uxtb	r3, r3
 8019b64:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	b2db      	uxtb	r3, r3
 8019b6a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019b6c:	f107 030c 	add.w	r3, r7, #12
 8019b70:	2203      	movs	r2, #3
 8019b72:	4619      	mov	r1, r3
 8019b74:	2082      	movs	r0, #130	@ 0x82
 8019b76:	f000 fddf 	bl	801a738 <SUBGRF_WriteCommand>
}
 8019b7a:	bf00      	nop
 8019b7c:	3710      	adds	r7, #16
 8019b7e:	46bd      	mov	sp, r7
 8019b80:	bd80      	pop	{r7, pc}
 8019b82:	bf00      	nop
 8019b84:	200014c4 	.word	0x200014c4

08019b88 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8019b88:	b580      	push	{r7, lr}
 8019b8a:	b084      	sub	sp, #16
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019b90:	4b0e      	ldr	r3, [pc, #56]	@ (8019bcc <SUBGRF_SetRxBoosted+0x44>)
 8019b92:	2205      	movs	r2, #5
 8019b94:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8019b96:	2197      	movs	r1, #151	@ 0x97
 8019b98:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8019b9c:	f000 fd1c 	bl	801a5d8 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	0c1b      	lsrs	r3, r3, #16
 8019ba4:	b2db      	uxtb	r3, r3
 8019ba6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	0a1b      	lsrs	r3, r3, #8
 8019bac:	b2db      	uxtb	r3, r3
 8019bae:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	b2db      	uxtb	r3, r3
 8019bb4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019bb6:	f107 030c 	add.w	r3, r7, #12
 8019bba:	2203      	movs	r2, #3
 8019bbc:	4619      	mov	r1, r3
 8019bbe:	2082      	movs	r0, #130	@ 0x82
 8019bc0:	f000 fdba 	bl	801a738 <SUBGRF_WriteCommand>
}
 8019bc4:	bf00      	nop
 8019bc6:	3710      	adds	r7, #16
 8019bc8:	46bd      	mov	sp, r7
 8019bca:	bd80      	pop	{r7, pc}
 8019bcc:	200014c4 	.word	0x200014c4

08019bd0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019bd0:	b580      	push	{r7, lr}
 8019bd2:	b084      	sub	sp, #16
 8019bd4:	af00      	add	r7, sp, #0
 8019bd6:	6078      	str	r0, [r7, #4]
 8019bd8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	0c1b      	lsrs	r3, r3, #16
 8019bde:	b2db      	uxtb	r3, r3
 8019be0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	0a1b      	lsrs	r3, r3, #8
 8019be6:	b2db      	uxtb	r3, r3
 8019be8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	b2db      	uxtb	r3, r3
 8019bee:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8019bf0:	683b      	ldr	r3, [r7, #0]
 8019bf2:	0c1b      	lsrs	r3, r3, #16
 8019bf4:	b2db      	uxtb	r3, r3
 8019bf6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8019bf8:	683b      	ldr	r3, [r7, #0]
 8019bfa:	0a1b      	lsrs	r3, r3, #8
 8019bfc:	b2db      	uxtb	r3, r3
 8019bfe:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8019c00:	683b      	ldr	r3, [r7, #0]
 8019c02:	b2db      	uxtb	r3, r3
 8019c04:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8019c06:	f107 0308 	add.w	r3, r7, #8
 8019c0a:	2206      	movs	r2, #6
 8019c0c:	4619      	mov	r1, r3
 8019c0e:	2094      	movs	r0, #148	@ 0x94
 8019c10:	f000 fd92 	bl	801a738 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8019c14:	4b03      	ldr	r3, [pc, #12]	@ (8019c24 <SUBGRF_SetRxDutyCycle+0x54>)
 8019c16:	2206      	movs	r2, #6
 8019c18:	701a      	strb	r2, [r3, #0]
}
 8019c1a:	bf00      	nop
 8019c1c:	3710      	adds	r7, #16
 8019c1e:	46bd      	mov	sp, r7
 8019c20:	bd80      	pop	{r7, pc}
 8019c22:	bf00      	nop
 8019c24:	200014c4 	.word	0x200014c4

08019c28 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8019c28:	b580      	push	{r7, lr}
 8019c2a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8019c2c:	2200      	movs	r2, #0
 8019c2e:	2100      	movs	r1, #0
 8019c30:	20c5      	movs	r0, #197	@ 0xc5
 8019c32:	f000 fd81 	bl	801a738 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8019c36:	4b02      	ldr	r3, [pc, #8]	@ (8019c40 <SUBGRF_SetCad+0x18>)
 8019c38:	2207      	movs	r2, #7
 8019c3a:	701a      	strb	r2, [r3, #0]
}
 8019c3c:	bf00      	nop
 8019c3e:	bd80      	pop	{r7, pc}
 8019c40:	200014c4 	.word	0x200014c4

08019c44 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8019c44:	b580      	push	{r7, lr}
 8019c46:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8019c48:	2200      	movs	r2, #0
 8019c4a:	2100      	movs	r1, #0
 8019c4c:	20d1      	movs	r0, #209	@ 0xd1
 8019c4e:	f000 fd73 	bl	801a738 <SUBGRF_WriteCommand>
}
 8019c52:	bf00      	nop
 8019c54:	bd80      	pop	{r7, pc}

08019c56 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8019c56:	b580      	push	{r7, lr}
 8019c58:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8019c5a:	2200      	movs	r2, #0
 8019c5c:	2100      	movs	r1, #0
 8019c5e:	20d2      	movs	r0, #210	@ 0xd2
 8019c60:	f000 fd6a 	bl	801a738 <SUBGRF_WriteCommand>
}
 8019c64:	bf00      	nop
 8019c66:	bd80      	pop	{r7, pc}

08019c68 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8019c68:	b580      	push	{r7, lr}
 8019c6a:	b082      	sub	sp, #8
 8019c6c:	af00      	add	r7, sp, #0
 8019c6e:	4603      	mov	r3, r0
 8019c70:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8019c72:	1dfb      	adds	r3, r7, #7
 8019c74:	2201      	movs	r2, #1
 8019c76:	4619      	mov	r1, r3
 8019c78:	209f      	movs	r0, #159	@ 0x9f
 8019c7a:	f000 fd5d 	bl	801a738 <SUBGRF_WriteCommand>
}
 8019c7e:	bf00      	nop
 8019c80:	3708      	adds	r7, #8
 8019c82:	46bd      	mov	sp, r7
 8019c84:	bd80      	pop	{r7, pc}

08019c86 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8019c86:	b580      	push	{r7, lr}
 8019c88:	b084      	sub	sp, #16
 8019c8a:	af00      	add	r7, sp, #0
 8019c8c:	4603      	mov	r3, r0
 8019c8e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8019c90:	1dfb      	adds	r3, r7, #7
 8019c92:	2201      	movs	r2, #1
 8019c94:	4619      	mov	r1, r3
 8019c96:	20a0      	movs	r0, #160	@ 0xa0
 8019c98:	f000 fd4e 	bl	801a738 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8019c9c:	79fb      	ldrb	r3, [r7, #7]
 8019c9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8019ca0:	d91c      	bls.n	8019cdc <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8019ca2:	79fb      	ldrb	r3, [r7, #7]
 8019ca4:	085b      	lsrs	r3, r3, #1
 8019ca6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8019ca8:	2300      	movs	r3, #0
 8019caa:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8019cac:	2300      	movs	r3, #0
 8019cae:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8019cb0:	e005      	b.n	8019cbe <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8019cb2:	7bfb      	ldrb	r3, [r7, #15]
 8019cb4:	089b      	lsrs	r3, r3, #2
 8019cb6:	73fb      	strb	r3, [r7, #15]
            exp++;
 8019cb8:	7bbb      	ldrb	r3, [r7, #14]
 8019cba:	3301      	adds	r3, #1
 8019cbc:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8019cbe:	7bfb      	ldrb	r3, [r7, #15]
 8019cc0:	2b1f      	cmp	r3, #31
 8019cc2:	d8f6      	bhi.n	8019cb2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8019cc4:	7bfb      	ldrb	r3, [r7, #15]
 8019cc6:	00db      	lsls	r3, r3, #3
 8019cc8:	b2da      	uxtb	r2, r3
 8019cca:	7bbb      	ldrb	r3, [r7, #14]
 8019ccc:	4413      	add	r3, r2
 8019cce:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8019cd0:	7b7b      	ldrb	r3, [r7, #13]
 8019cd2:	4619      	mov	r1, r3
 8019cd4:	f240 7006 	movw	r0, #1798	@ 0x706
 8019cd8:	f000 fc7e 	bl	801a5d8 <SUBGRF_WriteRegister>
    }
}
 8019cdc:	bf00      	nop
 8019cde:	3710      	adds	r7, #16
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	bd80      	pop	{r7, pc}

08019ce4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8019ce4:	b580      	push	{r7, lr}
 8019ce6:	b082      	sub	sp, #8
 8019ce8:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8019cea:	f7f0 f8fb 	bl	8009ee4 <RBI_IsDCDC>
 8019cee:	4603      	mov	r3, r0
 8019cf0:	2b01      	cmp	r3, #1
 8019cf2:	d102      	bne.n	8019cfa <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8019cf4:	2301      	movs	r3, #1
 8019cf6:	71fb      	strb	r3, [r7, #7]
 8019cf8:	e001      	b.n	8019cfe <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8019cfe:	1dfb      	adds	r3, r7, #7
 8019d00:	2201      	movs	r2, #1
 8019d02:	4619      	mov	r1, r3
 8019d04:	2096      	movs	r0, #150	@ 0x96
 8019d06:	f000 fd17 	bl	801a738 <SUBGRF_WriteCommand>
}
 8019d0a:	bf00      	nop
 8019d0c:	3708      	adds	r7, #8
 8019d0e:	46bd      	mov	sp, r7
 8019d10:	bd80      	pop	{r7, pc}

08019d12 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8019d12:	b580      	push	{r7, lr}
 8019d14:	b084      	sub	sp, #16
 8019d16:	af00      	add	r7, sp, #0
 8019d18:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019d1a:	793b      	ldrb	r3, [r7, #4]
 8019d1c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8019d20:	b2db      	uxtb	r3, r3
 8019d22:	019b      	lsls	r3, r3, #6
 8019d24:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019d26:	793b      	ldrb	r3, [r7, #4]
 8019d28:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8019d2c:	b2db      	uxtb	r3, r3
 8019d2e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019d30:	b25b      	sxtb	r3, r3
 8019d32:	4313      	orrs	r3, r2
 8019d34:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019d36:	793b      	ldrb	r3, [r7, #4]
 8019d38:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8019d3c:	b2db      	uxtb	r3, r3
 8019d3e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019d40:	b25b      	sxtb	r3, r3
 8019d42:	4313      	orrs	r3, r2
 8019d44:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019d46:	793b      	ldrb	r3, [r7, #4]
 8019d48:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019d4c:	b2db      	uxtb	r3, r3
 8019d4e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019d50:	b25b      	sxtb	r3, r3
 8019d52:	4313      	orrs	r3, r2
 8019d54:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019d56:	793b      	ldrb	r3, [r7, #4]
 8019d58:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019d5c:	b2db      	uxtb	r3, r3
 8019d5e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019d60:	b25b      	sxtb	r3, r3
 8019d62:	4313      	orrs	r3, r2
 8019d64:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019d66:	793b      	ldrb	r3, [r7, #4]
 8019d68:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019d6c:	b2db      	uxtb	r3, r3
 8019d6e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019d70:	b25b      	sxtb	r3, r3
 8019d72:	4313      	orrs	r3, r2
 8019d74:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8019d76:	793b      	ldrb	r3, [r7, #4]
 8019d78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019d7c:	b2db      	uxtb	r3, r3
 8019d7e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019d80:	4313      	orrs	r3, r2
 8019d82:	b25b      	sxtb	r3, r3
 8019d84:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019d86:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8019d88:	f107 030f 	add.w	r3, r7, #15
 8019d8c:	2201      	movs	r2, #1
 8019d8e:	4619      	mov	r1, r3
 8019d90:	2089      	movs	r0, #137	@ 0x89
 8019d92:	f000 fcd1 	bl	801a738 <SUBGRF_WriteCommand>
}
 8019d96:	bf00      	nop
 8019d98:	3710      	adds	r7, #16
 8019d9a:	46bd      	mov	sp, r7
 8019d9c:	bd80      	pop	{r7, pc}
	...

08019da0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b084      	sub	sp, #16
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	4a1d      	ldr	r2, [pc, #116]	@ (8019e20 <SUBGRF_CalibrateImage+0x80>)
 8019dac:	4293      	cmp	r3, r2
 8019dae:	d904      	bls.n	8019dba <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8019db0:	23e1      	movs	r3, #225	@ 0xe1
 8019db2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8019db4:	23e9      	movs	r3, #233	@ 0xe9
 8019db6:	737b      	strb	r3, [r7, #13]
 8019db8:	e027      	b.n	8019e0a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	4a19      	ldr	r2, [pc, #100]	@ (8019e24 <SUBGRF_CalibrateImage+0x84>)
 8019dbe:	4293      	cmp	r3, r2
 8019dc0:	d904      	bls.n	8019dcc <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8019dc2:	23d7      	movs	r3, #215	@ 0xd7
 8019dc4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8019dc6:	23db      	movs	r3, #219	@ 0xdb
 8019dc8:	737b      	strb	r3, [r7, #13]
 8019dca:	e01e      	b.n	8019e0a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	4a16      	ldr	r2, [pc, #88]	@ (8019e28 <SUBGRF_CalibrateImage+0x88>)
 8019dd0:	4293      	cmp	r3, r2
 8019dd2:	d904      	bls.n	8019dde <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8019dd4:	23c1      	movs	r3, #193	@ 0xc1
 8019dd6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8019dd8:	23c5      	movs	r3, #197	@ 0xc5
 8019dda:	737b      	strb	r3, [r7, #13]
 8019ddc:	e015      	b.n	8019e0a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	4a12      	ldr	r2, [pc, #72]	@ (8019e2c <SUBGRF_CalibrateImage+0x8c>)
 8019de2:	4293      	cmp	r3, r2
 8019de4:	d904      	bls.n	8019df0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8019de6:	2375      	movs	r3, #117	@ 0x75
 8019de8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8019dea:	2381      	movs	r3, #129	@ 0x81
 8019dec:	737b      	strb	r3, [r7, #13]
 8019dee:	e00c      	b.n	8019e0a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	4a0f      	ldr	r2, [pc, #60]	@ (8019e30 <SUBGRF_CalibrateImage+0x90>)
 8019df4:	4293      	cmp	r3, r2
 8019df6:	d904      	bls.n	8019e02 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8019df8:	236b      	movs	r3, #107	@ 0x6b
 8019dfa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8019dfc:	236f      	movs	r3, #111	@ 0x6f
 8019dfe:	737b      	strb	r3, [r7, #13]
 8019e00:	e003      	b.n	8019e0a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8019e02:	2329      	movs	r3, #41	@ 0x29
 8019e04:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8019e06:	232b      	movs	r3, #43	@ 0x2b
 8019e08:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8019e0a:	f107 030c 	add.w	r3, r7, #12
 8019e0e:	2202      	movs	r2, #2
 8019e10:	4619      	mov	r1, r3
 8019e12:	2098      	movs	r0, #152	@ 0x98
 8019e14:	f000 fc90 	bl	801a738 <SUBGRF_WriteCommand>
}
 8019e18:	bf00      	nop
 8019e1a:	3710      	adds	r7, #16
 8019e1c:	46bd      	mov	sp, r7
 8019e1e:	bd80      	pop	{r7, pc}
 8019e20:	35a4e900 	.word	0x35a4e900
 8019e24:	32a9f880 	.word	0x32a9f880
 8019e28:	2de54480 	.word	0x2de54480
 8019e2c:	1b6b0b00 	.word	0x1b6b0b00
 8019e30:	1954fc40 	.word	0x1954fc40

08019e34 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8019e34:	b590      	push	{r4, r7, lr}
 8019e36:	b085      	sub	sp, #20
 8019e38:	af00      	add	r7, sp, #0
 8019e3a:	4604      	mov	r4, r0
 8019e3c:	4608      	mov	r0, r1
 8019e3e:	4611      	mov	r1, r2
 8019e40:	461a      	mov	r2, r3
 8019e42:	4623      	mov	r3, r4
 8019e44:	71fb      	strb	r3, [r7, #7]
 8019e46:	4603      	mov	r3, r0
 8019e48:	71bb      	strb	r3, [r7, #6]
 8019e4a:	460b      	mov	r3, r1
 8019e4c:	717b      	strb	r3, [r7, #5]
 8019e4e:	4613      	mov	r3, r2
 8019e50:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8019e52:	79fb      	ldrb	r3, [r7, #7]
 8019e54:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8019e56:	79bb      	ldrb	r3, [r7, #6]
 8019e58:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8019e5a:	797b      	ldrb	r3, [r7, #5]
 8019e5c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8019e5e:	793b      	ldrb	r3, [r7, #4]
 8019e60:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8019e62:	f107 030c 	add.w	r3, r7, #12
 8019e66:	2204      	movs	r2, #4
 8019e68:	4619      	mov	r1, r3
 8019e6a:	2095      	movs	r0, #149	@ 0x95
 8019e6c:	f000 fc64 	bl	801a738 <SUBGRF_WriteCommand>
}
 8019e70:	bf00      	nop
 8019e72:	3714      	adds	r7, #20
 8019e74:	46bd      	mov	sp, r7
 8019e76:	bd90      	pop	{r4, r7, pc}

08019e78 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8019e78:	b590      	push	{r4, r7, lr}
 8019e7a:	b085      	sub	sp, #20
 8019e7c:	af00      	add	r7, sp, #0
 8019e7e:	4604      	mov	r4, r0
 8019e80:	4608      	mov	r0, r1
 8019e82:	4611      	mov	r1, r2
 8019e84:	461a      	mov	r2, r3
 8019e86:	4623      	mov	r3, r4
 8019e88:	80fb      	strh	r3, [r7, #6]
 8019e8a:	4603      	mov	r3, r0
 8019e8c:	80bb      	strh	r3, [r7, #4]
 8019e8e:	460b      	mov	r3, r1
 8019e90:	807b      	strh	r3, [r7, #2]
 8019e92:	4613      	mov	r3, r2
 8019e94:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8019e96:	88fb      	ldrh	r3, [r7, #6]
 8019e98:	0a1b      	lsrs	r3, r3, #8
 8019e9a:	b29b      	uxth	r3, r3
 8019e9c:	b2db      	uxtb	r3, r3
 8019e9e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8019ea0:	88fb      	ldrh	r3, [r7, #6]
 8019ea2:	b2db      	uxtb	r3, r3
 8019ea4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8019ea6:	88bb      	ldrh	r3, [r7, #4]
 8019ea8:	0a1b      	lsrs	r3, r3, #8
 8019eaa:	b29b      	uxth	r3, r3
 8019eac:	b2db      	uxtb	r3, r3
 8019eae:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8019eb0:	88bb      	ldrh	r3, [r7, #4]
 8019eb2:	b2db      	uxtb	r3, r3
 8019eb4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8019eb6:	887b      	ldrh	r3, [r7, #2]
 8019eb8:	0a1b      	lsrs	r3, r3, #8
 8019eba:	b29b      	uxth	r3, r3
 8019ebc:	b2db      	uxtb	r3, r3
 8019ebe:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8019ec0:	887b      	ldrh	r3, [r7, #2]
 8019ec2:	b2db      	uxtb	r3, r3
 8019ec4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8019ec6:	883b      	ldrh	r3, [r7, #0]
 8019ec8:	0a1b      	lsrs	r3, r3, #8
 8019eca:	b29b      	uxth	r3, r3
 8019ecc:	b2db      	uxtb	r3, r3
 8019ece:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8019ed0:	883b      	ldrh	r3, [r7, #0]
 8019ed2:	b2db      	uxtb	r3, r3
 8019ed4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8019ed6:	f107 0308 	add.w	r3, r7, #8
 8019eda:	2208      	movs	r2, #8
 8019edc:	4619      	mov	r1, r3
 8019ede:	2008      	movs	r0, #8
 8019ee0:	f000 fc2a 	bl	801a738 <SUBGRF_WriteCommand>
}
 8019ee4:	bf00      	nop
 8019ee6:	3714      	adds	r7, #20
 8019ee8:	46bd      	mov	sp, r7
 8019eea:	bd90      	pop	{r4, r7, pc}

08019eec <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8019eec:	b580      	push	{r7, lr}
 8019eee:	b084      	sub	sp, #16
 8019ef0:	af00      	add	r7, sp, #0
 8019ef2:	4603      	mov	r3, r0
 8019ef4:	6039      	str	r1, [r7, #0]
 8019ef6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8019ef8:	79fb      	ldrb	r3, [r7, #7]
 8019efa:	f003 0307 	and.w	r3, r3, #7
 8019efe:	b2db      	uxtb	r3, r3
 8019f00:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019f02:	683b      	ldr	r3, [r7, #0]
 8019f04:	0c1b      	lsrs	r3, r3, #16
 8019f06:	b2db      	uxtb	r3, r3
 8019f08:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019f0a:	683b      	ldr	r3, [r7, #0]
 8019f0c:	0a1b      	lsrs	r3, r3, #8
 8019f0e:	b2db      	uxtb	r3, r3
 8019f10:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8019f12:	683b      	ldr	r3, [r7, #0]
 8019f14:	b2db      	uxtb	r3, r3
 8019f16:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8019f18:	f107 030c 	add.w	r3, r7, #12
 8019f1c:	2204      	movs	r2, #4
 8019f1e:	4619      	mov	r1, r3
 8019f20:	2097      	movs	r0, #151	@ 0x97
 8019f22:	f000 fc09 	bl	801a738 <SUBGRF_WriteCommand>
}
 8019f26:	bf00      	nop
 8019f28:	3710      	adds	r7, #16
 8019f2a:	46bd      	mov	sp, r7
 8019f2c:	bd80      	pop	{r7, pc}
	...

08019f30 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8019f30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019f34:	b084      	sub	sp, #16
 8019f36:	af00      	add	r7, sp, #0
 8019f38:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8019f3a:	2300      	movs	r3, #0
 8019f3c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8019f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8019fb4 <SUBGRF_SetRfFrequency+0x84>)
 8019f40:	781b      	ldrb	r3, [r3, #0]
 8019f42:	f083 0301 	eor.w	r3, r3, #1
 8019f46:	b2db      	uxtb	r3, r3
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d005      	beq.n	8019f58 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8019f4c:	6878      	ldr	r0, [r7, #4]
 8019f4e:	f7ff ff27 	bl	8019da0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8019f52:	4b18      	ldr	r3, [pc, #96]	@ (8019fb4 <SUBGRF_SetRfFrequency+0x84>)
 8019f54:	2201      	movs	r2, #1
 8019f56:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	2200      	movs	r2, #0
 8019f5c:	461c      	mov	r4, r3
 8019f5e:	4615      	mov	r5, r2
 8019f60:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019f64:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019f68:	4a13      	ldr	r2, [pc, #76]	@ (8019fb8 <SUBGRF_SetRfFrequency+0x88>)
 8019f6a:	f04f 0300 	mov.w	r3, #0
 8019f6e:	4640      	mov	r0, r8
 8019f70:	4649      	mov	r1, r9
 8019f72:	f7e6 fca9 	bl	80008c8 <__aeabi_uldivmod>
 8019f76:	4602      	mov	r2, r0
 8019f78:	460b      	mov	r3, r1
 8019f7a:	4613      	mov	r3, r2
 8019f7c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	0e1b      	lsrs	r3, r3, #24
 8019f82:	b2db      	uxtb	r3, r3
 8019f84:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8019f86:	68fb      	ldr	r3, [r7, #12]
 8019f88:	0c1b      	lsrs	r3, r3, #16
 8019f8a:	b2db      	uxtb	r3, r3
 8019f8c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8019f8e:	68fb      	ldr	r3, [r7, #12]
 8019f90:	0a1b      	lsrs	r3, r3, #8
 8019f92:	b2db      	uxtb	r3, r3
 8019f94:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	b2db      	uxtb	r3, r3
 8019f9a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8019f9c:	f107 0308 	add.w	r3, r7, #8
 8019fa0:	2204      	movs	r2, #4
 8019fa2:	4619      	mov	r1, r3
 8019fa4:	2086      	movs	r0, #134	@ 0x86
 8019fa6:	f000 fbc7 	bl	801a738 <SUBGRF_WriteCommand>
}
 8019faa:	bf00      	nop
 8019fac:	3710      	adds	r7, #16
 8019fae:	46bd      	mov	sp, r7
 8019fb0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019fb4:	200014cc 	.word	0x200014cc
 8019fb8:	01e84800 	.word	0x01e84800

08019fbc <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8019fbc:	b580      	push	{r7, lr}
 8019fbe:	b082      	sub	sp, #8
 8019fc0:	af00      	add	r7, sp, #0
 8019fc2:	4603      	mov	r3, r0
 8019fc4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8019fc6:	79fa      	ldrb	r2, [r7, #7]
 8019fc8:	4b09      	ldr	r3, [pc, #36]	@ (8019ff0 <SUBGRF_SetPacketType+0x34>)
 8019fca:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8019fcc:	79fb      	ldrb	r3, [r7, #7]
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d104      	bne.n	8019fdc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8019fd2:	2100      	movs	r1, #0
 8019fd4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8019fd8:	f000 fafe 	bl	801a5d8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8019fdc:	1dfb      	adds	r3, r7, #7
 8019fde:	2201      	movs	r2, #1
 8019fe0:	4619      	mov	r1, r3
 8019fe2:	208a      	movs	r0, #138	@ 0x8a
 8019fe4:	f000 fba8 	bl	801a738 <SUBGRF_WriteCommand>
}
 8019fe8:	bf00      	nop
 8019fea:	3708      	adds	r7, #8
 8019fec:	46bd      	mov	sp, r7
 8019fee:	bd80      	pop	{r7, pc}
 8019ff0:	200014c5 	.word	0x200014c5

08019ff4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8019ff4:	b480      	push	{r7}
 8019ff6:	af00      	add	r7, sp, #0
    return PacketType;
 8019ff8:	4b02      	ldr	r3, [pc, #8]	@ (801a004 <SUBGRF_GetPacketType+0x10>)
 8019ffa:	781b      	ldrb	r3, [r3, #0]
}
 8019ffc:	4618      	mov	r0, r3
 8019ffe:	46bd      	mov	sp, r7
 801a000:	bc80      	pop	{r7}
 801a002:	4770      	bx	lr
 801a004:	200014c5 	.word	0x200014c5

0801a008 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b084      	sub	sp, #16
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	4603      	mov	r3, r0
 801a010:	71fb      	strb	r3, [r7, #7]
 801a012:	460b      	mov	r3, r1
 801a014:	71bb      	strb	r3, [r7, #6]
 801a016:	4613      	mov	r3, r2
 801a018:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801a01a:	79fb      	ldrb	r3, [r7, #7]
 801a01c:	2b01      	cmp	r3, #1
 801a01e:	d149      	bne.n	801a0b4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801a020:	2000      	movs	r0, #0
 801a022:	f7ef ff6a 	bl	8009efa <RBI_GetRFOMaxPowerConfig>
 801a026:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801a028:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a02c:	68fa      	ldr	r2, [r7, #12]
 801a02e:	429a      	cmp	r2, r3
 801a030:	da01      	bge.n	801a036 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801a032:	68fb      	ldr	r3, [r7, #12]
 801a034:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801a036:	68fb      	ldr	r3, [r7, #12]
 801a038:	2b0e      	cmp	r3, #14
 801a03a:	d10e      	bne.n	801a05a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801a03c:	2301      	movs	r3, #1
 801a03e:	2201      	movs	r2, #1
 801a040:	2100      	movs	r1, #0
 801a042:	2004      	movs	r0, #4
 801a044:	f7ff fef6 	bl	8019e34 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a048:	79ba      	ldrb	r2, [r7, #6]
 801a04a:	68fb      	ldr	r3, [r7, #12]
 801a04c:	b2db      	uxtb	r3, r3
 801a04e:	1ad3      	subs	r3, r2, r3
 801a050:	b2db      	uxtb	r3, r3
 801a052:	330e      	adds	r3, #14
 801a054:	b2db      	uxtb	r3, r3
 801a056:	71bb      	strb	r3, [r7, #6]
 801a058:	e01f      	b.n	801a09a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	2b0a      	cmp	r3, #10
 801a05e:	d10e      	bne.n	801a07e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801a060:	2301      	movs	r3, #1
 801a062:	2201      	movs	r2, #1
 801a064:	2100      	movs	r1, #0
 801a066:	2001      	movs	r0, #1
 801a068:	f7ff fee4 	bl	8019e34 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801a06c:	79ba      	ldrb	r2, [r7, #6]
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	b2db      	uxtb	r3, r3
 801a072:	1ad3      	subs	r3, r2, r3
 801a074:	b2db      	uxtb	r3, r3
 801a076:	330d      	adds	r3, #13
 801a078:	b2db      	uxtb	r3, r3
 801a07a:	71bb      	strb	r3, [r7, #6]
 801a07c:	e00d      	b.n	801a09a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801a07e:	2301      	movs	r3, #1
 801a080:	2201      	movs	r2, #1
 801a082:	2100      	movs	r1, #0
 801a084:	2007      	movs	r0, #7
 801a086:	f7ff fed5 	bl	8019e34 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a08a:	79ba      	ldrb	r2, [r7, #6]
 801a08c:	68fb      	ldr	r3, [r7, #12]
 801a08e:	b2db      	uxtb	r3, r3
 801a090:	1ad3      	subs	r3, r2, r3
 801a092:	b2db      	uxtb	r3, r3
 801a094:	330e      	adds	r3, #14
 801a096:	b2db      	uxtb	r3, r3
 801a098:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801a09a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a09e:	f113 0f11 	cmn.w	r3, #17
 801a0a2:	da01      	bge.n	801a0a8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801a0a4:	23ef      	movs	r3, #239	@ 0xef
 801a0a6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801a0a8:	2118      	movs	r1, #24
 801a0aa:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801a0ae:	f000 fa93 	bl	801a5d8 <SUBGRF_WriteRegister>
 801a0b2:	e067      	b.n	801a184 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801a0b4:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801a0b8:	f000 faa2 	bl	801a600 <SUBGRF_ReadRegister>
 801a0bc:	4603      	mov	r3, r0
 801a0be:	f043 031e 	orr.w	r3, r3, #30
 801a0c2:	b2db      	uxtb	r3, r3
 801a0c4:	4619      	mov	r1, r3
 801a0c6:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801a0ca:	f000 fa85 	bl	801a5d8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801a0ce:	2001      	movs	r0, #1
 801a0d0:	f7ef ff13 	bl	8009efa <RBI_GetRFOMaxPowerConfig>
 801a0d4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801a0d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a0da:	68fa      	ldr	r2, [r7, #12]
 801a0dc:	429a      	cmp	r2, r3
 801a0de:	da01      	bge.n	801a0e4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	2b14      	cmp	r3, #20
 801a0e8:	d10e      	bne.n	801a108 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801a0ea:	2301      	movs	r3, #1
 801a0ec:	2200      	movs	r2, #0
 801a0ee:	2105      	movs	r1, #5
 801a0f0:	2003      	movs	r0, #3
 801a0f2:	f7ff fe9f 	bl	8019e34 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a0f6:	79ba      	ldrb	r2, [r7, #6]
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	b2db      	uxtb	r3, r3
 801a0fc:	1ad3      	subs	r3, r2, r3
 801a0fe:	b2db      	uxtb	r3, r3
 801a100:	3316      	adds	r3, #22
 801a102:	b2db      	uxtb	r3, r3
 801a104:	71bb      	strb	r3, [r7, #6]
 801a106:	e031      	b.n	801a16c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801a108:	68fb      	ldr	r3, [r7, #12]
 801a10a:	2b11      	cmp	r3, #17
 801a10c:	d10e      	bne.n	801a12c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801a10e:	2301      	movs	r3, #1
 801a110:	2200      	movs	r2, #0
 801a112:	2103      	movs	r1, #3
 801a114:	2002      	movs	r0, #2
 801a116:	f7ff fe8d 	bl	8019e34 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a11a:	79ba      	ldrb	r2, [r7, #6]
 801a11c:	68fb      	ldr	r3, [r7, #12]
 801a11e:	b2db      	uxtb	r3, r3
 801a120:	1ad3      	subs	r3, r2, r3
 801a122:	b2db      	uxtb	r3, r3
 801a124:	3316      	adds	r3, #22
 801a126:	b2db      	uxtb	r3, r3
 801a128:	71bb      	strb	r3, [r7, #6]
 801a12a:	e01f      	b.n	801a16c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	2b0e      	cmp	r3, #14
 801a130:	d10e      	bne.n	801a150 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801a132:	2301      	movs	r3, #1
 801a134:	2200      	movs	r2, #0
 801a136:	2102      	movs	r1, #2
 801a138:	2002      	movs	r0, #2
 801a13a:	f7ff fe7b 	bl	8019e34 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a13e:	79ba      	ldrb	r2, [r7, #6]
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	b2db      	uxtb	r3, r3
 801a144:	1ad3      	subs	r3, r2, r3
 801a146:	b2db      	uxtb	r3, r3
 801a148:	330e      	adds	r3, #14
 801a14a:	b2db      	uxtb	r3, r3
 801a14c:	71bb      	strb	r3, [r7, #6]
 801a14e:	e00d      	b.n	801a16c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801a150:	2301      	movs	r3, #1
 801a152:	2200      	movs	r2, #0
 801a154:	2107      	movs	r1, #7
 801a156:	2004      	movs	r0, #4
 801a158:	f7ff fe6c 	bl	8019e34 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a15c:	79ba      	ldrb	r2, [r7, #6]
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	b2db      	uxtb	r3, r3
 801a162:	1ad3      	subs	r3, r2, r3
 801a164:	b2db      	uxtb	r3, r3
 801a166:	3316      	adds	r3, #22
 801a168:	b2db      	uxtb	r3, r3
 801a16a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801a16c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a170:	f113 0f09 	cmn.w	r3, #9
 801a174:	da01      	bge.n	801a17a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801a176:	23f7      	movs	r3, #247	@ 0xf7
 801a178:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801a17a:	2138      	movs	r1, #56	@ 0x38
 801a17c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801a180:	f000 fa2a 	bl	801a5d8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801a184:	79bb      	ldrb	r3, [r7, #6]
 801a186:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801a188:	797b      	ldrb	r3, [r7, #5]
 801a18a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801a18c:	f107 0308 	add.w	r3, r7, #8
 801a190:	2202      	movs	r2, #2
 801a192:	4619      	mov	r1, r3
 801a194:	208e      	movs	r0, #142	@ 0x8e
 801a196:	f000 facf 	bl	801a738 <SUBGRF_WriteCommand>
}
 801a19a:	bf00      	nop
 801a19c:	3710      	adds	r7, #16
 801a19e:	46bd      	mov	sp, r7
 801a1a0:	bd80      	pop	{r7, pc}
	...

0801a1a4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801a1a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a1a8:	b086      	sub	sp, #24
 801a1aa:	af00      	add	r7, sp, #0
 801a1ac:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801a1ae:	2300      	movs	r3, #0
 801a1b0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801a1b2:	4a61      	ldr	r2, [pc, #388]	@ (801a338 <SUBGRF_SetModulationParams+0x194>)
 801a1b4:	f107 0308 	add.w	r3, r7, #8
 801a1b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a1bc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	781a      	ldrb	r2, [r3, #0]
 801a1c4:	4b5d      	ldr	r3, [pc, #372]	@ (801a33c <SUBGRF_SetModulationParams+0x198>)
 801a1c6:	781b      	ldrb	r3, [r3, #0]
 801a1c8:	429a      	cmp	r2, r3
 801a1ca:	d004      	beq.n	801a1d6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	781b      	ldrb	r3, [r3, #0]
 801a1d0:	4618      	mov	r0, r3
 801a1d2:	f7ff fef3 	bl	8019fbc <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	781b      	ldrb	r3, [r3, #0]
 801a1da:	2b03      	cmp	r3, #3
 801a1dc:	f200 80a5 	bhi.w	801a32a <SUBGRF_SetModulationParams+0x186>
 801a1e0:	a201      	add	r2, pc, #4	@ (adr r2, 801a1e8 <SUBGRF_SetModulationParams+0x44>)
 801a1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1e6:	bf00      	nop
 801a1e8:	0801a1f9 	.word	0x0801a1f9
 801a1ec:	0801a2b9 	.word	0x0801a2b9
 801a1f0:	0801a27b 	.word	0x0801a27b
 801a1f4:	0801a2e7 	.word	0x0801a2e7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801a1f8:	2308      	movs	r3, #8
 801a1fa:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	685b      	ldr	r3, [r3, #4]
 801a200:	4a4f      	ldr	r2, [pc, #316]	@ (801a340 <SUBGRF_SetModulationParams+0x19c>)
 801a202:	fbb2 f3f3 	udiv	r3, r2, r3
 801a206:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a208:	697b      	ldr	r3, [r7, #20]
 801a20a:	0c1b      	lsrs	r3, r3, #16
 801a20c:	b2db      	uxtb	r3, r3
 801a20e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a210:	697b      	ldr	r3, [r7, #20]
 801a212:	0a1b      	lsrs	r3, r3, #8
 801a214:	b2db      	uxtb	r3, r3
 801a216:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a218:	697b      	ldr	r3, [r7, #20]
 801a21a:	b2db      	uxtb	r3, r3
 801a21c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	7b1b      	ldrb	r3, [r3, #12]
 801a222:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	7b5b      	ldrb	r3, [r3, #13]
 801a228:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	689b      	ldr	r3, [r3, #8]
 801a22e:	2200      	movs	r2, #0
 801a230:	461c      	mov	r4, r3
 801a232:	4615      	mov	r5, r2
 801a234:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a238:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a23c:	4a41      	ldr	r2, [pc, #260]	@ (801a344 <SUBGRF_SetModulationParams+0x1a0>)
 801a23e:	f04f 0300 	mov.w	r3, #0
 801a242:	4640      	mov	r0, r8
 801a244:	4649      	mov	r1, r9
 801a246:	f7e6 fb3f 	bl	80008c8 <__aeabi_uldivmod>
 801a24a:	4602      	mov	r2, r0
 801a24c:	460b      	mov	r3, r1
 801a24e:	4613      	mov	r3, r2
 801a250:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801a252:	697b      	ldr	r3, [r7, #20]
 801a254:	0c1b      	lsrs	r3, r3, #16
 801a256:	b2db      	uxtb	r3, r3
 801a258:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801a25a:	697b      	ldr	r3, [r7, #20]
 801a25c:	0a1b      	lsrs	r3, r3, #8
 801a25e:	b2db      	uxtb	r3, r3
 801a260:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801a262:	697b      	ldr	r3, [r7, #20]
 801a264:	b2db      	uxtb	r3, r3
 801a266:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a268:	7cfb      	ldrb	r3, [r7, #19]
 801a26a:	b29a      	uxth	r2, r3
 801a26c:	f107 0308 	add.w	r3, r7, #8
 801a270:	4619      	mov	r1, r3
 801a272:	208b      	movs	r0, #139	@ 0x8b
 801a274:	f000 fa60 	bl	801a738 <SUBGRF_WriteCommand>
        break;
 801a278:	e058      	b.n	801a32c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801a27a:	2304      	movs	r3, #4
 801a27c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	691b      	ldr	r3, [r3, #16]
 801a282:	4a2f      	ldr	r2, [pc, #188]	@ (801a340 <SUBGRF_SetModulationParams+0x19c>)
 801a284:	fbb2 f3f3 	udiv	r3, r2, r3
 801a288:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a28a:	697b      	ldr	r3, [r7, #20]
 801a28c:	0c1b      	lsrs	r3, r3, #16
 801a28e:	b2db      	uxtb	r3, r3
 801a290:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a292:	697b      	ldr	r3, [r7, #20]
 801a294:	0a1b      	lsrs	r3, r3, #8
 801a296:	b2db      	uxtb	r3, r3
 801a298:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a29a:	697b      	ldr	r3, [r7, #20]
 801a29c:	b2db      	uxtb	r3, r3
 801a29e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	7d1b      	ldrb	r3, [r3, #20]
 801a2a4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a2a6:	7cfb      	ldrb	r3, [r7, #19]
 801a2a8:	b29a      	uxth	r2, r3
 801a2aa:	f107 0308 	add.w	r3, r7, #8
 801a2ae:	4619      	mov	r1, r3
 801a2b0:	208b      	movs	r0, #139	@ 0x8b
 801a2b2:	f000 fa41 	bl	801a738 <SUBGRF_WriteCommand>
        break;
 801a2b6:	e039      	b.n	801a32c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801a2b8:	2304      	movs	r3, #4
 801a2ba:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	7e1b      	ldrb	r3, [r3, #24]
 801a2c0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	7e5b      	ldrb	r3, [r3, #25]
 801a2c6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	7e9b      	ldrb	r3, [r3, #26]
 801a2cc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	7edb      	ldrb	r3, [r3, #27]
 801a2d2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a2d4:	7cfb      	ldrb	r3, [r7, #19]
 801a2d6:	b29a      	uxth	r2, r3
 801a2d8:	f107 0308 	add.w	r3, r7, #8
 801a2dc:	4619      	mov	r1, r3
 801a2de:	208b      	movs	r0, #139	@ 0x8b
 801a2e0:	f000 fa2a 	bl	801a738 <SUBGRF_WriteCommand>

        break;
 801a2e4:	e022      	b.n	801a32c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801a2e6:	2305      	movs	r3, #5
 801a2e8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	685b      	ldr	r3, [r3, #4]
 801a2ee:	4a14      	ldr	r2, [pc, #80]	@ (801a340 <SUBGRF_SetModulationParams+0x19c>)
 801a2f0:	fbb2 f3f3 	udiv	r3, r2, r3
 801a2f4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a2f6:	697b      	ldr	r3, [r7, #20]
 801a2f8:	0c1b      	lsrs	r3, r3, #16
 801a2fa:	b2db      	uxtb	r3, r3
 801a2fc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a2fe:	697b      	ldr	r3, [r7, #20]
 801a300:	0a1b      	lsrs	r3, r3, #8
 801a302:	b2db      	uxtb	r3, r3
 801a304:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a306:	697b      	ldr	r3, [r7, #20]
 801a308:	b2db      	uxtb	r3, r3
 801a30a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	7b1b      	ldrb	r3, [r3, #12]
 801a310:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	7b5b      	ldrb	r3, [r3, #13]
 801a316:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a318:	7cfb      	ldrb	r3, [r7, #19]
 801a31a:	b29a      	uxth	r2, r3
 801a31c:	f107 0308 	add.w	r3, r7, #8
 801a320:	4619      	mov	r1, r3
 801a322:	208b      	movs	r0, #139	@ 0x8b
 801a324:	f000 fa08 	bl	801a738 <SUBGRF_WriteCommand>
        break;
 801a328:	e000      	b.n	801a32c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801a32a:	bf00      	nop
    }
}
 801a32c:	bf00      	nop
 801a32e:	3718      	adds	r7, #24
 801a330:	46bd      	mov	sp, r7
 801a332:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a336:	bf00      	nop
 801a338:	0801d280 	.word	0x0801d280
 801a33c:	200014c5 	.word	0x200014c5
 801a340:	3d090000 	.word	0x3d090000
 801a344:	01e84800 	.word	0x01e84800

0801a348 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801a348:	b580      	push	{r7, lr}
 801a34a:	b086      	sub	sp, #24
 801a34c:	af00      	add	r7, sp, #0
 801a34e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801a350:	2300      	movs	r3, #0
 801a352:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801a354:	4a48      	ldr	r2, [pc, #288]	@ (801a478 <SUBGRF_SetPacketParams+0x130>)
 801a356:	f107 030c 	add.w	r3, r7, #12
 801a35a:	ca07      	ldmia	r2, {r0, r1, r2}
 801a35c:	c303      	stmia	r3!, {r0, r1}
 801a35e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	781a      	ldrb	r2, [r3, #0]
 801a364:	4b45      	ldr	r3, [pc, #276]	@ (801a47c <SUBGRF_SetPacketParams+0x134>)
 801a366:	781b      	ldrb	r3, [r3, #0]
 801a368:	429a      	cmp	r2, r3
 801a36a:	d004      	beq.n	801a376 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	781b      	ldrb	r3, [r3, #0]
 801a370:	4618      	mov	r0, r3
 801a372:	f7ff fe23 	bl	8019fbc <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	781b      	ldrb	r3, [r3, #0]
 801a37a:	2b03      	cmp	r3, #3
 801a37c:	d878      	bhi.n	801a470 <SUBGRF_SetPacketParams+0x128>
 801a37e:	a201      	add	r2, pc, #4	@ (adr r2, 801a384 <SUBGRF_SetPacketParams+0x3c>)
 801a380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a384:	0801a395 	.word	0x0801a395
 801a388:	0801a425 	.word	0x0801a425
 801a38c:	0801a419 	.word	0x0801a419
 801a390:	0801a395 	.word	0x0801a395
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	7a5b      	ldrb	r3, [r3, #9]
 801a398:	2bf1      	cmp	r3, #241	@ 0xf1
 801a39a:	d10a      	bne.n	801a3b2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801a39c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801a3a0:	f7ff faaa 	bl	80198f8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801a3a4:	f248 0005 	movw	r0, #32773	@ 0x8005
 801a3a8:	f7ff fac6 	bl	8019938 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801a3ac:	2302      	movs	r3, #2
 801a3ae:	75bb      	strb	r3, [r7, #22]
 801a3b0:	e011      	b.n	801a3d6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	7a5b      	ldrb	r3, [r3, #9]
 801a3b6:	2bf2      	cmp	r3, #242	@ 0xf2
 801a3b8:	d10a      	bne.n	801a3d0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801a3ba:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801a3be:	f7ff fa9b 	bl	80198f8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801a3c2:	f241 0021 	movw	r0, #4129	@ 0x1021
 801a3c6:	f7ff fab7 	bl	8019938 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801a3ca:	2306      	movs	r3, #6
 801a3cc:	75bb      	strb	r3, [r7, #22]
 801a3ce:	e002      	b.n	801a3d6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	7a5b      	ldrb	r3, [r3, #9]
 801a3d4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801a3d6:	2309      	movs	r3, #9
 801a3d8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	885b      	ldrh	r3, [r3, #2]
 801a3de:	0a1b      	lsrs	r3, r3, #8
 801a3e0:	b29b      	uxth	r3, r3
 801a3e2:	b2db      	uxtb	r3, r3
 801a3e4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	885b      	ldrh	r3, [r3, #2]
 801a3ea:	b2db      	uxtb	r3, r3
 801a3ec:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	791b      	ldrb	r3, [r3, #4]
 801a3f2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	795b      	ldrb	r3, [r3, #5]
 801a3f8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	799b      	ldrb	r3, [r3, #6]
 801a3fe:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	79db      	ldrb	r3, [r3, #7]
 801a404:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	7a1b      	ldrb	r3, [r3, #8]
 801a40a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801a40c:	7dbb      	ldrb	r3, [r7, #22]
 801a40e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	7a9b      	ldrb	r3, [r3, #10]
 801a414:	753b      	strb	r3, [r7, #20]
        break;
 801a416:	e022      	b.n	801a45e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801a418:	2301      	movs	r3, #1
 801a41a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	7b1b      	ldrb	r3, [r3, #12]
 801a420:	733b      	strb	r3, [r7, #12]
        break;
 801a422:	e01c      	b.n	801a45e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801a424:	2306      	movs	r3, #6
 801a426:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	89db      	ldrh	r3, [r3, #14]
 801a42c:	0a1b      	lsrs	r3, r3, #8
 801a42e:	b29b      	uxth	r3, r3
 801a430:	b2db      	uxtb	r3, r3
 801a432:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	89db      	ldrh	r3, [r3, #14]
 801a438:	b2db      	uxtb	r3, r3
 801a43a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	7c1a      	ldrb	r2, [r3, #16]
 801a440:	4b0f      	ldr	r3, [pc, #60]	@ (801a480 <SUBGRF_SetPacketParams+0x138>)
 801a442:	4611      	mov	r1, r2
 801a444:	7019      	strb	r1, [r3, #0]
 801a446:	4613      	mov	r3, r2
 801a448:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	7c5b      	ldrb	r3, [r3, #17]
 801a44e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	7c9b      	ldrb	r3, [r3, #18]
 801a454:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	7cdb      	ldrb	r3, [r3, #19]
 801a45a:	747b      	strb	r3, [r7, #17]
        break;
 801a45c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801a45e:	7dfb      	ldrb	r3, [r7, #23]
 801a460:	b29a      	uxth	r2, r3
 801a462:	f107 030c 	add.w	r3, r7, #12
 801a466:	4619      	mov	r1, r3
 801a468:	208c      	movs	r0, #140	@ 0x8c
 801a46a:	f000 f965 	bl	801a738 <SUBGRF_WriteCommand>
 801a46e:	e000      	b.n	801a472 <SUBGRF_SetPacketParams+0x12a>
        return;
 801a470:	bf00      	nop
}
 801a472:	3718      	adds	r7, #24
 801a474:	46bd      	mov	sp, r7
 801a476:	bd80      	pop	{r7, pc}
 801a478:	0801d288 	.word	0x0801d288
 801a47c:	200014c5 	.word	0x200014c5
 801a480:	200014c6 	.word	0x200014c6

0801a484 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801a484:	b580      	push	{r7, lr}
 801a486:	b084      	sub	sp, #16
 801a488:	af00      	add	r7, sp, #0
 801a48a:	4603      	mov	r3, r0
 801a48c:	460a      	mov	r2, r1
 801a48e:	71fb      	strb	r3, [r7, #7]
 801a490:	4613      	mov	r3, r2
 801a492:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801a494:	79fb      	ldrb	r3, [r7, #7]
 801a496:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801a498:	79bb      	ldrb	r3, [r7, #6]
 801a49a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801a49c:	f107 030c 	add.w	r3, r7, #12
 801a4a0:	2202      	movs	r2, #2
 801a4a2:	4619      	mov	r1, r3
 801a4a4:	208f      	movs	r0, #143	@ 0x8f
 801a4a6:	f000 f947 	bl	801a738 <SUBGRF_WriteCommand>
}
 801a4aa:	bf00      	nop
 801a4ac:	3710      	adds	r7, #16
 801a4ae:	46bd      	mov	sp, r7
 801a4b0:	bd80      	pop	{r7, pc}

0801a4b2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801a4b2:	b580      	push	{r7, lr}
 801a4b4:	b082      	sub	sp, #8
 801a4b6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801a4b8:	2300      	movs	r3, #0
 801a4ba:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801a4bc:	1d3b      	adds	r3, r7, #4
 801a4be:	2201      	movs	r2, #1
 801a4c0:	4619      	mov	r1, r3
 801a4c2:	2015      	movs	r0, #21
 801a4c4:	f000 f95a 	bl	801a77c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801a4c8:	793b      	ldrb	r3, [r7, #4]
 801a4ca:	425b      	negs	r3, r3
 801a4cc:	105b      	asrs	r3, r3, #1
 801a4ce:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801a4d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a4d4:	4618      	mov	r0, r3
 801a4d6:	3708      	adds	r7, #8
 801a4d8:	46bd      	mov	sp, r7
 801a4da:	bd80      	pop	{r7, pc}

0801a4dc <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801a4dc:	b580      	push	{r7, lr}
 801a4de:	b084      	sub	sp, #16
 801a4e0:	af00      	add	r7, sp, #0
 801a4e2:	6078      	str	r0, [r7, #4]
 801a4e4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801a4e6:	f107 030c 	add.w	r3, r7, #12
 801a4ea:	2202      	movs	r2, #2
 801a4ec:	4619      	mov	r1, r3
 801a4ee:	2013      	movs	r0, #19
 801a4f0:	f000 f944 	bl	801a77c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801a4f4:	f7ff fd7e 	bl	8019ff4 <SUBGRF_GetPacketType>
 801a4f8:	4603      	mov	r3, r0
 801a4fa:	2b01      	cmp	r3, #1
 801a4fc:	d10d      	bne.n	801a51a <SUBGRF_GetRxBufferStatus+0x3e>
 801a4fe:	4b0c      	ldr	r3, [pc, #48]	@ (801a530 <SUBGRF_GetRxBufferStatus+0x54>)
 801a500:	781b      	ldrb	r3, [r3, #0]
 801a502:	b2db      	uxtb	r3, r3
 801a504:	2b01      	cmp	r3, #1
 801a506:	d108      	bne.n	801a51a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801a508:	f240 7002 	movw	r0, #1794	@ 0x702
 801a50c:	f000 f878 	bl	801a600 <SUBGRF_ReadRegister>
 801a510:	4603      	mov	r3, r0
 801a512:	461a      	mov	r2, r3
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	701a      	strb	r2, [r3, #0]
 801a518:	e002      	b.n	801a520 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801a51a:	7b3a      	ldrb	r2, [r7, #12]
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801a520:	7b7a      	ldrb	r2, [r7, #13]
 801a522:	683b      	ldr	r3, [r7, #0]
 801a524:	701a      	strb	r2, [r3, #0]
}
 801a526:	bf00      	nop
 801a528:	3710      	adds	r7, #16
 801a52a:	46bd      	mov	sp, r7
 801a52c:	bd80      	pop	{r7, pc}
 801a52e:	bf00      	nop
 801a530:	200014c6 	.word	0x200014c6

0801a534 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801a534:	b580      	push	{r7, lr}
 801a536:	b084      	sub	sp, #16
 801a538:	af00      	add	r7, sp, #0
 801a53a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801a53c:	f107 030c 	add.w	r3, r7, #12
 801a540:	2203      	movs	r2, #3
 801a542:	4619      	mov	r1, r3
 801a544:	2014      	movs	r0, #20
 801a546:	f000 f919 	bl	801a77c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801a54a:	f7ff fd53 	bl	8019ff4 <SUBGRF_GetPacketType>
 801a54e:	4603      	mov	r3, r0
 801a550:	461a      	mov	r2, r3
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	781b      	ldrb	r3, [r3, #0]
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d002      	beq.n	801a564 <SUBGRF_GetPacketStatus+0x30>
 801a55e:	2b01      	cmp	r3, #1
 801a560:	d013      	beq.n	801a58a <SUBGRF_GetPacketStatus+0x56>
 801a562:	e02a      	b.n	801a5ba <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801a564:	7b3a      	ldrb	r2, [r7, #12]
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801a56a:	7b7b      	ldrb	r3, [r7, #13]
 801a56c:	425b      	negs	r3, r3
 801a56e:	105b      	asrs	r3, r3, #1
 801a570:	b25a      	sxtb	r2, r3
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801a576:	7bbb      	ldrb	r3, [r7, #14]
 801a578:	425b      	negs	r3, r3
 801a57a:	105b      	asrs	r3, r3, #1
 801a57c:	b25a      	sxtb	r2, r3
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	2200      	movs	r2, #0
 801a586:	609a      	str	r2, [r3, #8]
            break;
 801a588:	e020      	b.n	801a5cc <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801a58a:	7b3b      	ldrb	r3, [r7, #12]
 801a58c:	425b      	negs	r3, r3
 801a58e:	105b      	asrs	r3, r3, #1
 801a590:	b25a      	sxtb	r2, r3
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801a596:	7b7b      	ldrb	r3, [r7, #13]
 801a598:	b25b      	sxtb	r3, r3
 801a59a:	3302      	adds	r3, #2
 801a59c:	109b      	asrs	r3, r3, #2
 801a59e:	b25a      	sxtb	r2, r3
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801a5a4:	7bbb      	ldrb	r3, [r7, #14]
 801a5a6:	425b      	negs	r3, r3
 801a5a8:	105b      	asrs	r3, r3, #1
 801a5aa:	b25a      	sxtb	r2, r3
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801a5b0:	4b08      	ldr	r3, [pc, #32]	@ (801a5d4 <SUBGRF_GetPacketStatus+0xa0>)
 801a5b2:	681a      	ldr	r2, [r3, #0]
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	611a      	str	r2, [r3, #16]
            break;
 801a5b8:	e008      	b.n	801a5cc <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801a5ba:	2214      	movs	r2, #20
 801a5bc:	2100      	movs	r1, #0
 801a5be:	6878      	ldr	r0, [r7, #4]
 801a5c0:	f000 fc03 	bl	801adca <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	220f      	movs	r2, #15
 801a5c8:	701a      	strb	r2, [r3, #0]
            break;
 801a5ca:	bf00      	nop
    }
}
 801a5cc:	bf00      	nop
 801a5ce:	3710      	adds	r7, #16
 801a5d0:	46bd      	mov	sp, r7
 801a5d2:	bd80      	pop	{r7, pc}
 801a5d4:	200014c8 	.word	0x200014c8

0801a5d8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b082      	sub	sp, #8
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	4603      	mov	r3, r0
 801a5e0:	460a      	mov	r2, r1
 801a5e2:	80fb      	strh	r3, [r7, #6]
 801a5e4:	4613      	mov	r3, r2
 801a5e6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801a5e8:	1d7a      	adds	r2, r7, #5
 801a5ea:	88f9      	ldrh	r1, [r7, #6]
 801a5ec:	2301      	movs	r3, #1
 801a5ee:	4803      	ldr	r0, [pc, #12]	@ (801a5fc <SUBGRF_WriteRegister+0x24>)
 801a5f0:	f7ec fc22 	bl	8006e38 <HAL_SUBGHZ_WriteRegisters>
}
 801a5f4:	bf00      	nop
 801a5f6:	3708      	adds	r7, #8
 801a5f8:	46bd      	mov	sp, r7
 801a5fa:	bd80      	pop	{r7, pc}
 801a5fc:	20000250 	.word	0x20000250

0801a600 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801a600:	b580      	push	{r7, lr}
 801a602:	b084      	sub	sp, #16
 801a604:	af00      	add	r7, sp, #0
 801a606:	4603      	mov	r3, r0
 801a608:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801a60a:	f107 020f 	add.w	r2, r7, #15
 801a60e:	88f9      	ldrh	r1, [r7, #6]
 801a610:	2301      	movs	r3, #1
 801a612:	4804      	ldr	r0, [pc, #16]	@ (801a624 <SUBGRF_ReadRegister+0x24>)
 801a614:	f7ec fc6f 	bl	8006ef6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801a618:	7bfb      	ldrb	r3, [r7, #15]
}
 801a61a:	4618      	mov	r0, r3
 801a61c:	3710      	adds	r7, #16
 801a61e:	46bd      	mov	sp, r7
 801a620:	bd80      	pop	{r7, pc}
 801a622:	bf00      	nop
 801a624:	20000250 	.word	0x20000250

0801a628 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a628:	b580      	push	{r7, lr}
 801a62a:	b086      	sub	sp, #24
 801a62c:	af00      	add	r7, sp, #0
 801a62e:	4603      	mov	r3, r0
 801a630:	6039      	str	r1, [r7, #0]
 801a632:	80fb      	strh	r3, [r7, #6]
 801a634:	4613      	mov	r3, r2
 801a636:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a638:	f3ef 8310 	mrs	r3, PRIMASK
 801a63c:	60fb      	str	r3, [r7, #12]
  return(result);
 801a63e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a640:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a642:	b672      	cpsid	i
}
 801a644:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801a646:	88bb      	ldrh	r3, [r7, #4]
 801a648:	88f9      	ldrh	r1, [r7, #6]
 801a64a:	683a      	ldr	r2, [r7, #0]
 801a64c:	4806      	ldr	r0, [pc, #24]	@ (801a668 <SUBGRF_WriteRegisters+0x40>)
 801a64e:	f7ec fbf3 	bl	8006e38 <HAL_SUBGHZ_WriteRegisters>
 801a652:	697b      	ldr	r3, [r7, #20]
 801a654:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a656:	693b      	ldr	r3, [r7, #16]
 801a658:	f383 8810 	msr	PRIMASK, r3
}
 801a65c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a65e:	bf00      	nop
 801a660:	3718      	adds	r7, #24
 801a662:	46bd      	mov	sp, r7
 801a664:	bd80      	pop	{r7, pc}
 801a666:	bf00      	nop
 801a668:	20000250 	.word	0x20000250

0801a66c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a66c:	b580      	push	{r7, lr}
 801a66e:	b086      	sub	sp, #24
 801a670:	af00      	add	r7, sp, #0
 801a672:	4603      	mov	r3, r0
 801a674:	6039      	str	r1, [r7, #0]
 801a676:	80fb      	strh	r3, [r7, #6]
 801a678:	4613      	mov	r3, r2
 801a67a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a67c:	f3ef 8310 	mrs	r3, PRIMASK
 801a680:	60fb      	str	r3, [r7, #12]
  return(result);
 801a682:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a684:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a686:	b672      	cpsid	i
}
 801a688:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801a68a:	88bb      	ldrh	r3, [r7, #4]
 801a68c:	88f9      	ldrh	r1, [r7, #6]
 801a68e:	683a      	ldr	r2, [r7, #0]
 801a690:	4806      	ldr	r0, [pc, #24]	@ (801a6ac <SUBGRF_ReadRegisters+0x40>)
 801a692:	f7ec fc30 	bl	8006ef6 <HAL_SUBGHZ_ReadRegisters>
 801a696:	697b      	ldr	r3, [r7, #20]
 801a698:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a69a:	693b      	ldr	r3, [r7, #16]
 801a69c:	f383 8810 	msr	PRIMASK, r3
}
 801a6a0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a6a2:	bf00      	nop
 801a6a4:	3718      	adds	r7, #24
 801a6a6:	46bd      	mov	sp, r7
 801a6a8:	bd80      	pop	{r7, pc}
 801a6aa:	bf00      	nop
 801a6ac:	20000250 	.word	0x20000250

0801a6b0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a6b0:	b580      	push	{r7, lr}
 801a6b2:	b086      	sub	sp, #24
 801a6b4:	af00      	add	r7, sp, #0
 801a6b6:	4603      	mov	r3, r0
 801a6b8:	6039      	str	r1, [r7, #0]
 801a6ba:	71fb      	strb	r3, [r7, #7]
 801a6bc:	4613      	mov	r3, r2
 801a6be:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a6c0:	f3ef 8310 	mrs	r3, PRIMASK
 801a6c4:	60fb      	str	r3, [r7, #12]
  return(result);
 801a6c6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a6c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a6ca:	b672      	cpsid	i
}
 801a6cc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801a6ce:	79bb      	ldrb	r3, [r7, #6]
 801a6d0:	b29b      	uxth	r3, r3
 801a6d2:	79f9      	ldrb	r1, [r7, #7]
 801a6d4:	683a      	ldr	r2, [r7, #0]
 801a6d6:	4806      	ldr	r0, [pc, #24]	@ (801a6f0 <SUBGRF_WriteBuffer+0x40>)
 801a6d8:	f7ec fd21 	bl	800711e <HAL_SUBGHZ_WriteBuffer>
 801a6dc:	697b      	ldr	r3, [r7, #20]
 801a6de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6e0:	693b      	ldr	r3, [r7, #16]
 801a6e2:	f383 8810 	msr	PRIMASK, r3
}
 801a6e6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a6e8:	bf00      	nop
 801a6ea:	3718      	adds	r7, #24
 801a6ec:	46bd      	mov	sp, r7
 801a6ee:	bd80      	pop	{r7, pc}
 801a6f0:	20000250 	.word	0x20000250

0801a6f4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a6f4:	b580      	push	{r7, lr}
 801a6f6:	b086      	sub	sp, #24
 801a6f8:	af00      	add	r7, sp, #0
 801a6fa:	4603      	mov	r3, r0
 801a6fc:	6039      	str	r1, [r7, #0]
 801a6fe:	71fb      	strb	r3, [r7, #7]
 801a700:	4613      	mov	r3, r2
 801a702:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a704:	f3ef 8310 	mrs	r3, PRIMASK
 801a708:	60fb      	str	r3, [r7, #12]
  return(result);
 801a70a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a70c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a70e:	b672      	cpsid	i
}
 801a710:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801a712:	79bb      	ldrb	r3, [r7, #6]
 801a714:	b29b      	uxth	r3, r3
 801a716:	79f9      	ldrb	r1, [r7, #7]
 801a718:	683a      	ldr	r2, [r7, #0]
 801a71a:	4806      	ldr	r0, [pc, #24]	@ (801a734 <SUBGRF_ReadBuffer+0x40>)
 801a71c:	f7ec fd52 	bl	80071c4 <HAL_SUBGHZ_ReadBuffer>
 801a720:	697b      	ldr	r3, [r7, #20]
 801a722:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a724:	693b      	ldr	r3, [r7, #16]
 801a726:	f383 8810 	msr	PRIMASK, r3
}
 801a72a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a72c:	bf00      	nop
 801a72e:	3718      	adds	r7, #24
 801a730:	46bd      	mov	sp, r7
 801a732:	bd80      	pop	{r7, pc}
 801a734:	20000250 	.word	0x20000250

0801a738 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a738:	b580      	push	{r7, lr}
 801a73a:	b086      	sub	sp, #24
 801a73c:	af00      	add	r7, sp, #0
 801a73e:	4603      	mov	r3, r0
 801a740:	6039      	str	r1, [r7, #0]
 801a742:	71fb      	strb	r3, [r7, #7]
 801a744:	4613      	mov	r3, r2
 801a746:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a748:	f3ef 8310 	mrs	r3, PRIMASK
 801a74c:	60fb      	str	r3, [r7, #12]
  return(result);
 801a74e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a750:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a752:	b672      	cpsid	i
}
 801a754:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801a756:	88bb      	ldrh	r3, [r7, #4]
 801a758:	79f9      	ldrb	r1, [r7, #7]
 801a75a:	683a      	ldr	r2, [r7, #0]
 801a75c:	4806      	ldr	r0, [pc, #24]	@ (801a778 <SUBGRF_WriteCommand+0x40>)
 801a75e:	f7ec fc2b 	bl	8006fb8 <HAL_SUBGHZ_ExecSetCmd>
 801a762:	697b      	ldr	r3, [r7, #20]
 801a764:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a766:	693b      	ldr	r3, [r7, #16]
 801a768:	f383 8810 	msr	PRIMASK, r3
}
 801a76c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a76e:	bf00      	nop
 801a770:	3718      	adds	r7, #24
 801a772:	46bd      	mov	sp, r7
 801a774:	bd80      	pop	{r7, pc}
 801a776:	bf00      	nop
 801a778:	20000250 	.word	0x20000250

0801a77c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a77c:	b580      	push	{r7, lr}
 801a77e:	b086      	sub	sp, #24
 801a780:	af00      	add	r7, sp, #0
 801a782:	4603      	mov	r3, r0
 801a784:	6039      	str	r1, [r7, #0]
 801a786:	71fb      	strb	r3, [r7, #7]
 801a788:	4613      	mov	r3, r2
 801a78a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a78c:	f3ef 8310 	mrs	r3, PRIMASK
 801a790:	60fb      	str	r3, [r7, #12]
  return(result);
 801a792:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a794:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a796:	b672      	cpsid	i
}
 801a798:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801a79a:	88bb      	ldrh	r3, [r7, #4]
 801a79c:	79f9      	ldrb	r1, [r7, #7]
 801a79e:	683a      	ldr	r2, [r7, #0]
 801a7a0:	4806      	ldr	r0, [pc, #24]	@ (801a7bc <SUBGRF_ReadCommand+0x40>)
 801a7a2:	f7ec fc68 	bl	8007076 <HAL_SUBGHZ_ExecGetCmd>
 801a7a6:	697b      	ldr	r3, [r7, #20]
 801a7a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a7aa:	693b      	ldr	r3, [r7, #16]
 801a7ac:	f383 8810 	msr	PRIMASK, r3
}
 801a7b0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a7b2:	bf00      	nop
 801a7b4:	3718      	adds	r7, #24
 801a7b6:	46bd      	mov	sp, r7
 801a7b8:	bd80      	pop	{r7, pc}
 801a7ba:	bf00      	nop
 801a7bc:	20000250 	.word	0x20000250

0801a7c0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801a7c0:	b580      	push	{r7, lr}
 801a7c2:	b084      	sub	sp, #16
 801a7c4:	af00      	add	r7, sp, #0
 801a7c6:	4603      	mov	r3, r0
 801a7c8:	460a      	mov	r2, r1
 801a7ca:	71fb      	strb	r3, [r7, #7]
 801a7cc:	4613      	mov	r3, r2
 801a7ce:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801a7d0:	2301      	movs	r3, #1
 801a7d2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801a7d4:	79bb      	ldrb	r3, [r7, #6]
 801a7d6:	2b01      	cmp	r3, #1
 801a7d8:	d10d      	bne.n	801a7f6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801a7da:	79fb      	ldrb	r3, [r7, #7]
 801a7dc:	2b01      	cmp	r3, #1
 801a7de:	d104      	bne.n	801a7ea <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801a7e0:	2302      	movs	r3, #2
 801a7e2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801a7e4:	2004      	movs	r0, #4
 801a7e6:	f000 f8ef 	bl	801a9c8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801a7ea:	79fb      	ldrb	r3, [r7, #7]
 801a7ec:	2b02      	cmp	r3, #2
 801a7ee:	d107      	bne.n	801a800 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801a7f0:	2303      	movs	r3, #3
 801a7f2:	73fb      	strb	r3, [r7, #15]
 801a7f4:	e004      	b.n	801a800 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801a7f6:	79bb      	ldrb	r3, [r7, #6]
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d101      	bne.n	801a800 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801a7fc:	2301      	movs	r3, #1
 801a7fe:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801a800:	7bfb      	ldrb	r3, [r7, #15]
 801a802:	4618      	mov	r0, r3
 801a804:	f7ef fb4b 	bl	8009e9e <RBI_ConfigRFSwitch>
}
 801a808:	bf00      	nop
 801a80a:	3710      	adds	r7, #16
 801a80c:	46bd      	mov	sp, r7
 801a80e:	bd80      	pop	{r7, pc}

0801a810 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801a810:	b580      	push	{r7, lr}
 801a812:	b084      	sub	sp, #16
 801a814:	af00      	add	r7, sp, #0
 801a816:	4603      	mov	r3, r0
 801a818:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801a81a:	2301      	movs	r3, #1
 801a81c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801a81e:	f7ef fb4b 	bl	8009eb8 <RBI_GetTxConfig>
 801a822:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801a824:	68bb      	ldr	r3, [r7, #8]
 801a826:	2b02      	cmp	r3, #2
 801a828:	d016      	beq.n	801a858 <SUBGRF_SetRfTxPower+0x48>
 801a82a:	68bb      	ldr	r3, [r7, #8]
 801a82c:	2b02      	cmp	r3, #2
 801a82e:	dc16      	bgt.n	801a85e <SUBGRF_SetRfTxPower+0x4e>
 801a830:	68bb      	ldr	r3, [r7, #8]
 801a832:	2b00      	cmp	r3, #0
 801a834:	d003      	beq.n	801a83e <SUBGRF_SetRfTxPower+0x2e>
 801a836:	68bb      	ldr	r3, [r7, #8]
 801a838:	2b01      	cmp	r3, #1
 801a83a:	d00a      	beq.n	801a852 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801a83c:	e00f      	b.n	801a85e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801a83e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a842:	2b0f      	cmp	r3, #15
 801a844:	dd02      	ble.n	801a84c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801a846:	2302      	movs	r3, #2
 801a848:	73fb      	strb	r3, [r7, #15]
            break;
 801a84a:	e009      	b.n	801a860 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801a84c:	2301      	movs	r3, #1
 801a84e:	73fb      	strb	r3, [r7, #15]
            break;
 801a850:	e006      	b.n	801a860 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801a852:	2301      	movs	r3, #1
 801a854:	73fb      	strb	r3, [r7, #15]
            break;
 801a856:	e003      	b.n	801a860 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801a858:	2302      	movs	r3, #2
 801a85a:	73fb      	strb	r3, [r7, #15]
            break;
 801a85c:	e000      	b.n	801a860 <SUBGRF_SetRfTxPower+0x50>
            break;
 801a85e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801a860:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801a864:	7bfb      	ldrb	r3, [r7, #15]
 801a866:	2202      	movs	r2, #2
 801a868:	4618      	mov	r0, r3
 801a86a:	f7ff fbcd 	bl	801a008 <SUBGRF_SetTxParams>

    return paSelect;
 801a86e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a870:	4618      	mov	r0, r3
 801a872:	3710      	adds	r7, #16
 801a874:	46bd      	mov	sp, r7
 801a876:	bd80      	pop	{r7, pc}

0801a878 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801a878:	b480      	push	{r7}
 801a87a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801a87c:	2301      	movs	r3, #1
}
 801a87e:	4618      	mov	r0, r3
 801a880:	46bd      	mov	sp, r7
 801a882:	bc80      	pop	{r7}
 801a884:	4770      	bx	lr
	...

0801a888 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a888:	b580      	push	{r7, lr}
 801a88a:	b082      	sub	sp, #8
 801a88c:	af00      	add	r7, sp, #0
 801a88e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801a890:	4b03      	ldr	r3, [pc, #12]	@ (801a8a0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	2001      	movs	r0, #1
 801a896:	4798      	blx	r3
}
 801a898:	bf00      	nop
 801a89a:	3708      	adds	r7, #8
 801a89c:	46bd      	mov	sp, r7
 801a89e:	bd80      	pop	{r7, pc}
 801a8a0:	200014d0 	.word	0x200014d0

0801a8a4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a8a4:	b580      	push	{r7, lr}
 801a8a6:	b082      	sub	sp, #8
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801a8ac:	4b03      	ldr	r3, [pc, #12]	@ (801a8bc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	2002      	movs	r0, #2
 801a8b2:	4798      	blx	r3
}
 801a8b4:	bf00      	nop
 801a8b6:	3708      	adds	r7, #8
 801a8b8:	46bd      	mov	sp, r7
 801a8ba:	bd80      	pop	{r7, pc}
 801a8bc:	200014d0 	.word	0x200014d0

0801a8c0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801a8c0:	b580      	push	{r7, lr}
 801a8c2:	b082      	sub	sp, #8
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801a8c8:	4b03      	ldr	r3, [pc, #12]	@ (801a8d8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	2040      	movs	r0, #64	@ 0x40
 801a8ce:	4798      	blx	r3
}
 801a8d0:	bf00      	nop
 801a8d2:	3708      	adds	r7, #8
 801a8d4:	46bd      	mov	sp, r7
 801a8d6:	bd80      	pop	{r7, pc}
 801a8d8:	200014d0 	.word	0x200014d0

0801a8dc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801a8dc:	b580      	push	{r7, lr}
 801a8de:	b082      	sub	sp, #8
 801a8e0:	af00      	add	r7, sp, #0
 801a8e2:	6078      	str	r0, [r7, #4]
 801a8e4:	460b      	mov	r3, r1
 801a8e6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801a8e8:	78fb      	ldrb	r3, [r7, #3]
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d002      	beq.n	801a8f4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801a8ee:	2b01      	cmp	r3, #1
 801a8f0:	d005      	beq.n	801a8fe <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801a8f2:	e00a      	b.n	801a90a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801a8f4:	4b07      	ldr	r3, [pc, #28]	@ (801a914 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	2080      	movs	r0, #128	@ 0x80
 801a8fa:	4798      	blx	r3
            break;
 801a8fc:	e005      	b.n	801a90a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801a8fe:	4b05      	ldr	r3, [pc, #20]	@ (801a914 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801a906:	4798      	blx	r3
            break;
 801a908:	bf00      	nop
    }
}
 801a90a:	bf00      	nop
 801a90c:	3708      	adds	r7, #8
 801a90e:	46bd      	mov	sp, r7
 801a910:	bd80      	pop	{r7, pc}
 801a912:	bf00      	nop
 801a914:	200014d0 	.word	0x200014d0

0801a918 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a918:	b580      	push	{r7, lr}
 801a91a:	b082      	sub	sp, #8
 801a91c:	af00      	add	r7, sp, #0
 801a91e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801a920:	4b04      	ldr	r3, [pc, #16]	@ (801a934 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801a928:	4798      	blx	r3
}
 801a92a:	bf00      	nop
 801a92c:	3708      	adds	r7, #8
 801a92e:	46bd      	mov	sp, r7
 801a930:	bd80      	pop	{r7, pc}
 801a932:	bf00      	nop
 801a934:	200014d0 	.word	0x200014d0

0801a938 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a938:	b580      	push	{r7, lr}
 801a93a:	b082      	sub	sp, #8
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801a940:	4b03      	ldr	r3, [pc, #12]	@ (801a950 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	2020      	movs	r0, #32
 801a946:	4798      	blx	r3
}
 801a948:	bf00      	nop
 801a94a:	3708      	adds	r7, #8
 801a94c:	46bd      	mov	sp, r7
 801a94e:	bd80      	pop	{r7, pc}
 801a950:	200014d0 	.word	0x200014d0

0801a954 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a954:	b580      	push	{r7, lr}
 801a956:	b082      	sub	sp, #8
 801a958:	af00      	add	r7, sp, #0
 801a95a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801a95c:	4b03      	ldr	r3, [pc, #12]	@ (801a96c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	2004      	movs	r0, #4
 801a962:	4798      	blx	r3
}
 801a964:	bf00      	nop
 801a966:	3708      	adds	r7, #8
 801a968:	46bd      	mov	sp, r7
 801a96a:	bd80      	pop	{r7, pc}
 801a96c:	200014d0 	.word	0x200014d0

0801a970 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a970:	b580      	push	{r7, lr}
 801a972:	b082      	sub	sp, #8
 801a974:	af00      	add	r7, sp, #0
 801a976:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801a978:	4b03      	ldr	r3, [pc, #12]	@ (801a988 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	2008      	movs	r0, #8
 801a97e:	4798      	blx	r3
}
 801a980:	bf00      	nop
 801a982:	3708      	adds	r7, #8
 801a984:	46bd      	mov	sp, r7
 801a986:	bd80      	pop	{r7, pc}
 801a988:	200014d0 	.word	0x200014d0

0801a98c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a98c:	b580      	push	{r7, lr}
 801a98e:	b082      	sub	sp, #8
 801a990:	af00      	add	r7, sp, #0
 801a992:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801a994:	4b03      	ldr	r3, [pc, #12]	@ (801a9a4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801a996:	681b      	ldr	r3, [r3, #0]
 801a998:	2010      	movs	r0, #16
 801a99a:	4798      	blx	r3
}
 801a99c:	bf00      	nop
 801a99e:	3708      	adds	r7, #8
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	bd80      	pop	{r7, pc}
 801a9a4:	200014d0 	.word	0x200014d0

0801a9a8 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a9a8:	b580      	push	{r7, lr}
 801a9aa:	b082      	sub	sp, #8
 801a9ac:	af00      	add	r7, sp, #0
 801a9ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801a9b0:	4b04      	ldr	r3, [pc, #16]	@ (801a9c4 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801a9b8:	4798      	blx	r3
}
 801a9ba:	bf00      	nop
 801a9bc:	3708      	adds	r7, #8
 801a9be:	46bd      	mov	sp, r7
 801a9c0:	bd80      	pop	{r7, pc}
 801a9c2:	bf00      	nop
 801a9c4:	200014d0 	.word	0x200014d0

0801a9c8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801a9c8:	b580      	push	{r7, lr}
 801a9ca:	b084      	sub	sp, #16
 801a9cc:	af00      	add	r7, sp, #0
 801a9ce:	4603      	mov	r3, r0
 801a9d0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801a9d2:	f7ef fa87 	bl	8009ee4 <RBI_IsDCDC>
 801a9d6:	4603      	mov	r3, r0
 801a9d8:	2b01      	cmp	r3, #1
 801a9da:	d112      	bne.n	801aa02 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801a9dc:	f640 1023 	movw	r0, #2339	@ 0x923
 801a9e0:	f7ff fe0e 	bl	801a600 <SUBGRF_ReadRegister>
 801a9e4:	4603      	mov	r3, r0
 801a9e6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801a9e8:	7bfb      	ldrb	r3, [r7, #15]
 801a9ea:	f023 0306 	bic.w	r3, r3, #6
 801a9ee:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801a9f0:	7bfa      	ldrb	r2, [r7, #15]
 801a9f2:	79fb      	ldrb	r3, [r7, #7]
 801a9f4:	4313      	orrs	r3, r2
 801a9f6:	b2db      	uxtb	r3, r3
 801a9f8:	4619      	mov	r1, r3
 801a9fa:	f640 1023 	movw	r0, #2339	@ 0x923
 801a9fe:	f7ff fdeb 	bl	801a5d8 <SUBGRF_WriteRegister>
  }
}
 801aa02:	bf00      	nop
 801aa04:	3710      	adds	r7, #16
 801aa06:	46bd      	mov	sp, r7
 801aa08:	bd80      	pop	{r7, pc}
	...

0801aa0c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801aa0c:	b480      	push	{r7}
 801aa0e:	b085      	sub	sp, #20
 801aa10:	af00      	add	r7, sp, #0
 801aa12:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d101      	bne.n	801aa1e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801aa1a:	231f      	movs	r3, #31
 801aa1c:	e017      	b.n	801aa4e <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801aa1e:	2300      	movs	r3, #0
 801aa20:	73fb      	strb	r3, [r7, #15]
 801aa22:	e00f      	b.n	801aa44 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801aa24:	7bfb      	ldrb	r3, [r7, #15]
 801aa26:	4a0c      	ldr	r2, [pc, #48]	@ (801aa58 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801aa28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801aa2c:	687a      	ldr	r2, [r7, #4]
 801aa2e:	429a      	cmp	r2, r3
 801aa30:	d205      	bcs.n	801aa3e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801aa32:	7bfb      	ldrb	r3, [r7, #15]
 801aa34:	4a08      	ldr	r2, [pc, #32]	@ (801aa58 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801aa36:	00db      	lsls	r3, r3, #3
 801aa38:	4413      	add	r3, r2
 801aa3a:	791b      	ldrb	r3, [r3, #4]
 801aa3c:	e007      	b.n	801aa4e <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801aa3e:	7bfb      	ldrb	r3, [r7, #15]
 801aa40:	3301      	adds	r3, #1
 801aa42:	73fb      	strb	r3, [r7, #15]
 801aa44:	7bfb      	ldrb	r3, [r7, #15]
 801aa46:	2b15      	cmp	r3, #21
 801aa48:	d9ec      	bls.n	801aa24 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801aa4a:	bf00      	nop
 801aa4c:	e7fd      	b.n	801aa4a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801aa4e:	4618      	mov	r0, r3
 801aa50:	3714      	adds	r7, #20
 801aa52:	46bd      	mov	sp, r7
 801aa54:	bc80      	pop	{r7}
 801aa56:	4770      	bx	lr
 801aa58:	0801d8fc 	.word	0x0801d8fc

0801aa5c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801aa5c:	b580      	push	{r7, lr}
 801aa5e:	b08a      	sub	sp, #40	@ 0x28
 801aa60:	af00      	add	r7, sp, #0
 801aa62:	6078      	str	r0, [r7, #4]
 801aa64:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801aa66:	4b35      	ldr	r3, [pc, #212]	@ (801ab3c <SUBGRF_GetCFO+0xe0>)
 801aa68:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801aa6a:	f640 0007 	movw	r0, #2055	@ 0x807
 801aa6e:	f7ff fdc7 	bl	801a600 <SUBGRF_ReadRegister>
 801aa72:	4603      	mov	r3, r0
 801aa74:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801aa76:	7ffb      	ldrb	r3, [r7, #31]
 801aa78:	08db      	lsrs	r3, r3, #3
 801aa7a:	b2db      	uxtb	r3, r3
 801aa7c:	f003 0303 	and.w	r3, r3, #3
 801aa80:	3328      	adds	r3, #40	@ 0x28
 801aa82:	443b      	add	r3, r7
 801aa84:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801aa88:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801aa8a:	7ffb      	ldrb	r3, [r7, #31]
 801aa8c:	f003 0307 	and.w	r3, r3, #7
 801aa90:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801aa92:	7fba      	ldrb	r2, [r7, #30]
 801aa94:	7f7b      	ldrb	r3, [r7, #29]
 801aa96:	3301      	adds	r3, #1
 801aa98:	fa02 f303 	lsl.w	r3, r2, r3
 801aa9c:	461a      	mov	r2, r3
 801aa9e:	4b28      	ldr	r3, [pc, #160]	@ (801ab40 <SUBGRF_GetCFO+0xe4>)
 801aaa0:	fbb3 f3f2 	udiv	r3, r3, r2
 801aaa4:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801aaa6:	69ba      	ldr	r2, [r7, #24]
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	fbb2 f3f3 	udiv	r3, r2, r3
 801aaae:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801aab0:	2301      	movs	r3, #1
 801aab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801aab6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801aaba:	697a      	ldr	r2, [r7, #20]
 801aabc:	fb02 f303 	mul.w	r3, r2, r3
 801aac0:	2b07      	cmp	r3, #7
 801aac2:	d802      	bhi.n	801aaca <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801aac4:	2302      	movs	r3, #2
 801aac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801aaca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801aace:	697a      	ldr	r2, [r7, #20]
 801aad0:	fb02 f303 	mul.w	r3, r2, r3
 801aad4:	2b03      	cmp	r3, #3
 801aad6:	d802      	bhi.n	801aade <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801aad8:	2304      	movs	r3, #4
 801aada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801aade:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801aae2:	69bb      	ldr	r3, [r7, #24]
 801aae4:	fb02 f303 	mul.w	r3, r2, r3
 801aae8:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801aaea:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801aaee:	f7ff fd87 	bl	801a600 <SUBGRF_ReadRegister>
 801aaf2:	4603      	mov	r3, r0
 801aaf4:	021b      	lsls	r3, r3, #8
 801aaf6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801aafa:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801aafc:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801ab00:	f7ff fd7e 	bl	801a600 <SUBGRF_ReadRegister>
 801ab04:	4603      	mov	r3, r0
 801ab06:	461a      	mov	r2, r3
 801ab08:	6a3b      	ldr	r3, [r7, #32]
 801ab0a:	4313      	orrs	r3, r2
 801ab0c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801ab0e:	6a3b      	ldr	r3, [r7, #32]
 801ab10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d005      	beq.n	801ab24 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801ab18:	6a3b      	ldr	r3, [r7, #32]
 801ab1a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801ab1e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801ab22:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801ab24:	693b      	ldr	r3, [r7, #16]
 801ab26:	095b      	lsrs	r3, r3, #5
 801ab28:	6a3a      	ldr	r2, [r7, #32]
 801ab2a:	fb02 f303 	mul.w	r3, r2, r3
 801ab2e:	11da      	asrs	r2, r3, #7
 801ab30:	683b      	ldr	r3, [r7, #0]
 801ab32:	601a      	str	r2, [r3, #0]
}
 801ab34:	bf00      	nop
 801ab36:	3728      	adds	r7, #40	@ 0x28
 801ab38:	46bd      	mov	sp, r7
 801ab3a:	bd80      	pop	{r7, pc}
 801ab3c:	0c0a0804 	.word	0x0c0a0804
 801ab40:	01e84800 	.word	0x01e84800

0801ab44 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801ab44:	b480      	push	{r7}
 801ab46:	b087      	sub	sp, #28
 801ab48:	af00      	add	r7, sp, #0
 801ab4a:	4603      	mov	r3, r0
 801ab4c:	60b9      	str	r1, [r7, #8]
 801ab4e:	607a      	str	r2, [r7, #4]
 801ab50:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801ab52:	2300      	movs	r3, #0
 801ab54:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801ab56:	f04f 33ff 	mov.w	r3, #4294967295
 801ab5a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801ab5c:	697b      	ldr	r3, [r7, #20]
}
 801ab5e:	4618      	mov	r0, r3
 801ab60:	371c      	adds	r7, #28
 801ab62:	46bd      	mov	sp, r7
 801ab64:	bc80      	pop	{r7}
 801ab66:	4770      	bx	lr

0801ab68 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801ab68:	b480      	push	{r7}
 801ab6a:	b087      	sub	sp, #28
 801ab6c:	af00      	add	r7, sp, #0
 801ab6e:	4603      	mov	r3, r0
 801ab70:	60b9      	str	r1, [r7, #8]
 801ab72:	607a      	str	r2, [r7, #4]
 801ab74:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801ab76:	2300      	movs	r3, #0
 801ab78:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801ab7a:	f04f 33ff 	mov.w	r3, #4294967295
 801ab7e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801ab80:	697b      	ldr	r3, [r7, #20]
}
 801ab82:	4618      	mov	r0, r3
 801ab84:	371c      	adds	r7, #28
 801ab86:	46bd      	mov	sp, r7
 801ab88:	bc80      	pop	{r7}
 801ab8a:	4770      	bx	lr

0801ab8c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801ab8c:	b480      	push	{r7}
 801ab8e:	b085      	sub	sp, #20
 801ab90:	af00      	add	r7, sp, #0
 801ab92:	60f8      	str	r0, [r7, #12]
 801ab94:	60b9      	str	r1, [r7, #8]
 801ab96:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801ab98:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801ab9c:	4618      	mov	r0, r3
 801ab9e:	3714      	adds	r7, #20
 801aba0:	46bd      	mov	sp, r7
 801aba2:	bc80      	pop	{r7}
 801aba4:	4770      	bx	lr

0801aba6 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801aba6:	b480      	push	{r7}
 801aba8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801abaa:	bf00      	nop
 801abac:	46bd      	mov	sp, r7
 801abae:	bc80      	pop	{r7}
 801abb0:	4770      	bx	lr

0801abb2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801abb2:	b480      	push	{r7}
 801abb4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801abb6:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801abb8:	4618      	mov	r0, r3
 801abba:	46bd      	mov	sp, r7
 801abbc:	bc80      	pop	{r7}
 801abbe:	4770      	bx	lr

0801abc0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801abc0:	b480      	push	{r7}
 801abc2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801abc4:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801abc6:	4618      	mov	r0, r3
 801abc8:	46bd      	mov	sp, r7
 801abca:	bc80      	pop	{r7}
 801abcc:	4770      	bx	lr

0801abce <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801abce:	b480      	push	{r7}
 801abd0:	b083      	sub	sp, #12
 801abd2:	af00      	add	r7, sp, #0
 801abd4:	4603      	mov	r3, r0
 801abd6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801abd8:	bf00      	nop
 801abda:	370c      	adds	r7, #12
 801abdc:	46bd      	mov	sp, r7
 801abde:	bc80      	pop	{r7}
 801abe0:	4770      	bx	lr

0801abe2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801abe2:	b480      	push	{r7}
 801abe4:	b087      	sub	sp, #28
 801abe6:	af00      	add	r7, sp, #0
 801abe8:	60f8      	str	r0, [r7, #12]
 801abea:	460b      	mov	r3, r1
 801abec:	607a      	str	r2, [r7, #4]
 801abee:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801abf0:	f04f 33ff 	mov.w	r3, #4294967295
 801abf4:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801abf6:	697b      	ldr	r3, [r7, #20]
}
 801abf8:	4618      	mov	r0, r3
 801abfa:	371c      	adds	r7, #28
 801abfc:	46bd      	mov	sp, r7
 801abfe:	bc80      	pop	{r7}
 801ac00:	4770      	bx	lr

0801ac02 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801ac02:	b480      	push	{r7}
 801ac04:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801ac06:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	46bd      	mov	sp, r7
 801ac0e:	bc80      	pop	{r7}
 801ac10:	4770      	bx	lr

0801ac12 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801ac12:	b480      	push	{r7}
 801ac14:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801ac16:	bf00      	nop
 801ac18:	46bd      	mov	sp, r7
 801ac1a:	bc80      	pop	{r7}
 801ac1c:	4770      	bx	lr

0801ac1e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801ac1e:	b480      	push	{r7}
 801ac20:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801ac22:	bf00      	nop
 801ac24:	46bd      	mov	sp, r7
 801ac26:	bc80      	pop	{r7}
 801ac28:	4770      	bx	lr

0801ac2a <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801ac2a:	b480      	push	{r7}
 801ac2c:	b083      	sub	sp, #12
 801ac2e:	af00      	add	r7, sp, #0
 801ac30:	4603      	mov	r3, r0
 801ac32:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801ac34:	bf00      	nop
 801ac36:	370c      	adds	r7, #12
 801ac38:	46bd      	mov	sp, r7
 801ac3a:	bc80      	pop	{r7}
 801ac3c:	4770      	bx	lr
	...

0801ac40 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801ac40:	b480      	push	{r7}
 801ac42:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801ac44:	4b04      	ldr	r3, [pc, #16]	@ (801ac58 <UTIL_LPM_Init+0x18>)
 801ac46:	2200      	movs	r2, #0
 801ac48:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801ac4a:	4b04      	ldr	r3, [pc, #16]	@ (801ac5c <UTIL_LPM_Init+0x1c>)
 801ac4c:	2200      	movs	r2, #0
 801ac4e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801ac50:	bf00      	nop
 801ac52:	46bd      	mov	sp, r7
 801ac54:	bc80      	pop	{r7}
 801ac56:	4770      	bx	lr
 801ac58:	200014d4 	.word	0x200014d4
 801ac5c:	200014d8 	.word	0x200014d8

0801ac60 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ac60:	b480      	push	{r7}
 801ac62:	b087      	sub	sp, #28
 801ac64:	af00      	add	r7, sp, #0
 801ac66:	6078      	str	r0, [r7, #4]
 801ac68:	460b      	mov	r3, r1
 801ac6a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ac6c:	f3ef 8310 	mrs	r3, PRIMASK
 801ac70:	613b      	str	r3, [r7, #16]
  return(result);
 801ac72:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ac74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ac76:	b672      	cpsid	i
}
 801ac78:	bf00      	nop
  
  switch( state )
 801ac7a:	78fb      	ldrb	r3, [r7, #3]
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	d008      	beq.n	801ac92 <UTIL_LPM_SetStopMode+0x32>
 801ac80:	2b01      	cmp	r3, #1
 801ac82:	d10e      	bne.n	801aca2 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801ac84:	4b0d      	ldr	r3, [pc, #52]	@ (801acbc <UTIL_LPM_SetStopMode+0x5c>)
 801ac86:	681a      	ldr	r2, [r3, #0]
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	4313      	orrs	r3, r2
 801ac8c:	4a0b      	ldr	r2, [pc, #44]	@ (801acbc <UTIL_LPM_SetStopMode+0x5c>)
 801ac8e:	6013      	str	r3, [r2, #0]
      break;
 801ac90:	e008      	b.n	801aca4 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	43da      	mvns	r2, r3
 801ac96:	4b09      	ldr	r3, [pc, #36]	@ (801acbc <UTIL_LPM_SetStopMode+0x5c>)
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	4013      	ands	r3, r2
 801ac9c:	4a07      	ldr	r2, [pc, #28]	@ (801acbc <UTIL_LPM_SetStopMode+0x5c>)
 801ac9e:	6013      	str	r3, [r2, #0]
      break;
 801aca0:	e000      	b.n	801aca4 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801aca2:	bf00      	nop
 801aca4:	697b      	ldr	r3, [r7, #20]
 801aca6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	f383 8810 	msr	PRIMASK, r3
}
 801acae:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801acb0:	bf00      	nop
 801acb2:	371c      	adds	r7, #28
 801acb4:	46bd      	mov	sp, r7
 801acb6:	bc80      	pop	{r7}
 801acb8:	4770      	bx	lr
 801acba:	bf00      	nop
 801acbc:	200014d4 	.word	0x200014d4

0801acc0 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801acc0:	b480      	push	{r7}
 801acc2:	b087      	sub	sp, #28
 801acc4:	af00      	add	r7, sp, #0
 801acc6:	6078      	str	r0, [r7, #4]
 801acc8:	460b      	mov	r3, r1
 801acca:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801accc:	f3ef 8310 	mrs	r3, PRIMASK
 801acd0:	613b      	str	r3, [r7, #16]
  return(result);
 801acd2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801acd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801acd6:	b672      	cpsid	i
}
 801acd8:	bf00      	nop
  
  switch(state)
 801acda:	78fb      	ldrb	r3, [r7, #3]
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d008      	beq.n	801acf2 <UTIL_LPM_SetOffMode+0x32>
 801ace0:	2b01      	cmp	r3, #1
 801ace2:	d10e      	bne.n	801ad02 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801ace4:	4b0d      	ldr	r3, [pc, #52]	@ (801ad1c <UTIL_LPM_SetOffMode+0x5c>)
 801ace6:	681a      	ldr	r2, [r3, #0]
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	4313      	orrs	r3, r2
 801acec:	4a0b      	ldr	r2, [pc, #44]	@ (801ad1c <UTIL_LPM_SetOffMode+0x5c>)
 801acee:	6013      	str	r3, [r2, #0]
      break;
 801acf0:	e008      	b.n	801ad04 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	43da      	mvns	r2, r3
 801acf6:	4b09      	ldr	r3, [pc, #36]	@ (801ad1c <UTIL_LPM_SetOffMode+0x5c>)
 801acf8:	681b      	ldr	r3, [r3, #0]
 801acfa:	4013      	ands	r3, r2
 801acfc:	4a07      	ldr	r2, [pc, #28]	@ (801ad1c <UTIL_LPM_SetOffMode+0x5c>)
 801acfe:	6013      	str	r3, [r2, #0]
      break;
 801ad00:	e000      	b.n	801ad04 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801ad02:	bf00      	nop
 801ad04:	697b      	ldr	r3, [r7, #20]
 801ad06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	f383 8810 	msr	PRIMASK, r3
}
 801ad0e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ad10:	bf00      	nop
 801ad12:	371c      	adds	r7, #28
 801ad14:	46bd      	mov	sp, r7
 801ad16:	bc80      	pop	{r7}
 801ad18:	4770      	bx	lr
 801ad1a:	bf00      	nop
 801ad1c:	200014d8 	.word	0x200014d8

0801ad20 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801ad20:	b580      	push	{r7, lr}
 801ad22:	b084      	sub	sp, #16
 801ad24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad26:	f3ef 8310 	mrs	r3, PRIMASK
 801ad2a:	60bb      	str	r3, [r7, #8]
  return(result);
 801ad2c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801ad2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ad30:	b672      	cpsid	i
}
 801ad32:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801ad34:	4b12      	ldr	r3, [pc, #72]	@ (801ad80 <UTIL_LPM_EnterLowPower+0x60>)
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d006      	beq.n	801ad4a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801ad3c:	4b11      	ldr	r3, [pc, #68]	@ (801ad84 <UTIL_LPM_EnterLowPower+0x64>)
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801ad42:	4b10      	ldr	r3, [pc, #64]	@ (801ad84 <UTIL_LPM_EnterLowPower+0x64>)
 801ad44:	685b      	ldr	r3, [r3, #4]
 801ad46:	4798      	blx	r3
 801ad48:	e010      	b.n	801ad6c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801ad4a:	4b0f      	ldr	r3, [pc, #60]	@ (801ad88 <UTIL_LPM_EnterLowPower+0x68>)
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	d006      	beq.n	801ad60 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801ad52:	4b0c      	ldr	r3, [pc, #48]	@ (801ad84 <UTIL_LPM_EnterLowPower+0x64>)
 801ad54:	689b      	ldr	r3, [r3, #8]
 801ad56:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801ad58:	4b0a      	ldr	r3, [pc, #40]	@ (801ad84 <UTIL_LPM_EnterLowPower+0x64>)
 801ad5a:	68db      	ldr	r3, [r3, #12]
 801ad5c:	4798      	blx	r3
 801ad5e:	e005      	b.n	801ad6c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801ad60:	4b08      	ldr	r3, [pc, #32]	@ (801ad84 <UTIL_LPM_EnterLowPower+0x64>)
 801ad62:	691b      	ldr	r3, [r3, #16]
 801ad64:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801ad66:	4b07      	ldr	r3, [pc, #28]	@ (801ad84 <UTIL_LPM_EnterLowPower+0x64>)
 801ad68:	695b      	ldr	r3, [r3, #20]
 801ad6a:	4798      	blx	r3
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	f383 8810 	msr	PRIMASK, r3
}
 801ad76:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801ad78:	bf00      	nop
 801ad7a:	3710      	adds	r7, #16
 801ad7c:	46bd      	mov	sp, r7
 801ad7e:	bd80      	pop	{r7, pc}
 801ad80:	200014d4 	.word	0x200014d4
 801ad84:	0801d2ec 	.word	0x0801d2ec
 801ad88:	200014d8 	.word	0x200014d8

0801ad8c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801ad8c:	b480      	push	{r7}
 801ad8e:	b087      	sub	sp, #28
 801ad90:	af00      	add	r7, sp, #0
 801ad92:	60f8      	str	r0, [r7, #12]
 801ad94:	60b9      	str	r1, [r7, #8]
 801ad96:	4613      	mov	r3, r2
 801ad98:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801ad9a:	68fb      	ldr	r3, [r7, #12]
 801ad9c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801ad9e:	68bb      	ldr	r3, [r7, #8]
 801ada0:	613b      	str	r3, [r7, #16]

  while( size-- )
 801ada2:	e007      	b.n	801adb4 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801ada4:	693a      	ldr	r2, [r7, #16]
 801ada6:	1c53      	adds	r3, r2, #1
 801ada8:	613b      	str	r3, [r7, #16]
 801adaa:	697b      	ldr	r3, [r7, #20]
 801adac:	1c59      	adds	r1, r3, #1
 801adae:	6179      	str	r1, [r7, #20]
 801adb0:	7812      	ldrb	r2, [r2, #0]
 801adb2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801adb4:	88fb      	ldrh	r3, [r7, #6]
 801adb6:	1e5a      	subs	r2, r3, #1
 801adb8:	80fa      	strh	r2, [r7, #6]
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d1f2      	bne.n	801ada4 <UTIL_MEM_cpy_8+0x18>
    }
}
 801adbe:	bf00      	nop
 801adc0:	bf00      	nop
 801adc2:	371c      	adds	r7, #28
 801adc4:	46bd      	mov	sp, r7
 801adc6:	bc80      	pop	{r7}
 801adc8:	4770      	bx	lr

0801adca <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801adca:	b480      	push	{r7}
 801adcc:	b085      	sub	sp, #20
 801adce:	af00      	add	r7, sp, #0
 801add0:	6078      	str	r0, [r7, #4]
 801add2:	460b      	mov	r3, r1
 801add4:	70fb      	strb	r3, [r7, #3]
 801add6:	4613      	mov	r3, r2
 801add8:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801adde:	e004      	b.n	801adea <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	1c5a      	adds	r2, r3, #1
 801ade4:	60fa      	str	r2, [r7, #12]
 801ade6:	78fa      	ldrb	r2, [r7, #3]
 801ade8:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801adea:	883b      	ldrh	r3, [r7, #0]
 801adec:	1e5a      	subs	r2, r3, #1
 801adee:	803a      	strh	r2, [r7, #0]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d1f5      	bne.n	801ade0 <UTIL_MEM_set_8+0x16>
  }
}
 801adf4:	bf00      	nop
 801adf6:	bf00      	nop
 801adf8:	3714      	adds	r7, #20
 801adfa:	46bd      	mov	sp, r7
 801adfc:	bc80      	pop	{r7}
 801adfe:	4770      	bx	lr

0801ae00 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801ae00:	b082      	sub	sp, #8
 801ae02:	b480      	push	{r7}
 801ae04:	b087      	sub	sp, #28
 801ae06:	af00      	add	r7, sp, #0
 801ae08:	60f8      	str	r0, [r7, #12]
 801ae0a:	1d38      	adds	r0, r7, #4
 801ae0c:	e880 0006 	stmia.w	r0, {r1, r2}
 801ae10:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801ae12:	2300      	movs	r3, #0
 801ae14:	613b      	str	r3, [r7, #16]
 801ae16:	2300      	movs	r3, #0
 801ae18:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801ae1a:	687a      	ldr	r2, [r7, #4]
 801ae1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae1e:	4413      	add	r3, r2
 801ae20:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801ae22:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ae26:	b29a      	uxth	r2, r3
 801ae28:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801ae2c:	b29b      	uxth	r3, r3
 801ae2e:	4413      	add	r3, r2
 801ae30:	b29b      	uxth	r3, r3
 801ae32:	b21b      	sxth	r3, r3
 801ae34:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801ae36:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ae3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801ae3e:	db0a      	blt.n	801ae56 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801ae40:	693b      	ldr	r3, [r7, #16]
 801ae42:	3301      	adds	r3, #1
 801ae44:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801ae46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ae4a:	b29b      	uxth	r3, r3
 801ae4c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801ae50:	b29b      	uxth	r3, r3
 801ae52:	b21b      	sxth	r3, r3
 801ae54:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	461a      	mov	r2, r3
 801ae5a:	f107 0310 	add.w	r3, r7, #16
 801ae5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ae62:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ae66:	68f8      	ldr	r0, [r7, #12]
 801ae68:	371c      	adds	r7, #28
 801ae6a:	46bd      	mov	sp, r7
 801ae6c:	bc80      	pop	{r7}
 801ae6e:	b002      	add	sp, #8
 801ae70:	4770      	bx	lr

0801ae72 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801ae72:	b082      	sub	sp, #8
 801ae74:	b480      	push	{r7}
 801ae76:	b087      	sub	sp, #28
 801ae78:	af00      	add	r7, sp, #0
 801ae7a:	60f8      	str	r0, [r7, #12]
 801ae7c:	1d38      	adds	r0, r7, #4
 801ae7e:	e880 0006 	stmia.w	r0, {r1, r2}
 801ae82:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801ae84:	2300      	movs	r3, #0
 801ae86:	613b      	str	r3, [r7, #16]
 801ae88:	2300      	movs	r3, #0
 801ae8a:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801ae8c:	687a      	ldr	r2, [r7, #4]
 801ae8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae90:	1ad3      	subs	r3, r2, r3
 801ae92:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801ae94:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ae98:	b29a      	uxth	r2, r3
 801ae9a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801ae9e:	b29b      	uxth	r3, r3
 801aea0:	1ad3      	subs	r3, r2, r3
 801aea2:	b29b      	uxth	r3, r3
 801aea4:	b21b      	sxth	r3, r3
 801aea6:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801aea8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	da0a      	bge.n	801aec6 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801aeb0:	693b      	ldr	r3, [r7, #16]
 801aeb2:	3b01      	subs	r3, #1
 801aeb4:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801aeb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801aeba:	b29b      	uxth	r3, r3
 801aebc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801aec0:	b29b      	uxth	r3, r3
 801aec2:	b21b      	sxth	r3, r3
 801aec4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	461a      	mov	r2, r3
 801aeca:	f107 0310 	add.w	r3, r7, #16
 801aece:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aed2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801aed6:	68f8      	ldr	r0, [r7, #12]
 801aed8:	371c      	adds	r7, #28
 801aeda:	46bd      	mov	sp, r7
 801aedc:	bc80      	pop	{r7}
 801aede:	b002      	add	sp, #8
 801aee0:	4770      	bx	lr
	...

0801aee4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801aee4:	b580      	push	{r7, lr}
 801aee6:	b088      	sub	sp, #32
 801aee8:	af02      	add	r7, sp, #8
 801aeea:	463b      	mov	r3, r7
 801aeec:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801aef0:	2300      	movs	r3, #0
 801aef2:	60bb      	str	r3, [r7, #8]
 801aef4:	2300      	movs	r3, #0
 801aef6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801aef8:	4b10      	ldr	r3, [pc, #64]	@ (801af3c <SysTimeSet+0x58>)
 801aefa:	691b      	ldr	r3, [r3, #16]
 801aefc:	f107 0208 	add.w	r2, r7, #8
 801af00:	3204      	adds	r2, #4
 801af02:	4610      	mov	r0, r2
 801af04:	4798      	blx	r3
 801af06:	4603      	mov	r3, r0
 801af08:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801af0a:	f107 0010 	add.w	r0, r7, #16
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	9300      	str	r3, [sp, #0]
 801af12:	68bb      	ldr	r3, [r7, #8]
 801af14:	463a      	mov	r2, r7
 801af16:	ca06      	ldmia	r2, {r1, r2}
 801af18:	f7ff ffab 	bl	801ae72 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801af1c:	4b07      	ldr	r3, [pc, #28]	@ (801af3c <SysTimeSet+0x58>)
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	693a      	ldr	r2, [r7, #16]
 801af22:	4610      	mov	r0, r2
 801af24:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801af26:	4b05      	ldr	r3, [pc, #20]	@ (801af3c <SysTimeSet+0x58>)
 801af28:	689b      	ldr	r3, [r3, #8]
 801af2a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801af2e:	4610      	mov	r0, r2
 801af30:	4798      	blx	r3
}
 801af32:	bf00      	nop
 801af34:	3718      	adds	r7, #24
 801af36:	46bd      	mov	sp, r7
 801af38:	bd80      	pop	{r7, pc}
 801af3a:	bf00      	nop
 801af3c:	0801d3d0 	.word	0x0801d3d0

0801af40 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801af40:	b580      	push	{r7, lr}
 801af42:	b08a      	sub	sp, #40	@ 0x28
 801af44:	af02      	add	r7, sp, #8
 801af46:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801af48:	2300      	movs	r3, #0
 801af4a:	61bb      	str	r3, [r7, #24]
 801af4c:	2300      	movs	r3, #0
 801af4e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801af50:	2300      	movs	r3, #0
 801af52:	613b      	str	r3, [r7, #16]
 801af54:	2300      	movs	r3, #0
 801af56:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801af58:	4b14      	ldr	r3, [pc, #80]	@ (801afac <SysTimeGet+0x6c>)
 801af5a:	691b      	ldr	r3, [r3, #16]
 801af5c:	f107 0218 	add.w	r2, r7, #24
 801af60:	3204      	adds	r2, #4
 801af62:	4610      	mov	r0, r2
 801af64:	4798      	blx	r3
 801af66:	4603      	mov	r3, r0
 801af68:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801af6a:	4b10      	ldr	r3, [pc, #64]	@ (801afac <SysTimeGet+0x6c>)
 801af6c:	68db      	ldr	r3, [r3, #12]
 801af6e:	4798      	blx	r3
 801af70:	4603      	mov	r3, r0
 801af72:	b21b      	sxth	r3, r3
 801af74:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801af76:	4b0d      	ldr	r3, [pc, #52]	@ (801afac <SysTimeGet+0x6c>)
 801af78:	685b      	ldr	r3, [r3, #4]
 801af7a:	4798      	blx	r3
 801af7c:	4603      	mov	r3, r0
 801af7e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801af80:	f107 0010 	add.w	r0, r7, #16
 801af84:	69fb      	ldr	r3, [r7, #28]
 801af86:	9300      	str	r3, [sp, #0]
 801af88:	69bb      	ldr	r3, [r7, #24]
 801af8a:	f107 0208 	add.w	r2, r7, #8
 801af8e:	ca06      	ldmia	r2, {r1, r2}
 801af90:	f7ff ff36 	bl	801ae00 <SysTimeAdd>

  return sysTime;
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	461a      	mov	r2, r3
 801af98:	f107 0310 	add.w	r3, r7, #16
 801af9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801afa0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801afa4:	6878      	ldr	r0, [r7, #4]
 801afa6:	3720      	adds	r7, #32
 801afa8:	46bd      	mov	sp, r7
 801afaa:	bd80      	pop	{r7, pc}
 801afac:	0801d3d0 	.word	0x0801d3d0

0801afb0 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801afb0:	b580      	push	{r7, lr}
 801afb2:	b084      	sub	sp, #16
 801afb4:	af00      	add	r7, sp, #0
 801afb6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801afb8:	2300      	movs	r3, #0
 801afba:	60bb      	str	r3, [r7, #8]
 801afbc:	2300      	movs	r3, #0
 801afbe:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801afc0:	4b0a      	ldr	r3, [pc, #40]	@ (801afec <SysTimeGetMcuTime+0x3c>)
 801afc2:	691b      	ldr	r3, [r3, #16]
 801afc4:	f107 0208 	add.w	r2, r7, #8
 801afc8:	3204      	adds	r2, #4
 801afca:	4610      	mov	r0, r2
 801afcc:	4798      	blx	r3
 801afce:	4603      	mov	r3, r0
 801afd0:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	461a      	mov	r2, r3
 801afd6:	f107 0308 	add.w	r3, r7, #8
 801afda:	e893 0003 	ldmia.w	r3, {r0, r1}
 801afde:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801afe2:	6878      	ldr	r0, [r7, #4]
 801afe4:	3710      	adds	r7, #16
 801afe6:	46bd      	mov	sp, r7
 801afe8:	bd80      	pop	{r7, pc}
 801afea:	bf00      	nop
 801afec:	0801d3d0 	.word	0x0801d3d0

0801aff0 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801aff0:	b580      	push	{r7, lr}
 801aff2:	b088      	sub	sp, #32
 801aff4:	af02      	add	r7, sp, #8
 801aff6:	463b      	mov	r3, r7
 801aff8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801affc:	4b0f      	ldr	r3, [pc, #60]	@ (801b03c <SysTimeToMs+0x4c>)
 801affe:	68db      	ldr	r3, [r3, #12]
 801b000:	4798      	blx	r3
 801b002:	4603      	mov	r3, r0
 801b004:	b21b      	sxth	r3, r3
 801b006:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b008:	4b0c      	ldr	r3, [pc, #48]	@ (801b03c <SysTimeToMs+0x4c>)
 801b00a:	685b      	ldr	r3, [r3, #4]
 801b00c:	4798      	blx	r3
 801b00e:	4603      	mov	r3, r0
 801b010:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801b012:	f107 0008 	add.w	r0, r7, #8
 801b016:	697b      	ldr	r3, [r7, #20]
 801b018:	9300      	str	r3, [sp, #0]
 801b01a:	693b      	ldr	r3, [r7, #16]
 801b01c:	463a      	mov	r2, r7
 801b01e:	ca06      	ldmia	r2, {r1, r2}
 801b020:	f7ff ff27 	bl	801ae72 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801b024:	68bb      	ldr	r3, [r7, #8]
 801b026:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801b02a:	fb02 f303 	mul.w	r3, r2, r3
 801b02e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801b032:	4413      	add	r3, r2
}
 801b034:	4618      	mov	r0, r3
 801b036:	3718      	adds	r7, #24
 801b038:	46bd      	mov	sp, r7
 801b03a:	bd80      	pop	{r7, pc}
 801b03c:	0801d3d0 	.word	0x0801d3d0

0801b040 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801b040:	b580      	push	{r7, lr}
 801b042:	b08a      	sub	sp, #40	@ 0x28
 801b044:	af02      	add	r7, sp, #8
 801b046:	6078      	str	r0, [r7, #4]
 801b048:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801b04a:	683b      	ldr	r3, [r7, #0]
 801b04c:	4a19      	ldr	r2, [pc, #100]	@ (801b0b4 <SysTimeFromMs+0x74>)
 801b04e:	fba2 2303 	umull	r2, r3, r2, r3
 801b052:	099b      	lsrs	r3, r3, #6
 801b054:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801b056:	69fb      	ldr	r3, [r7, #28]
 801b058:	617b      	str	r3, [r7, #20]
 801b05a:	683b      	ldr	r3, [r7, #0]
 801b05c:	b29a      	uxth	r2, r3
 801b05e:	69fb      	ldr	r3, [r7, #28]
 801b060:	b29b      	uxth	r3, r3
 801b062:	4619      	mov	r1, r3
 801b064:	0149      	lsls	r1, r1, #5
 801b066:	1ac9      	subs	r1, r1, r3
 801b068:	0089      	lsls	r1, r1, #2
 801b06a:	440b      	add	r3, r1
 801b06c:	00db      	lsls	r3, r3, #3
 801b06e:	b29b      	uxth	r3, r3
 801b070:	1ad3      	subs	r3, r2, r3
 801b072:	b29b      	uxth	r3, r3
 801b074:	b21b      	sxth	r3, r3
 801b076:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801b078:	f107 030c 	add.w	r3, r7, #12
 801b07c:	2200      	movs	r2, #0
 801b07e:	601a      	str	r2, [r3, #0]
 801b080:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b082:	4b0d      	ldr	r3, [pc, #52]	@ (801b0b8 <SysTimeFromMs+0x78>)
 801b084:	68db      	ldr	r3, [r3, #12]
 801b086:	4798      	blx	r3
 801b088:	4603      	mov	r3, r0
 801b08a:	b21b      	sxth	r3, r3
 801b08c:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b08e:	4b0a      	ldr	r3, [pc, #40]	@ (801b0b8 <SysTimeFromMs+0x78>)
 801b090:	685b      	ldr	r3, [r3, #4]
 801b092:	4798      	blx	r3
 801b094:	4603      	mov	r3, r0
 801b096:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801b098:	6878      	ldr	r0, [r7, #4]
 801b09a:	693b      	ldr	r3, [r7, #16]
 801b09c:	9300      	str	r3, [sp, #0]
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	f107 0214 	add.w	r2, r7, #20
 801b0a4:	ca06      	ldmia	r2, {r1, r2}
 801b0a6:	f7ff feab 	bl	801ae00 <SysTimeAdd>
}
 801b0aa:	6878      	ldr	r0, [r7, #4]
 801b0ac:	3720      	adds	r7, #32
 801b0ae:	46bd      	mov	sp, r7
 801b0b0:	bd80      	pop	{r7, pc}
 801b0b2:	bf00      	nop
 801b0b4:	10624dd3 	.word	0x10624dd3
 801b0b8:	0801d3d0 	.word	0x0801d3d0

0801b0bc <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801b0bc:	b480      	push	{r7}
 801b0be:	b085      	sub	sp, #20
 801b0c0:	af00      	add	r7, sp, #0
 801b0c2:	6078      	str	r0, [r7, #4]
  int i = 0;
 801b0c4:	2300      	movs	r3, #0
 801b0c6:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801b0c8:	e00e      	b.n	801b0e8 <ee_skip_atoi+0x2c>
 801b0ca:	68fa      	ldr	r2, [r7, #12]
 801b0cc:	4613      	mov	r3, r2
 801b0ce:	009b      	lsls	r3, r3, #2
 801b0d0:	4413      	add	r3, r2
 801b0d2:	005b      	lsls	r3, r3, #1
 801b0d4:	4618      	mov	r0, r3
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	681b      	ldr	r3, [r3, #0]
 801b0da:	1c59      	adds	r1, r3, #1
 801b0dc:	687a      	ldr	r2, [r7, #4]
 801b0de:	6011      	str	r1, [r2, #0]
 801b0e0:	781b      	ldrb	r3, [r3, #0]
 801b0e2:	4403      	add	r3, r0
 801b0e4:	3b30      	subs	r3, #48	@ 0x30
 801b0e6:	60fb      	str	r3, [r7, #12]
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	781b      	ldrb	r3, [r3, #0]
 801b0ee:	2b2f      	cmp	r3, #47	@ 0x2f
 801b0f0:	d904      	bls.n	801b0fc <ee_skip_atoi+0x40>
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	781b      	ldrb	r3, [r3, #0]
 801b0f8:	2b39      	cmp	r3, #57	@ 0x39
 801b0fa:	d9e6      	bls.n	801b0ca <ee_skip_atoi+0xe>
  return i;
 801b0fc:	68fb      	ldr	r3, [r7, #12]
}
 801b0fe:	4618      	mov	r0, r3
 801b100:	3714      	adds	r7, #20
 801b102:	46bd      	mov	sp, r7
 801b104:	bc80      	pop	{r7}
 801b106:	4770      	bx	lr

0801b108 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801b108:	b480      	push	{r7}
 801b10a:	b099      	sub	sp, #100	@ 0x64
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	60f8      	str	r0, [r7, #12]
 801b110:	60b9      	str	r1, [r7, #8]
 801b112:	607a      	str	r2, [r7, #4]
 801b114:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801b116:	4b71      	ldr	r3, [pc, #452]	@ (801b2dc <ee_number+0x1d4>)
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801b11c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b11e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b122:	2b00      	cmp	r3, #0
 801b124:	d002      	beq.n	801b12c <ee_number+0x24>
 801b126:	4b6e      	ldr	r3, [pc, #440]	@ (801b2e0 <ee_number+0x1d8>)
 801b128:	681b      	ldr	r3, [r3, #0]
 801b12a:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801b12c:	683b      	ldr	r3, [r7, #0]
 801b12e:	2b01      	cmp	r3, #1
 801b130:	dd02      	ble.n	801b138 <ee_number+0x30>
 801b132:	683b      	ldr	r3, [r7, #0]
 801b134:	2b24      	cmp	r3, #36	@ 0x24
 801b136:	dd01      	ble.n	801b13c <ee_number+0x34>
 801b138:	2300      	movs	r3, #0
 801b13a:	e0ca      	b.n	801b2d2 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801b13c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b13e:	f003 0301 	and.w	r3, r3, #1
 801b142:	2b00      	cmp	r3, #0
 801b144:	d001      	beq.n	801b14a <ee_number+0x42>
 801b146:	2330      	movs	r3, #48	@ 0x30
 801b148:	e000      	b.n	801b14c <ee_number+0x44>
 801b14a:	2320      	movs	r3, #32
 801b14c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801b150:	2300      	movs	r3, #0
 801b152:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801b156:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b158:	f003 0302 	and.w	r3, r3, #2
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d00b      	beq.n	801b178 <ee_number+0x70>
  {
    if (num < 0)
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	2b00      	cmp	r3, #0
 801b164:	da08      	bge.n	801b178 <ee_number+0x70>
    {
      sign = '-';
 801b166:	232d      	movs	r3, #45	@ 0x2d
 801b168:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	425b      	negs	r3, r3
 801b170:	607b      	str	r3, [r7, #4]
      size--;
 801b172:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b174:	3b01      	subs	r3, #1
 801b176:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801b178:	2300      	movs	r3, #0
 801b17a:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d11e      	bne.n	801b1c0 <ee_number+0xb8>
    tmp[i++] = '0';
 801b182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b184:	1c5a      	adds	r2, r3, #1
 801b186:	657a      	str	r2, [r7, #84]	@ 0x54
 801b188:	3360      	adds	r3, #96	@ 0x60
 801b18a:	443b      	add	r3, r7
 801b18c:	2230      	movs	r2, #48	@ 0x30
 801b18e:	f803 2c50 	strb.w	r2, [r3, #-80]
 801b192:	e018      	b.n	801b1c6 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	683a      	ldr	r2, [r7, #0]
 801b198:	fbb3 f1f2 	udiv	r1, r3, r2
 801b19c:	fb01 f202 	mul.w	r2, r1, r2
 801b1a0:	1a9b      	subs	r3, r3, r2
 801b1a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b1a4:	441a      	add	r2, r3
 801b1a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b1a8:	1c59      	adds	r1, r3, #1
 801b1aa:	6579      	str	r1, [r7, #84]	@ 0x54
 801b1ac:	7812      	ldrb	r2, [r2, #0]
 801b1ae:	3360      	adds	r3, #96	@ 0x60
 801b1b0:	443b      	add	r3, r7
 801b1b2:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801b1b6:	687a      	ldr	r2, [r7, #4]
 801b1b8:	683b      	ldr	r3, [r7, #0]
 801b1ba:	fbb2 f3f3 	udiv	r3, r2, r3
 801b1be:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d1e6      	bne.n	801b194 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801b1c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b1c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b1ca:	429a      	cmp	r2, r3
 801b1cc:	dd01      	ble.n	801b1d2 <ee_number+0xca>
 801b1ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b1d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801b1d2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801b1d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b1d6:	1ad3      	subs	r3, r2, r3
 801b1d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801b1da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b1dc:	f003 0301 	and.w	r3, r3, #1
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d112      	bne.n	801b20a <ee_number+0x102>
 801b1e4:	e00c      	b.n	801b200 <ee_number+0xf8>
 801b1e6:	68fb      	ldr	r3, [r7, #12]
 801b1e8:	1c5a      	adds	r2, r3, #1
 801b1ea:	60fa      	str	r2, [r7, #12]
 801b1ec:	2220      	movs	r2, #32
 801b1ee:	701a      	strb	r2, [r3, #0]
 801b1f0:	68bb      	ldr	r3, [r7, #8]
 801b1f2:	3b01      	subs	r3, #1
 801b1f4:	60bb      	str	r3, [r7, #8]
 801b1f6:	68bb      	ldr	r3, [r7, #8]
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d101      	bne.n	801b200 <ee_number+0xf8>
 801b1fc:	68fb      	ldr	r3, [r7, #12]
 801b1fe:	e068      	b.n	801b2d2 <ee_number+0x1ca>
 801b200:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b202:	1e5a      	subs	r2, r3, #1
 801b204:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b206:	2b00      	cmp	r3, #0
 801b208:	dced      	bgt.n	801b1e6 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801b20a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d01b      	beq.n	801b24a <ee_number+0x142>
 801b212:	68fb      	ldr	r3, [r7, #12]
 801b214:	1c5a      	adds	r2, r3, #1
 801b216:	60fa      	str	r2, [r7, #12]
 801b218:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801b21c:	701a      	strb	r2, [r3, #0]
 801b21e:	68bb      	ldr	r3, [r7, #8]
 801b220:	3b01      	subs	r3, #1
 801b222:	60bb      	str	r3, [r7, #8]
 801b224:	68bb      	ldr	r3, [r7, #8]
 801b226:	2b00      	cmp	r3, #0
 801b228:	d10f      	bne.n	801b24a <ee_number+0x142>
 801b22a:	68fb      	ldr	r3, [r7, #12]
 801b22c:	e051      	b.n	801b2d2 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801b22e:	68fb      	ldr	r3, [r7, #12]
 801b230:	1c5a      	adds	r2, r3, #1
 801b232:	60fa      	str	r2, [r7, #12]
 801b234:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801b238:	701a      	strb	r2, [r3, #0]
 801b23a:	68bb      	ldr	r3, [r7, #8]
 801b23c:	3b01      	subs	r3, #1
 801b23e:	60bb      	str	r3, [r7, #8]
 801b240:	68bb      	ldr	r3, [r7, #8]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d101      	bne.n	801b24a <ee_number+0x142>
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	e043      	b.n	801b2d2 <ee_number+0x1ca>
 801b24a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b24c:	1e5a      	subs	r2, r3, #1
 801b24e:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b250:	2b00      	cmp	r3, #0
 801b252:	dcec      	bgt.n	801b22e <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801b254:	e00c      	b.n	801b270 <ee_number+0x168>
 801b256:	68fb      	ldr	r3, [r7, #12]
 801b258:	1c5a      	adds	r2, r3, #1
 801b25a:	60fa      	str	r2, [r7, #12]
 801b25c:	2230      	movs	r2, #48	@ 0x30
 801b25e:	701a      	strb	r2, [r3, #0]
 801b260:	68bb      	ldr	r3, [r7, #8]
 801b262:	3b01      	subs	r3, #1
 801b264:	60bb      	str	r3, [r7, #8]
 801b266:	68bb      	ldr	r3, [r7, #8]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d101      	bne.n	801b270 <ee_number+0x168>
 801b26c:	68fb      	ldr	r3, [r7, #12]
 801b26e:	e030      	b.n	801b2d2 <ee_number+0x1ca>
 801b270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b272:	1e5a      	subs	r2, r3, #1
 801b274:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801b276:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b278:	429a      	cmp	r2, r3
 801b27a:	dbec      	blt.n	801b256 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801b27c:	e010      	b.n	801b2a0 <ee_number+0x198>
 801b27e:	68fb      	ldr	r3, [r7, #12]
 801b280:	1c5a      	adds	r2, r3, #1
 801b282:	60fa      	str	r2, [r7, #12]
 801b284:	f107 0110 	add.w	r1, r7, #16
 801b288:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b28a:	440a      	add	r2, r1
 801b28c:	7812      	ldrb	r2, [r2, #0]
 801b28e:	701a      	strb	r2, [r3, #0]
 801b290:	68bb      	ldr	r3, [r7, #8]
 801b292:	3b01      	subs	r3, #1
 801b294:	60bb      	str	r3, [r7, #8]
 801b296:	68bb      	ldr	r3, [r7, #8]
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d101      	bne.n	801b2a0 <ee_number+0x198>
 801b29c:	68fb      	ldr	r3, [r7, #12]
 801b29e:	e018      	b.n	801b2d2 <ee_number+0x1ca>
 801b2a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b2a2:	1e5a      	subs	r2, r3, #1
 801b2a4:	657a      	str	r2, [r7, #84]	@ 0x54
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	dce9      	bgt.n	801b27e <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801b2aa:	e00c      	b.n	801b2c6 <ee_number+0x1be>
 801b2ac:	68fb      	ldr	r3, [r7, #12]
 801b2ae:	1c5a      	adds	r2, r3, #1
 801b2b0:	60fa      	str	r2, [r7, #12]
 801b2b2:	2220      	movs	r2, #32
 801b2b4:	701a      	strb	r2, [r3, #0]
 801b2b6:	68bb      	ldr	r3, [r7, #8]
 801b2b8:	3b01      	subs	r3, #1
 801b2ba:	60bb      	str	r3, [r7, #8]
 801b2bc:	68bb      	ldr	r3, [r7, #8]
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d101      	bne.n	801b2c6 <ee_number+0x1be>
 801b2c2:	68fb      	ldr	r3, [r7, #12]
 801b2c4:	e005      	b.n	801b2d2 <ee_number+0x1ca>
 801b2c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b2c8:	1e5a      	subs	r2, r3, #1
 801b2ca:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	dced      	bgt.n	801b2ac <ee_number+0x1a4>

  return str;
 801b2d0:	68fb      	ldr	r3, [r7, #12]
}
 801b2d2:	4618      	mov	r0, r3
 801b2d4:	3764      	adds	r7, #100	@ 0x64
 801b2d6:	46bd      	mov	sp, r7
 801b2d8:	bc80      	pop	{r7}
 801b2da:	4770      	bx	lr
 801b2dc:	20000128 	.word	0x20000128
 801b2e0:	2000012c 	.word	0x2000012c

0801b2e4 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801b2e4:	b580      	push	{r7, lr}
 801b2e6:	b092      	sub	sp, #72	@ 0x48
 801b2e8:	af04      	add	r7, sp, #16
 801b2ea:	60f8      	str	r0, [r7, #12]
 801b2ec:	60b9      	str	r1, [r7, #8]
 801b2ee:	607a      	str	r2, [r7, #4]
 801b2f0:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801b2f2:	68bb      	ldr	r3, [r7, #8]
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	dc01      	bgt.n	801b2fc <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801b2f8:	2300      	movs	r3, #0
 801b2fa:	e13e      	b.n	801b57a <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b300:	e128      	b.n	801b554 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801b302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b304:	68fb      	ldr	r3, [r7, #12]
 801b306:	1ad2      	subs	r2, r2, r3
 801b308:	68bb      	ldr	r3, [r7, #8]
 801b30a:	3b01      	subs	r3, #1
 801b30c:	429a      	cmp	r2, r3
 801b30e:	f280 812e 	bge.w	801b56e <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	781b      	ldrb	r3, [r3, #0]
 801b316:	2b25      	cmp	r3, #37	@ 0x25
 801b318:	d006      	beq.n	801b328 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801b31a:	687a      	ldr	r2, [r7, #4]
 801b31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b31e:	1c59      	adds	r1, r3, #1
 801b320:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b322:	7812      	ldrb	r2, [r2, #0]
 801b324:	701a      	strb	r2, [r3, #0]
      continue;
 801b326:	e112      	b.n	801b54e <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801b328:	2300      	movs	r3, #0
 801b32a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	3301      	adds	r3, #1
 801b330:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	781b      	ldrb	r3, [r3, #0]
 801b336:	2b30      	cmp	r3, #48	@ 0x30
 801b338:	d103      	bne.n	801b342 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801b33a:	6a3b      	ldr	r3, [r7, #32]
 801b33c:	f043 0301 	orr.w	r3, r3, #1
 801b340:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801b342:	f04f 33ff 	mov.w	r3, #4294967295
 801b346:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	781b      	ldrb	r3, [r3, #0]
 801b34c:	2b2f      	cmp	r3, #47	@ 0x2f
 801b34e:	d908      	bls.n	801b362 <tiny_vsnprintf_like+0x7e>
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	781b      	ldrb	r3, [r3, #0]
 801b354:	2b39      	cmp	r3, #57	@ 0x39
 801b356:	d804      	bhi.n	801b362 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801b358:	1d3b      	adds	r3, r7, #4
 801b35a:	4618      	mov	r0, r3
 801b35c:	f7ff feae 	bl	801b0bc <ee_skip_atoi>
 801b360:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801b362:	f04f 33ff 	mov.w	r3, #4294967295
 801b366:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801b368:	f04f 33ff 	mov.w	r3, #4294967295
 801b36c:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801b36e:	230a      	movs	r3, #10
 801b370:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	781b      	ldrb	r3, [r3, #0]
 801b376:	3b58      	subs	r3, #88	@ 0x58
 801b378:	2b20      	cmp	r3, #32
 801b37a:	f200 8094 	bhi.w	801b4a6 <tiny_vsnprintf_like+0x1c2>
 801b37e:	a201      	add	r2, pc, #4	@ (adr r2, 801b384 <tiny_vsnprintf_like+0xa0>)
 801b380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b384:	0801b48f 	.word	0x0801b48f
 801b388:	0801b4a7 	.word	0x0801b4a7
 801b38c:	0801b4a7 	.word	0x0801b4a7
 801b390:	0801b4a7 	.word	0x0801b4a7
 801b394:	0801b4a7 	.word	0x0801b4a7
 801b398:	0801b4a7 	.word	0x0801b4a7
 801b39c:	0801b4a7 	.word	0x0801b4a7
 801b3a0:	0801b4a7 	.word	0x0801b4a7
 801b3a4:	0801b4a7 	.word	0x0801b4a7
 801b3a8:	0801b4a7 	.word	0x0801b4a7
 801b3ac:	0801b4a7 	.word	0x0801b4a7
 801b3b0:	0801b413 	.word	0x0801b413
 801b3b4:	0801b49d 	.word	0x0801b49d
 801b3b8:	0801b4a7 	.word	0x0801b4a7
 801b3bc:	0801b4a7 	.word	0x0801b4a7
 801b3c0:	0801b4a7 	.word	0x0801b4a7
 801b3c4:	0801b4a7 	.word	0x0801b4a7
 801b3c8:	0801b49d 	.word	0x0801b49d
 801b3cc:	0801b4a7 	.word	0x0801b4a7
 801b3d0:	0801b4a7 	.word	0x0801b4a7
 801b3d4:	0801b4a7 	.word	0x0801b4a7
 801b3d8:	0801b4a7 	.word	0x0801b4a7
 801b3dc:	0801b4a7 	.word	0x0801b4a7
 801b3e0:	0801b4a7 	.word	0x0801b4a7
 801b3e4:	0801b4a7 	.word	0x0801b4a7
 801b3e8:	0801b4a7 	.word	0x0801b4a7
 801b3ec:	0801b4a7 	.word	0x0801b4a7
 801b3f0:	0801b433 	.word	0x0801b433
 801b3f4:	0801b4a7 	.word	0x0801b4a7
 801b3f8:	0801b4f3 	.word	0x0801b4f3
 801b3fc:	0801b4a7 	.word	0x0801b4a7
 801b400:	0801b4a7 	.word	0x0801b4a7
 801b404:	0801b497 	.word	0x0801b497
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801b408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b40a:	1c5a      	adds	r2, r3, #1
 801b40c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b40e:	2220      	movs	r2, #32
 801b410:	701a      	strb	r2, [r3, #0]
 801b412:	69fb      	ldr	r3, [r7, #28]
 801b414:	3b01      	subs	r3, #1
 801b416:	61fb      	str	r3, [r7, #28]
 801b418:	69fb      	ldr	r3, [r7, #28]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	dcf4      	bgt.n	801b408 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801b41e:	683b      	ldr	r3, [r7, #0]
 801b420:	1d1a      	adds	r2, r3, #4
 801b422:	603a      	str	r2, [r7, #0]
 801b424:	6819      	ldr	r1, [r3, #0]
 801b426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b428:	1c5a      	adds	r2, r3, #1
 801b42a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b42c:	b2ca      	uxtb	r2, r1
 801b42e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801b430:	e08d      	b.n	801b54e <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801b432:	683b      	ldr	r3, [r7, #0]
 801b434:	1d1a      	adds	r2, r3, #4
 801b436:	603a      	str	r2, [r7, #0]
 801b438:	681b      	ldr	r3, [r3, #0]
 801b43a:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801b43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d101      	bne.n	801b446 <tiny_vsnprintf_like+0x162>
 801b442:	4b50      	ldr	r3, [pc, #320]	@ (801b584 <tiny_vsnprintf_like+0x2a0>)
 801b444:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801b446:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b448:	f7e4 fe96 	bl	8000178 <strlen>
 801b44c:	4603      	mov	r3, r0
 801b44e:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801b450:	e004      	b.n	801b45c <tiny_vsnprintf_like+0x178>
 801b452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b454:	1c5a      	adds	r2, r3, #1
 801b456:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b458:	2220      	movs	r2, #32
 801b45a:	701a      	strb	r2, [r3, #0]
 801b45c:	69fb      	ldr	r3, [r7, #28]
 801b45e:	1e5a      	subs	r2, r3, #1
 801b460:	61fa      	str	r2, [r7, #28]
 801b462:	693a      	ldr	r2, [r7, #16]
 801b464:	429a      	cmp	r2, r3
 801b466:	dbf4      	blt.n	801b452 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801b468:	2300      	movs	r3, #0
 801b46a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b46c:	e00a      	b.n	801b484 <tiny_vsnprintf_like+0x1a0>
 801b46e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b470:	1c53      	adds	r3, r2, #1
 801b472:	627b      	str	r3, [r7, #36]	@ 0x24
 801b474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b476:	1c59      	adds	r1, r3, #1
 801b478:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b47a:	7812      	ldrb	r2, [r2, #0]
 801b47c:	701a      	strb	r2, [r3, #0]
 801b47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b480:	3301      	adds	r3, #1
 801b482:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b486:	693b      	ldr	r3, [r7, #16]
 801b488:	429a      	cmp	r2, r3
 801b48a:	dbf0      	blt.n	801b46e <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801b48c:	e05f      	b.n	801b54e <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801b48e:	6a3b      	ldr	r3, [r7, #32]
 801b490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b494:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801b496:	2310      	movs	r3, #16
 801b498:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801b49a:	e02b      	b.n	801b4f4 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801b49c:	6a3b      	ldr	r3, [r7, #32]
 801b49e:	f043 0302 	orr.w	r3, r3, #2
 801b4a2:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801b4a4:	e025      	b.n	801b4f2 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	781b      	ldrb	r3, [r3, #0]
 801b4aa:	2b25      	cmp	r3, #37	@ 0x25
 801b4ac:	d004      	beq.n	801b4b8 <tiny_vsnprintf_like+0x1d4>
 801b4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4b0:	1c5a      	adds	r2, r3, #1
 801b4b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b4b4:	2225      	movs	r2, #37	@ 0x25
 801b4b6:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801b4b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b4ba:	68fb      	ldr	r3, [r7, #12]
 801b4bc:	1ad2      	subs	r2, r2, r3
 801b4be:	68bb      	ldr	r3, [r7, #8]
 801b4c0:	3b01      	subs	r3, #1
 801b4c2:	429a      	cmp	r2, r3
 801b4c4:	da16      	bge.n	801b4f4 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	781b      	ldrb	r3, [r3, #0]
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d006      	beq.n	801b4dc <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801b4ce:	687a      	ldr	r2, [r7, #4]
 801b4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4d2:	1c59      	adds	r1, r3, #1
 801b4d4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b4d6:	7812      	ldrb	r2, [r2, #0]
 801b4d8:	701a      	strb	r2, [r3, #0]
 801b4da:	e002      	b.n	801b4e2 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	3b01      	subs	r3, #1
 801b4e0:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801b4e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b4e4:	68fb      	ldr	r3, [r7, #12]
 801b4e6:	1ad2      	subs	r2, r2, r3
 801b4e8:	68bb      	ldr	r3, [r7, #8]
 801b4ea:	3b01      	subs	r3, #1
 801b4ec:	429a      	cmp	r2, r3
 801b4ee:	db2d      	blt.n	801b54c <tiny_vsnprintf_like+0x268>
 801b4f0:	e000      	b.n	801b4f4 <tiny_vsnprintf_like+0x210>
        break;
 801b4f2:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801b4f4:	697b      	ldr	r3, [r7, #20]
 801b4f6:	2b6c      	cmp	r3, #108	@ 0x6c
 801b4f8:	d105      	bne.n	801b506 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801b4fa:	683b      	ldr	r3, [r7, #0]
 801b4fc:	1d1a      	adds	r2, r3, #4
 801b4fe:	603a      	str	r2, [r7, #0]
 801b500:	681b      	ldr	r3, [r3, #0]
 801b502:	637b      	str	r3, [r7, #52]	@ 0x34
 801b504:	e00f      	b.n	801b526 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801b506:	6a3b      	ldr	r3, [r7, #32]
 801b508:	f003 0302 	and.w	r3, r3, #2
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d005      	beq.n	801b51c <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801b510:	683b      	ldr	r3, [r7, #0]
 801b512:	1d1a      	adds	r2, r3, #4
 801b514:	603a      	str	r2, [r7, #0]
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	637b      	str	r3, [r7, #52]	@ 0x34
 801b51a:	e004      	b.n	801b526 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801b51c:	683b      	ldr	r3, [r7, #0]
 801b51e:	1d1a      	adds	r2, r3, #4
 801b520:	603a      	str	r2, [r7, #0]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801b526:	68bb      	ldr	r3, [r7, #8]
 801b528:	1e5a      	subs	r2, r3, #1
 801b52a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b52c:	68fb      	ldr	r3, [r7, #12]
 801b52e:	1acb      	subs	r3, r1, r3
 801b530:	1ad1      	subs	r1, r2, r3
 801b532:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b534:	6a3b      	ldr	r3, [r7, #32]
 801b536:	9302      	str	r3, [sp, #8]
 801b538:	69bb      	ldr	r3, [r7, #24]
 801b53a:	9301      	str	r3, [sp, #4]
 801b53c:	69fb      	ldr	r3, [r7, #28]
 801b53e:	9300      	str	r3, [sp, #0]
 801b540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b542:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b544:	f7ff fde0 	bl	801b108 <ee_number>
 801b548:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801b54a:	e000      	b.n	801b54e <tiny_vsnprintf_like+0x26a>
        continue;
 801b54c:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	3301      	adds	r3, #1
 801b552:	607b      	str	r3, [r7, #4]
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	781b      	ldrb	r3, [r3, #0]
 801b558:	2b00      	cmp	r3, #0
 801b55a:	f47f aed2 	bne.w	801b302 <tiny_vsnprintf_like+0x1e>
 801b55e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b560:	68fb      	ldr	r3, [r7, #12]
 801b562:	1ad2      	subs	r2, r2, r3
 801b564:	68bb      	ldr	r3, [r7, #8]
 801b566:	3b01      	subs	r3, #1
 801b568:	429a      	cmp	r2, r3
 801b56a:	f6bf aeca 	bge.w	801b302 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801b56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b570:	2200      	movs	r2, #0
 801b572:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801b574:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b576:	68fb      	ldr	r3, [r7, #12]
 801b578:	1ad3      	subs	r3, r2, r3
}
 801b57a:	4618      	mov	r0, r3
 801b57c:	3738      	adds	r7, #56	@ 0x38
 801b57e:	46bd      	mov	sp, r7
 801b580:	bd80      	pop	{r7, pc}
 801b582:	bf00      	nop
 801b584:	0801d2e4 	.word	0x0801d2e4

0801b588 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801b588:	b580      	push	{r7, lr}
 801b58a:	b090      	sub	sp, #64	@ 0x40
 801b58c:	af00      	add	r7, sp, #0
 801b58e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801b590:	4b73      	ldr	r3, [pc, #460]	@ (801b760 <UTIL_SEQ_Run+0x1d8>)
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801b596:	4b72      	ldr	r3, [pc, #456]	@ (801b760 <UTIL_SEQ_Run+0x1d8>)
 801b598:	681a      	ldr	r2, [r3, #0]
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	4013      	ands	r3, r2
 801b59e:	4a70      	ldr	r2, [pc, #448]	@ (801b760 <UTIL_SEQ_Run+0x1d8>)
 801b5a0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801b5a2:	4b70      	ldr	r3, [pc, #448]	@ (801b764 <UTIL_SEQ_Run+0x1dc>)
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801b5a8:	4b6f      	ldr	r3, [pc, #444]	@ (801b768 <UTIL_SEQ_Run+0x1e0>)
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801b5ae:	4b6f      	ldr	r3, [pc, #444]	@ (801b76c <UTIL_SEQ_Run+0x1e4>)
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801b5b4:	4b6e      	ldr	r3, [pc, #440]	@ (801b770 <UTIL_SEQ_Run+0x1e8>)
 801b5b6:	681b      	ldr	r3, [r3, #0]
 801b5b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801b5ba:	e08d      	b.n	801b6d8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801b5bc:	2300      	movs	r3, #0
 801b5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801b5c0:	e002      	b.n	801b5c8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801b5c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b5c4:	3301      	adds	r3, #1
 801b5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801b5c8:	4a6a      	ldr	r2, [pc, #424]	@ (801b774 <UTIL_SEQ_Run+0x1ec>)
 801b5ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b5cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b5d2:	401a      	ands	r2, r3
 801b5d4:	4b62      	ldr	r3, [pc, #392]	@ (801b760 <UTIL_SEQ_Run+0x1d8>)
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	4013      	ands	r3, r2
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	d0f1      	beq.n	801b5c2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801b5de:	4a65      	ldr	r2, [pc, #404]	@ (801b774 <UTIL_SEQ_Run+0x1ec>)
 801b5e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b5e2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b5e8:	401a      	ands	r2, r3
 801b5ea:	4b5d      	ldr	r3, [pc, #372]	@ (801b760 <UTIL_SEQ_Run+0x1d8>)
 801b5ec:	681b      	ldr	r3, [r3, #0]
 801b5ee:	4013      	ands	r3, r2
 801b5f0:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801b5f2:	4a60      	ldr	r2, [pc, #384]	@ (801b774 <UTIL_SEQ_Run+0x1ec>)
 801b5f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b5f6:	00db      	lsls	r3, r3, #3
 801b5f8:	4413      	add	r3, r2
 801b5fa:	685a      	ldr	r2, [r3, #4]
 801b5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b5fe:	4013      	ands	r3, r2
 801b600:	2b00      	cmp	r3, #0
 801b602:	d106      	bne.n	801b612 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801b604:	4a5b      	ldr	r2, [pc, #364]	@ (801b774 <UTIL_SEQ_Run+0x1ec>)
 801b606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b608:	00db      	lsls	r3, r3, #3
 801b60a:	4413      	add	r3, r2
 801b60c:	f04f 32ff 	mov.w	r2, #4294967295
 801b610:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801b612:	4a58      	ldr	r2, [pc, #352]	@ (801b774 <UTIL_SEQ_Run+0x1ec>)
 801b614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b616:	00db      	lsls	r3, r3, #3
 801b618:	4413      	add	r3, r2
 801b61a:	685a      	ldr	r2, [r3, #4]
 801b61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b61e:	4013      	ands	r3, r2
 801b620:	4618      	mov	r0, r3
 801b622:	f000 f907 	bl	801b834 <SEQ_BitPosition>
 801b626:	4603      	mov	r3, r0
 801b628:	461a      	mov	r2, r3
 801b62a:	4b53      	ldr	r3, [pc, #332]	@ (801b778 <UTIL_SEQ_Run+0x1f0>)
 801b62c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801b62e:	4a51      	ldr	r2, [pc, #324]	@ (801b774 <UTIL_SEQ_Run+0x1ec>)
 801b630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b632:	00db      	lsls	r3, r3, #3
 801b634:	4413      	add	r3, r2
 801b636:	685a      	ldr	r2, [r3, #4]
 801b638:	4b4f      	ldr	r3, [pc, #316]	@ (801b778 <UTIL_SEQ_Run+0x1f0>)
 801b63a:	681b      	ldr	r3, [r3, #0]
 801b63c:	2101      	movs	r1, #1
 801b63e:	fa01 f303 	lsl.w	r3, r1, r3
 801b642:	43db      	mvns	r3, r3
 801b644:	401a      	ands	r2, r3
 801b646:	494b      	ldr	r1, [pc, #300]	@ (801b774 <UTIL_SEQ_Run+0x1ec>)
 801b648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b64a:	00db      	lsls	r3, r3, #3
 801b64c:	440b      	add	r3, r1
 801b64e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b650:	f3ef 8310 	mrs	r3, PRIMASK
 801b654:	61bb      	str	r3, [r7, #24]
  return(result);
 801b656:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b658:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801b65a:	b672      	cpsid	i
}
 801b65c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801b65e:	4b46      	ldr	r3, [pc, #280]	@ (801b778 <UTIL_SEQ_Run+0x1f0>)
 801b660:	681b      	ldr	r3, [r3, #0]
 801b662:	2201      	movs	r2, #1
 801b664:	fa02 f303 	lsl.w	r3, r2, r3
 801b668:	43da      	mvns	r2, r3
 801b66a:	4b3e      	ldr	r3, [pc, #248]	@ (801b764 <UTIL_SEQ_Run+0x1dc>)
 801b66c:	681b      	ldr	r3, [r3, #0]
 801b66e:	4013      	ands	r3, r2
 801b670:	4a3c      	ldr	r2, [pc, #240]	@ (801b764 <UTIL_SEQ_Run+0x1dc>)
 801b672:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b674:	2301      	movs	r3, #1
 801b676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b678:	e013      	b.n	801b6a2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801b67a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b67c:	3b01      	subs	r3, #1
 801b67e:	4a3d      	ldr	r2, [pc, #244]	@ (801b774 <UTIL_SEQ_Run+0x1ec>)
 801b680:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801b684:	4b3c      	ldr	r3, [pc, #240]	@ (801b778 <UTIL_SEQ_Run+0x1f0>)
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	2201      	movs	r2, #1
 801b68a:	fa02 f303 	lsl.w	r3, r2, r3
 801b68e:	43da      	mvns	r2, r3
 801b690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b692:	3b01      	subs	r3, #1
 801b694:	400a      	ands	r2, r1
 801b696:	4937      	ldr	r1, [pc, #220]	@ (801b774 <UTIL_SEQ_Run+0x1ec>)
 801b698:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b69c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b69e:	3b01      	subs	r3, #1
 801b6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b6a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d1e8      	bne.n	801b67a <UTIL_SEQ_Run+0xf2>
 801b6a8:	6a3b      	ldr	r3, [r7, #32]
 801b6aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6ac:	697b      	ldr	r3, [r7, #20]
 801b6ae:	f383 8810 	msr	PRIMASK, r3
}
 801b6b2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801b6b4:	4b30      	ldr	r3, [pc, #192]	@ (801b778 <UTIL_SEQ_Run+0x1f0>)
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	4a30      	ldr	r2, [pc, #192]	@ (801b77c <UTIL_SEQ_Run+0x1f4>)
 801b6ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b6be:	4798      	blx	r3

    local_taskset = TaskSet;
 801b6c0:	4b28      	ldr	r3, [pc, #160]	@ (801b764 <UTIL_SEQ_Run+0x1dc>)
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801b6c6:	4b28      	ldr	r3, [pc, #160]	@ (801b768 <UTIL_SEQ_Run+0x1e0>)
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801b6cc:	4b27      	ldr	r3, [pc, #156]	@ (801b76c <UTIL_SEQ_Run+0x1e4>)
 801b6ce:	681b      	ldr	r3, [r3, #0]
 801b6d0:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801b6d2:	4b27      	ldr	r3, [pc, #156]	@ (801b770 <UTIL_SEQ_Run+0x1e8>)
 801b6d4:	681b      	ldr	r3, [r3, #0]
 801b6d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801b6d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b6dc:	401a      	ands	r2, r3
 801b6de:	4b20      	ldr	r3, [pc, #128]	@ (801b760 <UTIL_SEQ_Run+0x1d8>)
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	4013      	ands	r3, r2
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d005      	beq.n	801b6f4 <UTIL_SEQ_Run+0x16c>
 801b6e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b6ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6ec:	4013      	ands	r3, r2
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	f43f af64 	beq.w	801b5bc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801b6f4:	4b20      	ldr	r3, [pc, #128]	@ (801b778 <UTIL_SEQ_Run+0x1f0>)
 801b6f6:	f04f 32ff 	mov.w	r2, #4294967295
 801b6fa:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801b6fc:	f000 f88e 	bl	801b81c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b700:	f3ef 8310 	mrs	r3, PRIMASK
 801b704:	613b      	str	r3, [r7, #16]
  return(result);
 801b706:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801b708:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b70a:	b672      	cpsid	i
}
 801b70c:	bf00      	nop
  local_taskset = TaskSet;
 801b70e:	4b15      	ldr	r3, [pc, #84]	@ (801b764 <UTIL_SEQ_Run+0x1dc>)
 801b710:	681b      	ldr	r3, [r3, #0]
 801b712:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801b714:	4b14      	ldr	r3, [pc, #80]	@ (801b768 <UTIL_SEQ_Run+0x1e0>)
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801b71a:	4b14      	ldr	r3, [pc, #80]	@ (801b76c <UTIL_SEQ_Run+0x1e4>)
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801b720:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b724:	401a      	ands	r2, r3
 801b726:	4b0e      	ldr	r3, [pc, #56]	@ (801b760 <UTIL_SEQ_Run+0x1d8>)
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	4013      	ands	r3, r2
 801b72c:	2b00      	cmp	r3, #0
 801b72e:	d107      	bne.n	801b740 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801b730:	4b0f      	ldr	r3, [pc, #60]	@ (801b770 <UTIL_SEQ_Run+0x1e8>)
 801b732:	681a      	ldr	r2, [r3, #0]
 801b734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b736:	4013      	ands	r3, r2
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d101      	bne.n	801b740 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801b73c:	f7e6 f91c 	bl	8001978 <UTIL_SEQ_Idle>
 801b740:	69fb      	ldr	r3, [r7, #28]
 801b742:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b744:	68fb      	ldr	r3, [r7, #12]
 801b746:	f383 8810 	msr	PRIMASK, r3
}
 801b74a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801b74c:	f000 f86c 	bl	801b828 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801b750:	4a03      	ldr	r2, [pc, #12]	@ (801b760 <UTIL_SEQ_Run+0x1d8>)
 801b752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b754:	6013      	str	r3, [r2, #0]

  return;
 801b756:	bf00      	nop
}
 801b758:	3740      	adds	r7, #64	@ 0x40
 801b75a:	46bd      	mov	sp, r7
 801b75c:	bd80      	pop	{r7, pc}
 801b75e:	bf00      	nop
 801b760:	20000134 	.word	0x20000134
 801b764:	200014dc 	.word	0x200014dc
 801b768:	200014e0 	.word	0x200014e0
 801b76c:	20000130 	.word	0x20000130
 801b770:	200014e4 	.word	0x200014e4
 801b774:	200014fc 	.word	0x200014fc
 801b778:	200014e8 	.word	0x200014e8
 801b77c:	200014ec 	.word	0x200014ec

0801b780 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801b780:	b580      	push	{r7, lr}
 801b782:	b088      	sub	sp, #32
 801b784:	af00      	add	r7, sp, #0
 801b786:	60f8      	str	r0, [r7, #12]
 801b788:	60b9      	str	r1, [r7, #8]
 801b78a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b78c:	f3ef 8310 	mrs	r3, PRIMASK
 801b790:	617b      	str	r3, [r7, #20]
  return(result);
 801b792:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801b794:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b796:	b672      	cpsid	i
}
 801b798:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801b79a:	68f8      	ldr	r0, [r7, #12]
 801b79c:	f000 f84a 	bl	801b834 <SEQ_BitPosition>
 801b7a0:	4603      	mov	r3, r0
 801b7a2:	4619      	mov	r1, r3
 801b7a4:	4a06      	ldr	r2, [pc, #24]	@ (801b7c0 <UTIL_SEQ_RegTask+0x40>)
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801b7ac:	69fb      	ldr	r3, [r7, #28]
 801b7ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b7b0:	69bb      	ldr	r3, [r7, #24]
 801b7b2:	f383 8810 	msr	PRIMASK, r3
}
 801b7b6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801b7b8:	bf00      	nop
}
 801b7ba:	3720      	adds	r7, #32
 801b7bc:	46bd      	mov	sp, r7
 801b7be:	bd80      	pop	{r7, pc}
 801b7c0:	200014ec 	.word	0x200014ec

0801b7c4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801b7c4:	b480      	push	{r7}
 801b7c6:	b087      	sub	sp, #28
 801b7c8:	af00      	add	r7, sp, #0
 801b7ca:	6078      	str	r0, [r7, #4]
 801b7cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b7ce:	f3ef 8310 	mrs	r3, PRIMASK
 801b7d2:	60fb      	str	r3, [r7, #12]
  return(result);
 801b7d4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b7d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b7d8:	b672      	cpsid	i
}
 801b7da:	bf00      	nop

  TaskSet |= TaskId_bm;
 801b7dc:	4b0d      	ldr	r3, [pc, #52]	@ (801b814 <UTIL_SEQ_SetTask+0x50>)
 801b7de:	681a      	ldr	r2, [r3, #0]
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	4313      	orrs	r3, r2
 801b7e4:	4a0b      	ldr	r2, [pc, #44]	@ (801b814 <UTIL_SEQ_SetTask+0x50>)
 801b7e6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801b7e8:	4a0b      	ldr	r2, [pc, #44]	@ (801b818 <UTIL_SEQ_SetTask+0x54>)
 801b7ea:	683b      	ldr	r3, [r7, #0]
 801b7ec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	431a      	orrs	r2, r3
 801b7f4:	4908      	ldr	r1, [pc, #32]	@ (801b818 <UTIL_SEQ_SetTask+0x54>)
 801b7f6:	683b      	ldr	r3, [r7, #0]
 801b7f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801b7fc:	697b      	ldr	r3, [r7, #20]
 801b7fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b800:	693b      	ldr	r3, [r7, #16]
 801b802:	f383 8810 	msr	PRIMASK, r3
}
 801b806:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801b808:	bf00      	nop
}
 801b80a:	371c      	adds	r7, #28
 801b80c:	46bd      	mov	sp, r7
 801b80e:	bc80      	pop	{r7}
 801b810:	4770      	bx	lr
 801b812:	bf00      	nop
 801b814:	200014dc 	.word	0x200014dc
 801b818:	200014fc 	.word	0x200014fc

0801b81c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801b81c:	b480      	push	{r7}
 801b81e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801b820:	bf00      	nop
}
 801b822:	46bd      	mov	sp, r7
 801b824:	bc80      	pop	{r7}
 801b826:	4770      	bx	lr

0801b828 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801b828:	b480      	push	{r7}
 801b82a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801b82c:	bf00      	nop
}
 801b82e:	46bd      	mov	sp, r7
 801b830:	bc80      	pop	{r7}
 801b832:	4770      	bx	lr

0801b834 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801b834:	b480      	push	{r7}
 801b836:	b085      	sub	sp, #20
 801b838:	af00      	add	r7, sp, #0
 801b83a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801b83c:	2300      	movs	r3, #0
 801b83e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801b844:	68bb      	ldr	r3, [r7, #8]
 801b846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b84a:	d204      	bcs.n	801b856 <SEQ_BitPosition+0x22>
 801b84c:	2310      	movs	r3, #16
 801b84e:	73fb      	strb	r3, [r7, #15]
 801b850:	68bb      	ldr	r3, [r7, #8]
 801b852:	041b      	lsls	r3, r3, #16
 801b854:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801b856:	68bb      	ldr	r3, [r7, #8]
 801b858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b85c:	d205      	bcs.n	801b86a <SEQ_BitPosition+0x36>
 801b85e:	7bfb      	ldrb	r3, [r7, #15]
 801b860:	3308      	adds	r3, #8
 801b862:	73fb      	strb	r3, [r7, #15]
 801b864:	68bb      	ldr	r3, [r7, #8]
 801b866:	021b      	lsls	r3, r3, #8
 801b868:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801b86a:	68bb      	ldr	r3, [r7, #8]
 801b86c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b870:	d205      	bcs.n	801b87e <SEQ_BitPosition+0x4a>
 801b872:	7bfb      	ldrb	r3, [r7, #15]
 801b874:	3304      	adds	r3, #4
 801b876:	73fb      	strb	r3, [r7, #15]
 801b878:	68bb      	ldr	r3, [r7, #8]
 801b87a:	011b      	lsls	r3, r3, #4
 801b87c:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801b87e:	68bb      	ldr	r3, [r7, #8]
 801b880:	0f1b      	lsrs	r3, r3, #28
 801b882:	4a07      	ldr	r2, [pc, #28]	@ (801b8a0 <SEQ_BitPosition+0x6c>)
 801b884:	5cd2      	ldrb	r2, [r2, r3]
 801b886:	7bfb      	ldrb	r3, [r7, #15]
 801b888:	4413      	add	r3, r2
 801b88a:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801b88c:	7bfb      	ldrb	r3, [r7, #15]
 801b88e:	f1c3 031f 	rsb	r3, r3, #31
 801b892:	b2db      	uxtb	r3, r3
}
 801b894:	4618      	mov	r0, r3
 801b896:	3714      	adds	r7, #20
 801b898:	46bd      	mov	sp, r7
 801b89a:	bc80      	pop	{r7}
 801b89c:	4770      	bx	lr
 801b89e:	bf00      	nop
 801b8a0:	0801d9ac 	.word	0x0801d9ac

0801b8a4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801b8a4:	b580      	push	{r7, lr}
 801b8a6:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801b8a8:	4b04      	ldr	r3, [pc, #16]	@ (801b8bc <UTIL_TIMER_Init+0x18>)
 801b8aa:	2200      	movs	r2, #0
 801b8ac:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801b8ae:	4b04      	ldr	r3, [pc, #16]	@ (801b8c0 <UTIL_TIMER_Init+0x1c>)
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	4798      	blx	r3
 801b8b4:	4603      	mov	r3, r0
}
 801b8b6:	4618      	mov	r0, r3
 801b8b8:	bd80      	pop	{r7, pc}
 801b8ba:	bf00      	nop
 801b8bc:	20001504 	.word	0x20001504
 801b8c0:	0801d3a4 	.word	0x0801d3a4

0801b8c4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801b8c4:	b580      	push	{r7, lr}
 801b8c6:	b084      	sub	sp, #16
 801b8c8:	af00      	add	r7, sp, #0
 801b8ca:	60f8      	str	r0, [r7, #12]
 801b8cc:	60b9      	str	r1, [r7, #8]
 801b8ce:	603b      	str	r3, [r7, #0]
 801b8d0:	4613      	mov	r3, r2
 801b8d2:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801b8d4:	68fb      	ldr	r3, [r7, #12]
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d023      	beq.n	801b922 <UTIL_TIMER_Create+0x5e>
 801b8da:	683b      	ldr	r3, [r7, #0]
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d020      	beq.n	801b922 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	2200      	movs	r2, #0
 801b8e4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801b8e6:	4b11      	ldr	r3, [pc, #68]	@ (801b92c <UTIL_TIMER_Create+0x68>)
 801b8e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b8ea:	68b8      	ldr	r0, [r7, #8]
 801b8ec:	4798      	blx	r3
 801b8ee:	4602      	mov	r2, r0
 801b8f0:	68fb      	ldr	r3, [r7, #12]
 801b8f2:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801b8f4:	68fb      	ldr	r3, [r7, #12]
 801b8f6:	2200      	movs	r2, #0
 801b8f8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801b8fa:	68fb      	ldr	r3, [r7, #12]
 801b8fc:	2200      	movs	r2, #0
 801b8fe:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b900:	68fb      	ldr	r3, [r7, #12]
 801b902:	2200      	movs	r2, #0
 801b904:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801b906:	68fb      	ldr	r3, [r7, #12]
 801b908:	683a      	ldr	r2, [r7, #0]
 801b90a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801b90c:	68fb      	ldr	r3, [r7, #12]
 801b90e:	69ba      	ldr	r2, [r7, #24]
 801b910:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801b912:	68fb      	ldr	r3, [r7, #12]
 801b914:	79fa      	ldrb	r2, [r7, #7]
 801b916:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801b918:	68fb      	ldr	r3, [r7, #12]
 801b91a:	2200      	movs	r2, #0
 801b91c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801b91e:	2300      	movs	r3, #0
 801b920:	e000      	b.n	801b924 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801b922:	2301      	movs	r3, #1
  }
}
 801b924:	4618      	mov	r0, r3
 801b926:	3710      	adds	r7, #16
 801b928:	46bd      	mov	sp, r7
 801b92a:	bd80      	pop	{r7, pc}
 801b92c:	0801d3a4 	.word	0x0801d3a4

0801b930 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801b930:	b580      	push	{r7, lr}
 801b932:	b08a      	sub	sp, #40	@ 0x28
 801b934:	af00      	add	r7, sp, #0
 801b936:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b938:	2300      	movs	r3, #0
 801b93a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	2b00      	cmp	r3, #0
 801b942:	d056      	beq.n	801b9f2 <UTIL_TIMER_Start+0xc2>
 801b944:	6878      	ldr	r0, [r7, #4]
 801b946:	f000 f9a9 	bl	801bc9c <TimerExists>
 801b94a:	4603      	mov	r3, r0
 801b94c:	f083 0301 	eor.w	r3, r3, #1
 801b950:	b2db      	uxtb	r3, r3
 801b952:	2b00      	cmp	r3, #0
 801b954:	d04d      	beq.n	801b9f2 <UTIL_TIMER_Start+0xc2>
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	7a5b      	ldrb	r3, [r3, #9]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d149      	bne.n	801b9f2 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b95e:	f3ef 8310 	mrs	r3, PRIMASK
 801b962:	613b      	str	r3, [r7, #16]
  return(result);
 801b964:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b966:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b968:	b672      	cpsid	i
}
 801b96a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	685b      	ldr	r3, [r3, #4]
 801b970:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801b972:	4b24      	ldr	r3, [pc, #144]	@ (801ba04 <UTIL_TIMER_Start+0xd4>)
 801b974:	6a1b      	ldr	r3, [r3, #32]
 801b976:	4798      	blx	r3
 801b978:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801b97a:	6a3a      	ldr	r2, [r7, #32]
 801b97c:	69bb      	ldr	r3, [r7, #24]
 801b97e:	429a      	cmp	r2, r3
 801b980:	d201      	bcs.n	801b986 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801b982:	69bb      	ldr	r3, [r7, #24]
 801b984:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	6a3a      	ldr	r2, [r7, #32]
 801b98a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	2200      	movs	r2, #0
 801b990:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	2201      	movs	r2, #1
 801b996:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	2200      	movs	r2, #0
 801b99c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801b99e:	4b1a      	ldr	r3, [pc, #104]	@ (801ba08 <UTIL_TIMER_Start+0xd8>)
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	2b00      	cmp	r3, #0
 801b9a4:	d106      	bne.n	801b9b4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801b9a6:	4b17      	ldr	r3, [pc, #92]	@ (801ba04 <UTIL_TIMER_Start+0xd4>)
 801b9a8:	691b      	ldr	r3, [r3, #16]
 801b9aa:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801b9ac:	6878      	ldr	r0, [r7, #4]
 801b9ae:	f000 f9eb 	bl	801bd88 <TimerInsertNewHeadTimer>
 801b9b2:	e017      	b.n	801b9e4 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801b9b4:	4b13      	ldr	r3, [pc, #76]	@ (801ba04 <UTIL_TIMER_Start+0xd4>)
 801b9b6:	699b      	ldr	r3, [r3, #24]
 801b9b8:	4798      	blx	r3
 801b9ba:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801b9bc:	687b      	ldr	r3, [r7, #4]
 801b9be:	681a      	ldr	r2, [r3, #0]
 801b9c0:	697b      	ldr	r3, [r7, #20]
 801b9c2:	441a      	add	r2, r3
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	681a      	ldr	r2, [r3, #0]
 801b9cc:	4b0e      	ldr	r3, [pc, #56]	@ (801ba08 <UTIL_TIMER_Start+0xd8>)
 801b9ce:	681b      	ldr	r3, [r3, #0]
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	429a      	cmp	r2, r3
 801b9d4:	d203      	bcs.n	801b9de <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801b9d6:	6878      	ldr	r0, [r7, #4]
 801b9d8:	f000 f9d6 	bl	801bd88 <TimerInsertNewHeadTimer>
 801b9dc:	e002      	b.n	801b9e4 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801b9de:	6878      	ldr	r0, [r7, #4]
 801b9e0:	f000 f9a2 	bl	801bd28 <TimerInsertTimer>
 801b9e4:	69fb      	ldr	r3, [r7, #28]
 801b9e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9e8:	68fb      	ldr	r3, [r7, #12]
 801b9ea:	f383 8810 	msr	PRIMASK, r3
}
 801b9ee:	bf00      	nop
  {
 801b9f0:	e002      	b.n	801b9f8 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801b9f2:	2301      	movs	r3, #1
 801b9f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801b9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	3728      	adds	r7, #40	@ 0x28
 801ba00:	46bd      	mov	sp, r7
 801ba02:	bd80      	pop	{r7, pc}
 801ba04:	0801d3a4 	.word	0x0801d3a4
 801ba08:	20001504 	.word	0x20001504

0801ba0c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801ba0c:	b580      	push	{r7, lr}
 801ba0e:	b088      	sub	sp, #32
 801ba10:	af00      	add	r7, sp, #0
 801ba12:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ba14:	2300      	movs	r3, #0
 801ba16:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d05b      	beq.n	801bad6 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba1e:	f3ef 8310 	mrs	r3, PRIMASK
 801ba22:	60fb      	str	r3, [r7, #12]
  return(result);
 801ba24:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ba26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba28:	b672      	cpsid	i
}
 801ba2a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801ba2c:	4b2d      	ldr	r3, [pc, #180]	@ (801bae4 <UTIL_TIMER_Stop+0xd8>)
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801ba32:	4b2c      	ldr	r3, [pc, #176]	@ (801bae4 <UTIL_TIMER_Stop+0xd8>)
 801ba34:	681b      	ldr	r3, [r3, #0]
 801ba36:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	2201      	movs	r2, #1
 801ba3c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801ba3e:	4b29      	ldr	r3, [pc, #164]	@ (801bae4 <UTIL_TIMER_Stop+0xd8>)
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d041      	beq.n	801baca <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	2200      	movs	r2, #0
 801ba4a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801ba4c:	4b25      	ldr	r3, [pc, #148]	@ (801bae4 <UTIL_TIMER_Stop+0xd8>)
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	687a      	ldr	r2, [r7, #4]
 801ba52:	429a      	cmp	r2, r3
 801ba54:	d134      	bne.n	801bac0 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801ba56:	4b23      	ldr	r3, [pc, #140]	@ (801bae4 <UTIL_TIMER_Stop+0xd8>)
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	2200      	movs	r2, #0
 801ba5c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801ba5e:	4b21      	ldr	r3, [pc, #132]	@ (801bae4 <UTIL_TIMER_Stop+0xd8>)
 801ba60:	681b      	ldr	r3, [r3, #0]
 801ba62:	695b      	ldr	r3, [r3, #20]
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d00a      	beq.n	801ba7e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801ba68:	4b1e      	ldr	r3, [pc, #120]	@ (801bae4 <UTIL_TIMER_Stop+0xd8>)
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	695b      	ldr	r3, [r3, #20]
 801ba6e:	4a1d      	ldr	r2, [pc, #116]	@ (801bae4 <UTIL_TIMER_Stop+0xd8>)
 801ba70:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801ba72:	4b1c      	ldr	r3, [pc, #112]	@ (801bae4 <UTIL_TIMER_Stop+0xd8>)
 801ba74:	681b      	ldr	r3, [r3, #0]
 801ba76:	4618      	mov	r0, r3
 801ba78:	f000 f92c 	bl	801bcd4 <TimerSetTimeout>
 801ba7c:	e023      	b.n	801bac6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801ba7e:	4b1a      	ldr	r3, [pc, #104]	@ (801bae8 <UTIL_TIMER_Stop+0xdc>)
 801ba80:	68db      	ldr	r3, [r3, #12]
 801ba82:	4798      	blx	r3
            TimerListHead = NULL;
 801ba84:	4b17      	ldr	r3, [pc, #92]	@ (801bae4 <UTIL_TIMER_Stop+0xd8>)
 801ba86:	2200      	movs	r2, #0
 801ba88:	601a      	str	r2, [r3, #0]
 801ba8a:	e01c      	b.n	801bac6 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801ba8c:	697a      	ldr	r2, [r7, #20]
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	429a      	cmp	r2, r3
 801ba92:	d110      	bne.n	801bab6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801ba94:	697b      	ldr	r3, [r7, #20]
 801ba96:	695b      	ldr	r3, [r3, #20]
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	d006      	beq.n	801baaa <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801ba9c:	697b      	ldr	r3, [r7, #20]
 801ba9e:	695b      	ldr	r3, [r3, #20]
 801baa0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801baa2:	69bb      	ldr	r3, [r7, #24]
 801baa4:	697a      	ldr	r2, [r7, #20]
 801baa6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801baa8:	e00d      	b.n	801bac6 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801baaa:	2300      	movs	r3, #0
 801baac:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801baae:	69bb      	ldr	r3, [r7, #24]
 801bab0:	697a      	ldr	r2, [r7, #20]
 801bab2:	615a      	str	r2, [r3, #20]
            break;
 801bab4:	e007      	b.n	801bac6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801bab6:	697b      	ldr	r3, [r7, #20]
 801bab8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801baba:	697b      	ldr	r3, [r7, #20]
 801babc:	695b      	ldr	r3, [r3, #20]
 801babe:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801bac0:	697b      	ldr	r3, [r7, #20]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d1e2      	bne.n	801ba8c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801bac6:	2300      	movs	r3, #0
 801bac8:	77fb      	strb	r3, [r7, #31]
 801baca:	693b      	ldr	r3, [r7, #16]
 801bacc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bace:	68bb      	ldr	r3, [r7, #8]
 801bad0:	f383 8810 	msr	PRIMASK, r3
}
 801bad4:	e001      	b.n	801bada <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801bad6:	2301      	movs	r3, #1
 801bad8:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801bada:	7ffb      	ldrb	r3, [r7, #31]
}
 801badc:	4618      	mov	r0, r3
 801bade:	3720      	adds	r7, #32
 801bae0:	46bd      	mov	sp, r7
 801bae2:	bd80      	pop	{r7, pc}
 801bae4:	20001504 	.word	0x20001504
 801bae8:	0801d3a4 	.word	0x0801d3a4

0801baec <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801baec:	b580      	push	{r7, lr}
 801baee:	b084      	sub	sp, #16
 801baf0:	af00      	add	r7, sp, #0
 801baf2:	6078      	str	r0, [r7, #4]
 801baf4:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801baf6:	2300      	movs	r3, #0
 801baf8:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d102      	bne.n	801bb06 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801bb00:	2301      	movs	r3, #1
 801bb02:	73fb      	strb	r3, [r7, #15]
 801bb04:	e014      	b.n	801bb30 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801bb06:	4b0d      	ldr	r3, [pc, #52]	@ (801bb3c <UTIL_TIMER_SetPeriod+0x50>)
 801bb08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bb0a:	6838      	ldr	r0, [r7, #0]
 801bb0c:	4798      	blx	r3
 801bb0e:	4602      	mov	r2, r0
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801bb14:	6878      	ldr	r0, [r7, #4]
 801bb16:	f000 f8c1 	bl	801bc9c <TimerExists>
 801bb1a:	4603      	mov	r3, r0
 801bb1c:	2b00      	cmp	r3, #0
 801bb1e:	d007      	beq.n	801bb30 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801bb20:	6878      	ldr	r0, [r7, #4]
 801bb22:	f7ff ff73 	bl	801ba0c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801bb26:	6878      	ldr	r0, [r7, #4]
 801bb28:	f7ff ff02 	bl	801b930 <UTIL_TIMER_Start>
 801bb2c:	4603      	mov	r3, r0
 801bb2e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801bb30:	7bfb      	ldrb	r3, [r7, #15]
}
 801bb32:	4618      	mov	r0, r3
 801bb34:	3710      	adds	r7, #16
 801bb36:	46bd      	mov	sp, r7
 801bb38:	bd80      	pop	{r7, pc}
 801bb3a:	bf00      	nop
 801bb3c:	0801d3a4 	.word	0x0801d3a4

0801bb40 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801bb40:	b590      	push	{r4, r7, lr}
 801bb42:	b089      	sub	sp, #36	@ 0x24
 801bb44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb46:	f3ef 8310 	mrs	r3, PRIMASK
 801bb4a:	60bb      	str	r3, [r7, #8]
  return(result);
 801bb4c:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801bb4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb50:	b672      	cpsid	i
}
 801bb52:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801bb54:	4b38      	ldr	r3, [pc, #224]	@ (801bc38 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801bb56:	695b      	ldr	r3, [r3, #20]
 801bb58:	4798      	blx	r3
 801bb5a:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801bb5c:	4b36      	ldr	r3, [pc, #216]	@ (801bc38 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801bb5e:	691b      	ldr	r3, [r3, #16]
 801bb60:	4798      	blx	r3
 801bb62:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801bb64:	693a      	ldr	r2, [r7, #16]
 801bb66:	697b      	ldr	r3, [r7, #20]
 801bb68:	1ad3      	subs	r3, r2, r3
 801bb6a:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801bb6c:	4b33      	ldr	r3, [pc, #204]	@ (801bc3c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bb6e:	681b      	ldr	r3, [r3, #0]
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d037      	beq.n	801bbe4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801bb74:	4b31      	ldr	r3, [pc, #196]	@ (801bc3c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bb76:	681b      	ldr	r3, [r3, #0]
 801bb78:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801bb7a:	69fb      	ldr	r3, [r7, #28]
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	68fa      	ldr	r2, [r7, #12]
 801bb80:	429a      	cmp	r2, r3
 801bb82:	d206      	bcs.n	801bb92 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801bb84:	69fb      	ldr	r3, [r7, #28]
 801bb86:	681a      	ldr	r2, [r3, #0]
 801bb88:	68fb      	ldr	r3, [r7, #12]
 801bb8a:	1ad2      	subs	r2, r2, r3
 801bb8c:	69fb      	ldr	r3, [r7, #28]
 801bb8e:	601a      	str	r2, [r3, #0]
 801bb90:	e002      	b.n	801bb98 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801bb92:	69fb      	ldr	r3, [r7, #28]
 801bb94:	2200      	movs	r2, #0
 801bb96:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801bb98:	69fb      	ldr	r3, [r7, #28]
 801bb9a:	695b      	ldr	r3, [r3, #20]
 801bb9c:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801bb9e:	69fb      	ldr	r3, [r7, #28]
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	d1ea      	bne.n	801bb7a <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801bba4:	e01e      	b.n	801bbe4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801bba6:	4b25      	ldr	r3, [pc, #148]	@ (801bc3c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bba8:	681b      	ldr	r3, [r3, #0]
 801bbaa:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801bbac:	4b23      	ldr	r3, [pc, #140]	@ (801bc3c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	695b      	ldr	r3, [r3, #20]
 801bbb2:	4a22      	ldr	r2, [pc, #136]	@ (801bc3c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bbb4:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801bbb6:	69fb      	ldr	r3, [r7, #28]
 801bbb8:	2200      	movs	r2, #0
 801bbba:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801bbbc:	69fb      	ldr	r3, [r7, #28]
 801bbbe:	2200      	movs	r2, #0
 801bbc0:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801bbc2:	69fb      	ldr	r3, [r7, #28]
 801bbc4:	68db      	ldr	r3, [r3, #12]
 801bbc6:	69fa      	ldr	r2, [r7, #28]
 801bbc8:	6912      	ldr	r2, [r2, #16]
 801bbca:	4610      	mov	r0, r2
 801bbcc:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801bbce:	69fb      	ldr	r3, [r7, #28]
 801bbd0:	7adb      	ldrb	r3, [r3, #11]
 801bbd2:	2b01      	cmp	r3, #1
 801bbd4:	d106      	bne.n	801bbe4 <UTIL_TIMER_IRQ_Handler+0xa4>
 801bbd6:	69fb      	ldr	r3, [r7, #28]
 801bbd8:	7a9b      	ldrb	r3, [r3, #10]
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d102      	bne.n	801bbe4 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801bbde:	69f8      	ldr	r0, [r7, #28]
 801bbe0:	f7ff fea6 	bl	801b930 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801bbe4:	4b15      	ldr	r3, [pc, #84]	@ (801bc3c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	2b00      	cmp	r3, #0
 801bbea:	d00d      	beq.n	801bc08 <UTIL_TIMER_IRQ_Handler+0xc8>
 801bbec:	4b13      	ldr	r3, [pc, #76]	@ (801bc3c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bbee:	681b      	ldr	r3, [r3, #0]
 801bbf0:	681b      	ldr	r3, [r3, #0]
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d0d7      	beq.n	801bba6 <UTIL_TIMER_IRQ_Handler+0x66>
 801bbf6:	4b11      	ldr	r3, [pc, #68]	@ (801bc3c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bbf8:	681b      	ldr	r3, [r3, #0]
 801bbfa:	681c      	ldr	r4, [r3, #0]
 801bbfc:	4b0e      	ldr	r3, [pc, #56]	@ (801bc38 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801bbfe:	699b      	ldr	r3, [r3, #24]
 801bc00:	4798      	blx	r3
 801bc02:	4603      	mov	r3, r0
 801bc04:	429c      	cmp	r4, r3
 801bc06:	d3ce      	bcc.n	801bba6 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801bc08:	4b0c      	ldr	r3, [pc, #48]	@ (801bc3c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bc0a:	681b      	ldr	r3, [r3, #0]
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d009      	beq.n	801bc24 <UTIL_TIMER_IRQ_Handler+0xe4>
 801bc10:	4b0a      	ldr	r3, [pc, #40]	@ (801bc3c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	7a1b      	ldrb	r3, [r3, #8]
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	d104      	bne.n	801bc24 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801bc1a:	4b08      	ldr	r3, [pc, #32]	@ (801bc3c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	4618      	mov	r0, r3
 801bc20:	f000 f858 	bl	801bcd4 <TimerSetTimeout>
 801bc24:	69bb      	ldr	r3, [r7, #24]
 801bc26:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	f383 8810 	msr	PRIMASK, r3
}
 801bc2e:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801bc30:	bf00      	nop
 801bc32:	3724      	adds	r7, #36	@ 0x24
 801bc34:	46bd      	mov	sp, r7
 801bc36:	bd90      	pop	{r4, r7, pc}
 801bc38:	0801d3a4 	.word	0x0801d3a4
 801bc3c:	20001504 	.word	0x20001504

0801bc40 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801bc40:	b580      	push	{r7, lr}
 801bc42:	b082      	sub	sp, #8
 801bc44:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801bc46:	4b06      	ldr	r3, [pc, #24]	@ (801bc60 <UTIL_TIMER_GetCurrentTime+0x20>)
 801bc48:	69db      	ldr	r3, [r3, #28]
 801bc4a:	4798      	blx	r3
 801bc4c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801bc4e:	4b04      	ldr	r3, [pc, #16]	@ (801bc60 <UTIL_TIMER_GetCurrentTime+0x20>)
 801bc50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bc52:	6878      	ldr	r0, [r7, #4]
 801bc54:	4798      	blx	r3
 801bc56:	4603      	mov	r3, r0
}
 801bc58:	4618      	mov	r0, r3
 801bc5a:	3708      	adds	r7, #8
 801bc5c:	46bd      	mov	sp, r7
 801bc5e:	bd80      	pop	{r7, pc}
 801bc60:	0801d3a4 	.word	0x0801d3a4

0801bc64 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801bc64:	b580      	push	{r7, lr}
 801bc66:	b084      	sub	sp, #16
 801bc68:	af00      	add	r7, sp, #0
 801bc6a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801bc6c:	4b0a      	ldr	r3, [pc, #40]	@ (801bc98 <UTIL_TIMER_GetElapsedTime+0x34>)
 801bc6e:	69db      	ldr	r3, [r3, #28]
 801bc70:	4798      	blx	r3
 801bc72:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801bc74:	4b08      	ldr	r3, [pc, #32]	@ (801bc98 <UTIL_TIMER_GetElapsedTime+0x34>)
 801bc76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bc78:	6878      	ldr	r0, [r7, #4]
 801bc7a:	4798      	blx	r3
 801bc7c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801bc7e:	4b06      	ldr	r3, [pc, #24]	@ (801bc98 <UTIL_TIMER_GetElapsedTime+0x34>)
 801bc80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bc82:	68f9      	ldr	r1, [r7, #12]
 801bc84:	68ba      	ldr	r2, [r7, #8]
 801bc86:	1a8a      	subs	r2, r1, r2
 801bc88:	4610      	mov	r0, r2
 801bc8a:	4798      	blx	r3
 801bc8c:	4603      	mov	r3, r0
}
 801bc8e:	4618      	mov	r0, r3
 801bc90:	3710      	adds	r7, #16
 801bc92:	46bd      	mov	sp, r7
 801bc94:	bd80      	pop	{r7, pc}
 801bc96:	bf00      	nop
 801bc98:	0801d3a4 	.word	0x0801d3a4

0801bc9c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801bc9c:	b480      	push	{r7}
 801bc9e:	b085      	sub	sp, #20
 801bca0:	af00      	add	r7, sp, #0
 801bca2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801bca4:	4b0a      	ldr	r3, [pc, #40]	@ (801bcd0 <TimerExists+0x34>)
 801bca6:	681b      	ldr	r3, [r3, #0]
 801bca8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801bcaa:	e008      	b.n	801bcbe <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801bcac:	68fa      	ldr	r2, [r7, #12]
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	429a      	cmp	r2, r3
 801bcb2:	d101      	bne.n	801bcb8 <TimerExists+0x1c>
    {
      return true;
 801bcb4:	2301      	movs	r3, #1
 801bcb6:	e006      	b.n	801bcc6 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801bcb8:	68fb      	ldr	r3, [r7, #12]
 801bcba:	695b      	ldr	r3, [r3, #20]
 801bcbc:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801bcbe:	68fb      	ldr	r3, [r7, #12]
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d1f3      	bne.n	801bcac <TimerExists+0x10>
  }
  return false;
 801bcc4:	2300      	movs	r3, #0
}
 801bcc6:	4618      	mov	r0, r3
 801bcc8:	3714      	adds	r7, #20
 801bcca:	46bd      	mov	sp, r7
 801bccc:	bc80      	pop	{r7}
 801bcce:	4770      	bx	lr
 801bcd0:	20001504 	.word	0x20001504

0801bcd4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801bcd4:	b590      	push	{r4, r7, lr}
 801bcd6:	b085      	sub	sp, #20
 801bcd8:	af00      	add	r7, sp, #0
 801bcda:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801bcdc:	4b11      	ldr	r3, [pc, #68]	@ (801bd24 <TimerSetTimeout+0x50>)
 801bcde:	6a1b      	ldr	r3, [r3, #32]
 801bce0:	4798      	blx	r3
 801bce2:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	2201      	movs	r2, #1
 801bce8:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	681c      	ldr	r4, [r3, #0]
 801bcee:	4b0d      	ldr	r3, [pc, #52]	@ (801bd24 <TimerSetTimeout+0x50>)
 801bcf0:	699b      	ldr	r3, [r3, #24]
 801bcf2:	4798      	blx	r3
 801bcf4:	4602      	mov	r2, r0
 801bcf6:	68fb      	ldr	r3, [r7, #12]
 801bcf8:	4413      	add	r3, r2
 801bcfa:	429c      	cmp	r4, r3
 801bcfc:	d207      	bcs.n	801bd0e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801bcfe:	4b09      	ldr	r3, [pc, #36]	@ (801bd24 <TimerSetTimeout+0x50>)
 801bd00:	699b      	ldr	r3, [r3, #24]
 801bd02:	4798      	blx	r3
 801bd04:	4602      	mov	r2, r0
 801bd06:	68fb      	ldr	r3, [r7, #12]
 801bd08:	441a      	add	r2, r3
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801bd0e:	4b05      	ldr	r3, [pc, #20]	@ (801bd24 <TimerSetTimeout+0x50>)
 801bd10:	689b      	ldr	r3, [r3, #8]
 801bd12:	687a      	ldr	r2, [r7, #4]
 801bd14:	6812      	ldr	r2, [r2, #0]
 801bd16:	4610      	mov	r0, r2
 801bd18:	4798      	blx	r3
}
 801bd1a:	bf00      	nop
 801bd1c:	3714      	adds	r7, #20
 801bd1e:	46bd      	mov	sp, r7
 801bd20:	bd90      	pop	{r4, r7, pc}
 801bd22:	bf00      	nop
 801bd24:	0801d3a4 	.word	0x0801d3a4

0801bd28 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801bd28:	b480      	push	{r7}
 801bd2a:	b085      	sub	sp, #20
 801bd2c:	af00      	add	r7, sp, #0
 801bd2e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801bd30:	4b14      	ldr	r3, [pc, #80]	@ (801bd84 <TimerInsertTimer+0x5c>)
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801bd36:	4b13      	ldr	r3, [pc, #76]	@ (801bd84 <TimerInsertTimer+0x5c>)
 801bd38:	681b      	ldr	r3, [r3, #0]
 801bd3a:	695b      	ldr	r3, [r3, #20]
 801bd3c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801bd3e:	e012      	b.n	801bd66 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	681a      	ldr	r2, [r3, #0]
 801bd44:	68bb      	ldr	r3, [r7, #8]
 801bd46:	681b      	ldr	r3, [r3, #0]
 801bd48:	429a      	cmp	r2, r3
 801bd4a:	d905      	bls.n	801bd58 <TimerInsertTimer+0x30>
    {
        cur = next;
 801bd4c:	68bb      	ldr	r3, [r7, #8]
 801bd4e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801bd50:	68bb      	ldr	r3, [r7, #8]
 801bd52:	695b      	ldr	r3, [r3, #20]
 801bd54:	60bb      	str	r3, [r7, #8]
 801bd56:	e006      	b.n	801bd66 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801bd58:	68fb      	ldr	r3, [r7, #12]
 801bd5a:	687a      	ldr	r2, [r7, #4]
 801bd5c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	68ba      	ldr	r2, [r7, #8]
 801bd62:	615a      	str	r2, [r3, #20]
        return;
 801bd64:	e009      	b.n	801bd7a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801bd66:	68fb      	ldr	r3, [r7, #12]
 801bd68:	695b      	ldr	r3, [r3, #20]
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d1e8      	bne.n	801bd40 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801bd6e:	68fb      	ldr	r3, [r7, #12]
 801bd70:	687a      	ldr	r2, [r7, #4]
 801bd72:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	2200      	movs	r2, #0
 801bd78:	615a      	str	r2, [r3, #20]
}
 801bd7a:	3714      	adds	r7, #20
 801bd7c:	46bd      	mov	sp, r7
 801bd7e:	bc80      	pop	{r7}
 801bd80:	4770      	bx	lr
 801bd82:	bf00      	nop
 801bd84:	20001504 	.word	0x20001504

0801bd88 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801bd88:	b580      	push	{r7, lr}
 801bd8a:	b084      	sub	sp, #16
 801bd8c:	af00      	add	r7, sp, #0
 801bd8e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801bd90:	4b0b      	ldr	r3, [pc, #44]	@ (801bdc0 <TimerInsertNewHeadTimer+0x38>)
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801bd96:	68fb      	ldr	r3, [r7, #12]
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	d002      	beq.n	801bda2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801bd9c:	68fb      	ldr	r3, [r7, #12]
 801bd9e:	2200      	movs	r2, #0
 801bda0:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	68fa      	ldr	r2, [r7, #12]
 801bda6:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801bda8:	4a05      	ldr	r2, [pc, #20]	@ (801bdc0 <TimerInsertNewHeadTimer+0x38>)
 801bdaa:	687b      	ldr	r3, [r7, #4]
 801bdac:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801bdae:	4b04      	ldr	r3, [pc, #16]	@ (801bdc0 <TimerInsertNewHeadTimer+0x38>)
 801bdb0:	681b      	ldr	r3, [r3, #0]
 801bdb2:	4618      	mov	r0, r3
 801bdb4:	f7ff ff8e 	bl	801bcd4 <TimerSetTimeout>
}
 801bdb8:	bf00      	nop
 801bdba:	3710      	adds	r7, #16
 801bdbc:	46bd      	mov	sp, r7
 801bdbe:	bd80      	pop	{r7, pc}
 801bdc0:	20001504 	.word	0x20001504

0801bdc4 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801bdc4:	b580      	push	{r7, lr}
 801bdc6:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801bdc8:	2218      	movs	r2, #24
 801bdca:	2100      	movs	r1, #0
 801bdcc:	4807      	ldr	r0, [pc, #28]	@ (801bdec <UTIL_ADV_TRACE_Init+0x28>)
 801bdce:	f7fe fffc 	bl	801adca <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801bdd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801bdd6:	2100      	movs	r1, #0
 801bdd8:	4805      	ldr	r0, [pc, #20]	@ (801bdf0 <UTIL_ADV_TRACE_Init+0x2c>)
 801bdda:	f7fe fff6 	bl	801adca <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801bdde:	4b05      	ldr	r3, [pc, #20]	@ (801bdf4 <UTIL_ADV_TRACE_Init+0x30>)
 801bde0:	681b      	ldr	r3, [r3, #0]
 801bde2:	4805      	ldr	r0, [pc, #20]	@ (801bdf8 <UTIL_ADV_TRACE_Init+0x34>)
 801bde4:	4798      	blx	r3
 801bde6:	4603      	mov	r3, r0
}
 801bde8:	4618      	mov	r0, r3
 801bdea:	bd80      	pop	{r7, pc}
 801bdec:	20001508 	.word	0x20001508
 801bdf0:	20001520 	.word	0x20001520
 801bdf4:	0801d3e4 	.word	0x0801d3e4
 801bdf8:	0801c065 	.word	0x0801c065

0801bdfc <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801bdfc:	b480      	push	{r7}
 801bdfe:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801be00:	4b06      	ldr	r3, [pc, #24]	@ (801be1c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801be02:	8a5a      	ldrh	r2, [r3, #18]
 801be04:	4b05      	ldr	r3, [pc, #20]	@ (801be1c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801be06:	8a1b      	ldrh	r3, [r3, #16]
 801be08:	429a      	cmp	r2, r3
 801be0a:	d101      	bne.n	801be10 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801be0c:	2301      	movs	r3, #1
 801be0e:	e000      	b.n	801be12 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801be10:	2300      	movs	r3, #0
}
 801be12:	4618      	mov	r0, r3
 801be14:	46bd      	mov	sp, r7
 801be16:	bc80      	pop	{r7}
 801be18:	4770      	bx	lr
 801be1a:	bf00      	nop
 801be1c:	20001508 	.word	0x20001508

0801be20 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801be20:	b408      	push	{r3}
 801be22:	b580      	push	{r7, lr}
 801be24:	b08d      	sub	sp, #52	@ 0x34
 801be26:	af00      	add	r7, sp, #0
 801be28:	60f8      	str	r0, [r7, #12]
 801be2a:	60b9      	str	r1, [r7, #8]
 801be2c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801be2e:	2300      	movs	r3, #0
 801be30:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801be32:	2300      	movs	r3, #0
 801be34:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801be36:	4b37      	ldr	r3, [pc, #220]	@ (801bf14 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801be38:	7a1b      	ldrb	r3, [r3, #8]
 801be3a:	461a      	mov	r2, r3
 801be3c:	68fb      	ldr	r3, [r7, #12]
 801be3e:	4293      	cmp	r3, r2
 801be40:	d902      	bls.n	801be48 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801be42:	f06f 0304 	mvn.w	r3, #4
 801be46:	e05e      	b.n	801bf06 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801be48:	4b32      	ldr	r3, [pc, #200]	@ (801bf14 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801be4a:	68da      	ldr	r2, [r3, #12]
 801be4c:	68bb      	ldr	r3, [r7, #8]
 801be4e:	4013      	ands	r3, r2
 801be50:	68ba      	ldr	r2, [r7, #8]
 801be52:	429a      	cmp	r2, r3
 801be54:	d002      	beq.n	801be5c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801be56:	f06f 0305 	mvn.w	r3, #5
 801be5a:	e054      	b.n	801bf06 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801be5c:	4b2d      	ldr	r3, [pc, #180]	@ (801bf14 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801be5e:	685b      	ldr	r3, [r3, #4]
 801be60:	2b00      	cmp	r3, #0
 801be62:	d00a      	beq.n	801be7a <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	2b00      	cmp	r3, #0
 801be68:	d007      	beq.n	801be7a <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801be6a:	4b2a      	ldr	r3, [pc, #168]	@ (801bf14 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801be6c:	685b      	ldr	r3, [r3, #4]
 801be6e:	f107 0116 	add.w	r1, r7, #22
 801be72:	f107 0218 	add.w	r2, r7, #24
 801be76:	4610      	mov	r0, r2
 801be78:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801be7a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801be7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801be80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be82:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801be84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801be88:	4823      	ldr	r0, [pc, #140]	@ (801bf18 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801be8a:	f7ff fa2b 	bl	801b2e4 <tiny_vsnprintf_like>
 801be8e:	4603      	mov	r3, r0
 801be90:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801be92:	f000 f9f1 	bl	801c278 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801be96:	8afa      	ldrh	r2, [r7, #22]
 801be98:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801be9a:	4413      	add	r3, r2
 801be9c:	b29b      	uxth	r3, r3
 801be9e:	f107 0214 	add.w	r2, r7, #20
 801bea2:	4611      	mov	r1, r2
 801bea4:	4618      	mov	r0, r3
 801bea6:	f000 f969 	bl	801c17c <TRACE_AllocateBufer>
 801beaa:	4603      	mov	r3, r0
 801beac:	f1b3 3fff 	cmp.w	r3, #4294967295
 801beb0:	d025      	beq.n	801befe <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801beb2:	2300      	movs	r3, #0
 801beb4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801beb6:	e00e      	b.n	801bed6 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801beb8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801beba:	8aba      	ldrh	r2, [r7, #20]
 801bebc:	3330      	adds	r3, #48	@ 0x30
 801bebe:	443b      	add	r3, r7
 801bec0:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801bec4:	4b15      	ldr	r3, [pc, #84]	@ (801bf1c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801bec6:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801bec8:	8abb      	ldrh	r3, [r7, #20]
 801beca:	3301      	adds	r3, #1
 801becc:	b29b      	uxth	r3, r3
 801bece:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801bed0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801bed2:	3301      	adds	r3, #1
 801bed4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801bed6:	8afb      	ldrh	r3, [r7, #22]
 801bed8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801beda:	429a      	cmp	r2, r3
 801bedc:	d3ec      	bcc.n	801beb8 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801bede:	8abb      	ldrh	r3, [r7, #20]
 801bee0:	461a      	mov	r2, r3
 801bee2:	4b0e      	ldr	r3, [pc, #56]	@ (801bf1c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801bee4:	18d0      	adds	r0, r2, r3
 801bee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bee8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801beea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801beee:	f7ff f9f9 	bl	801b2e4 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801bef2:	f000 f9df 	bl	801c2b4 <TRACE_UnLock>

    return TRACE_Send();
 801bef6:	f000 f831 	bl	801bf5c <TRACE_Send>
 801befa:	4603      	mov	r3, r0
 801befc:	e003      	b.n	801bf06 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801befe:	f000 f9d9 	bl	801c2b4 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801bf02:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801bf06:	4618      	mov	r0, r3
 801bf08:	3734      	adds	r7, #52	@ 0x34
 801bf0a:	46bd      	mov	sp, r7
 801bf0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801bf10:	b001      	add	sp, #4
 801bf12:	4770      	bx	lr
 801bf14:	20001508 	.word	0x20001508
 801bf18:	20001920 	.word	0x20001920
 801bf1c:	20001520 	.word	0x20001520

0801bf20 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801bf20:	b480      	push	{r7}
 801bf22:	b083      	sub	sp, #12
 801bf24:	af00      	add	r7, sp, #0
 801bf26:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801bf28:	4a03      	ldr	r2, [pc, #12]	@ (801bf38 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	6053      	str	r3, [r2, #4]
}
 801bf2e:	bf00      	nop
 801bf30:	370c      	adds	r7, #12
 801bf32:	46bd      	mov	sp, r7
 801bf34:	bc80      	pop	{r7}
 801bf36:	4770      	bx	lr
 801bf38:	20001508 	.word	0x20001508

0801bf3c <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801bf3c:	b480      	push	{r7}
 801bf3e:	b083      	sub	sp, #12
 801bf40:	af00      	add	r7, sp, #0
 801bf42:	4603      	mov	r3, r0
 801bf44:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801bf46:	4a04      	ldr	r2, [pc, #16]	@ (801bf58 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801bf48:	79fb      	ldrb	r3, [r7, #7]
 801bf4a:	7213      	strb	r3, [r2, #8]
}
 801bf4c:	bf00      	nop
 801bf4e:	370c      	adds	r7, #12
 801bf50:	46bd      	mov	sp, r7
 801bf52:	bc80      	pop	{r7}
 801bf54:	4770      	bx	lr
 801bf56:	bf00      	nop
 801bf58:	20001508 	.word	0x20001508

0801bf5c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801bf5c:	b580      	push	{r7, lr}
 801bf5e:	b088      	sub	sp, #32
 801bf60:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801bf62:	2300      	movs	r3, #0
 801bf64:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801bf66:	2300      	movs	r3, #0
 801bf68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf6a:	f3ef 8310 	mrs	r3, PRIMASK
 801bf6e:	613b      	str	r3, [r7, #16]
  return(result);
 801bf70:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bf72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf74:	b672      	cpsid	i
}
 801bf76:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801bf78:	f000 f9ba 	bl	801c2f0 <TRACE_IsLocked>
 801bf7c:	4603      	mov	r3, r0
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	d15d      	bne.n	801c03e <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801bf82:	f000 f979 	bl	801c278 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801bf86:	4b34      	ldr	r3, [pc, #208]	@ (801c058 <TRACE_Send+0xfc>)
 801bf88:	8a1a      	ldrh	r2, [r3, #16]
 801bf8a:	4b33      	ldr	r3, [pc, #204]	@ (801c058 <TRACE_Send+0xfc>)
 801bf8c:	8a5b      	ldrh	r3, [r3, #18]
 801bf8e:	429a      	cmp	r2, r3
 801bf90:	d04d      	beq.n	801c02e <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801bf92:	4b31      	ldr	r3, [pc, #196]	@ (801c058 <TRACE_Send+0xfc>)
 801bf94:	789b      	ldrb	r3, [r3, #2]
 801bf96:	2b01      	cmp	r3, #1
 801bf98:	d117      	bne.n	801bfca <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801bf9a:	4b2f      	ldr	r3, [pc, #188]	@ (801c058 <TRACE_Send+0xfc>)
 801bf9c:	881a      	ldrh	r2, [r3, #0]
 801bf9e:	4b2e      	ldr	r3, [pc, #184]	@ (801c058 <TRACE_Send+0xfc>)
 801bfa0:	8a1b      	ldrh	r3, [r3, #16]
 801bfa2:	1ad3      	subs	r3, r2, r3
 801bfa4:	b29a      	uxth	r2, r3
 801bfa6:	4b2c      	ldr	r3, [pc, #176]	@ (801c058 <TRACE_Send+0xfc>)
 801bfa8:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801bfaa:	4b2b      	ldr	r3, [pc, #172]	@ (801c058 <TRACE_Send+0xfc>)
 801bfac:	2202      	movs	r2, #2
 801bfae:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801bfb0:	4b29      	ldr	r3, [pc, #164]	@ (801c058 <TRACE_Send+0xfc>)
 801bfb2:	2200      	movs	r2, #0
 801bfb4:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801bfb6:	4b28      	ldr	r3, [pc, #160]	@ (801c058 <TRACE_Send+0xfc>)
 801bfb8:	8a9b      	ldrh	r3, [r3, #20]
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d105      	bne.n	801bfca <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bfbe:	4b26      	ldr	r3, [pc, #152]	@ (801c058 <TRACE_Send+0xfc>)
 801bfc0:	2200      	movs	r2, #0
 801bfc2:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bfc4:	4b24      	ldr	r3, [pc, #144]	@ (801c058 <TRACE_Send+0xfc>)
 801bfc6:	2200      	movs	r2, #0
 801bfc8:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801bfca:	4b23      	ldr	r3, [pc, #140]	@ (801c058 <TRACE_Send+0xfc>)
 801bfcc:	789b      	ldrb	r3, [r3, #2]
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d115      	bne.n	801bffe <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bfd2:	4b21      	ldr	r3, [pc, #132]	@ (801c058 <TRACE_Send+0xfc>)
 801bfd4:	8a5a      	ldrh	r2, [r3, #18]
 801bfd6:	4b20      	ldr	r3, [pc, #128]	@ (801c058 <TRACE_Send+0xfc>)
 801bfd8:	8a1b      	ldrh	r3, [r3, #16]
 801bfda:	429a      	cmp	r2, r3
 801bfdc:	d908      	bls.n	801bff0 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801bfde:	4b1e      	ldr	r3, [pc, #120]	@ (801c058 <TRACE_Send+0xfc>)
 801bfe0:	8a5a      	ldrh	r2, [r3, #18]
 801bfe2:	4b1d      	ldr	r3, [pc, #116]	@ (801c058 <TRACE_Send+0xfc>)
 801bfe4:	8a1b      	ldrh	r3, [r3, #16]
 801bfe6:	1ad3      	subs	r3, r2, r3
 801bfe8:	b29a      	uxth	r2, r3
 801bfea:	4b1b      	ldr	r3, [pc, #108]	@ (801c058 <TRACE_Send+0xfc>)
 801bfec:	829a      	strh	r2, [r3, #20]
 801bfee:	e006      	b.n	801bffe <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801bff0:	4b19      	ldr	r3, [pc, #100]	@ (801c058 <TRACE_Send+0xfc>)
 801bff2:	8a1b      	ldrh	r3, [r3, #16]
 801bff4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bff8:	b29a      	uxth	r2, r3
 801bffa:	4b17      	ldr	r3, [pc, #92]	@ (801c058 <TRACE_Send+0xfc>)
 801bffc:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801bffe:	4b16      	ldr	r3, [pc, #88]	@ (801c058 <TRACE_Send+0xfc>)
 801c000:	8a1b      	ldrh	r3, [r3, #16]
 801c002:	461a      	mov	r2, r3
 801c004:	4b15      	ldr	r3, [pc, #84]	@ (801c05c <TRACE_Send+0x100>)
 801c006:	4413      	add	r3, r2
 801c008:	61bb      	str	r3, [r7, #24]
 801c00a:	697b      	ldr	r3, [r7, #20]
 801c00c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c00e:	68fb      	ldr	r3, [r7, #12]
 801c010:	f383 8810 	msr	PRIMASK, r3
}
 801c014:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801c016:	f7e5 fdb5 	bl	8001b84 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c01a:	4b11      	ldr	r3, [pc, #68]	@ (801c060 <TRACE_Send+0x104>)
 801c01c:	68db      	ldr	r3, [r3, #12]
 801c01e:	4a0e      	ldr	r2, [pc, #56]	@ (801c058 <TRACE_Send+0xfc>)
 801c020:	8a92      	ldrh	r2, [r2, #20]
 801c022:	4611      	mov	r1, r2
 801c024:	69b8      	ldr	r0, [r7, #24]
 801c026:	4798      	blx	r3
 801c028:	4603      	mov	r3, r0
 801c02a:	77fb      	strb	r3, [r7, #31]
 801c02c:	e00d      	b.n	801c04a <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801c02e:	f000 f941 	bl	801c2b4 <TRACE_UnLock>
 801c032:	697b      	ldr	r3, [r7, #20]
 801c034:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c036:	68bb      	ldr	r3, [r7, #8]
 801c038:	f383 8810 	msr	PRIMASK, r3
}
 801c03c:	e005      	b.n	801c04a <TRACE_Send+0xee>
 801c03e:	697b      	ldr	r3, [r7, #20]
 801c040:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	f383 8810 	msr	PRIMASK, r3
}
 801c048:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801c04a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c04e:	4618      	mov	r0, r3
 801c050:	3720      	adds	r7, #32
 801c052:	46bd      	mov	sp, r7
 801c054:	bd80      	pop	{r7, pc}
 801c056:	bf00      	nop
 801c058:	20001508 	.word	0x20001508
 801c05c:	20001520 	.word	0x20001520
 801c060:	0801d3e4 	.word	0x0801d3e4

0801c064 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801c064:	b580      	push	{r7, lr}
 801c066:	b088      	sub	sp, #32
 801c068:	af00      	add	r7, sp, #0
 801c06a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801c06c:	2300      	movs	r3, #0
 801c06e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c070:	f3ef 8310 	mrs	r3, PRIMASK
 801c074:	617b      	str	r3, [r7, #20]
  return(result);
 801c076:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c078:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c07a:	b672      	cpsid	i
}
 801c07c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801c07e:	4b3c      	ldr	r3, [pc, #240]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c080:	789b      	ldrb	r3, [r3, #2]
 801c082:	2b02      	cmp	r3, #2
 801c084:	d106      	bne.n	801c094 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c086:	4b3a      	ldr	r3, [pc, #232]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c088:	2200      	movs	r2, #0
 801c08a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c08c:	4b38      	ldr	r3, [pc, #224]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c08e:	2200      	movs	r2, #0
 801c090:	821a      	strh	r2, [r3, #16]
 801c092:	e00a      	b.n	801c0aa <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c094:	4b36      	ldr	r3, [pc, #216]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c096:	8a1a      	ldrh	r2, [r3, #16]
 801c098:	4b35      	ldr	r3, [pc, #212]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c09a:	8a9b      	ldrh	r3, [r3, #20]
 801c09c:	4413      	add	r3, r2
 801c09e:	b29b      	uxth	r3, r3
 801c0a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c0a4:	b29a      	uxth	r2, r3
 801c0a6:	4b32      	ldr	r3, [pc, #200]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c0a8:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801c0aa:	4b31      	ldr	r3, [pc, #196]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c0ac:	8a1a      	ldrh	r2, [r3, #16]
 801c0ae:	4b30      	ldr	r3, [pc, #192]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c0b0:	8a5b      	ldrh	r3, [r3, #18]
 801c0b2:	429a      	cmp	r2, r3
 801c0b4:	d04d      	beq.n	801c152 <TRACE_TxCpltCallback+0xee>
 801c0b6:	4b2e      	ldr	r3, [pc, #184]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c0b8:	8adb      	ldrh	r3, [r3, #22]
 801c0ba:	2b01      	cmp	r3, #1
 801c0bc:	d149      	bne.n	801c152 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c0be:	4b2c      	ldr	r3, [pc, #176]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c0c0:	789b      	ldrb	r3, [r3, #2]
 801c0c2:	2b01      	cmp	r3, #1
 801c0c4:	d117      	bne.n	801c0f6 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801c0c6:	4b2a      	ldr	r3, [pc, #168]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c0c8:	881a      	ldrh	r2, [r3, #0]
 801c0ca:	4b29      	ldr	r3, [pc, #164]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c0cc:	8a1b      	ldrh	r3, [r3, #16]
 801c0ce:	1ad3      	subs	r3, r2, r3
 801c0d0:	b29a      	uxth	r2, r3
 801c0d2:	4b27      	ldr	r3, [pc, #156]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c0d4:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c0d6:	4b26      	ldr	r3, [pc, #152]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c0d8:	2202      	movs	r2, #2
 801c0da:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c0dc:	4b24      	ldr	r3, [pc, #144]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c0de:	2200      	movs	r2, #0
 801c0e0:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c0e2:	4b23      	ldr	r3, [pc, #140]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c0e4:	8a9b      	ldrh	r3, [r3, #20]
 801c0e6:	2b00      	cmp	r3, #0
 801c0e8:	d105      	bne.n	801c0f6 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c0ea:	4b21      	ldr	r3, [pc, #132]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c0ec:	2200      	movs	r2, #0
 801c0ee:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c0f0:	4b1f      	ldr	r3, [pc, #124]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c0f2:	2200      	movs	r2, #0
 801c0f4:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c0f6:	4b1e      	ldr	r3, [pc, #120]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c0f8:	789b      	ldrb	r3, [r3, #2]
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d115      	bne.n	801c12a <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c0fe:	4b1c      	ldr	r3, [pc, #112]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c100:	8a5a      	ldrh	r2, [r3, #18]
 801c102:	4b1b      	ldr	r3, [pc, #108]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c104:	8a1b      	ldrh	r3, [r3, #16]
 801c106:	429a      	cmp	r2, r3
 801c108:	d908      	bls.n	801c11c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c10a:	4b19      	ldr	r3, [pc, #100]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c10c:	8a5a      	ldrh	r2, [r3, #18]
 801c10e:	4b18      	ldr	r3, [pc, #96]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c110:	8a1b      	ldrh	r3, [r3, #16]
 801c112:	1ad3      	subs	r3, r2, r3
 801c114:	b29a      	uxth	r2, r3
 801c116:	4b16      	ldr	r3, [pc, #88]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c118:	829a      	strh	r2, [r3, #20]
 801c11a:	e006      	b.n	801c12a <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c11c:	4b14      	ldr	r3, [pc, #80]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c11e:	8a1b      	ldrh	r3, [r3, #16]
 801c120:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c124:	b29a      	uxth	r2, r3
 801c126:	4b12      	ldr	r3, [pc, #72]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c128:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c12a:	4b11      	ldr	r3, [pc, #68]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c12c:	8a1b      	ldrh	r3, [r3, #16]
 801c12e:	461a      	mov	r2, r3
 801c130:	4b10      	ldr	r3, [pc, #64]	@ (801c174 <TRACE_TxCpltCallback+0x110>)
 801c132:	4413      	add	r3, r2
 801c134:	61fb      	str	r3, [r7, #28]
 801c136:	69bb      	ldr	r3, [r7, #24]
 801c138:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c13a:	693b      	ldr	r3, [r7, #16]
 801c13c:	f383 8810 	msr	PRIMASK, r3
}
 801c140:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c142:	4b0d      	ldr	r3, [pc, #52]	@ (801c178 <TRACE_TxCpltCallback+0x114>)
 801c144:	68db      	ldr	r3, [r3, #12]
 801c146:	4a0a      	ldr	r2, [pc, #40]	@ (801c170 <TRACE_TxCpltCallback+0x10c>)
 801c148:	8a92      	ldrh	r2, [r2, #20]
 801c14a:	4611      	mov	r1, r2
 801c14c:	69f8      	ldr	r0, [r7, #28]
 801c14e:	4798      	blx	r3
 801c150:	e00a      	b.n	801c168 <TRACE_TxCpltCallback+0x104>
 801c152:	69bb      	ldr	r3, [r7, #24]
 801c154:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c156:	68fb      	ldr	r3, [r7, #12]
 801c158:	f383 8810 	msr	PRIMASK, r3
}
 801c15c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801c15e:	f7e5 fd19 	bl	8001b94 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801c162:	f000 f8a7 	bl	801c2b4 <TRACE_UnLock>
  }
}
 801c166:	bf00      	nop
 801c168:	bf00      	nop
 801c16a:	3720      	adds	r7, #32
 801c16c:	46bd      	mov	sp, r7
 801c16e:	bd80      	pop	{r7, pc}
 801c170:	20001508 	.word	0x20001508
 801c174:	20001520 	.word	0x20001520
 801c178:	0801d3e4 	.word	0x0801d3e4

0801c17c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801c17c:	b480      	push	{r7}
 801c17e:	b087      	sub	sp, #28
 801c180:	af00      	add	r7, sp, #0
 801c182:	4603      	mov	r3, r0
 801c184:	6039      	str	r1, [r7, #0]
 801c186:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801c188:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c18c:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c18e:	f3ef 8310 	mrs	r3, PRIMASK
 801c192:	60fb      	str	r3, [r7, #12]
  return(result);
 801c194:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c196:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c198:	b672      	cpsid	i
}
 801c19a:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c19c:	4b35      	ldr	r3, [pc, #212]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c19e:	8a5a      	ldrh	r2, [r3, #18]
 801c1a0:	4b34      	ldr	r3, [pc, #208]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c1a2:	8a1b      	ldrh	r3, [r3, #16]
 801c1a4:	429a      	cmp	r2, r3
 801c1a6:	d11b      	bne.n	801c1e0 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c1a8:	4b32      	ldr	r3, [pc, #200]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c1aa:	8a5b      	ldrh	r3, [r3, #18]
 801c1ac:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c1b0:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801c1b2:	88fa      	ldrh	r2, [r7, #6]
 801c1b4:	8afb      	ldrh	r3, [r7, #22]
 801c1b6:	429a      	cmp	r2, r3
 801c1b8:	d33a      	bcc.n	801c230 <TRACE_AllocateBufer+0xb4>
 801c1ba:	4b2e      	ldr	r3, [pc, #184]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c1bc:	8a1b      	ldrh	r3, [r3, #16]
 801c1be:	88fa      	ldrh	r2, [r7, #6]
 801c1c0:	429a      	cmp	r2, r3
 801c1c2:	d235      	bcs.n	801c230 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c1c4:	4b2b      	ldr	r3, [pc, #172]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c1c6:	2201      	movs	r2, #1
 801c1c8:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c1ca:	4b2a      	ldr	r3, [pc, #168]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c1cc:	8a5a      	ldrh	r2, [r3, #18]
 801c1ce:	4b29      	ldr	r3, [pc, #164]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c1d0:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c1d2:	4b28      	ldr	r3, [pc, #160]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c1d4:	8a1b      	ldrh	r3, [r3, #16]
 801c1d6:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c1d8:	4b26      	ldr	r3, [pc, #152]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c1da:	2200      	movs	r2, #0
 801c1dc:	825a      	strh	r2, [r3, #18]
 801c1de:	e027      	b.n	801c230 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c1e0:	4b24      	ldr	r3, [pc, #144]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c1e2:	8a5a      	ldrh	r2, [r3, #18]
 801c1e4:	4b23      	ldr	r3, [pc, #140]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c1e6:	8a1b      	ldrh	r3, [r3, #16]
 801c1e8:	429a      	cmp	r2, r3
 801c1ea:	d91b      	bls.n	801c224 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c1ec:	4b21      	ldr	r3, [pc, #132]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c1ee:	8a5b      	ldrh	r3, [r3, #18]
 801c1f0:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c1f4:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c1f6:	88fa      	ldrh	r2, [r7, #6]
 801c1f8:	8afb      	ldrh	r3, [r7, #22]
 801c1fa:	429a      	cmp	r2, r3
 801c1fc:	d318      	bcc.n	801c230 <TRACE_AllocateBufer+0xb4>
 801c1fe:	4b1d      	ldr	r3, [pc, #116]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c200:	8a1b      	ldrh	r3, [r3, #16]
 801c202:	88fa      	ldrh	r2, [r7, #6]
 801c204:	429a      	cmp	r2, r3
 801c206:	d213      	bcs.n	801c230 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c208:	4b1a      	ldr	r3, [pc, #104]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c20a:	2201      	movs	r2, #1
 801c20c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c20e:	4b19      	ldr	r3, [pc, #100]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c210:	8a5a      	ldrh	r2, [r3, #18]
 801c212:	4b18      	ldr	r3, [pc, #96]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c214:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c216:	4b17      	ldr	r3, [pc, #92]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c218:	8a1b      	ldrh	r3, [r3, #16]
 801c21a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c21c:	4b15      	ldr	r3, [pc, #84]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c21e:	2200      	movs	r2, #0
 801c220:	825a      	strh	r2, [r3, #18]
 801c222:	e005      	b.n	801c230 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801c224:	4b13      	ldr	r3, [pc, #76]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c226:	8a1a      	ldrh	r2, [r3, #16]
 801c228:	4b12      	ldr	r3, [pc, #72]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c22a:	8a5b      	ldrh	r3, [r3, #18]
 801c22c:	1ad3      	subs	r3, r2, r3
 801c22e:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801c230:	8afa      	ldrh	r2, [r7, #22]
 801c232:	88fb      	ldrh	r3, [r7, #6]
 801c234:	429a      	cmp	r2, r3
 801c236:	d90f      	bls.n	801c258 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801c238:	4b0e      	ldr	r3, [pc, #56]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c23a:	8a5a      	ldrh	r2, [r3, #18]
 801c23c:	683b      	ldr	r3, [r7, #0]
 801c23e:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c240:	4b0c      	ldr	r3, [pc, #48]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c242:	8a5a      	ldrh	r2, [r3, #18]
 801c244:	88fb      	ldrh	r3, [r7, #6]
 801c246:	4413      	add	r3, r2
 801c248:	b29b      	uxth	r3, r3
 801c24a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c24e:	b29a      	uxth	r2, r3
 801c250:	4b08      	ldr	r3, [pc, #32]	@ (801c274 <TRACE_AllocateBufer+0xf8>)
 801c252:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801c254:	2300      	movs	r3, #0
 801c256:	82bb      	strh	r3, [r7, #20]
 801c258:	693b      	ldr	r3, [r7, #16]
 801c25a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c25c:	68bb      	ldr	r3, [r7, #8]
 801c25e:	f383 8810 	msr	PRIMASK, r3
}
 801c262:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801c264:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801c268:	4618      	mov	r0, r3
 801c26a:	371c      	adds	r7, #28
 801c26c:	46bd      	mov	sp, r7
 801c26e:	bc80      	pop	{r7}
 801c270:	4770      	bx	lr
 801c272:	bf00      	nop
 801c274:	20001508 	.word	0x20001508

0801c278 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801c278:	b480      	push	{r7}
 801c27a:	b085      	sub	sp, #20
 801c27c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c27e:	f3ef 8310 	mrs	r3, PRIMASK
 801c282:	607b      	str	r3, [r7, #4]
  return(result);
 801c284:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c286:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c288:	b672      	cpsid	i
}
 801c28a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801c28c:	4b08      	ldr	r3, [pc, #32]	@ (801c2b0 <TRACE_Lock+0x38>)
 801c28e:	8adb      	ldrh	r3, [r3, #22]
 801c290:	3301      	adds	r3, #1
 801c292:	b29a      	uxth	r2, r3
 801c294:	4b06      	ldr	r3, [pc, #24]	@ (801c2b0 <TRACE_Lock+0x38>)
 801c296:	82da      	strh	r2, [r3, #22]
 801c298:	68fb      	ldr	r3, [r7, #12]
 801c29a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c29c:	68bb      	ldr	r3, [r7, #8]
 801c29e:	f383 8810 	msr	PRIMASK, r3
}
 801c2a2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c2a4:	bf00      	nop
 801c2a6:	3714      	adds	r7, #20
 801c2a8:	46bd      	mov	sp, r7
 801c2aa:	bc80      	pop	{r7}
 801c2ac:	4770      	bx	lr
 801c2ae:	bf00      	nop
 801c2b0:	20001508 	.word	0x20001508

0801c2b4 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801c2b4:	b480      	push	{r7}
 801c2b6:	b085      	sub	sp, #20
 801c2b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2ba:	f3ef 8310 	mrs	r3, PRIMASK
 801c2be:	607b      	str	r3, [r7, #4]
  return(result);
 801c2c0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c2c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c2c4:	b672      	cpsid	i
}
 801c2c6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801c2c8:	4b08      	ldr	r3, [pc, #32]	@ (801c2ec <TRACE_UnLock+0x38>)
 801c2ca:	8adb      	ldrh	r3, [r3, #22]
 801c2cc:	3b01      	subs	r3, #1
 801c2ce:	b29a      	uxth	r2, r3
 801c2d0:	4b06      	ldr	r3, [pc, #24]	@ (801c2ec <TRACE_UnLock+0x38>)
 801c2d2:	82da      	strh	r2, [r3, #22]
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2d8:	68bb      	ldr	r3, [r7, #8]
 801c2da:	f383 8810 	msr	PRIMASK, r3
}
 801c2de:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c2e0:	bf00      	nop
 801c2e2:	3714      	adds	r7, #20
 801c2e4:	46bd      	mov	sp, r7
 801c2e6:	bc80      	pop	{r7}
 801c2e8:	4770      	bx	lr
 801c2ea:	bf00      	nop
 801c2ec:	20001508 	.word	0x20001508

0801c2f0 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801c2f0:	b480      	push	{r7}
 801c2f2:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c2f4:	4b05      	ldr	r3, [pc, #20]	@ (801c30c <TRACE_IsLocked+0x1c>)
 801c2f6:	8adb      	ldrh	r3, [r3, #22]
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	bf14      	ite	ne
 801c2fc:	2301      	movne	r3, #1
 801c2fe:	2300      	moveq	r3, #0
 801c300:	b2db      	uxtb	r3, r3
}
 801c302:	4618      	mov	r0, r3
 801c304:	46bd      	mov	sp, r7
 801c306:	bc80      	pop	{r7}
 801c308:	4770      	bx	lr
 801c30a:	bf00      	nop
 801c30c:	20001508 	.word	0x20001508

0801c310 <floor>:
 801c310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c314:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801c318:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801c31c:	2e13      	cmp	r6, #19
 801c31e:	4602      	mov	r2, r0
 801c320:	460b      	mov	r3, r1
 801c322:	460c      	mov	r4, r1
 801c324:	4605      	mov	r5, r0
 801c326:	4680      	mov	r8, r0
 801c328:	dc35      	bgt.n	801c396 <floor+0x86>
 801c32a:	2e00      	cmp	r6, #0
 801c32c:	da17      	bge.n	801c35e <floor+0x4e>
 801c32e:	a334      	add	r3, pc, #208	@ (adr r3, 801c400 <floor+0xf0>)
 801c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c334:	f7e3 ff2e 	bl	8000194 <__adddf3>
 801c338:	2200      	movs	r2, #0
 801c33a:	2300      	movs	r3, #0
 801c33c:	f7e4 f95e 	bl	80005fc <__aeabi_dcmpgt>
 801c340:	b150      	cbz	r0, 801c358 <floor+0x48>
 801c342:	2c00      	cmp	r4, #0
 801c344:	da57      	bge.n	801c3f6 <floor+0xe6>
 801c346:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801c34a:	432c      	orrs	r4, r5
 801c34c:	2500      	movs	r5, #0
 801c34e:	42ac      	cmp	r4, r5
 801c350:	4c2d      	ldr	r4, [pc, #180]	@ (801c408 <floor+0xf8>)
 801c352:	bf08      	it	eq
 801c354:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801c358:	4623      	mov	r3, r4
 801c35a:	462a      	mov	r2, r5
 801c35c:	e024      	b.n	801c3a8 <floor+0x98>
 801c35e:	4f2b      	ldr	r7, [pc, #172]	@ (801c40c <floor+0xfc>)
 801c360:	4137      	asrs	r7, r6
 801c362:	ea01 0c07 	and.w	ip, r1, r7
 801c366:	ea5c 0c00 	orrs.w	ip, ip, r0
 801c36a:	d01d      	beq.n	801c3a8 <floor+0x98>
 801c36c:	a324      	add	r3, pc, #144	@ (adr r3, 801c400 <floor+0xf0>)
 801c36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c372:	f7e3 ff0f 	bl	8000194 <__adddf3>
 801c376:	2200      	movs	r2, #0
 801c378:	2300      	movs	r3, #0
 801c37a:	f7e4 f93f 	bl	80005fc <__aeabi_dcmpgt>
 801c37e:	2800      	cmp	r0, #0
 801c380:	d0ea      	beq.n	801c358 <floor+0x48>
 801c382:	2c00      	cmp	r4, #0
 801c384:	bfbe      	ittt	lt
 801c386:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801c38a:	4133      	asrlt	r3, r6
 801c38c:	18e4      	addlt	r4, r4, r3
 801c38e:	ea24 0407 	bic.w	r4, r4, r7
 801c392:	2500      	movs	r5, #0
 801c394:	e7e0      	b.n	801c358 <floor+0x48>
 801c396:	2e33      	cmp	r6, #51	@ 0x33
 801c398:	dd0a      	ble.n	801c3b0 <floor+0xa0>
 801c39a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801c39e:	d103      	bne.n	801c3a8 <floor+0x98>
 801c3a0:	f7e3 fef8 	bl	8000194 <__adddf3>
 801c3a4:	4602      	mov	r2, r0
 801c3a6:	460b      	mov	r3, r1
 801c3a8:	4610      	mov	r0, r2
 801c3aa:	4619      	mov	r1, r3
 801c3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c3b0:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801c3b4:	f04f 3cff 	mov.w	ip, #4294967295
 801c3b8:	fa2c f707 	lsr.w	r7, ip, r7
 801c3bc:	4207      	tst	r7, r0
 801c3be:	d0f3      	beq.n	801c3a8 <floor+0x98>
 801c3c0:	a30f      	add	r3, pc, #60	@ (adr r3, 801c400 <floor+0xf0>)
 801c3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3c6:	f7e3 fee5 	bl	8000194 <__adddf3>
 801c3ca:	2200      	movs	r2, #0
 801c3cc:	2300      	movs	r3, #0
 801c3ce:	f7e4 f915 	bl	80005fc <__aeabi_dcmpgt>
 801c3d2:	2800      	cmp	r0, #0
 801c3d4:	d0c0      	beq.n	801c358 <floor+0x48>
 801c3d6:	2c00      	cmp	r4, #0
 801c3d8:	da0a      	bge.n	801c3f0 <floor+0xe0>
 801c3da:	2e14      	cmp	r6, #20
 801c3dc:	d101      	bne.n	801c3e2 <floor+0xd2>
 801c3de:	3401      	adds	r4, #1
 801c3e0:	e006      	b.n	801c3f0 <floor+0xe0>
 801c3e2:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801c3e6:	2301      	movs	r3, #1
 801c3e8:	40b3      	lsls	r3, r6
 801c3ea:	441d      	add	r5, r3
 801c3ec:	4545      	cmp	r5, r8
 801c3ee:	d3f6      	bcc.n	801c3de <floor+0xce>
 801c3f0:	ea25 0507 	bic.w	r5, r5, r7
 801c3f4:	e7b0      	b.n	801c358 <floor+0x48>
 801c3f6:	2500      	movs	r5, #0
 801c3f8:	462c      	mov	r4, r5
 801c3fa:	e7ad      	b.n	801c358 <floor+0x48>
 801c3fc:	f3af 8000 	nop.w
 801c400:	8800759c 	.word	0x8800759c
 801c404:	7e37e43c 	.word	0x7e37e43c
 801c408:	bff00000 	.word	0xbff00000
 801c40c:	000fffff 	.word	0x000fffff

0801c410 <std>:
 801c410:	2300      	movs	r3, #0
 801c412:	b510      	push	{r4, lr}
 801c414:	4604      	mov	r4, r0
 801c416:	e9c0 3300 	strd	r3, r3, [r0]
 801c41a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c41e:	6083      	str	r3, [r0, #8]
 801c420:	8181      	strh	r1, [r0, #12]
 801c422:	6643      	str	r3, [r0, #100]	@ 0x64
 801c424:	81c2      	strh	r2, [r0, #14]
 801c426:	6183      	str	r3, [r0, #24]
 801c428:	4619      	mov	r1, r3
 801c42a:	2208      	movs	r2, #8
 801c42c:	305c      	adds	r0, #92	@ 0x5c
 801c42e:	f000 f9e7 	bl	801c800 <memset>
 801c432:	4b0d      	ldr	r3, [pc, #52]	@ (801c468 <std+0x58>)
 801c434:	6263      	str	r3, [r4, #36]	@ 0x24
 801c436:	4b0d      	ldr	r3, [pc, #52]	@ (801c46c <std+0x5c>)
 801c438:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c43a:	4b0d      	ldr	r3, [pc, #52]	@ (801c470 <std+0x60>)
 801c43c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c43e:	4b0d      	ldr	r3, [pc, #52]	@ (801c474 <std+0x64>)
 801c440:	6323      	str	r3, [r4, #48]	@ 0x30
 801c442:	4b0d      	ldr	r3, [pc, #52]	@ (801c478 <std+0x68>)
 801c444:	6224      	str	r4, [r4, #32]
 801c446:	429c      	cmp	r4, r3
 801c448:	d006      	beq.n	801c458 <std+0x48>
 801c44a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c44e:	4294      	cmp	r4, r2
 801c450:	d002      	beq.n	801c458 <std+0x48>
 801c452:	33d0      	adds	r3, #208	@ 0xd0
 801c454:	429c      	cmp	r4, r3
 801c456:	d105      	bne.n	801c464 <std+0x54>
 801c458:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c460:	f000 ba46 	b.w	801c8f0 <__retarget_lock_init_recursive>
 801c464:	bd10      	pop	{r4, pc}
 801c466:	bf00      	nop
 801c468:	0801c651 	.word	0x0801c651
 801c46c:	0801c673 	.word	0x0801c673
 801c470:	0801c6ab 	.word	0x0801c6ab
 801c474:	0801c6cf 	.word	0x0801c6cf
 801c478:	20001b20 	.word	0x20001b20

0801c47c <stdio_exit_handler>:
 801c47c:	4a02      	ldr	r2, [pc, #8]	@ (801c488 <stdio_exit_handler+0xc>)
 801c47e:	4903      	ldr	r1, [pc, #12]	@ (801c48c <stdio_exit_handler+0x10>)
 801c480:	4803      	ldr	r0, [pc, #12]	@ (801c490 <stdio_exit_handler+0x14>)
 801c482:	f000 b869 	b.w	801c558 <_fwalk_sglue>
 801c486:	bf00      	nop
 801c488:	20000138 	.word	0x20000138
 801c48c:	0801cbe9 	.word	0x0801cbe9
 801c490:	20000148 	.word	0x20000148

0801c494 <cleanup_stdio>:
 801c494:	6841      	ldr	r1, [r0, #4]
 801c496:	4b0c      	ldr	r3, [pc, #48]	@ (801c4c8 <cleanup_stdio+0x34>)
 801c498:	4299      	cmp	r1, r3
 801c49a:	b510      	push	{r4, lr}
 801c49c:	4604      	mov	r4, r0
 801c49e:	d001      	beq.n	801c4a4 <cleanup_stdio+0x10>
 801c4a0:	f000 fba2 	bl	801cbe8 <_fflush_r>
 801c4a4:	68a1      	ldr	r1, [r4, #8]
 801c4a6:	4b09      	ldr	r3, [pc, #36]	@ (801c4cc <cleanup_stdio+0x38>)
 801c4a8:	4299      	cmp	r1, r3
 801c4aa:	d002      	beq.n	801c4b2 <cleanup_stdio+0x1e>
 801c4ac:	4620      	mov	r0, r4
 801c4ae:	f000 fb9b 	bl	801cbe8 <_fflush_r>
 801c4b2:	68e1      	ldr	r1, [r4, #12]
 801c4b4:	4b06      	ldr	r3, [pc, #24]	@ (801c4d0 <cleanup_stdio+0x3c>)
 801c4b6:	4299      	cmp	r1, r3
 801c4b8:	d004      	beq.n	801c4c4 <cleanup_stdio+0x30>
 801c4ba:	4620      	mov	r0, r4
 801c4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4c0:	f000 bb92 	b.w	801cbe8 <_fflush_r>
 801c4c4:	bd10      	pop	{r4, pc}
 801c4c6:	bf00      	nop
 801c4c8:	20001b20 	.word	0x20001b20
 801c4cc:	20001b88 	.word	0x20001b88
 801c4d0:	20001bf0 	.word	0x20001bf0

0801c4d4 <global_stdio_init.part.0>:
 801c4d4:	b510      	push	{r4, lr}
 801c4d6:	4b0b      	ldr	r3, [pc, #44]	@ (801c504 <global_stdio_init.part.0+0x30>)
 801c4d8:	4c0b      	ldr	r4, [pc, #44]	@ (801c508 <global_stdio_init.part.0+0x34>)
 801c4da:	4a0c      	ldr	r2, [pc, #48]	@ (801c50c <global_stdio_init.part.0+0x38>)
 801c4dc:	601a      	str	r2, [r3, #0]
 801c4de:	4620      	mov	r0, r4
 801c4e0:	2200      	movs	r2, #0
 801c4e2:	2104      	movs	r1, #4
 801c4e4:	f7ff ff94 	bl	801c410 <std>
 801c4e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c4ec:	2201      	movs	r2, #1
 801c4ee:	2109      	movs	r1, #9
 801c4f0:	f7ff ff8e 	bl	801c410 <std>
 801c4f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c4f8:	2202      	movs	r2, #2
 801c4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4fe:	2112      	movs	r1, #18
 801c500:	f7ff bf86 	b.w	801c410 <std>
 801c504:	20001c58 	.word	0x20001c58
 801c508:	20001b20 	.word	0x20001b20
 801c50c:	0801c47d 	.word	0x0801c47d

0801c510 <__sfp_lock_acquire>:
 801c510:	4801      	ldr	r0, [pc, #4]	@ (801c518 <__sfp_lock_acquire+0x8>)
 801c512:	f000 b9ee 	b.w	801c8f2 <__retarget_lock_acquire_recursive>
 801c516:	bf00      	nop
 801c518:	20001c61 	.word	0x20001c61

0801c51c <__sfp_lock_release>:
 801c51c:	4801      	ldr	r0, [pc, #4]	@ (801c524 <__sfp_lock_release+0x8>)
 801c51e:	f000 b9e9 	b.w	801c8f4 <__retarget_lock_release_recursive>
 801c522:	bf00      	nop
 801c524:	20001c61 	.word	0x20001c61

0801c528 <__sinit>:
 801c528:	b510      	push	{r4, lr}
 801c52a:	4604      	mov	r4, r0
 801c52c:	f7ff fff0 	bl	801c510 <__sfp_lock_acquire>
 801c530:	6a23      	ldr	r3, [r4, #32]
 801c532:	b11b      	cbz	r3, 801c53c <__sinit+0x14>
 801c534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c538:	f7ff bff0 	b.w	801c51c <__sfp_lock_release>
 801c53c:	4b04      	ldr	r3, [pc, #16]	@ (801c550 <__sinit+0x28>)
 801c53e:	6223      	str	r3, [r4, #32]
 801c540:	4b04      	ldr	r3, [pc, #16]	@ (801c554 <__sinit+0x2c>)
 801c542:	681b      	ldr	r3, [r3, #0]
 801c544:	2b00      	cmp	r3, #0
 801c546:	d1f5      	bne.n	801c534 <__sinit+0xc>
 801c548:	f7ff ffc4 	bl	801c4d4 <global_stdio_init.part.0>
 801c54c:	e7f2      	b.n	801c534 <__sinit+0xc>
 801c54e:	bf00      	nop
 801c550:	0801c495 	.word	0x0801c495
 801c554:	20001c58 	.word	0x20001c58

0801c558 <_fwalk_sglue>:
 801c558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c55c:	4607      	mov	r7, r0
 801c55e:	4688      	mov	r8, r1
 801c560:	4614      	mov	r4, r2
 801c562:	2600      	movs	r6, #0
 801c564:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c568:	f1b9 0901 	subs.w	r9, r9, #1
 801c56c:	d505      	bpl.n	801c57a <_fwalk_sglue+0x22>
 801c56e:	6824      	ldr	r4, [r4, #0]
 801c570:	2c00      	cmp	r4, #0
 801c572:	d1f7      	bne.n	801c564 <_fwalk_sglue+0xc>
 801c574:	4630      	mov	r0, r6
 801c576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c57a:	89ab      	ldrh	r3, [r5, #12]
 801c57c:	2b01      	cmp	r3, #1
 801c57e:	d907      	bls.n	801c590 <_fwalk_sglue+0x38>
 801c580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c584:	3301      	adds	r3, #1
 801c586:	d003      	beq.n	801c590 <_fwalk_sglue+0x38>
 801c588:	4629      	mov	r1, r5
 801c58a:	4638      	mov	r0, r7
 801c58c:	47c0      	blx	r8
 801c58e:	4306      	orrs	r6, r0
 801c590:	3568      	adds	r5, #104	@ 0x68
 801c592:	e7e9      	b.n	801c568 <_fwalk_sglue+0x10>

0801c594 <_puts_r>:
 801c594:	6a03      	ldr	r3, [r0, #32]
 801c596:	b570      	push	{r4, r5, r6, lr}
 801c598:	6884      	ldr	r4, [r0, #8]
 801c59a:	4605      	mov	r5, r0
 801c59c:	460e      	mov	r6, r1
 801c59e:	b90b      	cbnz	r3, 801c5a4 <_puts_r+0x10>
 801c5a0:	f7ff ffc2 	bl	801c528 <__sinit>
 801c5a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c5a6:	07db      	lsls	r3, r3, #31
 801c5a8:	d405      	bmi.n	801c5b6 <_puts_r+0x22>
 801c5aa:	89a3      	ldrh	r3, [r4, #12]
 801c5ac:	0598      	lsls	r0, r3, #22
 801c5ae:	d402      	bmi.n	801c5b6 <_puts_r+0x22>
 801c5b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c5b2:	f000 f99e 	bl	801c8f2 <__retarget_lock_acquire_recursive>
 801c5b6:	89a3      	ldrh	r3, [r4, #12]
 801c5b8:	0719      	lsls	r1, r3, #28
 801c5ba:	d502      	bpl.n	801c5c2 <_puts_r+0x2e>
 801c5bc:	6923      	ldr	r3, [r4, #16]
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	d135      	bne.n	801c62e <_puts_r+0x9a>
 801c5c2:	4621      	mov	r1, r4
 801c5c4:	4628      	mov	r0, r5
 801c5c6:	f000 f8c5 	bl	801c754 <__swsetup_r>
 801c5ca:	b380      	cbz	r0, 801c62e <_puts_r+0x9a>
 801c5cc:	f04f 35ff 	mov.w	r5, #4294967295
 801c5d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c5d2:	07da      	lsls	r2, r3, #31
 801c5d4:	d405      	bmi.n	801c5e2 <_puts_r+0x4e>
 801c5d6:	89a3      	ldrh	r3, [r4, #12]
 801c5d8:	059b      	lsls	r3, r3, #22
 801c5da:	d402      	bmi.n	801c5e2 <_puts_r+0x4e>
 801c5dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c5de:	f000 f989 	bl	801c8f4 <__retarget_lock_release_recursive>
 801c5e2:	4628      	mov	r0, r5
 801c5e4:	bd70      	pop	{r4, r5, r6, pc}
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	da04      	bge.n	801c5f4 <_puts_r+0x60>
 801c5ea:	69a2      	ldr	r2, [r4, #24]
 801c5ec:	429a      	cmp	r2, r3
 801c5ee:	dc17      	bgt.n	801c620 <_puts_r+0x8c>
 801c5f0:	290a      	cmp	r1, #10
 801c5f2:	d015      	beq.n	801c620 <_puts_r+0x8c>
 801c5f4:	6823      	ldr	r3, [r4, #0]
 801c5f6:	1c5a      	adds	r2, r3, #1
 801c5f8:	6022      	str	r2, [r4, #0]
 801c5fa:	7019      	strb	r1, [r3, #0]
 801c5fc:	68a3      	ldr	r3, [r4, #8]
 801c5fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c602:	3b01      	subs	r3, #1
 801c604:	60a3      	str	r3, [r4, #8]
 801c606:	2900      	cmp	r1, #0
 801c608:	d1ed      	bne.n	801c5e6 <_puts_r+0x52>
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	da11      	bge.n	801c632 <_puts_r+0x9e>
 801c60e:	4622      	mov	r2, r4
 801c610:	210a      	movs	r1, #10
 801c612:	4628      	mov	r0, r5
 801c614:	f000 f85f 	bl	801c6d6 <__swbuf_r>
 801c618:	3001      	adds	r0, #1
 801c61a:	d0d7      	beq.n	801c5cc <_puts_r+0x38>
 801c61c:	250a      	movs	r5, #10
 801c61e:	e7d7      	b.n	801c5d0 <_puts_r+0x3c>
 801c620:	4622      	mov	r2, r4
 801c622:	4628      	mov	r0, r5
 801c624:	f000 f857 	bl	801c6d6 <__swbuf_r>
 801c628:	3001      	adds	r0, #1
 801c62a:	d1e7      	bne.n	801c5fc <_puts_r+0x68>
 801c62c:	e7ce      	b.n	801c5cc <_puts_r+0x38>
 801c62e:	3e01      	subs	r6, #1
 801c630:	e7e4      	b.n	801c5fc <_puts_r+0x68>
 801c632:	6823      	ldr	r3, [r4, #0]
 801c634:	1c5a      	adds	r2, r3, #1
 801c636:	6022      	str	r2, [r4, #0]
 801c638:	220a      	movs	r2, #10
 801c63a:	701a      	strb	r2, [r3, #0]
 801c63c:	e7ee      	b.n	801c61c <_puts_r+0x88>
	...

0801c640 <puts>:
 801c640:	4b02      	ldr	r3, [pc, #8]	@ (801c64c <puts+0xc>)
 801c642:	4601      	mov	r1, r0
 801c644:	6818      	ldr	r0, [r3, #0]
 801c646:	f7ff bfa5 	b.w	801c594 <_puts_r>
 801c64a:	bf00      	nop
 801c64c:	20000144 	.word	0x20000144

0801c650 <__sread>:
 801c650:	b510      	push	{r4, lr}
 801c652:	460c      	mov	r4, r1
 801c654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c658:	f000 f8fc 	bl	801c854 <_read_r>
 801c65c:	2800      	cmp	r0, #0
 801c65e:	bfab      	itete	ge
 801c660:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c662:	89a3      	ldrhlt	r3, [r4, #12]
 801c664:	181b      	addge	r3, r3, r0
 801c666:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c66a:	bfac      	ite	ge
 801c66c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c66e:	81a3      	strhlt	r3, [r4, #12]
 801c670:	bd10      	pop	{r4, pc}

0801c672 <__swrite>:
 801c672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c676:	461f      	mov	r7, r3
 801c678:	898b      	ldrh	r3, [r1, #12]
 801c67a:	05db      	lsls	r3, r3, #23
 801c67c:	4605      	mov	r5, r0
 801c67e:	460c      	mov	r4, r1
 801c680:	4616      	mov	r6, r2
 801c682:	d505      	bpl.n	801c690 <__swrite+0x1e>
 801c684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c688:	2302      	movs	r3, #2
 801c68a:	2200      	movs	r2, #0
 801c68c:	f000 f8d0 	bl	801c830 <_lseek_r>
 801c690:	89a3      	ldrh	r3, [r4, #12]
 801c692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c696:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c69a:	81a3      	strh	r3, [r4, #12]
 801c69c:	4632      	mov	r2, r6
 801c69e:	463b      	mov	r3, r7
 801c6a0:	4628      	mov	r0, r5
 801c6a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c6a6:	f000 b8e7 	b.w	801c878 <_write_r>

0801c6aa <__sseek>:
 801c6aa:	b510      	push	{r4, lr}
 801c6ac:	460c      	mov	r4, r1
 801c6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c6b2:	f000 f8bd 	bl	801c830 <_lseek_r>
 801c6b6:	1c43      	adds	r3, r0, #1
 801c6b8:	89a3      	ldrh	r3, [r4, #12]
 801c6ba:	bf15      	itete	ne
 801c6bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c6be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c6c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c6c6:	81a3      	strheq	r3, [r4, #12]
 801c6c8:	bf18      	it	ne
 801c6ca:	81a3      	strhne	r3, [r4, #12]
 801c6cc:	bd10      	pop	{r4, pc}

0801c6ce <__sclose>:
 801c6ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c6d2:	f000 b89d 	b.w	801c810 <_close_r>

0801c6d6 <__swbuf_r>:
 801c6d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6d8:	460e      	mov	r6, r1
 801c6da:	4614      	mov	r4, r2
 801c6dc:	4605      	mov	r5, r0
 801c6de:	b118      	cbz	r0, 801c6e8 <__swbuf_r+0x12>
 801c6e0:	6a03      	ldr	r3, [r0, #32]
 801c6e2:	b90b      	cbnz	r3, 801c6e8 <__swbuf_r+0x12>
 801c6e4:	f7ff ff20 	bl	801c528 <__sinit>
 801c6e8:	69a3      	ldr	r3, [r4, #24]
 801c6ea:	60a3      	str	r3, [r4, #8]
 801c6ec:	89a3      	ldrh	r3, [r4, #12]
 801c6ee:	071a      	lsls	r2, r3, #28
 801c6f0:	d501      	bpl.n	801c6f6 <__swbuf_r+0x20>
 801c6f2:	6923      	ldr	r3, [r4, #16]
 801c6f4:	b943      	cbnz	r3, 801c708 <__swbuf_r+0x32>
 801c6f6:	4621      	mov	r1, r4
 801c6f8:	4628      	mov	r0, r5
 801c6fa:	f000 f82b 	bl	801c754 <__swsetup_r>
 801c6fe:	b118      	cbz	r0, 801c708 <__swbuf_r+0x32>
 801c700:	f04f 37ff 	mov.w	r7, #4294967295
 801c704:	4638      	mov	r0, r7
 801c706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c708:	6823      	ldr	r3, [r4, #0]
 801c70a:	6922      	ldr	r2, [r4, #16]
 801c70c:	1a98      	subs	r0, r3, r2
 801c70e:	6963      	ldr	r3, [r4, #20]
 801c710:	b2f6      	uxtb	r6, r6
 801c712:	4283      	cmp	r3, r0
 801c714:	4637      	mov	r7, r6
 801c716:	dc05      	bgt.n	801c724 <__swbuf_r+0x4e>
 801c718:	4621      	mov	r1, r4
 801c71a:	4628      	mov	r0, r5
 801c71c:	f000 fa64 	bl	801cbe8 <_fflush_r>
 801c720:	2800      	cmp	r0, #0
 801c722:	d1ed      	bne.n	801c700 <__swbuf_r+0x2a>
 801c724:	68a3      	ldr	r3, [r4, #8]
 801c726:	3b01      	subs	r3, #1
 801c728:	60a3      	str	r3, [r4, #8]
 801c72a:	6823      	ldr	r3, [r4, #0]
 801c72c:	1c5a      	adds	r2, r3, #1
 801c72e:	6022      	str	r2, [r4, #0]
 801c730:	701e      	strb	r6, [r3, #0]
 801c732:	6962      	ldr	r2, [r4, #20]
 801c734:	1c43      	adds	r3, r0, #1
 801c736:	429a      	cmp	r2, r3
 801c738:	d004      	beq.n	801c744 <__swbuf_r+0x6e>
 801c73a:	89a3      	ldrh	r3, [r4, #12]
 801c73c:	07db      	lsls	r3, r3, #31
 801c73e:	d5e1      	bpl.n	801c704 <__swbuf_r+0x2e>
 801c740:	2e0a      	cmp	r6, #10
 801c742:	d1df      	bne.n	801c704 <__swbuf_r+0x2e>
 801c744:	4621      	mov	r1, r4
 801c746:	4628      	mov	r0, r5
 801c748:	f000 fa4e 	bl	801cbe8 <_fflush_r>
 801c74c:	2800      	cmp	r0, #0
 801c74e:	d0d9      	beq.n	801c704 <__swbuf_r+0x2e>
 801c750:	e7d6      	b.n	801c700 <__swbuf_r+0x2a>
	...

0801c754 <__swsetup_r>:
 801c754:	b538      	push	{r3, r4, r5, lr}
 801c756:	4b29      	ldr	r3, [pc, #164]	@ (801c7fc <__swsetup_r+0xa8>)
 801c758:	4605      	mov	r5, r0
 801c75a:	6818      	ldr	r0, [r3, #0]
 801c75c:	460c      	mov	r4, r1
 801c75e:	b118      	cbz	r0, 801c768 <__swsetup_r+0x14>
 801c760:	6a03      	ldr	r3, [r0, #32]
 801c762:	b90b      	cbnz	r3, 801c768 <__swsetup_r+0x14>
 801c764:	f7ff fee0 	bl	801c528 <__sinit>
 801c768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c76c:	0719      	lsls	r1, r3, #28
 801c76e:	d422      	bmi.n	801c7b6 <__swsetup_r+0x62>
 801c770:	06da      	lsls	r2, r3, #27
 801c772:	d407      	bmi.n	801c784 <__swsetup_r+0x30>
 801c774:	2209      	movs	r2, #9
 801c776:	602a      	str	r2, [r5, #0]
 801c778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c77c:	81a3      	strh	r3, [r4, #12]
 801c77e:	f04f 30ff 	mov.w	r0, #4294967295
 801c782:	e033      	b.n	801c7ec <__swsetup_r+0x98>
 801c784:	0758      	lsls	r0, r3, #29
 801c786:	d512      	bpl.n	801c7ae <__swsetup_r+0x5a>
 801c788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c78a:	b141      	cbz	r1, 801c79e <__swsetup_r+0x4a>
 801c78c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c790:	4299      	cmp	r1, r3
 801c792:	d002      	beq.n	801c79a <__swsetup_r+0x46>
 801c794:	4628      	mov	r0, r5
 801c796:	f000 f8af 	bl	801c8f8 <_free_r>
 801c79a:	2300      	movs	r3, #0
 801c79c:	6363      	str	r3, [r4, #52]	@ 0x34
 801c79e:	89a3      	ldrh	r3, [r4, #12]
 801c7a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c7a4:	81a3      	strh	r3, [r4, #12]
 801c7a6:	2300      	movs	r3, #0
 801c7a8:	6063      	str	r3, [r4, #4]
 801c7aa:	6923      	ldr	r3, [r4, #16]
 801c7ac:	6023      	str	r3, [r4, #0]
 801c7ae:	89a3      	ldrh	r3, [r4, #12]
 801c7b0:	f043 0308 	orr.w	r3, r3, #8
 801c7b4:	81a3      	strh	r3, [r4, #12]
 801c7b6:	6923      	ldr	r3, [r4, #16]
 801c7b8:	b94b      	cbnz	r3, 801c7ce <__swsetup_r+0x7a>
 801c7ba:	89a3      	ldrh	r3, [r4, #12]
 801c7bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c7c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c7c4:	d003      	beq.n	801c7ce <__swsetup_r+0x7a>
 801c7c6:	4621      	mov	r1, r4
 801c7c8:	4628      	mov	r0, r5
 801c7ca:	f000 fa5b 	bl	801cc84 <__smakebuf_r>
 801c7ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c7d2:	f013 0201 	ands.w	r2, r3, #1
 801c7d6:	d00a      	beq.n	801c7ee <__swsetup_r+0x9a>
 801c7d8:	2200      	movs	r2, #0
 801c7da:	60a2      	str	r2, [r4, #8]
 801c7dc:	6962      	ldr	r2, [r4, #20]
 801c7de:	4252      	negs	r2, r2
 801c7e0:	61a2      	str	r2, [r4, #24]
 801c7e2:	6922      	ldr	r2, [r4, #16]
 801c7e4:	b942      	cbnz	r2, 801c7f8 <__swsetup_r+0xa4>
 801c7e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c7ea:	d1c5      	bne.n	801c778 <__swsetup_r+0x24>
 801c7ec:	bd38      	pop	{r3, r4, r5, pc}
 801c7ee:	0799      	lsls	r1, r3, #30
 801c7f0:	bf58      	it	pl
 801c7f2:	6962      	ldrpl	r2, [r4, #20]
 801c7f4:	60a2      	str	r2, [r4, #8]
 801c7f6:	e7f4      	b.n	801c7e2 <__swsetup_r+0x8e>
 801c7f8:	2000      	movs	r0, #0
 801c7fa:	e7f7      	b.n	801c7ec <__swsetup_r+0x98>
 801c7fc:	20000144 	.word	0x20000144

0801c800 <memset>:
 801c800:	4402      	add	r2, r0
 801c802:	4603      	mov	r3, r0
 801c804:	4293      	cmp	r3, r2
 801c806:	d100      	bne.n	801c80a <memset+0xa>
 801c808:	4770      	bx	lr
 801c80a:	f803 1b01 	strb.w	r1, [r3], #1
 801c80e:	e7f9      	b.n	801c804 <memset+0x4>

0801c810 <_close_r>:
 801c810:	b538      	push	{r3, r4, r5, lr}
 801c812:	4d06      	ldr	r5, [pc, #24]	@ (801c82c <_close_r+0x1c>)
 801c814:	2300      	movs	r3, #0
 801c816:	4604      	mov	r4, r0
 801c818:	4608      	mov	r0, r1
 801c81a:	602b      	str	r3, [r5, #0]
 801c81c:	f7e5 fa78 	bl	8001d10 <_close>
 801c820:	1c43      	adds	r3, r0, #1
 801c822:	d102      	bne.n	801c82a <_close_r+0x1a>
 801c824:	682b      	ldr	r3, [r5, #0]
 801c826:	b103      	cbz	r3, 801c82a <_close_r+0x1a>
 801c828:	6023      	str	r3, [r4, #0]
 801c82a:	bd38      	pop	{r3, r4, r5, pc}
 801c82c:	20001c5c 	.word	0x20001c5c

0801c830 <_lseek_r>:
 801c830:	b538      	push	{r3, r4, r5, lr}
 801c832:	4d07      	ldr	r5, [pc, #28]	@ (801c850 <_lseek_r+0x20>)
 801c834:	4604      	mov	r4, r0
 801c836:	4608      	mov	r0, r1
 801c838:	4611      	mov	r1, r2
 801c83a:	2200      	movs	r2, #0
 801c83c:	602a      	str	r2, [r5, #0]
 801c83e:	461a      	mov	r2, r3
 801c840:	f7e5 fa8a 	bl	8001d58 <_lseek>
 801c844:	1c43      	adds	r3, r0, #1
 801c846:	d102      	bne.n	801c84e <_lseek_r+0x1e>
 801c848:	682b      	ldr	r3, [r5, #0]
 801c84a:	b103      	cbz	r3, 801c84e <_lseek_r+0x1e>
 801c84c:	6023      	str	r3, [r4, #0]
 801c84e:	bd38      	pop	{r3, r4, r5, pc}
 801c850:	20001c5c 	.word	0x20001c5c

0801c854 <_read_r>:
 801c854:	b538      	push	{r3, r4, r5, lr}
 801c856:	4d07      	ldr	r5, [pc, #28]	@ (801c874 <_read_r+0x20>)
 801c858:	4604      	mov	r4, r0
 801c85a:	4608      	mov	r0, r1
 801c85c:	4611      	mov	r1, r2
 801c85e:	2200      	movs	r2, #0
 801c860:	602a      	str	r2, [r5, #0]
 801c862:	461a      	mov	r2, r3
 801c864:	f7e5 fa1b 	bl	8001c9e <_read>
 801c868:	1c43      	adds	r3, r0, #1
 801c86a:	d102      	bne.n	801c872 <_read_r+0x1e>
 801c86c:	682b      	ldr	r3, [r5, #0]
 801c86e:	b103      	cbz	r3, 801c872 <_read_r+0x1e>
 801c870:	6023      	str	r3, [r4, #0]
 801c872:	bd38      	pop	{r3, r4, r5, pc}
 801c874:	20001c5c 	.word	0x20001c5c

0801c878 <_write_r>:
 801c878:	b538      	push	{r3, r4, r5, lr}
 801c87a:	4d07      	ldr	r5, [pc, #28]	@ (801c898 <_write_r+0x20>)
 801c87c:	4604      	mov	r4, r0
 801c87e:	4608      	mov	r0, r1
 801c880:	4611      	mov	r1, r2
 801c882:	2200      	movs	r2, #0
 801c884:	602a      	str	r2, [r5, #0]
 801c886:	461a      	mov	r2, r3
 801c888:	f7e5 fa26 	bl	8001cd8 <_write>
 801c88c:	1c43      	adds	r3, r0, #1
 801c88e:	d102      	bne.n	801c896 <_write_r+0x1e>
 801c890:	682b      	ldr	r3, [r5, #0]
 801c892:	b103      	cbz	r3, 801c896 <_write_r+0x1e>
 801c894:	6023      	str	r3, [r4, #0]
 801c896:	bd38      	pop	{r3, r4, r5, pc}
 801c898:	20001c5c 	.word	0x20001c5c

0801c89c <__errno>:
 801c89c:	4b01      	ldr	r3, [pc, #4]	@ (801c8a4 <__errno+0x8>)
 801c89e:	6818      	ldr	r0, [r3, #0]
 801c8a0:	4770      	bx	lr
 801c8a2:	bf00      	nop
 801c8a4:	20000144 	.word	0x20000144

0801c8a8 <__libc_init_array>:
 801c8a8:	b570      	push	{r4, r5, r6, lr}
 801c8aa:	4d0d      	ldr	r5, [pc, #52]	@ (801c8e0 <__libc_init_array+0x38>)
 801c8ac:	4c0d      	ldr	r4, [pc, #52]	@ (801c8e4 <__libc_init_array+0x3c>)
 801c8ae:	1b64      	subs	r4, r4, r5
 801c8b0:	10a4      	asrs	r4, r4, #2
 801c8b2:	2600      	movs	r6, #0
 801c8b4:	42a6      	cmp	r6, r4
 801c8b6:	d109      	bne.n	801c8cc <__libc_init_array+0x24>
 801c8b8:	4d0b      	ldr	r5, [pc, #44]	@ (801c8e8 <__libc_init_array+0x40>)
 801c8ba:	4c0c      	ldr	r4, [pc, #48]	@ (801c8ec <__libc_init_array+0x44>)
 801c8bc:	f000 fa50 	bl	801cd60 <_init>
 801c8c0:	1b64      	subs	r4, r4, r5
 801c8c2:	10a4      	asrs	r4, r4, #2
 801c8c4:	2600      	movs	r6, #0
 801c8c6:	42a6      	cmp	r6, r4
 801c8c8:	d105      	bne.n	801c8d6 <__libc_init_array+0x2e>
 801c8ca:	bd70      	pop	{r4, r5, r6, pc}
 801c8cc:	f855 3b04 	ldr.w	r3, [r5], #4
 801c8d0:	4798      	blx	r3
 801c8d2:	3601      	adds	r6, #1
 801c8d4:	e7ee      	b.n	801c8b4 <__libc_init_array+0xc>
 801c8d6:	f855 3b04 	ldr.w	r3, [r5], #4
 801c8da:	4798      	blx	r3
 801c8dc:	3601      	adds	r6, #1
 801c8de:	e7f2      	b.n	801c8c6 <__libc_init_array+0x1e>
 801c8e0:	0801da9c 	.word	0x0801da9c
 801c8e4:	0801da9c 	.word	0x0801da9c
 801c8e8:	0801da9c 	.word	0x0801da9c
 801c8ec:	0801daa0 	.word	0x0801daa0

0801c8f0 <__retarget_lock_init_recursive>:
 801c8f0:	4770      	bx	lr

0801c8f2 <__retarget_lock_acquire_recursive>:
 801c8f2:	4770      	bx	lr

0801c8f4 <__retarget_lock_release_recursive>:
 801c8f4:	4770      	bx	lr
	...

0801c8f8 <_free_r>:
 801c8f8:	b538      	push	{r3, r4, r5, lr}
 801c8fa:	4605      	mov	r5, r0
 801c8fc:	2900      	cmp	r1, #0
 801c8fe:	d041      	beq.n	801c984 <_free_r+0x8c>
 801c900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c904:	1f0c      	subs	r4, r1, #4
 801c906:	2b00      	cmp	r3, #0
 801c908:	bfb8      	it	lt
 801c90a:	18e4      	addlt	r4, r4, r3
 801c90c:	f000 f8e0 	bl	801cad0 <__malloc_lock>
 801c910:	4a1d      	ldr	r2, [pc, #116]	@ (801c988 <_free_r+0x90>)
 801c912:	6813      	ldr	r3, [r2, #0]
 801c914:	b933      	cbnz	r3, 801c924 <_free_r+0x2c>
 801c916:	6063      	str	r3, [r4, #4]
 801c918:	6014      	str	r4, [r2, #0]
 801c91a:	4628      	mov	r0, r5
 801c91c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c920:	f000 b8dc 	b.w	801cadc <__malloc_unlock>
 801c924:	42a3      	cmp	r3, r4
 801c926:	d908      	bls.n	801c93a <_free_r+0x42>
 801c928:	6820      	ldr	r0, [r4, #0]
 801c92a:	1821      	adds	r1, r4, r0
 801c92c:	428b      	cmp	r3, r1
 801c92e:	bf01      	itttt	eq
 801c930:	6819      	ldreq	r1, [r3, #0]
 801c932:	685b      	ldreq	r3, [r3, #4]
 801c934:	1809      	addeq	r1, r1, r0
 801c936:	6021      	streq	r1, [r4, #0]
 801c938:	e7ed      	b.n	801c916 <_free_r+0x1e>
 801c93a:	461a      	mov	r2, r3
 801c93c:	685b      	ldr	r3, [r3, #4]
 801c93e:	b10b      	cbz	r3, 801c944 <_free_r+0x4c>
 801c940:	42a3      	cmp	r3, r4
 801c942:	d9fa      	bls.n	801c93a <_free_r+0x42>
 801c944:	6811      	ldr	r1, [r2, #0]
 801c946:	1850      	adds	r0, r2, r1
 801c948:	42a0      	cmp	r0, r4
 801c94a:	d10b      	bne.n	801c964 <_free_r+0x6c>
 801c94c:	6820      	ldr	r0, [r4, #0]
 801c94e:	4401      	add	r1, r0
 801c950:	1850      	adds	r0, r2, r1
 801c952:	4283      	cmp	r3, r0
 801c954:	6011      	str	r1, [r2, #0]
 801c956:	d1e0      	bne.n	801c91a <_free_r+0x22>
 801c958:	6818      	ldr	r0, [r3, #0]
 801c95a:	685b      	ldr	r3, [r3, #4]
 801c95c:	6053      	str	r3, [r2, #4]
 801c95e:	4408      	add	r0, r1
 801c960:	6010      	str	r0, [r2, #0]
 801c962:	e7da      	b.n	801c91a <_free_r+0x22>
 801c964:	d902      	bls.n	801c96c <_free_r+0x74>
 801c966:	230c      	movs	r3, #12
 801c968:	602b      	str	r3, [r5, #0]
 801c96a:	e7d6      	b.n	801c91a <_free_r+0x22>
 801c96c:	6820      	ldr	r0, [r4, #0]
 801c96e:	1821      	adds	r1, r4, r0
 801c970:	428b      	cmp	r3, r1
 801c972:	bf04      	itt	eq
 801c974:	6819      	ldreq	r1, [r3, #0]
 801c976:	685b      	ldreq	r3, [r3, #4]
 801c978:	6063      	str	r3, [r4, #4]
 801c97a:	bf04      	itt	eq
 801c97c:	1809      	addeq	r1, r1, r0
 801c97e:	6021      	streq	r1, [r4, #0]
 801c980:	6054      	str	r4, [r2, #4]
 801c982:	e7ca      	b.n	801c91a <_free_r+0x22>
 801c984:	bd38      	pop	{r3, r4, r5, pc}
 801c986:	bf00      	nop
 801c988:	20001c68 	.word	0x20001c68

0801c98c <sbrk_aligned>:
 801c98c:	b570      	push	{r4, r5, r6, lr}
 801c98e:	4e0f      	ldr	r6, [pc, #60]	@ (801c9cc <sbrk_aligned+0x40>)
 801c990:	460c      	mov	r4, r1
 801c992:	6831      	ldr	r1, [r6, #0]
 801c994:	4605      	mov	r5, r0
 801c996:	b911      	cbnz	r1, 801c99e <sbrk_aligned+0x12>
 801c998:	f000 f9d2 	bl	801cd40 <_sbrk_r>
 801c99c:	6030      	str	r0, [r6, #0]
 801c99e:	4621      	mov	r1, r4
 801c9a0:	4628      	mov	r0, r5
 801c9a2:	f000 f9cd 	bl	801cd40 <_sbrk_r>
 801c9a6:	1c43      	adds	r3, r0, #1
 801c9a8:	d103      	bne.n	801c9b2 <sbrk_aligned+0x26>
 801c9aa:	f04f 34ff 	mov.w	r4, #4294967295
 801c9ae:	4620      	mov	r0, r4
 801c9b0:	bd70      	pop	{r4, r5, r6, pc}
 801c9b2:	1cc4      	adds	r4, r0, #3
 801c9b4:	f024 0403 	bic.w	r4, r4, #3
 801c9b8:	42a0      	cmp	r0, r4
 801c9ba:	d0f8      	beq.n	801c9ae <sbrk_aligned+0x22>
 801c9bc:	1a21      	subs	r1, r4, r0
 801c9be:	4628      	mov	r0, r5
 801c9c0:	f000 f9be 	bl	801cd40 <_sbrk_r>
 801c9c4:	3001      	adds	r0, #1
 801c9c6:	d1f2      	bne.n	801c9ae <sbrk_aligned+0x22>
 801c9c8:	e7ef      	b.n	801c9aa <sbrk_aligned+0x1e>
 801c9ca:	bf00      	nop
 801c9cc:	20001c64 	.word	0x20001c64

0801c9d0 <_malloc_r>:
 801c9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c9d4:	1ccd      	adds	r5, r1, #3
 801c9d6:	f025 0503 	bic.w	r5, r5, #3
 801c9da:	3508      	adds	r5, #8
 801c9dc:	2d0c      	cmp	r5, #12
 801c9de:	bf38      	it	cc
 801c9e0:	250c      	movcc	r5, #12
 801c9e2:	2d00      	cmp	r5, #0
 801c9e4:	4606      	mov	r6, r0
 801c9e6:	db01      	blt.n	801c9ec <_malloc_r+0x1c>
 801c9e8:	42a9      	cmp	r1, r5
 801c9ea:	d904      	bls.n	801c9f6 <_malloc_r+0x26>
 801c9ec:	230c      	movs	r3, #12
 801c9ee:	6033      	str	r3, [r6, #0]
 801c9f0:	2000      	movs	r0, #0
 801c9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c9f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801cacc <_malloc_r+0xfc>
 801c9fa:	f000 f869 	bl	801cad0 <__malloc_lock>
 801c9fe:	f8d8 3000 	ldr.w	r3, [r8]
 801ca02:	461c      	mov	r4, r3
 801ca04:	bb44      	cbnz	r4, 801ca58 <_malloc_r+0x88>
 801ca06:	4629      	mov	r1, r5
 801ca08:	4630      	mov	r0, r6
 801ca0a:	f7ff ffbf 	bl	801c98c <sbrk_aligned>
 801ca0e:	1c43      	adds	r3, r0, #1
 801ca10:	4604      	mov	r4, r0
 801ca12:	d158      	bne.n	801cac6 <_malloc_r+0xf6>
 801ca14:	f8d8 4000 	ldr.w	r4, [r8]
 801ca18:	4627      	mov	r7, r4
 801ca1a:	2f00      	cmp	r7, #0
 801ca1c:	d143      	bne.n	801caa6 <_malloc_r+0xd6>
 801ca1e:	2c00      	cmp	r4, #0
 801ca20:	d04b      	beq.n	801caba <_malloc_r+0xea>
 801ca22:	6823      	ldr	r3, [r4, #0]
 801ca24:	4639      	mov	r1, r7
 801ca26:	4630      	mov	r0, r6
 801ca28:	eb04 0903 	add.w	r9, r4, r3
 801ca2c:	f000 f988 	bl	801cd40 <_sbrk_r>
 801ca30:	4581      	cmp	r9, r0
 801ca32:	d142      	bne.n	801caba <_malloc_r+0xea>
 801ca34:	6821      	ldr	r1, [r4, #0]
 801ca36:	1a6d      	subs	r5, r5, r1
 801ca38:	4629      	mov	r1, r5
 801ca3a:	4630      	mov	r0, r6
 801ca3c:	f7ff ffa6 	bl	801c98c <sbrk_aligned>
 801ca40:	3001      	adds	r0, #1
 801ca42:	d03a      	beq.n	801caba <_malloc_r+0xea>
 801ca44:	6823      	ldr	r3, [r4, #0]
 801ca46:	442b      	add	r3, r5
 801ca48:	6023      	str	r3, [r4, #0]
 801ca4a:	f8d8 3000 	ldr.w	r3, [r8]
 801ca4e:	685a      	ldr	r2, [r3, #4]
 801ca50:	bb62      	cbnz	r2, 801caac <_malloc_r+0xdc>
 801ca52:	f8c8 7000 	str.w	r7, [r8]
 801ca56:	e00f      	b.n	801ca78 <_malloc_r+0xa8>
 801ca58:	6822      	ldr	r2, [r4, #0]
 801ca5a:	1b52      	subs	r2, r2, r5
 801ca5c:	d420      	bmi.n	801caa0 <_malloc_r+0xd0>
 801ca5e:	2a0b      	cmp	r2, #11
 801ca60:	d917      	bls.n	801ca92 <_malloc_r+0xc2>
 801ca62:	1961      	adds	r1, r4, r5
 801ca64:	42a3      	cmp	r3, r4
 801ca66:	6025      	str	r5, [r4, #0]
 801ca68:	bf18      	it	ne
 801ca6a:	6059      	strne	r1, [r3, #4]
 801ca6c:	6863      	ldr	r3, [r4, #4]
 801ca6e:	bf08      	it	eq
 801ca70:	f8c8 1000 	streq.w	r1, [r8]
 801ca74:	5162      	str	r2, [r4, r5]
 801ca76:	604b      	str	r3, [r1, #4]
 801ca78:	4630      	mov	r0, r6
 801ca7a:	f000 f82f 	bl	801cadc <__malloc_unlock>
 801ca7e:	f104 000b 	add.w	r0, r4, #11
 801ca82:	1d23      	adds	r3, r4, #4
 801ca84:	f020 0007 	bic.w	r0, r0, #7
 801ca88:	1ac2      	subs	r2, r0, r3
 801ca8a:	bf1c      	itt	ne
 801ca8c:	1a1b      	subne	r3, r3, r0
 801ca8e:	50a3      	strne	r3, [r4, r2]
 801ca90:	e7af      	b.n	801c9f2 <_malloc_r+0x22>
 801ca92:	6862      	ldr	r2, [r4, #4]
 801ca94:	42a3      	cmp	r3, r4
 801ca96:	bf0c      	ite	eq
 801ca98:	f8c8 2000 	streq.w	r2, [r8]
 801ca9c:	605a      	strne	r2, [r3, #4]
 801ca9e:	e7eb      	b.n	801ca78 <_malloc_r+0xa8>
 801caa0:	4623      	mov	r3, r4
 801caa2:	6864      	ldr	r4, [r4, #4]
 801caa4:	e7ae      	b.n	801ca04 <_malloc_r+0x34>
 801caa6:	463c      	mov	r4, r7
 801caa8:	687f      	ldr	r7, [r7, #4]
 801caaa:	e7b6      	b.n	801ca1a <_malloc_r+0x4a>
 801caac:	461a      	mov	r2, r3
 801caae:	685b      	ldr	r3, [r3, #4]
 801cab0:	42a3      	cmp	r3, r4
 801cab2:	d1fb      	bne.n	801caac <_malloc_r+0xdc>
 801cab4:	2300      	movs	r3, #0
 801cab6:	6053      	str	r3, [r2, #4]
 801cab8:	e7de      	b.n	801ca78 <_malloc_r+0xa8>
 801caba:	230c      	movs	r3, #12
 801cabc:	6033      	str	r3, [r6, #0]
 801cabe:	4630      	mov	r0, r6
 801cac0:	f000 f80c 	bl	801cadc <__malloc_unlock>
 801cac4:	e794      	b.n	801c9f0 <_malloc_r+0x20>
 801cac6:	6005      	str	r5, [r0, #0]
 801cac8:	e7d6      	b.n	801ca78 <_malloc_r+0xa8>
 801caca:	bf00      	nop
 801cacc:	20001c68 	.word	0x20001c68

0801cad0 <__malloc_lock>:
 801cad0:	4801      	ldr	r0, [pc, #4]	@ (801cad8 <__malloc_lock+0x8>)
 801cad2:	f7ff bf0e 	b.w	801c8f2 <__retarget_lock_acquire_recursive>
 801cad6:	bf00      	nop
 801cad8:	20001c60 	.word	0x20001c60

0801cadc <__malloc_unlock>:
 801cadc:	4801      	ldr	r0, [pc, #4]	@ (801cae4 <__malloc_unlock+0x8>)
 801cade:	f7ff bf09 	b.w	801c8f4 <__retarget_lock_release_recursive>
 801cae2:	bf00      	nop
 801cae4:	20001c60 	.word	0x20001c60

0801cae8 <__sflush_r>:
 801cae8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801caec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801caee:	0716      	lsls	r6, r2, #28
 801caf0:	4605      	mov	r5, r0
 801caf2:	460c      	mov	r4, r1
 801caf4:	d454      	bmi.n	801cba0 <__sflush_r+0xb8>
 801caf6:	684b      	ldr	r3, [r1, #4]
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	dc02      	bgt.n	801cb02 <__sflush_r+0x1a>
 801cafc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	dd48      	ble.n	801cb94 <__sflush_r+0xac>
 801cb02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cb04:	2e00      	cmp	r6, #0
 801cb06:	d045      	beq.n	801cb94 <__sflush_r+0xac>
 801cb08:	2300      	movs	r3, #0
 801cb0a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801cb0e:	682f      	ldr	r7, [r5, #0]
 801cb10:	6a21      	ldr	r1, [r4, #32]
 801cb12:	602b      	str	r3, [r5, #0]
 801cb14:	d030      	beq.n	801cb78 <__sflush_r+0x90>
 801cb16:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801cb18:	89a3      	ldrh	r3, [r4, #12]
 801cb1a:	0759      	lsls	r1, r3, #29
 801cb1c:	d505      	bpl.n	801cb2a <__sflush_r+0x42>
 801cb1e:	6863      	ldr	r3, [r4, #4]
 801cb20:	1ad2      	subs	r2, r2, r3
 801cb22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cb24:	b10b      	cbz	r3, 801cb2a <__sflush_r+0x42>
 801cb26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cb28:	1ad2      	subs	r2, r2, r3
 801cb2a:	2300      	movs	r3, #0
 801cb2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cb2e:	6a21      	ldr	r1, [r4, #32]
 801cb30:	4628      	mov	r0, r5
 801cb32:	47b0      	blx	r6
 801cb34:	1c43      	adds	r3, r0, #1
 801cb36:	89a3      	ldrh	r3, [r4, #12]
 801cb38:	d106      	bne.n	801cb48 <__sflush_r+0x60>
 801cb3a:	6829      	ldr	r1, [r5, #0]
 801cb3c:	291d      	cmp	r1, #29
 801cb3e:	d82b      	bhi.n	801cb98 <__sflush_r+0xb0>
 801cb40:	4a28      	ldr	r2, [pc, #160]	@ (801cbe4 <__sflush_r+0xfc>)
 801cb42:	410a      	asrs	r2, r1
 801cb44:	07d6      	lsls	r6, r2, #31
 801cb46:	d427      	bmi.n	801cb98 <__sflush_r+0xb0>
 801cb48:	2200      	movs	r2, #0
 801cb4a:	6062      	str	r2, [r4, #4]
 801cb4c:	04d9      	lsls	r1, r3, #19
 801cb4e:	6922      	ldr	r2, [r4, #16]
 801cb50:	6022      	str	r2, [r4, #0]
 801cb52:	d504      	bpl.n	801cb5e <__sflush_r+0x76>
 801cb54:	1c42      	adds	r2, r0, #1
 801cb56:	d101      	bne.n	801cb5c <__sflush_r+0x74>
 801cb58:	682b      	ldr	r3, [r5, #0]
 801cb5a:	b903      	cbnz	r3, 801cb5e <__sflush_r+0x76>
 801cb5c:	6560      	str	r0, [r4, #84]	@ 0x54
 801cb5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cb60:	602f      	str	r7, [r5, #0]
 801cb62:	b1b9      	cbz	r1, 801cb94 <__sflush_r+0xac>
 801cb64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cb68:	4299      	cmp	r1, r3
 801cb6a:	d002      	beq.n	801cb72 <__sflush_r+0x8a>
 801cb6c:	4628      	mov	r0, r5
 801cb6e:	f7ff fec3 	bl	801c8f8 <_free_r>
 801cb72:	2300      	movs	r3, #0
 801cb74:	6363      	str	r3, [r4, #52]	@ 0x34
 801cb76:	e00d      	b.n	801cb94 <__sflush_r+0xac>
 801cb78:	2301      	movs	r3, #1
 801cb7a:	4628      	mov	r0, r5
 801cb7c:	47b0      	blx	r6
 801cb7e:	4602      	mov	r2, r0
 801cb80:	1c50      	adds	r0, r2, #1
 801cb82:	d1c9      	bne.n	801cb18 <__sflush_r+0x30>
 801cb84:	682b      	ldr	r3, [r5, #0]
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	d0c6      	beq.n	801cb18 <__sflush_r+0x30>
 801cb8a:	2b1d      	cmp	r3, #29
 801cb8c:	d001      	beq.n	801cb92 <__sflush_r+0xaa>
 801cb8e:	2b16      	cmp	r3, #22
 801cb90:	d11d      	bne.n	801cbce <__sflush_r+0xe6>
 801cb92:	602f      	str	r7, [r5, #0]
 801cb94:	2000      	movs	r0, #0
 801cb96:	e021      	b.n	801cbdc <__sflush_r+0xf4>
 801cb98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cb9c:	b21b      	sxth	r3, r3
 801cb9e:	e01a      	b.n	801cbd6 <__sflush_r+0xee>
 801cba0:	690f      	ldr	r7, [r1, #16]
 801cba2:	2f00      	cmp	r7, #0
 801cba4:	d0f6      	beq.n	801cb94 <__sflush_r+0xac>
 801cba6:	0793      	lsls	r3, r2, #30
 801cba8:	680e      	ldr	r6, [r1, #0]
 801cbaa:	bf08      	it	eq
 801cbac:	694b      	ldreq	r3, [r1, #20]
 801cbae:	600f      	str	r7, [r1, #0]
 801cbb0:	bf18      	it	ne
 801cbb2:	2300      	movne	r3, #0
 801cbb4:	1bf6      	subs	r6, r6, r7
 801cbb6:	608b      	str	r3, [r1, #8]
 801cbb8:	2e00      	cmp	r6, #0
 801cbba:	ddeb      	ble.n	801cb94 <__sflush_r+0xac>
 801cbbc:	6a21      	ldr	r1, [r4, #32]
 801cbbe:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801cbc2:	4633      	mov	r3, r6
 801cbc4:	463a      	mov	r2, r7
 801cbc6:	4628      	mov	r0, r5
 801cbc8:	47e0      	blx	ip
 801cbca:	2800      	cmp	r0, #0
 801cbcc:	dc07      	bgt.n	801cbde <__sflush_r+0xf6>
 801cbce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cbd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cbd6:	81a3      	strh	r3, [r4, #12]
 801cbd8:	f04f 30ff 	mov.w	r0, #4294967295
 801cbdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cbde:	4407      	add	r7, r0
 801cbe0:	1a36      	subs	r6, r6, r0
 801cbe2:	e7e9      	b.n	801cbb8 <__sflush_r+0xd0>
 801cbe4:	dfbffffe 	.word	0xdfbffffe

0801cbe8 <_fflush_r>:
 801cbe8:	b538      	push	{r3, r4, r5, lr}
 801cbea:	690b      	ldr	r3, [r1, #16]
 801cbec:	4605      	mov	r5, r0
 801cbee:	460c      	mov	r4, r1
 801cbf0:	b913      	cbnz	r3, 801cbf8 <_fflush_r+0x10>
 801cbf2:	2500      	movs	r5, #0
 801cbf4:	4628      	mov	r0, r5
 801cbf6:	bd38      	pop	{r3, r4, r5, pc}
 801cbf8:	b118      	cbz	r0, 801cc02 <_fflush_r+0x1a>
 801cbfa:	6a03      	ldr	r3, [r0, #32]
 801cbfc:	b90b      	cbnz	r3, 801cc02 <_fflush_r+0x1a>
 801cbfe:	f7ff fc93 	bl	801c528 <__sinit>
 801cc02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cc06:	2b00      	cmp	r3, #0
 801cc08:	d0f3      	beq.n	801cbf2 <_fflush_r+0xa>
 801cc0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801cc0c:	07d0      	lsls	r0, r2, #31
 801cc0e:	d404      	bmi.n	801cc1a <_fflush_r+0x32>
 801cc10:	0599      	lsls	r1, r3, #22
 801cc12:	d402      	bmi.n	801cc1a <_fflush_r+0x32>
 801cc14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cc16:	f7ff fe6c 	bl	801c8f2 <__retarget_lock_acquire_recursive>
 801cc1a:	4628      	mov	r0, r5
 801cc1c:	4621      	mov	r1, r4
 801cc1e:	f7ff ff63 	bl	801cae8 <__sflush_r>
 801cc22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cc24:	07da      	lsls	r2, r3, #31
 801cc26:	4605      	mov	r5, r0
 801cc28:	d4e4      	bmi.n	801cbf4 <_fflush_r+0xc>
 801cc2a:	89a3      	ldrh	r3, [r4, #12]
 801cc2c:	059b      	lsls	r3, r3, #22
 801cc2e:	d4e1      	bmi.n	801cbf4 <_fflush_r+0xc>
 801cc30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cc32:	f7ff fe5f 	bl	801c8f4 <__retarget_lock_release_recursive>
 801cc36:	e7dd      	b.n	801cbf4 <_fflush_r+0xc>

0801cc38 <__swhatbuf_r>:
 801cc38:	b570      	push	{r4, r5, r6, lr}
 801cc3a:	460c      	mov	r4, r1
 801cc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc40:	2900      	cmp	r1, #0
 801cc42:	b096      	sub	sp, #88	@ 0x58
 801cc44:	4615      	mov	r5, r2
 801cc46:	461e      	mov	r6, r3
 801cc48:	da0d      	bge.n	801cc66 <__swhatbuf_r+0x2e>
 801cc4a:	89a3      	ldrh	r3, [r4, #12]
 801cc4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801cc50:	f04f 0100 	mov.w	r1, #0
 801cc54:	bf14      	ite	ne
 801cc56:	2340      	movne	r3, #64	@ 0x40
 801cc58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801cc5c:	2000      	movs	r0, #0
 801cc5e:	6031      	str	r1, [r6, #0]
 801cc60:	602b      	str	r3, [r5, #0]
 801cc62:	b016      	add	sp, #88	@ 0x58
 801cc64:	bd70      	pop	{r4, r5, r6, pc}
 801cc66:	466a      	mov	r2, sp
 801cc68:	f000 f848 	bl	801ccfc <_fstat_r>
 801cc6c:	2800      	cmp	r0, #0
 801cc6e:	dbec      	blt.n	801cc4a <__swhatbuf_r+0x12>
 801cc70:	9901      	ldr	r1, [sp, #4]
 801cc72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801cc76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801cc7a:	4259      	negs	r1, r3
 801cc7c:	4159      	adcs	r1, r3
 801cc7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801cc82:	e7eb      	b.n	801cc5c <__swhatbuf_r+0x24>

0801cc84 <__smakebuf_r>:
 801cc84:	898b      	ldrh	r3, [r1, #12]
 801cc86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cc88:	079d      	lsls	r5, r3, #30
 801cc8a:	4606      	mov	r6, r0
 801cc8c:	460c      	mov	r4, r1
 801cc8e:	d507      	bpl.n	801cca0 <__smakebuf_r+0x1c>
 801cc90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801cc94:	6023      	str	r3, [r4, #0]
 801cc96:	6123      	str	r3, [r4, #16]
 801cc98:	2301      	movs	r3, #1
 801cc9a:	6163      	str	r3, [r4, #20]
 801cc9c:	b003      	add	sp, #12
 801cc9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cca0:	ab01      	add	r3, sp, #4
 801cca2:	466a      	mov	r2, sp
 801cca4:	f7ff ffc8 	bl	801cc38 <__swhatbuf_r>
 801cca8:	9f00      	ldr	r7, [sp, #0]
 801ccaa:	4605      	mov	r5, r0
 801ccac:	4639      	mov	r1, r7
 801ccae:	4630      	mov	r0, r6
 801ccb0:	f7ff fe8e 	bl	801c9d0 <_malloc_r>
 801ccb4:	b948      	cbnz	r0, 801ccca <__smakebuf_r+0x46>
 801ccb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ccba:	059a      	lsls	r2, r3, #22
 801ccbc:	d4ee      	bmi.n	801cc9c <__smakebuf_r+0x18>
 801ccbe:	f023 0303 	bic.w	r3, r3, #3
 801ccc2:	f043 0302 	orr.w	r3, r3, #2
 801ccc6:	81a3      	strh	r3, [r4, #12]
 801ccc8:	e7e2      	b.n	801cc90 <__smakebuf_r+0xc>
 801ccca:	89a3      	ldrh	r3, [r4, #12]
 801cccc:	6020      	str	r0, [r4, #0]
 801ccce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ccd2:	81a3      	strh	r3, [r4, #12]
 801ccd4:	9b01      	ldr	r3, [sp, #4]
 801ccd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ccda:	b15b      	cbz	r3, 801ccf4 <__smakebuf_r+0x70>
 801ccdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cce0:	4630      	mov	r0, r6
 801cce2:	f000 f81d 	bl	801cd20 <_isatty_r>
 801cce6:	b128      	cbz	r0, 801ccf4 <__smakebuf_r+0x70>
 801cce8:	89a3      	ldrh	r3, [r4, #12]
 801ccea:	f023 0303 	bic.w	r3, r3, #3
 801ccee:	f043 0301 	orr.w	r3, r3, #1
 801ccf2:	81a3      	strh	r3, [r4, #12]
 801ccf4:	89a3      	ldrh	r3, [r4, #12]
 801ccf6:	431d      	orrs	r5, r3
 801ccf8:	81a5      	strh	r5, [r4, #12]
 801ccfa:	e7cf      	b.n	801cc9c <__smakebuf_r+0x18>

0801ccfc <_fstat_r>:
 801ccfc:	b538      	push	{r3, r4, r5, lr}
 801ccfe:	4d07      	ldr	r5, [pc, #28]	@ (801cd1c <_fstat_r+0x20>)
 801cd00:	2300      	movs	r3, #0
 801cd02:	4604      	mov	r4, r0
 801cd04:	4608      	mov	r0, r1
 801cd06:	4611      	mov	r1, r2
 801cd08:	602b      	str	r3, [r5, #0]
 801cd0a:	f7e5 f80c 	bl	8001d26 <_fstat>
 801cd0e:	1c43      	adds	r3, r0, #1
 801cd10:	d102      	bne.n	801cd18 <_fstat_r+0x1c>
 801cd12:	682b      	ldr	r3, [r5, #0]
 801cd14:	b103      	cbz	r3, 801cd18 <_fstat_r+0x1c>
 801cd16:	6023      	str	r3, [r4, #0]
 801cd18:	bd38      	pop	{r3, r4, r5, pc}
 801cd1a:	bf00      	nop
 801cd1c:	20001c5c 	.word	0x20001c5c

0801cd20 <_isatty_r>:
 801cd20:	b538      	push	{r3, r4, r5, lr}
 801cd22:	4d06      	ldr	r5, [pc, #24]	@ (801cd3c <_isatty_r+0x1c>)
 801cd24:	2300      	movs	r3, #0
 801cd26:	4604      	mov	r4, r0
 801cd28:	4608      	mov	r0, r1
 801cd2a:	602b      	str	r3, [r5, #0]
 801cd2c:	f7e5 f80a 	bl	8001d44 <_isatty>
 801cd30:	1c43      	adds	r3, r0, #1
 801cd32:	d102      	bne.n	801cd3a <_isatty_r+0x1a>
 801cd34:	682b      	ldr	r3, [r5, #0]
 801cd36:	b103      	cbz	r3, 801cd3a <_isatty_r+0x1a>
 801cd38:	6023      	str	r3, [r4, #0]
 801cd3a:	bd38      	pop	{r3, r4, r5, pc}
 801cd3c:	20001c5c 	.word	0x20001c5c

0801cd40 <_sbrk_r>:
 801cd40:	b538      	push	{r3, r4, r5, lr}
 801cd42:	4d06      	ldr	r5, [pc, #24]	@ (801cd5c <_sbrk_r+0x1c>)
 801cd44:	2300      	movs	r3, #0
 801cd46:	4604      	mov	r4, r0
 801cd48:	4608      	mov	r0, r1
 801cd4a:	602b      	str	r3, [r5, #0]
 801cd4c:	f7e5 f810 	bl	8001d70 <_sbrk>
 801cd50:	1c43      	adds	r3, r0, #1
 801cd52:	d102      	bne.n	801cd5a <_sbrk_r+0x1a>
 801cd54:	682b      	ldr	r3, [r5, #0]
 801cd56:	b103      	cbz	r3, 801cd5a <_sbrk_r+0x1a>
 801cd58:	6023      	str	r3, [r4, #0]
 801cd5a:	bd38      	pop	{r3, r4, r5, pc}
 801cd5c:	20001c5c 	.word	0x20001c5c

0801cd60 <_init>:
 801cd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd62:	bf00      	nop
 801cd64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cd66:	bc08      	pop	{r3}
 801cd68:	469e      	mov	lr, r3
 801cd6a:	4770      	bx	lr

0801cd6c <_fini>:
 801cd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd6e:	bf00      	nop
 801cd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cd72:	bc08      	pop	{r3}
 801cd74:	469e      	mov	lr, r3
 801cd76:	4770      	bx	lr
